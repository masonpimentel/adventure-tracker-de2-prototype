
sdcard.elf:     file format elf32-littlenios2
sdcard.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x000188f4 memsz 0x000188f4 flags r-x
    LOAD off    0x00019914 vaddr 0x01018914 paddr 0x0101a420 align 2**12
         filesz 0x00001b0c memsz 0x00001b0c flags rw-
    LOAD off    0x0001bf2c vaddr 0x0101bf2c paddr 0x0101bf2c align 2**12
         filesz 0x00000000 memsz 0x00000988 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017e58  010001b8  010001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000904  01018010  01018010  00019010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b0c  01018914  0101a420  00019914  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000988  0101bf2c  0101bf2c  0001bf2c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001b420  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001158  00000000  00000000  0001b448  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000021e3  00000000  00000000  0001c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00036201  00000000  00000000  0001e783  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b21c  00000000  00000000  00054984  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001df7a  00000000  00000000  0005fba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002788  00000000  00000000  0007db1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002fc7  00000000  00000000  000802a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00013e0e  00000000  00000000  0008326b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0009707c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b80  00000000  00000000  000970b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009c270  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0009c273  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009c27f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009c280  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0009c281  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0009c28c  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0009c297  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0009c2a2  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000062  00000000  00000000  0009c2ad  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00086ce4  00000000  00000000  0009c30f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b8 l    d  .text	00000000 .text
01018010 l    d  .rodata	00000000 .rodata
01018914 l    d  .rwdata	00000000 .rwdata
0101bf2c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 sdcard.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01000704 l     F .text	00000058 __sprint_r
0101822e l     O .rodata	00000010 blanks.3452
0101821e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
01018246 l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
01018369 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
01003ee8 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
010058e4 l     F .text	00000058 std
010059f0 l     F .text	00000008 __fp_lock
010059f8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01018914 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
0101a3ec l     O .rwdata	00000004 charset
01018510 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
01018658 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
01008da8 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
01009248 l     F .text	00000048 match
0101913c l     O .rwdata	00000014 fpi.1950
01018674 l     O .rodata	00000028 tinytens
01019128 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0100b940 l     F .text	00000024 htinit
0100b9cc l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0100c234 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0100d458 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0100e680 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0100f158 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100f1b8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100f2b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0100f3d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100f4b8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100f614 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100f840 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0101a410 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0100fadc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
010192f8 l     O .rwdata	00001060 jtag_uart_0
0101a358 l     O .rwdata	0000002c character_lcd_0
0101a384 l     O .rwdata	0000002c rs232_0
0101a3b0 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
0100fbf8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
01018854 l     O .rodata	00000016 __func__.4813
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0101442c l     F .text	0000022c altera_avalon_jtag_uart_irq
01014658 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01014cd4 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
010158e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01015ad0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01015dcc l     F .text	000000dc alt_file_locked
01016030 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
010167b0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 vfprintf.c
01016ccc l     F .text	00000058 __sprint_r
01018904 l     O .rodata	00000010 blanks.3391
010188f4 l     O .rodata	00000010 zeroes.3392
00000000 l    df *ABS*	00000000 alt_exit.c
01017dec l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
01017fac l     F .text	00000060 alt_get_errno
0101bf5c g     O .bss	00000004 aux_status_register
01007a08 g     F .text	00000094 _mprec_log10
01007af4 g     F .text	00000088 __any_on
0100c4c8 g     F .text	00000070 _isatty_r
01018630 g     O .rodata	00000028 __mprec_tinytens
0100f674 g     F .text	0000006c alt_main
01000560 g     F .text	000000a0 _puts_r
0101c624 g     O .bss	00000100 alt_irq
0100c538 g     F .text	00000078 _lseek_r
0101a420 g       *ABS*	00000000 __flash_rwdata_start
01014e4c g     F .text	00000034 alt_up_character_lcd_send_cmd
0100df78 g     F .text	00000088 __eqdf2
0100ffe0 g     F .text	000001b0 Check_for_Master_Boot_Record
0101c8b4 g       *ABS*	00000000 __alt_heap_start
01013ea8 g     F .text	000001f8 alt_up_sd_card_fclose
01016c58 g     F .text	00000074 _kill_r
010004e8 g     F .text	00000044 printf
01016b98 g     F .text	000000a0 _signal_r
01009048 g     F .text	00000068 __sseek
0100594c g     F .text	000000a4 __sinit
0100688c g     F .text	00000084 _setlocale_r
01005a4c g     F .text	00000068 __sfmoreglue
0100b5f0 g     F .text	0000001c ungetc
0100f700 g     F .text	00000020 __malloc_unlock
01015534 g     F .text	00000090 alt_up_rs232_read_fd
01009290 g     F .text	000014e4 _strtod_r
0101bf80 g     O .bss	00000004 current_sector_modified
0101419c g     F .text	00000090 Read_Sector_Data_Attempt_CRC
01007484 g     F .text	000000e0 memmove
010002bc g     F .text	000000c8 readFromFile
01005a3c g     F .text	00000010 _cleanup
01007b7c g     F .text	000000bc _Balloc
01012a54 g     F .text	000000c8 alt_up_sd_card_is_Present
0100fcf8 g     F .text	00000050 Save_Modified_Sector
0100e088 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
01014dd0 g     F .text	0000007c get_DDRAM_addr
01000000 g     F .entry	0000001c __reset
0101bf78 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
01000020 g       *ABS*	00000000 __flash_exceptions_start
0100b8cc g     F .text	00000074 _fstat_r
0101bf44 g     O .bss	00000004 errno
01003cac g     F .text	00000024 __svfscanf
0100e9bc g     F .text	0000002c __make_fp
0101bf4c g     O .bss	00000004 alt_argv
010223dc g       *ABS*	00000000 _gp
01013014 g     F .text	000003a8 alt_up_sd_card_fopen
01012b90 g     F .text	000000d4 alt_up_sd_card_find_first
0101bf6c g     O .bss	00000004 command_argument_register
01017e4c g     F .text	00000020 getpid
01019178 g     O .rwdata	00000180 alt_fd_list
01012284 g     F .text	0000012c find_first_empty_record_in_root_directory
01015a0c g     F .text	00000094 alt_find_dev
010073e4 g     F .text	000000a0 memcpy
0100c280 g     F .text	00000248 __hexnan
01014fe4 g     F .text	0000004c alt_up_character_lcd_write_fd
01005a30 g     F .text	0000000c _cleanup_r
0100e2a8 g     F .text	000000f8 __floatsidf
01015b94 g     F .text	00000078 alt_io_redirect
0100e198 g     F .text	00000088 __ltdf2
01018010 g       *ABS*	00000000 __DTOR_END__
010154c0 g     F .text	00000074 alt_up_rs232_read_data
01000600 g     F .text	00000014 puts
01007280 g     F .text	00000040 mbrtowc
01011e94 g     F .text	000001a4 find_first_empty_cluster
01003cd0 g     F .text	00000068 _vfscanf_r
01007958 g     F .text	000000b0 __ratio
01012990 g     F .text	000000c4 alt_up_sd_card_open_dev
01017dc8 g     F .text	00000024 __vfiprintf_internal
01014870 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0100052c g     F .text	00000034 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0100e7bc g     F .text	00000008 __udivsi3
0100f318 g     F .text	000000c0 isatty
0101697c g     F .text	000000cc _raise_r
0100683c g     F .text	0000002c iswspace
010164bc g     F .text	00000064 __assert_func
01018540 g     O .rodata	000000c8 __mprec_tens
01006868 g     F .text	00000008 __locale_charset
0100c6c0 g     F .text	000000a4 __fixunsdfsi
0101642c g     F .text	00000090 alt_icache_flush
0101bf38 g     O .bss	00000004 __malloc_top_pad
01016c54 g     F .text	00000004 _getpid_r
0100b064 g     F .text	00000024 strtoul
0101a3e8 g     O .rwdata	00000004 __mb_cur_max
01006870 g     F .text	0000000c _localeconv_r
0100b088 g     F .text	000002f0 _strtoull_r
01008274 g     F .text	0000003c __i2b
01006220 g     F .text	0000049c __sfvwrite_r
01016ad0 g     F .text	000000b4 __sigtramp_r
01011170 g     F .text	000000c0 get_dir_divider_location
01008e34 g     F .text	00000070 _sbrk_r
01010e10 g     F .text	000000d0 filename_to_upper_case
010133bc g     F .text	00000090 alt_up_sd_card_set_attributes
01010190 g     F .text	00000284 Read_File_Record_At_Offset
0100c5b0 g     F .text	00000078 _read_r
01018d14 g     O .rwdata	0000000c __lc_ctype
0101a408 g     O .rwdata	00000004 alt_max_fd
01015428 g     F .text	00000050 alt_up_rs232_check_parity
0100ecfc g     F .text	00000138 __unpack_d
01011a30 g     F .text	00000464 find_file_in_directory
0100b7a8 g     F .text	00000110 _fclose_r
010058b0 g     F .text	00000034 fflush
0101bf3c g     O .bss	00000004 __malloc_max_sbrked_mem
01015c0c g     F .text	000001c0 alt_irq_register
01012b1c g     F .text	00000074 alt_up_sd_card_is_FAT16
0100d8e8 g     F .text	00000074 __adddf3
0100d2f0 g     F .text	00000078 __nesf2
01007838 g     F .text	00000120 __b2d
0100cd40 g     F .text	000005b0 __umoddi3
0100f524 g     F .text	000000f0 lseek
0101a3e4 g     O .rwdata	00000004 _global_impure_ptr
0101151c g     F .text	00000514 get_home_directory_cluster_for_file
010085f0 g     F .text	000005f4 _realloc_r
0101c8b4 g       *ABS*	00000000 __bss_end
01016128 g     F .text	0000010c alt_tick
0101bfbc g     O .bss	00000100 __hexdig
0100c764 g     F .text	000005dc __udivdi3
01018608 g     O .rodata	00000028 __mprec_bigtens
010084d0 g     F .text	00000120 __s2b
01016964 g     F .text	00000018 abort
0100e4ec g     F .text	00000194 __floatunsidf
01007758 g     F .text	00000060 __mcmp
0101bf84 g     O .bss	00000004 current_sector_index
0101a3dc g     O .rwdata	00000004 __ctype_ptr
01005a18 g     F .text	00000018 __fp_lock_all
01016090 g     F .text	00000098 alt_alarm_stop
0100aaf8 g     F .text	00000024 strtol
0100fefc g     F .text	000000e4 mark_cluster
0101bf88 g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000cc alt_irq_handler
01019150 g     O .rwdata	00000028 alt_dev_null
010123b0 g     F .text	000001b8 convert_filename_to_name_extension
0100e84c g     F .text	000000c8 __unpack_f
010152cc g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
010157ec g     F .text	00000044 alt_dcache_flush_all
01007624 g     F .text	00000070 __hi0bits
0101bf58 g     O .bss	00000004 is_sd_card_formated_as_FAT16
0100e3a0 g     F .text	000000d8 __fixdfsi
01012038 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
0100a898 g     F .text	0000001c strtod
01000204 g     F .text	000000b8 writeToFile
0101a420 g       *ABS*	00000000 __ram_rwdata_end
0101a400 g     O .rwdata	00000008 alt_dev_list
0100f9bc g     F .text	00000120 write
0101bf7c g     O .bss	00000004 device_pointer
0100d368 g     F .text	00000078 __gtsf2
01018914 g       *ABS*	00000000 __ram_rodata_end
0100f1e4 g     F .text	000000d4 fstat
010155c4 g     F .text	00000094 alt_up_rs232_write_fd
01017e6c g     F .text	00000140 kill
0100e220 g     F .text	00000088 __ledf2
010083b0 g     F .text	00000120 __pow5mult
01016d24 g     F .text	000010a4 ___vfiprintf_internal_r
0101bf2c g     O .bss	00000004 __nlocale_changed
0100e7c4 g     F .text	00000008 __umodsi3
01000614 g     F .text	00000034 _scanf_r
0101c8b4 g       *ABS*	00000000 end
0100eefc g     F .text	00000160 __pack_f
01014374 g     F .text	000000b8 altera_avalon_jtag_uart_init
0101800c g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
01014d48 g     F .text	00000088 alt_avalon_timer_sc_init
0100e7cc g     F .text	00000080 __clzsi2
01014a94 g     F .text	00000240 altera_avalon_jtag_uart_write
0100593c g     F .text	00000004 __sfp_lock_acquire
01007300 g     F .text	000000e4 memchr
01014ef4 g     F .text	00000078 alt_up_character_lcd_write
0100075c g     F .text	00001eac ___vfprintf_internal_r
01008fe0 g     F .text	00000060 _sprintf_r
01005f0c g     F .text	00000314 _free_r
010167b4 g     F .text	000001b0 __call_exitprocs
0101bf30 g     O .bss	00000004 __mlocale_changed
0101a3f4 g     O .rwdata	00000004 __malloc_sbrk_base
010001b8 g     F .text	0000004c _start
0101bf8c g     O .bss	00000004 _alt_tick_rate
0100ab1c g     F .text	00000318 _strtoll_r
01007f40 g     F .text	0000014c __lshift
0101bf90 g     O .bss	00000004 _alt_nticks
01016c38 g     F .text	0000001c signal
0100f720 g     F .text	00000120 read
0100fb70 g     F .text	00000088 alt_sys_init
01015158 g     F .text	000000b0 alt_up_character_lcd_shift_display
0101667c g     F .text	00000134 __register_exitproc
010153e8 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
0100808c g     F .text	000001e8 __multiply
01015208 g     F .text	00000090 alt_up_character_lcd_erase_pos
01014708 g     F .text	00000074 altera_avalon_jtag_uart_close
01018914 g       *ABS*	00000000 __ram_rwdata_start
01018010 g       *ABS*	00000000 __ram_rodata_start
0101bf94 g     O .bss	00000028 __malloc_current_mallinfo
01007c38 g     F .text	0000017c __d2b
0101bf54 g     O .bss	00000004 initialized
0101422c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0100ae34 g     F .text	00000230 _strtoul_r
01016374 g     F .text	000000b8 alt_get_fd
0101c0bc g     O .bss	00000014 search_data
0100ee34 g     F .text	000000c8 __fpcmp_parts_d
0100b738 g     F .text	00000070 _close_r
010165ec g     F .text	00000074 memcmp
010142dc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0101c8b4 g       *ABS*	00000000 __alt_stack_base
01014324 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01003dac g     F .text	0000013c __swsetup_r
0100dd20 g     F .text	00000258 __divdf3
01005ab4 g     F .text	000000f0 __sfp
0101c0d0 g     O .bss	00000054 boot_sector_data
01007a9c g     F .text	00000058 __copybits
01018d20 g     O .rwdata	00000408 __malloc_av_
01005948 g     F .text	00000004 __sinit_lock_release
0100d95c g     F .text	000003c4 __muldf3
0100912c g     F .text	00000060 __sread
01005da0 g     F .text	00000040 fread
01015354 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
01016254 g     F .text	00000120 alt_find_file
01015830 g     F .text	000000b4 alt_dev_llist_insert
0100f6e0 g     F .text	00000020 __malloc_lock
0100f900 g     F .text	000000bc sbrk
010056b4 g     F .text	000001fc _fflush_r
0100b684 g     F .text	000000b4 _calloc_r
0101bf2c g       *ABS*	00000000 __bss_start
01007564 g     F .text	00000098 memset
01000384 g     F .text	00000164 main
0101bf50 g     O .bss	00000004 alt_envp
0101bf40 g     O .bss	00000004 __malloc_max_total_mem
01014284 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0100d3e0 g     F .text	00000078 __ltsf2
0101344c g     F .text	0000008c alt_up_sd_card_get_attributes
01005ba4 g     F .text	000001fc _fread_r
0100fc30 g     F .text	000000c8 Write_Sector_Data
0101386c g     F .text	0000063c alt_up_sd_card_write
010150a8 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
01009040 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
0100b8b8 g     F .text	00000014 fclose
0100a8b4 g     F .text	00000244 _strtol_r
0100e478 g     F .text	00000074 __truncdfsf2
0101c724 g     O .bss	00000190 _atexit0
01004100 g     F .text	000015b4 _dtoa_r
01006ac0 g     F .text	00000740 _malloc_r
0101a40c g     O .rwdata	00000004 alt_errno
010165c4 g     F .text	00000028 _fiprintf_r
0100b378 g     F .text	000000dc __submore
01016ac0 g     F .text	00000010 _init_signal
01006784 g     F .text	000000b8 _fwalk
010072c0 g     F .text	00000040 _mbtowc_r
0100e6fc g     F .text	00000060 __divsi3
010186b8 g     O .rodata	00000014 __thenan_df
01014eb4 g     F .text	00000040 alt_up_character_lcd_open_dev
01005de0 g     F .text	0000012c _malloc_trim_r
01018010 g       *ABS*	00000000 __CTOR_END__
0101bf60 g     O .bss	00000004 status_register
01014e80 g     F .text	00000034 alt_up_character_lcd_init
0100918c g     F .text	000000bc strcmp
0101bf68 g     O .bss	00000004 command_register
01018010 g       *ABS*	00000000 __flash_rodata_start
01018010 g       *ABS*	00000000 __DTOR_LIST__
01015658 g     F .text	00000040 alt_up_rs232_open_dev
0100e000 g     F .text	00000088 __nedf2
0100fb3c g     F .text	00000034 alt_irq_init
0100f8a0 g     F .text	00000060 alt_release_fd
0100fe44 g     F .text	000000b8 get_cluster_flag
01008f6c g     F .text	00000074 sprintf
01015298 g     F .text	00000034 alt_up_character_lcd_cursor_off
010186cc g     O .rodata	00000100 __clz_tab
01010414 g     F .text	000002b8 Write_File_Record_At_Offset
0101bf34 g     O .bss	00000004 _PathLocale
0100a774 g     F .text	00000124 strtof
01016534 g     F .text	00000014 atexit
0100b60c g     F .text	00000078 _write_r
01006910 g     F .text	0000001c setlocale
01000648 g     F .text	00000048 scanf
010106cc g     F .text	00000640 Check_for_DOS_FAT
01012568 g     F .text	000002d4 create_file
01008f64 g     F .text	00000008 nanf
0101a3e0 g     O .rwdata	00000004 _impure_ptr
0101bf64 g     O .bss	00000004 CSD_register_w0
0101bf48 g     O .bss	00000004 alt_argc
01007200 g     F .text	00000080 _mbrtowc_r
010159a8 g     F .text	00000064 _do_dtors
01008be4 g     F .text	000001c4 __srefill_r
01000020 g       .exceptions	00000000 alt_irq_entry
010077b8 g     F .text	00000080 __ulp
01008dc4 g     F .text	00000040 __isinfd
01005a00 g     F .text	00000018 __fp_unlock_all
0101a3f8 g     O .rwdata	00000008 alt_fs_list
01010ee0 g     F .text	00000290 check_file_name_for_FAT16_compliance
0101bf70 g     O .bss	00000004 buffer_memory
01015300 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
01015478 g     F .text	00000048 alt_up_rs232_write_data
01000020 g       *ABS*	00000000 __ram_exceptions_start
0100687c g     F .text	00000010 localeconv
01000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0100b964 g     F .text	00000068 __hexdig_init
0101bf74 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
0101a420 g       *ABS*	00000000 _edata
0101c8b4 g       *ABS*	00000000 _end
0101c124 g     O .bss	00000500 active_files
010001b8 g       *ABS*	00000000 __ram_exceptions_end
01003d38 g     F .text	00000074 vfscanf
0101283c g     F .text	00000154 copy_file_record_name_to_string
0101477c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
01010d0c g     F .text	00000104 Look_for_FAT16
010090b0 g     F .text	0000007c __swrite
0101a3f0 g     O .rwdata	00000004 __malloc_trim_threshold
01016234 g     F .text	00000020 altera_nios2_qsys_irq_init
01016548 g     F .text	00000038 exit
01016580 g     F .text	00000044 fiprintf
01016660 g     F .text	0000001c _vfiprintf_r
01012c64 g     F .text	000003b0 alt_up_sd_card_find_next
010066bc g     F .text	000000c8 _fwalk_reent
01007db4 g     F .text	0000018c __mdiff
0100e75c g     F .text	00000060 __modsi3
0100fd48 g     F .text	000000fc Read_Sector_Data
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01005940 g     F .text	00000004 __sfp_lock_release
01014f6c g     F .text	00000078 alt_up_character_lcd_string
01008ea4 g     F .text	000000c0 __sccl
01018268 g     O .rodata	00000101 _ctype_
0100e914 g     F .text	000000a8 __fpcmp_parts_f
01017e2c g     F .text	00000020 _exit
01008e04 g     F .text	00000030 __isnand
01015698 g     F .text	00000154 alt_alarm_start
0100c628 g     F .text	00000098 __muldi3
010140a0 g     F .text	000000fc Read_Sector_Data_CRC
010134d8 g     F .text	00000394 alt_up_sd_card_read
0100692c g     F .text	00000194 __smakebuf_r
01000690 g     F .text	00000074 strlen
01016a5c g     F .text	00000064 _init_signal_r
01015ea8 g     F .text	00000188 open
0100e110 g     F .text	00000088 __gedf2
0100ba7c g     F .text	000007b8 __gethex
01016520 g     F .text	00000014 __assert
01015aa0 g     F .text	00000030 alt_icache_flush_all
01015030 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0101a414 g     O .rwdata	00000004 alt_priority_mask
01002608 g     F .text	00000024 __vfprintf_internal
0100d868 g     F .text	00000080 __subdf3
01007694 g     F .text	000000c4 __lo0bits
0100262c g     F .text	00001680 __svfscanf_r
0101a418 g     O .rwdata	00000008 alt_alarm_list
0100b454 g     F .text	0000019c _ungetc_r
01015944 g     F .text	00000064 _do_ctors
01016b84 g     F .text	00000014 __sigtramp
010153ac g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
0100f05c g     F .text	000000fc close
0100f438 g     F .text	00000080 alt_load
0100e9e8 g     F .text	00000314 __pack_d
01011230 g     F .text	000002ec match_file_record_to_name_ext
01016a48 g     F .text	00000014 raise
00000000  w      *UND*	00000000 free
01005944 g     F .text	00000004 __sinit_lock_acquire
010082b0 g     F .text	00000100 __multadd
010075fc g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00900014 	movui	r2,16384
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406e14 	ori	at,at,440
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000171e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c040b4 	movhi	r3,258
 1000134:	18f18904 	addi	r3,r3,-14812
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11800017 	ldw	r6,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c040b4 	movhi	r3,258
 100014c:	18f18904 	addi	r3,r3,-14812
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	e17ffd17 	ldw	r5,-12(fp)
 1000164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe21e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fdd06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a4:	e037883a 	mov	sp,fp
 10001a8:	dfc00117 	ldw	ra,4(sp)
 10001ac:	df000017 	ldw	fp,0(sp)
 10001b0:	dec00204 	addi	sp,sp,8
 10001b4:	f800283a 	ret

Disassembly of section .text:

010001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c4:	00bffd16 	blt	zero,r2,10001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c8:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001d0:	068040b4 	movhi	gp,258
    ori gp, gp, %lo(_gp)
 10001d4:	d688f714 	ori	gp,gp,9180
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d8:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001dc:	10afcb14 	ori	r2,r2,48940

    movhi r3, %hi(__bss_end)
 10001e0:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001e4:	18f22d14 	ori	r3,r3,51380

    beq r2, r3, 1f
 10001e8:	10c00326 	beq	r2,r3,10001f8 <_start+0x40>

0:
    stw zero, (r2)
 10001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f4:	10fffd36 	bltu	r2,r3,10001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f8:	100f4380 	call	100f438 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001fc:	100f6740 	call	100f674 <alt_main>

01000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000200:	003fff06 	br	1000200 <alt_after_alt_main>

01000204 <writeToFile>:
#include <stdio.h>
#include "Altera_UP_SD_Card_Avalon_Interface.h"

void writeToFile(void) {
 1000204:	defffc04 	addi	sp,sp,-16
 1000208:	dfc00315 	stw	ra,12(sp)
 100020c:	df000215 	stw	fp,8(sp)
 1000210:	df000204 	addi	fp,sp,8
	short int myFileHandle;
	int i;

	if((myFileHandle = alt_up_sd_card_fopen("text1.txt", true)) != -1) {
 1000214:	010040b4 	movhi	r4,258
 1000218:	21200404 	addi	r4,r4,-32752
 100021c:	01400044 	movi	r5,1
 1000220:	10130140 	call	1013014 <alt_up_sd_card_fopen>
 1000224:	e0bfff0d 	sth	r2,-4(fp)
 1000228:	e0bfff0f 	ldh	r2,-4(fp)
 100022c:	10bfffe0 	cmpeqi	r2,r2,-1
 1000230:	10001a1e 	bne	r2,zero,100029c <writeToFile+0x98>
		printf("File Opened\n");
 1000234:	010040b4 	movhi	r4,258
 1000238:	21200704 	addi	r4,r4,-32740
 100023c:	10006000 	call	1000600 <puts>

		for(i = 0; i < 5; i ++) {
 1000240:	e03ffe15 	stw	zero,-8(fp)
 1000244:	00000c06 	br	1000278 <writeToFile+0x74>
			if(alt_up_sd_card_write(myFileHandle,'A') == false){
 1000248:	e13fff0f 	ldh	r4,-4(fp)
 100024c:	01401044 	movi	r5,65
 1000250:	101386c0 	call	101386c <alt_up_sd_card_write>
 1000254:	1004c03a 	cmpne	r2,r2,zero
 1000258:	1000041e 	bne	r2,zero,100026c <writeToFile+0x68>
				printf("Error writing to file...\n");
 100025c:	010040b4 	movhi	r4,258
 1000260:	21200a04 	addi	r4,r4,-32728
 1000264:	10006000 	call	1000600 <puts>
				return;
 1000268:	00000f06 	br	10002a8 <writeToFile+0xa4>
	int i;

	if((myFileHandle = alt_up_sd_card_fopen("text1.txt", true)) != -1) {
		printf("File Opened\n");

		for(i = 0; i < 5; i ++) {
 100026c:	e0bffe17 	ldw	r2,-8(fp)
 1000270:	10800044 	addi	r2,r2,1
 1000274:	e0bffe15 	stw	r2,-8(fp)
 1000278:	e0bffe17 	ldw	r2,-8(fp)
 100027c:	10800150 	cmplti	r2,r2,5
 1000280:	103ff11e 	bne	r2,zero,1000248 <writeToFile+0x44>
			if(alt_up_sd_card_write(myFileHandle,'A') == false){
				printf("Error writing to file...\n");
				return;
			}
		}
		printf("Done!!!\n");
 1000284:	010040b4 	movhi	r4,258
 1000288:	21201104 	addi	r4,r4,-32700
 100028c:	10006000 	call	1000600 <puts>
		alt_up_sd_card_fclose(myFileHandle);
 1000290:	e13fff0f 	ldh	r4,-4(fp)
 1000294:	1013ea80 	call	1013ea8 <alt_up_sd_card_fclose>
 1000298:	00000306 	br	10002a8 <writeToFile+0xa4>
	}
	else
		printf("File NOT Opened\n");
 100029c:	010040b4 	movhi	r4,258
 10002a0:	21201304 	addi	r4,r4,-32692
 10002a4:	10006000 	call	1000600 <puts>

	//printf("Please re-insert SD card to perform another operation.\n");
}
 10002a8:	e037883a 	mov	sp,fp
 10002ac:	dfc00117 	ldw	ra,4(sp)
 10002b0:	df000017 	ldw	fp,0(sp)
 10002b4:	dec00204 	addi	sp,sp,8
 10002b8:	f800283a 	ret

010002bc <readFromFile>:

void readFromFile(void) {
 10002bc:	defffb04 	addi	sp,sp,-20
 10002c0:	dfc00415 	stw	ra,16(sp)
 10002c4:	df000315 	stw	fp,12(sp)
 10002c8:	df000304 	addi	fp,sp,12
	short int myFileHandle;
	int i;
	int character;

	if((myFileHandle = alt_up_sd_card_fopen("text2.txt", false)) != -1) {
 10002cc:	010040b4 	movhi	r4,258
 10002d0:	21201704 	addi	r4,r4,-32676
 10002d4:	000b883a 	mov	r5,zero
 10002d8:	10130140 	call	1013014 <alt_up_sd_card_fopen>
 10002dc:	e0bfff0d 	sth	r2,-4(fp)
 10002e0:	e0bfff0f 	ldh	r2,-4(fp)
 10002e4:	10bfffe0 	cmpeqi	r2,r2,-1
 10002e8:	10001e1e 	bne	r2,zero,1000364 <readFromFile+0xa8>
		printf("File Opened\n");
 10002ec:	010040b4 	movhi	r4,258
 10002f0:	21200704 	addi	r4,r4,-32740
 10002f4:	10006000 	call	1000600 <puts>

		for(i = 0; i < 5; i ++) {
 10002f8:	e03ffe15 	stw	zero,-8(fp)
 10002fc:	00000d06 	br	1000334 <readFromFile+0x78>
			character = alt_up_sd_card_read(myFileHandle);
 1000300:	e13fff0f 	ldh	r4,-4(fp)
 1000304:	10134d80 	call	10134d8 <alt_up_sd_card_read>
 1000308:	10bfffcc 	andi	r2,r2,65535
 100030c:	10a0001c 	xori	r2,r2,32768
 1000310:	10a00004 	addi	r2,r2,-32768
 1000314:	e0bffd15 	stw	r2,-12(fp)
			printf("ASCII character %i (decimal) read\n", character);
 1000318:	010040b4 	movhi	r4,258
 100031c:	21201a04 	addi	r4,r4,-32664
 1000320:	e17ffd17 	ldw	r5,-12(fp)
 1000324:	10004e80 	call	10004e8 <printf>
	int character;

	if((myFileHandle = alt_up_sd_card_fopen("text2.txt", false)) != -1) {
		printf("File Opened\n");

		for(i = 0; i < 5; i ++) {
 1000328:	e0bffe17 	ldw	r2,-8(fp)
 100032c:	10800044 	addi	r2,r2,1
 1000330:	e0bffe15 	stw	r2,-8(fp)
 1000334:	e0bffe17 	ldw	r2,-8(fp)
 1000338:	10800150 	cmplti	r2,r2,5
 100033c:	103ff01e 	bne	r2,zero,1000300 <readFromFile+0x44>
			character = alt_up_sd_card_read(myFileHandle);
			printf("ASCII character %i (decimal) read\n", character);
		}
		printf("72 = H, 69 = E, 76 = L, 79 = O\n");
 1000340:	010040b4 	movhi	r4,258
 1000344:	21202304 	addi	r4,r4,-32628
 1000348:	10006000 	call	1000600 <puts>
		printf("Done!!!\n");
 100034c:	010040b4 	movhi	r4,258
 1000350:	21201104 	addi	r4,r4,-32700
 1000354:	10006000 	call	1000600 <puts>
		alt_up_sd_card_fclose(myFileHandle);
 1000358:	e13fff0f 	ldh	r4,-4(fp)
 100035c:	1013ea80 	call	1013ea8 <alt_up_sd_card_fclose>
 1000360:	00000306 	br	1000370 <readFromFile+0xb4>
	}
	else
		printf("File NOT Opened\n");
 1000364:	010040b4 	movhi	r4,258
 1000368:	21201304 	addi	r4,r4,-32692
 100036c:	10006000 	call	1000600 <puts>

	//printf("Please re-insert SD card to perform another operation.\n");
}
 1000370:	e037883a 	mov	sp,fp
 1000374:	dfc00117 	ldw	ra,4(sp)
 1000378:	df000017 	ldw	fp,0(sp)
 100037c:	dec00204 	addi	sp,sp,8
 1000380:	f800283a 	ret

01000384 <main>:

int main(void){
 1000384:	defffa04 	addi	sp,sp,-24
 1000388:	dfc00515 	stw	ra,20(sp)
 100038c:	df000415 	stw	fp,16(sp)
 1000390:	df000404 	addi	fp,sp,16
	alt_up_sd_card_dev *device_reference = NULL;
 1000394:	e03ffd15 	stw	zero,-12(fp)
	int connected = 0;
 1000398:	e03ffc15 	stw	zero,-16(fp)
	int response;

	printf("Opening SDCard\n");
 100039c:	010040b4 	movhi	r4,258
 10003a0:	21202b04 	addi	r4,r4,-32596
 10003a4:	10006000 	call	1000600 <puts>
	if((device_reference = alt_up_sd_card_open_dev("/dev/Altera_UP_SD_Card_Avalon_Interface_0")) == NULL)
 10003a8:	010040b4 	movhi	r4,258
 10003ac:	21202f04 	addi	r4,r4,-32580
 10003b0:	10129900 	call	1012990 <alt_up_sd_card_open_dev>
 10003b4:	e0bffd15 	stw	r2,-12(fp)
 10003b8:	e0bffd17 	ldw	r2,-12(fp)
 10003bc:	1004c03a 	cmpne	r2,r2,zero
 10003c0:	1000051e 	bne	r2,zero,10003d8 <main+0x54>
	{
		printf("SDCard Open FAILED\n");
 10003c4:	010040b4 	movhi	r4,258
 10003c8:	21203a04 	addi	r4,r4,-32536
 10003cc:	10006000 	call	1000600 <puts>
		return 0 ;
 10003d0:	e03fff15 	stw	zero,-4(fp)
 10003d4:	00003e06 	br	10004d0 <main+0x14c>
	}
	else
		printf("SDCard Open PASSED\n");
 10003d8:	010040b4 	movhi	r4,258
 10003dc:	21203f04 	addi	r4,r4,-32516
 10003e0:	10006000 	call	1000600 <puts>


	if (device_reference != NULL ) {
 10003e4:	e0bffd17 	ldw	r2,-12(fp)
 10003e8:	1005003a 	cmpeq	r2,r2,zero
 10003ec:	1000341e 	bne	r2,zero,10004c0 <main+0x13c>
 10003f0:	00000006 	br	10003f4 <main+0x70>
		while(1) {
			if ((connected == 0) && (alt_up_sd_card_is_Present())){
 10003f4:	e0bffc17 	ldw	r2,-16(fp)
 10003f8:	1004c03a 	cmpne	r2,r2,zero
 10003fc:	1000251e 	bne	r2,zero,1000494 <main+0x110>
 1000400:	1012a540 	call	1012a54 <alt_up_sd_card_is_Present>
 1000404:	1005003a 	cmpeq	r2,r2,zero
 1000408:	1000221e 	bne	r2,zero,1000494 <main+0x110>
				printf("Card connected.\n");
 100040c:	010040b4 	movhi	r4,258
 1000410:	21204404 	addi	r4,r4,-32496
 1000414:	10006000 	call	1000600 <puts>
				if (alt_up_sd_card_is_FAT16()) {
 1000418:	1012b1c0 	call	1012b1c <alt_up_sd_card_is_FAT16>
 100041c:	1005003a 	cmpeq	r2,r2,zero
 1000420:	1000161e 	bne	r2,zero,100047c <main+0xf8>
					printf("FAT16 file system detected.\n");
 1000424:	010040b4 	movhi	r4,258
 1000428:	21204804 	addi	r4,r4,-32480
 100042c:	10006000 	call	1000600 <puts>

					while(1) {
						printf("Enter 0 to write to text1.txt or 1 to read from text2.txt: ");
 1000430:	010040b4 	movhi	r4,258
 1000434:	21204f04 	addi	r4,r4,-32452
 1000438:	10004e80 	call	10004e8 <printf>
						scanf("%d", &response);
 100043c:	e17ffe04 	addi	r5,fp,-8
 1000440:	010040b4 	movhi	r4,258
 1000444:	21205e04 	addi	r4,r4,-32392
 1000448:	10006480 	call	1000648 <scanf>

						if (response == 0) {
 100044c:	e0bffe17 	ldw	r2,-8(fp)
 1000450:	1004c03a 	cmpne	r2,r2,zero
 1000454:	1000011e 	bne	r2,zero,100045c <main+0xd8>
							writeToFile();
 1000458:	10002040 	call	1000204 <writeToFile>
						}

						if (response == 1) {
 100045c:	e0bffe17 	ldw	r2,-8(fp)
 1000460:	10800058 	cmpnei	r2,r2,1
 1000464:	1000011e 	bne	r2,zero,100046c <main+0xe8>
							readFromFile();
 1000468:	10002bc0 	call	10002bc <readFromFile>
						}

						if (alt_up_sd_card_is_Present() == false) {
 100046c:	1012a540 	call	1012a54 <alt_up_sd_card_is_Present>
 1000470:	1005003a 	cmpeq	r2,r2,zero
 1000474:	1000041e 	bne	r2,zero,1000488 <main+0x104>
							break;
						}
					}
 1000478:	003fed06 	br	1000430 <main+0xac>
				}
				else {
					printf("Unknown file system.\n");
 100047c:	010040b4 	movhi	r4,258
 1000480:	21205f04 	addi	r4,r4,-32388
 1000484:	10006000 	call	1000600 <puts>
				}
				connected = 1;
 1000488:	00800044 	movi	r2,1
 100048c:	e0bffc15 	stw	r2,-16(fp)
		printf("SDCard Open PASSED\n");


	if (device_reference != NULL ) {
		while(1) {
			if ((connected == 0) && (alt_up_sd_card_is_Present())){
 1000490:	003fd806 	br	10003f4 <main+0x70>
				}
				else {
					printf("Unknown file system.\n");
				}
				connected = 1;
			} else if((connected == 1) && (alt_up_sd_card_is_Present() == false)){
 1000494:	e0bffc17 	ldw	r2,-16(fp)
 1000498:	10800058 	cmpnei	r2,r2,1
 100049c:	103fd51e 	bne	r2,zero,10003f4 <main+0x70>
 10004a0:	1012a540 	call	1012a54 <alt_up_sd_card_is_Present>
 10004a4:	1004c03a 	cmpne	r2,r2,zero
 10004a8:	103fd21e 	bne	r2,zero,10003f4 <main+0x70>
				printf("Card disconnected.\n");
 10004ac:	010040b4 	movhi	r4,258
 10004b0:	21206504 	addi	r4,r4,-32364
 10004b4:	10006000 	call	1000600 <puts>
				connected =0;
 10004b8:	e03ffc15 	stw	zero,-16(fp)
			}
		}
 10004bc:	003fcd06 	br	10003f4 <main+0x70>
	}
	else
		printf("Can't open device\n");
 10004c0:	010040b4 	movhi	r4,258
 10004c4:	21206a04 	addi	r4,r4,-32344
 10004c8:	10006000 	call	1000600 <puts>

	return 0;
 10004cc:	e03fff15 	stw	zero,-4(fp)
 10004d0:	e0bfff17 	ldw	r2,-4(fp)
}
 10004d4:	e037883a 	mov	sp,fp
 10004d8:	dfc00117 	ldw	ra,4(sp)
 10004dc:	df000017 	ldw	fp,0(sp)
 10004e0:	dec00204 	addi	sp,sp,8
 10004e4:	f800283a 	ret

010004e8 <printf>:
 10004e8:	defffb04 	addi	sp,sp,-20
 10004ec:	dfc00115 	stw	ra,4(sp)
 10004f0:	d9400215 	stw	r5,8(sp)
 10004f4:	d9800315 	stw	r6,12(sp)
 10004f8:	d9c00415 	stw	r7,16(sp)
 10004fc:	008040b4 	movhi	r2,258
 1000500:	10a8f804 	addi	r2,r2,-23584
 1000504:	10c00017 	ldw	r3,0(r2)
 1000508:	200b883a 	mov	r5,r4
 100050c:	d8800204 	addi	r2,sp,8
 1000510:	19000217 	ldw	r4,8(r3)
 1000514:	100d883a 	mov	r6,r2
 1000518:	d8800015 	stw	r2,0(sp)
 100051c:	10026080 	call	1002608 <__vfprintf_internal>
 1000520:	dfc00117 	ldw	ra,4(sp)
 1000524:	dec00504 	addi	sp,sp,20
 1000528:	f800283a 	ret

0100052c <_printf_r>:
 100052c:	defffc04 	addi	sp,sp,-16
 1000530:	dfc00115 	stw	ra,4(sp)
 1000534:	d9800215 	stw	r6,8(sp)
 1000538:	d9c00315 	stw	r7,12(sp)
 100053c:	280d883a 	mov	r6,r5
 1000540:	21400217 	ldw	r5,8(r4)
 1000544:	d8c00204 	addi	r3,sp,8
 1000548:	180f883a 	mov	r7,r3
 100054c:	d8c00015 	stw	r3,0(sp)
 1000550:	100075c0 	call	100075c <___vfprintf_internal_r>
 1000554:	dfc00117 	ldw	ra,4(sp)
 1000558:	dec00404 	addi	sp,sp,16
 100055c:	f800283a 	ret

01000560 <_puts_r>:
 1000560:	defff604 	addi	sp,sp,-40
 1000564:	dc400715 	stw	r17,28(sp)
 1000568:	2023883a 	mov	r17,r4
 100056c:	2809883a 	mov	r4,r5
 1000570:	dfc00915 	stw	ra,36(sp)
 1000574:	dcc00815 	stw	r19,32(sp)
 1000578:	2827883a 	mov	r19,r5
 100057c:	10006900 	call	1000690 <strlen>
 1000580:	89400217 	ldw	r5,8(r17)
 1000584:	00c040b4 	movhi	r3,258
 1000588:	18e06f04 	addi	r3,r3,-32324
 100058c:	01c00044 	movi	r7,1
 1000590:	12000044 	addi	r8,r2,1
 1000594:	d8c00515 	stw	r3,20(sp)
 1000598:	d9c00615 	stw	r7,24(sp)
 100059c:	d8c00304 	addi	r3,sp,12
 10005a0:	01c00084 	movi	r7,2
 10005a4:	8809883a 	mov	r4,r17
 10005a8:	d80d883a 	mov	r6,sp
 10005ac:	d8c00015 	stw	r3,0(sp)
 10005b0:	dcc00315 	stw	r19,12(sp)
 10005b4:	da000215 	stw	r8,8(sp)
 10005b8:	d9c00115 	stw	r7,4(sp)
 10005bc:	d8800415 	stw	r2,16(sp)
 10005c0:	10062200 	call	1006220 <__sfvwrite_r>
 10005c4:	00ffffc4 	movi	r3,-1
 10005c8:	10000626 	beq	r2,zero,10005e4 <_puts_r+0x84>
 10005cc:	1805883a 	mov	r2,r3
 10005d0:	dfc00917 	ldw	ra,36(sp)
 10005d4:	dcc00817 	ldw	r19,32(sp)
 10005d8:	dc400717 	ldw	r17,28(sp)
 10005dc:	dec00a04 	addi	sp,sp,40
 10005e0:	f800283a 	ret
 10005e4:	00c00284 	movi	r3,10
 10005e8:	1805883a 	mov	r2,r3
 10005ec:	dfc00917 	ldw	ra,36(sp)
 10005f0:	dcc00817 	ldw	r19,32(sp)
 10005f4:	dc400717 	ldw	r17,28(sp)
 10005f8:	dec00a04 	addi	sp,sp,40
 10005fc:	f800283a 	ret

01000600 <puts>:
 1000600:	008040b4 	movhi	r2,258
 1000604:	10a8f804 	addi	r2,r2,-23584
 1000608:	200b883a 	mov	r5,r4
 100060c:	11000017 	ldw	r4,0(r2)
 1000610:	10005601 	jmpi	1000560 <_puts_r>

01000614 <_scanf_r>:
 1000614:	defffc04 	addi	sp,sp,-16
 1000618:	dfc00115 	stw	ra,4(sp)
 100061c:	d9800215 	stw	r6,8(sp)
 1000620:	d9c00315 	stw	r7,12(sp)
 1000624:	280d883a 	mov	r6,r5
 1000628:	21400117 	ldw	r5,4(r4)
 100062c:	d8c00204 	addi	r3,sp,8
 1000630:	180f883a 	mov	r7,r3
 1000634:	d8c00015 	stw	r3,0(sp)
 1000638:	100262c0 	call	100262c <__svfscanf_r>
 100063c:	dfc00117 	ldw	ra,4(sp)
 1000640:	dec00404 	addi	sp,sp,16
 1000644:	f800283a 	ret

01000648 <scanf>:
 1000648:	defffb04 	addi	sp,sp,-20
 100064c:	dfc00115 	stw	ra,4(sp)
 1000650:	d9400215 	stw	r5,8(sp)
 1000654:	d9800315 	stw	r6,12(sp)
 1000658:	d9c00415 	stw	r7,16(sp)
 100065c:	008040b4 	movhi	r2,258
 1000660:	10a8f804 	addi	r2,r2,-23584
 1000664:	11400017 	ldw	r5,0(r2)
 1000668:	200d883a 	mov	r6,r4
 100066c:	d8800204 	addi	r2,sp,8
 1000670:	2809883a 	mov	r4,r5
 1000674:	29400117 	ldw	r5,4(r5)
 1000678:	100f883a 	mov	r7,r2
 100067c:	d8800015 	stw	r2,0(sp)
 1000680:	100262c0 	call	100262c <__svfscanf_r>
 1000684:	dfc00117 	ldw	ra,4(sp)
 1000688:	dec00504 	addi	sp,sp,20
 100068c:	f800283a 	ret

01000690 <strlen>:
 1000690:	208000cc 	andi	r2,r4,3
 1000694:	2011883a 	mov	r8,r4
 1000698:	1000161e 	bne	r2,zero,10006f4 <strlen+0x64>
 100069c:	20c00017 	ldw	r3,0(r4)
 10006a0:	017fbff4 	movhi	r5,65279
 10006a4:	297fbfc4 	addi	r5,r5,-257
 10006a8:	01e02074 	movhi	r7,32897
 10006ac:	39e02004 	addi	r7,r7,-32640
 10006b0:	1945883a 	add	r2,r3,r5
 10006b4:	11c4703a 	and	r2,r2,r7
 10006b8:	00c6303a 	nor	r3,zero,r3
 10006bc:	1886703a 	and	r3,r3,r2
 10006c0:	18000c1e 	bne	r3,zero,10006f4 <strlen+0x64>
 10006c4:	280d883a 	mov	r6,r5
 10006c8:	380b883a 	mov	r5,r7
 10006cc:	21000104 	addi	r4,r4,4
 10006d0:	20800017 	ldw	r2,0(r4)
 10006d4:	1187883a 	add	r3,r2,r6
 10006d8:	1946703a 	and	r3,r3,r5
 10006dc:	0084303a 	nor	r2,zero,r2
 10006e0:	10c4703a 	and	r2,r2,r3
 10006e4:	103ff926 	beq	r2,zero,10006cc <strlen+0x3c>
 10006e8:	20800007 	ldb	r2,0(r4)
 10006ec:	10000326 	beq	r2,zero,10006fc <strlen+0x6c>
 10006f0:	21000044 	addi	r4,r4,1
 10006f4:	20800007 	ldb	r2,0(r4)
 10006f8:	103ffd1e 	bne	r2,zero,10006f0 <strlen+0x60>
 10006fc:	2205c83a 	sub	r2,r4,r8
 1000700:	f800283a 	ret

01000704 <__sprint_r>:
 1000704:	30800217 	ldw	r2,8(r6)
 1000708:	defffe04 	addi	sp,sp,-8
 100070c:	dc000015 	stw	r16,0(sp)
 1000710:	dfc00115 	stw	ra,4(sp)
 1000714:	3021883a 	mov	r16,r6
 1000718:	0007883a 	mov	r3,zero
 100071c:	1000061e 	bne	r2,zero,1000738 <__sprint_r+0x34>
 1000720:	1805883a 	mov	r2,r3
 1000724:	30000115 	stw	zero,4(r6)
 1000728:	dfc00117 	ldw	ra,4(sp)
 100072c:	dc000017 	ldw	r16,0(sp)
 1000730:	dec00204 	addi	sp,sp,8
 1000734:	f800283a 	ret
 1000738:	10062200 	call	1006220 <__sfvwrite_r>
 100073c:	1007883a 	mov	r3,r2
 1000740:	1805883a 	mov	r2,r3
 1000744:	80000115 	stw	zero,4(r16)
 1000748:	80000215 	stw	zero,8(r16)
 100074c:	dfc00117 	ldw	ra,4(sp)
 1000750:	dc000017 	ldw	r16,0(sp)
 1000754:	dec00204 	addi	sp,sp,8
 1000758:	f800283a 	ret

0100075c <___vfprintf_internal_r>:
 100075c:	defea404 	addi	sp,sp,-1392
 1000760:	dd815815 	stw	r22,1376(sp)
 1000764:	dc015215 	stw	r16,1352(sp)
 1000768:	d9c15115 	stw	r7,1348(sp)
 100076c:	dfc15b15 	stw	ra,1388(sp)
 1000770:	df015a15 	stw	fp,1384(sp)
 1000774:	ddc15915 	stw	r23,1380(sp)
 1000778:	dd415715 	stw	r21,1372(sp)
 100077c:	dd015615 	stw	r20,1368(sp)
 1000780:	dcc15515 	stw	r19,1364(sp)
 1000784:	dc815415 	stw	r18,1360(sp)
 1000788:	dc415315 	stw	r17,1356(sp)
 100078c:	282d883a 	mov	r22,r5
 1000790:	3021883a 	mov	r16,r6
 1000794:	d9014f15 	stw	r4,1340(sp)
 1000798:	10068700 	call	1006870 <_localeconv_r>
 100079c:	10800017 	ldw	r2,0(r2)
 10007a0:	d9c15117 	ldw	r7,1348(sp)
 10007a4:	d8814915 	stw	r2,1316(sp)
 10007a8:	d8814f17 	ldw	r2,1340(sp)
 10007ac:	10000226 	beq	r2,zero,10007b8 <___vfprintf_internal_r+0x5c>
 10007b0:	10800e17 	ldw	r2,56(r2)
 10007b4:	10020d26 	beq	r2,zero,1000fec <___vfprintf_internal_r+0x890>
 10007b8:	b080030b 	ldhu	r2,12(r22)
 10007bc:	1080020c 	andi	r2,r2,8
 10007c0:	10020e26 	beq	r2,zero,1000ffc <___vfprintf_internal_r+0x8a0>
 10007c4:	b0800417 	ldw	r2,16(r22)
 10007c8:	10020c26 	beq	r2,zero,1000ffc <___vfprintf_internal_r+0x8a0>
 10007cc:	b200030b 	ldhu	r8,12(r22)
 10007d0:	00800284 	movi	r2,10
 10007d4:	40c0068c 	andi	r3,r8,26
 10007d8:	18802f1e 	bne	r3,r2,1000898 <___vfprintf_internal_r+0x13c>
 10007dc:	b080038f 	ldh	r2,14(r22)
 10007e0:	10002d16 	blt	r2,zero,1000898 <___vfprintf_internal_r+0x13c>
 10007e4:	b240038b 	ldhu	r9,14(r22)
 10007e8:	b2800717 	ldw	r10,28(r22)
 10007ec:	b2c00917 	ldw	r11,36(r22)
 10007f0:	d9014f17 	ldw	r4,1340(sp)
 10007f4:	dc402904 	addi	r17,sp,164
 10007f8:	d8804004 	addi	r2,sp,256
 10007fc:	00c10004 	movi	r3,1024
 1000800:	423fff4c 	andi	r8,r8,65533
 1000804:	800d883a 	mov	r6,r16
 1000808:	880b883a 	mov	r5,r17
 100080c:	da002c0d 	sth	r8,176(sp)
 1000810:	da402c8d 	sth	r9,178(sp)
 1000814:	da803015 	stw	r10,192(sp)
 1000818:	dac03215 	stw	r11,200(sp)
 100081c:	d8802d15 	stw	r2,180(sp)
 1000820:	d8c02e15 	stw	r3,184(sp)
 1000824:	d8802915 	stw	r2,164(sp)
 1000828:	d8c02b15 	stw	r3,172(sp)
 100082c:	d8002f15 	stw	zero,188(sp)
 1000830:	100075c0 	call	100075c <___vfprintf_internal_r>
 1000834:	d8814b15 	stw	r2,1324(sp)
 1000838:	10000416 	blt	r2,zero,100084c <___vfprintf_internal_r+0xf0>
 100083c:	d9014f17 	ldw	r4,1340(sp)
 1000840:	880b883a 	mov	r5,r17
 1000844:	10056b40 	call	10056b4 <_fflush_r>
 1000848:	1002321e 	bne	r2,zero,1001114 <___vfprintf_internal_r+0x9b8>
 100084c:	d8802c0b 	ldhu	r2,176(sp)
 1000850:	1080100c 	andi	r2,r2,64
 1000854:	10000326 	beq	r2,zero,1000864 <___vfprintf_internal_r+0x108>
 1000858:	b080030b 	ldhu	r2,12(r22)
 100085c:	10801014 	ori	r2,r2,64
 1000860:	b080030d 	sth	r2,12(r22)
 1000864:	d8814b17 	ldw	r2,1324(sp)
 1000868:	dfc15b17 	ldw	ra,1388(sp)
 100086c:	df015a17 	ldw	fp,1384(sp)
 1000870:	ddc15917 	ldw	r23,1380(sp)
 1000874:	dd815817 	ldw	r22,1376(sp)
 1000878:	dd415717 	ldw	r21,1372(sp)
 100087c:	dd015617 	ldw	r20,1368(sp)
 1000880:	dcc15517 	ldw	r19,1364(sp)
 1000884:	dc815417 	ldw	r18,1360(sp)
 1000888:	dc415317 	ldw	r17,1356(sp)
 100088c:	dc015217 	ldw	r16,1352(sp)
 1000890:	dec15c04 	addi	sp,sp,1392
 1000894:	f800283a 	ret
 1000898:	0005883a 	mov	r2,zero
 100089c:	0007883a 	mov	r3,zero
 10008a0:	dd401904 	addi	r21,sp,100
 10008a4:	d8814215 	stw	r2,1288(sp)
 10008a8:	802f883a 	mov	r23,r16
 10008ac:	d8c14315 	stw	r3,1292(sp)
 10008b0:	d8014b15 	stw	zero,1324(sp)
 10008b4:	d8014815 	stw	zero,1312(sp)
 10008b8:	d8014415 	stw	zero,1296(sp)
 10008bc:	d8014715 	stw	zero,1308(sp)
 10008c0:	dd400c15 	stw	r21,48(sp)
 10008c4:	d8000e15 	stw	zero,56(sp)
 10008c8:	d8000d15 	stw	zero,52(sp)
 10008cc:	b8800007 	ldb	r2,0(r23)
 10008d0:	10001926 	beq	r2,zero,1000938 <___vfprintf_internal_r+0x1dc>
 10008d4:	00c00944 	movi	r3,37
 10008d8:	10c01726 	beq	r2,r3,1000938 <___vfprintf_internal_r+0x1dc>
 10008dc:	b821883a 	mov	r16,r23
 10008e0:	00000106 	br	10008e8 <___vfprintf_internal_r+0x18c>
 10008e4:	10c00326 	beq	r2,r3,10008f4 <___vfprintf_internal_r+0x198>
 10008e8:	84000044 	addi	r16,r16,1
 10008ec:	80800007 	ldb	r2,0(r16)
 10008f0:	103ffc1e 	bne	r2,zero,10008e4 <___vfprintf_internal_r+0x188>
 10008f4:	85e7c83a 	sub	r19,r16,r23
 10008f8:	98000e26 	beq	r19,zero,1000934 <___vfprintf_internal_r+0x1d8>
 10008fc:	dc800e17 	ldw	r18,56(sp)
 1000900:	dc400d17 	ldw	r17,52(sp)
 1000904:	008001c4 	movi	r2,7
 1000908:	94e5883a 	add	r18,r18,r19
 100090c:	8c400044 	addi	r17,r17,1
 1000910:	adc00015 	stw	r23,0(r21)
 1000914:	dc800e15 	stw	r18,56(sp)
 1000918:	acc00115 	stw	r19,4(r21)
 100091c:	dc400d15 	stw	r17,52(sp)
 1000920:	14428b16 	blt	r2,r17,1001350 <___vfprintf_internal_r+0xbf4>
 1000924:	ad400204 	addi	r21,r21,8
 1000928:	d9014b17 	ldw	r4,1324(sp)
 100092c:	24c9883a 	add	r4,r4,r19
 1000930:	d9014b15 	stw	r4,1324(sp)
 1000934:	802f883a 	mov	r23,r16
 1000938:	b8800007 	ldb	r2,0(r23)
 100093c:	10013c26 	beq	r2,zero,1000e30 <___vfprintf_internal_r+0x6d4>
 1000940:	bdc00044 	addi	r23,r23,1
 1000944:	d8000405 	stb	zero,16(sp)
 1000948:	b8c00007 	ldb	r3,0(r23)
 100094c:	04ffffc4 	movi	r19,-1
 1000950:	d8014c15 	stw	zero,1328(sp)
 1000954:	d8014a15 	stw	zero,1320(sp)
 1000958:	d8c14d15 	stw	r3,1332(sp)
 100095c:	bdc00044 	addi	r23,r23,1
 1000960:	d9414d17 	ldw	r5,1332(sp)
 1000964:	00801604 	movi	r2,88
 1000968:	28fff804 	addi	r3,r5,-32
 100096c:	10c06036 	bltu	r2,r3,1000af0 <___vfprintf_internal_r+0x394>
 1000970:	18c5883a 	add	r2,r3,r3
 1000974:	1085883a 	add	r2,r2,r2
 1000978:	00c04034 	movhi	r3,256
 100097c:	18c26304 	addi	r3,r3,2444
 1000980:	10c5883a 	add	r2,r2,r3
 1000984:	11000017 	ldw	r4,0(r2)
 1000988:	2000683a 	jmp	r4
 100098c:	01001900 	call	100190 <__alt_mem_onchip_memory2_0+0x100190>
 1000990:	01000af0 	cmpltui	r4,zero,43
 1000994:	01000af0 	cmpltui	r4,zero,43
 1000998:	010018ec 	andhi	r4,zero,99
 100099c:	01000af0 	cmpltui	r4,zero,43
 10009a0:	01000af0 	cmpltui	r4,zero,43
 10009a4:	01000af0 	cmpltui	r4,zero,43
 10009a8:	01000af0 	cmpltui	r4,zero,43
 10009ac:	01000af0 	cmpltui	r4,zero,43
 10009b0:	01000af0 	cmpltui	r4,zero,43
 10009b4:	010016cc 	andi	r4,zero,91
 10009b8:	010018dc 	xori	r4,zero,99
 10009bc:	01000af0 	cmpltui	r4,zero,43
 10009c0:	010016e4 	muli	r4,zero,91
 10009c4:	01001978 	rdprs	r4,zero,101
 10009c8:	01000af0 	cmpltui	r4,zero,43
 10009cc:	01001964 	muli	r4,zero,101
 10009d0:	0100192c 	andhi	r4,zero,100
 10009d4:	0100192c 	andhi	r4,zero,100
 10009d8:	0100192c 	andhi	r4,zero,100
 10009dc:	0100192c 	andhi	r4,zero,100
 10009e0:	0100192c 	andhi	r4,zero,100
 10009e4:	0100192c 	andhi	r4,zero,100
 10009e8:	0100192c 	andhi	r4,zero,100
 10009ec:	0100192c 	andhi	r4,zero,100
 10009f0:	0100192c 	andhi	r4,zero,100
 10009f4:	01000af0 	cmpltui	r4,zero,43
 10009f8:	01000af0 	cmpltui	r4,zero,43
 10009fc:	01000af0 	cmpltui	r4,zero,43
 1000a00:	01000af0 	cmpltui	r4,zero,43
 1000a04:	01000af0 	cmpltui	r4,zero,43
 1000a08:	01000af0 	cmpltui	r4,zero,43
 1000a0c:	01000af0 	cmpltui	r4,zero,43
 1000a10:	01000af0 	cmpltui	r4,zero,43
 1000a14:	01000af0 	cmpltui	r4,zero,43
 1000a18:	01000af0 	cmpltui	r4,zero,43
 1000a1c:	01001148 	cmpgei	r4,zero,69
 1000a20:	010017b4 	movhi	r4,94
 1000a24:	01000af0 	cmpltui	r4,zero,43
 1000a28:	010017b4 	movhi	r4,94
 1000a2c:	01000af0 	cmpltui	r4,zero,43
 1000a30:	01000af0 	cmpltui	r4,zero,43
 1000a34:	01000af0 	cmpltui	r4,zero,43
 1000a38:	01000af0 	cmpltui	r4,zero,43
 1000a3c:	01001918 	cmpnei	r4,zero,100
 1000a40:	01000af0 	cmpltui	r4,zero,43
 1000a44:	01000af0 	cmpltui	r4,zero,43
 1000a48:	010011fc 	xorhi	r4,zero,71
 1000a4c:	01000af0 	cmpltui	r4,zero,43
 1000a50:	01000af0 	cmpltui	r4,zero,43
 1000a54:	01000af0 	cmpltui	r4,zero,43
 1000a58:	01000af0 	cmpltui	r4,zero,43
 1000a5c:	01000af0 	cmpltui	r4,zero,43
 1000a60:	01001248 	cmpgei	r4,zero,73
 1000a64:	01000af0 	cmpltui	r4,zero,43
 1000a68:	01000af0 	cmpltui	r4,zero,43
 1000a6c:	01001868 	cmpgeui	r4,zero,97
 1000a70:	01000af0 	cmpltui	r4,zero,43
 1000a74:	01000af0 	cmpltui	r4,zero,43
 1000a78:	01000af0 	cmpltui	r4,zero,43
 1000a7c:	01000af0 	cmpltui	r4,zero,43
 1000a80:	01000af0 	cmpltui	r4,zero,43
 1000a84:	01000af0 	cmpltui	r4,zero,43
 1000a88:	01000af0 	cmpltui	r4,zero,43
 1000a8c:	01000af0 	cmpltui	r4,zero,43
 1000a90:	01000af0 	cmpltui	r4,zero,43
 1000a94:	01000af0 	cmpltui	r4,zero,43
 1000a98:	0100183c 	xorhi	r4,zero,96
 1000a9c:	01001154 	movui	r4,69
 1000aa0:	010017b4 	movhi	r4,94
 1000aa4:	010017b4 	movhi	r4,94
 1000aa8:	010017b4 	movhi	r4,94
 1000aac:	010017a0 	cmpeqi	r4,zero,94
 1000ab0:	01001154 	movui	r4,69
 1000ab4:	01000af0 	cmpltui	r4,zero,43
 1000ab8:	01000af0 	cmpltui	r4,zero,43
 1000abc:	01001728 	cmpgeui	r4,zero,92
 1000ac0:	01000af0 	cmpltui	r4,zero,43
 1000ac4:	010016f8 	rdprs	r4,zero,91
 1000ac8:	01001208 	cmpgei	r4,zero,72
 1000acc:	01001758 	cmpnei	r4,zero,93
 1000ad0:	01001744 	movi	r4,93
 1000ad4:	01000af0 	cmpltui	r4,zero,43
 1000ad8:	010019d4 	movui	r4,103
 1000adc:	01000af0 	cmpltui	r4,zero,43
 1000ae0:	01001254 	movui	r4,73
 1000ae4:	01000af0 	cmpltui	r4,zero,43
 1000ae8:	01000af0 	cmpltui	r4,zero,43
 1000aec:	010018cc 	andi	r4,zero,99
 1000af0:	d9014d17 	ldw	r4,1332(sp)
 1000af4:	2000ce26 	beq	r4,zero,1000e30 <___vfprintf_internal_r+0x6d4>
 1000af8:	01400044 	movi	r5,1
 1000afc:	d9800f04 	addi	r6,sp,60
 1000b00:	d9c14015 	stw	r7,1280(sp)
 1000b04:	d9414515 	stw	r5,1300(sp)
 1000b08:	d9814115 	stw	r6,1284(sp)
 1000b0c:	280f883a 	mov	r7,r5
 1000b10:	d9000f05 	stb	r4,60(sp)
 1000b14:	d8000405 	stb	zero,16(sp)
 1000b18:	d8014615 	stw	zero,1304(sp)
 1000b1c:	d8c14c17 	ldw	r3,1328(sp)
 1000b20:	1880008c 	andi	r2,r3,2
 1000b24:	1005003a 	cmpeq	r2,r2,zero
 1000b28:	d8815015 	stw	r2,1344(sp)
 1000b2c:	1000031e 	bne	r2,zero,1000b3c <___vfprintf_internal_r+0x3e0>
 1000b30:	d9014517 	ldw	r4,1300(sp)
 1000b34:	21000084 	addi	r4,r4,2
 1000b38:	d9014515 	stw	r4,1300(sp)
 1000b3c:	d9414c17 	ldw	r5,1328(sp)
 1000b40:	2940210c 	andi	r5,r5,132
 1000b44:	d9414e15 	stw	r5,1336(sp)
 1000b48:	28002d1e 	bne	r5,zero,1000c00 <___vfprintf_internal_r+0x4a4>
 1000b4c:	d9814a17 	ldw	r6,1320(sp)
 1000b50:	d8814517 	ldw	r2,1300(sp)
 1000b54:	30a1c83a 	sub	r16,r6,r2
 1000b58:	0400290e 	bge	zero,r16,1000c00 <___vfprintf_internal_r+0x4a4>
 1000b5c:	00800404 	movi	r2,16
 1000b60:	1404580e 	bge	r2,r16,1001cc4 <___vfprintf_internal_r+0x1568>
 1000b64:	dc800e17 	ldw	r18,56(sp)
 1000b68:	dc400d17 	ldw	r17,52(sp)
 1000b6c:	1027883a 	mov	r19,r2
 1000b70:	070040b4 	movhi	fp,258
 1000b74:	e7208b84 	addi	fp,fp,-32210
 1000b78:	050001c4 	movi	r20,7
 1000b7c:	00000306 	br	1000b8c <___vfprintf_internal_r+0x430>
 1000b80:	843ffc04 	addi	r16,r16,-16
 1000b84:	ad400204 	addi	r21,r21,8
 1000b88:	9c00130e 	bge	r19,r16,1000bd8 <___vfprintf_internal_r+0x47c>
 1000b8c:	94800404 	addi	r18,r18,16
 1000b90:	8c400044 	addi	r17,r17,1
 1000b94:	af000015 	stw	fp,0(r21)
 1000b98:	acc00115 	stw	r19,4(r21)
 1000b9c:	dc800e15 	stw	r18,56(sp)
 1000ba0:	dc400d15 	stw	r17,52(sp)
 1000ba4:	a47ff60e 	bge	r20,r17,1000b80 <___vfprintf_internal_r+0x424>
 1000ba8:	d9014f17 	ldw	r4,1340(sp)
 1000bac:	b00b883a 	mov	r5,r22
 1000bb0:	d9800c04 	addi	r6,sp,48
 1000bb4:	d9c15115 	stw	r7,1348(sp)
 1000bb8:	10007040 	call	1000704 <__sprint_r>
 1000bbc:	d9c15117 	ldw	r7,1348(sp)
 1000bc0:	10009e1e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1000bc4:	843ffc04 	addi	r16,r16,-16
 1000bc8:	dc800e17 	ldw	r18,56(sp)
 1000bcc:	dc400d17 	ldw	r17,52(sp)
 1000bd0:	dd401904 	addi	r21,sp,100
 1000bd4:	9c3fed16 	blt	r19,r16,1000b8c <___vfprintf_internal_r+0x430>
 1000bd8:	9425883a 	add	r18,r18,r16
 1000bdc:	8c400044 	addi	r17,r17,1
 1000be0:	008001c4 	movi	r2,7
 1000be4:	af000015 	stw	fp,0(r21)
 1000be8:	ac000115 	stw	r16,4(r21)
 1000bec:	dc800e15 	stw	r18,56(sp)
 1000bf0:	dc400d15 	stw	r17,52(sp)
 1000bf4:	1441f516 	blt	r2,r17,10013cc <___vfprintf_internal_r+0xc70>
 1000bf8:	ad400204 	addi	r21,r21,8
 1000bfc:	00000206 	br	1000c08 <___vfprintf_internal_r+0x4ac>
 1000c00:	dc800e17 	ldw	r18,56(sp)
 1000c04:	dc400d17 	ldw	r17,52(sp)
 1000c08:	d8800407 	ldb	r2,16(sp)
 1000c0c:	10000b26 	beq	r2,zero,1000c3c <___vfprintf_internal_r+0x4e0>
 1000c10:	00800044 	movi	r2,1
 1000c14:	94800044 	addi	r18,r18,1
 1000c18:	8c400044 	addi	r17,r17,1
 1000c1c:	a8800115 	stw	r2,4(r21)
 1000c20:	d8c00404 	addi	r3,sp,16
 1000c24:	008001c4 	movi	r2,7
 1000c28:	a8c00015 	stw	r3,0(r21)
 1000c2c:	dc800e15 	stw	r18,56(sp)
 1000c30:	dc400d15 	stw	r17,52(sp)
 1000c34:	1441da16 	blt	r2,r17,10013a0 <___vfprintf_internal_r+0xc44>
 1000c38:	ad400204 	addi	r21,r21,8
 1000c3c:	d9015017 	ldw	r4,1344(sp)
 1000c40:	20000b1e 	bne	r4,zero,1000c70 <___vfprintf_internal_r+0x514>
 1000c44:	d8800444 	addi	r2,sp,17
 1000c48:	94800084 	addi	r18,r18,2
 1000c4c:	8c400044 	addi	r17,r17,1
 1000c50:	a8800015 	stw	r2,0(r21)
 1000c54:	00c00084 	movi	r3,2
 1000c58:	008001c4 	movi	r2,7
 1000c5c:	a8c00115 	stw	r3,4(r21)
 1000c60:	dc800e15 	stw	r18,56(sp)
 1000c64:	dc400d15 	stw	r17,52(sp)
 1000c68:	1441c216 	blt	r2,r17,1001374 <___vfprintf_internal_r+0xc18>
 1000c6c:	ad400204 	addi	r21,r21,8
 1000c70:	d9414e17 	ldw	r5,1336(sp)
 1000c74:	00802004 	movi	r2,128
 1000c78:	2880b126 	beq	r5,r2,1000f40 <___vfprintf_internal_r+0x7e4>
 1000c7c:	d8c14617 	ldw	r3,1304(sp)
 1000c80:	19e1c83a 	sub	r16,r3,r7
 1000c84:	0400260e 	bge	zero,r16,1000d20 <___vfprintf_internal_r+0x5c4>
 1000c88:	00800404 	movi	r2,16
 1000c8c:	1403c90e 	bge	r2,r16,1001bb4 <___vfprintf_internal_r+0x1458>
 1000c90:	1027883a 	mov	r19,r2
 1000c94:	070040b4 	movhi	fp,258
 1000c98:	e7208784 	addi	fp,fp,-32226
 1000c9c:	050001c4 	movi	r20,7
 1000ca0:	00000306 	br	1000cb0 <___vfprintf_internal_r+0x554>
 1000ca4:	843ffc04 	addi	r16,r16,-16
 1000ca8:	ad400204 	addi	r21,r21,8
 1000cac:	9c00130e 	bge	r19,r16,1000cfc <___vfprintf_internal_r+0x5a0>
 1000cb0:	94800404 	addi	r18,r18,16
 1000cb4:	8c400044 	addi	r17,r17,1
 1000cb8:	af000015 	stw	fp,0(r21)
 1000cbc:	acc00115 	stw	r19,4(r21)
 1000cc0:	dc800e15 	stw	r18,56(sp)
 1000cc4:	dc400d15 	stw	r17,52(sp)
 1000cc8:	a47ff60e 	bge	r20,r17,1000ca4 <___vfprintf_internal_r+0x548>
 1000ccc:	d9014f17 	ldw	r4,1340(sp)
 1000cd0:	b00b883a 	mov	r5,r22
 1000cd4:	d9800c04 	addi	r6,sp,48
 1000cd8:	d9c15115 	stw	r7,1348(sp)
 1000cdc:	10007040 	call	1000704 <__sprint_r>
 1000ce0:	d9c15117 	ldw	r7,1348(sp)
 1000ce4:	1000551e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1000ce8:	843ffc04 	addi	r16,r16,-16
 1000cec:	dc800e17 	ldw	r18,56(sp)
 1000cf0:	dc400d17 	ldw	r17,52(sp)
 1000cf4:	dd401904 	addi	r21,sp,100
 1000cf8:	9c3fed16 	blt	r19,r16,1000cb0 <___vfprintf_internal_r+0x554>
 1000cfc:	9425883a 	add	r18,r18,r16
 1000d00:	8c400044 	addi	r17,r17,1
 1000d04:	008001c4 	movi	r2,7
 1000d08:	af000015 	stw	fp,0(r21)
 1000d0c:	ac000115 	stw	r16,4(r21)
 1000d10:	dc800e15 	stw	r18,56(sp)
 1000d14:	dc400d15 	stw	r17,52(sp)
 1000d18:	14418216 	blt	r2,r17,1001324 <___vfprintf_internal_r+0xbc8>
 1000d1c:	ad400204 	addi	r21,r21,8
 1000d20:	d9014c17 	ldw	r4,1328(sp)
 1000d24:	2080400c 	andi	r2,r4,256
 1000d28:	10004a1e 	bne	r2,zero,1000e54 <___vfprintf_internal_r+0x6f8>
 1000d2c:	d9414117 	ldw	r5,1284(sp)
 1000d30:	91e5883a 	add	r18,r18,r7
 1000d34:	8c400044 	addi	r17,r17,1
 1000d38:	008001c4 	movi	r2,7
 1000d3c:	a9400015 	stw	r5,0(r21)
 1000d40:	a9c00115 	stw	r7,4(r21)
 1000d44:	dc800e15 	stw	r18,56(sp)
 1000d48:	dc400d15 	stw	r17,52(sp)
 1000d4c:	14416716 	blt	r2,r17,10012ec <___vfprintf_internal_r+0xb90>
 1000d50:	a8c00204 	addi	r3,r21,8
 1000d54:	d9814c17 	ldw	r6,1328(sp)
 1000d58:	3080010c 	andi	r2,r6,4
 1000d5c:	10002826 	beq	r2,zero,1000e00 <___vfprintf_internal_r+0x6a4>
 1000d60:	d8814a17 	ldw	r2,1320(sp)
 1000d64:	d9014517 	ldw	r4,1300(sp)
 1000d68:	1121c83a 	sub	r16,r2,r4
 1000d6c:	0400240e 	bge	zero,r16,1000e00 <___vfprintf_internal_r+0x6a4>
 1000d70:	00800404 	movi	r2,16
 1000d74:	14044f0e 	bge	r2,r16,1001eb4 <___vfprintf_internal_r+0x1758>
 1000d78:	dc400d17 	ldw	r17,52(sp)
 1000d7c:	1027883a 	mov	r19,r2
 1000d80:	070040b4 	movhi	fp,258
 1000d84:	e7208b84 	addi	fp,fp,-32210
 1000d88:	050001c4 	movi	r20,7
 1000d8c:	00000306 	br	1000d9c <___vfprintf_internal_r+0x640>
 1000d90:	843ffc04 	addi	r16,r16,-16
 1000d94:	18c00204 	addi	r3,r3,8
 1000d98:	9c00110e 	bge	r19,r16,1000de0 <___vfprintf_internal_r+0x684>
 1000d9c:	94800404 	addi	r18,r18,16
 1000da0:	8c400044 	addi	r17,r17,1
 1000da4:	1f000015 	stw	fp,0(r3)
 1000da8:	1cc00115 	stw	r19,4(r3)
 1000dac:	dc800e15 	stw	r18,56(sp)
 1000db0:	dc400d15 	stw	r17,52(sp)
 1000db4:	a47ff60e 	bge	r20,r17,1000d90 <___vfprintf_internal_r+0x634>
 1000db8:	d9014f17 	ldw	r4,1340(sp)
 1000dbc:	b00b883a 	mov	r5,r22
 1000dc0:	d9800c04 	addi	r6,sp,48
 1000dc4:	10007040 	call	1000704 <__sprint_r>
 1000dc8:	10001c1e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1000dcc:	843ffc04 	addi	r16,r16,-16
 1000dd0:	dc800e17 	ldw	r18,56(sp)
 1000dd4:	dc400d17 	ldw	r17,52(sp)
 1000dd8:	d8c01904 	addi	r3,sp,100
 1000ddc:	9c3fef16 	blt	r19,r16,1000d9c <___vfprintf_internal_r+0x640>
 1000de0:	9425883a 	add	r18,r18,r16
 1000de4:	8c400044 	addi	r17,r17,1
 1000de8:	008001c4 	movi	r2,7
 1000dec:	1f000015 	stw	fp,0(r3)
 1000df0:	1c000115 	stw	r16,4(r3)
 1000df4:	dc800e15 	stw	r18,56(sp)
 1000df8:	dc400d15 	stw	r17,52(sp)
 1000dfc:	1440cb16 	blt	r2,r17,100112c <___vfprintf_internal_r+0x9d0>
 1000e00:	d8814a17 	ldw	r2,1320(sp)
 1000e04:	d9414517 	ldw	r5,1300(sp)
 1000e08:	1140010e 	bge	r2,r5,1000e10 <___vfprintf_internal_r+0x6b4>
 1000e0c:	2805883a 	mov	r2,r5
 1000e10:	d9814b17 	ldw	r6,1324(sp)
 1000e14:	308d883a 	add	r6,r6,r2
 1000e18:	d9814b15 	stw	r6,1324(sp)
 1000e1c:	90013b1e 	bne	r18,zero,100130c <___vfprintf_internal_r+0xbb0>
 1000e20:	d9c14017 	ldw	r7,1280(sp)
 1000e24:	dd401904 	addi	r21,sp,100
 1000e28:	d8000d15 	stw	zero,52(sp)
 1000e2c:	003ea706 	br	10008cc <___vfprintf_internal_r+0x170>
 1000e30:	d8800e17 	ldw	r2,56(sp)
 1000e34:	10053f1e 	bne	r2,zero,1002334 <___vfprintf_internal_r+0x1bd8>
 1000e38:	d8000d15 	stw	zero,52(sp)
 1000e3c:	b080030b 	ldhu	r2,12(r22)
 1000e40:	1080100c 	andi	r2,r2,64
 1000e44:	103e8726 	beq	r2,zero,1000864 <___vfprintf_internal_r+0x108>
 1000e48:	00bfffc4 	movi	r2,-1
 1000e4c:	d8814b15 	stw	r2,1324(sp)
 1000e50:	003e8406 	br	1000864 <___vfprintf_internal_r+0x108>
 1000e54:	d9814d17 	ldw	r6,1332(sp)
 1000e58:	00801944 	movi	r2,101
 1000e5c:	11806e16 	blt	r2,r6,1001018 <___vfprintf_internal_r+0x8bc>
 1000e60:	d9414717 	ldw	r5,1308(sp)
 1000e64:	00c00044 	movi	r3,1
 1000e68:	1943430e 	bge	r3,r5,1001b78 <___vfprintf_internal_r+0x141c>
 1000e6c:	d8814117 	ldw	r2,1284(sp)
 1000e70:	94800044 	addi	r18,r18,1
 1000e74:	8c400044 	addi	r17,r17,1
 1000e78:	a8800015 	stw	r2,0(r21)
 1000e7c:	008001c4 	movi	r2,7
 1000e80:	a8c00115 	stw	r3,4(r21)
 1000e84:	dc800e15 	stw	r18,56(sp)
 1000e88:	dc400d15 	stw	r17,52(sp)
 1000e8c:	1441ca16 	blt	r2,r17,10015b8 <___vfprintf_internal_r+0xe5c>
 1000e90:	a8c00204 	addi	r3,r21,8
 1000e94:	d9014917 	ldw	r4,1316(sp)
 1000e98:	00800044 	movi	r2,1
 1000e9c:	94800044 	addi	r18,r18,1
 1000ea0:	8c400044 	addi	r17,r17,1
 1000ea4:	18800115 	stw	r2,4(r3)
 1000ea8:	008001c4 	movi	r2,7
 1000eac:	19000015 	stw	r4,0(r3)
 1000eb0:	dc800e15 	stw	r18,56(sp)
 1000eb4:	dc400d15 	stw	r17,52(sp)
 1000eb8:	1441b616 	blt	r2,r17,1001594 <___vfprintf_internal_r+0xe38>
 1000ebc:	1cc00204 	addi	r19,r3,8
 1000ec0:	d9014217 	ldw	r4,1288(sp)
 1000ec4:	d9414317 	ldw	r5,1292(sp)
 1000ec8:	000d883a 	mov	r6,zero
 1000ecc:	000f883a 	mov	r7,zero
 1000ed0:	100e0000 	call	100e000 <__nedf2>
 1000ed4:	10017426 	beq	r2,zero,10014a8 <___vfprintf_internal_r+0xd4c>
 1000ed8:	d9414717 	ldw	r5,1308(sp)
 1000edc:	d9814117 	ldw	r6,1284(sp)
 1000ee0:	8c400044 	addi	r17,r17,1
 1000ee4:	2c85883a 	add	r2,r5,r18
 1000ee8:	14bfffc4 	addi	r18,r2,-1
 1000eec:	28bfffc4 	addi	r2,r5,-1
 1000ef0:	30c00044 	addi	r3,r6,1
 1000ef4:	98800115 	stw	r2,4(r19)
 1000ef8:	008001c4 	movi	r2,7
 1000efc:	98c00015 	stw	r3,0(r19)
 1000f00:	dc800e15 	stw	r18,56(sp)
 1000f04:	dc400d15 	stw	r17,52(sp)
 1000f08:	14418e16 	blt	r2,r17,1001544 <___vfprintf_internal_r+0xde8>
 1000f0c:	9cc00204 	addi	r19,r19,8
 1000f10:	d9414817 	ldw	r5,1312(sp)
 1000f14:	d8800804 	addi	r2,sp,32
 1000f18:	8c400044 	addi	r17,r17,1
 1000f1c:	9165883a 	add	r18,r18,r5
 1000f20:	98800015 	stw	r2,0(r19)
 1000f24:	008001c4 	movi	r2,7
 1000f28:	99400115 	stw	r5,4(r19)
 1000f2c:	dc800e15 	stw	r18,56(sp)
 1000f30:	dc400d15 	stw	r17,52(sp)
 1000f34:	1440ed16 	blt	r2,r17,10012ec <___vfprintf_internal_r+0xb90>
 1000f38:	98c00204 	addi	r3,r19,8
 1000f3c:	003f8506 	br	1000d54 <___vfprintf_internal_r+0x5f8>
 1000f40:	d9814a17 	ldw	r6,1320(sp)
 1000f44:	d8814517 	ldw	r2,1300(sp)
 1000f48:	30a1c83a 	sub	r16,r6,r2
 1000f4c:	043f4b0e 	bge	zero,r16,1000c7c <___vfprintf_internal_r+0x520>
 1000f50:	00800404 	movi	r2,16
 1000f54:	1404340e 	bge	r2,r16,1002028 <___vfprintf_internal_r+0x18cc>
 1000f58:	1027883a 	mov	r19,r2
 1000f5c:	070040b4 	movhi	fp,258
 1000f60:	e7208784 	addi	fp,fp,-32226
 1000f64:	050001c4 	movi	r20,7
 1000f68:	00000306 	br	1000f78 <___vfprintf_internal_r+0x81c>
 1000f6c:	843ffc04 	addi	r16,r16,-16
 1000f70:	ad400204 	addi	r21,r21,8
 1000f74:	9c00130e 	bge	r19,r16,1000fc4 <___vfprintf_internal_r+0x868>
 1000f78:	94800404 	addi	r18,r18,16
 1000f7c:	8c400044 	addi	r17,r17,1
 1000f80:	af000015 	stw	fp,0(r21)
 1000f84:	acc00115 	stw	r19,4(r21)
 1000f88:	dc800e15 	stw	r18,56(sp)
 1000f8c:	dc400d15 	stw	r17,52(sp)
 1000f90:	a47ff60e 	bge	r20,r17,1000f6c <___vfprintf_internal_r+0x810>
 1000f94:	d9014f17 	ldw	r4,1340(sp)
 1000f98:	b00b883a 	mov	r5,r22
 1000f9c:	d9800c04 	addi	r6,sp,48
 1000fa0:	d9c15115 	stw	r7,1348(sp)
 1000fa4:	10007040 	call	1000704 <__sprint_r>
 1000fa8:	d9c15117 	ldw	r7,1348(sp)
 1000fac:	103fa31e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1000fb0:	843ffc04 	addi	r16,r16,-16
 1000fb4:	dc800e17 	ldw	r18,56(sp)
 1000fb8:	dc400d17 	ldw	r17,52(sp)
 1000fbc:	dd401904 	addi	r21,sp,100
 1000fc0:	9c3fed16 	blt	r19,r16,1000f78 <___vfprintf_internal_r+0x81c>
 1000fc4:	9425883a 	add	r18,r18,r16
 1000fc8:	8c400044 	addi	r17,r17,1
 1000fcc:	008001c4 	movi	r2,7
 1000fd0:	af000015 	stw	fp,0(r21)
 1000fd4:	ac000115 	stw	r16,4(r21)
 1000fd8:	dc800e15 	stw	r18,56(sp)
 1000fdc:	dc400d15 	stw	r17,52(sp)
 1000fe0:	14416116 	blt	r2,r17,1001568 <___vfprintf_internal_r+0xe0c>
 1000fe4:	ad400204 	addi	r21,r21,8
 1000fe8:	003f2406 	br	1000c7c <___vfprintf_internal_r+0x520>
 1000fec:	d9014f17 	ldw	r4,1340(sp)
 1000ff0:	100594c0 	call	100594c <__sinit>
 1000ff4:	d9c15117 	ldw	r7,1348(sp)
 1000ff8:	003def06 	br	10007b8 <___vfprintf_internal_r+0x5c>
 1000ffc:	d9014f17 	ldw	r4,1340(sp)
 1001000:	b00b883a 	mov	r5,r22
 1001004:	d9c15115 	stw	r7,1348(sp)
 1001008:	1003dac0 	call	1003dac <__swsetup_r>
 100100c:	d9c15117 	ldw	r7,1348(sp)
 1001010:	103dee26 	beq	r2,zero,10007cc <___vfprintf_internal_r+0x70>
 1001014:	003f8c06 	br	1000e48 <___vfprintf_internal_r+0x6ec>
 1001018:	d9014217 	ldw	r4,1288(sp)
 100101c:	d9414317 	ldw	r5,1292(sp)
 1001020:	000d883a 	mov	r6,zero
 1001024:	000f883a 	mov	r7,zero
 1001028:	100df780 	call	100df78 <__eqdf2>
 100102c:	1000f21e 	bne	r2,zero,10013f8 <___vfprintf_internal_r+0xc9c>
 1001030:	008040b4 	movhi	r2,258
 1001034:	10a08704 	addi	r2,r2,-32228
 1001038:	94800044 	addi	r18,r18,1
 100103c:	8c400044 	addi	r17,r17,1
 1001040:	a8800015 	stw	r2,0(r21)
 1001044:	00c00044 	movi	r3,1
 1001048:	008001c4 	movi	r2,7
 100104c:	a8c00115 	stw	r3,4(r21)
 1001050:	dc800e15 	stw	r18,56(sp)
 1001054:	dc400d15 	stw	r17,52(sp)
 1001058:	1442fa16 	blt	r2,r17,1001c44 <___vfprintf_internal_r+0x14e8>
 100105c:	a8c00204 	addi	r3,r21,8
 1001060:	d8800517 	ldw	r2,20(sp)
 1001064:	d9014717 	ldw	r4,1308(sp)
 1001068:	11015c0e 	bge	r2,r4,10015dc <___vfprintf_internal_r+0xe80>
 100106c:	dc400d17 	ldw	r17,52(sp)
 1001070:	d9814917 	ldw	r6,1316(sp)
 1001074:	00800044 	movi	r2,1
 1001078:	94800044 	addi	r18,r18,1
 100107c:	8c400044 	addi	r17,r17,1
 1001080:	18800115 	stw	r2,4(r3)
 1001084:	008001c4 	movi	r2,7
 1001088:	19800015 	stw	r6,0(r3)
 100108c:	dc800e15 	stw	r18,56(sp)
 1001090:	dc400d15 	stw	r17,52(sp)
 1001094:	14431016 	blt	r2,r17,1001cd8 <___vfprintf_internal_r+0x157c>
 1001098:	18c00204 	addi	r3,r3,8
 100109c:	d8814717 	ldw	r2,1308(sp)
 10010a0:	143fffc4 	addi	r16,r2,-1
 10010a4:	043f2b0e 	bge	zero,r16,1000d54 <___vfprintf_internal_r+0x5f8>
 10010a8:	00800404 	movi	r2,16
 10010ac:	1402a20e 	bge	r2,r16,1001b38 <___vfprintf_internal_r+0x13dc>
 10010b0:	dc400d17 	ldw	r17,52(sp)
 10010b4:	1027883a 	mov	r19,r2
 10010b8:	070040b4 	movhi	fp,258
 10010bc:	e7208784 	addi	fp,fp,-32226
 10010c0:	050001c4 	movi	r20,7
 10010c4:	00000306 	br	10010d4 <___vfprintf_internal_r+0x978>
 10010c8:	18c00204 	addi	r3,r3,8
 10010cc:	843ffc04 	addi	r16,r16,-16
 10010d0:	9c029c0e 	bge	r19,r16,1001b44 <___vfprintf_internal_r+0x13e8>
 10010d4:	94800404 	addi	r18,r18,16
 10010d8:	8c400044 	addi	r17,r17,1
 10010dc:	1f000015 	stw	fp,0(r3)
 10010e0:	1cc00115 	stw	r19,4(r3)
 10010e4:	dc800e15 	stw	r18,56(sp)
 10010e8:	dc400d15 	stw	r17,52(sp)
 10010ec:	a47ff60e 	bge	r20,r17,10010c8 <___vfprintf_internal_r+0x96c>
 10010f0:	d9014f17 	ldw	r4,1340(sp)
 10010f4:	b00b883a 	mov	r5,r22
 10010f8:	d9800c04 	addi	r6,sp,48
 10010fc:	10007040 	call	1000704 <__sprint_r>
 1001100:	103f4e1e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1001104:	dc800e17 	ldw	r18,56(sp)
 1001108:	dc400d17 	ldw	r17,52(sp)
 100110c:	d8c01904 	addi	r3,sp,100
 1001110:	003fee06 	br	10010cc <___vfprintf_internal_r+0x970>
 1001114:	d8802c0b 	ldhu	r2,176(sp)
 1001118:	00ffffc4 	movi	r3,-1
 100111c:	d8c14b15 	stw	r3,1324(sp)
 1001120:	1080100c 	andi	r2,r2,64
 1001124:	103dcc1e 	bne	r2,zero,1000858 <___vfprintf_internal_r+0xfc>
 1001128:	003dce06 	br	1000864 <___vfprintf_internal_r+0x108>
 100112c:	d9014f17 	ldw	r4,1340(sp)
 1001130:	b00b883a 	mov	r5,r22
 1001134:	d9800c04 	addi	r6,sp,48
 1001138:	10007040 	call	1000704 <__sprint_r>
 100113c:	103f3f1e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1001140:	dc800e17 	ldw	r18,56(sp)
 1001144:	003f2e06 	br	1000e00 <___vfprintf_internal_r+0x6a4>
 1001148:	d9414c17 	ldw	r5,1328(sp)
 100114c:	29400414 	ori	r5,r5,16
 1001150:	d9414c15 	stw	r5,1328(sp)
 1001154:	d9814c17 	ldw	r6,1328(sp)
 1001158:	3080080c 	andi	r2,r6,32
 100115c:	10014f1e 	bne	r2,zero,100169c <___vfprintf_internal_r+0xf40>
 1001160:	d8c14c17 	ldw	r3,1328(sp)
 1001164:	1880040c 	andi	r2,r3,16
 1001168:	1002ea1e 	bne	r2,zero,1001d14 <___vfprintf_internal_r+0x15b8>
 100116c:	d9014c17 	ldw	r4,1328(sp)
 1001170:	2080100c 	andi	r2,r4,64
 1001174:	1002e726 	beq	r2,zero,1001d14 <___vfprintf_internal_r+0x15b8>
 1001178:	3880000f 	ldh	r2,0(r7)
 100117c:	39c00104 	addi	r7,r7,4
 1001180:	d9c14015 	stw	r7,1280(sp)
 1001184:	1023d7fa 	srai	r17,r2,31
 1001188:	1021883a 	mov	r16,r2
 100118c:	88037216 	blt	r17,zero,1001f58 <___vfprintf_internal_r+0x17fc>
 1001190:	01000044 	movi	r4,1
 1001194:	98000416 	blt	r19,zero,10011a8 <___vfprintf_internal_r+0xa4c>
 1001198:	d8c14c17 	ldw	r3,1328(sp)
 100119c:	00bfdfc4 	movi	r2,-129
 10011a0:	1886703a 	and	r3,r3,r2
 10011a4:	d8c14c15 	stw	r3,1328(sp)
 10011a8:	8444b03a 	or	r2,r16,r17
 10011ac:	1002261e 	bne	r2,zero,1001a48 <___vfprintf_internal_r+0x12ec>
 10011b0:	9802251e 	bne	r19,zero,1001a48 <___vfprintf_internal_r+0x12ec>
 10011b4:	20803fcc 	andi	r2,r4,255
 10011b8:	10029b26 	beq	r2,zero,1001c28 <___vfprintf_internal_r+0x14cc>
 10011bc:	d8c01904 	addi	r3,sp,100
 10011c0:	dd000f04 	addi	r20,sp,60
 10011c4:	d8c14115 	stw	r3,1284(sp)
 10011c8:	d8c14117 	ldw	r3,1284(sp)
 10011cc:	dcc14515 	stw	r19,1300(sp)
 10011d0:	a0c5c83a 	sub	r2,r20,r3
 10011d4:	11c00a04 	addi	r7,r2,40
 10011d8:	99c0010e 	bge	r19,r7,10011e0 <___vfprintf_internal_r+0xa84>
 10011dc:	d9c14515 	stw	r7,1300(sp)
 10011e0:	dcc14615 	stw	r19,1304(sp)
 10011e4:	d8800407 	ldb	r2,16(sp)
 10011e8:	103e4c26 	beq	r2,zero,1000b1c <___vfprintf_internal_r+0x3c0>
 10011ec:	d8814517 	ldw	r2,1300(sp)
 10011f0:	10800044 	addi	r2,r2,1
 10011f4:	d8814515 	stw	r2,1300(sp)
 10011f8:	003e4806 	br	1000b1c <___vfprintf_internal_r+0x3c0>
 10011fc:	d9814c17 	ldw	r6,1328(sp)
 1001200:	31800414 	ori	r6,r6,16
 1001204:	d9814c15 	stw	r6,1328(sp)
 1001208:	d8c14c17 	ldw	r3,1328(sp)
 100120c:	1880080c 	andi	r2,r3,32
 1001210:	1001271e 	bne	r2,zero,10016b0 <___vfprintf_internal_r+0xf54>
 1001214:	d9414c17 	ldw	r5,1328(sp)
 1001218:	2880040c 	andi	r2,r5,16
 100121c:	1002b61e 	bne	r2,zero,1001cf8 <___vfprintf_internal_r+0x159c>
 1001220:	d9814c17 	ldw	r6,1328(sp)
 1001224:	3080100c 	andi	r2,r6,64
 1001228:	1002b326 	beq	r2,zero,1001cf8 <___vfprintf_internal_r+0x159c>
 100122c:	3c00000b 	ldhu	r16,0(r7)
 1001230:	0009883a 	mov	r4,zero
 1001234:	39c00104 	addi	r7,r7,4
 1001238:	0023883a 	mov	r17,zero
 100123c:	d9c14015 	stw	r7,1280(sp)
 1001240:	d8000405 	stb	zero,16(sp)
 1001244:	003fd306 	br	1001194 <___vfprintf_internal_r+0xa38>
 1001248:	d9014c17 	ldw	r4,1328(sp)
 100124c:	21000414 	ori	r4,r4,16
 1001250:	d9014c15 	stw	r4,1328(sp)
 1001254:	d9414c17 	ldw	r5,1328(sp)
 1001258:	2880080c 	andi	r2,r5,32
 100125c:	1001081e 	bne	r2,zero,1001680 <___vfprintf_internal_r+0xf24>
 1001260:	d8c14c17 	ldw	r3,1328(sp)
 1001264:	1880040c 	andi	r2,r3,16
 1001268:	1002b01e 	bne	r2,zero,1001d2c <___vfprintf_internal_r+0x15d0>
 100126c:	d9014c17 	ldw	r4,1328(sp)
 1001270:	2080100c 	andi	r2,r4,64
 1001274:	1002ad26 	beq	r2,zero,1001d2c <___vfprintf_internal_r+0x15d0>
 1001278:	3c00000b 	ldhu	r16,0(r7)
 100127c:	01000044 	movi	r4,1
 1001280:	39c00104 	addi	r7,r7,4
 1001284:	0023883a 	mov	r17,zero
 1001288:	d9c14015 	stw	r7,1280(sp)
 100128c:	d8000405 	stb	zero,16(sp)
 1001290:	003fc006 	br	1001194 <___vfprintf_internal_r+0xa38>
 1001294:	d9014f17 	ldw	r4,1340(sp)
 1001298:	b00b883a 	mov	r5,r22
 100129c:	d9800c04 	addi	r6,sp,48
 10012a0:	10007040 	call	1000704 <__sprint_r>
 10012a4:	103ee51e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 10012a8:	dc800e17 	ldw	r18,56(sp)
 10012ac:	d8c01904 	addi	r3,sp,100
 10012b0:	d9814c17 	ldw	r6,1328(sp)
 10012b4:	3080004c 	andi	r2,r6,1
 10012b8:	1005003a 	cmpeq	r2,r2,zero
 10012bc:	103ea51e 	bne	r2,zero,1000d54 <___vfprintf_internal_r+0x5f8>
 10012c0:	00800044 	movi	r2,1
 10012c4:	dc400d17 	ldw	r17,52(sp)
 10012c8:	18800115 	stw	r2,4(r3)
 10012cc:	d8814917 	ldw	r2,1316(sp)
 10012d0:	94800044 	addi	r18,r18,1
 10012d4:	8c400044 	addi	r17,r17,1
 10012d8:	18800015 	stw	r2,0(r3)
 10012dc:	008001c4 	movi	r2,7
 10012e0:	dc800e15 	stw	r18,56(sp)
 10012e4:	dc400d15 	stw	r17,52(sp)
 10012e8:	14421e0e 	bge	r2,r17,1001b64 <___vfprintf_internal_r+0x1408>
 10012ec:	d9014f17 	ldw	r4,1340(sp)
 10012f0:	b00b883a 	mov	r5,r22
 10012f4:	d9800c04 	addi	r6,sp,48
 10012f8:	10007040 	call	1000704 <__sprint_r>
 10012fc:	103ecf1e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1001300:	dc800e17 	ldw	r18,56(sp)
 1001304:	d8c01904 	addi	r3,sp,100
 1001308:	003e9206 	br	1000d54 <___vfprintf_internal_r+0x5f8>
 100130c:	d9014f17 	ldw	r4,1340(sp)
 1001310:	b00b883a 	mov	r5,r22
 1001314:	d9800c04 	addi	r6,sp,48
 1001318:	10007040 	call	1000704 <__sprint_r>
 100131c:	103ec026 	beq	r2,zero,1000e20 <___vfprintf_internal_r+0x6c4>
 1001320:	003ec606 	br	1000e3c <___vfprintf_internal_r+0x6e0>
 1001324:	d9014f17 	ldw	r4,1340(sp)
 1001328:	b00b883a 	mov	r5,r22
 100132c:	d9800c04 	addi	r6,sp,48
 1001330:	d9c15115 	stw	r7,1348(sp)
 1001334:	10007040 	call	1000704 <__sprint_r>
 1001338:	d9c15117 	ldw	r7,1348(sp)
 100133c:	103ebf1e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1001340:	dc800e17 	ldw	r18,56(sp)
 1001344:	dc400d17 	ldw	r17,52(sp)
 1001348:	dd401904 	addi	r21,sp,100
 100134c:	003e7406 	br	1000d20 <___vfprintf_internal_r+0x5c4>
 1001350:	d9014f17 	ldw	r4,1340(sp)
 1001354:	b00b883a 	mov	r5,r22
 1001358:	d9800c04 	addi	r6,sp,48
 100135c:	d9c15115 	stw	r7,1348(sp)
 1001360:	10007040 	call	1000704 <__sprint_r>
 1001364:	d9c15117 	ldw	r7,1348(sp)
 1001368:	103eb41e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 100136c:	dd401904 	addi	r21,sp,100
 1001370:	003d6d06 	br	1000928 <___vfprintf_internal_r+0x1cc>
 1001374:	d9014f17 	ldw	r4,1340(sp)
 1001378:	b00b883a 	mov	r5,r22
 100137c:	d9800c04 	addi	r6,sp,48
 1001380:	d9c15115 	stw	r7,1348(sp)
 1001384:	10007040 	call	1000704 <__sprint_r>
 1001388:	d9c15117 	ldw	r7,1348(sp)
 100138c:	103eab1e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1001390:	dc800e17 	ldw	r18,56(sp)
 1001394:	dc400d17 	ldw	r17,52(sp)
 1001398:	dd401904 	addi	r21,sp,100
 100139c:	003e3406 	br	1000c70 <___vfprintf_internal_r+0x514>
 10013a0:	d9014f17 	ldw	r4,1340(sp)
 10013a4:	b00b883a 	mov	r5,r22
 10013a8:	d9800c04 	addi	r6,sp,48
 10013ac:	d9c15115 	stw	r7,1348(sp)
 10013b0:	10007040 	call	1000704 <__sprint_r>
 10013b4:	d9c15117 	ldw	r7,1348(sp)
 10013b8:	103ea01e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 10013bc:	dc800e17 	ldw	r18,56(sp)
 10013c0:	dc400d17 	ldw	r17,52(sp)
 10013c4:	dd401904 	addi	r21,sp,100
 10013c8:	003e1c06 	br	1000c3c <___vfprintf_internal_r+0x4e0>
 10013cc:	d9014f17 	ldw	r4,1340(sp)
 10013d0:	b00b883a 	mov	r5,r22
 10013d4:	d9800c04 	addi	r6,sp,48
 10013d8:	d9c15115 	stw	r7,1348(sp)
 10013dc:	10007040 	call	1000704 <__sprint_r>
 10013e0:	d9c15117 	ldw	r7,1348(sp)
 10013e4:	103e951e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 10013e8:	dc800e17 	ldw	r18,56(sp)
 10013ec:	dc400d17 	ldw	r17,52(sp)
 10013f0:	dd401904 	addi	r21,sp,100
 10013f4:	003e0406 	br	1000c08 <___vfprintf_internal_r+0x4ac>
 10013f8:	d9000517 	ldw	r4,20(sp)
 10013fc:	0102520e 	bge	zero,r4,1001d48 <___vfprintf_internal_r+0x15ec>
 1001400:	d9814717 	ldw	r6,1308(sp)
 1001404:	21807a16 	blt	r4,r6,10015f0 <___vfprintf_internal_r+0xe94>
 1001408:	d8814117 	ldw	r2,1284(sp)
 100140c:	91a5883a 	add	r18,r18,r6
 1001410:	8c400044 	addi	r17,r17,1
 1001414:	a8800015 	stw	r2,0(r21)
 1001418:	008001c4 	movi	r2,7
 100141c:	a9800115 	stw	r6,4(r21)
 1001420:	dc800e15 	stw	r18,56(sp)
 1001424:	dc400d15 	stw	r17,52(sp)
 1001428:	1442f616 	blt	r2,r17,1002004 <___vfprintf_internal_r+0x18a8>
 100142c:	a8c00204 	addi	r3,r21,8
 1001430:	d9414717 	ldw	r5,1308(sp)
 1001434:	2161c83a 	sub	r16,r4,r5
 1001438:	043f9d0e 	bge	zero,r16,10012b0 <___vfprintf_internal_r+0xb54>
 100143c:	00800404 	movi	r2,16
 1001440:	1402130e 	bge	r2,r16,1001c90 <___vfprintf_internal_r+0x1534>
 1001444:	dc400d17 	ldw	r17,52(sp)
 1001448:	1027883a 	mov	r19,r2
 100144c:	070040b4 	movhi	fp,258
 1001450:	e7208784 	addi	fp,fp,-32226
 1001454:	050001c4 	movi	r20,7
 1001458:	00000306 	br	1001468 <___vfprintf_internal_r+0xd0c>
 100145c:	18c00204 	addi	r3,r3,8
 1001460:	843ffc04 	addi	r16,r16,-16
 1001464:	9c020d0e 	bge	r19,r16,1001c9c <___vfprintf_internal_r+0x1540>
 1001468:	94800404 	addi	r18,r18,16
 100146c:	8c400044 	addi	r17,r17,1
 1001470:	1f000015 	stw	fp,0(r3)
 1001474:	1cc00115 	stw	r19,4(r3)
 1001478:	dc800e15 	stw	r18,56(sp)
 100147c:	dc400d15 	stw	r17,52(sp)
 1001480:	a47ff60e 	bge	r20,r17,100145c <___vfprintf_internal_r+0xd00>
 1001484:	d9014f17 	ldw	r4,1340(sp)
 1001488:	b00b883a 	mov	r5,r22
 100148c:	d9800c04 	addi	r6,sp,48
 1001490:	10007040 	call	1000704 <__sprint_r>
 1001494:	103e691e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1001498:	dc800e17 	ldw	r18,56(sp)
 100149c:	dc400d17 	ldw	r17,52(sp)
 10014a0:	d8c01904 	addi	r3,sp,100
 10014a4:	003fee06 	br	1001460 <___vfprintf_internal_r+0xd04>
 10014a8:	d8814717 	ldw	r2,1308(sp)
 10014ac:	143fffc4 	addi	r16,r2,-1
 10014b0:	043e970e 	bge	zero,r16,1000f10 <___vfprintf_internal_r+0x7b4>
 10014b4:	00800404 	movi	r2,16
 10014b8:	1400180e 	bge	r2,r16,100151c <___vfprintf_internal_r+0xdc0>
 10014bc:	1029883a 	mov	r20,r2
 10014c0:	070040b4 	movhi	fp,258
 10014c4:	e7208784 	addi	fp,fp,-32226
 10014c8:	054001c4 	movi	r21,7
 10014cc:	00000306 	br	10014dc <___vfprintf_internal_r+0xd80>
 10014d0:	9cc00204 	addi	r19,r19,8
 10014d4:	843ffc04 	addi	r16,r16,-16
 10014d8:	a400120e 	bge	r20,r16,1001524 <___vfprintf_internal_r+0xdc8>
 10014dc:	94800404 	addi	r18,r18,16
 10014e0:	8c400044 	addi	r17,r17,1
 10014e4:	9f000015 	stw	fp,0(r19)
 10014e8:	9d000115 	stw	r20,4(r19)
 10014ec:	dc800e15 	stw	r18,56(sp)
 10014f0:	dc400d15 	stw	r17,52(sp)
 10014f4:	ac7ff60e 	bge	r21,r17,10014d0 <___vfprintf_internal_r+0xd74>
 10014f8:	d9014f17 	ldw	r4,1340(sp)
 10014fc:	b00b883a 	mov	r5,r22
 1001500:	d9800c04 	addi	r6,sp,48
 1001504:	10007040 	call	1000704 <__sprint_r>
 1001508:	103e4c1e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 100150c:	dc800e17 	ldw	r18,56(sp)
 1001510:	dc400d17 	ldw	r17,52(sp)
 1001514:	dcc01904 	addi	r19,sp,100
 1001518:	003fee06 	br	10014d4 <___vfprintf_internal_r+0xd78>
 100151c:	070040b4 	movhi	fp,258
 1001520:	e7208784 	addi	fp,fp,-32226
 1001524:	9425883a 	add	r18,r18,r16
 1001528:	8c400044 	addi	r17,r17,1
 100152c:	008001c4 	movi	r2,7
 1001530:	9f000015 	stw	fp,0(r19)
 1001534:	9c000115 	stw	r16,4(r19)
 1001538:	dc800e15 	stw	r18,56(sp)
 100153c:	dc400d15 	stw	r17,52(sp)
 1001540:	147e720e 	bge	r2,r17,1000f0c <___vfprintf_internal_r+0x7b0>
 1001544:	d9014f17 	ldw	r4,1340(sp)
 1001548:	b00b883a 	mov	r5,r22
 100154c:	d9800c04 	addi	r6,sp,48
 1001550:	10007040 	call	1000704 <__sprint_r>
 1001554:	103e391e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1001558:	dc800e17 	ldw	r18,56(sp)
 100155c:	dc400d17 	ldw	r17,52(sp)
 1001560:	dcc01904 	addi	r19,sp,100
 1001564:	003e6a06 	br	1000f10 <___vfprintf_internal_r+0x7b4>
 1001568:	d9014f17 	ldw	r4,1340(sp)
 100156c:	b00b883a 	mov	r5,r22
 1001570:	d9800c04 	addi	r6,sp,48
 1001574:	d9c15115 	stw	r7,1348(sp)
 1001578:	10007040 	call	1000704 <__sprint_r>
 100157c:	d9c15117 	ldw	r7,1348(sp)
 1001580:	103e2e1e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1001584:	dc800e17 	ldw	r18,56(sp)
 1001588:	dc400d17 	ldw	r17,52(sp)
 100158c:	dd401904 	addi	r21,sp,100
 1001590:	003dba06 	br	1000c7c <___vfprintf_internal_r+0x520>
 1001594:	d9014f17 	ldw	r4,1340(sp)
 1001598:	b00b883a 	mov	r5,r22
 100159c:	d9800c04 	addi	r6,sp,48
 10015a0:	10007040 	call	1000704 <__sprint_r>
 10015a4:	103e251e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 10015a8:	dc800e17 	ldw	r18,56(sp)
 10015ac:	dc400d17 	ldw	r17,52(sp)
 10015b0:	dcc01904 	addi	r19,sp,100
 10015b4:	003e4206 	br	1000ec0 <___vfprintf_internal_r+0x764>
 10015b8:	d9014f17 	ldw	r4,1340(sp)
 10015bc:	b00b883a 	mov	r5,r22
 10015c0:	d9800c04 	addi	r6,sp,48
 10015c4:	10007040 	call	1000704 <__sprint_r>
 10015c8:	103e1c1e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 10015cc:	dc800e17 	ldw	r18,56(sp)
 10015d0:	dc400d17 	ldw	r17,52(sp)
 10015d4:	d8c01904 	addi	r3,sp,100
 10015d8:	003e2e06 	br	1000e94 <___vfprintf_internal_r+0x738>
 10015dc:	d9414c17 	ldw	r5,1328(sp)
 10015e0:	2880004c 	andi	r2,r5,1
 10015e4:	1005003a 	cmpeq	r2,r2,zero
 10015e8:	103dda1e 	bne	r2,zero,1000d54 <___vfprintf_internal_r+0x5f8>
 10015ec:	003e9f06 	br	100106c <___vfprintf_internal_r+0x910>
 10015f0:	d8c14117 	ldw	r3,1284(sp)
 10015f4:	9125883a 	add	r18,r18,r4
 10015f8:	8c400044 	addi	r17,r17,1
 10015fc:	008001c4 	movi	r2,7
 1001600:	a8c00015 	stw	r3,0(r21)
 1001604:	a9000115 	stw	r4,4(r21)
 1001608:	dc800e15 	stw	r18,56(sp)
 100160c:	dc400d15 	stw	r17,52(sp)
 1001610:	14426616 	blt	r2,r17,1001fac <___vfprintf_internal_r+0x1850>
 1001614:	a8c00204 	addi	r3,r21,8
 1001618:	d9414917 	ldw	r5,1316(sp)
 100161c:	00800044 	movi	r2,1
 1001620:	94800044 	addi	r18,r18,1
 1001624:	8c400044 	addi	r17,r17,1
 1001628:	18800115 	stw	r2,4(r3)
 100162c:	008001c4 	movi	r2,7
 1001630:	19400015 	stw	r5,0(r3)
 1001634:	dc800e15 	stw	r18,56(sp)
 1001638:	dc400d15 	stw	r17,52(sp)
 100163c:	2021883a 	mov	r16,r4
 1001640:	14425016 	blt	r2,r17,1001f84 <___vfprintf_internal_r+0x1828>
 1001644:	19400204 	addi	r5,r3,8
 1001648:	d9814717 	ldw	r6,1308(sp)
 100164c:	8c400044 	addi	r17,r17,1
 1001650:	dc400d15 	stw	r17,52(sp)
 1001654:	3107c83a 	sub	r3,r6,r4
 1001658:	d9014117 	ldw	r4,1284(sp)
 100165c:	90e5883a 	add	r18,r18,r3
 1001660:	28c00115 	stw	r3,4(r5)
 1001664:	8105883a 	add	r2,r16,r4
 1001668:	28800015 	stw	r2,0(r5)
 100166c:	008001c4 	movi	r2,7
 1001670:	dc800e15 	stw	r18,56(sp)
 1001674:	147f1d16 	blt	r2,r17,10012ec <___vfprintf_internal_r+0xb90>
 1001678:	28c00204 	addi	r3,r5,8
 100167c:	003db506 	br	1000d54 <___vfprintf_internal_r+0x5f8>
 1001680:	3c000017 	ldw	r16,0(r7)
 1001684:	3c400117 	ldw	r17,4(r7)
 1001688:	39800204 	addi	r6,r7,8
 100168c:	01000044 	movi	r4,1
 1001690:	d9814015 	stw	r6,1280(sp)
 1001694:	d8000405 	stb	zero,16(sp)
 1001698:	003ebe06 	br	1001194 <___vfprintf_internal_r+0xa38>
 100169c:	3c000017 	ldw	r16,0(r7)
 10016a0:	3c400117 	ldw	r17,4(r7)
 10016a4:	38800204 	addi	r2,r7,8
 10016a8:	d8814015 	stw	r2,1280(sp)
 10016ac:	003eb706 	br	100118c <___vfprintf_internal_r+0xa30>
 10016b0:	3c000017 	ldw	r16,0(r7)
 10016b4:	3c400117 	ldw	r17,4(r7)
 10016b8:	39000204 	addi	r4,r7,8
 10016bc:	d9014015 	stw	r4,1280(sp)
 10016c0:	0009883a 	mov	r4,zero
 10016c4:	d8000405 	stb	zero,16(sp)
 10016c8:	003eb206 	br	1001194 <___vfprintf_internal_r+0xa38>
 10016cc:	38c00017 	ldw	r3,0(r7)
 10016d0:	39c00104 	addi	r7,r7,4
 10016d4:	d8c14a15 	stw	r3,1320(sp)
 10016d8:	1800d10e 	bge	r3,zero,1001a20 <___vfprintf_internal_r+0x12c4>
 10016dc:	00c7c83a 	sub	r3,zero,r3
 10016e0:	d8c14a15 	stw	r3,1320(sp)
 10016e4:	d9014c17 	ldw	r4,1328(sp)
 10016e8:	b8c00007 	ldb	r3,0(r23)
 10016ec:	21000114 	ori	r4,r4,4
 10016f0:	d9014c15 	stw	r4,1328(sp)
 10016f4:	003c9806 	br	1000958 <___vfprintf_internal_r+0x1fc>
 10016f8:	d9814c17 	ldw	r6,1328(sp)
 10016fc:	3080080c 	andi	r2,r6,32
 1001700:	1001f026 	beq	r2,zero,1001ec4 <___vfprintf_internal_r+0x1768>
 1001704:	d9014b17 	ldw	r4,1324(sp)
 1001708:	38800017 	ldw	r2,0(r7)
 100170c:	39c00104 	addi	r7,r7,4
 1001710:	d9c14015 	stw	r7,1280(sp)
 1001714:	2007d7fa 	srai	r3,r4,31
 1001718:	d9c14017 	ldw	r7,1280(sp)
 100171c:	11000015 	stw	r4,0(r2)
 1001720:	10c00115 	stw	r3,4(r2)
 1001724:	003c6906 	br	10008cc <___vfprintf_internal_r+0x170>
 1001728:	b8c00007 	ldb	r3,0(r23)
 100172c:	00801b04 	movi	r2,108
 1001730:	18824f26 	beq	r3,r2,1002070 <___vfprintf_internal_r+0x1914>
 1001734:	d9414c17 	ldw	r5,1328(sp)
 1001738:	29400414 	ori	r5,r5,16
 100173c:	d9414c15 	stw	r5,1328(sp)
 1001740:	003c8506 	br	1000958 <___vfprintf_internal_r+0x1fc>
 1001744:	d9814c17 	ldw	r6,1328(sp)
 1001748:	b8c00007 	ldb	r3,0(r23)
 100174c:	31800814 	ori	r6,r6,32
 1001750:	d9814c15 	stw	r6,1328(sp)
 1001754:	003c8006 	br	1000958 <___vfprintf_internal_r+0x1fc>
 1001758:	d8814c17 	ldw	r2,1328(sp)
 100175c:	3c000017 	ldw	r16,0(r7)
 1001760:	00c01e04 	movi	r3,120
 1001764:	10800094 	ori	r2,r2,2
 1001768:	d8814c15 	stw	r2,1328(sp)
 100176c:	39c00104 	addi	r7,r7,4
 1001770:	014040b4 	movhi	r5,258
 1001774:	29607004 	addi	r5,r5,-32320
 1001778:	00800c04 	movi	r2,48
 100177c:	0023883a 	mov	r17,zero
 1001780:	01000084 	movi	r4,2
 1001784:	d9c14015 	stw	r7,1280(sp)
 1001788:	d8c14d15 	stw	r3,1332(sp)
 100178c:	d9414415 	stw	r5,1296(sp)
 1001790:	d8800445 	stb	r2,17(sp)
 1001794:	d8c00485 	stb	r3,18(sp)
 1001798:	d8000405 	stb	zero,16(sp)
 100179c:	003e7d06 	br	1001194 <___vfprintf_internal_r+0xa38>
 10017a0:	d8814c17 	ldw	r2,1328(sp)
 10017a4:	b8c00007 	ldb	r3,0(r23)
 10017a8:	10801014 	ori	r2,r2,64
 10017ac:	d8814c15 	stw	r2,1328(sp)
 10017b0:	003c6906 	br	1000958 <___vfprintf_internal_r+0x1fc>
 10017b4:	d9414c17 	ldw	r5,1328(sp)
 10017b8:	2880020c 	andi	r2,r5,8
 10017bc:	1001df26 	beq	r2,zero,1001f3c <___vfprintf_internal_r+0x17e0>
 10017c0:	39800017 	ldw	r6,0(r7)
 10017c4:	38800204 	addi	r2,r7,8
 10017c8:	d8814015 	stw	r2,1280(sp)
 10017cc:	d9814215 	stw	r6,1288(sp)
 10017d0:	39c00117 	ldw	r7,4(r7)
 10017d4:	d9c14315 	stw	r7,1292(sp)
 10017d8:	d9014217 	ldw	r4,1288(sp)
 10017dc:	d9414317 	ldw	r5,1292(sp)
 10017e0:	1008dc40 	call	1008dc4 <__isinfd>
 10017e4:	10021726 	beq	r2,zero,1002044 <___vfprintf_internal_r+0x18e8>
 10017e8:	d9014217 	ldw	r4,1288(sp)
 10017ec:	d9414317 	ldw	r5,1292(sp)
 10017f0:	000d883a 	mov	r6,zero
 10017f4:	000f883a 	mov	r7,zero
 10017f8:	100e1980 	call	100e198 <__ltdf2>
 10017fc:	1002ca16 	blt	r2,zero,1002328 <___vfprintf_internal_r+0x1bcc>
 1001800:	d9414d17 	ldw	r5,1332(sp)
 1001804:	008011c4 	movi	r2,71
 1001808:	11420a16 	blt	r2,r5,1002034 <___vfprintf_internal_r+0x18d8>
 100180c:	018040b4 	movhi	r6,258
 1001810:	31a07504 	addi	r6,r6,-32300
 1001814:	d9814115 	stw	r6,1284(sp)
 1001818:	d9014c17 	ldw	r4,1328(sp)
 100181c:	00c000c4 	movi	r3,3
 1001820:	00bfdfc4 	movi	r2,-129
 1001824:	2088703a 	and	r4,r4,r2
 1001828:	180f883a 	mov	r7,r3
 100182c:	d8c14515 	stw	r3,1300(sp)
 1001830:	d9014c15 	stw	r4,1328(sp)
 1001834:	d8014615 	stw	zero,1304(sp)
 1001838:	003e6a06 	br	10011e4 <___vfprintf_internal_r+0xa88>
 100183c:	38800017 	ldw	r2,0(r7)
 1001840:	00c00044 	movi	r3,1
 1001844:	39c00104 	addi	r7,r7,4
 1001848:	d9c14015 	stw	r7,1280(sp)
 100184c:	d9000f04 	addi	r4,sp,60
 1001850:	180f883a 	mov	r7,r3
 1001854:	d8c14515 	stw	r3,1300(sp)
 1001858:	d9014115 	stw	r4,1284(sp)
 100185c:	d8800f05 	stb	r2,60(sp)
 1001860:	d8000405 	stb	zero,16(sp)
 1001864:	003cac06 	br	1000b18 <___vfprintf_internal_r+0x3bc>
 1001868:	014040b4 	movhi	r5,258
 100186c:	29607b04 	addi	r5,r5,-32276
 1001870:	d9414415 	stw	r5,1296(sp)
 1001874:	d9814c17 	ldw	r6,1328(sp)
 1001878:	3080080c 	andi	r2,r6,32
 100187c:	1000f926 	beq	r2,zero,1001c64 <___vfprintf_internal_r+0x1508>
 1001880:	3c000017 	ldw	r16,0(r7)
 1001884:	3c400117 	ldw	r17,4(r7)
 1001888:	38800204 	addi	r2,r7,8
 100188c:	d8814015 	stw	r2,1280(sp)
 1001890:	d9414c17 	ldw	r5,1328(sp)
 1001894:	2880004c 	andi	r2,r5,1
 1001898:	1005003a 	cmpeq	r2,r2,zero
 100189c:	1000b31e 	bne	r2,zero,1001b6c <___vfprintf_internal_r+0x1410>
 10018a0:	8444b03a 	or	r2,r16,r17
 10018a4:	1000b126 	beq	r2,zero,1001b6c <___vfprintf_internal_r+0x1410>
 10018a8:	d9814d17 	ldw	r6,1332(sp)
 10018ac:	29400094 	ori	r5,r5,2
 10018b0:	00800c04 	movi	r2,48
 10018b4:	01000084 	movi	r4,2
 10018b8:	d9414c15 	stw	r5,1328(sp)
 10018bc:	d8800445 	stb	r2,17(sp)
 10018c0:	d9800485 	stb	r6,18(sp)
 10018c4:	d8000405 	stb	zero,16(sp)
 10018c8:	003e3206 	br	1001194 <___vfprintf_internal_r+0xa38>
 10018cc:	018040b4 	movhi	r6,258
 10018d0:	31a07004 	addi	r6,r6,-32320
 10018d4:	d9814415 	stw	r6,1296(sp)
 10018d8:	003fe606 	br	1001874 <___vfprintf_internal_r+0x1118>
 10018dc:	00800ac4 	movi	r2,43
 10018e0:	d8800405 	stb	r2,16(sp)
 10018e4:	b8c00007 	ldb	r3,0(r23)
 10018e8:	003c1b06 	br	1000958 <___vfprintf_internal_r+0x1fc>
 10018ec:	d8814c17 	ldw	r2,1328(sp)
 10018f0:	b8c00007 	ldb	r3,0(r23)
 10018f4:	10800054 	ori	r2,r2,1
 10018f8:	d8814c15 	stw	r2,1328(sp)
 10018fc:	003c1606 	br	1000958 <___vfprintf_internal_r+0x1fc>
 1001900:	d8800407 	ldb	r2,16(sp)
 1001904:	1000461e 	bne	r2,zero,1001a20 <___vfprintf_internal_r+0x12c4>
 1001908:	00800804 	movi	r2,32
 100190c:	d8800405 	stb	r2,16(sp)
 1001910:	b8c00007 	ldb	r3,0(r23)
 1001914:	003c1006 	br	1000958 <___vfprintf_internal_r+0x1fc>
 1001918:	d9814c17 	ldw	r6,1328(sp)
 100191c:	b8c00007 	ldb	r3,0(r23)
 1001920:	31800214 	ori	r6,r6,8
 1001924:	d9814c15 	stw	r6,1328(sp)
 1001928:	003c0b06 	br	1000958 <___vfprintf_internal_r+0x1fc>
 100192c:	0007883a 	mov	r3,zero
 1001930:	01000244 	movi	r4,9
 1001934:	188002a4 	muli	r2,r3,10
 1001938:	b8c00007 	ldb	r3,0(r23)
 100193c:	d9814d17 	ldw	r6,1332(sp)
 1001940:	bdc00044 	addi	r23,r23,1
 1001944:	d8c14d15 	stw	r3,1332(sp)
 1001948:	d9414d17 	ldw	r5,1332(sp)
 100194c:	3085883a 	add	r2,r6,r2
 1001950:	10fff404 	addi	r3,r2,-48
 1001954:	28bff404 	addi	r2,r5,-48
 1001958:	20bff62e 	bgeu	r4,r2,1001934 <___vfprintf_internal_r+0x11d8>
 100195c:	d8c14a15 	stw	r3,1320(sp)
 1001960:	003bff06 	br	1000960 <___vfprintf_internal_r+0x204>
 1001964:	d9414c17 	ldw	r5,1328(sp)
 1001968:	b8c00007 	ldb	r3,0(r23)
 100196c:	29402014 	ori	r5,r5,128
 1001970:	d9414c15 	stw	r5,1328(sp)
 1001974:	003bf806 	br	1000958 <___vfprintf_internal_r+0x1fc>
 1001978:	b8c00007 	ldb	r3,0(r23)
 100197c:	00800a84 	movi	r2,42
 1001980:	bdc00044 	addi	r23,r23,1
 1001984:	18831526 	beq	r3,r2,10025dc <___vfprintf_internal_r+0x1e80>
 1001988:	d8c14d15 	stw	r3,1332(sp)
 100198c:	18bff404 	addi	r2,r3,-48
 1001990:	00c00244 	movi	r3,9
 1001994:	18827836 	bltu	r3,r2,1002378 <___vfprintf_internal_r+0x1c1c>
 1001998:	000d883a 	mov	r6,zero
 100199c:	308002a4 	muli	r2,r6,10
 10019a0:	b9800007 	ldb	r6,0(r23)
 10019a4:	d9414d17 	ldw	r5,1332(sp)
 10019a8:	bdc00044 	addi	r23,r23,1
 10019ac:	d9814d15 	stw	r6,1332(sp)
 10019b0:	d9014d17 	ldw	r4,1332(sp)
 10019b4:	1145883a 	add	r2,r2,r5
 10019b8:	11bff404 	addi	r6,r2,-48
 10019bc:	20bff404 	addi	r2,r4,-48
 10019c0:	18bff62e 	bgeu	r3,r2,100199c <___vfprintf_internal_r+0x1240>
 10019c4:	3027883a 	mov	r19,r6
 10019c8:	303be50e 	bge	r6,zero,1000960 <___vfprintf_internal_r+0x204>
 10019cc:	04ffffc4 	movi	r19,-1
 10019d0:	003be306 	br	1000960 <___vfprintf_internal_r+0x204>
 10019d4:	d8000405 	stb	zero,16(sp)
 10019d8:	39800017 	ldw	r6,0(r7)
 10019dc:	39c00104 	addi	r7,r7,4
 10019e0:	d9c14015 	stw	r7,1280(sp)
 10019e4:	d9814115 	stw	r6,1284(sp)
 10019e8:	3001c926 	beq	r6,zero,1002110 <___vfprintf_internal_r+0x19b4>
 10019ec:	98000e16 	blt	r19,zero,1001a28 <___vfprintf_internal_r+0x12cc>
 10019f0:	d9014117 	ldw	r4,1284(sp)
 10019f4:	000b883a 	mov	r5,zero
 10019f8:	980d883a 	mov	r6,r19
 10019fc:	10073000 	call	1007300 <memchr>
 1001a00:	10025926 	beq	r2,zero,1002368 <___vfprintf_internal_r+0x1c0c>
 1001a04:	d8c14117 	ldw	r3,1284(sp)
 1001a08:	10cfc83a 	sub	r7,r2,r3
 1001a0c:	99c19e16 	blt	r19,r7,1002088 <___vfprintf_internal_r+0x192c>
 1001a10:	d9c14515 	stw	r7,1300(sp)
 1001a14:	38000916 	blt	r7,zero,1001a3c <___vfprintf_internal_r+0x12e0>
 1001a18:	d8014615 	stw	zero,1304(sp)
 1001a1c:	003df106 	br	10011e4 <___vfprintf_internal_r+0xa88>
 1001a20:	b8c00007 	ldb	r3,0(r23)
 1001a24:	003bcc06 	br	1000958 <___vfprintf_internal_r+0x1fc>
 1001a28:	d9014117 	ldw	r4,1284(sp)
 1001a2c:	10006900 	call	1000690 <strlen>
 1001a30:	d8814515 	stw	r2,1300(sp)
 1001a34:	100f883a 	mov	r7,r2
 1001a38:	103ff70e 	bge	r2,zero,1001a18 <___vfprintf_internal_r+0x12bc>
 1001a3c:	d8014515 	stw	zero,1300(sp)
 1001a40:	d8014615 	stw	zero,1304(sp)
 1001a44:	003de706 	br	10011e4 <___vfprintf_internal_r+0xa88>
 1001a48:	20c03fcc 	andi	r3,r4,255
 1001a4c:	00800044 	movi	r2,1
 1001a50:	18802d26 	beq	r3,r2,1001b08 <___vfprintf_internal_r+0x13ac>
 1001a54:	18800e36 	bltu	r3,r2,1001a90 <___vfprintf_internal_r+0x1334>
 1001a58:	00800084 	movi	r2,2
 1001a5c:	1880fa26 	beq	r3,r2,1001e48 <___vfprintf_internal_r+0x16ec>
 1001a60:	010040b4 	movhi	r4,258
 1001a64:	21208004 	addi	r4,r4,-32256
 1001a68:	10006900 	call	1000690 <strlen>
 1001a6c:	100f883a 	mov	r7,r2
 1001a70:	dcc14515 	stw	r19,1300(sp)
 1001a74:	9880010e 	bge	r19,r2,1001a7c <___vfprintf_internal_r+0x1320>
 1001a78:	d8814515 	stw	r2,1300(sp)
 1001a7c:	008040b4 	movhi	r2,258
 1001a80:	10a08004 	addi	r2,r2,-32256
 1001a84:	dcc14615 	stw	r19,1304(sp)
 1001a88:	d8814115 	stw	r2,1284(sp)
 1001a8c:	003dd506 	br	10011e4 <___vfprintf_internal_r+0xa88>
 1001a90:	d9401904 	addi	r5,sp,100
 1001a94:	dd000f04 	addi	r20,sp,60
 1001a98:	d9414115 	stw	r5,1284(sp)
 1001a9c:	880a977a 	slli	r5,r17,29
 1001aa0:	d9814117 	ldw	r6,1284(sp)
 1001aa4:	8004d0fa 	srli	r2,r16,3
 1001aa8:	8806d0fa 	srli	r3,r17,3
 1001aac:	810001cc 	andi	r4,r16,7
 1001ab0:	2884b03a 	or	r2,r5,r2
 1001ab4:	31bfffc4 	addi	r6,r6,-1
 1001ab8:	21000c04 	addi	r4,r4,48
 1001abc:	d9814115 	stw	r6,1284(sp)
 1001ac0:	10cab03a 	or	r5,r2,r3
 1001ac4:	31000005 	stb	r4,0(r6)
 1001ac8:	1021883a 	mov	r16,r2
 1001acc:	1823883a 	mov	r17,r3
 1001ad0:	283ff21e 	bne	r5,zero,1001a9c <___vfprintf_internal_r+0x1340>
 1001ad4:	d8c14c17 	ldw	r3,1328(sp)
 1001ad8:	1880004c 	andi	r2,r3,1
 1001adc:	1005003a 	cmpeq	r2,r2,zero
 1001ae0:	103db91e 	bne	r2,zero,10011c8 <___vfprintf_internal_r+0xa6c>
 1001ae4:	20803fcc 	andi	r2,r4,255
 1001ae8:	1080201c 	xori	r2,r2,128
 1001aec:	10bfe004 	addi	r2,r2,-128
 1001af0:	00c00c04 	movi	r3,48
 1001af4:	10fdb426 	beq	r2,r3,10011c8 <___vfprintf_internal_r+0xa6c>
 1001af8:	31bfffc4 	addi	r6,r6,-1
 1001afc:	d9814115 	stw	r6,1284(sp)
 1001b00:	30c00005 	stb	r3,0(r6)
 1001b04:	003db006 	br	10011c8 <___vfprintf_internal_r+0xa6c>
 1001b08:	88800068 	cmpgeui	r2,r17,1
 1001b0c:	10002c1e 	bne	r2,zero,1001bc0 <___vfprintf_internal_r+0x1464>
 1001b10:	8800021e 	bne	r17,zero,1001b1c <___vfprintf_internal_r+0x13c0>
 1001b14:	00800244 	movi	r2,9
 1001b18:	14002936 	bltu	r2,r16,1001bc0 <___vfprintf_internal_r+0x1464>
 1001b1c:	d90018c4 	addi	r4,sp,99
 1001b20:	dd000f04 	addi	r20,sp,60
 1001b24:	d9014115 	stw	r4,1284(sp)
 1001b28:	d9014117 	ldw	r4,1284(sp)
 1001b2c:	80800c04 	addi	r2,r16,48
 1001b30:	20800005 	stb	r2,0(r4)
 1001b34:	003da406 	br	10011c8 <___vfprintf_internal_r+0xa6c>
 1001b38:	dc400d17 	ldw	r17,52(sp)
 1001b3c:	070040b4 	movhi	fp,258
 1001b40:	e7208784 	addi	fp,fp,-32226
 1001b44:	9425883a 	add	r18,r18,r16
 1001b48:	8c400044 	addi	r17,r17,1
 1001b4c:	008001c4 	movi	r2,7
 1001b50:	1f000015 	stw	fp,0(r3)
 1001b54:	1c000115 	stw	r16,4(r3)
 1001b58:	dc800e15 	stw	r18,56(sp)
 1001b5c:	dc400d15 	stw	r17,52(sp)
 1001b60:	147de216 	blt	r2,r17,10012ec <___vfprintf_internal_r+0xb90>
 1001b64:	18c00204 	addi	r3,r3,8
 1001b68:	003c7a06 	br	1000d54 <___vfprintf_internal_r+0x5f8>
 1001b6c:	01000084 	movi	r4,2
 1001b70:	d8000405 	stb	zero,16(sp)
 1001b74:	003d8706 	br	1001194 <___vfprintf_internal_r+0xa38>
 1001b78:	d9814c17 	ldw	r6,1328(sp)
 1001b7c:	30c4703a 	and	r2,r6,r3
 1001b80:	1005003a 	cmpeq	r2,r2,zero
 1001b84:	103cb926 	beq	r2,zero,1000e6c <___vfprintf_internal_r+0x710>
 1001b88:	d9014117 	ldw	r4,1284(sp)
 1001b8c:	94800044 	addi	r18,r18,1
 1001b90:	8c400044 	addi	r17,r17,1
 1001b94:	008001c4 	movi	r2,7
 1001b98:	a9000015 	stw	r4,0(r21)
 1001b9c:	a8c00115 	stw	r3,4(r21)
 1001ba0:	dc800e15 	stw	r18,56(sp)
 1001ba4:	dc400d15 	stw	r17,52(sp)
 1001ba8:	147e6616 	blt	r2,r17,1001544 <___vfprintf_internal_r+0xde8>
 1001bac:	acc00204 	addi	r19,r21,8
 1001bb0:	003cd706 	br	1000f10 <___vfprintf_internal_r+0x7b4>
 1001bb4:	070040b4 	movhi	fp,258
 1001bb8:	e7208784 	addi	fp,fp,-32226
 1001bbc:	003c4f06 	br	1000cfc <___vfprintf_internal_r+0x5a0>
 1001bc0:	dd000f04 	addi	r20,sp,60
 1001bc4:	dc801904 	addi	r18,sp,100
 1001bc8:	8009883a 	mov	r4,r16
 1001bcc:	880b883a 	mov	r5,r17
 1001bd0:	01800284 	movi	r6,10
 1001bd4:	000f883a 	mov	r7,zero
 1001bd8:	100cd400 	call	100cd40 <__umoddi3>
 1001bdc:	12000c04 	addi	r8,r2,48
 1001be0:	94bfffc4 	addi	r18,r18,-1
 1001be4:	8009883a 	mov	r4,r16
 1001be8:	880b883a 	mov	r5,r17
 1001bec:	01800284 	movi	r6,10
 1001bf0:	000f883a 	mov	r7,zero
 1001bf4:	92000005 	stb	r8,0(r18)
 1001bf8:	100c7640 	call	100c764 <__udivdi3>
 1001bfc:	1009883a 	mov	r4,r2
 1001c00:	1021883a 	mov	r16,r2
 1001c04:	18800068 	cmpgeui	r2,r3,1
 1001c08:	1823883a 	mov	r17,r3
 1001c0c:	103fee1e 	bne	r2,zero,1001bc8 <___vfprintf_internal_r+0x146c>
 1001c10:	1800021e 	bne	r3,zero,1001c1c <___vfprintf_internal_r+0x14c0>
 1001c14:	00800244 	movi	r2,9
 1001c18:	113feb36 	bltu	r2,r4,1001bc8 <___vfprintf_internal_r+0x146c>
 1001c1c:	94bfffc4 	addi	r18,r18,-1
 1001c20:	dc814115 	stw	r18,1284(sp)
 1001c24:	003fc006 	br	1001b28 <___vfprintf_internal_r+0x13cc>
 1001c28:	d9014c17 	ldw	r4,1328(sp)
 1001c2c:	2080004c 	andi	r2,r4,1
 1001c30:	10009a1e 	bne	r2,zero,1001e9c <___vfprintf_internal_r+0x1740>
 1001c34:	d9401904 	addi	r5,sp,100
 1001c38:	dd000f04 	addi	r20,sp,60
 1001c3c:	d9414115 	stw	r5,1284(sp)
 1001c40:	003d6106 	br	10011c8 <___vfprintf_internal_r+0xa6c>
 1001c44:	d9014f17 	ldw	r4,1340(sp)
 1001c48:	b00b883a 	mov	r5,r22
 1001c4c:	d9800c04 	addi	r6,sp,48
 1001c50:	10007040 	call	1000704 <__sprint_r>
 1001c54:	103c791e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1001c58:	dc800e17 	ldw	r18,56(sp)
 1001c5c:	d8c01904 	addi	r3,sp,100
 1001c60:	003cff06 	br	1001060 <___vfprintf_internal_r+0x904>
 1001c64:	d8c14c17 	ldw	r3,1328(sp)
 1001c68:	1880040c 	andi	r2,r3,16
 1001c6c:	1000711e 	bne	r2,zero,1001e34 <___vfprintf_internal_r+0x16d8>
 1001c70:	d9014c17 	ldw	r4,1328(sp)
 1001c74:	2080100c 	andi	r2,r4,64
 1001c78:	10006e26 	beq	r2,zero,1001e34 <___vfprintf_internal_r+0x16d8>
 1001c7c:	3c00000b 	ldhu	r16,0(r7)
 1001c80:	0023883a 	mov	r17,zero
 1001c84:	39c00104 	addi	r7,r7,4
 1001c88:	d9c14015 	stw	r7,1280(sp)
 1001c8c:	003f0006 	br	1001890 <___vfprintf_internal_r+0x1134>
 1001c90:	dc400d17 	ldw	r17,52(sp)
 1001c94:	070040b4 	movhi	fp,258
 1001c98:	e7208784 	addi	fp,fp,-32226
 1001c9c:	9425883a 	add	r18,r18,r16
 1001ca0:	8c400044 	addi	r17,r17,1
 1001ca4:	008001c4 	movi	r2,7
 1001ca8:	1f000015 	stw	fp,0(r3)
 1001cac:	1c000115 	stw	r16,4(r3)
 1001cb0:	dc800e15 	stw	r18,56(sp)
 1001cb4:	dc400d15 	stw	r17,52(sp)
 1001cb8:	147d7616 	blt	r2,r17,1001294 <___vfprintf_internal_r+0xb38>
 1001cbc:	18c00204 	addi	r3,r3,8
 1001cc0:	003d7b06 	br	10012b0 <___vfprintf_internal_r+0xb54>
 1001cc4:	dc800e17 	ldw	r18,56(sp)
 1001cc8:	dc400d17 	ldw	r17,52(sp)
 1001ccc:	070040b4 	movhi	fp,258
 1001cd0:	e7208b84 	addi	fp,fp,-32210
 1001cd4:	003bc006 	br	1000bd8 <___vfprintf_internal_r+0x47c>
 1001cd8:	d9014f17 	ldw	r4,1340(sp)
 1001cdc:	b00b883a 	mov	r5,r22
 1001ce0:	d9800c04 	addi	r6,sp,48
 1001ce4:	10007040 	call	1000704 <__sprint_r>
 1001ce8:	103c541e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1001cec:	dc800e17 	ldw	r18,56(sp)
 1001cf0:	d8c01904 	addi	r3,sp,100
 1001cf4:	003ce906 	br	100109c <___vfprintf_internal_r+0x940>
 1001cf8:	3c000017 	ldw	r16,0(r7)
 1001cfc:	0009883a 	mov	r4,zero
 1001d00:	39c00104 	addi	r7,r7,4
 1001d04:	0023883a 	mov	r17,zero
 1001d08:	d9c14015 	stw	r7,1280(sp)
 1001d0c:	d8000405 	stb	zero,16(sp)
 1001d10:	003d2006 	br	1001194 <___vfprintf_internal_r+0xa38>
 1001d14:	38800017 	ldw	r2,0(r7)
 1001d18:	39c00104 	addi	r7,r7,4
 1001d1c:	d9c14015 	stw	r7,1280(sp)
 1001d20:	1023d7fa 	srai	r17,r2,31
 1001d24:	1021883a 	mov	r16,r2
 1001d28:	003d1806 	br	100118c <___vfprintf_internal_r+0xa30>
 1001d2c:	3c000017 	ldw	r16,0(r7)
 1001d30:	01000044 	movi	r4,1
 1001d34:	39c00104 	addi	r7,r7,4
 1001d38:	0023883a 	mov	r17,zero
 1001d3c:	d9c14015 	stw	r7,1280(sp)
 1001d40:	d8000405 	stb	zero,16(sp)
 1001d44:	003d1306 	br	1001194 <___vfprintf_internal_r+0xa38>
 1001d48:	008040b4 	movhi	r2,258
 1001d4c:	10a08704 	addi	r2,r2,-32228
 1001d50:	94800044 	addi	r18,r18,1
 1001d54:	8c400044 	addi	r17,r17,1
 1001d58:	a8800015 	stw	r2,0(r21)
 1001d5c:	00c00044 	movi	r3,1
 1001d60:	008001c4 	movi	r2,7
 1001d64:	a8c00115 	stw	r3,4(r21)
 1001d68:	dc800e15 	stw	r18,56(sp)
 1001d6c:	dc400d15 	stw	r17,52(sp)
 1001d70:	1440ca16 	blt	r2,r17,100209c <___vfprintf_internal_r+0x1940>
 1001d74:	a8c00204 	addi	r3,r21,8
 1001d78:	2000061e 	bne	r4,zero,1001d94 <___vfprintf_internal_r+0x1638>
 1001d7c:	d9414717 	ldw	r5,1308(sp)
 1001d80:	2800041e 	bne	r5,zero,1001d94 <___vfprintf_internal_r+0x1638>
 1001d84:	d9814c17 	ldw	r6,1328(sp)
 1001d88:	3080004c 	andi	r2,r6,1
 1001d8c:	1005003a 	cmpeq	r2,r2,zero
 1001d90:	103bf01e 	bne	r2,zero,1000d54 <___vfprintf_internal_r+0x5f8>
 1001d94:	00800044 	movi	r2,1
 1001d98:	dc400d17 	ldw	r17,52(sp)
 1001d9c:	18800115 	stw	r2,4(r3)
 1001da0:	d8814917 	ldw	r2,1316(sp)
 1001da4:	94800044 	addi	r18,r18,1
 1001da8:	8c400044 	addi	r17,r17,1
 1001dac:	18800015 	stw	r2,0(r3)
 1001db0:	008001c4 	movi	r2,7
 1001db4:	dc800e15 	stw	r18,56(sp)
 1001db8:	dc400d15 	stw	r17,52(sp)
 1001dbc:	1440ca16 	blt	r2,r17,10020e8 <___vfprintf_internal_r+0x198c>
 1001dc0:	18c00204 	addi	r3,r3,8
 1001dc4:	0121c83a 	sub	r16,zero,r4
 1001dc8:	0400500e 	bge	zero,r16,1001f0c <___vfprintf_internal_r+0x17b0>
 1001dcc:	00800404 	movi	r2,16
 1001dd0:	1400800e 	bge	r2,r16,1001fd4 <___vfprintf_internal_r+0x1878>
 1001dd4:	1027883a 	mov	r19,r2
 1001dd8:	070040b4 	movhi	fp,258
 1001ddc:	e7208784 	addi	fp,fp,-32226
 1001de0:	050001c4 	movi	r20,7
 1001de4:	00000306 	br	1001df4 <___vfprintf_internal_r+0x1698>
 1001de8:	18c00204 	addi	r3,r3,8
 1001dec:	843ffc04 	addi	r16,r16,-16
 1001df0:	9c007a0e 	bge	r19,r16,1001fdc <___vfprintf_internal_r+0x1880>
 1001df4:	94800404 	addi	r18,r18,16
 1001df8:	8c400044 	addi	r17,r17,1
 1001dfc:	1f000015 	stw	fp,0(r3)
 1001e00:	1cc00115 	stw	r19,4(r3)
 1001e04:	dc800e15 	stw	r18,56(sp)
 1001e08:	dc400d15 	stw	r17,52(sp)
 1001e0c:	a47ff60e 	bge	r20,r17,1001de8 <___vfprintf_internal_r+0x168c>
 1001e10:	d9014f17 	ldw	r4,1340(sp)
 1001e14:	b00b883a 	mov	r5,r22
 1001e18:	d9800c04 	addi	r6,sp,48
 1001e1c:	10007040 	call	1000704 <__sprint_r>
 1001e20:	103c061e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1001e24:	dc800e17 	ldw	r18,56(sp)
 1001e28:	dc400d17 	ldw	r17,52(sp)
 1001e2c:	d8c01904 	addi	r3,sp,100
 1001e30:	003fee06 	br	1001dec <___vfprintf_internal_r+0x1690>
 1001e34:	3c000017 	ldw	r16,0(r7)
 1001e38:	0023883a 	mov	r17,zero
 1001e3c:	39c00104 	addi	r7,r7,4
 1001e40:	d9c14015 	stw	r7,1280(sp)
 1001e44:	003e9206 	br	1001890 <___vfprintf_internal_r+0x1134>
 1001e48:	d9401904 	addi	r5,sp,100
 1001e4c:	dd000f04 	addi	r20,sp,60
 1001e50:	d9414115 	stw	r5,1284(sp)
 1001e54:	d9814417 	ldw	r6,1296(sp)
 1001e58:	880a973a 	slli	r5,r17,28
 1001e5c:	8004d13a 	srli	r2,r16,4
 1001e60:	810003cc 	andi	r4,r16,15
 1001e64:	3109883a 	add	r4,r6,r4
 1001e68:	2884b03a 	or	r2,r5,r2
 1001e6c:	21400003 	ldbu	r5,0(r4)
 1001e70:	d9014117 	ldw	r4,1284(sp)
 1001e74:	8806d13a 	srli	r3,r17,4
 1001e78:	1021883a 	mov	r16,r2
 1001e7c:	213fffc4 	addi	r4,r4,-1
 1001e80:	d9014115 	stw	r4,1284(sp)
 1001e84:	d9814117 	ldw	r6,1284(sp)
 1001e88:	10c8b03a 	or	r4,r2,r3
 1001e8c:	1823883a 	mov	r17,r3
 1001e90:	31400005 	stb	r5,0(r6)
 1001e94:	203fef1e 	bne	r4,zero,1001e54 <___vfprintf_internal_r+0x16f8>
 1001e98:	003ccb06 	br	10011c8 <___vfprintf_internal_r+0xa6c>
 1001e9c:	00800c04 	movi	r2,48
 1001ea0:	d98018c4 	addi	r6,sp,99
 1001ea4:	dd000f04 	addi	r20,sp,60
 1001ea8:	d88018c5 	stb	r2,99(sp)
 1001eac:	d9814115 	stw	r6,1284(sp)
 1001eb0:	003cc506 	br	10011c8 <___vfprintf_internal_r+0xa6c>
 1001eb4:	dc400d17 	ldw	r17,52(sp)
 1001eb8:	070040b4 	movhi	fp,258
 1001ebc:	e7208b84 	addi	fp,fp,-32210
 1001ec0:	003bc706 	br	1000de0 <___vfprintf_internal_r+0x684>
 1001ec4:	d9414c17 	ldw	r5,1328(sp)
 1001ec8:	2880040c 	andi	r2,r5,16
 1001ecc:	10007c26 	beq	r2,zero,10020c0 <___vfprintf_internal_r+0x1964>
 1001ed0:	38800017 	ldw	r2,0(r7)
 1001ed4:	39c00104 	addi	r7,r7,4
 1001ed8:	d9c14015 	stw	r7,1280(sp)
 1001edc:	d9814b17 	ldw	r6,1324(sp)
 1001ee0:	d9c14017 	ldw	r7,1280(sp)
 1001ee4:	11800015 	stw	r6,0(r2)
 1001ee8:	003a7806 	br	10008cc <___vfprintf_internal_r+0x170>
 1001eec:	d9014f17 	ldw	r4,1340(sp)
 1001ef0:	b00b883a 	mov	r5,r22
 1001ef4:	d9800c04 	addi	r6,sp,48
 1001ef8:	10007040 	call	1000704 <__sprint_r>
 1001efc:	103bcf1e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1001f00:	dc800e17 	ldw	r18,56(sp)
 1001f04:	dc400d17 	ldw	r17,52(sp)
 1001f08:	d8c01904 	addi	r3,sp,100
 1001f0c:	d9014717 	ldw	r4,1308(sp)
 1001f10:	d9414117 	ldw	r5,1284(sp)
 1001f14:	8c400044 	addi	r17,r17,1
 1001f18:	9125883a 	add	r18,r18,r4
 1001f1c:	008001c4 	movi	r2,7
 1001f20:	19400015 	stw	r5,0(r3)
 1001f24:	19000115 	stw	r4,4(r3)
 1001f28:	dc800e15 	stw	r18,56(sp)
 1001f2c:	dc400d15 	stw	r17,52(sp)
 1001f30:	147cee16 	blt	r2,r17,10012ec <___vfprintf_internal_r+0xb90>
 1001f34:	18c00204 	addi	r3,r3,8
 1001f38:	003b8606 	br	1000d54 <___vfprintf_internal_r+0x5f8>
 1001f3c:	38c00017 	ldw	r3,0(r7)
 1001f40:	39000204 	addi	r4,r7,8
 1001f44:	d9014015 	stw	r4,1280(sp)
 1001f48:	d8c14215 	stw	r3,1288(sp)
 1001f4c:	39c00117 	ldw	r7,4(r7)
 1001f50:	d9c14315 	stw	r7,1292(sp)
 1001f54:	003e2006 	br	10017d8 <___vfprintf_internal_r+0x107c>
 1001f58:	0005883a 	mov	r2,zero
 1001f5c:	1409c83a 	sub	r4,r2,r16
 1001f60:	1105803a 	cmpltu	r2,r2,r4
 1001f64:	044bc83a 	sub	r5,zero,r17
 1001f68:	2885c83a 	sub	r2,r5,r2
 1001f6c:	2021883a 	mov	r16,r4
 1001f70:	1023883a 	mov	r17,r2
 1001f74:	01000044 	movi	r4,1
 1001f78:	00800b44 	movi	r2,45
 1001f7c:	d8800405 	stb	r2,16(sp)
 1001f80:	003c8406 	br	1001194 <___vfprintf_internal_r+0xa38>
 1001f84:	d9014f17 	ldw	r4,1340(sp)
 1001f88:	b00b883a 	mov	r5,r22
 1001f8c:	d9800c04 	addi	r6,sp,48
 1001f90:	10007040 	call	1000704 <__sprint_r>
 1001f94:	103ba91e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1001f98:	dc800e17 	ldw	r18,56(sp)
 1001f9c:	dc400d17 	ldw	r17,52(sp)
 1001fa0:	d9000517 	ldw	r4,20(sp)
 1001fa4:	d9401904 	addi	r5,sp,100
 1001fa8:	003da706 	br	1001648 <___vfprintf_internal_r+0xeec>
 1001fac:	d9014f17 	ldw	r4,1340(sp)
 1001fb0:	b00b883a 	mov	r5,r22
 1001fb4:	d9800c04 	addi	r6,sp,48
 1001fb8:	10007040 	call	1000704 <__sprint_r>
 1001fbc:	103b9f1e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1001fc0:	dc800e17 	ldw	r18,56(sp)
 1001fc4:	dc400d17 	ldw	r17,52(sp)
 1001fc8:	d9000517 	ldw	r4,20(sp)
 1001fcc:	d8c01904 	addi	r3,sp,100
 1001fd0:	003d9106 	br	1001618 <___vfprintf_internal_r+0xebc>
 1001fd4:	070040b4 	movhi	fp,258
 1001fd8:	e7208784 	addi	fp,fp,-32226
 1001fdc:	9425883a 	add	r18,r18,r16
 1001fe0:	8c400044 	addi	r17,r17,1
 1001fe4:	008001c4 	movi	r2,7
 1001fe8:	1f000015 	stw	fp,0(r3)
 1001fec:	1c000115 	stw	r16,4(r3)
 1001ff0:	dc800e15 	stw	r18,56(sp)
 1001ff4:	dc400d15 	stw	r17,52(sp)
 1001ff8:	147fbc16 	blt	r2,r17,1001eec <___vfprintf_internal_r+0x1790>
 1001ffc:	18c00204 	addi	r3,r3,8
 1002000:	003fc206 	br	1001f0c <___vfprintf_internal_r+0x17b0>
 1002004:	d9014f17 	ldw	r4,1340(sp)
 1002008:	b00b883a 	mov	r5,r22
 100200c:	d9800c04 	addi	r6,sp,48
 1002010:	10007040 	call	1000704 <__sprint_r>
 1002014:	103b891e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1002018:	dc800e17 	ldw	r18,56(sp)
 100201c:	d9000517 	ldw	r4,20(sp)
 1002020:	d8c01904 	addi	r3,sp,100
 1002024:	003d0206 	br	1001430 <___vfprintf_internal_r+0xcd4>
 1002028:	070040b4 	movhi	fp,258
 100202c:	e7208784 	addi	fp,fp,-32226
 1002030:	003be406 	br	1000fc4 <___vfprintf_internal_r+0x868>
 1002034:	008040b4 	movhi	r2,258
 1002038:	10a07604 	addi	r2,r2,-32296
 100203c:	d8814115 	stw	r2,1284(sp)
 1002040:	003df506 	br	1001818 <___vfprintf_internal_r+0x10bc>
 1002044:	d9014217 	ldw	r4,1288(sp)
 1002048:	d9414317 	ldw	r5,1292(sp)
 100204c:	1008e040 	call	1008e04 <__isnand>
 1002050:	10003926 	beq	r2,zero,1002138 <___vfprintf_internal_r+0x19dc>
 1002054:	d9414d17 	ldw	r5,1332(sp)
 1002058:	008011c4 	movi	r2,71
 100205c:	1140ce16 	blt	r2,r5,1002398 <___vfprintf_internal_r+0x1c3c>
 1002060:	018040b4 	movhi	r6,258
 1002064:	31a07704 	addi	r6,r6,-32292
 1002068:	d9814115 	stw	r6,1284(sp)
 100206c:	003dea06 	br	1001818 <___vfprintf_internal_r+0x10bc>
 1002070:	d9014c17 	ldw	r4,1328(sp)
 1002074:	bdc00044 	addi	r23,r23,1
 1002078:	b8c00007 	ldb	r3,0(r23)
 100207c:	21000814 	ori	r4,r4,32
 1002080:	d9014c15 	stw	r4,1328(sp)
 1002084:	003a3406 	br	1000958 <___vfprintf_internal_r+0x1fc>
 1002088:	dcc14515 	stw	r19,1300(sp)
 100208c:	98011016 	blt	r19,zero,10024d0 <___vfprintf_internal_r+0x1d74>
 1002090:	980f883a 	mov	r7,r19
 1002094:	d8014615 	stw	zero,1304(sp)
 1002098:	003c5206 	br	10011e4 <___vfprintf_internal_r+0xa88>
 100209c:	d9014f17 	ldw	r4,1340(sp)
 10020a0:	b00b883a 	mov	r5,r22
 10020a4:	d9800c04 	addi	r6,sp,48
 10020a8:	10007040 	call	1000704 <__sprint_r>
 10020ac:	103b631e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 10020b0:	dc800e17 	ldw	r18,56(sp)
 10020b4:	d9000517 	ldw	r4,20(sp)
 10020b8:	d8c01904 	addi	r3,sp,100
 10020bc:	003f2e06 	br	1001d78 <___vfprintf_internal_r+0x161c>
 10020c0:	d8c14c17 	ldw	r3,1328(sp)
 10020c4:	1880100c 	andi	r2,r3,64
 10020c8:	1000a026 	beq	r2,zero,100234c <___vfprintf_internal_r+0x1bf0>
 10020cc:	38800017 	ldw	r2,0(r7)
 10020d0:	39c00104 	addi	r7,r7,4
 10020d4:	d9c14015 	stw	r7,1280(sp)
 10020d8:	d9014b17 	ldw	r4,1324(sp)
 10020dc:	d9c14017 	ldw	r7,1280(sp)
 10020e0:	1100000d 	sth	r4,0(r2)
 10020e4:	0039f906 	br	10008cc <___vfprintf_internal_r+0x170>
 10020e8:	d9014f17 	ldw	r4,1340(sp)
 10020ec:	b00b883a 	mov	r5,r22
 10020f0:	d9800c04 	addi	r6,sp,48
 10020f4:	10007040 	call	1000704 <__sprint_r>
 10020f8:	103b501e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 10020fc:	dc800e17 	ldw	r18,56(sp)
 1002100:	dc400d17 	ldw	r17,52(sp)
 1002104:	d9000517 	ldw	r4,20(sp)
 1002108:	d8c01904 	addi	r3,sp,100
 100210c:	003f2d06 	br	1001dc4 <___vfprintf_internal_r+0x1668>
 1002110:	00800184 	movi	r2,6
 1002114:	14c09a36 	bltu	r2,r19,1002380 <___vfprintf_internal_r+0x1c24>
 1002118:	dcc14515 	stw	r19,1300(sp)
 100211c:	9800010e 	bge	r19,zero,1002124 <___vfprintf_internal_r+0x19c8>
 1002120:	d8014515 	stw	zero,1300(sp)
 1002124:	008040b4 	movhi	r2,258
 1002128:	10a07904 	addi	r2,r2,-32284
 100212c:	980f883a 	mov	r7,r19
 1002130:	d8814115 	stw	r2,1284(sp)
 1002134:	003a7806 	br	1000b18 <___vfprintf_internal_r+0x3bc>
 1002138:	00bfffc4 	movi	r2,-1
 100213c:	9880e226 	beq	r19,r2,10024c8 <___vfprintf_internal_r+0x1d6c>
 1002140:	d9414d17 	ldw	r5,1332(sp)
 1002144:	008019c4 	movi	r2,103
 1002148:	2880dc26 	beq	r5,r2,10024bc <___vfprintf_internal_r+0x1d60>
 100214c:	008011c4 	movi	r2,71
 1002150:	2880da26 	beq	r5,r2,10024bc <___vfprintf_internal_r+0x1d60>
 1002154:	d9414c17 	ldw	r5,1328(sp)
 1002158:	d9014317 	ldw	r4,1292(sp)
 100215c:	d9814217 	ldw	r6,1288(sp)
 1002160:	29404014 	ori	r5,r5,256
 1002164:	d9414c15 	stw	r5,1328(sp)
 1002168:	2000cc16 	blt	r4,zero,100249c <___vfprintf_internal_r+0x1d40>
 100216c:	3021883a 	mov	r16,r6
 1002170:	2023883a 	mov	r17,r4
 1002174:	0039883a 	mov	fp,zero
 1002178:	d9414d17 	ldw	r5,1332(sp)
 100217c:	00801984 	movi	r2,102
 1002180:	2880b726 	beq	r5,r2,1002460 <___vfprintf_internal_r+0x1d04>
 1002184:	00801184 	movi	r2,70
 1002188:	2880b526 	beq	r5,r2,1002460 <___vfprintf_internal_r+0x1d04>
 100218c:	00801944 	movi	r2,101
 1002190:	2880c826 	beq	r5,r2,10024b4 <___vfprintf_internal_r+0x1d58>
 1002194:	00801144 	movi	r2,69
 1002198:	2880c626 	beq	r5,r2,10024b4 <___vfprintf_internal_r+0x1d58>
 100219c:	9829883a 	mov	r20,r19
 10021a0:	d9014f17 	ldw	r4,1340(sp)
 10021a4:	d8800504 	addi	r2,sp,20
 10021a8:	880d883a 	mov	r6,r17
 10021ac:	d8800115 	stw	r2,4(sp)
 10021b0:	d8c00604 	addi	r3,sp,24
 10021b4:	d8800704 	addi	r2,sp,28
 10021b8:	800b883a 	mov	r5,r16
 10021bc:	01c00084 	movi	r7,2
 10021c0:	d8c00215 	stw	r3,8(sp)
 10021c4:	d8800315 	stw	r2,12(sp)
 10021c8:	dd000015 	stw	r20,0(sp)
 10021cc:	10041000 	call	1004100 <_dtoa_r>
 10021d0:	d9814d17 	ldw	r6,1332(sp)
 10021d4:	d8814115 	stw	r2,1284(sp)
 10021d8:	008019c4 	movi	r2,103
 10021dc:	30809526 	beq	r6,r2,1002434 <___vfprintf_internal_r+0x1cd8>
 10021e0:	d8c14d17 	ldw	r3,1332(sp)
 10021e4:	008011c4 	movi	r2,71
 10021e8:	18809226 	beq	r3,r2,1002434 <___vfprintf_internal_r+0x1cd8>
 10021ec:	d9414117 	ldw	r5,1284(sp)
 10021f0:	d9814d17 	ldw	r6,1332(sp)
 10021f4:	00801984 	movi	r2,102
 10021f8:	2d25883a 	add	r18,r5,r20
 10021fc:	30808626 	beq	r6,r2,1002418 <___vfprintf_internal_r+0x1cbc>
 1002200:	00801184 	movi	r2,70
 1002204:	30808426 	beq	r6,r2,1002418 <___vfprintf_internal_r+0x1cbc>
 1002208:	000d883a 	mov	r6,zero
 100220c:	000f883a 	mov	r7,zero
 1002210:	880b883a 	mov	r5,r17
 1002214:	8009883a 	mov	r4,r16
 1002218:	100df780 	call	100df78 <__eqdf2>
 100221c:	1000751e 	bne	r2,zero,10023f4 <___vfprintf_internal_r+0x1c98>
 1002220:	9005883a 	mov	r2,r18
 1002224:	dc800715 	stw	r18,28(sp)
 1002228:	d9014117 	ldw	r4,1284(sp)
 100222c:	d9414d17 	ldw	r5,1332(sp)
 1002230:	00c019c4 	movi	r3,103
 1002234:	1125c83a 	sub	r18,r2,r4
 1002238:	28c06826 	beq	r5,r3,10023dc <___vfprintf_internal_r+0x1c80>
 100223c:	008011c4 	movi	r2,71
 1002240:	28806626 	beq	r5,r2,10023dc <___vfprintf_internal_r+0x1c80>
 1002244:	d9000517 	ldw	r4,20(sp)
 1002248:	d8c14d17 	ldw	r3,1332(sp)
 100224c:	00801944 	movi	r2,101
 1002250:	10c05516 	blt	r2,r3,10023a8 <___vfprintf_internal_r+0x1c4c>
 1002254:	213fffc4 	addi	r4,r4,-1
 1002258:	d9000515 	stw	r4,20(sp)
 100225c:	d8c00805 	stb	r3,32(sp)
 1002260:	2021883a 	mov	r16,r4
 1002264:	2000c116 	blt	r4,zero,100256c <___vfprintf_internal_r+0x1e10>
 1002268:	00800ac4 	movi	r2,43
 100226c:	d8800845 	stb	r2,33(sp)
 1002270:	00800244 	movi	r2,9
 1002274:	1400af0e 	bge	r2,r16,1002534 <___vfprintf_internal_r+0x1dd8>
 1002278:	1027883a 	mov	r19,r2
 100227c:	dc400b84 	addi	r17,sp,46
 1002280:	8009883a 	mov	r4,r16
 1002284:	01400284 	movi	r5,10
 1002288:	100e75c0 	call	100e75c <__modsi3>
 100228c:	10800c04 	addi	r2,r2,48
 1002290:	8c7fffc4 	addi	r17,r17,-1
 1002294:	8009883a 	mov	r4,r16
 1002298:	01400284 	movi	r5,10
 100229c:	88800005 	stb	r2,0(r17)
 10022a0:	100e6fc0 	call	100e6fc <__divsi3>
 10022a4:	1021883a 	mov	r16,r2
 10022a8:	98bff516 	blt	r19,r2,1002280 <___vfprintf_internal_r+0x1b24>
 10022ac:	10c00c04 	addi	r3,r2,48
 10022b0:	d88009c4 	addi	r2,sp,39
 10022b4:	108001c4 	addi	r2,r2,7
 10022b8:	897fffc4 	addi	r5,r17,-1
 10022bc:	88ffffc5 	stb	r3,-1(r17)
 10022c0:	2880a72e 	bgeu	r5,r2,1002560 <___vfprintf_internal_r+0x1e04>
 10022c4:	1009883a 	mov	r4,r2
 10022c8:	d9800804 	addi	r6,sp,32
 10022cc:	d8c00884 	addi	r3,sp,34
 10022d0:	28800003 	ldbu	r2,0(r5)
 10022d4:	29400044 	addi	r5,r5,1
 10022d8:	18800005 	stb	r2,0(r3)
 10022dc:	18c00044 	addi	r3,r3,1
 10022e0:	293ffb36 	bltu	r5,r4,10022d0 <___vfprintf_internal_r+0x1b74>
 10022e4:	1987c83a 	sub	r3,r3,r6
 10022e8:	00800044 	movi	r2,1
 10022ec:	d8c14815 	stw	r3,1312(sp)
 10022f0:	90cf883a 	add	r7,r18,r3
 10022f4:	1480960e 	bge	r2,r18,1002550 <___vfprintf_internal_r+0x1df4>
 10022f8:	39c00044 	addi	r7,r7,1
 10022fc:	d9c14515 	stw	r7,1300(sp)
 1002300:	38003416 	blt	r7,zero,10023d4 <___vfprintf_internal_r+0x1c78>
 1002304:	e0803fcc 	andi	r2,fp,255
 1002308:	1080201c 	xori	r2,r2,128
 100230c:	10bfe004 	addi	r2,r2,-128
 1002310:	10004e26 	beq	r2,zero,100244c <___vfprintf_internal_r+0x1cf0>
 1002314:	00800b44 	movi	r2,45
 1002318:	dc814715 	stw	r18,1308(sp)
 100231c:	d8014615 	stw	zero,1304(sp)
 1002320:	d8800405 	stb	r2,16(sp)
 1002324:	003bb106 	br	10011ec <___vfprintf_internal_r+0xa90>
 1002328:	00800b44 	movi	r2,45
 100232c:	d8800405 	stb	r2,16(sp)
 1002330:	003d3306 	br	1001800 <___vfprintf_internal_r+0x10a4>
 1002334:	d9014f17 	ldw	r4,1340(sp)
 1002338:	b00b883a 	mov	r5,r22
 100233c:	d9800c04 	addi	r6,sp,48
 1002340:	10007040 	call	1000704 <__sprint_r>
 1002344:	103abd1e 	bne	r2,zero,1000e3c <___vfprintf_internal_r+0x6e0>
 1002348:	003abb06 	br	1000e38 <___vfprintf_internal_r+0x6dc>
 100234c:	38800017 	ldw	r2,0(r7)
 1002350:	39c00104 	addi	r7,r7,4
 1002354:	d9c14015 	stw	r7,1280(sp)
 1002358:	d9414b17 	ldw	r5,1324(sp)
 100235c:	d9c14017 	ldw	r7,1280(sp)
 1002360:	11400015 	stw	r5,0(r2)
 1002364:	00395906 	br	10008cc <___vfprintf_internal_r+0x170>
 1002368:	980f883a 	mov	r7,r19
 100236c:	dcc14515 	stw	r19,1300(sp)
 1002370:	d8014615 	stw	zero,1304(sp)
 1002374:	003b9b06 	br	10011e4 <___vfprintf_internal_r+0xa88>
 1002378:	0027883a 	mov	r19,zero
 100237c:	00397806 	br	1000960 <___vfprintf_internal_r+0x204>
 1002380:	00c040b4 	movhi	r3,258
 1002384:	18e07904 	addi	r3,r3,-32284
 1002388:	100f883a 	mov	r7,r2
 100238c:	d8814515 	stw	r2,1300(sp)
 1002390:	d8c14115 	stw	r3,1284(sp)
 1002394:	0039e006 	br	1000b18 <___vfprintf_internal_r+0x3bc>
 1002398:	008040b4 	movhi	r2,258
 100239c:	10a07804 	addi	r2,r2,-32288
 10023a0:	d8814115 	stw	r2,1284(sp)
 10023a4:	003d1c06 	br	1001818 <___vfprintf_internal_r+0x10bc>
 10023a8:	d9414d17 	ldw	r5,1332(sp)
 10023ac:	00801984 	movi	r2,102
 10023b0:	28804926 	beq	r5,r2,10024d8 <___vfprintf_internal_r+0x1d7c>
 10023b4:	200f883a 	mov	r7,r4
 10023b8:	24805716 	blt	r4,r18,1002518 <___vfprintf_internal_r+0x1dbc>
 10023bc:	d9414c17 	ldw	r5,1328(sp)
 10023c0:	2880004c 	andi	r2,r5,1
 10023c4:	10000126 	beq	r2,zero,10023cc <___vfprintf_internal_r+0x1c70>
 10023c8:	21c00044 	addi	r7,r4,1
 10023cc:	d9c14515 	stw	r7,1300(sp)
 10023d0:	383fcc0e 	bge	r7,zero,1002304 <___vfprintf_internal_r+0x1ba8>
 10023d4:	d8014515 	stw	zero,1300(sp)
 10023d8:	003fca06 	br	1002304 <___vfprintf_internal_r+0x1ba8>
 10023dc:	d9000517 	ldw	r4,20(sp)
 10023e0:	00bfff04 	movi	r2,-4
 10023e4:	1100480e 	bge	r2,r4,1002508 <___vfprintf_internal_r+0x1dac>
 10023e8:	99004716 	blt	r19,r4,1002508 <___vfprintf_internal_r+0x1dac>
 10023ec:	d8c14d15 	stw	r3,1332(sp)
 10023f0:	003ff006 	br	10023b4 <___vfprintf_internal_r+0x1c58>
 10023f4:	d8800717 	ldw	r2,28(sp)
 10023f8:	14bf8b2e 	bgeu	r2,r18,1002228 <___vfprintf_internal_r+0x1acc>
 10023fc:	9007883a 	mov	r3,r18
 1002400:	01000c04 	movi	r4,48
 1002404:	11000005 	stb	r4,0(r2)
 1002408:	10800044 	addi	r2,r2,1
 100240c:	d8800715 	stw	r2,28(sp)
 1002410:	18bffc1e 	bne	r3,r2,1002404 <___vfprintf_internal_r+0x1ca8>
 1002414:	003f8406 	br	1002228 <___vfprintf_internal_r+0x1acc>
 1002418:	d8814117 	ldw	r2,1284(sp)
 100241c:	10c00007 	ldb	r3,0(r2)
 1002420:	00800c04 	movi	r2,48
 1002424:	18805b26 	beq	r3,r2,1002594 <___vfprintf_internal_r+0x1e38>
 1002428:	d9000517 	ldw	r4,20(sp)
 100242c:	9125883a 	add	r18,r18,r4
 1002430:	003f7506 	br	1002208 <___vfprintf_internal_r+0x1aac>
 1002434:	d9014c17 	ldw	r4,1328(sp)
 1002438:	2080004c 	andi	r2,r4,1
 100243c:	1005003a 	cmpeq	r2,r2,zero
 1002440:	103f6a26 	beq	r2,zero,10021ec <___vfprintf_internal_r+0x1a90>
 1002444:	d8800717 	ldw	r2,28(sp)
 1002448:	003f7706 	br	1002228 <___vfprintf_internal_r+0x1acc>
 100244c:	d9c14515 	stw	r7,1300(sp)
 1002450:	38004d16 	blt	r7,zero,1002588 <___vfprintf_internal_r+0x1e2c>
 1002454:	dc814715 	stw	r18,1308(sp)
 1002458:	d8014615 	stw	zero,1304(sp)
 100245c:	003b6106 	br	10011e4 <___vfprintf_internal_r+0xa88>
 1002460:	d9014f17 	ldw	r4,1340(sp)
 1002464:	d8800504 	addi	r2,sp,20
 1002468:	d8800115 	stw	r2,4(sp)
 100246c:	d8c00604 	addi	r3,sp,24
 1002470:	d8800704 	addi	r2,sp,28
 1002474:	800b883a 	mov	r5,r16
 1002478:	880d883a 	mov	r6,r17
 100247c:	01c000c4 	movi	r7,3
 1002480:	d8c00215 	stw	r3,8(sp)
 1002484:	d8800315 	stw	r2,12(sp)
 1002488:	dcc00015 	stw	r19,0(sp)
 100248c:	9829883a 	mov	r20,r19
 1002490:	10041000 	call	1004100 <_dtoa_r>
 1002494:	d8814115 	stw	r2,1284(sp)
 1002498:	003f5106 	br	10021e0 <___vfprintf_internal_r+0x1a84>
 100249c:	d8c14217 	ldw	r3,1288(sp)
 10024a0:	d9014317 	ldw	r4,1292(sp)
 10024a4:	07000b44 	movi	fp,45
 10024a8:	1821883a 	mov	r16,r3
 10024ac:	2460003c 	xorhi	r17,r4,32768
 10024b0:	003f3106 	br	1002178 <___vfprintf_internal_r+0x1a1c>
 10024b4:	9d000044 	addi	r20,r19,1
 10024b8:	003f3906 	br	10021a0 <___vfprintf_internal_r+0x1a44>
 10024bc:	983f251e 	bne	r19,zero,1002154 <___vfprintf_internal_r+0x19f8>
 10024c0:	04c00044 	movi	r19,1
 10024c4:	003f2306 	br	1002154 <___vfprintf_internal_r+0x19f8>
 10024c8:	04c00184 	movi	r19,6
 10024cc:	003f2106 	br	1002154 <___vfprintf_internal_r+0x19f8>
 10024d0:	d8014515 	stw	zero,1300(sp)
 10024d4:	003eee06 	br	1002090 <___vfprintf_internal_r+0x1934>
 10024d8:	200f883a 	mov	r7,r4
 10024dc:	0100370e 	bge	zero,r4,10025bc <___vfprintf_internal_r+0x1e60>
 10024e0:	9800031e 	bne	r19,zero,10024f0 <___vfprintf_internal_r+0x1d94>
 10024e4:	d9814c17 	ldw	r6,1328(sp)
 10024e8:	3080004c 	andi	r2,r6,1
 10024ec:	103fb726 	beq	r2,zero,10023cc <___vfprintf_internal_r+0x1c70>
 10024f0:	20800044 	addi	r2,r4,1
 10024f4:	98a7883a 	add	r19,r19,r2
 10024f8:	dcc14515 	stw	r19,1300(sp)
 10024fc:	980f883a 	mov	r7,r19
 1002500:	983f800e 	bge	r19,zero,1002304 <___vfprintf_internal_r+0x1ba8>
 1002504:	003fb306 	br	10023d4 <___vfprintf_internal_r+0x1c78>
 1002508:	d9814d17 	ldw	r6,1332(sp)
 100250c:	31bfff84 	addi	r6,r6,-2
 1002510:	d9814d15 	stw	r6,1332(sp)
 1002514:	003f4c06 	br	1002248 <___vfprintf_internal_r+0x1aec>
 1002518:	0100180e 	bge	zero,r4,100257c <___vfprintf_internal_r+0x1e20>
 100251c:	00800044 	movi	r2,1
 1002520:	1485883a 	add	r2,r2,r18
 1002524:	d8814515 	stw	r2,1300(sp)
 1002528:	100f883a 	mov	r7,r2
 100252c:	103f750e 	bge	r2,zero,1002304 <___vfprintf_internal_r+0x1ba8>
 1002530:	003fa806 	br	10023d4 <___vfprintf_internal_r+0x1c78>
 1002534:	80c00c04 	addi	r3,r16,48
 1002538:	00800c04 	movi	r2,48
 100253c:	d8c008c5 	stb	r3,35(sp)
 1002540:	d9800804 	addi	r6,sp,32
 1002544:	d8c00904 	addi	r3,sp,36
 1002548:	d8800885 	stb	r2,34(sp)
 100254c:	003f6506 	br	10022e4 <___vfprintf_internal_r+0x1b88>
 1002550:	d9014c17 	ldw	r4,1328(sp)
 1002554:	2084703a 	and	r2,r4,r2
 1002558:	103f9c26 	beq	r2,zero,10023cc <___vfprintf_internal_r+0x1c70>
 100255c:	003f6606 	br	10022f8 <___vfprintf_internal_r+0x1b9c>
 1002560:	d9800804 	addi	r6,sp,32
 1002564:	d8c00884 	addi	r3,sp,34
 1002568:	003f5e06 	br	10022e4 <___vfprintf_internal_r+0x1b88>
 100256c:	00800b44 	movi	r2,45
 1002570:	0121c83a 	sub	r16,zero,r4
 1002574:	d8800845 	stb	r2,33(sp)
 1002578:	003f3d06 	br	1002270 <___vfprintf_internal_r+0x1b14>
 100257c:	00800084 	movi	r2,2
 1002580:	1105c83a 	sub	r2,r2,r4
 1002584:	003fe606 	br	1002520 <___vfprintf_internal_r+0x1dc4>
 1002588:	d8014515 	stw	zero,1300(sp)
 100258c:	dc814715 	stw	r18,1308(sp)
 1002590:	003fb106 	br	1002458 <___vfprintf_internal_r+0x1cfc>
 1002594:	000d883a 	mov	r6,zero
 1002598:	000f883a 	mov	r7,zero
 100259c:	8009883a 	mov	r4,r16
 10025a0:	880b883a 	mov	r5,r17
 10025a4:	100e0000 	call	100e000 <__nedf2>
 10025a8:	103f9f26 	beq	r2,zero,1002428 <___vfprintf_internal_r+0x1ccc>
 10025ac:	00800044 	movi	r2,1
 10025b0:	1509c83a 	sub	r4,r2,r20
 10025b4:	d9000515 	stw	r4,20(sp)
 10025b8:	003f9b06 	br	1002428 <___vfprintf_internal_r+0x1ccc>
 10025bc:	98000d1e 	bne	r19,zero,10025f4 <___vfprintf_internal_r+0x1e98>
 10025c0:	d8c14c17 	ldw	r3,1328(sp)
 10025c4:	1880004c 	andi	r2,r3,1
 10025c8:	10000a1e 	bne	r2,zero,10025f4 <___vfprintf_internal_r+0x1e98>
 10025cc:	01000044 	movi	r4,1
 10025d0:	200f883a 	mov	r7,r4
 10025d4:	d9014515 	stw	r4,1300(sp)
 10025d8:	003f4a06 	br	1002304 <___vfprintf_internal_r+0x1ba8>
 10025dc:	3cc00017 	ldw	r19,0(r7)
 10025e0:	39c00104 	addi	r7,r7,4
 10025e4:	983d0e0e 	bge	r19,zero,1001a20 <___vfprintf_internal_r+0x12c4>
 10025e8:	b8c00007 	ldb	r3,0(r23)
 10025ec:	04ffffc4 	movi	r19,-1
 10025f0:	0038d906 	br	1000958 <___vfprintf_internal_r+0x1fc>
 10025f4:	9cc00084 	addi	r19,r19,2
 10025f8:	dcc14515 	stw	r19,1300(sp)
 10025fc:	980f883a 	mov	r7,r19
 1002600:	983f400e 	bge	r19,zero,1002304 <___vfprintf_internal_r+0x1ba8>
 1002604:	003f7306 	br	10023d4 <___vfprintf_internal_r+0x1c78>

01002608 <__vfprintf_internal>:
 1002608:	008040b4 	movhi	r2,258
 100260c:	10a8f804 	addi	r2,r2,-23584
 1002610:	2013883a 	mov	r9,r4
 1002614:	11000017 	ldw	r4,0(r2)
 1002618:	2805883a 	mov	r2,r5
 100261c:	300f883a 	mov	r7,r6
 1002620:	480b883a 	mov	r5,r9
 1002624:	100d883a 	mov	r6,r2
 1002628:	100075c1 	jmpi	100075c <___vfprintf_internal_r>

0100262c <__svfscanf_r>:
 100262c:	deff4e04 	addi	sp,sp,-712
 1002630:	dd80ae15 	stw	r22,696(sp)
 1002634:	dd00ac15 	stw	r20,688(sp)
 1002638:	dc40a915 	stw	r17,676(sp)
 100263c:	dc00a815 	stw	r16,672(sp)
 1002640:	dfc0b115 	stw	ra,708(sp)
 1002644:	df00b015 	stw	fp,704(sp)
 1002648:	ddc0af15 	stw	r23,700(sp)
 100264c:	dd40ad15 	stw	r21,692(sp)
 1002650:	dcc0ab15 	stw	r19,684(sp)
 1002654:	dc80aa15 	stw	r18,680(sp)
 1002658:	202d883a 	mov	r22,r4
 100265c:	2821883a 	mov	r16,r5
 1002660:	d9c0a415 	stw	r7,656(sp)
 1002664:	3029883a 	mov	r20,r6
 1002668:	d800a215 	stw	zero,648(sp)
 100266c:	0023883a 	mov	r17,zero
 1002670:	d800a115 	stw	zero,644(sp)
 1002674:	d800a015 	stw	zero,640(sp)
 1002678:	a1000007 	ldb	r4,0(r20)
 100267c:	d9000115 	stw	r4,4(sp)
 1002680:	20001f26 	beq	r4,zero,1002700 <__svfscanf_r+0xd4>
 1002684:	048040b4 	movhi	r18,258
 1002688:	94a8f704 	addi	r18,r18,-23588
 100268c:	91800017 	ldw	r6,0(r18)
 1002690:	a5000044 	addi	r20,r20,1
 1002694:	3107883a 	add	r3,r6,r4
 1002698:	18800003 	ldbu	r2,0(r3)
 100269c:	1080020c 	andi	r2,r2,8
 10026a0:	10002426 	beq	r2,zero,1002734 <__svfscanf_r+0x108>
 10026a4:	80c00117 	ldw	r3,4(r16)
 10026a8:	00c00e0e 	bge	zero,r3,10026e4 <__svfscanf_r+0xb8>
 10026ac:	81400017 	ldw	r5,0(r16)
 10026b0:	90800017 	ldw	r2,0(r18)
 10026b4:	28c00003 	ldbu	r3,0(r5)
 10026b8:	1887883a 	add	r3,r3,r2
 10026bc:	19000003 	ldbu	r4,0(r3)
 10026c0:	2100020c 	andi	r4,r4,8
 10026c4:	203fec26 	beq	r4,zero,1002678 <__svfscanf_r+0x4c>
 10026c8:	80c00117 	ldw	r3,4(r16)
 10026cc:	29800044 	addi	r6,r5,1
 10026d0:	8c400044 	addi	r17,r17,1
 10026d4:	18ffffc4 	addi	r3,r3,-1
 10026d8:	81800015 	stw	r6,0(r16)
 10026dc:	80c00115 	stw	r3,4(r16)
 10026e0:	00fff216 	blt	zero,r3,10026ac <__svfscanf_r+0x80>
 10026e4:	b009883a 	mov	r4,r22
 10026e8:	800b883a 	mov	r5,r16
 10026ec:	1008be40 	call	1008be4 <__srefill_r>
 10026f0:	103fee26 	beq	r2,zero,10026ac <__svfscanf_r+0x80>
 10026f4:	a1000007 	ldb	r4,0(r20)
 10026f8:	d9000115 	stw	r4,4(sp)
 10026fc:	203fe11e 	bne	r4,zero,1002684 <__svfscanf_r+0x58>
 1002700:	d880a217 	ldw	r2,648(sp)
 1002704:	dfc0b117 	ldw	ra,708(sp)
 1002708:	df00b017 	ldw	fp,704(sp)
 100270c:	ddc0af17 	ldw	r23,700(sp)
 1002710:	dd80ae17 	ldw	r22,696(sp)
 1002714:	dd40ad17 	ldw	r21,692(sp)
 1002718:	dd00ac17 	ldw	r20,688(sp)
 100271c:	dcc0ab17 	ldw	r19,684(sp)
 1002720:	dc80aa17 	ldw	r18,680(sp)
 1002724:	dc40a917 	ldw	r17,676(sp)
 1002728:	dc00a817 	ldw	r16,672(sp)
 100272c:	dec0b204 	addi	sp,sp,712
 1002730:	f800283a 	ret
 1002734:	00800944 	movi	r2,37
 1002738:	20801626 	beq	r4,r2,1002794 <__svfscanf_r+0x168>
 100273c:	80800117 	ldw	r2,4(r16)
 1002740:	00800b0e 	bge	zero,r2,1002770 <__svfscanf_r+0x144>
 1002744:	81000017 	ldw	r4,0(r16)
 1002748:	a0ffffc7 	ldb	r3,-1(r20)
 100274c:	20800003 	ldbu	r2,0(r4)
 1002750:	10ffeb1e 	bne	r2,r3,1002700 <__svfscanf_r+0xd4>
 1002754:	80c00117 	ldw	r3,4(r16)
 1002758:	21800044 	addi	r6,r4,1
 100275c:	8c400044 	addi	r17,r17,1
 1002760:	18ffffc4 	addi	r3,r3,-1
 1002764:	80c00115 	stw	r3,4(r16)
 1002768:	81800015 	stw	r6,0(r16)
 100276c:	003fc206 	br	1002678 <__svfscanf_r+0x4c>
 1002770:	b009883a 	mov	r4,r22
 1002774:	800b883a 	mov	r5,r16
 1002778:	1008be40 	call	1008be4 <__srefill_r>
 100277c:	103ff126 	beq	r2,zero,1002744 <__svfscanf_r+0x118>
 1002780:	d900a217 	ldw	r4,648(sp)
 1002784:	2004c91e 	bne	r4,zero,1003aac <__svfscanf_r+0x1480>
 1002788:	00bfffc4 	movi	r2,-1
 100278c:	d880a215 	stw	r2,648(sp)
 1002790:	003fdb06 	br	1002700 <__svfscanf_r+0xd4>
 1002794:	d800a315 	stw	zero,652(sp)
 1002798:	0027883a 	mov	r19,zero
 100279c:	a0c00003 	ldbu	r3,0(r20)
 10027a0:	00801e04 	movi	r2,120
 10027a4:	a5000044 	addi	r20,r20,1
 10027a8:	19403fcc 	andi	r5,r3,255
 10027ac:	2940201c 	xori	r5,r5,128
 10027b0:	297fe004 	addi	r5,r5,-128
 10027b4:	10c08036 	bltu	r2,r3,10029b8 <__svfscanf_r+0x38c>
 10027b8:	18c5883a 	add	r2,r3,r3
 10027bc:	1085883a 	add	r2,r2,r2
 10027c0:	00c04034 	movhi	r3,256
 10027c4:	18c9f504 	addi	r3,r3,10196
 10027c8:	10c5883a 	add	r2,r2,r3
 10027cc:	11000017 	ldw	r4,0(r2)
 10027d0:	2000683a 	jmp	r4
 10027d4:	01002788 	cmpgei	r4,zero,158
 10027d8:	010029b8 	rdprs	r4,zero,166
 10027dc:	010029b8 	rdprs	r4,zero,166
 10027e0:	010029b8 	rdprs	r4,zero,166
 10027e4:	010029b8 	rdprs	r4,zero,166
 10027e8:	010029b8 	rdprs	r4,zero,166
 10027ec:	010029b8 	rdprs	r4,zero,166
 10027f0:	010029b8 	rdprs	r4,zero,166
 10027f4:	010029b8 	rdprs	r4,zero,166
 10027f8:	010029b8 	rdprs	r4,zero,166
 10027fc:	010029b8 	rdprs	r4,zero,166
 1002800:	010029b8 	rdprs	r4,zero,166
 1002804:	010029b8 	rdprs	r4,zero,166
 1002808:	010029b8 	rdprs	r4,zero,166
 100280c:	010029b8 	rdprs	r4,zero,166
 1002810:	010029b8 	rdprs	r4,zero,166
 1002814:	010029b8 	rdprs	r4,zero,166
 1002818:	010029b8 	rdprs	r4,zero,166
 100281c:	010029b8 	rdprs	r4,zero,166
 1002820:	010029b8 	rdprs	r4,zero,166
 1002824:	010029b8 	rdprs	r4,zero,166
 1002828:	010029b8 	rdprs	r4,zero,166
 100282c:	010029b8 	rdprs	r4,zero,166
 1002830:	010029b8 	rdprs	r4,zero,166
 1002834:	010029b8 	rdprs	r4,zero,166
 1002838:	010029b8 	rdprs	r4,zero,166
 100283c:	010029b8 	rdprs	r4,zero,166
 1002840:	010029b8 	rdprs	r4,zero,166
 1002844:	010029b8 	rdprs	r4,zero,166
 1002848:	010029b8 	rdprs	r4,zero,166
 100284c:	010029b8 	rdprs	r4,zero,166
 1002850:	010029b8 	rdprs	r4,zero,166
 1002854:	010029b8 	rdprs	r4,zero,166
 1002858:	010029b8 	rdprs	r4,zero,166
 100285c:	010029b8 	rdprs	r4,zero,166
 1002860:	010029b8 	rdprs	r4,zero,166
 1002864:	010029b8 	rdprs	r4,zero,166
 1002868:	0100273c 	xorhi	r4,zero,156
 100286c:	010029b8 	rdprs	r4,zero,166
 1002870:	010029b8 	rdprs	r4,zero,166
 1002874:	010029b8 	rdprs	r4,zero,166
 1002878:	010029b8 	rdprs	r4,zero,166
 100287c:	010039dc 	xori	r4,zero,231
 1002880:	010029b8 	rdprs	r4,zero,166
 1002884:	010029b8 	rdprs	r4,zero,166
 1002888:	010029b8 	rdprs	r4,zero,166
 100288c:	010029b8 	rdprs	r4,zero,166
 1002890:	010029b8 	rdprs	r4,zero,166
 1002894:	010033d8 	cmpnei	r4,zero,207
 1002898:	010033d8 	cmpnei	r4,zero,207
 100289c:	010033d8 	cmpnei	r4,zero,207
 10028a0:	010033d8 	cmpnei	r4,zero,207
 10028a4:	010033d8 	cmpnei	r4,zero,207
 10028a8:	010033d8 	cmpnei	r4,zero,207
 10028ac:	010033d8 	cmpnei	r4,zero,207
 10028b0:	010033d8 	cmpnei	r4,zero,207
 10028b4:	010033d8 	cmpnei	r4,zero,207
 10028b8:	010033d8 	cmpnei	r4,zero,207
 10028bc:	010029b8 	rdprs	r4,zero,166
 10028c0:	010029b8 	rdprs	r4,zero,166
 10028c4:	010029b8 	rdprs	r4,zero,166
 10028c8:	010029b8 	rdprs	r4,zero,166
 10028cc:	010029b8 	rdprs	r4,zero,166
 10028d0:	010029b8 	rdprs	r4,zero,166
 10028d4:	010029b8 	rdprs	r4,zero,166
 10028d8:	010029b8 	rdprs	r4,zero,166
 10028dc:	010029b8 	rdprs	r4,zero,166
 10028e0:	010029b8 	rdprs	r4,zero,166
 10028e4:	01003b58 	cmpnei	r4,zero,237
 10028e8:	01003b50 	cmplti	r4,zero,237
 10028ec:	010029b8 	rdprs	r4,zero,166
 10028f0:	01003b50 	cmplti	r4,zero,237
 10028f4:	010029b8 	rdprs	r4,zero,166
 10028f8:	010029b8 	rdprs	r4,zero,166
 10028fc:	010029b8 	rdprs	r4,zero,166
 1002900:	010029b8 	rdprs	r4,zero,166
 1002904:	01003be8 	cmpgeui	r4,zero,239
 1002908:	010029b8 	rdprs	r4,zero,166
 100290c:	010029b8 	rdprs	r4,zero,166
 1002910:	01003ba0 	cmpeqi	r4,zero,238
 1002914:	010029b8 	rdprs	r4,zero,166
 1002918:	010029b8 	rdprs	r4,zero,166
 100291c:	010029b8 	rdprs	r4,zero,166
 1002920:	010029b8 	rdprs	r4,zero,166
 1002924:	010029b8 	rdprs	r4,zero,166
 1002928:	010029b8 	rdprs	r4,zero,166
 100292c:	010029b8 	rdprs	r4,zero,166
 1002930:	010029b8 	rdprs	r4,zero,166
 1002934:	010039e4 	muli	r4,zero,231
 1002938:	010029b8 	rdprs	r4,zero,166
 100293c:	010029b8 	rdprs	r4,zero,166
 1002940:	01003b84 	movi	r4,238
 1002944:	010029b8 	rdprs	r4,zero,166
 1002948:	010029b8 	rdprs	r4,zero,166
 100294c:	010029b8 	rdprs	r4,zero,166
 1002950:	010029b8 	rdprs	r4,zero,166
 1002954:	010029b8 	rdprs	r4,zero,166
 1002958:	010029b8 	rdprs	r4,zero,166
 100295c:	010029b8 	rdprs	r4,zero,166
 1002960:	01003b78 	rdprs	r4,zero,237
 1002964:	01003b5c 	xori	r4,zero,237
 1002968:	01003b50 	cmplti	r4,zero,237
 100296c:	01003b50 	cmplti	r4,zero,237
 1002970:	01003b50 	cmplti	r4,zero,237
 1002974:	01003b48 	cmpgei	r4,zero,237
 1002978:	01003c3c 	xorhi	r4,zero,240
 100297c:	010029b8 	rdprs	r4,zero,166
 1002980:	010029b8 	rdprs	r4,zero,166
 1002984:	01003c28 	cmpgeui	r4,zero,240
 1002988:	010029b8 	rdprs	r4,zero,166
 100298c:	01003bc0 	call	1003bc <__alt_mem_onchip_memory2_0+0x1003bc>
 1002990:	01003ba4 	muli	r4,zero,238
 1002994:	01003bf8 	rdprs	r4,zero,239
 1002998:	010029b8 	rdprs	r4,zero,166
 100299c:	010029b8 	rdprs	r4,zero,166
 10029a0:	01003bf0 	cmpltui	r4,zero,239
 10029a4:	010029b8 	rdprs	r4,zero,166
 10029a8:	01002f28 	cmpgeui	r4,zero,188
 10029ac:	010029b8 	rdprs	r4,zero,166
 10029b0:	010029b8 	rdprs	r4,zero,166
 10029b4:	010039e4 	muli	r4,zero,231
 10029b8:	2987883a 	add	r3,r5,r6
 10029bc:	18800003 	ldbu	r2,0(r3)
 10029c0:	1080004c 	andi	r2,r2,1
 10029c4:	1005003a 	cmpeq	r2,r2,zero
 10029c8:	10002c26 	beq	r2,zero,1002a7c <__svfscanf_r+0x450>
 10029cc:	01004074 	movhi	r4,257
 10029d0:	212a2d04 	addi	r4,r4,-22348
 10029d4:	00800284 	movi	r2,10
 10029d8:	d900a015 	stw	r4,640(sp)
 10029dc:	054000c4 	movi	r21,3
 10029e0:	d880a115 	stw	r2,644(sp)
 10029e4:	80c00117 	ldw	r3,4(r16)
 10029e8:	00c14a0e 	bge	zero,r3,1002f14 <__svfscanf_r+0x8e8>
 10029ec:	9880100c 	andi	r2,r19,64
 10029f0:	10001326 	beq	r2,zero,1002a40 <__svfscanf_r+0x414>
 10029f4:	00800104 	movi	r2,4
 10029f8:	157f1f36 	bltu	r2,r21,1002678 <__svfscanf_r+0x4c>
 10029fc:	ad45883a 	add	r2,r21,r21
 1002a00:	1085883a 	add	r2,r2,r2
 1002a04:	00c04034 	movhi	r3,256
 1002a08:	18ca8604 	addi	r3,r3,10776
 1002a0c:	10c5883a 	add	r2,r2,r3
 1002a10:	11000017 	ldw	r4,0(r2)
 1002a14:	2000683a 	jmp	r4
 1002a18:	01002a84 	movi	r4,170
 1002a1c:	01002b90 	cmplti	r4,zero,174
 1002a20:	01002c04 	movi	r4,176
 1002a24:	01002ef0 	cmpltui	r4,zero,187
 1002a28:	01002d3c 	xorhi	r4,zero,180
 1002a2c:	b009883a 	mov	r4,r22
 1002a30:	800b883a 	mov	r5,r16
 1002a34:	1008be40 	call	1008be4 <__srefill_r>
 1002a38:	103f511e 	bne	r2,zero,1002780 <__svfscanf_r+0x154>
 1002a3c:	8c400044 	addi	r17,r17,1
 1002a40:	81400017 	ldw	r5,0(r16)
 1002a44:	90800017 	ldw	r2,0(r18)
 1002a48:	28c00003 	ldbu	r3,0(r5)
 1002a4c:	1887883a 	add	r3,r3,r2
 1002a50:	19000003 	ldbu	r4,0(r3)
 1002a54:	2100020c 	andi	r4,r4,8
 1002a58:	203fe626 	beq	r4,zero,10029f4 <__svfscanf_r+0x3c8>
 1002a5c:	80c00117 	ldw	r3,4(r16)
 1002a60:	18ffffc4 	addi	r3,r3,-1
 1002a64:	80c00115 	stw	r3,4(r16)
 1002a68:	00fff00e 	bge	zero,r3,1002a2c <__svfscanf_r+0x400>
 1002a6c:	29800044 	addi	r6,r5,1
 1002a70:	8c400044 	addi	r17,r17,1
 1002a74:	81800015 	stw	r6,0(r16)
 1002a78:	003ff106 	br	1002a40 <__svfscanf_r+0x414>
 1002a7c:	9cc00054 	ori	r19,r19,1
 1002a80:	003fd206 	br	10029cc <__svfscanf_r+0x3a0>
 1002a84:	d8c0a317 	ldw	r3,652(sp)
 1002a88:	1800021e 	bne	r3,zero,1002a94 <__svfscanf_r+0x468>
 1002a8c:	01000044 	movi	r4,1
 1002a90:	d900a315 	stw	r4,652(sp)
 1002a94:	9880004c 	andi	r2,r19,1
 1002a98:	1005003a 	cmpeq	r2,r2,zero
 1002a9c:	1003d91e 	bne	r2,zero,1003a04 <__svfscanf_r+0x13d8>
 1002aa0:	9d40040c 	andi	r21,r19,16
 1002aa4:	a839003a 	cmpeq	fp,r21,zero
 1002aa8:	e0042526 	beq	fp,zero,1003b40 <__svfscanf_r+0x1514>
 1002aac:	d880a417 	ldw	r2,656(sp)
 1002ab0:	14c00017 	ldw	r19,0(r2)
 1002ab4:	10800104 	addi	r2,r2,4
 1002ab8:	d880a415 	stw	r2,656(sp)
 1002abc:	d8c0a317 	ldw	r3,652(sp)
 1002ac0:	18041a26 	beq	r3,zero,1003b2c <__svfscanf_r+0x1500>
 1002ac4:	010040b4 	movhi	r4,258
 1002ac8:	2128fa04 	addi	r4,r4,-23576
 1002acc:	20800017 	ldw	r2,0(r4)
 1002ad0:	103f2b26 	beq	r2,zero,1002780 <__svfscanf_r+0x154>
 1002ad4:	d8804404 	addi	r2,sp,272
 1002ad8:	0025883a 	mov	r18,zero
 1002adc:	d880a615 	stw	r2,664(sp)
 1002ae0:	05ffffc4 	movi	r23,-1
 1002ae4:	80800017 	ldw	r2,0(r16)
 1002ae8:	80c00117 	ldw	r3,4(r16)
 1002aec:	d900a617 	ldw	r4,664(sp)
 1002af0:	12000003 	ldbu	r8,0(r2)
 1002af4:	18ffffc4 	addi	r3,r3,-1
 1002af8:	11800044 	addi	r6,r2,1
 1002afc:	248f883a 	add	r7,r4,r18
 1002b00:	80c00115 	stw	r3,4(r16)
 1002b04:	81800015 	stw	r6,0(r16)
 1002b08:	3a000005 	stb	r8,0(r7)
 1002b0c:	d9000204 	addi	r4,sp,8
 1002b10:	000b883a 	mov	r5,zero
 1002b14:	01800204 	movi	r6,8
 1002b18:	10075640 	call	1007564 <memset>
 1002b1c:	d980a617 	ldw	r6,664(sp)
 1002b20:	94800044 	addi	r18,r18,1
 1002b24:	d8800204 	addi	r2,sp,8
 1002b28:	b009883a 	mov	r4,r22
 1002b2c:	980b883a 	mov	r5,r19
 1002b30:	900f883a 	mov	r7,r18
 1002b34:	d8800015 	stw	r2,0(sp)
 1002b38:	10072000 	call	1007200 <_mbrtowc_r>
 1002b3c:	1007883a 	mov	r3,r2
 1002b40:	15ff0f26 	beq	r2,r23,1002780 <__svfscanf_r+0x154>
 1002b44:	1003f11e 	bne	r2,zero,1003b0c <__svfscanf_r+0x14e0>
 1002b48:	a800011e 	bne	r21,zero,1002b50 <__svfscanf_r+0x524>
 1002b4c:	98000015 	stw	zero,0(r19)
 1002b50:	d8c0a317 	ldw	r3,652(sp)
 1002b54:	8ca3883a 	add	r17,r17,r18
 1002b58:	18ffffc4 	addi	r3,r3,-1
 1002b5c:	d8c0a315 	stw	r3,652(sp)
 1002b60:	e0000126 	beq	fp,zero,1002b68 <__svfscanf_r+0x53c>
 1002b64:	9cc00104 	addi	r19,r19,4
 1002b68:	0025883a 	mov	r18,zero
 1002b6c:	80c00117 	ldw	r3,4(r16)
 1002b70:	00c3e90e 	bge	zero,r3,1003b18 <__svfscanf_r+0x14ec>
 1002b74:	d900a317 	ldw	r4,652(sp)
 1002b78:	2003ec26 	beq	r4,zero,1003b2c <__svfscanf_r+0x1500>
 1002b7c:	00c040b4 	movhi	r3,258
 1002b80:	18e8fa04 	addi	r3,r3,-23576
 1002b84:	18800017 	ldw	r2,0(r3)
 1002b88:	90bfd61e 	bne	r18,r2,1002ae4 <__svfscanf_r+0x4b8>
 1002b8c:	003efc06 	br	1002780 <__svfscanf_r+0x154>
 1002b90:	d880a317 	ldw	r2,652(sp)
 1002b94:	1000021e 	bne	r2,zero,1002ba0 <__svfscanf_r+0x574>
 1002b98:	00ffffc4 	movi	r3,-1
 1002b9c:	d8c0a315 	stw	r3,652(sp)
 1002ba0:	9880040c 	andi	r2,r19,16
 1002ba4:	10036526 	beq	r2,zero,100393c <__svfscanf_r+0x1310>
 1002ba8:	0027883a 	mov	r19,zero
 1002bac:	dd400404 	addi	r21,sp,16
 1002bb0:	81000017 	ldw	r4,0(r16)
 1002bb4:	20800003 	ldbu	r2,0(r4)
 1002bb8:	a885883a 	add	r2,r21,r2
 1002bbc:	10c00007 	ldb	r3,0(r2)
 1002bc0:	1803be26 	beq	r3,zero,1003abc <__svfscanf_r+0x1490>
 1002bc4:	80c00117 	ldw	r3,4(r16)
 1002bc8:	21800044 	addi	r6,r4,1
 1002bcc:	d900a317 	ldw	r4,652(sp)
 1002bd0:	18ffffc4 	addi	r3,r3,-1
 1002bd4:	9cc00044 	addi	r19,r19,1
 1002bd8:	81800015 	stw	r6,0(r16)
 1002bdc:	80c00115 	stw	r3,4(r16)
 1002be0:	24c3b626 	beq	r4,r19,1003abc <__svfscanf_r+0x1490>
 1002be4:	00fff216 	blt	zero,r3,1002bb0 <__svfscanf_r+0x584>
 1002be8:	b009883a 	mov	r4,r22
 1002bec:	800b883a 	mov	r5,r16
 1002bf0:	1008be40 	call	1008be4 <__srefill_r>
 1002bf4:	103fee26 	beq	r2,zero,1002bb0 <__svfscanf_r+0x584>
 1002bf8:	983ee126 	beq	r19,zero,1002780 <__svfscanf_r+0x154>
 1002bfc:	8ce3883a 	add	r17,r17,r19
 1002c00:	003e9d06 	br	1002678 <__svfscanf_r+0x4c>
 1002c04:	d900a317 	ldw	r4,652(sp)
 1002c08:	2000021e 	bne	r4,zero,1002c14 <__svfscanf_r+0x5e8>
 1002c0c:	00bfffc4 	movi	r2,-1
 1002c10:	d880a315 	stw	r2,652(sp)
 1002c14:	9880004c 	andi	r2,r19,1
 1002c18:	1005003a 	cmpeq	r2,r2,zero
 1002c1c:	1001f41e 	bne	r2,zero,10033f0 <__svfscanf_r+0xdc4>
 1002c20:	9dc0040c 	andi	r23,r19,16
 1002c24:	b807003a 	cmpeq	r3,r23,zero
 1002c28:	d8c0a515 	stw	r3,660(sp)
 1002c2c:	1803b21e 	bne	r3,zero,1003af8 <__svfscanf_r+0x14cc>
 1002c30:	dd400104 	addi	r21,sp,4
 1002c34:	0027883a 	mov	r19,zero
 1002c38:	073fffc4 	movi	fp,-1
 1002c3c:	81400017 	ldw	r5,0(r16)
 1002c40:	90800017 	ldw	r2,0(r18)
 1002c44:	29c00003 	ldbu	r7,0(r5)
 1002c48:	38c03fcc 	andi	r3,r7,255
 1002c4c:	1887883a 	add	r3,r3,r2
 1002c50:	19000003 	ldbu	r4,0(r3)
 1002c54:	2100020c 	andi	r4,r4,8
 1002c58:	2000321e 	bne	r4,zero,1002d24 <__svfscanf_r+0x6f8>
 1002c5c:	d8c0a317 	ldw	r3,652(sp)
 1002c60:	18003026 	beq	r3,zero,1002d24 <__svfscanf_r+0x6f8>
 1002c64:	008040b4 	movhi	r2,258
 1002c68:	10a8fa04 	addi	r2,r2,-23576
 1002c6c:	10c00017 	ldw	r3,0(r2)
 1002c70:	98fec326 	beq	r19,r3,1002780 <__svfscanf_r+0x154>
 1002c74:	d8c04404 	addi	r3,sp,272
 1002c78:	80800117 	ldw	r2,4(r16)
 1002c7c:	d8c0a615 	stw	r3,664(sp)
 1002c80:	d900a617 	ldw	r4,664(sp)
 1002c84:	10ffffc4 	addi	r3,r2,-1
 1002c88:	29800044 	addi	r6,r5,1
 1002c8c:	80c00115 	stw	r3,4(r16)
 1002c90:	24c5883a 	add	r2,r4,r19
 1002c94:	81800015 	stw	r6,0(r16)
 1002c98:	d9000204 	addi	r4,sp,8
 1002c9c:	000b883a 	mov	r5,zero
 1002ca0:	01800204 	movi	r6,8
 1002ca4:	11c00005 	stb	r7,0(r2)
 1002ca8:	10075640 	call	1007564 <memset>
 1002cac:	d980a617 	ldw	r6,664(sp)
 1002cb0:	9cc00044 	addi	r19,r19,1
 1002cb4:	d8800204 	addi	r2,sp,8
 1002cb8:	b009883a 	mov	r4,r22
 1002cbc:	a80b883a 	mov	r5,r21
 1002cc0:	980f883a 	mov	r7,r19
 1002cc4:	d8800015 	stw	r2,0(sp)
 1002cc8:	10072000 	call	1007200 <_mbrtowc_r>
 1002ccc:	1007883a 	mov	r3,r2
 1002cd0:	173eab26 	beq	r2,fp,1002780 <__svfscanf_r+0x154>
 1002cd4:	1003851e 	bne	r2,zero,1003aec <__svfscanf_r+0x14c0>
 1002cd8:	a8000015 	stw	zero,0(r21)
 1002cdc:	a9000017 	ldw	r4,0(r21)
 1002ce0:	100683c0 	call	100683c <iswspace>
 1002ce4:	1003781e 	bne	r2,zero,1003ac8 <__svfscanf_r+0x149c>
 1002ce8:	d900a317 	ldw	r4,652(sp)
 1002cec:	d880a517 	ldw	r2,660(sp)
 1002cf0:	8ce3883a 	add	r17,r17,r19
 1002cf4:	213fffc4 	addi	r4,r4,-1
 1002cf8:	d900a315 	stw	r4,652(sp)
 1002cfc:	10000126 	beq	r2,zero,1002d04 <__svfscanf_r+0x6d8>
 1002d00:	ad400104 	addi	r21,r21,4
 1002d04:	0027883a 	mov	r19,zero
 1002d08:	80c00117 	ldw	r3,4(r16)
 1002d0c:	00ffcb16 	blt	zero,r3,1002c3c <__svfscanf_r+0x610>
 1002d10:	b009883a 	mov	r4,r22
 1002d14:	800b883a 	mov	r5,r16
 1002d18:	1008be40 	call	1008be4 <__srefill_r>
 1002d1c:	103fc726 	beq	r2,zero,1002c3c <__svfscanf_r+0x610>
 1002d20:	983e971e 	bne	r19,zero,1002780 <__svfscanf_r+0x154>
 1002d24:	b83e541e 	bne	r23,zero,1002678 <__svfscanf_r+0x4c>
 1002d28:	d900a217 	ldw	r4,648(sp)
 1002d2c:	a8000015 	stw	zero,0(r21)
 1002d30:	21000044 	addi	r4,r4,1
 1002d34:	d900a215 	stw	r4,648(sp)
 1002d38:	003e4f06 	br	1002678 <__svfscanf_r+0x4c>
 1002d3c:	d900a317 	ldw	r4,652(sp)
 1002d40:	00805704 	movi	r2,348
 1002d44:	20ffffc4 	addi	r3,r4,-1
 1002d48:	10c1ed2e 	bgeu	r2,r3,1003500 <__svfscanf_r+0xed4>
 1002d4c:	00805744 	movi	r2,349
 1002d50:	21bfa8c4 	addi	r6,r4,-349
 1002d54:	9d41e014 	ori	r21,r19,1920
 1002d58:	d880a315 	stw	r2,652(sp)
 1002d5c:	d8c04404 	addi	r3,sp,272
 1002d60:	d8c0a615 	stw	r3,664(sp)
 1002d64:	182f883a 	mov	r23,r3
 1002d68:	d8009f15 	stw	zero,636(sp)
 1002d6c:	d8009e15 	stw	zero,632(sp)
 1002d70:	d8009d15 	stw	zero,628(sp)
 1002d74:	d8009c15 	stw	zero,624(sp)
 1002d78:	0039883a 	mov	fp,zero
 1002d7c:	0025883a 	mov	r18,zero
 1002d80:	80800017 	ldw	r2,0(r16)
 1002d84:	11400003 	ldbu	r5,0(r2)
 1002d88:	00801384 	movi	r2,78
 1002d8c:	28fff544 	addi	r3,r5,-43
 1002d90:	18c03fcc 	andi	r3,r3,255
 1002d94:	10c07d36 	bltu	r2,r3,1002f8c <__svfscanf_r+0x960>
 1002d98:	18c5883a 	add	r2,r3,r3
 1002d9c:	1085883a 	add	r2,r2,r2
 1002da0:	00c04034 	movhi	r3,256
 1002da4:	18cb6d04 	addi	r3,r3,11700
 1002da8:	10c5883a 	add	r2,r2,r3
 1002dac:	11000017 	ldw	r4,0(r2)
 1002db0:	2000683a 	jmp	r4
 1002db4:	01002f44 	movi	r4,189
 1002db8:	01002f8c 	andi	r4,zero,190
 1002dbc:	01002f44 	movi	r4,189
 1002dc0:	010030d8 	cmpnei	r4,zero,195
 1002dc4:	01002f8c 	andi	r4,zero,190
 1002dc8:	01003110 	cmplti	r4,zero,196
 1002dcc:	01003144 	movi	r4,197
 1002dd0:	01003144 	movi	r4,197
 1002dd4:	01003144 	movi	r4,197
 1002dd8:	01003144 	movi	r4,197
 1002ddc:	01003144 	movi	r4,197
 1002de0:	01003144 	movi	r4,197
 1002de4:	01003144 	movi	r4,197
 1002de8:	01003144 	movi	r4,197
 1002dec:	01003144 	movi	r4,197
 1002df0:	01002f8c 	andi	r4,zero,190
 1002df4:	01002f8c 	andi	r4,zero,190
 1002df8:	01002f8c 	andi	r4,zero,190
 1002dfc:	01002f8c 	andi	r4,zero,190
 1002e00:	01002f8c 	andi	r4,zero,190
 1002e04:	01002f8c 	andi	r4,zero,190
 1002e08:	01002f8c 	andi	r4,zero,190
 1002e0c:	01003164 	muli	r4,zero,197
 1002e10:	01002f8c 	andi	r4,zero,190
 1002e14:	01002f8c 	andi	r4,zero,190
 1002e18:	01002f8c 	andi	r4,zero,190
 1002e1c:	01003174 	movhi	r4,197
 1002e20:	01003210 	cmplti	r4,zero,200
 1002e24:	01002f8c 	andi	r4,zero,190
 1002e28:	01002f8c 	andi	r4,zero,190
 1002e2c:	0100322c 	andhi	r4,zero,200
 1002e30:	01002f8c 	andi	r4,zero,190
 1002e34:	01002f8c 	andi	r4,zero,190
 1002e38:	01002f8c 	andi	r4,zero,190
 1002e3c:	01002f8c 	andi	r4,zero,190
 1002e40:	01003258 	cmpnei	r4,zero,201
 1002e44:	01002f8c 	andi	r4,zero,190
 1002e48:	01002f8c 	andi	r4,zero,190
 1002e4c:	01002f8c 	andi	r4,zero,190
 1002e50:	01002f8c 	andi	r4,zero,190
 1002e54:	01002f8c 	andi	r4,zero,190
 1002e58:	010032ac 	andhi	r4,zero,202
 1002e5c:	01002f8c 	andi	r4,zero,190
 1002e60:	01002f8c 	andi	r4,zero,190
 1002e64:	01002f8c 	andi	r4,zero,190
 1002e68:	01002f8c 	andi	r4,zero,190
 1002e6c:	010033bc 	xorhi	r4,zero,206
 1002e70:	01002f8c 	andi	r4,zero,190
 1002e74:	01002f8c 	andi	r4,zero,190
 1002e78:	01002f8c 	andi	r4,zero,190
 1002e7c:	01002f8c 	andi	r4,zero,190
 1002e80:	01002f8c 	andi	r4,zero,190
 1002e84:	01002f8c 	andi	r4,zero,190
 1002e88:	01002f8c 	andi	r4,zero,190
 1002e8c:	01003164 	muli	r4,zero,197
 1002e90:	01002f8c 	andi	r4,zero,190
 1002e94:	01002f8c 	andi	r4,zero,190
 1002e98:	01002f8c 	andi	r4,zero,190
 1002e9c:	01003174 	movhi	r4,197
 1002ea0:	01003210 	cmplti	r4,zero,200
 1002ea4:	01002f8c 	andi	r4,zero,190
 1002ea8:	01002f8c 	andi	r4,zero,190
 1002eac:	0100322c 	andhi	r4,zero,200
 1002eb0:	01002f8c 	andi	r4,zero,190
 1002eb4:	01002f8c 	andi	r4,zero,190
 1002eb8:	01002f8c 	andi	r4,zero,190
 1002ebc:	01002f8c 	andi	r4,zero,190
 1002ec0:	01003258 	cmpnei	r4,zero,201
 1002ec4:	01002f8c 	andi	r4,zero,190
 1002ec8:	01002f8c 	andi	r4,zero,190
 1002ecc:	01002f8c 	andi	r4,zero,190
 1002ed0:	01002f8c 	andi	r4,zero,190
 1002ed4:	01002f8c 	andi	r4,zero,190
 1002ed8:	010032ac 	andhi	r4,zero,202
 1002edc:	01002f8c 	andi	r4,zero,190
 1002ee0:	01002f8c 	andi	r4,zero,190
 1002ee4:	01002f8c 	andi	r4,zero,190
 1002ee8:	01002f8c 	andi	r4,zero,190
 1002eec:	010033bc 	xorhi	r4,zero,206
 1002ef0:	d900a317 	ldw	r4,652(sp)
 1002ef4:	00805704 	movi	r2,348
 1002ef8:	20ffffc4 	addi	r3,r4,-1
 1002efc:	10c18c2e 	bgeu	r2,r3,1003530 <__svfscanf_r+0xf04>
 1002f00:	00805744 	movi	r2,349
 1002f04:	257fa8c4 	addi	r21,r4,-349
 1002f08:	9c836014 	ori	r18,r19,3456
 1002f0c:	d880a315 	stw	r2,652(sp)
 1002f10:	0001a106 	br	1003598 <__svfscanf_r+0xf6c>
 1002f14:	b009883a 	mov	r4,r22
 1002f18:	800b883a 	mov	r5,r16
 1002f1c:	1008be40 	call	1008be4 <__srefill_r>
 1002f20:	103eb226 	beq	r2,zero,10029ec <__svfscanf_r+0x3c0>
 1002f24:	003e1606 	br	1002780 <__svfscanf_r+0x154>
 1002f28:	01000284 	movi	r4,10
 1002f2c:	00804074 	movhi	r2,257
 1002f30:	10ab8d04 	addi	r2,r2,-20940
 1002f34:	054000c4 	movi	r21,3
 1002f38:	d900a115 	stw	r4,644(sp)
 1002f3c:	d880a015 	stw	r2,640(sp)
 1002f40:	003ea806 	br	10029e4 <__svfscanf_r+0x3b8>
 1002f44:	a880200c 	andi	r2,r21,128
 1002f48:	10001026 	beq	r2,zero,1002f8c <__svfscanf_r+0x960>
 1002f4c:	00bfdfc4 	movi	r2,-129
 1002f50:	a8aa703a 	and	r21,r21,r2
 1002f54:	b9400005 	stb	r5,0(r23)
 1002f58:	bdc00044 	addi	r23,r23,1
 1002f5c:	80c00117 	ldw	r3,4(r16)
 1002f60:	8c400044 	addi	r17,r17,1
 1002f64:	18bfffc4 	addi	r2,r3,-1
 1002f68:	80800115 	stw	r2,4(r16)
 1002f6c:	0080610e 	bge	zero,r2,10030f4 <__svfscanf_r+0xac8>
 1002f70:	80800017 	ldw	r2,0(r16)
 1002f74:	10800044 	addi	r2,r2,1
 1002f78:	80800015 	stw	r2,0(r16)
 1002f7c:	d880a317 	ldw	r2,652(sp)
 1002f80:	10bfffc4 	addi	r2,r2,-1
 1002f84:	d880a315 	stw	r2,652(sp)
 1002f88:	103f7d1e 	bne	r2,zero,1002d80 <__svfscanf_r+0x754>
 1002f8c:	d8c09e17 	ldw	r3,632(sp)
 1002f90:	18000226 	beq	r3,zero,1002f9c <__svfscanf_r+0x970>
 1002f94:	00bfbfc4 	movi	r2,-257
 1002f98:	a8aa703a 	and	r21,r21,r2
 1002f9c:	90ffffc4 	addi	r3,r18,-1
 1002fa0:	00800044 	movi	r2,1
 1002fa4:	10c0cd2e 	bgeu	r2,r3,10032dc <__svfscanf_r+0xcb0>
 1002fa8:	e1003fcc 	andi	r4,fp,255
 1002fac:	2100201c 	xori	r4,r4,128
 1002fb0:	213fe004 	addi	r4,r4,-128
 1002fb4:	20ffffc4 	addi	r3,r4,-1
 1002fb8:	00800184 	movi	r2,6
 1002fbc:	10c01736 	bltu	r2,r3,100301c <__svfscanf_r+0x9f0>
 1002fc0:	00c00084 	movi	r3,2
 1002fc4:	1900880e 	bge	r3,r4,10031e8 <__svfscanf_r+0xbbc>
 1002fc8:	008000c4 	movi	r2,3
 1002fcc:	1100130e 	bge	r2,r4,100301c <__svfscanf_r+0x9f0>
 1002fd0:	e4ffffc4 	addi	r19,fp,-1
 1002fd4:	b825883a 	mov	r18,r23
 1002fd8:	94bfffc4 	addi	r18,r18,-1
 1002fdc:	91400007 	ldb	r5,0(r18)
 1002fe0:	b009883a 	mov	r4,r22
 1002fe4:	800d883a 	mov	r6,r16
 1002fe8:	100b4540 	call	100b454 <_ungetc_r>
 1002fec:	9cffffc4 	addi	r19,r19,-1
 1002ff0:	98c03fcc 	andi	r3,r19,255
 1002ff4:	18c0201c 	xori	r3,r3,128
 1002ff8:	18ffe004 	addi	r3,r3,-128
 1002ffc:	00800084 	movi	r2,2
 1003000:	18bff51e 	bne	r3,r2,1002fd8 <__svfscanf_r+0x9ac>
 1003004:	e0bfff04 	addi	r2,fp,-4
 1003008:	10803fcc 	andi	r2,r2,255
 100300c:	b887c83a 	sub	r3,r23,r2
 1003010:	8885c83a 	sub	r2,r17,r2
 1003014:	147fffc4 	addi	r17,r2,-1
 1003018:	1dffffc4 	addi	r23,r3,-1
 100301c:	a880400c 	andi	r2,r21,256
 1003020:	10001226 	beq	r2,zero,100306c <__svfscanf_r+0xa40>
 1003024:	a881000c 	andi	r2,r21,1024
 1003028:	1000651e 	bne	r2,zero,10031c0 <__svfscanf_r+0xb94>
 100302c:	bdffffc4 	addi	r23,r23,-1
 1003030:	b9400007 	ldb	r5,0(r23)
 1003034:	00801944 	movi	r2,101
 1003038:	8c7fffc4 	addi	r17,r17,-1
 100303c:	28800826 	beq	r5,r2,1003060 <__svfscanf_r+0xa34>
 1003040:	00801144 	movi	r2,69
 1003044:	28800626 	beq	r5,r2,1003060 <__svfscanf_r+0xa34>
 1003048:	bdffffc4 	addi	r23,r23,-1
 100304c:	b009883a 	mov	r4,r22
 1003050:	800d883a 	mov	r6,r16
 1003054:	100b4540 	call	100b454 <_ungetc_r>
 1003058:	b9400007 	ldb	r5,0(r23)
 100305c:	8c7fffc4 	addi	r17,r17,-1
 1003060:	b009883a 	mov	r4,r22
 1003064:	800d883a 	mov	r6,r16
 1003068:	100b4540 	call	100b454 <_ungetc_r>
 100306c:	a880040c 	andi	r2,r21,16
 1003070:	103d811e 	bne	r2,zero,1002678 <__svfscanf_r+0x4c>
 1003074:	a8c1800c 	andi	r3,r21,1536
 1003078:	00810004 	movi	r2,1024
 100307c:	b8000005 	stb	zero,0(r23)
 1003080:	1880bb26 	beq	r3,r2,1003370 <__svfscanf_r+0xd44>
 1003084:	d8809d17 	ldw	r2,628(sp)
 1003088:	1000a61e 	bne	r2,zero,1003324 <__svfscanf_r+0xcf8>
 100308c:	d940a617 	ldw	r5,664(sp)
 1003090:	b009883a 	mov	r4,r22
 1003094:	000d883a 	mov	r6,zero
 1003098:	10092900 	call	1009290 <_strtod_r>
 100309c:	a900004c 	andi	r4,r21,1
 10030a0:	2009003a 	cmpeq	r4,r4,zero
 10030a4:	1025883a 	mov	r18,r2
 10030a8:	1827883a 	mov	r19,r3
 10030ac:	2000951e 	bne	r4,zero,1003304 <__svfscanf_r+0xcd8>
 10030b0:	d8c0a417 	ldw	r3,656(sp)
 10030b4:	18800017 	ldw	r2,0(r3)
 10030b8:	1d400104 	addi	r21,r3,4
 10030bc:	14c00115 	stw	r19,4(r2)
 10030c0:	14800015 	stw	r18,0(r2)
 10030c4:	d8c0a217 	ldw	r3,648(sp)
 10030c8:	dd40a415 	stw	r21,656(sp)
 10030cc:	18c00044 	addi	r3,r3,1
 10030d0:	d8c0a215 	stw	r3,648(sp)
 10030d4:	003d6806 	br	1002678 <__svfscanf_r+0x4c>
 10030d8:	a880800c 	andi	r2,r21,512
 10030dc:	103fab26 	beq	r2,zero,1002f8c <__svfscanf_r+0x960>
 10030e0:	d9009e17 	ldw	r4,632(sp)
 10030e4:	00bf5fc4 	movi	r2,-641
 10030e8:	a8aa703a 	and	r21,r21,r2
 10030ec:	d9009f15 	stw	r4,636(sp)
 10030f0:	003f9806 	br	1002f54 <__svfscanf_r+0x928>
 10030f4:	b009883a 	mov	r4,r22
 10030f8:	800b883a 	mov	r5,r16
 10030fc:	d980a715 	stw	r6,668(sp)
 1003100:	1008be40 	call	1008be4 <__srefill_r>
 1003104:	d980a717 	ldw	r6,668(sp)
 1003108:	103f9c26 	beq	r2,zero,1002f7c <__svfscanf_r+0x950>
 100310c:	003f9f06 	br	1002f8c <__svfscanf_r+0x960>
 1003110:	a880400c 	andi	r2,r21,256
 1003114:	10000b26 	beq	r2,zero,1003144 <__svfscanf_r+0xb18>
 1003118:	00bfdfc4 	movi	r2,-129
 100311c:	a8aa703a 	and	r21,r21,r2
 1003120:	d8809e17 	ldw	r2,632(sp)
 1003124:	10800044 	addi	r2,r2,1
 1003128:	d8809e15 	stw	r2,632(sp)
 100312c:	303f8b26 	beq	r6,zero,1002f5c <__svfscanf_r+0x930>
 1003130:	d8c0a317 	ldw	r3,652(sp)
 1003134:	31bfffc4 	addi	r6,r6,-1
 1003138:	18c00044 	addi	r3,r3,1
 100313c:	d8c0a315 	stw	r3,652(sp)
 1003140:	003f8606 	br	1002f5c <__svfscanf_r+0x930>
 1003144:	e0803fcc 	andi	r2,fp,255
 1003148:	1080201c 	xori	r2,r2,128
 100314c:	10bfe004 	addi	r2,r2,-128
 1003150:	9085883a 	add	r2,r18,r2
 1003154:	103f8d1e 	bne	r2,zero,1002f8c <__svfscanf_r+0x960>
 1003158:	00bf9fc4 	movi	r2,-385
 100315c:	a8aa703a 	and	r21,r21,r2
 1003160:	003f7c06 	br	1002f54 <__svfscanf_r+0x928>
 1003164:	00800044 	movi	r2,1
 1003168:	90bf881e 	bne	r18,r2,1002f8c <__svfscanf_r+0x960>
 100316c:	04800084 	movi	r18,2
 1003170:	003f7806 	br	1002f54 <__svfscanf_r+0x928>
 1003174:	a8c1400c 	andi	r3,r21,1280
 1003178:	00810004 	movi	r2,1024
 100317c:	18800426 	beq	r3,r2,1003190 <__svfscanf_r+0xb64>
 1003180:	a884703a 	and	r2,r21,r2
 1003184:	103f8126 	beq	r2,zero,1002f8c <__svfscanf_r+0x960>
 1003188:	d8809e17 	ldw	r2,632(sp)
 100318c:	103f8326 	beq	r2,zero,1002f9c <__svfscanf_r+0x970>
 1003190:	a880800c 	andi	r2,r21,512
 1003194:	1000051e 	bne	r2,zero,10031ac <__svfscanf_r+0xb80>
 1003198:	d8c09e17 	ldw	r3,632(sp)
 100319c:	d9009f17 	ldw	r4,636(sp)
 10031a0:	ddc09c15 	stw	r23,624(sp)
 10031a4:	1907c83a 	sub	r3,r3,r4
 10031a8:	d8c09d15 	stw	r3,628(sp)
 10031ac:	00be7fc4 	movi	r2,-1537
 10031b0:	a884703a 	and	r2,r21,r2
 10031b4:	15406014 	ori	r21,r2,384
 10031b8:	d8009e15 	stw	zero,632(sp)
 10031bc:	003f6506 	br	1002f54 <__svfscanf_r+0x928>
 10031c0:	d900a617 	ldw	r4,664(sp)
 10031c4:	25fd4e2e 	bgeu	r4,r23,1002700 <__svfscanf_r+0xd4>
 10031c8:	bdffffc4 	addi	r23,r23,-1
 10031cc:	b9400007 	ldb	r5,0(r23)
 10031d0:	b009883a 	mov	r4,r22
 10031d4:	800d883a 	mov	r6,r16
 10031d8:	100b4540 	call	100b454 <_ungetc_r>
 10031dc:	d880a617 	ldw	r2,664(sp)
 10031e0:	15fff936 	bltu	r2,r23,10031c8 <__svfscanf_r+0xb9c>
 10031e4:	003d4606 	br	1002700 <__svfscanf_r+0xd4>
 10031e8:	d900a617 	ldw	r4,664(sp)
 10031ec:	25fd442e 	bgeu	r4,r23,1002700 <__svfscanf_r+0xd4>
 10031f0:	bdffffc4 	addi	r23,r23,-1
 10031f4:	b9400007 	ldb	r5,0(r23)
 10031f8:	b009883a 	mov	r4,r22
 10031fc:	800d883a 	mov	r6,r16
 1003200:	100b4540 	call	100b454 <_ungetc_r>
 1003204:	d8c0a617 	ldw	r3,664(sp)
 1003208:	1dfff936 	bltu	r3,r23,10031f0 <__svfscanf_r+0xbc4>
 100320c:	003d3c06 	br	1002700 <__svfscanf_r+0xd4>
 1003210:	e0c03fcc 	andi	r3,fp,255
 1003214:	18c0201c 	xori	r3,r3,128
 1003218:	18ffe004 	addi	r3,r3,-128
 100321c:	00800084 	movi	r2,2
 1003220:	18bf5a1e 	bne	r3,r2,1002f8c <__svfscanf_r+0x960>
 1003224:	070000c4 	movi	fp,3
 1003228:	003f4a06 	br	1002f54 <__svfscanf_r+0x928>
 100322c:	e0c03fcc 	andi	r3,fp,255
 1003230:	18c0201c 	xori	r3,r3,128
 1003234:	18ffe004 	addi	r3,r3,-128
 1003238:	1800231e 	bne	r3,zero,10032c8 <__svfscanf_r+0xc9c>
 100323c:	a8c1c00c 	andi	r3,r21,1792
 1003240:	0081c004 	movi	r2,1792
 1003244:	18bf511e 	bne	r3,r2,1002f8c <__svfscanf_r+0x960>
 1003248:	00be1fc4 	movi	r2,-1921
 100324c:	a8aa703a 	and	r21,r21,r2
 1003250:	07000044 	movi	fp,1
 1003254:	003f3f06 	br	1002f54 <__svfscanf_r+0x928>
 1003258:	9000101e 	bne	r18,zero,100329c <__svfscanf_r+0xc70>
 100325c:	a8c1c00c 	andi	r3,r21,1792
 1003260:	0081c004 	movi	r2,1792
 1003264:	18800926 	beq	r3,r2,100328c <__svfscanf_r+0xc60>
 1003268:	e0c03fcc 	andi	r3,fp,255
 100326c:	18c0201c 	xori	r3,r3,128
 1003270:	18ffe004 	addi	r3,r3,-128
 1003274:	00800044 	movi	r2,1
 1003278:	18800226 	beq	r3,r2,1003284 <__svfscanf_r+0xc58>
 100327c:	00800104 	movi	r2,4
 1003280:	18bf421e 	bne	r3,r2,1002f8c <__svfscanf_r+0x960>
 1003284:	e7000044 	addi	fp,fp,1
 1003288:	003f3206 	br	1002f54 <__svfscanf_r+0x928>
 100328c:	00be1fc4 	movi	r2,-1921
 1003290:	a8aa703a 	and	r21,r21,r2
 1003294:	04800044 	movi	r18,1
 1003298:	003f2e06 	br	1002f54 <__svfscanf_r+0x928>
 100329c:	00800084 	movi	r2,2
 10032a0:	90bff11e 	bne	r18,r2,1003268 <__svfscanf_r+0xc3c>
 10032a4:	048000c4 	movi	r18,3
 10032a8:	003f2a06 	br	1002f54 <__svfscanf_r+0x928>
 10032ac:	e0c03fcc 	andi	r3,fp,255
 10032b0:	18c0201c 	xori	r3,r3,128
 10032b4:	18ffe004 	addi	r3,r3,-128
 10032b8:	00800184 	movi	r2,6
 10032bc:	18bf331e 	bne	r3,r2,1002f8c <__svfscanf_r+0x960>
 10032c0:	070001c4 	movi	fp,7
 10032c4:	003f2306 	br	1002f54 <__svfscanf_r+0x928>
 10032c8:	008000c4 	movi	r2,3
 10032cc:	18bfed26 	beq	r3,r2,1003284 <__svfscanf_r+0xc58>
 10032d0:	00800144 	movi	r2,5
 10032d4:	18bfeb26 	beq	r3,r2,1003284 <__svfscanf_r+0xc58>
 10032d8:	003f2c06 	br	1002f8c <__svfscanf_r+0x960>
 10032dc:	d900a617 	ldw	r4,664(sp)
 10032e0:	25fd072e 	bgeu	r4,r23,1002700 <__svfscanf_r+0xd4>
 10032e4:	bdffffc4 	addi	r23,r23,-1
 10032e8:	b9400007 	ldb	r5,0(r23)
 10032ec:	b009883a 	mov	r4,r22
 10032f0:	800d883a 	mov	r6,r16
 10032f4:	100b4540 	call	100b454 <_ungetc_r>
 10032f8:	d880a617 	ldw	r2,664(sp)
 10032fc:	15fff936 	bltu	r2,r23,10032e4 <__svfscanf_r+0xcb8>
 1003300:	003cff06 	br	1002700 <__svfscanf_r+0xd4>
 1003304:	a880008c 	andi	r2,r21,2
 1003308:	10002026 	beq	r2,zero,100338c <__svfscanf_r+0xd60>
 100330c:	d900a417 	ldw	r4,656(sp)
 1003310:	20800017 	ldw	r2,0(r4)
 1003314:	25400104 	addi	r21,r4,4
 1003318:	10c00115 	stw	r3,4(r2)
 100331c:	14800015 	stw	r18,0(r2)
 1003320:	003f6806 	br	10030c4 <__svfscanf_r+0xa98>
 1003324:	d8c09c17 	ldw	r3,624(sp)
 1003328:	b009883a 	mov	r4,r22
 100332c:	000d883a 	mov	r6,zero
 1003330:	19400044 	addi	r5,r3,1
 1003334:	01c00284 	movi	r7,10
 1003338:	100a8b40 	call	100a8b4 <_strtol_r>
 100333c:	d9009d17 	ldw	r4,628(sp)
 1003340:	110dc83a 	sub	r6,r2,r4
 1003344:	d8c0a617 	ldw	r3,664(sp)
 1003348:	d9009c17 	ldw	r4,624(sp)
 100334c:	188054c4 	addi	r2,r3,339
 1003350:	20800236 	bltu	r4,r2,100335c <__svfscanf_r+0xd30>
 1003354:	18805484 	addi	r2,r3,338
 1003358:	d8809c15 	stw	r2,624(sp)
 100335c:	d9009c17 	ldw	r4,624(sp)
 1003360:	014040b4 	movhi	r5,258
 1003364:	29609004 	addi	r5,r5,-32192
 1003368:	1008f6c0 	call	1008f6c <sprintf>
 100336c:	003f4706 	br	100308c <__svfscanf_r+0xa60>
 1003370:	d8c09e17 	ldw	r3,632(sp)
 1003374:	d9009f17 	ldw	r4,636(sp)
 1003378:	1905c83a 	sub	r2,r3,r4
 100337c:	103f4326 	beq	r2,zero,100308c <__svfscanf_r+0xa60>
 1003380:	008dc83a 	sub	r6,zero,r2
 1003384:	ddc09c15 	stw	r23,624(sp)
 1003388:	003fee06 	br	1003344 <__svfscanf_r+0xd18>
 100338c:	d880a417 	ldw	r2,656(sp)
 1003390:	9009883a 	mov	r4,r18
 1003394:	180b883a 	mov	r5,r3
 1003398:	15c00017 	ldw	r23,0(r2)
 100339c:	15400104 	addi	r21,r2,4
 10033a0:	1008e040 	call	1008e04 <__isnand>
 10033a4:	10021c1e 	bne	r2,zero,1003c18 <__svfscanf_r+0x15ec>
 10033a8:	980b883a 	mov	r5,r19
 10033ac:	9009883a 	mov	r4,r18
 10033b0:	100e4780 	call	100e478 <__truncdfsf2>
 10033b4:	b8800015 	stw	r2,0(r23)
 10033b8:	003f4206 	br	10030c4 <__svfscanf_r+0xa98>
 10033bc:	e0c03fcc 	andi	r3,fp,255
 10033c0:	18c0201c 	xori	r3,r3,128
 10033c4:	18ffe004 	addi	r3,r3,-128
 10033c8:	008001c4 	movi	r2,7
 10033cc:	18beef1e 	bne	r3,r2,1002f8c <__svfscanf_r+0x960>
 10033d0:	07000204 	movi	fp,8
 10033d4:	003edf06 	br	1002f54 <__svfscanf_r+0x928>
 10033d8:	d900a317 	ldw	r4,652(sp)
 10033dc:	208002a4 	muli	r2,r4,10
 10033e0:	1145883a 	add	r2,r2,r5
 10033e4:	10bff404 	addi	r2,r2,-48
 10033e8:	d880a315 	stw	r2,652(sp)
 10033ec:	003ceb06 	br	100279c <__svfscanf_r+0x170>
 10033f0:	9880040c 	andi	r2,r19,16
 10033f4:	10001426 	beq	r2,zero,1003448 <__svfscanf_r+0xe1c>
 10033f8:	0027883a 	mov	r19,zero
 10033fc:	00000906 	br	1003424 <__svfscanf_r+0xdf8>
 1003400:	80c00117 	ldw	r3,4(r16)
 1003404:	d880a317 	ldw	r2,652(sp)
 1003408:	29800044 	addi	r6,r5,1
 100340c:	18ffffc4 	addi	r3,r3,-1
 1003410:	9cc00044 	addi	r19,r19,1
 1003414:	81800015 	stw	r6,0(r16)
 1003418:	80c00115 	stw	r3,4(r16)
 100341c:	14fdf726 	beq	r2,r19,1002bfc <__svfscanf_r+0x5d0>
 1003420:	00c02c0e 	bge	zero,r3,10034d4 <__svfscanf_r+0xea8>
 1003424:	81400017 	ldw	r5,0(r16)
 1003428:	90800017 	ldw	r2,0(r18)
 100342c:	28c00003 	ldbu	r3,0(r5)
 1003430:	1887883a 	add	r3,r3,r2
 1003434:	19000003 	ldbu	r4,0(r3)
 1003438:	2100020c 	andi	r4,r4,8
 100343c:	203ff026 	beq	r4,zero,1003400 <__svfscanf_r+0xdd4>
 1003440:	8ce3883a 	add	r17,r17,r19
 1003444:	003c8c06 	br	1002678 <__svfscanf_r+0x4c>
 1003448:	d8c0a417 	ldw	r3,656(sp)
 100344c:	1d400017 	ldw	r21,0(r3)
 1003450:	a827883a 	mov	r19,r21
 1003454:	00000e06 	br	1003490 <__svfscanf_r+0xe64>
 1003458:	80800117 	ldw	r2,4(r16)
 100345c:	d900a317 	ldw	r4,652(sp)
 1003460:	29800044 	addi	r6,r5,1
 1003464:	10ffffc4 	addi	r3,r2,-1
 1003468:	213fffc4 	addi	r4,r4,-1
 100346c:	d900a315 	stw	r4,652(sp)
 1003470:	80c00115 	stw	r3,4(r16)
 1003474:	28800003 	ldbu	r2,0(r5)
 1003478:	98800005 	stb	r2,0(r19)
 100347c:	81800015 	stw	r6,0(r16)
 1003480:	9cc00044 	addi	r19,r19,1
 1003484:	20000926 	beq	r4,zero,10034ac <__svfscanf_r+0xe80>
 1003488:	80800117 	ldw	r2,4(r16)
 100348c:	0080170e 	bge	zero,r2,10034ec <__svfscanf_r+0xec0>
 1003490:	81400017 	ldw	r5,0(r16)
 1003494:	90800017 	ldw	r2,0(r18)
 1003498:	28c00003 	ldbu	r3,0(r5)
 100349c:	1887883a 	add	r3,r3,r2
 10034a0:	19000003 	ldbu	r4,0(r3)
 10034a4:	2100020c 	andi	r4,r4,8
 10034a8:	203feb26 	beq	r4,zero,1003458 <__svfscanf_r+0xe2c>
 10034ac:	9d45c83a 	sub	r2,r19,r21
 10034b0:	d8c0a217 	ldw	r3,648(sp)
 10034b4:	88a3883a 	add	r17,r17,r2
 10034b8:	d880a417 	ldw	r2,656(sp)
 10034bc:	18c00044 	addi	r3,r3,1
 10034c0:	d8c0a215 	stw	r3,648(sp)
 10034c4:	10800104 	addi	r2,r2,4
 10034c8:	d880a415 	stw	r2,656(sp)
 10034cc:	98000005 	stb	zero,0(r19)
 10034d0:	003c6906 	br	1002678 <__svfscanf_r+0x4c>
 10034d4:	b009883a 	mov	r4,r22
 10034d8:	800b883a 	mov	r5,r16
 10034dc:	1008be40 	call	1008be4 <__srefill_r>
 10034e0:	103fd026 	beq	r2,zero,1003424 <__svfscanf_r+0xdf8>
 10034e4:	8ce3883a 	add	r17,r17,r19
 10034e8:	003c6306 	br	1002678 <__svfscanf_r+0x4c>
 10034ec:	b009883a 	mov	r4,r22
 10034f0:	800b883a 	mov	r5,r16
 10034f4:	1008be40 	call	1008be4 <__srefill_r>
 10034f8:	103fe526 	beq	r2,zero,1003490 <__svfscanf_r+0xe64>
 10034fc:	003feb06 	br	10034ac <__svfscanf_r+0xe80>
 1003500:	d900a317 	ldw	r4,652(sp)
 1003504:	9d41e014 	ori	r21,r19,1920
 1003508:	2000821e 	bne	r4,zero,1003714 <__svfscanf_r+0x10e8>
 100350c:	d8c04404 	addi	r3,sp,272
 1003510:	182f883a 	mov	r23,r3
 1003514:	0039883a 	mov	fp,zero
 1003518:	d8c0a615 	stw	r3,664(sp)
 100351c:	d8009c15 	stw	zero,624(sp)
 1003520:	d8009d15 	stw	zero,628(sp)
 1003524:	d8009f15 	stw	zero,636(sp)
 1003528:	d8009e15 	stw	zero,632(sp)
 100352c:	003e9e06 	br	1002fa8 <__svfscanf_r+0x97c>
 1003530:	d900a317 	ldw	r4,652(sp)
 1003534:	9c836014 	ori	r18,r19,3456
 1003538:	2000161e 	bne	r4,zero,1003594 <__svfscanf_r+0xf68>
 100353c:	d8804404 	addi	r2,sp,272
 1003540:	d880a615 	stw	r2,664(sp)
 1003544:	002f883a 	mov	r23,zero
 1003548:	1027883a 	mov	r19,r2
 100354c:	9080400c 	andi	r2,r18,256
 1003550:	10000926 	beq	r2,zero,1003578 <__svfscanf_r+0xf4c>
 1003554:	d8c0a617 	ldw	r3,664(sp)
 1003558:	1cc0052e 	bgeu	r3,r19,1003570 <__svfscanf_r+0xf44>
 100355c:	9cffffc4 	addi	r19,r19,-1
 1003560:	99400007 	ldb	r5,0(r19)
 1003564:	b009883a 	mov	r4,r22
 1003568:	800d883a 	mov	r6,r16
 100356c:	100b4540 	call	100b454 <_ungetc_r>
 1003570:	d900a617 	ldw	r4,664(sp)
 1003574:	24fc6226 	beq	r4,r19,1002700 <__svfscanf_r+0xd4>
 1003578:	9080040c 	andi	r2,r18,16
 100357c:	10006726 	beq	r2,zero,100371c <__svfscanf_r+0x10f0>
 1003580:	d8c0a617 	ldw	r3,664(sp)
 1003584:	98c5c83a 	sub	r2,r19,r3
 1003588:	b885883a 	add	r2,r23,r2
 100358c:	88a3883a 	add	r17,r17,r2
 1003590:	003c3906 	br	1002678 <__svfscanf_r+0x4c>
 1003594:	002b883a 	mov	r21,zero
 1003598:	d8c04404 	addi	r3,sp,272
 100359c:	d8c0a615 	stw	r3,664(sp)
 10035a0:	002f883a 	mov	r23,zero
 10035a4:	1827883a 	mov	r19,r3
 10035a8:	81800017 	ldw	r6,0(r16)
 10035ac:	00c01344 	movi	r3,77
 10035b0:	31400003 	ldbu	r5,0(r6)
 10035b4:	28bff544 	addi	r2,r5,-43
 10035b8:	10803fcc 	andi	r2,r2,255
 10035bc:	18bfe336 	bltu	r3,r2,100354c <__svfscanf_r+0xf20>
 10035c0:	1085883a 	add	r2,r2,r2
 10035c4:	1085883a 	add	r2,r2,r2
 10035c8:	00c04034 	movhi	r3,256
 10035cc:	18cd7704 	addi	r3,r3,13788
 10035d0:	10c5883a 	add	r2,r2,r3
 10035d4:	11000017 	ldw	r4,0(r2)
 10035d8:	2000683a 	jmp	r4
 10035dc:	01003770 	cmpltui	r4,zero,221
 10035e0:	0100354c 	andi	r4,zero,213
 10035e4:	01003770 	cmpltui	r4,zero,221
 10035e8:	0100354c 	andi	r4,zero,213
 10035ec:	0100354c 	andi	r4,zero,213
 10035f0:	010037b4 	movhi	r4,222
 10035f4:	010038b0 	cmpltui	r4,zero,226
 10035f8:	010038b0 	cmpltui	r4,zero,226
 10035fc:	010038b0 	cmpltui	r4,zero,226
 1003600:	010038b0 	cmpltui	r4,zero,226
 1003604:	010038b0 	cmpltui	r4,zero,226
 1003608:	010038b0 	cmpltui	r4,zero,226
 100360c:	010038b0 	cmpltui	r4,zero,226
 1003610:	010038d8 	cmpnei	r4,zero,227
 1003614:	010038d8 	cmpnei	r4,zero,227
 1003618:	0100354c 	andi	r4,zero,213
 100361c:	0100354c 	andi	r4,zero,213
 1003620:	0100354c 	andi	r4,zero,213
 1003624:	0100354c 	andi	r4,zero,213
 1003628:	0100354c 	andi	r4,zero,213
 100362c:	0100354c 	andi	r4,zero,213
 1003630:	0100354c 	andi	r4,zero,213
 1003634:	01003908 	cmpgei	r4,zero,228
 1003638:	01003908 	cmpgei	r4,zero,228
 100363c:	01003908 	cmpgei	r4,zero,228
 1003640:	01003908 	cmpgei	r4,zero,228
 1003644:	01003908 	cmpgei	r4,zero,228
 1003648:	01003908 	cmpgei	r4,zero,228
 100364c:	0100354c 	andi	r4,zero,213
 1003650:	0100354c 	andi	r4,zero,213
 1003654:	0100354c 	andi	r4,zero,213
 1003658:	0100354c 	andi	r4,zero,213
 100365c:	0100354c 	andi	r4,zero,213
 1003660:	0100354c 	andi	r4,zero,213
 1003664:	0100354c 	andi	r4,zero,213
 1003668:	0100354c 	andi	r4,zero,213
 100366c:	0100354c 	andi	r4,zero,213
 1003670:	0100354c 	andi	r4,zero,213
 1003674:	0100354c 	andi	r4,zero,213
 1003678:	0100354c 	andi	r4,zero,213
 100367c:	0100354c 	andi	r4,zero,213
 1003680:	0100354c 	andi	r4,zero,213
 1003684:	0100354c 	andi	r4,zero,213
 1003688:	0100354c 	andi	r4,zero,213
 100368c:	0100354c 	andi	r4,zero,213
 1003690:	01003918 	cmpnei	r4,zero,228
 1003694:	0100354c 	andi	r4,zero,213
 1003698:	0100354c 	andi	r4,zero,213
 100369c:	0100354c 	andi	r4,zero,213
 10036a0:	0100354c 	andi	r4,zero,213
 10036a4:	0100354c 	andi	r4,zero,213
 10036a8:	0100354c 	andi	r4,zero,213
 10036ac:	0100354c 	andi	r4,zero,213
 10036b0:	0100354c 	andi	r4,zero,213
 10036b4:	01003908 	cmpgei	r4,zero,228
 10036b8:	01003908 	cmpgei	r4,zero,228
 10036bc:	01003908 	cmpgei	r4,zero,228
 10036c0:	01003908 	cmpgei	r4,zero,228
 10036c4:	01003908 	cmpgei	r4,zero,228
 10036c8:	01003908 	cmpgei	r4,zero,228
 10036cc:	0100354c 	andi	r4,zero,213
 10036d0:	0100354c 	andi	r4,zero,213
 10036d4:	0100354c 	andi	r4,zero,213
 10036d8:	0100354c 	andi	r4,zero,213
 10036dc:	0100354c 	andi	r4,zero,213
 10036e0:	0100354c 	andi	r4,zero,213
 10036e4:	0100354c 	andi	r4,zero,213
 10036e8:	0100354c 	andi	r4,zero,213
 10036ec:	0100354c 	andi	r4,zero,213
 10036f0:	0100354c 	andi	r4,zero,213
 10036f4:	0100354c 	andi	r4,zero,213
 10036f8:	0100354c 	andi	r4,zero,213
 10036fc:	0100354c 	andi	r4,zero,213
 1003700:	0100354c 	andi	r4,zero,213
 1003704:	0100354c 	andi	r4,zero,213
 1003708:	0100354c 	andi	r4,zero,213
 100370c:	0100354c 	andi	r4,zero,213
 1003710:	01003918 	cmpnei	r4,zero,228
 1003714:	000d883a 	mov	r6,zero
 1003718:	003d9006 	br	1002d5c <__svfscanf_r+0x730>
 100371c:	98000005 	stb	zero,0(r19)
 1003720:	d8c0a017 	ldw	r3,640(sp)
 1003724:	d940a617 	ldw	r5,664(sp)
 1003728:	d9c0a117 	ldw	r7,644(sp)
 100372c:	b009883a 	mov	r4,r22
 1003730:	000d883a 	mov	r6,zero
 1003734:	183ee83a 	callr	r3
 1003738:	1007883a 	mov	r3,r2
 100373c:	9080080c 	andi	r2,r18,32
 1003740:	10004d1e 	bne	r2,zero,1003878 <__svfscanf_r+0x124c>
 1003744:	9080010c 	andi	r2,r18,4
 1003748:	10003426 	beq	r2,zero,100381c <__svfscanf_r+0x11f0>
 100374c:	d900a417 	ldw	r4,656(sp)
 1003750:	20800017 	ldw	r2,0(r4)
 1003754:	21000104 	addi	r4,r4,4
 1003758:	d900a415 	stw	r4,656(sp)
 100375c:	10c0000d 	sth	r3,0(r2)
 1003760:	d880a217 	ldw	r2,648(sp)
 1003764:	10800044 	addi	r2,r2,1
 1003768:	d880a215 	stw	r2,648(sp)
 100376c:	003f8406 	br	1003580 <__svfscanf_r+0xf54>
 1003770:	9080200c 	andi	r2,r18,128
 1003774:	103f7526 	beq	r2,zero,100354c <__svfscanf_r+0xf20>
 1003778:	00bfdfc4 	movi	r2,-129
 100377c:	90a4703a 	and	r18,r18,r2
 1003780:	99400005 	stb	r5,0(r19)
 1003784:	9cc00044 	addi	r19,r19,1
 1003788:	80c00117 	ldw	r3,4(r16)
 100378c:	18ffffc4 	addi	r3,r3,-1
 1003790:	80c00115 	stw	r3,4(r16)
 1003794:	00c0130e 	bge	zero,r3,10037e4 <__svfscanf_r+0x11b8>
 1003798:	31800044 	addi	r6,r6,1
 100379c:	81800015 	stw	r6,0(r16)
 10037a0:	d880a317 	ldw	r2,652(sp)
 10037a4:	10bfffc4 	addi	r2,r2,-1
 10037a8:	d880a315 	stw	r2,652(sp)
 10037ac:	103f7e1e 	bne	r2,zero,10035a8 <__svfscanf_r+0xf7c>
 10037b0:	003f6606 	br	100354c <__svfscanf_r+0xf20>
 10037b4:	9082000c 	andi	r2,r18,2048
 10037b8:	103ff126 	beq	r2,zero,1003780 <__svfscanf_r+0x1154>
 10037bc:	d8c0a117 	ldw	r3,644(sp)
 10037c0:	1800031e 	bne	r3,zero,10037d0 <__svfscanf_r+0x11a4>
 10037c4:	01000204 	movi	r4,8
 10037c8:	94808014 	ori	r18,r18,512
 10037cc:	d900a115 	stw	r4,644(sp)
 10037d0:	9081000c 	andi	r2,r18,1024
 10037d4:	10000826 	beq	r2,zero,10037f8 <__svfscanf_r+0x11cc>
 10037d8:	00be9fc4 	movi	r2,-1409
 10037dc:	90a4703a 	and	r18,r18,r2
 10037e0:	003fe706 	br	1003780 <__svfscanf_r+0x1154>
 10037e4:	b009883a 	mov	r4,r22
 10037e8:	800b883a 	mov	r5,r16
 10037ec:	1008be40 	call	1008be4 <__srefill_r>
 10037f0:	103feb26 	beq	r2,zero,10037a0 <__svfscanf_r+0x1174>
 10037f4:	003f5506 	br	100354c <__svfscanf_r+0xf20>
 10037f8:	a8000426 	beq	r21,zero,100380c <__svfscanf_r+0x11e0>
 10037fc:	d880a317 	ldw	r2,652(sp)
 1003800:	ad7fffc4 	addi	r21,r21,-1
 1003804:	10800044 	addi	r2,r2,1
 1003808:	d880a315 	stw	r2,652(sp)
 100380c:	00bf1fc4 	movi	r2,-897
 1003810:	90a4703a 	and	r18,r18,r2
 1003814:	bdc00044 	addi	r23,r23,1
 1003818:	003fdb06 	br	1003788 <__svfscanf_r+0x115c>
 100381c:	9080004c 	andi	r2,r18,1
 1003820:	1005003a 	cmpeq	r2,r2,zero
 1003824:	10001426 	beq	r2,zero,1003878 <__svfscanf_r+0x124c>
 1003828:	9080008c 	andi	r2,r18,2
 100382c:	10001226 	beq	r2,zero,1003878 <__svfscanf_r+0x124c>
 1003830:	d8c0a017 	ldw	r3,640(sp)
 1003834:	00804074 	movhi	r2,257
 1003838:	10ab8d04 	addi	r2,r2,-20940
 100383c:	18801426 	beq	r3,r2,1003890 <__svfscanf_r+0x1264>
 1003840:	d9c0a117 	ldw	r7,644(sp)
 1003844:	d940a617 	ldw	r5,664(sp)
 1003848:	000d883a 	mov	r6,zero
 100384c:	b009883a 	mov	r4,r22
 1003850:	100ab1c0 	call	100ab1c <_strtoll_r>
 1003854:	100d883a 	mov	r6,r2
 1003858:	180f883a 	mov	r7,r3
 100385c:	d900a417 	ldw	r4,656(sp)
 1003860:	20800017 	ldw	r2,0(r4)
 1003864:	21000104 	addi	r4,r4,4
 1003868:	d900a415 	stw	r4,656(sp)
 100386c:	11c00115 	stw	r7,4(r2)
 1003870:	11800015 	stw	r6,0(r2)
 1003874:	003fba06 	br	1003760 <__svfscanf_r+0x1134>
 1003878:	d900a417 	ldw	r4,656(sp)
 100387c:	20800017 	ldw	r2,0(r4)
 1003880:	21000104 	addi	r4,r4,4
 1003884:	d900a415 	stw	r4,656(sp)
 1003888:	10c00015 	stw	r3,0(r2)
 100388c:	003fb406 	br	1003760 <__svfscanf_r+0x1134>
 1003890:	d9c0a117 	ldw	r7,644(sp)
 1003894:	d940a617 	ldw	r5,664(sp)
 1003898:	000d883a 	mov	r6,zero
 100389c:	b009883a 	mov	r4,r22
 10038a0:	100b0880 	call	100b088 <_strtoull_r>
 10038a4:	100d883a 	mov	r6,r2
 10038a8:	180f883a 	mov	r7,r3
 10038ac:	003feb06 	br	100385c <__svfscanf_r+0x1230>
 10038b0:	d8c0a117 	ldw	r3,644(sp)
 10038b4:	18c5883a 	add	r2,r3,r3
 10038b8:	00c040b4 	movhi	r3,258
 10038bc:	18e09184 	addi	r3,r3,-32186
 10038c0:	10c5883a 	add	r2,r2,r3
 10038c4:	1080000f 	ldh	r2,0(r2)
 10038c8:	00fd1fc4 	movi	r3,-2945
 10038cc:	90e4703a 	and	r18,r18,r3
 10038d0:	d880a115 	stw	r2,644(sp)
 10038d4:	003faa06 	br	1003780 <__svfscanf_r+0x1154>
 10038d8:	d900a117 	ldw	r4,644(sp)
 10038dc:	00c040b4 	movhi	r3,258
 10038e0:	18e09184 	addi	r3,r3,-32186
 10038e4:	2105883a 	add	r2,r4,r4
 10038e8:	10c5883a 	add	r2,r2,r3
 10038ec:	1080000f 	ldh	r2,0(r2)
 10038f0:	00c00204 	movi	r3,8
 10038f4:	d880a115 	stw	r2,644(sp)
 10038f8:	18bf140e 	bge	r3,r2,100354c <__svfscanf_r+0xf20>
 10038fc:	00bd1fc4 	movi	r2,-2945
 1003900:	90a4703a 	and	r18,r18,r2
 1003904:	003f9e06 	br	1003780 <__svfscanf_r+0x1154>
 1003908:	d8c0a117 	ldw	r3,644(sp)
 100390c:	00800284 	movi	r2,10
 1003910:	10fffa16 	blt	r2,r3,10038fc <__svfscanf_r+0x12d0>
 1003914:	003f0d06 	br	100354c <__svfscanf_r+0xf20>
 1003918:	90c1800c 	andi	r3,r18,1536
 100391c:	00808004 	movi	r2,512
 1003920:	18bf0a1e 	bne	r3,r2,100354c <__svfscanf_r+0xf20>
 1003924:	00bf7fc4 	movi	r2,-513
 1003928:	9084703a 	and	r2,r18,r2
 100392c:	01000404 	movi	r4,16
 1003930:	14814014 	ori	r18,r2,1280
 1003934:	d900a115 	stw	r4,644(sp)
 1003938:	003f9106 	br	1003780 <__svfscanf_r+0x1154>
 100393c:	d880a417 	ldw	r2,656(sp)
 1003940:	dd400404 	addi	r21,sp,16
 1003944:	14800017 	ldw	r18,0(r2)
 1003948:	9027883a 	mov	r19,r18
 100394c:	81000017 	ldw	r4,0(r16)
 1003950:	20800003 	ldbu	r2,0(r4)
 1003954:	a885883a 	add	r2,r21,r2
 1003958:	10c00007 	ldb	r3,0(r2)
 100395c:	18001426 	beq	r3,zero,10039b0 <__svfscanf_r+0x1384>
 1003960:	d8c0a317 	ldw	r3,652(sp)
 1003964:	80800117 	ldw	r2,4(r16)
 1003968:	21800044 	addi	r6,r4,1
 100396c:	18ffffc4 	addi	r3,r3,-1
 1003970:	d8c0a315 	stw	r3,652(sp)
 1003974:	10ffffc4 	addi	r3,r2,-1
 1003978:	80c00115 	stw	r3,4(r16)
 100397c:	20800003 	ldbu	r2,0(r4)
 1003980:	90800005 	stb	r2,0(r18)
 1003984:	d900a317 	ldw	r4,652(sp)
 1003988:	81800015 	stw	r6,0(r16)
 100398c:	94800044 	addi	r18,r18,1
 1003990:	20000726 	beq	r4,zero,10039b0 <__svfscanf_r+0x1384>
 1003994:	80800117 	ldw	r2,4(r16)
 1003998:	00bfec16 	blt	zero,r2,100394c <__svfscanf_r+0x1320>
 100399c:	b009883a 	mov	r4,r22
 10039a0:	800b883a 	mov	r5,r16
 10039a4:	1008be40 	call	1008be4 <__srefill_r>
 10039a8:	103fe826 	beq	r2,zero,100394c <__svfscanf_r+0x1320>
 10039ac:	9cbb7426 	beq	r19,r18,1002780 <__svfscanf_r+0x154>
 10039b0:	94e7c83a 	sub	r19,r18,r19
 10039b4:	983b5226 	beq	r19,zero,1002700 <__svfscanf_r+0xd4>
 10039b8:	90000005 	stb	zero,0(r18)
 10039bc:	d880a417 	ldw	r2,656(sp)
 10039c0:	d8c0a217 	ldw	r3,648(sp)
 10039c4:	8ce3883a 	add	r17,r17,r19
 10039c8:	10800104 	addi	r2,r2,4
 10039cc:	18c00044 	addi	r3,r3,1
 10039d0:	d880a415 	stw	r2,656(sp)
 10039d4:	d8c0a215 	stw	r3,648(sp)
 10039d8:	003b2706 	br	1002678 <__svfscanf_r+0x4c>
 10039dc:	9cc00414 	ori	r19,r19,16
 10039e0:	003b6e06 	br	100279c <__svfscanf_r+0x170>
 10039e4:	00c00404 	movi	r3,16
 10039e8:	01004074 	movhi	r4,257
 10039ec:	212b8d04 	addi	r4,r4,-20940
 10039f0:	9cc08014 	ori	r19,r19,512
 10039f4:	054000c4 	movi	r21,3
 10039f8:	d8c0a115 	stw	r3,644(sp)
 10039fc:	d900a015 	stw	r4,640(sp)
 1003a00:	003bf806 	br	10029e4 <__svfscanf_r+0x3b8>
 1003a04:	9880040c 	andi	r2,r19,16
 1003a08:	10001926 	beq	r2,zero,1003a70 <__svfscanf_r+0x1444>
 1003a0c:	0027883a 	mov	r19,zero
 1003a10:	00000b06 	br	1003a40 <__svfscanf_r+0x1414>
 1003a14:	80800017 	ldw	r2,0(r16)
 1003a18:	b009883a 	mov	r4,r22
 1003a1c:	800b883a 	mov	r5,r16
 1003a20:	148d883a 	add	r6,r2,r18
 1003a24:	81800015 	stw	r6,0(r16)
 1003a28:	9ca7883a 	add	r19,r19,r18
 1003a2c:	1008be40 	call	1008be4 <__srefill_r>
 1003a30:	103c711e 	bne	r2,zero,1002bf8 <__svfscanf_r+0x5cc>
 1003a34:	d900a317 	ldw	r4,652(sp)
 1003a38:	2489c83a 	sub	r4,r4,r18
 1003a3c:	d900a315 	stw	r4,652(sp)
 1003a40:	84800117 	ldw	r18,4(r16)
 1003a44:	d8c0a317 	ldw	r3,652(sp)
 1003a48:	90fff216 	blt	r18,r3,1003a14 <__svfscanf_r+0x13e8>
 1003a4c:	d900a317 	ldw	r4,652(sp)
 1003a50:	80800017 	ldw	r2,0(r16)
 1003a54:	9927883a 	add	r19,r19,r4
 1003a58:	9107c83a 	sub	r3,r18,r4
 1003a5c:	110d883a 	add	r6,r2,r4
 1003a60:	8ce3883a 	add	r17,r17,r19
 1003a64:	80c00115 	stw	r3,4(r16)
 1003a68:	81800015 	stw	r6,0(r16)
 1003a6c:	003b0206 	br	1002678 <__svfscanf_r+0x4c>
 1003a70:	d880a417 	ldw	r2,656(sp)
 1003a74:	d980a317 	ldw	r6,652(sp)
 1003a78:	01400044 	movi	r5,1
 1003a7c:	11000017 	ldw	r4,0(r2)
 1003a80:	800f883a 	mov	r7,r16
 1003a84:	1005da00 	call	1005da0 <fread>
 1003a88:	103b3d26 	beq	r2,zero,1002780 <__svfscanf_r+0x154>
 1003a8c:	d8c0a417 	ldw	r3,656(sp)
 1003a90:	d900a217 	ldw	r4,648(sp)
 1003a94:	88a3883a 	add	r17,r17,r2
 1003a98:	18c00104 	addi	r3,r3,4
 1003a9c:	21000044 	addi	r4,r4,1
 1003aa0:	d8c0a415 	stw	r3,656(sp)
 1003aa4:	d900a215 	stw	r4,648(sp)
 1003aa8:	003af306 	br	1002678 <__svfscanf_r+0x4c>
 1003aac:	8080030b 	ldhu	r2,12(r16)
 1003ab0:	1080100c 	andi	r2,r2,64
 1003ab4:	103b1226 	beq	r2,zero,1002700 <__svfscanf_r+0xd4>
 1003ab8:	003b3306 	br	1002788 <__svfscanf_r+0x15c>
 1003abc:	983b1026 	beq	r19,zero,1002700 <__svfscanf_r+0xd4>
 1003ac0:	8ce3883a 	add	r17,r17,r19
 1003ac4:	003aec06 	br	1002678 <__svfscanf_r+0x4c>
 1003ac8:	983c9626 	beq	r19,zero,1002d24 <__svfscanf_r+0x6f8>
 1003acc:	9cffffc4 	addi	r19,r19,-1
 1003ad0:	d8c04404 	addi	r3,sp,272
 1003ad4:	1cc5883a 	add	r2,r3,r19
 1003ad8:	11400003 	ldbu	r5,0(r2)
 1003adc:	b009883a 	mov	r4,r22
 1003ae0:	800d883a 	mov	r6,r16
 1003ae4:	100b4540 	call	100b454 <_ungetc_r>
 1003ae8:	003ff706 	br	1003ac8 <__svfscanf_r+0x149c>
 1003aec:	00bfff84 	movi	r2,-2
 1003af0:	18bc7a1e 	bne	r3,r2,1002cdc <__svfscanf_r+0x6b0>
 1003af4:	003c8406 	br	1002d08 <__svfscanf_r+0x6dc>
 1003af8:	d900a417 	ldw	r4,656(sp)
 1003afc:	25400017 	ldw	r21,0(r4)
 1003b00:	21000104 	addi	r4,r4,4
 1003b04:	d900a415 	stw	r4,656(sp)
 1003b08:	003c4a06 	br	1002c34 <__svfscanf_r+0x608>
 1003b0c:	00bfff84 	movi	r2,-2
 1003b10:	18bc0f1e 	bne	r3,r2,1002b50 <__svfscanf_r+0x524>
 1003b14:	003c1506 	br	1002b6c <__svfscanf_r+0x540>
 1003b18:	b009883a 	mov	r4,r22
 1003b1c:	800b883a 	mov	r5,r16
 1003b20:	1008be40 	call	1008be4 <__srefill_r>
 1003b24:	103c1326 	beq	r2,zero,1002b74 <__svfscanf_r+0x548>
 1003b28:	903b151e 	bne	r18,zero,1002780 <__svfscanf_r+0x154>
 1003b2c:	a83ad21e 	bne	r21,zero,1002678 <__svfscanf_r+0x4c>
 1003b30:	d880a217 	ldw	r2,648(sp)
 1003b34:	10800044 	addi	r2,r2,1
 1003b38:	d880a215 	stw	r2,648(sp)
 1003b3c:	003ace06 	br	1002678 <__svfscanf_r+0x4c>
 1003b40:	0027883a 	mov	r19,zero
 1003b44:	003bdd06 	br	1002abc <__svfscanf_r+0x490>
 1003b48:	9cc00114 	ori	r19,r19,4
 1003b4c:	003b1306 	br	100279c <__svfscanf_r+0x170>
 1003b50:	05400104 	movi	r21,4
 1003b54:	003ba306 	br	10029e4 <__svfscanf_r+0x3b8>
 1003b58:	9cc00054 	ori	r19,r19,1
 1003b5c:	00804074 	movhi	r2,257
 1003b60:	10aa2d04 	addi	r2,r2,-22348
 1003b64:	00c00284 	movi	r3,10
 1003b68:	054000c4 	movi	r21,3
 1003b6c:	d880a015 	stw	r2,640(sp)
 1003b70:	d8c0a115 	stw	r3,644(sp)
 1003b74:	003b9b06 	br	10029e4 <__svfscanf_r+0x3b8>
 1003b78:	9cc01014 	ori	r19,r19,64
 1003b7c:	002b883a 	mov	r21,zero
 1003b80:	003b9806 	br	10029e4 <__svfscanf_r+0x3b8>
 1003b84:	a00b883a 	mov	r5,r20
 1003b88:	d9000404 	addi	r4,sp,16
 1003b8c:	1008ea40 	call	1008ea4 <__sccl>
 1003b90:	1029883a 	mov	r20,r2
 1003b94:	9cc01014 	ori	r19,r19,64
 1003b98:	05400044 	movi	r21,1
 1003b9c:	003b9106 	br	10029e4 <__svfscanf_r+0x3b8>
 1003ba0:	9cc00054 	ori	r19,r19,1
 1003ba4:	00800204 	movi	r2,8
 1003ba8:	00c04074 	movhi	r3,257
 1003bac:	18eb8d04 	addi	r3,r3,-20940
 1003bb0:	054000c4 	movi	r21,3
 1003bb4:	d880a115 	stw	r2,644(sp)
 1003bb8:	d8c0a015 	stw	r3,640(sp)
 1003bbc:	003b8906 	br	10029e4 <__svfscanf_r+0x3b8>
 1003bc0:	9880040c 	andi	r2,r19,16
 1003bc4:	103aac1e 	bne	r2,zero,1002678 <__svfscanf_r+0x4c>
 1003bc8:	9880010c 	andi	r2,r19,4
 1003bcc:	10002426 	beq	r2,zero,1003c60 <__svfscanf_r+0x1634>
 1003bd0:	d900a417 	ldw	r4,656(sp)
 1003bd4:	20800017 	ldw	r2,0(r4)
 1003bd8:	21000104 	addi	r4,r4,4
 1003bdc:	d900a415 	stw	r4,656(sp)
 1003be0:	1440000d 	sth	r17,0(r2)
 1003be4:	003aa406 	br	1002678 <__svfscanf_r+0x4c>
 1003be8:	9cc00094 	ori	r19,r19,2
 1003bec:	003aeb06 	br	100279c <__svfscanf_r+0x170>
 1003bf0:	05400084 	movi	r21,2
 1003bf4:	003b7b06 	br	10029e4 <__svfscanf_r+0x3b8>
 1003bf8:	00800404 	movi	r2,16
 1003bfc:	00c04074 	movhi	r3,257
 1003c00:	18eb8d04 	addi	r3,r3,-20940
 1003c04:	9cc08814 	ori	r19,r19,544
 1003c08:	054000c4 	movi	r21,3
 1003c0c:	d880a115 	stw	r2,644(sp)
 1003c10:	d8c0a015 	stw	r3,640(sp)
 1003c14:	003b7306 	br	10029e4 <__svfscanf_r+0x3b8>
 1003c18:	0009883a 	mov	r4,zero
 1003c1c:	1008f640 	call	1008f64 <nanf>
 1003c20:	b8800015 	stw	r2,0(r23)
 1003c24:	003d2706 	br	10030c4 <__svfscanf_r+0xa98>
 1003c28:	a0c00007 	ldb	r3,0(r20)
 1003c2c:	00801b04 	movi	r2,108
 1003c30:	18800826 	beq	r3,r2,1003c54 <__svfscanf_r+0x1628>
 1003c34:	9cc00054 	ori	r19,r19,1
 1003c38:	003ad806 	br	100279c <__svfscanf_r+0x170>
 1003c3c:	01004074 	movhi	r4,257
 1003c40:	212a2d04 	addi	r4,r4,-22348
 1003c44:	054000c4 	movi	r21,3
 1003c48:	d900a015 	stw	r4,640(sp)
 1003c4c:	d800a115 	stw	zero,644(sp)
 1003c50:	003b6406 	br	10029e4 <__svfscanf_r+0x3b8>
 1003c54:	a5000044 	addi	r20,r20,1
 1003c58:	9cc00094 	ori	r19,r19,2
 1003c5c:	003acf06 	br	100279c <__svfscanf_r+0x170>
 1003c60:	9880004c 	andi	r2,r19,1
 1003c64:	1005003a 	cmpeq	r2,r2,zero
 1003c68:	10000a26 	beq	r2,zero,1003c94 <__svfscanf_r+0x1668>
 1003c6c:	9880008c 	andi	r2,r19,2
 1003c70:	10000826 	beq	r2,zero,1003c94 <__svfscanf_r+0x1668>
 1003c74:	d900a417 	ldw	r4,656(sp)
 1003c78:	8807d7fa 	srai	r3,r17,31
 1003c7c:	20800017 	ldw	r2,0(r4)
 1003c80:	21000104 	addi	r4,r4,4
 1003c84:	d900a415 	stw	r4,656(sp)
 1003c88:	14400015 	stw	r17,0(r2)
 1003c8c:	10c00115 	stw	r3,4(r2)
 1003c90:	003a7906 	br	1002678 <__svfscanf_r+0x4c>
 1003c94:	d8c0a417 	ldw	r3,656(sp)
 1003c98:	18800017 	ldw	r2,0(r3)
 1003c9c:	18c00104 	addi	r3,r3,4
 1003ca0:	d8c0a415 	stw	r3,656(sp)
 1003ca4:	14400015 	stw	r17,0(r2)
 1003ca8:	003a7306 	br	1002678 <__svfscanf_r+0x4c>

01003cac <__svfscanf>:
 1003cac:	008040b4 	movhi	r2,258
 1003cb0:	10a8f804 	addi	r2,r2,-23584
 1003cb4:	2013883a 	mov	r9,r4
 1003cb8:	11000017 	ldw	r4,0(r2)
 1003cbc:	2805883a 	mov	r2,r5
 1003cc0:	300f883a 	mov	r7,r6
 1003cc4:	480b883a 	mov	r5,r9
 1003cc8:	100d883a 	mov	r6,r2
 1003ccc:	100262c1 	jmpi	100262c <__svfscanf_r>

01003cd0 <_vfscanf_r>:
 1003cd0:	defffb04 	addi	sp,sp,-20
 1003cd4:	dcc00315 	stw	r19,12(sp)
 1003cd8:	dc800215 	stw	r18,8(sp)
 1003cdc:	dc400115 	stw	r17,4(sp)
 1003ce0:	dc000015 	stw	r16,0(sp)
 1003ce4:	dfc00415 	stw	ra,16(sp)
 1003ce8:	2021883a 	mov	r16,r4
 1003cec:	2823883a 	mov	r17,r5
 1003cf0:	3025883a 	mov	r18,r6
 1003cf4:	3827883a 	mov	r19,r7
 1003cf8:	20000226 	beq	r4,zero,1003d04 <_vfscanf_r+0x34>
 1003cfc:	20800e17 	ldw	r2,56(r4)
 1003d00:	10000b26 	beq	r2,zero,1003d30 <_vfscanf_r+0x60>
 1003d04:	8009883a 	mov	r4,r16
 1003d08:	880b883a 	mov	r5,r17
 1003d0c:	900d883a 	mov	r6,r18
 1003d10:	980f883a 	mov	r7,r19
 1003d14:	dfc00417 	ldw	ra,16(sp)
 1003d18:	dcc00317 	ldw	r19,12(sp)
 1003d1c:	dc800217 	ldw	r18,8(sp)
 1003d20:	dc400117 	ldw	r17,4(sp)
 1003d24:	dc000017 	ldw	r16,0(sp)
 1003d28:	dec00504 	addi	sp,sp,20
 1003d2c:	100262c1 	jmpi	100262c <__svfscanf_r>
 1003d30:	100594c0 	call	100594c <__sinit>
 1003d34:	003ff306 	br	1003d04 <_vfscanf_r+0x34>

01003d38 <vfscanf>:
 1003d38:	defffb04 	addi	sp,sp,-20
 1003d3c:	dcc00315 	stw	r19,12(sp)
 1003d40:	04c040b4 	movhi	r19,258
 1003d44:	9ce8f804 	addi	r19,r19,-23584
 1003d48:	98c00017 	ldw	r3,0(r19)
 1003d4c:	dc800215 	stw	r18,8(sp)
 1003d50:	dc400115 	stw	r17,4(sp)
 1003d54:	dc000015 	stw	r16,0(sp)
 1003d58:	dfc00415 	stw	ra,16(sp)
 1003d5c:	2021883a 	mov	r16,r4
 1003d60:	2823883a 	mov	r17,r5
 1003d64:	3025883a 	mov	r18,r6
 1003d68:	18000326 	beq	r3,zero,1003d78 <vfscanf+0x40>
 1003d6c:	18800e17 	ldw	r2,56(r3)
 1003d70:	1809883a 	mov	r4,r3
 1003d74:	10000b26 	beq	r2,zero,1003da4 <vfscanf+0x6c>
 1003d78:	99000017 	ldw	r4,0(r19)
 1003d7c:	800b883a 	mov	r5,r16
 1003d80:	880d883a 	mov	r6,r17
 1003d84:	900f883a 	mov	r7,r18
 1003d88:	dfc00417 	ldw	ra,16(sp)
 1003d8c:	dcc00317 	ldw	r19,12(sp)
 1003d90:	dc800217 	ldw	r18,8(sp)
 1003d94:	dc400117 	ldw	r17,4(sp)
 1003d98:	dc000017 	ldw	r16,0(sp)
 1003d9c:	dec00504 	addi	sp,sp,20
 1003da0:	100262c1 	jmpi	100262c <__svfscanf_r>
 1003da4:	100594c0 	call	100594c <__sinit>
 1003da8:	003ff306 	br	1003d78 <vfscanf+0x40>

01003dac <__swsetup_r>:
 1003dac:	008040b4 	movhi	r2,258
 1003db0:	10a8f804 	addi	r2,r2,-23584
 1003db4:	10c00017 	ldw	r3,0(r2)
 1003db8:	defffd04 	addi	sp,sp,-12
 1003dbc:	dc400115 	stw	r17,4(sp)
 1003dc0:	dc000015 	stw	r16,0(sp)
 1003dc4:	dfc00215 	stw	ra,8(sp)
 1003dc8:	2023883a 	mov	r17,r4
 1003dcc:	2821883a 	mov	r16,r5
 1003dd0:	18000226 	beq	r3,zero,1003ddc <__swsetup_r+0x30>
 1003dd4:	18800e17 	ldw	r2,56(r3)
 1003dd8:	10001f26 	beq	r2,zero,1003e58 <__swsetup_r+0xac>
 1003ddc:	8100030b 	ldhu	r4,12(r16)
 1003de0:	2080020c 	andi	r2,r4,8
 1003de4:	10002826 	beq	r2,zero,1003e88 <__swsetup_r+0xdc>
 1003de8:	81400417 	ldw	r5,16(r16)
 1003dec:	28001d26 	beq	r5,zero,1003e64 <__swsetup_r+0xb8>
 1003df0:	2080004c 	andi	r2,r4,1
 1003df4:	1005003a 	cmpeq	r2,r2,zero
 1003df8:	10000b26 	beq	r2,zero,1003e28 <__swsetup_r+0x7c>
 1003dfc:	2080008c 	andi	r2,r4,2
 1003e00:	10001226 	beq	r2,zero,1003e4c <__swsetup_r+0xa0>
 1003e04:	0005883a 	mov	r2,zero
 1003e08:	80800215 	stw	r2,8(r16)
 1003e0c:	28000b26 	beq	r5,zero,1003e3c <__swsetup_r+0x90>
 1003e10:	0005883a 	mov	r2,zero
 1003e14:	dfc00217 	ldw	ra,8(sp)
 1003e18:	dc400117 	ldw	r17,4(sp)
 1003e1c:	dc000017 	ldw	r16,0(sp)
 1003e20:	dec00304 	addi	sp,sp,12
 1003e24:	f800283a 	ret
 1003e28:	80800517 	ldw	r2,20(r16)
 1003e2c:	80000215 	stw	zero,8(r16)
 1003e30:	0085c83a 	sub	r2,zero,r2
 1003e34:	80800615 	stw	r2,24(r16)
 1003e38:	283ff51e 	bne	r5,zero,1003e10 <__swsetup_r+0x64>
 1003e3c:	2080200c 	andi	r2,r4,128
 1003e40:	103ff326 	beq	r2,zero,1003e10 <__swsetup_r+0x64>
 1003e44:	00bfffc4 	movi	r2,-1
 1003e48:	003ff206 	br	1003e14 <__swsetup_r+0x68>
 1003e4c:	80800517 	ldw	r2,20(r16)
 1003e50:	80800215 	stw	r2,8(r16)
 1003e54:	003fed06 	br	1003e0c <__swsetup_r+0x60>
 1003e58:	1809883a 	mov	r4,r3
 1003e5c:	100594c0 	call	100594c <__sinit>
 1003e60:	003fde06 	br	1003ddc <__swsetup_r+0x30>
 1003e64:	20c0a00c 	andi	r3,r4,640
 1003e68:	00808004 	movi	r2,512
 1003e6c:	18bfe026 	beq	r3,r2,1003df0 <__swsetup_r+0x44>
 1003e70:	8809883a 	mov	r4,r17
 1003e74:	800b883a 	mov	r5,r16
 1003e78:	100692c0 	call	100692c <__smakebuf_r>
 1003e7c:	8100030b 	ldhu	r4,12(r16)
 1003e80:	81400417 	ldw	r5,16(r16)
 1003e84:	003fda06 	br	1003df0 <__swsetup_r+0x44>
 1003e88:	2080040c 	andi	r2,r4,16
 1003e8c:	103fed26 	beq	r2,zero,1003e44 <__swsetup_r+0x98>
 1003e90:	2080010c 	andi	r2,r4,4
 1003e94:	10001226 	beq	r2,zero,1003ee0 <__swsetup_r+0x134>
 1003e98:	81400c17 	ldw	r5,48(r16)
 1003e9c:	28000526 	beq	r5,zero,1003eb4 <__swsetup_r+0x108>
 1003ea0:	80801004 	addi	r2,r16,64
 1003ea4:	28800226 	beq	r5,r2,1003eb0 <__swsetup_r+0x104>
 1003ea8:	8809883a 	mov	r4,r17
 1003eac:	1005f0c0 	call	1005f0c <_free_r>
 1003eb0:	80000c15 	stw	zero,48(r16)
 1003eb4:	8080030b 	ldhu	r2,12(r16)
 1003eb8:	81400417 	ldw	r5,16(r16)
 1003ebc:	80000115 	stw	zero,4(r16)
 1003ec0:	10bff6cc 	andi	r2,r2,65499
 1003ec4:	8080030d 	sth	r2,12(r16)
 1003ec8:	81400015 	stw	r5,0(r16)
 1003ecc:	8080030b 	ldhu	r2,12(r16)
 1003ed0:	10800214 	ori	r2,r2,8
 1003ed4:	113fffcc 	andi	r4,r2,65535
 1003ed8:	8080030d 	sth	r2,12(r16)
 1003edc:	003fc306 	br	1003dec <__swsetup_r+0x40>
 1003ee0:	81400417 	ldw	r5,16(r16)
 1003ee4:	003ff906 	br	1003ecc <__swsetup_r+0x120>

01003ee8 <quorem>:
 1003ee8:	28c00417 	ldw	r3,16(r5)
 1003eec:	20800417 	ldw	r2,16(r4)
 1003ef0:	defff604 	addi	sp,sp,-40
 1003ef4:	ddc00715 	stw	r23,28(sp)
 1003ef8:	dd400515 	stw	r21,20(sp)
 1003efc:	dfc00915 	stw	ra,36(sp)
 1003f00:	df000815 	stw	fp,32(sp)
 1003f04:	dd800615 	stw	r22,24(sp)
 1003f08:	dd000415 	stw	r20,16(sp)
 1003f0c:	dcc00315 	stw	r19,12(sp)
 1003f10:	dc800215 	stw	r18,8(sp)
 1003f14:	dc400115 	stw	r17,4(sp)
 1003f18:	dc000015 	stw	r16,0(sp)
 1003f1c:	202f883a 	mov	r23,r4
 1003f20:	282b883a 	mov	r21,r5
 1003f24:	10c07416 	blt	r2,r3,10040f8 <quorem+0x210>
 1003f28:	1c7fffc4 	addi	r17,r3,-1
 1003f2c:	8c45883a 	add	r2,r17,r17
 1003f30:	1085883a 	add	r2,r2,r2
 1003f34:	2c000504 	addi	r16,r5,20
 1003f38:	24c00504 	addi	r19,r4,20
 1003f3c:	14ed883a 	add	r22,r2,r19
 1003f40:	80a5883a 	add	r18,r16,r2
 1003f44:	b7000017 	ldw	fp,0(r22)
 1003f48:	91400017 	ldw	r5,0(r18)
 1003f4c:	e009883a 	mov	r4,fp
 1003f50:	29400044 	addi	r5,r5,1
 1003f54:	100e7bc0 	call	100e7bc <__udivsi3>
 1003f58:	1029883a 	mov	r20,r2
 1003f5c:	10003c1e 	bne	r2,zero,1004050 <quorem+0x168>
 1003f60:	a80b883a 	mov	r5,r21
 1003f64:	b809883a 	mov	r4,r23
 1003f68:	10077580 	call	1007758 <__mcmp>
 1003f6c:	10002b16 	blt	r2,zero,100401c <quorem+0x134>
 1003f70:	a5000044 	addi	r20,r20,1
 1003f74:	980f883a 	mov	r7,r19
 1003f78:	0011883a 	mov	r8,zero
 1003f7c:	0009883a 	mov	r4,zero
 1003f80:	81400017 	ldw	r5,0(r16)
 1003f84:	38c00017 	ldw	r3,0(r7)
 1003f88:	84000104 	addi	r16,r16,4
 1003f8c:	28bfffcc 	andi	r2,r5,65535
 1003f90:	2085883a 	add	r2,r4,r2
 1003f94:	11bfffcc 	andi	r6,r2,65535
 1003f98:	193fffcc 	andi	r4,r3,65535
 1003f9c:	1004d43a 	srli	r2,r2,16
 1003fa0:	280ad43a 	srli	r5,r5,16
 1003fa4:	2189c83a 	sub	r4,r4,r6
 1003fa8:	2209883a 	add	r4,r4,r8
 1003fac:	1806d43a 	srli	r3,r3,16
 1003fb0:	288b883a 	add	r5,r5,r2
 1003fb4:	200dd43a 	srai	r6,r4,16
 1003fb8:	28bfffcc 	andi	r2,r5,65535
 1003fbc:	1887c83a 	sub	r3,r3,r2
 1003fc0:	1987883a 	add	r3,r3,r6
 1003fc4:	3900000d 	sth	r4,0(r7)
 1003fc8:	38c0008d 	sth	r3,2(r7)
 1003fcc:	2808d43a 	srli	r4,r5,16
 1003fd0:	39c00104 	addi	r7,r7,4
 1003fd4:	1811d43a 	srai	r8,r3,16
 1003fd8:	943fe92e 	bgeu	r18,r16,1003f80 <quorem+0x98>
 1003fdc:	8c45883a 	add	r2,r17,r17
 1003fe0:	1085883a 	add	r2,r2,r2
 1003fe4:	9885883a 	add	r2,r19,r2
 1003fe8:	10c00017 	ldw	r3,0(r2)
 1003fec:	18000b1e 	bne	r3,zero,100401c <quorem+0x134>
 1003ff0:	113fff04 	addi	r4,r2,-4
 1003ff4:	9900082e 	bgeu	r19,r4,1004018 <quorem+0x130>
 1003ff8:	10bfff17 	ldw	r2,-4(r2)
 1003ffc:	10000326 	beq	r2,zero,100400c <quorem+0x124>
 1004000:	00000506 	br	1004018 <quorem+0x130>
 1004004:	20800017 	ldw	r2,0(r4)
 1004008:	1000031e 	bne	r2,zero,1004018 <quorem+0x130>
 100400c:	213fff04 	addi	r4,r4,-4
 1004010:	8c7fffc4 	addi	r17,r17,-1
 1004014:	993ffb36 	bltu	r19,r4,1004004 <quorem+0x11c>
 1004018:	bc400415 	stw	r17,16(r23)
 100401c:	a005883a 	mov	r2,r20
 1004020:	dfc00917 	ldw	ra,36(sp)
 1004024:	df000817 	ldw	fp,32(sp)
 1004028:	ddc00717 	ldw	r23,28(sp)
 100402c:	dd800617 	ldw	r22,24(sp)
 1004030:	dd400517 	ldw	r21,20(sp)
 1004034:	dd000417 	ldw	r20,16(sp)
 1004038:	dcc00317 	ldw	r19,12(sp)
 100403c:	dc800217 	ldw	r18,8(sp)
 1004040:	dc400117 	ldw	r17,4(sp)
 1004044:	dc000017 	ldw	r16,0(sp)
 1004048:	dec00a04 	addi	sp,sp,40
 100404c:	f800283a 	ret
 1004050:	980f883a 	mov	r7,r19
 1004054:	8011883a 	mov	r8,r16
 1004058:	0013883a 	mov	r9,zero
 100405c:	000d883a 	mov	r6,zero
 1004060:	40c00017 	ldw	r3,0(r8)
 1004064:	39000017 	ldw	r4,0(r7)
 1004068:	42000104 	addi	r8,r8,4
 100406c:	18bfffcc 	andi	r2,r3,65535
 1004070:	a085383a 	mul	r2,r20,r2
 1004074:	1806d43a 	srli	r3,r3,16
 1004078:	217fffcc 	andi	r5,r4,65535
 100407c:	3085883a 	add	r2,r6,r2
 1004080:	11bfffcc 	andi	r6,r2,65535
 1004084:	a0c7383a 	mul	r3,r20,r3
 1004088:	1004d43a 	srli	r2,r2,16
 100408c:	298bc83a 	sub	r5,r5,r6
 1004090:	2a4b883a 	add	r5,r5,r9
 1004094:	2008d43a 	srli	r4,r4,16
 1004098:	1887883a 	add	r3,r3,r2
 100409c:	280dd43a 	srai	r6,r5,16
 10040a0:	18bfffcc 	andi	r2,r3,65535
 10040a4:	2089c83a 	sub	r4,r4,r2
 10040a8:	2189883a 	add	r4,r4,r6
 10040ac:	3900008d 	sth	r4,2(r7)
 10040b0:	3940000d 	sth	r5,0(r7)
 10040b4:	180cd43a 	srli	r6,r3,16
 10040b8:	39c00104 	addi	r7,r7,4
 10040bc:	2013d43a 	srai	r9,r4,16
 10040c0:	923fe72e 	bgeu	r18,r8,1004060 <quorem+0x178>
 10040c4:	e03fa61e 	bne	fp,zero,1003f60 <quorem+0x78>
 10040c8:	b0ffff04 	addi	r3,r22,-4
 10040cc:	98c0082e 	bgeu	r19,r3,10040f0 <quorem+0x208>
 10040d0:	b0bfff17 	ldw	r2,-4(r22)
 10040d4:	10000326 	beq	r2,zero,10040e4 <quorem+0x1fc>
 10040d8:	00000506 	br	10040f0 <quorem+0x208>
 10040dc:	18800017 	ldw	r2,0(r3)
 10040e0:	1000031e 	bne	r2,zero,10040f0 <quorem+0x208>
 10040e4:	18ffff04 	addi	r3,r3,-4
 10040e8:	8c7fffc4 	addi	r17,r17,-1
 10040ec:	98fffb36 	bltu	r19,r3,10040dc <quorem+0x1f4>
 10040f0:	bc400415 	stw	r17,16(r23)
 10040f4:	003f9a06 	br	1003f60 <quorem+0x78>
 10040f8:	0005883a 	mov	r2,zero
 10040fc:	003fc806 	br	1004020 <quorem+0x138>

01004100 <_dtoa_r>:
 1004100:	22001017 	ldw	r8,64(r4)
 1004104:	deffda04 	addi	sp,sp,-152
 1004108:	dd402115 	stw	r21,132(sp)
 100410c:	dd002015 	stw	r20,128(sp)
 1004110:	dc801e15 	stw	r18,120(sp)
 1004114:	dc401d15 	stw	r17,116(sp)
 1004118:	dfc02515 	stw	ra,148(sp)
 100411c:	df002415 	stw	fp,144(sp)
 1004120:	ddc02315 	stw	r23,140(sp)
 1004124:	dd802215 	stw	r22,136(sp)
 1004128:	dcc01f15 	stw	r19,124(sp)
 100412c:	dc001c15 	stw	r16,112(sp)
 1004130:	d9001615 	stw	r4,88(sp)
 1004134:	3023883a 	mov	r17,r6
 1004138:	2829883a 	mov	r20,r5
 100413c:	d9c01715 	stw	r7,92(sp)
 1004140:	dc802817 	ldw	r18,160(sp)
 1004144:	302b883a 	mov	r21,r6
 1004148:	40000a26 	beq	r8,zero,1004174 <_dtoa_r+0x74>
 100414c:	20801117 	ldw	r2,68(r4)
 1004150:	400b883a 	mov	r5,r8
 1004154:	40800115 	stw	r2,4(r8)
 1004158:	20c01117 	ldw	r3,68(r4)
 100415c:	00800044 	movi	r2,1
 1004160:	10c4983a 	sll	r2,r2,r3
 1004164:	40800215 	stw	r2,8(r8)
 1004168:	10075fc0 	call	10075fc <_Bfree>
 100416c:	d8c01617 	ldw	r3,88(sp)
 1004170:	18001015 	stw	zero,64(r3)
 1004174:	8800a316 	blt	r17,zero,1004404 <_dtoa_r+0x304>
 1004178:	90000015 	stw	zero,0(r18)
 100417c:	a8dffc2c 	andhi	r3,r21,32752
 1004180:	009ffc34 	movhi	r2,32752
 1004184:	18809126 	beq	r3,r2,10043cc <_dtoa_r+0x2cc>
 1004188:	000d883a 	mov	r6,zero
 100418c:	000f883a 	mov	r7,zero
 1004190:	a009883a 	mov	r4,r20
 1004194:	a80b883a 	mov	r5,r21
 1004198:	dd001215 	stw	r20,72(sp)
 100419c:	dd401315 	stw	r21,76(sp)
 10041a0:	100e0000 	call	100e000 <__nedf2>
 10041a4:	1000171e 	bne	r2,zero,1004204 <_dtoa_r+0x104>
 10041a8:	d9802717 	ldw	r6,156(sp)
 10041ac:	00800044 	movi	r2,1
 10041b0:	30800015 	stw	r2,0(r6)
 10041b4:	d8802917 	ldw	r2,164(sp)
 10041b8:	10029b26 	beq	r2,zero,1004c28 <_dtoa_r+0xb28>
 10041bc:	d9002917 	ldw	r4,164(sp)
 10041c0:	008040b4 	movhi	r2,258
 10041c4:	10a08744 	addi	r2,r2,-32227
 10041c8:	10ffffc4 	addi	r3,r2,-1
 10041cc:	20800015 	stw	r2,0(r4)
 10041d0:	1805883a 	mov	r2,r3
 10041d4:	dfc02517 	ldw	ra,148(sp)
 10041d8:	df002417 	ldw	fp,144(sp)
 10041dc:	ddc02317 	ldw	r23,140(sp)
 10041e0:	dd802217 	ldw	r22,136(sp)
 10041e4:	dd402117 	ldw	r21,132(sp)
 10041e8:	dd002017 	ldw	r20,128(sp)
 10041ec:	dcc01f17 	ldw	r19,124(sp)
 10041f0:	dc801e17 	ldw	r18,120(sp)
 10041f4:	dc401d17 	ldw	r17,116(sp)
 10041f8:	dc001c17 	ldw	r16,112(sp)
 10041fc:	dec02604 	addi	sp,sp,152
 1004200:	f800283a 	ret
 1004204:	d9001617 	ldw	r4,88(sp)
 1004208:	d9401217 	ldw	r5,72(sp)
 100420c:	d8800104 	addi	r2,sp,4
 1004210:	a80d883a 	mov	r6,r21
 1004214:	d9c00204 	addi	r7,sp,8
 1004218:	d8800015 	stw	r2,0(sp)
 100421c:	1007c380 	call	1007c38 <__d2b>
 1004220:	d8800715 	stw	r2,28(sp)
 1004224:	a804d53a 	srli	r2,r21,20
 1004228:	1101ffcc 	andi	r4,r2,2047
 100422c:	20008626 	beq	r4,zero,1004448 <_dtoa_r+0x348>
 1004230:	d8c01217 	ldw	r3,72(sp)
 1004234:	00800434 	movhi	r2,16
 1004238:	10bfffc4 	addi	r2,r2,-1
 100423c:	ddc00117 	ldw	r23,4(sp)
 1004240:	a884703a 	and	r2,r21,r2
 1004244:	1811883a 	mov	r8,r3
 1004248:	124ffc34 	orhi	r9,r2,16368
 100424c:	25bf0044 	addi	r22,r4,-1023
 1004250:	d8000815 	stw	zero,32(sp)
 1004254:	0005883a 	mov	r2,zero
 1004258:	00cffe34 	movhi	r3,16376
 100425c:	480b883a 	mov	r5,r9
 1004260:	4009883a 	mov	r4,r8
 1004264:	180f883a 	mov	r7,r3
 1004268:	100d883a 	mov	r6,r2
 100426c:	100d8680 	call	100d868 <__subdf3>
 1004270:	0218dbf4 	movhi	r8,25455
 1004274:	4210d844 	addi	r8,r8,17249
 1004278:	024ff4f4 	movhi	r9,16339
 100427c:	4a61e9c4 	addi	r9,r9,-30809
 1004280:	480f883a 	mov	r7,r9
 1004284:	400d883a 	mov	r6,r8
 1004288:	180b883a 	mov	r5,r3
 100428c:	1009883a 	mov	r4,r2
 1004290:	100d95c0 	call	100d95c <__muldf3>
 1004294:	0222d874 	movhi	r8,35681
 1004298:	42322cc4 	addi	r8,r8,-14157
 100429c:	024ff1f4 	movhi	r9,16327
 10042a0:	4a628a04 	addi	r9,r9,-30168
 10042a4:	480f883a 	mov	r7,r9
 10042a8:	400d883a 	mov	r6,r8
 10042ac:	180b883a 	mov	r5,r3
 10042b0:	1009883a 	mov	r4,r2
 10042b4:	100d8e80 	call	100d8e8 <__adddf3>
 10042b8:	b009883a 	mov	r4,r22
 10042bc:	1021883a 	mov	r16,r2
 10042c0:	1823883a 	mov	r17,r3
 10042c4:	100e2a80 	call	100e2a8 <__floatsidf>
 10042c8:	021427f4 	movhi	r8,20639
 10042cc:	421e7ec4 	addi	r8,r8,31227
 10042d0:	024ff4f4 	movhi	r9,16339
 10042d4:	4a5104c4 	addi	r9,r9,17427
 10042d8:	480f883a 	mov	r7,r9
 10042dc:	400d883a 	mov	r6,r8
 10042e0:	180b883a 	mov	r5,r3
 10042e4:	1009883a 	mov	r4,r2
 10042e8:	100d95c0 	call	100d95c <__muldf3>
 10042ec:	180f883a 	mov	r7,r3
 10042f0:	880b883a 	mov	r5,r17
 10042f4:	100d883a 	mov	r6,r2
 10042f8:	8009883a 	mov	r4,r16
 10042fc:	100d8e80 	call	100d8e8 <__adddf3>
 1004300:	1009883a 	mov	r4,r2
 1004304:	180b883a 	mov	r5,r3
 1004308:	1021883a 	mov	r16,r2
 100430c:	1823883a 	mov	r17,r3
 1004310:	100e3a00 	call	100e3a0 <__fixdfsi>
 1004314:	000d883a 	mov	r6,zero
 1004318:	000f883a 	mov	r7,zero
 100431c:	8009883a 	mov	r4,r16
 1004320:	880b883a 	mov	r5,r17
 1004324:	d8800d15 	stw	r2,52(sp)
 1004328:	100e1980 	call	100e198 <__ltdf2>
 100432c:	10031716 	blt	r2,zero,1004f8c <_dtoa_r+0xe8c>
 1004330:	d8c00d17 	ldw	r3,52(sp)
 1004334:	00800584 	movi	r2,22
 1004338:	10c1482e 	bgeu	r2,r3,100485c <_dtoa_r+0x75c>
 100433c:	01000044 	movi	r4,1
 1004340:	d9000c15 	stw	r4,48(sp)
 1004344:	bd85c83a 	sub	r2,r23,r22
 1004348:	11bfffc4 	addi	r6,r2,-1
 100434c:	30030b16 	blt	r6,zero,1004f7c <_dtoa_r+0xe7c>
 1004350:	d9800a15 	stw	r6,40(sp)
 1004354:	d8001115 	stw	zero,68(sp)
 1004358:	d8c00d17 	ldw	r3,52(sp)
 100435c:	1802ff16 	blt	r3,zero,1004f5c <_dtoa_r+0xe5c>
 1004360:	d9000a17 	ldw	r4,40(sp)
 1004364:	d8c00915 	stw	r3,36(sp)
 1004368:	d8001015 	stw	zero,64(sp)
 100436c:	20c9883a 	add	r4,r4,r3
 1004370:	d9000a15 	stw	r4,40(sp)
 1004374:	d9001717 	ldw	r4,92(sp)
 1004378:	00800244 	movi	r2,9
 100437c:	11004636 	bltu	r2,r4,1004498 <_dtoa_r+0x398>
 1004380:	00800144 	movi	r2,5
 1004384:	11020416 	blt	r2,r4,1004b98 <_dtoa_r+0xa98>
 1004388:	04400044 	movi	r17,1
 100438c:	d8c01717 	ldw	r3,92(sp)
 1004390:	00800144 	movi	r2,5
 1004394:	10c1ed36 	bltu	r2,r3,1004b4c <_dtoa_r+0xa4c>
 1004398:	18c5883a 	add	r2,r3,r3
 100439c:	1085883a 	add	r2,r2,r2
 10043a0:	00c04034 	movhi	r3,256
 10043a4:	18d0ed04 	addi	r3,r3,17332
 10043a8:	10c5883a 	add	r2,r2,r3
 10043ac:	11000017 	ldw	r4,0(r2)
 10043b0:	2000683a 	jmp	r4
 10043b4:	010044a0 	cmpeqi	r4,zero,274
 10043b8:	010044a0 	cmpeqi	r4,zero,274
 10043bc:	01004ea0 	cmpeqi	r4,zero,314
 10043c0:	01004e78 	rdprs	r4,zero,313
 10043c4:	01004ebc 	xorhi	r4,zero,314
 10043c8:	01004ec8 	cmpgei	r4,zero,315
 10043cc:	d9002717 	ldw	r4,156(sp)
 10043d0:	0089c3c4 	movi	r2,9999
 10043d4:	20800015 	stw	r2,0(r4)
 10043d8:	a0001026 	beq	r20,zero,100441c <_dtoa_r+0x31c>
 10043dc:	00c040b4 	movhi	r3,258
 10043e0:	18e13e04 	addi	r3,r3,-31496
 10043e4:	d9802917 	ldw	r6,164(sp)
 10043e8:	303f7926 	beq	r6,zero,10041d0 <_dtoa_r+0xd0>
 10043ec:	188000c7 	ldb	r2,3(r3)
 10043f0:	190000c4 	addi	r4,r3,3
 10043f4:	1000101e 	bne	r2,zero,1004438 <_dtoa_r+0x338>
 10043f8:	d8802917 	ldw	r2,164(sp)
 10043fc:	11000015 	stw	r4,0(r2)
 1004400:	003f7306 	br	10041d0 <_dtoa_r+0xd0>
 1004404:	00a00034 	movhi	r2,32768
 1004408:	10bfffc4 	addi	r2,r2,-1
 100440c:	00c00044 	movi	r3,1
 1004410:	88aa703a 	and	r21,r17,r2
 1004414:	90c00015 	stw	r3,0(r18)
 1004418:	003f5806 	br	100417c <_dtoa_r+0x7c>
 100441c:	00800434 	movhi	r2,16
 1004420:	10bfffc4 	addi	r2,r2,-1
 1004424:	a884703a 	and	r2,r21,r2
 1004428:	103fec1e 	bne	r2,zero,10043dc <_dtoa_r+0x2dc>
 100442c:	00c040b4 	movhi	r3,258
 1004430:	18e13b04 	addi	r3,r3,-31508
 1004434:	003feb06 	br	10043e4 <_dtoa_r+0x2e4>
 1004438:	d8802917 	ldw	r2,164(sp)
 100443c:	19000204 	addi	r4,r3,8
 1004440:	11000015 	stw	r4,0(r2)
 1004444:	003f6206 	br	10041d0 <_dtoa_r+0xd0>
 1004448:	ddc00117 	ldw	r23,4(sp)
 100444c:	d8800217 	ldw	r2,8(sp)
 1004450:	01000804 	movi	r4,32
 1004454:	b8c10c84 	addi	r3,r23,1074
 1004458:	18a3883a 	add	r17,r3,r2
 100445c:	2441b80e 	bge	r4,r17,1004b40 <_dtoa_r+0xa40>
 1004460:	00c01004 	movi	r3,64
 1004464:	1c47c83a 	sub	r3,r3,r17
 1004468:	88bff804 	addi	r2,r17,-32
 100446c:	a8c6983a 	sll	r3,r21,r3
 1004470:	a084d83a 	srl	r2,r20,r2
 1004474:	1888b03a 	or	r4,r3,r2
 1004478:	100e4ec0 	call	100e4ec <__floatunsidf>
 100447c:	1011883a 	mov	r8,r2
 1004480:	00bf8434 	movhi	r2,65040
 1004484:	01000044 	movi	r4,1
 1004488:	10d3883a 	add	r9,r2,r3
 100448c:	8dbef344 	addi	r22,r17,-1075
 1004490:	d9000815 	stw	r4,32(sp)
 1004494:	003f6f06 	br	1004254 <_dtoa_r+0x154>
 1004498:	d8001715 	stw	zero,92(sp)
 100449c:	04400044 	movi	r17,1
 10044a0:	00bfffc4 	movi	r2,-1
 10044a4:	00c00044 	movi	r3,1
 10044a8:	d8800e15 	stw	r2,56(sp)
 10044ac:	d8002615 	stw	zero,152(sp)
 10044b0:	d8800f15 	stw	r2,60(sp)
 10044b4:	d8c00b15 	stw	r3,44(sp)
 10044b8:	1021883a 	mov	r16,r2
 10044bc:	d8801617 	ldw	r2,88(sp)
 10044c0:	10001115 	stw	zero,68(r2)
 10044c4:	d8801617 	ldw	r2,88(sp)
 10044c8:	11401117 	ldw	r5,68(r2)
 10044cc:	1009883a 	mov	r4,r2
 10044d0:	1007b7c0 	call	1007b7c <_Balloc>
 10044d4:	d8c01617 	ldw	r3,88(sp)
 10044d8:	d8800515 	stw	r2,20(sp)
 10044dc:	18801015 	stw	r2,64(r3)
 10044e0:	00800384 	movi	r2,14
 10044e4:	14006836 	bltu	r2,r16,1004688 <_dtoa_r+0x588>
 10044e8:	8805003a 	cmpeq	r2,r17,zero
 10044ec:	1000661e 	bne	r2,zero,1004688 <_dtoa_r+0x588>
 10044f0:	d9000d17 	ldw	r4,52(sp)
 10044f4:	0102300e 	bge	zero,r4,1004db8 <_dtoa_r+0xcb8>
 10044f8:	208003cc 	andi	r2,r4,15
 10044fc:	100490fa 	slli	r2,r2,3
 1004500:	2025d13a 	srai	r18,r4,4
 1004504:	00c040b4 	movhi	r3,258
 1004508:	18e15004 	addi	r3,r3,-31424
 100450c:	10c5883a 	add	r2,r2,r3
 1004510:	90c0040c 	andi	r3,r18,16
 1004514:	14000017 	ldw	r16,0(r2)
 1004518:	14400117 	ldw	r17,4(r2)
 100451c:	18036a1e 	bne	r3,zero,10052c8 <_dtoa_r+0x11c8>
 1004520:	05800084 	movi	r22,2
 1004524:	90001026 	beq	r18,zero,1004568 <_dtoa_r+0x468>
 1004528:	04c040b4 	movhi	r19,258
 100452c:	9ce18204 	addi	r19,r19,-31224
 1004530:	9080004c 	andi	r2,r18,1
 1004534:	1005003a 	cmpeq	r2,r2,zero
 1004538:	1000081e 	bne	r2,zero,100455c <_dtoa_r+0x45c>
 100453c:	99800017 	ldw	r6,0(r19)
 1004540:	99c00117 	ldw	r7,4(r19)
 1004544:	880b883a 	mov	r5,r17
 1004548:	8009883a 	mov	r4,r16
 100454c:	100d95c0 	call	100d95c <__muldf3>
 1004550:	1021883a 	mov	r16,r2
 1004554:	b5800044 	addi	r22,r22,1
 1004558:	1823883a 	mov	r17,r3
 100455c:	9025d07a 	srai	r18,r18,1
 1004560:	9cc00204 	addi	r19,r19,8
 1004564:	903ff21e 	bne	r18,zero,1004530 <_dtoa_r+0x430>
 1004568:	a80b883a 	mov	r5,r21
 100456c:	a009883a 	mov	r4,r20
 1004570:	880f883a 	mov	r7,r17
 1004574:	800d883a 	mov	r6,r16
 1004578:	100dd200 	call	100dd20 <__divdf3>
 100457c:	1029883a 	mov	r20,r2
 1004580:	182b883a 	mov	r21,r3
 1004584:	d8c00c17 	ldw	r3,48(sp)
 1004588:	1805003a 	cmpeq	r2,r3,zero
 100458c:	1000081e 	bne	r2,zero,10045b0 <_dtoa_r+0x4b0>
 1004590:	0005883a 	mov	r2,zero
 1004594:	00cffc34 	movhi	r3,16368
 1004598:	180f883a 	mov	r7,r3
 100459c:	a009883a 	mov	r4,r20
 10045a0:	a80b883a 	mov	r5,r21
 10045a4:	100d883a 	mov	r6,r2
 10045a8:	100e1980 	call	100e198 <__ltdf2>
 10045ac:	1003fe16 	blt	r2,zero,10055a8 <_dtoa_r+0x14a8>
 10045b0:	b009883a 	mov	r4,r22
 10045b4:	100e2a80 	call	100e2a8 <__floatsidf>
 10045b8:	180b883a 	mov	r5,r3
 10045bc:	1009883a 	mov	r4,r2
 10045c0:	a00d883a 	mov	r6,r20
 10045c4:	a80f883a 	mov	r7,r21
 10045c8:	100d95c0 	call	100d95c <__muldf3>
 10045cc:	0011883a 	mov	r8,zero
 10045d0:	02500734 	movhi	r9,16412
 10045d4:	1009883a 	mov	r4,r2
 10045d8:	180b883a 	mov	r5,r3
 10045dc:	480f883a 	mov	r7,r9
 10045e0:	400d883a 	mov	r6,r8
 10045e4:	100d8e80 	call	100d8e8 <__adddf3>
 10045e8:	d9000f17 	ldw	r4,60(sp)
 10045ec:	102d883a 	mov	r22,r2
 10045f0:	00bf3034 	movhi	r2,64704
 10045f4:	18b9883a 	add	fp,r3,r2
 10045f8:	e02f883a 	mov	r23,fp
 10045fc:	20028f1e 	bne	r4,zero,100503c <_dtoa_r+0xf3c>
 1004600:	0005883a 	mov	r2,zero
 1004604:	00d00534 	movhi	r3,16404
 1004608:	a009883a 	mov	r4,r20
 100460c:	a80b883a 	mov	r5,r21
 1004610:	180f883a 	mov	r7,r3
 1004614:	100d883a 	mov	r6,r2
 1004618:	100d8680 	call	100d868 <__subdf3>
 100461c:	1009883a 	mov	r4,r2
 1004620:	e00f883a 	mov	r7,fp
 1004624:	180b883a 	mov	r5,r3
 1004628:	b00d883a 	mov	r6,r22
 100462c:	1025883a 	mov	r18,r2
 1004630:	1827883a 	mov	r19,r3
 1004634:	100e0880 	call	100e088 <__gtdf2>
 1004638:	00834f16 	blt	zero,r2,1005378 <_dtoa_r+0x1278>
 100463c:	e0e0003c 	xorhi	r3,fp,32768
 1004640:	9009883a 	mov	r4,r18
 1004644:	980b883a 	mov	r5,r19
 1004648:	180f883a 	mov	r7,r3
 100464c:	b00d883a 	mov	r6,r22
 1004650:	100e1980 	call	100e198 <__ltdf2>
 1004654:	1000080e 	bge	r2,zero,1004678 <_dtoa_r+0x578>
 1004658:	0027883a 	mov	r19,zero
 100465c:	0025883a 	mov	r18,zero
 1004660:	d8802617 	ldw	r2,152(sp)
 1004664:	df000517 	ldw	fp,20(sp)
 1004668:	d8000615 	stw	zero,24(sp)
 100466c:	0084303a 	nor	r2,zero,r2
 1004670:	d8800d15 	stw	r2,52(sp)
 1004674:	00019b06 	br	1004ce4 <_dtoa_r+0xbe4>
 1004678:	d9801217 	ldw	r6,72(sp)
 100467c:	d8801317 	ldw	r2,76(sp)
 1004680:	3029883a 	mov	r20,r6
 1004684:	102b883a 	mov	r21,r2
 1004688:	d8c00217 	ldw	r3,8(sp)
 100468c:	18008516 	blt	r3,zero,10048a4 <_dtoa_r+0x7a4>
 1004690:	d9000d17 	ldw	r4,52(sp)
 1004694:	00800384 	movi	r2,14
 1004698:	11008216 	blt	r2,r4,10048a4 <_dtoa_r+0x7a4>
 100469c:	200490fa 	slli	r2,r4,3
 10046a0:	d9802617 	ldw	r6,152(sp)
 10046a4:	00c040b4 	movhi	r3,258
 10046a8:	18e15004 	addi	r3,r3,-31424
 10046ac:	10c5883a 	add	r2,r2,r3
 10046b0:	14800017 	ldw	r18,0(r2)
 10046b4:	14c00117 	ldw	r19,4(r2)
 10046b8:	30031e16 	blt	r6,zero,1005334 <_dtoa_r+0x1234>
 10046bc:	d9000517 	ldw	r4,20(sp)
 10046c0:	d8c00f17 	ldw	r3,60(sp)
 10046c4:	a823883a 	mov	r17,r21
 10046c8:	a021883a 	mov	r16,r20
 10046cc:	192b883a 	add	r21,r3,r4
 10046d0:	2039883a 	mov	fp,r4
 10046d4:	00000f06 	br	1004714 <_dtoa_r+0x614>
 10046d8:	0005883a 	mov	r2,zero
 10046dc:	00d00934 	movhi	r3,16420
 10046e0:	5009883a 	mov	r4,r10
 10046e4:	580b883a 	mov	r5,r11
 10046e8:	180f883a 	mov	r7,r3
 10046ec:	100d883a 	mov	r6,r2
 10046f0:	100d95c0 	call	100d95c <__muldf3>
 10046f4:	180b883a 	mov	r5,r3
 10046f8:	000d883a 	mov	r6,zero
 10046fc:	000f883a 	mov	r7,zero
 1004700:	1009883a 	mov	r4,r2
 1004704:	1021883a 	mov	r16,r2
 1004708:	1823883a 	mov	r17,r3
 100470c:	100e0000 	call	100e000 <__nedf2>
 1004710:	10004526 	beq	r2,zero,1004828 <_dtoa_r+0x728>
 1004714:	900d883a 	mov	r6,r18
 1004718:	980f883a 	mov	r7,r19
 100471c:	8009883a 	mov	r4,r16
 1004720:	880b883a 	mov	r5,r17
 1004724:	100dd200 	call	100dd20 <__divdf3>
 1004728:	180b883a 	mov	r5,r3
 100472c:	1009883a 	mov	r4,r2
 1004730:	100e3a00 	call	100e3a0 <__fixdfsi>
 1004734:	1009883a 	mov	r4,r2
 1004738:	1029883a 	mov	r20,r2
 100473c:	100e2a80 	call	100e2a8 <__floatsidf>
 1004740:	180f883a 	mov	r7,r3
 1004744:	9009883a 	mov	r4,r18
 1004748:	980b883a 	mov	r5,r19
 100474c:	100d883a 	mov	r6,r2
 1004750:	100d95c0 	call	100d95c <__muldf3>
 1004754:	180f883a 	mov	r7,r3
 1004758:	880b883a 	mov	r5,r17
 100475c:	8009883a 	mov	r4,r16
 1004760:	100d883a 	mov	r6,r2
 1004764:	100d8680 	call	100d868 <__subdf3>
 1004768:	1015883a 	mov	r10,r2
 100476c:	a0800c04 	addi	r2,r20,48
 1004770:	e0800005 	stb	r2,0(fp)
 1004774:	e7000044 	addi	fp,fp,1
 1004778:	1817883a 	mov	r11,r3
 100477c:	e57fd61e 	bne	fp,r21,10046d8 <_dtoa_r+0x5d8>
 1004780:	500d883a 	mov	r6,r10
 1004784:	180f883a 	mov	r7,r3
 1004788:	5009883a 	mov	r4,r10
 100478c:	180b883a 	mov	r5,r3
 1004790:	100d8e80 	call	100d8e8 <__adddf3>
 1004794:	100d883a 	mov	r6,r2
 1004798:	9009883a 	mov	r4,r18
 100479c:	980b883a 	mov	r5,r19
 10047a0:	180f883a 	mov	r7,r3
 10047a4:	1021883a 	mov	r16,r2
 10047a8:	1823883a 	mov	r17,r3
 10047ac:	100e1980 	call	100e198 <__ltdf2>
 10047b0:	10000816 	blt	r2,zero,10047d4 <_dtoa_r+0x6d4>
 10047b4:	980b883a 	mov	r5,r19
 10047b8:	800d883a 	mov	r6,r16
 10047bc:	880f883a 	mov	r7,r17
 10047c0:	9009883a 	mov	r4,r18
 10047c4:	100df780 	call	100df78 <__eqdf2>
 10047c8:	1000171e 	bne	r2,zero,1004828 <_dtoa_r+0x728>
 10047cc:	a080004c 	andi	r2,r20,1
 10047d0:	10001526 	beq	r2,zero,1004828 <_dtoa_r+0x728>
 10047d4:	d8800d17 	ldw	r2,52(sp)
 10047d8:	d8800415 	stw	r2,16(sp)
 10047dc:	e009883a 	mov	r4,fp
 10047e0:	213fffc4 	addi	r4,r4,-1
 10047e4:	20c00007 	ldb	r3,0(r4)
 10047e8:	00800e44 	movi	r2,57
 10047ec:	1880081e 	bne	r3,r2,1004810 <_dtoa_r+0x710>
 10047f0:	d8800517 	ldw	r2,20(sp)
 10047f4:	113ffa1e 	bne	r2,r4,10047e0 <_dtoa_r+0x6e0>
 10047f8:	d8c00417 	ldw	r3,16(sp)
 10047fc:	d9800517 	ldw	r6,20(sp)
 1004800:	00800c04 	movi	r2,48
 1004804:	18c00044 	addi	r3,r3,1
 1004808:	d8c00415 	stw	r3,16(sp)
 100480c:	30800005 	stb	r2,0(r6)
 1004810:	20800003 	ldbu	r2,0(r4)
 1004814:	d8c00417 	ldw	r3,16(sp)
 1004818:	27000044 	addi	fp,r4,1
 100481c:	10800044 	addi	r2,r2,1
 1004820:	d8c00d15 	stw	r3,52(sp)
 1004824:	20800005 	stb	r2,0(r4)
 1004828:	d9001617 	ldw	r4,88(sp)
 100482c:	d9400717 	ldw	r5,28(sp)
 1004830:	10075fc0 	call	10075fc <_Bfree>
 1004834:	e0000005 	stb	zero,0(fp)
 1004838:	d9800d17 	ldw	r6,52(sp)
 100483c:	d8c02717 	ldw	r3,156(sp)
 1004840:	d9002917 	ldw	r4,164(sp)
 1004844:	30800044 	addi	r2,r6,1
 1004848:	18800015 	stw	r2,0(r3)
 100484c:	20029c26 	beq	r4,zero,10052c0 <_dtoa_r+0x11c0>
 1004850:	d8c00517 	ldw	r3,20(sp)
 1004854:	27000015 	stw	fp,0(r4)
 1004858:	003e5d06 	br	10041d0 <_dtoa_r+0xd0>
 100485c:	d9800d17 	ldw	r6,52(sp)
 1004860:	00c040b4 	movhi	r3,258
 1004864:	18e15004 	addi	r3,r3,-31424
 1004868:	d9001217 	ldw	r4,72(sp)
 100486c:	300490fa 	slli	r2,r6,3
 1004870:	d9401317 	ldw	r5,76(sp)
 1004874:	10c5883a 	add	r2,r2,r3
 1004878:	12000017 	ldw	r8,0(r2)
 100487c:	12400117 	ldw	r9,4(r2)
 1004880:	400d883a 	mov	r6,r8
 1004884:	480f883a 	mov	r7,r9
 1004888:	100e1980 	call	100e198 <__ltdf2>
 100488c:	1000030e 	bge	r2,zero,100489c <_dtoa_r+0x79c>
 1004890:	d8800d17 	ldw	r2,52(sp)
 1004894:	10bfffc4 	addi	r2,r2,-1
 1004898:	d8800d15 	stw	r2,52(sp)
 100489c:	d8000c15 	stw	zero,48(sp)
 10048a0:	003ea806 	br	1004344 <_dtoa_r+0x244>
 10048a4:	d9000b17 	ldw	r4,44(sp)
 10048a8:	202cc03a 	cmpne	r22,r4,zero
 10048ac:	b000c71e 	bne	r22,zero,1004bcc <_dtoa_r+0xacc>
 10048b0:	dc001117 	ldw	r16,68(sp)
 10048b4:	dc801017 	ldw	r18,64(sp)
 10048b8:	0027883a 	mov	r19,zero
 10048bc:	04000b0e 	bge	zero,r16,10048ec <_dtoa_r+0x7ec>
 10048c0:	d8c00a17 	ldw	r3,40(sp)
 10048c4:	00c0090e 	bge	zero,r3,10048ec <_dtoa_r+0x7ec>
 10048c8:	8005883a 	mov	r2,r16
 10048cc:	1c011316 	blt	r3,r16,1004d1c <_dtoa_r+0xc1c>
 10048d0:	d9000a17 	ldw	r4,40(sp)
 10048d4:	d9801117 	ldw	r6,68(sp)
 10048d8:	80a1c83a 	sub	r16,r16,r2
 10048dc:	2089c83a 	sub	r4,r4,r2
 10048e0:	308dc83a 	sub	r6,r6,r2
 10048e4:	d9000a15 	stw	r4,40(sp)
 10048e8:	d9801115 	stw	r6,68(sp)
 10048ec:	d8801017 	ldw	r2,64(sp)
 10048f0:	0080150e 	bge	zero,r2,1004948 <_dtoa_r+0x848>
 10048f4:	d8c00b17 	ldw	r3,44(sp)
 10048f8:	1805003a 	cmpeq	r2,r3,zero
 10048fc:	1001c91e 	bne	r2,zero,1005024 <_dtoa_r+0xf24>
 1004900:	04800e0e 	bge	zero,r18,100493c <_dtoa_r+0x83c>
 1004904:	d9001617 	ldw	r4,88(sp)
 1004908:	980b883a 	mov	r5,r19
 100490c:	900d883a 	mov	r6,r18
 1004910:	10083b00 	call	10083b0 <__pow5mult>
 1004914:	d9001617 	ldw	r4,88(sp)
 1004918:	d9800717 	ldw	r6,28(sp)
 100491c:	100b883a 	mov	r5,r2
 1004920:	1027883a 	mov	r19,r2
 1004924:	100808c0 	call	100808c <__multiply>
 1004928:	d9001617 	ldw	r4,88(sp)
 100492c:	d9400717 	ldw	r5,28(sp)
 1004930:	1023883a 	mov	r17,r2
 1004934:	10075fc0 	call	10075fc <_Bfree>
 1004938:	dc400715 	stw	r17,28(sp)
 100493c:	d9001017 	ldw	r4,64(sp)
 1004940:	248dc83a 	sub	r6,r4,r18
 1004944:	30010e1e 	bne	r6,zero,1004d80 <_dtoa_r+0xc80>
 1004948:	d9001617 	ldw	r4,88(sp)
 100494c:	04400044 	movi	r17,1
 1004950:	880b883a 	mov	r5,r17
 1004954:	10082740 	call	1008274 <__i2b>
 1004958:	d9800917 	ldw	r6,36(sp)
 100495c:	1025883a 	mov	r18,r2
 1004960:	0180040e 	bge	zero,r6,1004974 <_dtoa_r+0x874>
 1004964:	d9001617 	ldw	r4,88(sp)
 1004968:	100b883a 	mov	r5,r2
 100496c:	10083b00 	call	10083b0 <__pow5mult>
 1004970:	1025883a 	mov	r18,r2
 1004974:	d8801717 	ldw	r2,92(sp)
 1004978:	8880f30e 	bge	r17,r2,1004d48 <_dtoa_r+0xc48>
 100497c:	0023883a 	mov	r17,zero
 1004980:	d9800917 	ldw	r6,36(sp)
 1004984:	30019e1e 	bne	r6,zero,1005000 <_dtoa_r+0xf00>
 1004988:	00c00044 	movi	r3,1
 100498c:	d9000a17 	ldw	r4,40(sp)
 1004990:	20c5883a 	add	r2,r4,r3
 1004994:	10c007cc 	andi	r3,r2,31
 1004998:	1800841e 	bne	r3,zero,1004bac <_dtoa_r+0xaac>
 100499c:	00800704 	movi	r2,28
 10049a0:	d9000a17 	ldw	r4,40(sp)
 10049a4:	d9801117 	ldw	r6,68(sp)
 10049a8:	80a1883a 	add	r16,r16,r2
 10049ac:	2089883a 	add	r4,r4,r2
 10049b0:	308d883a 	add	r6,r6,r2
 10049b4:	d9000a15 	stw	r4,40(sp)
 10049b8:	d9801115 	stw	r6,68(sp)
 10049bc:	d8801117 	ldw	r2,68(sp)
 10049c0:	0080050e 	bge	zero,r2,10049d8 <_dtoa_r+0x8d8>
 10049c4:	d9400717 	ldw	r5,28(sp)
 10049c8:	d9001617 	ldw	r4,88(sp)
 10049cc:	100d883a 	mov	r6,r2
 10049d0:	1007f400 	call	1007f40 <__lshift>
 10049d4:	d8800715 	stw	r2,28(sp)
 10049d8:	d8c00a17 	ldw	r3,40(sp)
 10049dc:	00c0050e 	bge	zero,r3,10049f4 <_dtoa_r+0x8f4>
 10049e0:	d9001617 	ldw	r4,88(sp)
 10049e4:	900b883a 	mov	r5,r18
 10049e8:	180d883a 	mov	r6,r3
 10049ec:	1007f400 	call	1007f40 <__lshift>
 10049f0:	1025883a 	mov	r18,r2
 10049f4:	d9000c17 	ldw	r4,48(sp)
 10049f8:	2005003a 	cmpeq	r2,r4,zero
 10049fc:	10016f26 	beq	r2,zero,1004fbc <_dtoa_r+0xebc>
 1004a00:	d9000f17 	ldw	r4,60(sp)
 1004a04:	0102170e 	bge	zero,r4,1005264 <_dtoa_r+0x1164>
 1004a08:	d9800b17 	ldw	r6,44(sp)
 1004a0c:	3005003a 	cmpeq	r2,r6,zero
 1004a10:	1000881e 	bne	r2,zero,1004c34 <_dtoa_r+0xb34>
 1004a14:	0400050e 	bge	zero,r16,1004a2c <_dtoa_r+0x92c>
 1004a18:	d9001617 	ldw	r4,88(sp)
 1004a1c:	980b883a 	mov	r5,r19
 1004a20:	800d883a 	mov	r6,r16
 1004a24:	1007f400 	call	1007f40 <__lshift>
 1004a28:	1027883a 	mov	r19,r2
 1004a2c:	8804c03a 	cmpne	r2,r17,zero
 1004a30:	1002541e 	bne	r2,zero,1005384 <_dtoa_r+0x1284>
 1004a34:	980b883a 	mov	r5,r19
 1004a38:	dd800517 	ldw	r22,20(sp)
 1004a3c:	dcc00615 	stw	r19,24(sp)
 1004a40:	a700004c 	andi	fp,r20,1
 1004a44:	2827883a 	mov	r19,r5
 1004a48:	d9000717 	ldw	r4,28(sp)
 1004a4c:	900b883a 	mov	r5,r18
 1004a50:	1003ee80 	call	1003ee8 <quorem>
 1004a54:	d9000717 	ldw	r4,28(sp)
 1004a58:	d9400617 	ldw	r5,24(sp)
 1004a5c:	1023883a 	mov	r17,r2
 1004a60:	8dc00c04 	addi	r23,r17,48
 1004a64:	10077580 	call	1007758 <__mcmp>
 1004a68:	d9001617 	ldw	r4,88(sp)
 1004a6c:	900b883a 	mov	r5,r18
 1004a70:	980d883a 	mov	r6,r19
 1004a74:	1029883a 	mov	r20,r2
 1004a78:	1007db40 	call	1007db4 <__mdiff>
 1004a7c:	102b883a 	mov	r21,r2
 1004a80:	10800317 	ldw	r2,12(r2)
 1004a84:	1001281e 	bne	r2,zero,1004f28 <_dtoa_r+0xe28>
 1004a88:	d9000717 	ldw	r4,28(sp)
 1004a8c:	a80b883a 	mov	r5,r21
 1004a90:	10077580 	call	1007758 <__mcmp>
 1004a94:	d9001617 	ldw	r4,88(sp)
 1004a98:	1021883a 	mov	r16,r2
 1004a9c:	a80b883a 	mov	r5,r21
 1004aa0:	10075fc0 	call	10075fc <_Bfree>
 1004aa4:	8000041e 	bne	r16,zero,1004ab8 <_dtoa_r+0x9b8>
 1004aa8:	d8801717 	ldw	r2,92(sp)
 1004aac:	1000021e 	bne	r2,zero,1004ab8 <_dtoa_r+0x9b8>
 1004ab0:	e004c03a 	cmpne	r2,fp,zero
 1004ab4:	10011726 	beq	r2,zero,1004f14 <_dtoa_r+0xe14>
 1004ab8:	a0010616 	blt	r20,zero,1004ed4 <_dtoa_r+0xdd4>
 1004abc:	a000041e 	bne	r20,zero,1004ad0 <_dtoa_r+0x9d0>
 1004ac0:	d8c01717 	ldw	r3,92(sp)
 1004ac4:	1800021e 	bne	r3,zero,1004ad0 <_dtoa_r+0x9d0>
 1004ac8:	e004c03a 	cmpne	r2,fp,zero
 1004acc:	10010126 	beq	r2,zero,1004ed4 <_dtoa_r+0xdd4>
 1004ad0:	04023d16 	blt	zero,r16,10053c8 <_dtoa_r+0x12c8>
 1004ad4:	b5c00005 	stb	r23,0(r22)
 1004ad8:	d9800517 	ldw	r6,20(sp)
 1004adc:	d9000f17 	ldw	r4,60(sp)
 1004ae0:	b5800044 	addi	r22,r22,1
 1004ae4:	3105883a 	add	r2,r6,r4
 1004ae8:	b0806526 	beq	r22,r2,1004c80 <_dtoa_r+0xb80>
 1004aec:	d9400717 	ldw	r5,28(sp)
 1004af0:	d9001617 	ldw	r4,88(sp)
 1004af4:	01800284 	movi	r6,10
 1004af8:	000f883a 	mov	r7,zero
 1004afc:	10082b00 	call	10082b0 <__multadd>
 1004b00:	d8800715 	stw	r2,28(sp)
 1004b04:	d8800617 	ldw	r2,24(sp)
 1004b08:	14c10c26 	beq	r2,r19,1004f3c <_dtoa_r+0xe3c>
 1004b0c:	d9400617 	ldw	r5,24(sp)
 1004b10:	d9001617 	ldw	r4,88(sp)
 1004b14:	01800284 	movi	r6,10
 1004b18:	000f883a 	mov	r7,zero
 1004b1c:	10082b00 	call	10082b0 <__multadd>
 1004b20:	d9001617 	ldw	r4,88(sp)
 1004b24:	980b883a 	mov	r5,r19
 1004b28:	01800284 	movi	r6,10
 1004b2c:	000f883a 	mov	r7,zero
 1004b30:	d8800615 	stw	r2,24(sp)
 1004b34:	10082b00 	call	10082b0 <__multadd>
 1004b38:	1027883a 	mov	r19,r2
 1004b3c:	003fc206 	br	1004a48 <_dtoa_r+0x948>
 1004b40:	2445c83a 	sub	r2,r4,r17
 1004b44:	a088983a 	sll	r4,r20,r2
 1004b48:	003e4b06 	br	1004478 <_dtoa_r+0x378>
 1004b4c:	01bfffc4 	movi	r6,-1
 1004b50:	00800044 	movi	r2,1
 1004b54:	d9800e15 	stw	r6,56(sp)
 1004b58:	d9800f15 	stw	r6,60(sp)
 1004b5c:	d8800b15 	stw	r2,44(sp)
 1004b60:	d8c01617 	ldw	r3,88(sp)
 1004b64:	008005c4 	movi	r2,23
 1004b68:	18001115 	stw	zero,68(r3)
 1004b6c:	1580082e 	bgeu	r2,r22,1004b90 <_dtoa_r+0xa90>
 1004b70:	00c00104 	movi	r3,4
 1004b74:	0009883a 	mov	r4,zero
 1004b78:	18c7883a 	add	r3,r3,r3
 1004b7c:	18800504 	addi	r2,r3,20
 1004b80:	21000044 	addi	r4,r4,1
 1004b84:	b0bffc2e 	bgeu	r22,r2,1004b78 <_dtoa_r+0xa78>
 1004b88:	d9801617 	ldw	r6,88(sp)
 1004b8c:	31001115 	stw	r4,68(r6)
 1004b90:	dc000f17 	ldw	r16,60(sp)
 1004b94:	003e4b06 	br	10044c4 <_dtoa_r+0x3c4>
 1004b98:	d9801717 	ldw	r6,92(sp)
 1004b9c:	0023883a 	mov	r17,zero
 1004ba0:	31bfff04 	addi	r6,r6,-4
 1004ba4:	d9801715 	stw	r6,92(sp)
 1004ba8:	003df806 	br	100438c <_dtoa_r+0x28c>
 1004bac:	00800804 	movi	r2,32
 1004bb0:	10c9c83a 	sub	r4,r2,r3
 1004bb4:	00c00104 	movi	r3,4
 1004bb8:	19005a16 	blt	r3,r4,1004d24 <_dtoa_r+0xc24>
 1004bbc:	008000c4 	movi	r2,3
 1004bc0:	113f7e16 	blt	r2,r4,10049bc <_dtoa_r+0x8bc>
 1004bc4:	20800704 	addi	r2,r4,28
 1004bc8:	003f7506 	br	10049a0 <_dtoa_r+0x8a0>
 1004bcc:	d9801717 	ldw	r6,92(sp)
 1004bd0:	00800044 	movi	r2,1
 1004bd4:	1180a10e 	bge	r2,r6,1004e5c <_dtoa_r+0xd5c>
 1004bd8:	d9800f17 	ldw	r6,60(sp)
 1004bdc:	d8c01017 	ldw	r3,64(sp)
 1004be0:	30bfffc4 	addi	r2,r6,-1
 1004be4:	1881c616 	blt	r3,r2,1005300 <_dtoa_r+0x1200>
 1004be8:	18a5c83a 	sub	r18,r3,r2
 1004bec:	d8800f17 	ldw	r2,60(sp)
 1004bf0:	10026216 	blt	r2,zero,100557c <_dtoa_r+0x147c>
 1004bf4:	dc001117 	ldw	r16,68(sp)
 1004bf8:	1007883a 	mov	r3,r2
 1004bfc:	d9800a17 	ldw	r6,40(sp)
 1004c00:	d8801117 	ldw	r2,68(sp)
 1004c04:	d9001617 	ldw	r4,88(sp)
 1004c08:	30cd883a 	add	r6,r6,r3
 1004c0c:	10c5883a 	add	r2,r2,r3
 1004c10:	01400044 	movi	r5,1
 1004c14:	d9800a15 	stw	r6,40(sp)
 1004c18:	d8801115 	stw	r2,68(sp)
 1004c1c:	10082740 	call	1008274 <__i2b>
 1004c20:	1027883a 	mov	r19,r2
 1004c24:	003f2506 	br	10048bc <_dtoa_r+0x7bc>
 1004c28:	00c040b4 	movhi	r3,258
 1004c2c:	18e08704 	addi	r3,r3,-32228
 1004c30:	003d6706 	br	10041d0 <_dtoa_r+0xd0>
 1004c34:	dd800517 	ldw	r22,20(sp)
 1004c38:	04000044 	movi	r16,1
 1004c3c:	00000706 	br	1004c5c <_dtoa_r+0xb5c>
 1004c40:	d9400717 	ldw	r5,28(sp)
 1004c44:	d9001617 	ldw	r4,88(sp)
 1004c48:	01800284 	movi	r6,10
 1004c4c:	000f883a 	mov	r7,zero
 1004c50:	10082b00 	call	10082b0 <__multadd>
 1004c54:	d8800715 	stw	r2,28(sp)
 1004c58:	84000044 	addi	r16,r16,1
 1004c5c:	d9000717 	ldw	r4,28(sp)
 1004c60:	900b883a 	mov	r5,r18
 1004c64:	1003ee80 	call	1003ee8 <quorem>
 1004c68:	15c00c04 	addi	r23,r2,48
 1004c6c:	b5c00005 	stb	r23,0(r22)
 1004c70:	d8c00f17 	ldw	r3,60(sp)
 1004c74:	b5800044 	addi	r22,r22,1
 1004c78:	80fff116 	blt	r16,r3,1004c40 <_dtoa_r+0xb40>
 1004c7c:	d8000615 	stw	zero,24(sp)
 1004c80:	d9400717 	ldw	r5,28(sp)
 1004c84:	d9001617 	ldw	r4,88(sp)
 1004c88:	01800044 	movi	r6,1
 1004c8c:	1007f400 	call	1007f40 <__lshift>
 1004c90:	1009883a 	mov	r4,r2
 1004c94:	900b883a 	mov	r5,r18
 1004c98:	d8800715 	stw	r2,28(sp)
 1004c9c:	10077580 	call	1007758 <__mcmp>
 1004ca0:	00803c0e 	bge	zero,r2,1004d94 <_dtoa_r+0xc94>
 1004ca4:	b009883a 	mov	r4,r22
 1004ca8:	213fffc4 	addi	r4,r4,-1
 1004cac:	21400003 	ldbu	r5,0(r4)
 1004cb0:	00800e44 	movi	r2,57
 1004cb4:	28c03fcc 	andi	r3,r5,255
 1004cb8:	18c0201c 	xori	r3,r3,128
 1004cbc:	18ffe004 	addi	r3,r3,-128
 1004cc0:	1881981e 	bne	r3,r2,1005324 <_dtoa_r+0x1224>
 1004cc4:	d9800517 	ldw	r6,20(sp)
 1004cc8:	21bff71e 	bne	r4,r6,1004ca8 <_dtoa_r+0xba8>
 1004ccc:	d8800d17 	ldw	r2,52(sp)
 1004cd0:	37000044 	addi	fp,r6,1
 1004cd4:	10800044 	addi	r2,r2,1
 1004cd8:	d8800d15 	stw	r2,52(sp)
 1004cdc:	00800c44 	movi	r2,49
 1004ce0:	30800005 	stb	r2,0(r6)
 1004ce4:	d9001617 	ldw	r4,88(sp)
 1004ce8:	900b883a 	mov	r5,r18
 1004cec:	10075fc0 	call	10075fc <_Bfree>
 1004cf0:	983ecd26 	beq	r19,zero,1004828 <_dtoa_r+0x728>
 1004cf4:	d8c00617 	ldw	r3,24(sp)
 1004cf8:	18000426 	beq	r3,zero,1004d0c <_dtoa_r+0xc0c>
 1004cfc:	1cc00326 	beq	r3,r19,1004d0c <_dtoa_r+0xc0c>
 1004d00:	d9001617 	ldw	r4,88(sp)
 1004d04:	180b883a 	mov	r5,r3
 1004d08:	10075fc0 	call	10075fc <_Bfree>
 1004d0c:	d9001617 	ldw	r4,88(sp)
 1004d10:	980b883a 	mov	r5,r19
 1004d14:	10075fc0 	call	10075fc <_Bfree>
 1004d18:	003ec306 	br	1004828 <_dtoa_r+0x728>
 1004d1c:	1805883a 	mov	r2,r3
 1004d20:	003eeb06 	br	10048d0 <_dtoa_r+0x7d0>
 1004d24:	d9800a17 	ldw	r6,40(sp)
 1004d28:	d8c01117 	ldw	r3,68(sp)
 1004d2c:	20bfff04 	addi	r2,r4,-4
 1004d30:	308d883a 	add	r6,r6,r2
 1004d34:	1887883a 	add	r3,r3,r2
 1004d38:	80a1883a 	add	r16,r16,r2
 1004d3c:	d9800a15 	stw	r6,40(sp)
 1004d40:	d8c01115 	stw	r3,68(sp)
 1004d44:	003f1d06 	br	10049bc <_dtoa_r+0x8bc>
 1004d48:	a03f0c1e 	bne	r20,zero,100497c <_dtoa_r+0x87c>
 1004d4c:	00800434 	movhi	r2,16
 1004d50:	10bfffc4 	addi	r2,r2,-1
 1004d54:	a884703a 	and	r2,r21,r2
 1004d58:	103f081e 	bne	r2,zero,100497c <_dtoa_r+0x87c>
 1004d5c:	a89ffc2c 	andhi	r2,r21,32752
 1004d60:	103f0626 	beq	r2,zero,100497c <_dtoa_r+0x87c>
 1004d64:	d8c01117 	ldw	r3,68(sp)
 1004d68:	d9000a17 	ldw	r4,40(sp)
 1004d6c:	18c00044 	addi	r3,r3,1
 1004d70:	21000044 	addi	r4,r4,1
 1004d74:	d8c01115 	stw	r3,68(sp)
 1004d78:	d9000a15 	stw	r4,40(sp)
 1004d7c:	003f0006 	br	1004980 <_dtoa_r+0x880>
 1004d80:	d9400717 	ldw	r5,28(sp)
 1004d84:	d9001617 	ldw	r4,88(sp)
 1004d88:	10083b00 	call	10083b0 <__pow5mult>
 1004d8c:	d8800715 	stw	r2,28(sp)
 1004d90:	003eed06 	br	1004948 <_dtoa_r+0x848>
 1004d94:	1000021e 	bne	r2,zero,1004da0 <_dtoa_r+0xca0>
 1004d98:	b880004c 	andi	r2,r23,1
 1004d9c:	103fc11e 	bne	r2,zero,1004ca4 <_dtoa_r+0xba4>
 1004da0:	b5bfffc4 	addi	r22,r22,-1
 1004da4:	b0c00007 	ldb	r3,0(r22)
 1004da8:	00800c04 	movi	r2,48
 1004dac:	18bffc26 	beq	r3,r2,1004da0 <_dtoa_r+0xca0>
 1004db0:	b7000044 	addi	fp,r22,1
 1004db4:	003fcb06 	br	1004ce4 <_dtoa_r+0xbe4>
 1004db8:	d9800d17 	ldw	r6,52(sp)
 1004dbc:	018fc83a 	sub	r7,zero,r6
 1004dc0:	3801f726 	beq	r7,zero,10055a0 <_dtoa_r+0x14a0>
 1004dc4:	398003cc 	andi	r6,r7,15
 1004dc8:	300c90fa 	slli	r6,r6,3
 1004dcc:	014040b4 	movhi	r5,258
 1004dd0:	29615004 	addi	r5,r5,-31424
 1004dd4:	d9001217 	ldw	r4,72(sp)
 1004dd8:	314d883a 	add	r6,r6,r5
 1004ddc:	30c00117 	ldw	r3,4(r6)
 1004de0:	30800017 	ldw	r2,0(r6)
 1004de4:	d9401317 	ldw	r5,76(sp)
 1004de8:	3821d13a 	srai	r16,r7,4
 1004dec:	100d883a 	mov	r6,r2
 1004df0:	180f883a 	mov	r7,r3
 1004df4:	100d95c0 	call	100d95c <__muldf3>
 1004df8:	1011883a 	mov	r8,r2
 1004dfc:	1813883a 	mov	r9,r3
 1004e00:	1029883a 	mov	r20,r2
 1004e04:	182b883a 	mov	r21,r3
 1004e08:	8001e526 	beq	r16,zero,10055a0 <_dtoa_r+0x14a0>
 1004e0c:	05800084 	movi	r22,2
 1004e10:	044040b4 	movhi	r17,258
 1004e14:	8c618204 	addi	r17,r17,-31224
 1004e18:	8080004c 	andi	r2,r16,1
 1004e1c:	1005003a 	cmpeq	r2,r2,zero
 1004e20:	1000081e 	bne	r2,zero,1004e44 <_dtoa_r+0xd44>
 1004e24:	89800017 	ldw	r6,0(r17)
 1004e28:	89c00117 	ldw	r7,4(r17)
 1004e2c:	480b883a 	mov	r5,r9
 1004e30:	4009883a 	mov	r4,r8
 1004e34:	100d95c0 	call	100d95c <__muldf3>
 1004e38:	1011883a 	mov	r8,r2
 1004e3c:	b5800044 	addi	r22,r22,1
 1004e40:	1813883a 	mov	r9,r3
 1004e44:	8021d07a 	srai	r16,r16,1
 1004e48:	8c400204 	addi	r17,r17,8
 1004e4c:	803ff21e 	bne	r16,zero,1004e18 <_dtoa_r+0xd18>
 1004e50:	4029883a 	mov	r20,r8
 1004e54:	482b883a 	mov	r21,r9
 1004e58:	003dca06 	br	1004584 <_dtoa_r+0x484>
 1004e5c:	d9000817 	ldw	r4,32(sp)
 1004e60:	2005003a 	cmpeq	r2,r4,zero
 1004e64:	1001f61e 	bne	r2,zero,1005640 <_dtoa_r+0x1540>
 1004e68:	dc001117 	ldw	r16,68(sp)
 1004e6c:	dc801017 	ldw	r18,64(sp)
 1004e70:	18c10cc4 	addi	r3,r3,1075
 1004e74:	003f6106 	br	1004bfc <_dtoa_r+0xafc>
 1004e78:	d8000b15 	stw	zero,44(sp)
 1004e7c:	d9802617 	ldw	r6,152(sp)
 1004e80:	d8c00d17 	ldw	r3,52(sp)
 1004e84:	30800044 	addi	r2,r6,1
 1004e88:	18ad883a 	add	r22,r3,r2
 1004e8c:	b13fffc4 	addi	r4,r22,-1
 1004e90:	d9000e15 	stw	r4,56(sp)
 1004e94:	0581f60e 	bge	zero,r22,1005670 <_dtoa_r+0x1570>
 1004e98:	dd800f15 	stw	r22,60(sp)
 1004e9c:	003f3006 	br	1004b60 <_dtoa_r+0xa60>
 1004ea0:	d8000b15 	stw	zero,44(sp)
 1004ea4:	d9002617 	ldw	r4,152(sp)
 1004ea8:	0101eb0e 	bge	zero,r4,1005658 <_dtoa_r+0x1558>
 1004eac:	202d883a 	mov	r22,r4
 1004eb0:	d9000e15 	stw	r4,56(sp)
 1004eb4:	d9000f15 	stw	r4,60(sp)
 1004eb8:	003f2906 	br	1004b60 <_dtoa_r+0xa60>
 1004ebc:	01800044 	movi	r6,1
 1004ec0:	d9800b15 	stw	r6,44(sp)
 1004ec4:	003ff706 	br	1004ea4 <_dtoa_r+0xda4>
 1004ec8:	01000044 	movi	r4,1
 1004ecc:	d9000b15 	stw	r4,44(sp)
 1004ed0:	003fea06 	br	1004e7c <_dtoa_r+0xd7c>
 1004ed4:	04000c0e 	bge	zero,r16,1004f08 <_dtoa_r+0xe08>
 1004ed8:	d9400717 	ldw	r5,28(sp)
 1004edc:	d9001617 	ldw	r4,88(sp)
 1004ee0:	01800044 	movi	r6,1
 1004ee4:	1007f400 	call	1007f40 <__lshift>
 1004ee8:	1009883a 	mov	r4,r2
 1004eec:	900b883a 	mov	r5,r18
 1004ef0:	d8800715 	stw	r2,28(sp)
 1004ef4:	10077580 	call	1007758 <__mcmp>
 1004ef8:	0081e00e 	bge	zero,r2,100567c <_dtoa_r+0x157c>
 1004efc:	bdc00044 	addi	r23,r23,1
 1004f00:	00800e84 	movi	r2,58
 1004f04:	b881a226 	beq	r23,r2,1005590 <_dtoa_r+0x1490>
 1004f08:	b7000044 	addi	fp,r22,1
 1004f0c:	b5c00005 	stb	r23,0(r22)
 1004f10:	003f7406 	br	1004ce4 <_dtoa_r+0xbe4>
 1004f14:	00800e44 	movi	r2,57
 1004f18:	b8819d26 	beq	r23,r2,1005590 <_dtoa_r+0x1490>
 1004f1c:	053ffa0e 	bge	zero,r20,1004f08 <_dtoa_r+0xe08>
 1004f20:	8dc00c44 	addi	r23,r17,49
 1004f24:	003ff806 	br	1004f08 <_dtoa_r+0xe08>
 1004f28:	d9001617 	ldw	r4,88(sp)
 1004f2c:	a80b883a 	mov	r5,r21
 1004f30:	04000044 	movi	r16,1
 1004f34:	10075fc0 	call	10075fc <_Bfree>
 1004f38:	003edf06 	br	1004ab8 <_dtoa_r+0x9b8>
 1004f3c:	d9001617 	ldw	r4,88(sp)
 1004f40:	980b883a 	mov	r5,r19
 1004f44:	01800284 	movi	r6,10
 1004f48:	000f883a 	mov	r7,zero
 1004f4c:	10082b00 	call	10082b0 <__multadd>
 1004f50:	1027883a 	mov	r19,r2
 1004f54:	d8800615 	stw	r2,24(sp)
 1004f58:	003ebb06 	br	1004a48 <_dtoa_r+0x948>
 1004f5c:	d9801117 	ldw	r6,68(sp)
 1004f60:	d8800d17 	ldw	r2,52(sp)
 1004f64:	d8000915 	stw	zero,36(sp)
 1004f68:	308dc83a 	sub	r6,r6,r2
 1004f6c:	0087c83a 	sub	r3,zero,r2
 1004f70:	d9801115 	stw	r6,68(sp)
 1004f74:	d8c01015 	stw	r3,64(sp)
 1004f78:	003cfe06 	br	1004374 <_dtoa_r+0x274>
 1004f7c:	018dc83a 	sub	r6,zero,r6
 1004f80:	d9801115 	stw	r6,68(sp)
 1004f84:	d8000a15 	stw	zero,40(sp)
 1004f88:	003cf306 	br	1004358 <_dtoa_r+0x258>
 1004f8c:	d9000d17 	ldw	r4,52(sp)
 1004f90:	100e2a80 	call	100e2a8 <__floatsidf>
 1004f94:	880b883a 	mov	r5,r17
 1004f98:	8009883a 	mov	r4,r16
 1004f9c:	180f883a 	mov	r7,r3
 1004fa0:	100d883a 	mov	r6,r2
 1004fa4:	100e0000 	call	100e000 <__nedf2>
 1004fa8:	103ce126 	beq	r2,zero,1004330 <_dtoa_r+0x230>
 1004fac:	d9800d17 	ldw	r6,52(sp)
 1004fb0:	31bfffc4 	addi	r6,r6,-1
 1004fb4:	d9800d15 	stw	r6,52(sp)
 1004fb8:	003cdd06 	br	1004330 <_dtoa_r+0x230>
 1004fbc:	d9000717 	ldw	r4,28(sp)
 1004fc0:	900b883a 	mov	r5,r18
 1004fc4:	10077580 	call	1007758 <__mcmp>
 1004fc8:	103e8d0e 	bge	r2,zero,1004a00 <_dtoa_r+0x900>
 1004fcc:	d9400717 	ldw	r5,28(sp)
 1004fd0:	d9001617 	ldw	r4,88(sp)
 1004fd4:	01800284 	movi	r6,10
 1004fd8:	000f883a 	mov	r7,zero
 1004fdc:	10082b00 	call	10082b0 <__multadd>
 1004fe0:	d9800d17 	ldw	r6,52(sp)
 1004fe4:	d8800715 	stw	r2,28(sp)
 1004fe8:	31bfffc4 	addi	r6,r6,-1
 1004fec:	d9800d15 	stw	r6,52(sp)
 1004ff0:	b001a71e 	bne	r22,zero,1005690 <_dtoa_r+0x1590>
 1004ff4:	d8800e17 	ldw	r2,56(sp)
 1004ff8:	d8800f15 	stw	r2,60(sp)
 1004ffc:	003e8006 	br	1004a00 <_dtoa_r+0x900>
 1005000:	90800417 	ldw	r2,16(r18)
 1005004:	1085883a 	add	r2,r2,r2
 1005008:	1085883a 	add	r2,r2,r2
 100500c:	1485883a 	add	r2,r2,r18
 1005010:	11000417 	ldw	r4,16(r2)
 1005014:	10076240 	call	1007624 <__hi0bits>
 1005018:	00c00804 	movi	r3,32
 100501c:	1887c83a 	sub	r3,r3,r2
 1005020:	003e5a06 	br	100498c <_dtoa_r+0x88c>
 1005024:	d9400717 	ldw	r5,28(sp)
 1005028:	d9801017 	ldw	r6,64(sp)
 100502c:	d9001617 	ldw	r4,88(sp)
 1005030:	10083b00 	call	10083b0 <__pow5mult>
 1005034:	d8800715 	stw	r2,28(sp)
 1005038:	003e4306 	br	1004948 <_dtoa_r+0x848>
 100503c:	d9800f17 	ldw	r6,60(sp)
 1005040:	d8800d17 	ldw	r2,52(sp)
 1005044:	d9800315 	stw	r6,12(sp)
 1005048:	d8800415 	stw	r2,16(sp)
 100504c:	d8c00b17 	ldw	r3,44(sp)
 1005050:	1805003a 	cmpeq	r2,r3,zero
 1005054:	1000e21e 	bne	r2,zero,10053e0 <_dtoa_r+0x12e0>
 1005058:	d9000317 	ldw	r4,12(sp)
 100505c:	0005883a 	mov	r2,zero
 1005060:	00cff834 	movhi	r3,16352
 1005064:	200c90fa 	slli	r6,r4,3
 1005068:	010040b4 	movhi	r4,258
 100506c:	21215004 	addi	r4,r4,-31424
 1005070:	180b883a 	mov	r5,r3
 1005074:	310d883a 	add	r6,r6,r4
 1005078:	327fff17 	ldw	r9,-4(r6)
 100507c:	323ffe17 	ldw	r8,-8(r6)
 1005080:	1009883a 	mov	r4,r2
 1005084:	480f883a 	mov	r7,r9
 1005088:	400d883a 	mov	r6,r8
 100508c:	100dd200 	call	100dd20 <__divdf3>
 1005090:	180b883a 	mov	r5,r3
 1005094:	b00d883a 	mov	r6,r22
 1005098:	b80f883a 	mov	r7,r23
 100509c:	1009883a 	mov	r4,r2
 10050a0:	100d8680 	call	100d868 <__subdf3>
 10050a4:	a80b883a 	mov	r5,r21
 10050a8:	a009883a 	mov	r4,r20
 10050ac:	d8c01915 	stw	r3,100(sp)
 10050b0:	d8801815 	stw	r2,96(sp)
 10050b4:	100e3a00 	call	100e3a0 <__fixdfsi>
 10050b8:	1009883a 	mov	r4,r2
 10050bc:	1027883a 	mov	r19,r2
 10050c0:	100e2a80 	call	100e2a8 <__floatsidf>
 10050c4:	a80b883a 	mov	r5,r21
 10050c8:	a009883a 	mov	r4,r20
 10050cc:	180f883a 	mov	r7,r3
 10050d0:	100d883a 	mov	r6,r2
 10050d4:	100d8680 	call	100d868 <__subdf3>
 10050d8:	d9801817 	ldw	r6,96(sp)
 10050dc:	1823883a 	mov	r17,r3
 10050e0:	d8801415 	stw	r2,80(sp)
 10050e4:	302d883a 	mov	r22,r6
 10050e8:	d9800517 	ldw	r6,20(sp)
 10050ec:	9cc00c04 	addi	r19,r19,48
 10050f0:	dc401515 	stw	r17,84(sp)
 10050f4:	d8c01917 	ldw	r3,100(sp)
 10050f8:	34c00005 	stb	r19,0(r6)
 10050fc:	d8800517 	ldw	r2,20(sp)
 1005100:	d9401917 	ldw	r5,100(sp)
 1005104:	d9801417 	ldw	r6,80(sp)
 1005108:	b009883a 	mov	r4,r22
 100510c:	880f883a 	mov	r7,r17
 1005110:	182f883a 	mov	r23,r3
 1005114:	17000044 	addi	fp,r2,1
 1005118:	100e0880 	call	100e088 <__gtdf2>
 100511c:	00804e16 	blt	zero,r2,1005258 <_dtoa_r+0x1158>
 1005120:	d9801417 	ldw	r6,80(sp)
 1005124:	0005883a 	mov	r2,zero
 1005128:	00cffc34 	movhi	r3,16368
 100512c:	180b883a 	mov	r5,r3
 1005130:	880f883a 	mov	r7,r17
 1005134:	1009883a 	mov	r4,r2
 1005138:	100d8680 	call	100d868 <__subdf3>
 100513c:	d9401917 	ldw	r5,100(sp)
 1005140:	180f883a 	mov	r7,r3
 1005144:	b009883a 	mov	r4,r22
 1005148:	100d883a 	mov	r6,r2
 100514c:	100e0880 	call	100e088 <__gtdf2>
 1005150:	00bda216 	blt	zero,r2,10047dc <_dtoa_r+0x6dc>
 1005154:	d8c00317 	ldw	r3,12(sp)
 1005158:	00800044 	movi	r2,1
 100515c:	10c01216 	blt	r2,r3,10051a8 <_dtoa_r+0x10a8>
 1005160:	003d4506 	br	1004678 <_dtoa_r+0x578>
 1005164:	d9801417 	ldw	r6,80(sp)
 1005168:	0005883a 	mov	r2,zero
 100516c:	00cffc34 	movhi	r3,16368
 1005170:	180b883a 	mov	r5,r3
 1005174:	880f883a 	mov	r7,r17
 1005178:	1009883a 	mov	r4,r2
 100517c:	100d8680 	call	100d868 <__subdf3>
 1005180:	d9c01b17 	ldw	r7,108(sp)
 1005184:	180b883a 	mov	r5,r3
 1005188:	1009883a 	mov	r4,r2
 100518c:	b00d883a 	mov	r6,r22
 1005190:	100e1980 	call	100e198 <__ltdf2>
 1005194:	103d9116 	blt	r2,zero,10047dc <_dtoa_r+0x6dc>
 1005198:	d9800517 	ldw	r6,20(sp)
 100519c:	d9000317 	ldw	r4,12(sp)
 10051a0:	3105883a 	add	r2,r6,r4
 10051a4:	e0bd3426 	beq	fp,r2,1004678 <_dtoa_r+0x578>
 10051a8:	04500934 	movhi	r17,16420
 10051ac:	0021883a 	mov	r16,zero
 10051b0:	b80b883a 	mov	r5,r23
 10051b4:	b009883a 	mov	r4,r22
 10051b8:	800d883a 	mov	r6,r16
 10051bc:	880f883a 	mov	r7,r17
 10051c0:	100d95c0 	call	100d95c <__muldf3>
 10051c4:	d9401517 	ldw	r5,84(sp)
 10051c8:	d9001417 	ldw	r4,80(sp)
 10051cc:	880f883a 	mov	r7,r17
 10051d0:	000d883a 	mov	r6,zero
 10051d4:	d8801a15 	stw	r2,104(sp)
 10051d8:	d8c01b15 	stw	r3,108(sp)
 10051dc:	100d95c0 	call	100d95c <__muldf3>
 10051e0:	180b883a 	mov	r5,r3
 10051e4:	1009883a 	mov	r4,r2
 10051e8:	1823883a 	mov	r17,r3
 10051ec:	1021883a 	mov	r16,r2
 10051f0:	100e3a00 	call	100e3a0 <__fixdfsi>
 10051f4:	1009883a 	mov	r4,r2
 10051f8:	102b883a 	mov	r21,r2
 10051fc:	100e2a80 	call	100e2a8 <__floatsidf>
 1005200:	880b883a 	mov	r5,r17
 1005204:	8009883a 	mov	r4,r16
 1005208:	180f883a 	mov	r7,r3
 100520c:	100d883a 	mov	r6,r2
 1005210:	100d8680 	call	100d868 <__subdf3>
 1005214:	1021883a 	mov	r16,r2
 1005218:	d9001b17 	ldw	r4,108(sp)
 100521c:	1823883a 	mov	r17,r3
 1005220:	dc001415 	stw	r16,80(sp)
 1005224:	ad400c04 	addi	r21,r21,48
 1005228:	dc401515 	stw	r17,84(sp)
 100522c:	d8801a17 	ldw	r2,104(sp)
 1005230:	e5400005 	stb	r21,0(fp)
 1005234:	202f883a 	mov	r23,r4
 1005238:	d9c01b17 	ldw	r7,108(sp)
 100523c:	d9001417 	ldw	r4,80(sp)
 1005240:	880b883a 	mov	r5,r17
 1005244:	100d883a 	mov	r6,r2
 1005248:	102d883a 	mov	r22,r2
 100524c:	e7000044 	addi	fp,fp,1
 1005250:	100e1980 	call	100e198 <__ltdf2>
 1005254:	103fc30e 	bge	r2,zero,1005164 <_dtoa_r+0x1064>
 1005258:	d9000417 	ldw	r4,16(sp)
 100525c:	d9000d15 	stw	r4,52(sp)
 1005260:	003d7106 	br	1004828 <_dtoa_r+0x728>
 1005264:	d9801717 	ldw	r6,92(sp)
 1005268:	00800084 	movi	r2,2
 100526c:	11bde60e 	bge	r2,r6,1004a08 <_dtoa_r+0x908>
 1005270:	203cfb1e 	bne	r4,zero,1004660 <_dtoa_r+0x560>
 1005274:	d9001617 	ldw	r4,88(sp)
 1005278:	900b883a 	mov	r5,r18
 100527c:	01800144 	movi	r6,5
 1005280:	000f883a 	mov	r7,zero
 1005284:	10082b00 	call	10082b0 <__multadd>
 1005288:	d9000717 	ldw	r4,28(sp)
 100528c:	100b883a 	mov	r5,r2
 1005290:	1025883a 	mov	r18,r2
 1005294:	10077580 	call	1007758 <__mcmp>
 1005298:	00bcf10e 	bge	zero,r2,1004660 <_dtoa_r+0x560>
 100529c:	d8c00d17 	ldw	r3,52(sp)
 10052a0:	d9000517 	ldw	r4,20(sp)
 10052a4:	d8000615 	stw	zero,24(sp)
 10052a8:	18c00044 	addi	r3,r3,1
 10052ac:	d8c00d15 	stw	r3,52(sp)
 10052b0:	00800c44 	movi	r2,49
 10052b4:	27000044 	addi	fp,r4,1
 10052b8:	20800005 	stb	r2,0(r4)
 10052bc:	003e8906 	br	1004ce4 <_dtoa_r+0xbe4>
 10052c0:	d8c00517 	ldw	r3,20(sp)
 10052c4:	003bc206 	br	10041d0 <_dtoa_r+0xd0>
 10052c8:	018040b4 	movhi	r6,258
 10052cc:	31a18204 	addi	r6,r6,-31224
 10052d0:	30c00917 	ldw	r3,36(r6)
 10052d4:	30800817 	ldw	r2,32(r6)
 10052d8:	d9001217 	ldw	r4,72(sp)
 10052dc:	d9401317 	ldw	r5,76(sp)
 10052e0:	180f883a 	mov	r7,r3
 10052e4:	100d883a 	mov	r6,r2
 10052e8:	100dd200 	call	100dd20 <__divdf3>
 10052ec:	948003cc 	andi	r18,r18,15
 10052f0:	058000c4 	movi	r22,3
 10052f4:	1029883a 	mov	r20,r2
 10052f8:	182b883a 	mov	r21,r3
 10052fc:	003c8906 	br	1004524 <_dtoa_r+0x424>
 1005300:	d9001017 	ldw	r4,64(sp)
 1005304:	d9800917 	ldw	r6,36(sp)
 1005308:	0025883a 	mov	r18,zero
 100530c:	1105c83a 	sub	r2,r2,r4
 1005310:	2089883a 	add	r4,r4,r2
 1005314:	308d883a 	add	r6,r6,r2
 1005318:	d9001015 	stw	r4,64(sp)
 100531c:	d9800915 	stw	r6,36(sp)
 1005320:	003e3206 	br	1004bec <_dtoa_r+0xaec>
 1005324:	28800044 	addi	r2,r5,1
 1005328:	27000044 	addi	fp,r4,1
 100532c:	20800005 	stb	r2,0(r4)
 1005330:	003e6c06 	br	1004ce4 <_dtoa_r+0xbe4>
 1005334:	d8800f17 	ldw	r2,60(sp)
 1005338:	00bce016 	blt	zero,r2,10046bc <_dtoa_r+0x5bc>
 100533c:	d9800f17 	ldw	r6,60(sp)
 1005340:	303cc51e 	bne	r6,zero,1004658 <_dtoa_r+0x558>
 1005344:	0005883a 	mov	r2,zero
 1005348:	00d00534 	movhi	r3,16404
 100534c:	980b883a 	mov	r5,r19
 1005350:	180f883a 	mov	r7,r3
 1005354:	9009883a 	mov	r4,r18
 1005358:	100d883a 	mov	r6,r2
 100535c:	100d95c0 	call	100d95c <__muldf3>
 1005360:	180b883a 	mov	r5,r3
 1005364:	a80f883a 	mov	r7,r21
 1005368:	1009883a 	mov	r4,r2
 100536c:	a00d883a 	mov	r6,r20
 1005370:	100e1100 	call	100e110 <__gedf2>
 1005374:	103cb80e 	bge	r2,zero,1004658 <_dtoa_r+0x558>
 1005378:	0027883a 	mov	r19,zero
 100537c:	0025883a 	mov	r18,zero
 1005380:	003fc606 	br	100529c <_dtoa_r+0x119c>
 1005384:	99400117 	ldw	r5,4(r19)
 1005388:	d9001617 	ldw	r4,88(sp)
 100538c:	1007b7c0 	call	1007b7c <_Balloc>
 1005390:	99800417 	ldw	r6,16(r19)
 1005394:	11000304 	addi	r4,r2,12
 1005398:	99400304 	addi	r5,r19,12
 100539c:	318d883a 	add	r6,r6,r6
 10053a0:	318d883a 	add	r6,r6,r6
 10053a4:	31800204 	addi	r6,r6,8
 10053a8:	1023883a 	mov	r17,r2
 10053ac:	10073e40 	call	10073e4 <memcpy>
 10053b0:	d9001617 	ldw	r4,88(sp)
 10053b4:	880b883a 	mov	r5,r17
 10053b8:	01800044 	movi	r6,1
 10053bc:	1007f400 	call	1007f40 <__lshift>
 10053c0:	100b883a 	mov	r5,r2
 10053c4:	003d9c06 	br	1004a38 <_dtoa_r+0x938>
 10053c8:	00800e44 	movi	r2,57
 10053cc:	b8807026 	beq	r23,r2,1005590 <_dtoa_r+0x1490>
 10053d0:	b8800044 	addi	r2,r23,1
 10053d4:	b7000044 	addi	fp,r22,1
 10053d8:	b0800005 	stb	r2,0(r22)
 10053dc:	003e4106 	br	1004ce4 <_dtoa_r+0xbe4>
 10053e0:	d8800317 	ldw	r2,12(sp)
 10053e4:	018040b4 	movhi	r6,258
 10053e8:	31a15004 	addi	r6,r6,-31424
 10053ec:	b009883a 	mov	r4,r22
 10053f0:	100e90fa 	slli	r7,r2,3
 10053f4:	b80b883a 	mov	r5,r23
 10053f8:	398f883a 	add	r7,r7,r6
 10053fc:	38bffe17 	ldw	r2,-8(r7)
 1005400:	d9800517 	ldw	r6,20(sp)
 1005404:	38ffff17 	ldw	r3,-4(r7)
 1005408:	37000044 	addi	fp,r6,1
 100540c:	180f883a 	mov	r7,r3
 1005410:	100d883a 	mov	r6,r2
 1005414:	100d95c0 	call	100d95c <__muldf3>
 1005418:	a80b883a 	mov	r5,r21
 100541c:	a009883a 	mov	r4,r20
 1005420:	182f883a 	mov	r23,r3
 1005424:	102d883a 	mov	r22,r2
 1005428:	100e3a00 	call	100e3a0 <__fixdfsi>
 100542c:	1009883a 	mov	r4,r2
 1005430:	1027883a 	mov	r19,r2
 1005434:	100e2a80 	call	100e2a8 <__floatsidf>
 1005438:	a80b883a 	mov	r5,r21
 100543c:	a009883a 	mov	r4,r20
 1005440:	180f883a 	mov	r7,r3
 1005444:	100d883a 	mov	r6,r2
 1005448:	100d8680 	call	100d868 <__subdf3>
 100544c:	180b883a 	mov	r5,r3
 1005450:	d8c00517 	ldw	r3,20(sp)
 1005454:	9cc00c04 	addi	r19,r19,48
 1005458:	1009883a 	mov	r4,r2
 100545c:	1cc00005 	stb	r19,0(r3)
 1005460:	2021883a 	mov	r16,r4
 1005464:	d9000317 	ldw	r4,12(sp)
 1005468:	00800044 	movi	r2,1
 100546c:	2823883a 	mov	r17,r5
 1005470:	20802226 	beq	r4,r2,10054fc <_dtoa_r+0x13fc>
 1005474:	1029883a 	mov	r20,r2
 1005478:	0005883a 	mov	r2,zero
 100547c:	00d00934 	movhi	r3,16420
 1005480:	180f883a 	mov	r7,r3
 1005484:	100d883a 	mov	r6,r2
 1005488:	880b883a 	mov	r5,r17
 100548c:	8009883a 	mov	r4,r16
 1005490:	100d95c0 	call	100d95c <__muldf3>
 1005494:	180b883a 	mov	r5,r3
 1005498:	1009883a 	mov	r4,r2
 100549c:	1823883a 	mov	r17,r3
 10054a0:	1021883a 	mov	r16,r2
 10054a4:	100e3a00 	call	100e3a0 <__fixdfsi>
 10054a8:	1009883a 	mov	r4,r2
 10054ac:	102b883a 	mov	r21,r2
 10054b0:	100e2a80 	call	100e2a8 <__floatsidf>
 10054b4:	880b883a 	mov	r5,r17
 10054b8:	8009883a 	mov	r4,r16
 10054bc:	180f883a 	mov	r7,r3
 10054c0:	100d883a 	mov	r6,r2
 10054c4:	100d8680 	call	100d868 <__subdf3>
 10054c8:	180b883a 	mov	r5,r3
 10054cc:	d8c00517 	ldw	r3,20(sp)
 10054d0:	1009883a 	mov	r4,r2
 10054d4:	ad400c04 	addi	r21,r21,48
 10054d8:	1d05883a 	add	r2,r3,r20
 10054dc:	15400005 	stb	r21,0(r2)
 10054e0:	2021883a 	mov	r16,r4
 10054e4:	d9000317 	ldw	r4,12(sp)
 10054e8:	a5000044 	addi	r20,r20,1
 10054ec:	2823883a 	mov	r17,r5
 10054f0:	a13fe11e 	bne	r20,r4,1005478 <_dtoa_r+0x1378>
 10054f4:	e505883a 	add	r2,fp,r20
 10054f8:	173fffc4 	addi	fp,r2,-1
 10054fc:	0025883a 	mov	r18,zero
 1005500:	04cff834 	movhi	r19,16352
 1005504:	b009883a 	mov	r4,r22
 1005508:	b80b883a 	mov	r5,r23
 100550c:	900d883a 	mov	r6,r18
 1005510:	980f883a 	mov	r7,r19
 1005514:	100d8e80 	call	100d8e8 <__adddf3>
 1005518:	180b883a 	mov	r5,r3
 100551c:	1009883a 	mov	r4,r2
 1005520:	800d883a 	mov	r6,r16
 1005524:	880f883a 	mov	r7,r17
 1005528:	100e1980 	call	100e198 <__ltdf2>
 100552c:	103cab16 	blt	r2,zero,10047dc <_dtoa_r+0x6dc>
 1005530:	0009883a 	mov	r4,zero
 1005534:	980b883a 	mov	r5,r19
 1005538:	b80f883a 	mov	r7,r23
 100553c:	b00d883a 	mov	r6,r22
 1005540:	100d8680 	call	100d868 <__subdf3>
 1005544:	180b883a 	mov	r5,r3
 1005548:	880f883a 	mov	r7,r17
 100554c:	1009883a 	mov	r4,r2
 1005550:	800d883a 	mov	r6,r16
 1005554:	100e0880 	call	100e088 <__gtdf2>
 1005558:	00bc470e 	bge	zero,r2,1004678 <_dtoa_r+0x578>
 100555c:	00c00c04 	movi	r3,48
 1005560:	e73fffc4 	addi	fp,fp,-1
 1005564:	e0800007 	ldb	r2,0(fp)
 1005568:	10fffd26 	beq	r2,r3,1005560 <_dtoa_r+0x1460>
 100556c:	d9800417 	ldw	r6,16(sp)
 1005570:	e7000044 	addi	fp,fp,1
 1005574:	d9800d15 	stw	r6,52(sp)
 1005578:	003cab06 	br	1004828 <_dtoa_r+0x728>
 100557c:	d8c00f17 	ldw	r3,60(sp)
 1005580:	d9001117 	ldw	r4,68(sp)
 1005584:	20e1c83a 	sub	r16,r4,r3
 1005588:	0007883a 	mov	r3,zero
 100558c:	003d9b06 	br	1004bfc <_dtoa_r+0xafc>
 1005590:	00800e44 	movi	r2,57
 1005594:	b0800005 	stb	r2,0(r22)
 1005598:	b5800044 	addi	r22,r22,1
 100559c:	003dc106 	br	1004ca4 <_dtoa_r+0xba4>
 10055a0:	05800084 	movi	r22,2
 10055a4:	003bf706 	br	1004584 <_dtoa_r+0x484>
 10055a8:	d9000f17 	ldw	r4,60(sp)
 10055ac:	013c000e 	bge	zero,r4,10045b0 <_dtoa_r+0x4b0>
 10055b0:	d9800e17 	ldw	r6,56(sp)
 10055b4:	01bc300e 	bge	zero,r6,1004678 <_dtoa_r+0x578>
 10055b8:	0005883a 	mov	r2,zero
 10055bc:	00d00934 	movhi	r3,16420
 10055c0:	a80b883a 	mov	r5,r21
 10055c4:	180f883a 	mov	r7,r3
 10055c8:	a009883a 	mov	r4,r20
 10055cc:	100d883a 	mov	r6,r2
 10055d0:	100d95c0 	call	100d95c <__muldf3>
 10055d4:	b1000044 	addi	r4,r22,1
 10055d8:	1021883a 	mov	r16,r2
 10055dc:	1823883a 	mov	r17,r3
 10055e0:	100e2a80 	call	100e2a8 <__floatsidf>
 10055e4:	880b883a 	mov	r5,r17
 10055e8:	8009883a 	mov	r4,r16
 10055ec:	180f883a 	mov	r7,r3
 10055f0:	100d883a 	mov	r6,r2
 10055f4:	100d95c0 	call	100d95c <__muldf3>
 10055f8:	0011883a 	mov	r8,zero
 10055fc:	02500734 	movhi	r9,16412
 1005600:	180b883a 	mov	r5,r3
 1005604:	480f883a 	mov	r7,r9
 1005608:	1009883a 	mov	r4,r2
 100560c:	400d883a 	mov	r6,r8
 1005610:	100d8e80 	call	100d8e8 <__adddf3>
 1005614:	102d883a 	mov	r22,r2
 1005618:	00bf3034 	movhi	r2,64704
 100561c:	10ef883a 	add	r23,r2,r3
 1005620:	d8800d17 	ldw	r2,52(sp)
 1005624:	d8c00e17 	ldw	r3,56(sp)
 1005628:	8029883a 	mov	r20,r16
 100562c:	10bfffc4 	addi	r2,r2,-1
 1005630:	882b883a 	mov	r21,r17
 1005634:	d8800415 	stw	r2,16(sp)
 1005638:	d8c00315 	stw	r3,12(sp)
 100563c:	003e8306 	br	100504c <_dtoa_r+0xf4c>
 1005640:	d8800117 	ldw	r2,4(sp)
 1005644:	dc001117 	ldw	r16,68(sp)
 1005648:	dc801017 	ldw	r18,64(sp)
 100564c:	00c00d84 	movi	r3,54
 1005650:	1887c83a 	sub	r3,r3,r2
 1005654:	003d6906 	br	1004bfc <_dtoa_r+0xafc>
 1005658:	01800044 	movi	r6,1
 100565c:	3021883a 	mov	r16,r6
 1005660:	d9800f15 	stw	r6,60(sp)
 1005664:	d9802615 	stw	r6,152(sp)
 1005668:	d9800e15 	stw	r6,56(sp)
 100566c:	003b9306 	br	10044bc <_dtoa_r+0x3bc>
 1005670:	b021883a 	mov	r16,r22
 1005674:	dd800f15 	stw	r22,60(sp)
 1005678:	003b9006 	br	10044bc <_dtoa_r+0x3bc>
 100567c:	103e221e 	bne	r2,zero,1004f08 <_dtoa_r+0xe08>
 1005680:	b880004c 	andi	r2,r23,1
 1005684:	1005003a 	cmpeq	r2,r2,zero
 1005688:	103e1f1e 	bne	r2,zero,1004f08 <_dtoa_r+0xe08>
 100568c:	003e1b06 	br	1004efc <_dtoa_r+0xdfc>
 1005690:	d9001617 	ldw	r4,88(sp)
 1005694:	980b883a 	mov	r5,r19
 1005698:	01800284 	movi	r6,10
 100569c:	000f883a 	mov	r7,zero
 10056a0:	10082b00 	call	10082b0 <__multadd>
 10056a4:	d8c00e17 	ldw	r3,56(sp)
 10056a8:	1027883a 	mov	r19,r2
 10056ac:	d8c00f15 	stw	r3,60(sp)
 10056b0:	003cd306 	br	1004a00 <_dtoa_r+0x900>

010056b4 <_fflush_r>:
 10056b4:	defffb04 	addi	sp,sp,-20
 10056b8:	dcc00315 	stw	r19,12(sp)
 10056bc:	dc800215 	stw	r18,8(sp)
 10056c0:	dfc00415 	stw	ra,16(sp)
 10056c4:	dc400115 	stw	r17,4(sp)
 10056c8:	dc000015 	stw	r16,0(sp)
 10056cc:	2027883a 	mov	r19,r4
 10056d0:	2825883a 	mov	r18,r5
 10056d4:	20000226 	beq	r4,zero,10056e0 <_fflush_r+0x2c>
 10056d8:	20800e17 	ldw	r2,56(r4)
 10056dc:	10005626 	beq	r2,zero,1005838 <_fflush_r+0x184>
 10056e0:	9100030b 	ldhu	r4,12(r18)
 10056e4:	20ffffcc 	andi	r3,r4,65535
 10056e8:	18e0001c 	xori	r3,r3,32768
 10056ec:	18e00004 	addi	r3,r3,-32768
 10056f0:	1880020c 	andi	r2,r3,8
 10056f4:	1000261e 	bne	r2,zero,1005790 <_fflush_r+0xdc>
 10056f8:	90c00117 	ldw	r3,4(r18)
 10056fc:	20820014 	ori	r2,r4,2048
 1005700:	9080030d 	sth	r2,12(r18)
 1005704:	1009883a 	mov	r4,r2
 1005708:	00c0400e 	bge	zero,r3,100580c <_fflush_r+0x158>
 100570c:	92000a17 	ldw	r8,40(r18)
 1005710:	40004026 	beq	r8,zero,1005814 <_fflush_r+0x160>
 1005714:	2084000c 	andi	r2,r4,4096
 1005718:	10005326 	beq	r2,zero,1005868 <_fflush_r+0x1b4>
 100571c:	94001417 	ldw	r16,80(r18)
 1005720:	9080030b 	ldhu	r2,12(r18)
 1005724:	1080010c 	andi	r2,r2,4
 1005728:	1000481e 	bne	r2,zero,100584c <_fflush_r+0x198>
 100572c:	91400717 	ldw	r5,28(r18)
 1005730:	9809883a 	mov	r4,r19
 1005734:	800d883a 	mov	r6,r16
 1005738:	000f883a 	mov	r7,zero
 100573c:	403ee83a 	callr	r8
 1005740:	8080261e 	bne	r16,r2,10057dc <_fflush_r+0x128>
 1005744:	9080030b 	ldhu	r2,12(r18)
 1005748:	91000417 	ldw	r4,16(r18)
 100574c:	90000115 	stw	zero,4(r18)
 1005750:	10bdffcc 	andi	r2,r2,63487
 1005754:	10ffffcc 	andi	r3,r2,65535
 1005758:	18c4000c 	andi	r3,r3,4096
 100575c:	9080030d 	sth	r2,12(r18)
 1005760:	91000015 	stw	r4,0(r18)
 1005764:	18002b26 	beq	r3,zero,1005814 <_fflush_r+0x160>
 1005768:	0007883a 	mov	r3,zero
 100576c:	1805883a 	mov	r2,r3
 1005770:	94001415 	stw	r16,80(r18)
 1005774:	dfc00417 	ldw	ra,16(sp)
 1005778:	dcc00317 	ldw	r19,12(sp)
 100577c:	dc800217 	ldw	r18,8(sp)
 1005780:	dc400117 	ldw	r17,4(sp)
 1005784:	dc000017 	ldw	r16,0(sp)
 1005788:	dec00504 	addi	sp,sp,20
 100578c:	f800283a 	ret
 1005790:	94400417 	ldw	r17,16(r18)
 1005794:	88001f26 	beq	r17,zero,1005814 <_fflush_r+0x160>
 1005798:	90800017 	ldw	r2,0(r18)
 100579c:	18c000cc 	andi	r3,r3,3
 10057a0:	94400015 	stw	r17,0(r18)
 10057a4:	1461c83a 	sub	r16,r2,r17
 10057a8:	18002526 	beq	r3,zero,1005840 <_fflush_r+0x18c>
 10057ac:	0005883a 	mov	r2,zero
 10057b0:	90800215 	stw	r2,8(r18)
 10057b4:	0400170e 	bge	zero,r16,1005814 <_fflush_r+0x160>
 10057b8:	90c00917 	ldw	r3,36(r18)
 10057bc:	91400717 	ldw	r5,28(r18)
 10057c0:	880d883a 	mov	r6,r17
 10057c4:	800f883a 	mov	r7,r16
 10057c8:	9809883a 	mov	r4,r19
 10057cc:	183ee83a 	callr	r3
 10057d0:	88a3883a 	add	r17,r17,r2
 10057d4:	80a1c83a 	sub	r16,r16,r2
 10057d8:	00bff616 	blt	zero,r2,10057b4 <_fflush_r+0x100>
 10057dc:	9080030b 	ldhu	r2,12(r18)
 10057e0:	00ffffc4 	movi	r3,-1
 10057e4:	10801014 	ori	r2,r2,64
 10057e8:	9080030d 	sth	r2,12(r18)
 10057ec:	1805883a 	mov	r2,r3
 10057f0:	dfc00417 	ldw	ra,16(sp)
 10057f4:	dcc00317 	ldw	r19,12(sp)
 10057f8:	dc800217 	ldw	r18,8(sp)
 10057fc:	dc400117 	ldw	r17,4(sp)
 1005800:	dc000017 	ldw	r16,0(sp)
 1005804:	dec00504 	addi	sp,sp,20
 1005808:	f800283a 	ret
 100580c:	90800f17 	ldw	r2,60(r18)
 1005810:	00bfbe16 	blt	zero,r2,100570c <_fflush_r+0x58>
 1005814:	0007883a 	mov	r3,zero
 1005818:	1805883a 	mov	r2,r3
 100581c:	dfc00417 	ldw	ra,16(sp)
 1005820:	dcc00317 	ldw	r19,12(sp)
 1005824:	dc800217 	ldw	r18,8(sp)
 1005828:	dc400117 	ldw	r17,4(sp)
 100582c:	dc000017 	ldw	r16,0(sp)
 1005830:	dec00504 	addi	sp,sp,20
 1005834:	f800283a 	ret
 1005838:	100594c0 	call	100594c <__sinit>
 100583c:	003fa806 	br	10056e0 <_fflush_r+0x2c>
 1005840:	90800517 	ldw	r2,20(r18)
 1005844:	90800215 	stw	r2,8(r18)
 1005848:	003fda06 	br	10057b4 <_fflush_r+0x100>
 100584c:	90800117 	ldw	r2,4(r18)
 1005850:	90c00c17 	ldw	r3,48(r18)
 1005854:	80a1c83a 	sub	r16,r16,r2
 1005858:	183fb426 	beq	r3,zero,100572c <_fflush_r+0x78>
 100585c:	90800f17 	ldw	r2,60(r18)
 1005860:	80a1c83a 	sub	r16,r16,r2
 1005864:	003fb106 	br	100572c <_fflush_r+0x78>
 1005868:	91400717 	ldw	r5,28(r18)
 100586c:	9809883a 	mov	r4,r19
 1005870:	000d883a 	mov	r6,zero
 1005874:	01c00044 	movi	r7,1
 1005878:	403ee83a 	callr	r8
 100587c:	1021883a 	mov	r16,r2
 1005880:	00bfffc4 	movi	r2,-1
 1005884:	80800226 	beq	r16,r2,1005890 <_fflush_r+0x1dc>
 1005888:	92000a17 	ldw	r8,40(r18)
 100588c:	003fa406 	br	1005720 <_fflush_r+0x6c>
 1005890:	98c00017 	ldw	r3,0(r19)
 1005894:	00800744 	movi	r2,29
 1005898:	18bfde26 	beq	r3,r2,1005814 <_fflush_r+0x160>
 100589c:	9080030b 	ldhu	r2,12(r18)
 10058a0:	8007883a 	mov	r3,r16
 10058a4:	10801014 	ori	r2,r2,64
 10058a8:	9080030d 	sth	r2,12(r18)
 10058ac:	003fcf06 	br	10057ec <_fflush_r+0x138>

010058b0 <fflush>:
 10058b0:	01404034 	movhi	r5,256
 10058b4:	2955ad04 	addi	r5,r5,22196
 10058b8:	2007883a 	mov	r3,r4
 10058bc:	20000526 	beq	r4,zero,10058d4 <fflush+0x24>
 10058c0:	008040b4 	movhi	r2,258
 10058c4:	10a8f804 	addi	r2,r2,-23584
 10058c8:	11000017 	ldw	r4,0(r2)
 10058cc:	180b883a 	mov	r5,r3
 10058d0:	10056b41 	jmpi	10056b4 <_fflush_r>
 10058d4:	008040b4 	movhi	r2,258
 10058d8:	10a8f904 	addi	r2,r2,-23580
 10058dc:	11000017 	ldw	r4,0(r2)
 10058e0:	10066bc1 	jmpi	10066bc <_fwalk_reent>

010058e4 <std>:
 10058e4:	00804074 	movhi	r2,257
 10058e8:	10a41004 	addi	r2,r2,-28608
 10058ec:	20800b15 	stw	r2,44(r4)
 10058f0:	00804074 	movhi	r2,257
 10058f4:	10a44b04 	addi	r2,r2,-28372
 10058f8:	20800815 	stw	r2,32(r4)
 10058fc:	00c04074 	movhi	r3,257
 1005900:	18e42c04 	addi	r3,r3,-28496
 1005904:	00804074 	movhi	r2,257
 1005908:	10a41204 	addi	r2,r2,-28600
 100590c:	2140030d 	sth	r5,12(r4)
 1005910:	2180038d 	sth	r6,14(r4)
 1005914:	20c00915 	stw	r3,36(r4)
 1005918:	20800a15 	stw	r2,40(r4)
 100591c:	20000015 	stw	zero,0(r4)
 1005920:	20000115 	stw	zero,4(r4)
 1005924:	20000215 	stw	zero,8(r4)
 1005928:	20000415 	stw	zero,16(r4)
 100592c:	20000515 	stw	zero,20(r4)
 1005930:	20000615 	stw	zero,24(r4)
 1005934:	21000715 	stw	r4,28(r4)
 1005938:	f800283a 	ret

0100593c <__sfp_lock_acquire>:
 100593c:	f800283a 	ret

01005940 <__sfp_lock_release>:
 1005940:	f800283a 	ret

01005944 <__sinit_lock_acquire>:
 1005944:	f800283a 	ret

01005948 <__sinit_lock_release>:
 1005948:	f800283a 	ret

0100594c <__sinit>:
 100594c:	20800e17 	ldw	r2,56(r4)
 1005950:	defffd04 	addi	sp,sp,-12
 1005954:	dc400115 	stw	r17,4(sp)
 1005958:	dc000015 	stw	r16,0(sp)
 100595c:	dfc00215 	stw	ra,8(sp)
 1005960:	04400044 	movi	r17,1
 1005964:	01400104 	movi	r5,4
 1005968:	000d883a 	mov	r6,zero
 100596c:	2021883a 	mov	r16,r4
 1005970:	2200bb04 	addi	r8,r4,748
 1005974:	200f883a 	mov	r7,r4
 1005978:	10000526 	beq	r2,zero,1005990 <__sinit+0x44>
 100597c:	dfc00217 	ldw	ra,8(sp)
 1005980:	dc400117 	ldw	r17,4(sp)
 1005984:	dc000017 	ldw	r16,0(sp)
 1005988:	dec00304 	addi	sp,sp,12
 100598c:	f800283a 	ret
 1005990:	21000117 	ldw	r4,4(r4)
 1005994:	00804034 	movhi	r2,256
 1005998:	10968c04 	addi	r2,r2,23088
 100599c:	00c000c4 	movi	r3,3
 10059a0:	80800f15 	stw	r2,60(r16)
 10059a4:	80c0b915 	stw	r3,740(r16)
 10059a8:	8200ba15 	stw	r8,744(r16)
 10059ac:	84400e15 	stw	r17,56(r16)
 10059b0:	8000b815 	stw	zero,736(r16)
 10059b4:	10058e40 	call	10058e4 <std>
 10059b8:	81000217 	ldw	r4,8(r16)
 10059bc:	880d883a 	mov	r6,r17
 10059c0:	800f883a 	mov	r7,r16
 10059c4:	01400284 	movi	r5,10
 10059c8:	10058e40 	call	10058e4 <std>
 10059cc:	81000317 	ldw	r4,12(r16)
 10059d0:	800f883a 	mov	r7,r16
 10059d4:	01400484 	movi	r5,18
 10059d8:	01800084 	movi	r6,2
 10059dc:	dfc00217 	ldw	ra,8(sp)
 10059e0:	dc400117 	ldw	r17,4(sp)
 10059e4:	dc000017 	ldw	r16,0(sp)
 10059e8:	dec00304 	addi	sp,sp,12
 10059ec:	10058e41 	jmpi	10058e4 <std>

010059f0 <__fp_lock>:
 10059f0:	0005883a 	mov	r2,zero
 10059f4:	f800283a 	ret

010059f8 <__fp_unlock>:
 10059f8:	0005883a 	mov	r2,zero
 10059fc:	f800283a 	ret

01005a00 <__fp_unlock_all>:
 1005a00:	008040b4 	movhi	r2,258
 1005a04:	10a8f804 	addi	r2,r2,-23584
 1005a08:	11000017 	ldw	r4,0(r2)
 1005a0c:	01404034 	movhi	r5,256
 1005a10:	29567e04 	addi	r5,r5,23032
 1005a14:	10067841 	jmpi	1006784 <_fwalk>

01005a18 <__fp_lock_all>:
 1005a18:	008040b4 	movhi	r2,258
 1005a1c:	10a8f804 	addi	r2,r2,-23584
 1005a20:	11000017 	ldw	r4,0(r2)
 1005a24:	01404034 	movhi	r5,256
 1005a28:	29567c04 	addi	r5,r5,23024
 1005a2c:	10067841 	jmpi	1006784 <_fwalk>

01005a30 <_cleanup_r>:
 1005a30:	01404074 	movhi	r5,257
 1005a34:	296e2e04 	addi	r5,r5,-18248
 1005a38:	10067841 	jmpi	1006784 <_fwalk>

01005a3c <_cleanup>:
 1005a3c:	008040b4 	movhi	r2,258
 1005a40:	10a8f904 	addi	r2,r2,-23580
 1005a44:	11000017 	ldw	r4,0(r2)
 1005a48:	1005a301 	jmpi	1005a30 <_cleanup_r>

01005a4c <__sfmoreglue>:
 1005a4c:	defffc04 	addi	sp,sp,-16
 1005a50:	dc400115 	stw	r17,4(sp)
 1005a54:	2c401724 	muli	r17,r5,92
 1005a58:	dc800215 	stw	r18,8(sp)
 1005a5c:	2825883a 	mov	r18,r5
 1005a60:	89400304 	addi	r5,r17,12
 1005a64:	dc000015 	stw	r16,0(sp)
 1005a68:	dfc00315 	stw	ra,12(sp)
 1005a6c:	1006ac00 	call	1006ac0 <_malloc_r>
 1005a70:	0021883a 	mov	r16,zero
 1005a74:	880d883a 	mov	r6,r17
 1005a78:	000b883a 	mov	r5,zero
 1005a7c:	10000626 	beq	r2,zero,1005a98 <__sfmoreglue+0x4c>
 1005a80:	11000304 	addi	r4,r2,12
 1005a84:	14800115 	stw	r18,4(r2)
 1005a88:	10000015 	stw	zero,0(r2)
 1005a8c:	11000215 	stw	r4,8(r2)
 1005a90:	1021883a 	mov	r16,r2
 1005a94:	10075640 	call	1007564 <memset>
 1005a98:	8005883a 	mov	r2,r16
 1005a9c:	dfc00317 	ldw	ra,12(sp)
 1005aa0:	dc800217 	ldw	r18,8(sp)
 1005aa4:	dc400117 	ldw	r17,4(sp)
 1005aa8:	dc000017 	ldw	r16,0(sp)
 1005aac:	dec00404 	addi	sp,sp,16
 1005ab0:	f800283a 	ret

01005ab4 <__sfp>:
 1005ab4:	defffd04 	addi	sp,sp,-12
 1005ab8:	008040b4 	movhi	r2,258
 1005abc:	10a8f904 	addi	r2,r2,-23580
 1005ac0:	dc000015 	stw	r16,0(sp)
 1005ac4:	14000017 	ldw	r16,0(r2)
 1005ac8:	dc400115 	stw	r17,4(sp)
 1005acc:	dfc00215 	stw	ra,8(sp)
 1005ad0:	80800e17 	ldw	r2,56(r16)
 1005ad4:	2023883a 	mov	r17,r4
 1005ad8:	10002626 	beq	r2,zero,1005b74 <__sfp+0xc0>
 1005adc:	8400b804 	addi	r16,r16,736
 1005ae0:	80800117 	ldw	r2,4(r16)
 1005ae4:	81000217 	ldw	r4,8(r16)
 1005ae8:	10ffffc4 	addi	r3,r2,-1
 1005aec:	18000916 	blt	r3,zero,1005b14 <__sfp+0x60>
 1005af0:	2080030f 	ldh	r2,12(r4)
 1005af4:	10000b26 	beq	r2,zero,1005b24 <__sfp+0x70>
 1005af8:	017fffc4 	movi	r5,-1
 1005afc:	00000206 	br	1005b08 <__sfp+0x54>
 1005b00:	2080030f 	ldh	r2,12(r4)
 1005b04:	10000726 	beq	r2,zero,1005b24 <__sfp+0x70>
 1005b08:	18ffffc4 	addi	r3,r3,-1
 1005b0c:	21001704 	addi	r4,r4,92
 1005b10:	197ffb1e 	bne	r3,r5,1005b00 <__sfp+0x4c>
 1005b14:	80800017 	ldw	r2,0(r16)
 1005b18:	10001926 	beq	r2,zero,1005b80 <__sfp+0xcc>
 1005b1c:	1021883a 	mov	r16,r2
 1005b20:	003fef06 	br	1005ae0 <__sfp+0x2c>
 1005b24:	00bfffc4 	movi	r2,-1
 1005b28:	00c00044 	movi	r3,1
 1005b2c:	2080038d 	sth	r2,14(r4)
 1005b30:	20c0030d 	sth	r3,12(r4)
 1005b34:	20000015 	stw	zero,0(r4)
 1005b38:	20000215 	stw	zero,8(r4)
 1005b3c:	20000115 	stw	zero,4(r4)
 1005b40:	20000415 	stw	zero,16(r4)
 1005b44:	20000515 	stw	zero,20(r4)
 1005b48:	20000615 	stw	zero,24(r4)
 1005b4c:	20000c15 	stw	zero,48(r4)
 1005b50:	20000d15 	stw	zero,52(r4)
 1005b54:	20001115 	stw	zero,68(r4)
 1005b58:	20001215 	stw	zero,72(r4)
 1005b5c:	2005883a 	mov	r2,r4
 1005b60:	dfc00217 	ldw	ra,8(sp)
 1005b64:	dc400117 	ldw	r17,4(sp)
 1005b68:	dc000017 	ldw	r16,0(sp)
 1005b6c:	dec00304 	addi	sp,sp,12
 1005b70:	f800283a 	ret
 1005b74:	8009883a 	mov	r4,r16
 1005b78:	100594c0 	call	100594c <__sinit>
 1005b7c:	003fd706 	br	1005adc <__sfp+0x28>
 1005b80:	8809883a 	mov	r4,r17
 1005b84:	01400104 	movi	r5,4
 1005b88:	1005a4c0 	call	1005a4c <__sfmoreglue>
 1005b8c:	80800015 	stw	r2,0(r16)
 1005b90:	103fe21e 	bne	r2,zero,1005b1c <__sfp+0x68>
 1005b94:	00800304 	movi	r2,12
 1005b98:	0009883a 	mov	r4,zero
 1005b9c:	88800015 	stw	r2,0(r17)
 1005ba0:	003fee06 	br	1005b5c <__sfp+0xa8>

01005ba4 <_fread_r>:
 1005ba4:	defff504 	addi	sp,sp,-44
 1005ba8:	ddc00815 	stw	r23,32(sp)
 1005bac:	39af383a 	mul	r23,r7,r6
 1005bb0:	df000915 	stw	fp,36(sp)
 1005bb4:	dd800715 	stw	r22,28(sp)
 1005bb8:	dcc00415 	stw	r19,16(sp)
 1005bbc:	dc000115 	stw	r16,4(sp)
 1005bc0:	dfc00a15 	stw	ra,40(sp)
 1005bc4:	dd400615 	stw	r21,24(sp)
 1005bc8:	dd000515 	stw	r20,20(sp)
 1005bcc:	dc800315 	stw	r18,12(sp)
 1005bd0:	dc400215 	stw	r17,8(sp)
 1005bd4:	d9800015 	stw	r6,0(sp)
 1005bd8:	3839883a 	mov	fp,r7
 1005bdc:	2821883a 	mov	r16,r5
 1005be0:	202d883a 	mov	r22,r4
 1005be4:	dcc00b17 	ldw	r19,44(sp)
 1005be8:	b8005926 	beq	r23,zero,1005d50 <_fread_r+0x1ac>
 1005bec:	20000226 	beq	r4,zero,1005bf8 <_fread_r+0x54>
 1005bf0:	20800e17 	ldw	r2,56(r4)
 1005bf4:	10005826 	beq	r2,zero,1005d58 <_fread_r+0x1b4>
 1005bf8:	9c400117 	ldw	r17,4(r19)
 1005bfc:	88005916 	blt	r17,zero,1005d64 <_fread_r+0x1c0>
 1005c00:	9880030b 	ldhu	r2,12(r19)
 1005c04:	8029883a 	mov	r20,r16
 1005c08:	1080008c 	andi	r2,r2,2
 1005c0c:	1000221e 	bne	r2,zero,1005c98 <_fread_r+0xf4>
 1005c10:	b825883a 	mov	r18,r23
 1005c14:	00000106 	br	1005c1c <_fread_r+0x78>
 1005c18:	9c400117 	ldw	r17,4(r19)
 1005c1c:	a009883a 	mov	r4,r20
 1005c20:	880d883a 	mov	r6,r17
 1005c24:	8c80542e 	bgeu	r17,r18,1005d78 <_fread_r+0x1d4>
 1005c28:	99400017 	ldw	r5,0(r19)
 1005c2c:	a469883a 	add	r20,r20,r17
 1005c30:	9465c83a 	sub	r18,r18,r17
 1005c34:	10073e40 	call	10073e4 <memcpy>
 1005c38:	98800017 	ldw	r2,0(r19)
 1005c3c:	b009883a 	mov	r4,r22
 1005c40:	980b883a 	mov	r5,r19
 1005c44:	1461883a 	add	r16,r2,r17
 1005c48:	9c000015 	stw	r16,0(r19)
 1005c4c:	1008be40 	call	1008be4 <__srefill_r>
 1005c50:	103ff126 	beq	r2,zero,1005c18 <_fread_r+0x74>
 1005c54:	d9400017 	ldw	r5,0(sp)
 1005c58:	bc89c83a 	sub	r4,r23,r18
 1005c5c:	100e7bc0 	call	100e7bc <__udivsi3>
 1005c60:	1039883a 	mov	fp,r2
 1005c64:	e005883a 	mov	r2,fp
 1005c68:	dfc00a17 	ldw	ra,40(sp)
 1005c6c:	df000917 	ldw	fp,36(sp)
 1005c70:	ddc00817 	ldw	r23,32(sp)
 1005c74:	dd800717 	ldw	r22,28(sp)
 1005c78:	dd400617 	ldw	r21,24(sp)
 1005c7c:	dd000517 	ldw	r20,20(sp)
 1005c80:	dcc00417 	ldw	r19,16(sp)
 1005c84:	dc800317 	ldw	r18,12(sp)
 1005c88:	dc400217 	ldw	r17,8(sp)
 1005c8c:	dc000117 	ldw	r16,4(sp)
 1005c90:	dec00b04 	addi	sp,sp,44
 1005c94:	f800283a 	ret
 1005c98:	b825883a 	mov	r18,r23
 1005c9c:	8dc03436 	bltu	r17,r23,1005d70 <_fread_r+0x1cc>
 1005ca0:	99400017 	ldw	r5,0(r19)
 1005ca4:	a009883a 	mov	r4,r20
 1005ca8:	900d883a 	mov	r6,r18
 1005cac:	10073e40 	call	10073e4 <memcpy>
 1005cb0:	9c000017 	ldw	r16,0(r19)
 1005cb4:	98800117 	ldw	r2,4(r19)
 1005cb8:	99400c17 	ldw	r5,48(r19)
 1005cbc:	84a1883a 	add	r16,r16,r18
 1005cc0:	14a3c83a 	sub	r17,r2,r18
 1005cc4:	a4ab883a 	add	r21,r20,r18
 1005cc8:	9c400115 	stw	r17,4(r19)
 1005ccc:	9c000015 	stw	r16,0(r19)
 1005cd0:	bca9c83a 	sub	r20,r23,r18
 1005cd4:	28000826 	beq	r5,zero,1005cf8 <_fread_r+0x154>
 1005cd8:	a03fe226 	beq	r20,zero,1005c64 <_fread_r+0xc0>
 1005cdc:	98801004 	addi	r2,r19,64
 1005ce0:	28800326 	beq	r5,r2,1005cf0 <_fread_r+0x14c>
 1005ce4:	b009883a 	mov	r4,r22
 1005ce8:	1005f0c0 	call	1005f0c <_free_r>
 1005cec:	9c000017 	ldw	r16,0(r19)
 1005cf0:	98000c15 	stw	zero,48(r19)
 1005cf4:	00000106 	br	1005cfc <_fread_r+0x158>
 1005cf8:	a03fda26 	beq	r20,zero,1005c64 <_fread_r+0xc0>
 1005cfc:	9c800417 	ldw	r18,16(r19)
 1005d00:	9c400517 	ldw	r17,20(r19)
 1005d04:	9d400015 	stw	r21,0(r19)
 1005d08:	9d400415 	stw	r21,16(r19)
 1005d0c:	9d000515 	stw	r20,20(r19)
 1005d10:	b009883a 	mov	r4,r22
 1005d14:	980b883a 	mov	r5,r19
 1005d18:	1008be40 	call	1008be4 <__srefill_r>
 1005d1c:	98c00117 	ldw	r3,4(r19)
 1005d20:	9c800415 	stw	r18,16(r19)
 1005d24:	9c400515 	stw	r17,20(r19)
 1005d28:	a8eb883a 	add	r21,r21,r3
 1005d2c:	9c000015 	stw	r16,0(r19)
 1005d30:	a0e9c83a 	sub	r20,r20,r3
 1005d34:	98000115 	stw	zero,4(r19)
 1005d38:	103fef26 	beq	r2,zero,1005cf8 <_fread_r+0x154>
 1005d3c:	d9400017 	ldw	r5,0(sp)
 1005d40:	bd09c83a 	sub	r4,r23,r20
 1005d44:	100e7bc0 	call	100e7bc <__udivsi3>
 1005d48:	1039883a 	mov	fp,r2
 1005d4c:	003fc506 	br	1005c64 <_fread_r+0xc0>
 1005d50:	0039883a 	mov	fp,zero
 1005d54:	003fc306 	br	1005c64 <_fread_r+0xc0>
 1005d58:	100594c0 	call	100594c <__sinit>
 1005d5c:	9c400117 	ldw	r17,4(r19)
 1005d60:	883fa70e 	bge	r17,zero,1005c00 <_fread_r+0x5c>
 1005d64:	0023883a 	mov	r17,zero
 1005d68:	98000115 	stw	zero,4(r19)
 1005d6c:	003fa406 	br	1005c00 <_fread_r+0x5c>
 1005d70:	8825883a 	mov	r18,r17
 1005d74:	003fca06 	br	1005ca0 <_fread_r+0xfc>
 1005d78:	99400017 	ldw	r5,0(r19)
 1005d7c:	900d883a 	mov	r6,r18
 1005d80:	10073e40 	call	10073e4 <memcpy>
 1005d84:	98c00117 	ldw	r3,4(r19)
 1005d88:	98800017 	ldw	r2,0(r19)
 1005d8c:	1c87c83a 	sub	r3,r3,r18
 1005d90:	1485883a 	add	r2,r2,r18
 1005d94:	98800015 	stw	r2,0(r19)
 1005d98:	98c00115 	stw	r3,4(r19)
 1005d9c:	003fb106 	br	1005c64 <_fread_r+0xc0>

01005da0 <fread>:
 1005da0:	008040b4 	movhi	r2,258
 1005da4:	10a8f804 	addi	r2,r2,-23584
 1005da8:	2017883a 	mov	r11,r4
 1005dac:	11000017 	ldw	r4,0(r2)
 1005db0:	defffe04 	addi	sp,sp,-8
 1005db4:	3013883a 	mov	r9,r6
 1005db8:	2805883a 	mov	r2,r5
 1005dbc:	d9c00015 	stw	r7,0(sp)
 1005dc0:	580b883a 	mov	r5,r11
 1005dc4:	100d883a 	mov	r6,r2
 1005dc8:	480f883a 	mov	r7,r9
 1005dcc:	dfc00115 	stw	ra,4(sp)
 1005dd0:	1005ba40 	call	1005ba4 <_fread_r>
 1005dd4:	dfc00117 	ldw	ra,4(sp)
 1005dd8:	dec00204 	addi	sp,sp,8
 1005ddc:	f800283a 	ret

01005de0 <_malloc_trim_r>:
 1005de0:	defffb04 	addi	sp,sp,-20
 1005de4:	dcc00315 	stw	r19,12(sp)
 1005de8:	04c040b4 	movhi	r19,258
 1005dec:	9ce34804 	addi	r19,r19,-29408
 1005df0:	dc800215 	stw	r18,8(sp)
 1005df4:	dc400115 	stw	r17,4(sp)
 1005df8:	dc000015 	stw	r16,0(sp)
 1005dfc:	2823883a 	mov	r17,r5
 1005e00:	2025883a 	mov	r18,r4
 1005e04:	dfc00415 	stw	ra,16(sp)
 1005e08:	100f6e00 	call	100f6e0 <__malloc_lock>
 1005e0c:	98800217 	ldw	r2,8(r19)
 1005e10:	9009883a 	mov	r4,r18
 1005e14:	000b883a 	mov	r5,zero
 1005e18:	10c00117 	ldw	r3,4(r2)
 1005e1c:	00bfff04 	movi	r2,-4
 1005e20:	18a0703a 	and	r16,r3,r2
 1005e24:	8463c83a 	sub	r17,r16,r17
 1005e28:	8c43fbc4 	addi	r17,r17,4079
 1005e2c:	8822d33a 	srli	r17,r17,12
 1005e30:	0083ffc4 	movi	r2,4095
 1005e34:	8c7fffc4 	addi	r17,r17,-1
 1005e38:	8822933a 	slli	r17,r17,12
 1005e3c:	1440060e 	bge	r2,r17,1005e58 <_malloc_trim_r+0x78>
 1005e40:	1008e340 	call	1008e34 <_sbrk_r>
 1005e44:	98c00217 	ldw	r3,8(r19)
 1005e48:	9009883a 	mov	r4,r18
 1005e4c:	044bc83a 	sub	r5,zero,r17
 1005e50:	80c7883a 	add	r3,r16,r3
 1005e54:	10c00926 	beq	r2,r3,1005e7c <_malloc_trim_r+0x9c>
 1005e58:	100f7000 	call	100f700 <__malloc_unlock>
 1005e5c:	0005883a 	mov	r2,zero
 1005e60:	dfc00417 	ldw	ra,16(sp)
 1005e64:	dcc00317 	ldw	r19,12(sp)
 1005e68:	dc800217 	ldw	r18,8(sp)
 1005e6c:	dc400117 	ldw	r17,4(sp)
 1005e70:	dc000017 	ldw	r16,0(sp)
 1005e74:	dec00504 	addi	sp,sp,20
 1005e78:	f800283a 	ret
 1005e7c:	9009883a 	mov	r4,r18
 1005e80:	1008e340 	call	1008e34 <_sbrk_r>
 1005e84:	844dc83a 	sub	r6,r16,r17
 1005e88:	00ffffc4 	movi	r3,-1
 1005e8c:	9009883a 	mov	r4,r18
 1005e90:	000b883a 	mov	r5,zero
 1005e94:	01c040b4 	movhi	r7,258
 1005e98:	39efe504 	addi	r7,r7,-16492
 1005e9c:	31800054 	ori	r6,r6,1
 1005ea0:	10c00926 	beq	r2,r3,1005ec8 <_malloc_trim_r+0xe8>
 1005ea4:	38800017 	ldw	r2,0(r7)
 1005ea8:	98c00217 	ldw	r3,8(r19)
 1005eac:	9009883a 	mov	r4,r18
 1005eb0:	1445c83a 	sub	r2,r2,r17
 1005eb4:	38800015 	stw	r2,0(r7)
 1005eb8:	19800115 	stw	r6,4(r3)
 1005ebc:	100f7000 	call	100f700 <__malloc_unlock>
 1005ec0:	00800044 	movi	r2,1
 1005ec4:	003fe606 	br	1005e60 <_malloc_trim_r+0x80>
 1005ec8:	1008e340 	call	1008e34 <_sbrk_r>
 1005ecc:	99800217 	ldw	r6,8(r19)
 1005ed0:	100f883a 	mov	r7,r2
 1005ed4:	9009883a 	mov	r4,r18
 1005ed8:	1187c83a 	sub	r3,r2,r6
 1005edc:	008003c4 	movi	r2,15
 1005ee0:	19400054 	ori	r5,r3,1
 1005ee4:	10ffdc0e 	bge	r2,r3,1005e58 <_malloc_trim_r+0x78>
 1005ee8:	008040b4 	movhi	r2,258
 1005eec:	10a8fd04 	addi	r2,r2,-23564
 1005ef0:	10c00017 	ldw	r3,0(r2)
 1005ef4:	008040b4 	movhi	r2,258
 1005ef8:	10afe504 	addi	r2,r2,-16492
 1005efc:	31400115 	stw	r5,4(r6)
 1005f00:	38c7c83a 	sub	r3,r7,r3
 1005f04:	10c00015 	stw	r3,0(r2)
 1005f08:	003fd306 	br	1005e58 <_malloc_trim_r+0x78>

01005f0c <_free_r>:
 1005f0c:	defffd04 	addi	sp,sp,-12
 1005f10:	dc400115 	stw	r17,4(sp)
 1005f14:	dc000015 	stw	r16,0(sp)
 1005f18:	dfc00215 	stw	ra,8(sp)
 1005f1c:	2821883a 	mov	r16,r5
 1005f20:	2023883a 	mov	r17,r4
 1005f24:	28005a26 	beq	r5,zero,1006090 <_free_r+0x184>
 1005f28:	100f6e00 	call	100f6e0 <__malloc_lock>
 1005f2c:	823ffe04 	addi	r8,r16,-8
 1005f30:	41400117 	ldw	r5,4(r8)
 1005f34:	00bfff84 	movi	r2,-2
 1005f38:	028040b4 	movhi	r10,258
 1005f3c:	52a34804 	addi	r10,r10,-29408
 1005f40:	288e703a 	and	r7,r5,r2
 1005f44:	41cd883a 	add	r6,r8,r7
 1005f48:	30c00117 	ldw	r3,4(r6)
 1005f4c:	51000217 	ldw	r4,8(r10)
 1005f50:	00bfff04 	movi	r2,-4
 1005f54:	1892703a 	and	r9,r3,r2
 1005f58:	5017883a 	mov	r11,r10
 1005f5c:	31006726 	beq	r6,r4,10060fc <_free_r+0x1f0>
 1005f60:	2880004c 	andi	r2,r5,1
 1005f64:	1005003a 	cmpeq	r2,r2,zero
 1005f68:	32400115 	stw	r9,4(r6)
 1005f6c:	10001a1e 	bne	r2,zero,1005fd8 <_free_r+0xcc>
 1005f70:	000b883a 	mov	r5,zero
 1005f74:	3247883a 	add	r3,r6,r9
 1005f78:	18800117 	ldw	r2,4(r3)
 1005f7c:	1080004c 	andi	r2,r2,1
 1005f80:	1000231e 	bne	r2,zero,1006010 <_free_r+0x104>
 1005f84:	280ac03a 	cmpne	r5,r5,zero
 1005f88:	3a4f883a 	add	r7,r7,r9
 1005f8c:	2800451e 	bne	r5,zero,10060a4 <_free_r+0x198>
 1005f90:	31000217 	ldw	r4,8(r6)
 1005f94:	008040b4 	movhi	r2,258
 1005f98:	10a34a04 	addi	r2,r2,-29400
 1005f9c:	20807b26 	beq	r4,r2,100618c <_free_r+0x280>
 1005fa0:	30800317 	ldw	r2,12(r6)
 1005fa4:	3a07883a 	add	r3,r7,r8
 1005fa8:	19c00015 	stw	r7,0(r3)
 1005fac:	11000215 	stw	r4,8(r2)
 1005fb0:	20800315 	stw	r2,12(r4)
 1005fb4:	38800054 	ori	r2,r7,1
 1005fb8:	40800115 	stw	r2,4(r8)
 1005fbc:	28001a26 	beq	r5,zero,1006028 <_free_r+0x11c>
 1005fc0:	8809883a 	mov	r4,r17
 1005fc4:	dfc00217 	ldw	ra,8(sp)
 1005fc8:	dc400117 	ldw	r17,4(sp)
 1005fcc:	dc000017 	ldw	r16,0(sp)
 1005fd0:	dec00304 	addi	sp,sp,12
 1005fd4:	100f7001 	jmpi	100f700 <__malloc_unlock>
 1005fd8:	80bffe17 	ldw	r2,-8(r16)
 1005fdc:	50c00204 	addi	r3,r10,8
 1005fe0:	4091c83a 	sub	r8,r8,r2
 1005fe4:	41000217 	ldw	r4,8(r8)
 1005fe8:	388f883a 	add	r7,r7,r2
 1005fec:	20c06126 	beq	r4,r3,1006174 <_free_r+0x268>
 1005ff0:	40800317 	ldw	r2,12(r8)
 1005ff4:	3247883a 	add	r3,r6,r9
 1005ff8:	000b883a 	mov	r5,zero
 1005ffc:	11000215 	stw	r4,8(r2)
 1006000:	20800315 	stw	r2,12(r4)
 1006004:	18800117 	ldw	r2,4(r3)
 1006008:	1080004c 	andi	r2,r2,1
 100600c:	103fdd26 	beq	r2,zero,1005f84 <_free_r+0x78>
 1006010:	38800054 	ori	r2,r7,1
 1006014:	3a07883a 	add	r3,r7,r8
 1006018:	280ac03a 	cmpne	r5,r5,zero
 100601c:	40800115 	stw	r2,4(r8)
 1006020:	19c00015 	stw	r7,0(r3)
 1006024:	283fe61e 	bne	r5,zero,1005fc0 <_free_r+0xb4>
 1006028:	00807fc4 	movi	r2,511
 100602c:	11c01f2e 	bgeu	r2,r7,10060ac <_free_r+0x1a0>
 1006030:	3806d27a 	srli	r3,r7,9
 1006034:	1800481e 	bne	r3,zero,1006158 <_free_r+0x24c>
 1006038:	3804d0fa 	srli	r2,r7,3
 100603c:	100690fa 	slli	r3,r2,3
 1006040:	1acd883a 	add	r6,r3,r11
 1006044:	31400217 	ldw	r5,8(r6)
 1006048:	31405926 	beq	r6,r5,10061b0 <_free_r+0x2a4>
 100604c:	28800117 	ldw	r2,4(r5)
 1006050:	00ffff04 	movi	r3,-4
 1006054:	10c4703a 	and	r2,r2,r3
 1006058:	3880022e 	bgeu	r7,r2,1006064 <_free_r+0x158>
 100605c:	29400217 	ldw	r5,8(r5)
 1006060:	317ffa1e 	bne	r6,r5,100604c <_free_r+0x140>
 1006064:	29800317 	ldw	r6,12(r5)
 1006068:	41800315 	stw	r6,12(r8)
 100606c:	41400215 	stw	r5,8(r8)
 1006070:	8809883a 	mov	r4,r17
 1006074:	2a000315 	stw	r8,12(r5)
 1006078:	32000215 	stw	r8,8(r6)
 100607c:	dfc00217 	ldw	ra,8(sp)
 1006080:	dc400117 	ldw	r17,4(sp)
 1006084:	dc000017 	ldw	r16,0(sp)
 1006088:	dec00304 	addi	sp,sp,12
 100608c:	100f7001 	jmpi	100f700 <__malloc_unlock>
 1006090:	dfc00217 	ldw	ra,8(sp)
 1006094:	dc400117 	ldw	r17,4(sp)
 1006098:	dc000017 	ldw	r16,0(sp)
 100609c:	dec00304 	addi	sp,sp,12
 10060a0:	f800283a 	ret
 10060a4:	31000217 	ldw	r4,8(r6)
 10060a8:	003fbd06 	br	1005fa0 <_free_r+0x94>
 10060ac:	3806d0fa 	srli	r3,r7,3
 10060b0:	00800044 	movi	r2,1
 10060b4:	51400117 	ldw	r5,4(r10)
 10060b8:	180890fa 	slli	r4,r3,3
 10060bc:	1807d0ba 	srai	r3,r3,2
 10060c0:	22c9883a 	add	r4,r4,r11
 10060c4:	21800217 	ldw	r6,8(r4)
 10060c8:	10c4983a 	sll	r2,r2,r3
 10060cc:	41000315 	stw	r4,12(r8)
 10060d0:	41800215 	stw	r6,8(r8)
 10060d4:	288ab03a 	or	r5,r5,r2
 10060d8:	22000215 	stw	r8,8(r4)
 10060dc:	8809883a 	mov	r4,r17
 10060e0:	51400115 	stw	r5,4(r10)
 10060e4:	32000315 	stw	r8,12(r6)
 10060e8:	dfc00217 	ldw	ra,8(sp)
 10060ec:	dc400117 	ldw	r17,4(sp)
 10060f0:	dc000017 	ldw	r16,0(sp)
 10060f4:	dec00304 	addi	sp,sp,12
 10060f8:	100f7001 	jmpi	100f700 <__malloc_unlock>
 10060fc:	2880004c 	andi	r2,r5,1
 1006100:	3a4d883a 	add	r6,r7,r9
 1006104:	1000071e 	bne	r2,zero,1006124 <_free_r+0x218>
 1006108:	80bffe17 	ldw	r2,-8(r16)
 100610c:	4091c83a 	sub	r8,r8,r2
 1006110:	41000317 	ldw	r4,12(r8)
 1006114:	40c00217 	ldw	r3,8(r8)
 1006118:	308d883a 	add	r6,r6,r2
 100611c:	20c00215 	stw	r3,8(r4)
 1006120:	19000315 	stw	r4,12(r3)
 1006124:	008040b4 	movhi	r2,258
 1006128:	10a8fc04 	addi	r2,r2,-23568
 100612c:	11000017 	ldw	r4,0(r2)
 1006130:	30c00054 	ori	r3,r6,1
 1006134:	52000215 	stw	r8,8(r10)
 1006138:	40c00115 	stw	r3,4(r8)
 100613c:	313fa036 	bltu	r6,r4,1005fc0 <_free_r+0xb4>
 1006140:	008040b4 	movhi	r2,258
 1006144:	10afce04 	addi	r2,r2,-16584
 1006148:	11400017 	ldw	r5,0(r2)
 100614c:	8809883a 	mov	r4,r17
 1006150:	1005de00 	call	1005de0 <_malloc_trim_r>
 1006154:	003f9a06 	br	1005fc0 <_free_r+0xb4>
 1006158:	00800104 	movi	r2,4
 100615c:	10c0072e 	bgeu	r2,r3,100617c <_free_r+0x270>
 1006160:	00800504 	movi	r2,20
 1006164:	10c01936 	bltu	r2,r3,10061cc <_free_r+0x2c0>
 1006168:	188016c4 	addi	r2,r3,91
 100616c:	100690fa 	slli	r3,r2,3
 1006170:	003fb306 	br	1006040 <_free_r+0x134>
 1006174:	01400044 	movi	r5,1
 1006178:	003f7e06 	br	1005f74 <_free_r+0x68>
 100617c:	3804d1ba 	srli	r2,r7,6
 1006180:	10800e04 	addi	r2,r2,56
 1006184:	100690fa 	slli	r3,r2,3
 1006188:	003fad06 	br	1006040 <_free_r+0x134>
 100618c:	22000315 	stw	r8,12(r4)
 1006190:	22000215 	stw	r8,8(r4)
 1006194:	3a05883a 	add	r2,r7,r8
 1006198:	38c00054 	ori	r3,r7,1
 100619c:	11c00015 	stw	r7,0(r2)
 10061a0:	41000215 	stw	r4,8(r8)
 10061a4:	40c00115 	stw	r3,4(r8)
 10061a8:	41000315 	stw	r4,12(r8)
 10061ac:	003f8406 	br	1005fc0 <_free_r+0xb4>
 10061b0:	1005d0ba 	srai	r2,r2,2
 10061b4:	00c00044 	movi	r3,1
 10061b8:	51000117 	ldw	r4,4(r10)
 10061bc:	1886983a 	sll	r3,r3,r2
 10061c0:	20c8b03a 	or	r4,r4,r3
 10061c4:	51000115 	stw	r4,4(r10)
 10061c8:	003fa706 	br	1006068 <_free_r+0x15c>
 10061cc:	00801504 	movi	r2,84
 10061d0:	10c00436 	bltu	r2,r3,10061e4 <_free_r+0x2d8>
 10061d4:	3804d33a 	srli	r2,r7,12
 10061d8:	10801b84 	addi	r2,r2,110
 10061dc:	100690fa 	slli	r3,r2,3
 10061e0:	003f9706 	br	1006040 <_free_r+0x134>
 10061e4:	00805504 	movi	r2,340
 10061e8:	10c00436 	bltu	r2,r3,10061fc <_free_r+0x2f0>
 10061ec:	3804d3fa 	srli	r2,r7,15
 10061f0:	10801dc4 	addi	r2,r2,119
 10061f4:	100690fa 	slli	r3,r2,3
 10061f8:	003f9106 	br	1006040 <_free_r+0x134>
 10061fc:	00815504 	movi	r2,1364
 1006200:	10c0032e 	bgeu	r2,r3,1006210 <_free_r+0x304>
 1006204:	00801f84 	movi	r2,126
 1006208:	00c0fc04 	movi	r3,1008
 100620c:	003f8c06 	br	1006040 <_free_r+0x134>
 1006210:	3804d4ba 	srli	r2,r7,18
 1006214:	10801f04 	addi	r2,r2,124
 1006218:	100690fa 	slli	r3,r2,3
 100621c:	003f8806 	br	1006040 <_free_r+0x134>

01006220 <__sfvwrite_r>:
 1006220:	30800217 	ldw	r2,8(r6)
 1006224:	defff504 	addi	sp,sp,-44
 1006228:	df000915 	stw	fp,36(sp)
 100622c:	dd800715 	stw	r22,28(sp)
 1006230:	dc800315 	stw	r18,12(sp)
 1006234:	dfc00a15 	stw	ra,40(sp)
 1006238:	ddc00815 	stw	r23,32(sp)
 100623c:	dd400615 	stw	r21,24(sp)
 1006240:	dd000515 	stw	r20,20(sp)
 1006244:	dcc00415 	stw	r19,16(sp)
 1006248:	dc400215 	stw	r17,8(sp)
 100624c:	dc000115 	stw	r16,4(sp)
 1006250:	302d883a 	mov	r22,r6
 1006254:	2039883a 	mov	fp,r4
 1006258:	2825883a 	mov	r18,r5
 100625c:	10001c26 	beq	r2,zero,10062d0 <__sfvwrite_r+0xb0>
 1006260:	29c0030b 	ldhu	r7,12(r5)
 1006264:	3880020c 	andi	r2,r7,8
 1006268:	10002726 	beq	r2,zero,1006308 <__sfvwrite_r+0xe8>
 100626c:	28800417 	ldw	r2,16(r5)
 1006270:	10002526 	beq	r2,zero,1006308 <__sfvwrite_r+0xe8>
 1006274:	3880008c 	andi	r2,r7,2
 1006278:	b5400017 	ldw	r21,0(r22)
 100627c:	10002826 	beq	r2,zero,1006320 <__sfvwrite_r+0x100>
 1006280:	0021883a 	mov	r16,zero
 1006284:	0023883a 	mov	r17,zero
 1006288:	880d883a 	mov	r6,r17
 100628c:	e009883a 	mov	r4,fp
 1006290:	00810004 	movi	r2,1024
 1006294:	80006e26 	beq	r16,zero,1006450 <__sfvwrite_r+0x230>
 1006298:	800f883a 	mov	r7,r16
 100629c:	91400717 	ldw	r5,28(r18)
 10062a0:	1400012e 	bgeu	r2,r16,10062a8 <__sfvwrite_r+0x88>
 10062a4:	100f883a 	mov	r7,r2
 10062a8:	90c00917 	ldw	r3,36(r18)
 10062ac:	183ee83a 	callr	r3
 10062b0:	1007883a 	mov	r3,r2
 10062b4:	80a1c83a 	sub	r16,r16,r2
 10062b8:	88a3883a 	add	r17,r17,r2
 10062bc:	00806d0e 	bge	zero,r2,1006474 <__sfvwrite_r+0x254>
 10062c0:	b0800217 	ldw	r2,8(r22)
 10062c4:	10c5c83a 	sub	r2,r2,r3
 10062c8:	b0800215 	stw	r2,8(r22)
 10062cc:	103fee1e 	bne	r2,zero,1006288 <__sfvwrite_r+0x68>
 10062d0:	0009883a 	mov	r4,zero
 10062d4:	2005883a 	mov	r2,r4
 10062d8:	dfc00a17 	ldw	ra,40(sp)
 10062dc:	df000917 	ldw	fp,36(sp)
 10062e0:	ddc00817 	ldw	r23,32(sp)
 10062e4:	dd800717 	ldw	r22,28(sp)
 10062e8:	dd400617 	ldw	r21,24(sp)
 10062ec:	dd000517 	ldw	r20,20(sp)
 10062f0:	dcc00417 	ldw	r19,16(sp)
 10062f4:	dc800317 	ldw	r18,12(sp)
 10062f8:	dc400217 	ldw	r17,8(sp)
 10062fc:	dc000117 	ldw	r16,4(sp)
 1006300:	dec00b04 	addi	sp,sp,44
 1006304:	f800283a 	ret
 1006308:	1003dac0 	call	1003dac <__swsetup_r>
 100630c:	1000e41e 	bne	r2,zero,10066a0 <__sfvwrite_r+0x480>
 1006310:	91c0030b 	ldhu	r7,12(r18)
 1006314:	b5400017 	ldw	r21,0(r22)
 1006318:	3880008c 	andi	r2,r7,2
 100631c:	103fd81e 	bne	r2,zero,1006280 <__sfvwrite_r+0x60>
 1006320:	3880004c 	andi	r2,r7,1
 1006324:	1005003a 	cmpeq	r2,r2,zero
 1006328:	10005726 	beq	r2,zero,1006488 <__sfvwrite_r+0x268>
 100632c:	0029883a 	mov	r20,zero
 1006330:	002f883a 	mov	r23,zero
 1006334:	a0004226 	beq	r20,zero,1006440 <__sfvwrite_r+0x220>
 1006338:	3880800c 	andi	r2,r7,512
 100633c:	94000217 	ldw	r16,8(r18)
 1006340:	10008b26 	beq	r2,zero,1006570 <__sfvwrite_r+0x350>
 1006344:	800d883a 	mov	r6,r16
 1006348:	a400a536 	bltu	r20,r16,10065e0 <__sfvwrite_r+0x3c0>
 100634c:	3881200c 	andi	r2,r7,1152
 1006350:	10002726 	beq	r2,zero,10063f0 <__sfvwrite_r+0x1d0>
 1006354:	90800517 	ldw	r2,20(r18)
 1006358:	92000417 	ldw	r8,16(r18)
 100635c:	91400017 	ldw	r5,0(r18)
 1006360:	1087883a 	add	r3,r2,r2
 1006364:	1887883a 	add	r3,r3,r2
 1006368:	1808d7fa 	srli	r4,r3,31
 100636c:	2a21c83a 	sub	r16,r5,r8
 1006370:	80800044 	addi	r2,r16,1
 1006374:	20c9883a 	add	r4,r4,r3
 1006378:	2027d07a 	srai	r19,r4,1
 100637c:	a085883a 	add	r2,r20,r2
 1006380:	980d883a 	mov	r6,r19
 1006384:	9880022e 	bgeu	r19,r2,1006390 <__sfvwrite_r+0x170>
 1006388:	1027883a 	mov	r19,r2
 100638c:	100d883a 	mov	r6,r2
 1006390:	3881000c 	andi	r2,r7,1024
 1006394:	1000b826 	beq	r2,zero,1006678 <__sfvwrite_r+0x458>
 1006398:	300b883a 	mov	r5,r6
 100639c:	e009883a 	mov	r4,fp
 10063a0:	1006ac00 	call	1006ac0 <_malloc_r>
 10063a4:	10003126 	beq	r2,zero,100646c <__sfvwrite_r+0x24c>
 10063a8:	91400417 	ldw	r5,16(r18)
 10063ac:	1009883a 	mov	r4,r2
 10063b0:	800d883a 	mov	r6,r16
 10063b4:	1023883a 	mov	r17,r2
 10063b8:	10073e40 	call	10073e4 <memcpy>
 10063bc:	90c0030b 	ldhu	r3,12(r18)
 10063c0:	00beffc4 	movi	r2,-1025
 10063c4:	1886703a 	and	r3,r3,r2
 10063c8:	18c02014 	ori	r3,r3,128
 10063cc:	90c0030d 	sth	r3,12(r18)
 10063d0:	9c07c83a 	sub	r3,r19,r16
 10063d4:	8c05883a 	add	r2,r17,r16
 10063d8:	a00d883a 	mov	r6,r20
 10063dc:	a021883a 	mov	r16,r20
 10063e0:	90800015 	stw	r2,0(r18)
 10063e4:	90c00215 	stw	r3,8(r18)
 10063e8:	94400415 	stw	r17,16(r18)
 10063ec:	94c00515 	stw	r19,20(r18)
 10063f0:	91000017 	ldw	r4,0(r18)
 10063f4:	b80b883a 	mov	r5,r23
 10063f8:	a023883a 	mov	r17,r20
 10063fc:	10074840 	call	1007484 <memmove>
 1006400:	90c00217 	ldw	r3,8(r18)
 1006404:	90800017 	ldw	r2,0(r18)
 1006408:	a027883a 	mov	r19,r20
 100640c:	1c07c83a 	sub	r3,r3,r16
 1006410:	1405883a 	add	r2,r2,r16
 1006414:	90c00215 	stw	r3,8(r18)
 1006418:	a021883a 	mov	r16,r20
 100641c:	90800015 	stw	r2,0(r18)
 1006420:	b0800217 	ldw	r2,8(r22)
 1006424:	1405c83a 	sub	r2,r2,r16
 1006428:	b0800215 	stw	r2,8(r22)
 100642c:	103fa826 	beq	r2,zero,10062d0 <__sfvwrite_r+0xb0>
 1006430:	a469c83a 	sub	r20,r20,r17
 1006434:	91c0030b 	ldhu	r7,12(r18)
 1006438:	bcef883a 	add	r23,r23,r19
 100643c:	a03fbe1e 	bne	r20,zero,1006338 <__sfvwrite_r+0x118>
 1006440:	adc00017 	ldw	r23,0(r21)
 1006444:	ad000117 	ldw	r20,4(r21)
 1006448:	ad400204 	addi	r21,r21,8
 100644c:	003fb906 	br	1006334 <__sfvwrite_r+0x114>
 1006450:	ac400017 	ldw	r17,0(r21)
 1006454:	ac000117 	ldw	r16,4(r21)
 1006458:	ad400204 	addi	r21,r21,8
 100645c:	003f8a06 	br	1006288 <__sfvwrite_r+0x68>
 1006460:	91400417 	ldw	r5,16(r18)
 1006464:	e009883a 	mov	r4,fp
 1006468:	1005f0c0 	call	1005f0c <_free_r>
 100646c:	00800304 	movi	r2,12
 1006470:	e0800015 	stw	r2,0(fp)
 1006474:	9080030b 	ldhu	r2,12(r18)
 1006478:	013fffc4 	movi	r4,-1
 100647c:	10801014 	ori	r2,r2,64
 1006480:	9080030d 	sth	r2,12(r18)
 1006484:	003f9306 	br	10062d4 <__sfvwrite_r+0xb4>
 1006488:	0027883a 	mov	r19,zero
 100648c:	002f883a 	mov	r23,zero
 1006490:	d8000015 	stw	zero,0(sp)
 1006494:	0029883a 	mov	r20,zero
 1006498:	98001e26 	beq	r19,zero,1006514 <__sfvwrite_r+0x2f4>
 100649c:	d8c00017 	ldw	r3,0(sp)
 10064a0:	1804c03a 	cmpne	r2,r3,zero
 10064a4:	10005e26 	beq	r2,zero,1006620 <__sfvwrite_r+0x400>
 10064a8:	9821883a 	mov	r16,r19
 10064ac:	a4c0012e 	bgeu	r20,r19,10064b4 <__sfvwrite_r+0x294>
 10064b0:	a021883a 	mov	r16,r20
 10064b4:	91000017 	ldw	r4,0(r18)
 10064b8:	90800417 	ldw	r2,16(r18)
 10064bc:	91800217 	ldw	r6,8(r18)
 10064c0:	91c00517 	ldw	r7,20(r18)
 10064c4:	1100022e 	bgeu	r2,r4,10064d0 <__sfvwrite_r+0x2b0>
 10064c8:	31e3883a 	add	r17,r6,r7
 10064cc:	8c001616 	blt	r17,r16,1006528 <__sfvwrite_r+0x308>
 10064d0:	81c03816 	blt	r16,r7,10065b4 <__sfvwrite_r+0x394>
 10064d4:	90c00917 	ldw	r3,36(r18)
 10064d8:	91400717 	ldw	r5,28(r18)
 10064dc:	e009883a 	mov	r4,fp
 10064e0:	b80d883a 	mov	r6,r23
 10064e4:	183ee83a 	callr	r3
 10064e8:	1023883a 	mov	r17,r2
 10064ec:	00bfe10e 	bge	zero,r2,1006474 <__sfvwrite_r+0x254>
 10064f0:	a469c83a 	sub	r20,r20,r17
 10064f4:	a0001826 	beq	r20,zero,1006558 <__sfvwrite_r+0x338>
 10064f8:	b0800217 	ldw	r2,8(r22)
 10064fc:	1445c83a 	sub	r2,r2,r17
 1006500:	b0800215 	stw	r2,8(r22)
 1006504:	103f7226 	beq	r2,zero,10062d0 <__sfvwrite_r+0xb0>
 1006508:	9c67c83a 	sub	r19,r19,r17
 100650c:	bc6f883a 	add	r23,r23,r17
 1006510:	983fe21e 	bne	r19,zero,100649c <__sfvwrite_r+0x27c>
 1006514:	adc00017 	ldw	r23,0(r21)
 1006518:	acc00117 	ldw	r19,4(r21)
 100651c:	ad400204 	addi	r21,r21,8
 1006520:	d8000015 	stw	zero,0(sp)
 1006524:	003fdc06 	br	1006498 <__sfvwrite_r+0x278>
 1006528:	b80b883a 	mov	r5,r23
 100652c:	880d883a 	mov	r6,r17
 1006530:	10074840 	call	1007484 <memmove>
 1006534:	90c00017 	ldw	r3,0(r18)
 1006538:	e009883a 	mov	r4,fp
 100653c:	900b883a 	mov	r5,r18
 1006540:	1c47883a 	add	r3,r3,r17
 1006544:	90c00015 	stw	r3,0(r18)
 1006548:	10056b40 	call	10056b4 <_fflush_r>
 100654c:	103fc91e 	bne	r2,zero,1006474 <__sfvwrite_r+0x254>
 1006550:	a469c83a 	sub	r20,r20,r17
 1006554:	a03fe81e 	bne	r20,zero,10064f8 <__sfvwrite_r+0x2d8>
 1006558:	e009883a 	mov	r4,fp
 100655c:	900b883a 	mov	r5,r18
 1006560:	10056b40 	call	10056b4 <_fflush_r>
 1006564:	103fc31e 	bne	r2,zero,1006474 <__sfvwrite_r+0x254>
 1006568:	d8000015 	stw	zero,0(sp)
 100656c:	003fe206 	br	10064f8 <__sfvwrite_r+0x2d8>
 1006570:	91000017 	ldw	r4,0(r18)
 1006574:	90800417 	ldw	r2,16(r18)
 1006578:	1100022e 	bgeu	r2,r4,1006584 <__sfvwrite_r+0x364>
 100657c:	8023883a 	mov	r17,r16
 1006580:	85003136 	bltu	r16,r20,1006648 <__sfvwrite_r+0x428>
 1006584:	91c00517 	ldw	r7,20(r18)
 1006588:	a1c01836 	bltu	r20,r7,10065ec <__sfvwrite_r+0x3cc>
 100658c:	90c00917 	ldw	r3,36(r18)
 1006590:	91400717 	ldw	r5,28(r18)
 1006594:	e009883a 	mov	r4,fp
 1006598:	b80d883a 	mov	r6,r23
 100659c:	183ee83a 	callr	r3
 10065a0:	1021883a 	mov	r16,r2
 10065a4:	00bfb30e 	bge	zero,r2,1006474 <__sfvwrite_r+0x254>
 10065a8:	1023883a 	mov	r17,r2
 10065ac:	1027883a 	mov	r19,r2
 10065b0:	003f9b06 	br	1006420 <__sfvwrite_r+0x200>
 10065b4:	b80b883a 	mov	r5,r23
 10065b8:	800d883a 	mov	r6,r16
 10065bc:	10074840 	call	1007484 <memmove>
 10065c0:	90c00217 	ldw	r3,8(r18)
 10065c4:	90800017 	ldw	r2,0(r18)
 10065c8:	8023883a 	mov	r17,r16
 10065cc:	1c07c83a 	sub	r3,r3,r16
 10065d0:	1405883a 	add	r2,r2,r16
 10065d4:	90c00215 	stw	r3,8(r18)
 10065d8:	90800015 	stw	r2,0(r18)
 10065dc:	003fc406 	br	10064f0 <__sfvwrite_r+0x2d0>
 10065e0:	a00d883a 	mov	r6,r20
 10065e4:	a021883a 	mov	r16,r20
 10065e8:	003f8106 	br	10063f0 <__sfvwrite_r+0x1d0>
 10065ec:	b80b883a 	mov	r5,r23
 10065f0:	a00d883a 	mov	r6,r20
 10065f4:	10074840 	call	1007484 <memmove>
 10065f8:	90c00217 	ldw	r3,8(r18)
 10065fc:	90800017 	ldw	r2,0(r18)
 1006600:	a021883a 	mov	r16,r20
 1006604:	1d07c83a 	sub	r3,r3,r20
 1006608:	1505883a 	add	r2,r2,r20
 100660c:	a023883a 	mov	r17,r20
 1006610:	a027883a 	mov	r19,r20
 1006614:	90c00215 	stw	r3,8(r18)
 1006618:	90800015 	stw	r2,0(r18)
 100661c:	003f8006 	br	1006420 <__sfvwrite_r+0x200>
 1006620:	b809883a 	mov	r4,r23
 1006624:	01400284 	movi	r5,10
 1006628:	980d883a 	mov	r6,r19
 100662c:	10073000 	call	1007300 <memchr>
 1006630:	10001726 	beq	r2,zero,1006690 <__sfvwrite_r+0x470>
 1006634:	15c5c83a 	sub	r2,r2,r23
 1006638:	15000044 	addi	r20,r2,1
 100663c:	00800044 	movi	r2,1
 1006640:	d8800015 	stw	r2,0(sp)
 1006644:	003f9806 	br	10064a8 <__sfvwrite_r+0x288>
 1006648:	b80b883a 	mov	r5,r23
 100664c:	800d883a 	mov	r6,r16
 1006650:	10074840 	call	1007484 <memmove>
 1006654:	90c00017 	ldw	r3,0(r18)
 1006658:	e009883a 	mov	r4,fp
 100665c:	900b883a 	mov	r5,r18
 1006660:	1c07883a 	add	r3,r3,r16
 1006664:	90c00015 	stw	r3,0(r18)
 1006668:	8027883a 	mov	r19,r16
 100666c:	10056b40 	call	10056b4 <_fflush_r>
 1006670:	103f6b26 	beq	r2,zero,1006420 <__sfvwrite_r+0x200>
 1006674:	003f7f06 	br	1006474 <__sfvwrite_r+0x254>
 1006678:	400b883a 	mov	r5,r8
 100667c:	e009883a 	mov	r4,fp
 1006680:	10085f00 	call	10085f0 <_realloc_r>
 1006684:	103f7626 	beq	r2,zero,1006460 <__sfvwrite_r+0x240>
 1006688:	1023883a 	mov	r17,r2
 100668c:	003f5006 	br	10063d0 <__sfvwrite_r+0x1b0>
 1006690:	00c00044 	movi	r3,1
 1006694:	9d000044 	addi	r20,r19,1
 1006698:	d8c00015 	stw	r3,0(sp)
 100669c:	003f8206 	br	10064a8 <__sfvwrite_r+0x288>
 10066a0:	9080030b 	ldhu	r2,12(r18)
 10066a4:	00c00244 	movi	r3,9
 10066a8:	013fffc4 	movi	r4,-1
 10066ac:	10801014 	ori	r2,r2,64
 10066b0:	9080030d 	sth	r2,12(r18)
 10066b4:	e0c00015 	stw	r3,0(fp)
 10066b8:	003f0606 	br	10062d4 <__sfvwrite_r+0xb4>

010066bc <_fwalk_reent>:
 10066bc:	defff704 	addi	sp,sp,-36
 10066c0:	dcc00315 	stw	r19,12(sp)
 10066c4:	24c0b804 	addi	r19,r4,736
 10066c8:	dd800615 	stw	r22,24(sp)
 10066cc:	dd400515 	stw	r21,20(sp)
 10066d0:	dfc00815 	stw	ra,32(sp)
 10066d4:	ddc00715 	stw	r23,28(sp)
 10066d8:	dd000415 	stw	r20,16(sp)
 10066dc:	dc800215 	stw	r18,8(sp)
 10066e0:	dc400115 	stw	r17,4(sp)
 10066e4:	dc000015 	stw	r16,0(sp)
 10066e8:	202b883a 	mov	r21,r4
 10066ec:	282d883a 	mov	r22,r5
 10066f0:	100593c0 	call	100593c <__sfp_lock_acquire>
 10066f4:	98002126 	beq	r19,zero,100677c <_fwalk_reent+0xc0>
 10066f8:	002f883a 	mov	r23,zero
 10066fc:	9c800117 	ldw	r18,4(r19)
 1006700:	9c000217 	ldw	r16,8(r19)
 1006704:	90bfffc4 	addi	r2,r18,-1
 1006708:	10000d16 	blt	r2,zero,1006740 <_fwalk_reent+0x84>
 100670c:	0023883a 	mov	r17,zero
 1006710:	053fffc4 	movi	r20,-1
 1006714:	8080030f 	ldh	r2,12(r16)
 1006718:	8c400044 	addi	r17,r17,1
 100671c:	10000626 	beq	r2,zero,1006738 <_fwalk_reent+0x7c>
 1006720:	8080038f 	ldh	r2,14(r16)
 1006724:	800b883a 	mov	r5,r16
 1006728:	a809883a 	mov	r4,r21
 100672c:	15000226 	beq	r2,r20,1006738 <_fwalk_reent+0x7c>
 1006730:	b03ee83a 	callr	r22
 1006734:	b8aeb03a 	or	r23,r23,r2
 1006738:	84001704 	addi	r16,r16,92
 100673c:	947ff51e 	bne	r18,r17,1006714 <_fwalk_reent+0x58>
 1006740:	9cc00017 	ldw	r19,0(r19)
 1006744:	983fed1e 	bne	r19,zero,10066fc <_fwalk_reent+0x40>
 1006748:	10059400 	call	1005940 <__sfp_lock_release>
 100674c:	b805883a 	mov	r2,r23
 1006750:	dfc00817 	ldw	ra,32(sp)
 1006754:	ddc00717 	ldw	r23,28(sp)
 1006758:	dd800617 	ldw	r22,24(sp)
 100675c:	dd400517 	ldw	r21,20(sp)
 1006760:	dd000417 	ldw	r20,16(sp)
 1006764:	dcc00317 	ldw	r19,12(sp)
 1006768:	dc800217 	ldw	r18,8(sp)
 100676c:	dc400117 	ldw	r17,4(sp)
 1006770:	dc000017 	ldw	r16,0(sp)
 1006774:	dec00904 	addi	sp,sp,36
 1006778:	f800283a 	ret
 100677c:	002f883a 	mov	r23,zero
 1006780:	003ff106 	br	1006748 <_fwalk_reent+0x8c>

01006784 <_fwalk>:
 1006784:	defff804 	addi	sp,sp,-32
 1006788:	dcc00315 	stw	r19,12(sp)
 100678c:	24c0b804 	addi	r19,r4,736
 1006790:	dd400515 	stw	r21,20(sp)
 1006794:	dfc00715 	stw	ra,28(sp)
 1006798:	dd800615 	stw	r22,24(sp)
 100679c:	dd000415 	stw	r20,16(sp)
 10067a0:	dc800215 	stw	r18,8(sp)
 10067a4:	dc400115 	stw	r17,4(sp)
 10067a8:	dc000015 	stw	r16,0(sp)
 10067ac:	282b883a 	mov	r21,r5
 10067b0:	100593c0 	call	100593c <__sfp_lock_acquire>
 10067b4:	98001f26 	beq	r19,zero,1006834 <_fwalk+0xb0>
 10067b8:	002d883a 	mov	r22,zero
 10067bc:	9c800117 	ldw	r18,4(r19)
 10067c0:	9c000217 	ldw	r16,8(r19)
 10067c4:	90bfffc4 	addi	r2,r18,-1
 10067c8:	10000c16 	blt	r2,zero,10067fc <_fwalk+0x78>
 10067cc:	0023883a 	mov	r17,zero
 10067d0:	053fffc4 	movi	r20,-1
 10067d4:	8080030f 	ldh	r2,12(r16)
 10067d8:	8c400044 	addi	r17,r17,1
 10067dc:	10000526 	beq	r2,zero,10067f4 <_fwalk+0x70>
 10067e0:	8080038f 	ldh	r2,14(r16)
 10067e4:	8009883a 	mov	r4,r16
 10067e8:	15000226 	beq	r2,r20,10067f4 <_fwalk+0x70>
 10067ec:	a83ee83a 	callr	r21
 10067f0:	b0acb03a 	or	r22,r22,r2
 10067f4:	84001704 	addi	r16,r16,92
 10067f8:	947ff61e 	bne	r18,r17,10067d4 <_fwalk+0x50>
 10067fc:	9cc00017 	ldw	r19,0(r19)
 1006800:	983fee1e 	bne	r19,zero,10067bc <_fwalk+0x38>
 1006804:	10059400 	call	1005940 <__sfp_lock_release>
 1006808:	b005883a 	mov	r2,r22
 100680c:	dfc00717 	ldw	ra,28(sp)
 1006810:	dd800617 	ldw	r22,24(sp)
 1006814:	dd400517 	ldw	r21,20(sp)
 1006818:	dd000417 	ldw	r20,16(sp)
 100681c:	dcc00317 	ldw	r19,12(sp)
 1006820:	dc800217 	ldw	r18,8(sp)
 1006824:	dc400117 	ldw	r17,4(sp)
 1006828:	dc000017 	ldw	r16,0(sp)
 100682c:	dec00804 	addi	sp,sp,32
 1006830:	f800283a 	ret
 1006834:	002d883a 	mov	r22,zero
 1006838:	003ff206 	br	1006804 <_fwalk+0x80>

0100683c <iswspace>:
 100683c:	00803fc4 	movi	r2,255
 1006840:	0007883a 	mov	r3,zero
 1006844:	11000636 	bltu	r2,r4,1006860 <iswspace+0x24>
 1006848:	008040b4 	movhi	r2,258
 100684c:	10a8f704 	addi	r2,r2,-23588
 1006850:	10c00017 	ldw	r3,0(r2)
 1006854:	1907883a 	add	r3,r3,r4
 1006858:	18800003 	ldbu	r2,0(r3)
 100685c:	10c0020c 	andi	r3,r2,8
 1006860:	1805883a 	mov	r2,r3
 1006864:	f800283a 	ret

01006868 <__locale_charset>:
 1006868:	d0a00417 	ldw	r2,-32752(gp)
 100686c:	f800283a 	ret

01006870 <_localeconv_r>:
 1006870:	008040b4 	movhi	r2,258
 1006874:	10a14404 	addi	r2,r2,-31472
 1006878:	f800283a 	ret

0100687c <localeconv>:
 100687c:	008040b4 	movhi	r2,258
 1006880:	10a8f804 	addi	r2,r2,-23584
 1006884:	11000017 	ldw	r4,0(r2)
 1006888:	10068701 	jmpi	1006870 <_localeconv_r>

0100688c <_setlocale_r>:
 100688c:	defffc04 	addi	sp,sp,-16
 1006890:	00c040b4 	movhi	r3,258
 1006894:	18e13f04 	addi	r3,r3,-31492
 1006898:	dc800215 	stw	r18,8(sp)
 100689c:	dc400115 	stw	r17,4(sp)
 10068a0:	dc000015 	stw	r16,0(sp)
 10068a4:	2023883a 	mov	r17,r4
 10068a8:	2825883a 	mov	r18,r5
 10068ac:	dfc00315 	stw	ra,12(sp)
 10068b0:	3021883a 	mov	r16,r6
 10068b4:	3009883a 	mov	r4,r6
 10068b8:	180b883a 	mov	r5,r3
 10068bc:	30000926 	beq	r6,zero,10068e4 <_setlocale_r+0x58>
 10068c0:	100918c0 	call	100918c <strcmp>
 10068c4:	8009883a 	mov	r4,r16
 10068c8:	014040b4 	movhi	r5,258
 10068cc:	29623c04 	addi	r5,r5,-30480
 10068d0:	10000b1e 	bne	r2,zero,1006900 <_setlocale_r+0x74>
 10068d4:	8c000d15 	stw	r16,52(r17)
 10068d8:	8c800c15 	stw	r18,48(r17)
 10068dc:	00c040b4 	movhi	r3,258
 10068e0:	18e13f04 	addi	r3,r3,-31492
 10068e4:	1805883a 	mov	r2,r3
 10068e8:	dfc00317 	ldw	ra,12(sp)
 10068ec:	dc800217 	ldw	r18,8(sp)
 10068f0:	dc400117 	ldw	r17,4(sp)
 10068f4:	dc000017 	ldw	r16,0(sp)
 10068f8:	dec00404 	addi	sp,sp,16
 10068fc:	f800283a 	ret
 1006900:	100918c0 	call	100918c <strcmp>
 1006904:	0007883a 	mov	r3,zero
 1006908:	103ff226 	beq	r2,zero,10068d4 <_setlocale_r+0x48>
 100690c:	003ff506 	br	10068e4 <_setlocale_r+0x58>

01006910 <setlocale>:
 1006910:	018040b4 	movhi	r6,258
 1006914:	31a8f804 	addi	r6,r6,-23584
 1006918:	2007883a 	mov	r3,r4
 100691c:	31000017 	ldw	r4,0(r6)
 1006920:	280d883a 	mov	r6,r5
 1006924:	180b883a 	mov	r5,r3
 1006928:	100688c1 	jmpi	100688c <_setlocale_r>

0100692c <__smakebuf_r>:
 100692c:	2880030b 	ldhu	r2,12(r5)
 1006930:	deffed04 	addi	sp,sp,-76
 1006934:	dc401015 	stw	r17,64(sp)
 1006938:	1080008c 	andi	r2,r2,2
 100693c:	dc000f15 	stw	r16,60(sp)
 1006940:	dfc01215 	stw	ra,72(sp)
 1006944:	dc801115 	stw	r18,68(sp)
 1006948:	2821883a 	mov	r16,r5
 100694c:	2023883a 	mov	r17,r4
 1006950:	10000b26 	beq	r2,zero,1006980 <__smakebuf_r+0x54>
 1006954:	28c010c4 	addi	r3,r5,67
 1006958:	00800044 	movi	r2,1
 100695c:	28800515 	stw	r2,20(r5)
 1006960:	28c00415 	stw	r3,16(r5)
 1006964:	28c00015 	stw	r3,0(r5)
 1006968:	dfc01217 	ldw	ra,72(sp)
 100696c:	dc801117 	ldw	r18,68(sp)
 1006970:	dc401017 	ldw	r17,64(sp)
 1006974:	dc000f17 	ldw	r16,60(sp)
 1006978:	dec01304 	addi	sp,sp,76
 100697c:	f800283a 	ret
 1006980:	2940038f 	ldh	r5,14(r5)
 1006984:	28002116 	blt	r5,zero,1006a0c <__smakebuf_r+0xe0>
 1006988:	d80d883a 	mov	r6,sp
 100698c:	100b8cc0 	call	100b8cc <_fstat_r>
 1006990:	10001e16 	blt	r2,zero,1006a0c <__smakebuf_r+0xe0>
 1006994:	d8800117 	ldw	r2,4(sp)
 1006998:	00e00014 	movui	r3,32768
 100699c:	113c000c 	andi	r4,r2,61440
 10069a0:	20c03126 	beq	r4,r3,1006a68 <__smakebuf_r+0x13c>
 10069a4:	8080030b 	ldhu	r2,12(r16)
 10069a8:	00c80004 	movi	r3,8192
 10069ac:	10820014 	ori	r2,r2,2048
 10069b0:	8080030d 	sth	r2,12(r16)
 10069b4:	20c01e26 	beq	r4,r3,1006a30 <__smakebuf_r+0x104>
 10069b8:	04810004 	movi	r18,1024
 10069bc:	8809883a 	mov	r4,r17
 10069c0:	900b883a 	mov	r5,r18
 10069c4:	1006ac00 	call	1006ac0 <_malloc_r>
 10069c8:	1009883a 	mov	r4,r2
 10069cc:	10003126 	beq	r2,zero,1006a94 <__smakebuf_r+0x168>
 10069d0:	80c0030b 	ldhu	r3,12(r16)
 10069d4:	00804034 	movhi	r2,256
 10069d8:	10968c04 	addi	r2,r2,23088
 10069dc:	88800f15 	stw	r2,60(r17)
 10069e0:	18c02014 	ori	r3,r3,128
 10069e4:	84800515 	stw	r18,20(r16)
 10069e8:	80c0030d 	sth	r3,12(r16)
 10069ec:	81000415 	stw	r4,16(r16)
 10069f0:	81000015 	stw	r4,0(r16)
 10069f4:	dfc01217 	ldw	ra,72(sp)
 10069f8:	dc801117 	ldw	r18,68(sp)
 10069fc:	dc401017 	ldw	r17,64(sp)
 1006a00:	dc000f17 	ldw	r16,60(sp)
 1006a04:	dec01304 	addi	sp,sp,76
 1006a08:	f800283a 	ret
 1006a0c:	80c0030b 	ldhu	r3,12(r16)
 1006a10:	1880200c 	andi	r2,r3,128
 1006a14:	10000426 	beq	r2,zero,1006a28 <__smakebuf_r+0xfc>
 1006a18:	04801004 	movi	r18,64
 1006a1c:	18820014 	ori	r2,r3,2048
 1006a20:	8080030d 	sth	r2,12(r16)
 1006a24:	003fe506 	br	10069bc <__smakebuf_r+0x90>
 1006a28:	04810004 	movi	r18,1024
 1006a2c:	003ffb06 	br	1006a1c <__smakebuf_r+0xf0>
 1006a30:	8140038f 	ldh	r5,14(r16)
 1006a34:	8809883a 	mov	r4,r17
 1006a38:	100c4c80 	call	100c4c8 <_isatty_r>
 1006a3c:	103fde26 	beq	r2,zero,10069b8 <__smakebuf_r+0x8c>
 1006a40:	8080030b 	ldhu	r2,12(r16)
 1006a44:	80c010c4 	addi	r3,r16,67
 1006a48:	04810004 	movi	r18,1024
 1006a4c:	10800054 	ori	r2,r2,1
 1006a50:	8080030d 	sth	r2,12(r16)
 1006a54:	00800044 	movi	r2,1
 1006a58:	80c00415 	stw	r3,16(r16)
 1006a5c:	80800515 	stw	r2,20(r16)
 1006a60:	80c00015 	stw	r3,0(r16)
 1006a64:	003fd506 	br	10069bc <__smakebuf_r+0x90>
 1006a68:	80c00a17 	ldw	r3,40(r16)
 1006a6c:	00804074 	movhi	r2,257
 1006a70:	10a41204 	addi	r2,r2,-28600
 1006a74:	18bfcb1e 	bne	r3,r2,10069a4 <__smakebuf_r+0x78>
 1006a78:	8080030b 	ldhu	r2,12(r16)
 1006a7c:	00c10004 	movi	r3,1024
 1006a80:	1825883a 	mov	r18,r3
 1006a84:	10c4b03a 	or	r2,r2,r3
 1006a88:	8080030d 	sth	r2,12(r16)
 1006a8c:	80c01315 	stw	r3,76(r16)
 1006a90:	003fca06 	br	10069bc <__smakebuf_r+0x90>
 1006a94:	8100030b 	ldhu	r4,12(r16)
 1006a98:	2080800c 	andi	r2,r4,512
 1006a9c:	103fb21e 	bne	r2,zero,1006968 <__smakebuf_r+0x3c>
 1006aa0:	80c010c4 	addi	r3,r16,67
 1006aa4:	21000094 	ori	r4,r4,2
 1006aa8:	00800044 	movi	r2,1
 1006aac:	80800515 	stw	r2,20(r16)
 1006ab0:	8100030d 	sth	r4,12(r16)
 1006ab4:	80c00415 	stw	r3,16(r16)
 1006ab8:	80c00015 	stw	r3,0(r16)
 1006abc:	003faa06 	br	1006968 <__smakebuf_r+0x3c>

01006ac0 <_malloc_r>:
 1006ac0:	defff604 	addi	sp,sp,-40
 1006ac4:	28c002c4 	addi	r3,r5,11
 1006ac8:	00800584 	movi	r2,22
 1006acc:	dc800215 	stw	r18,8(sp)
 1006ad0:	dfc00915 	stw	ra,36(sp)
 1006ad4:	df000815 	stw	fp,32(sp)
 1006ad8:	ddc00715 	stw	r23,28(sp)
 1006adc:	dd800615 	stw	r22,24(sp)
 1006ae0:	dd400515 	stw	r21,20(sp)
 1006ae4:	dd000415 	stw	r20,16(sp)
 1006ae8:	dcc00315 	stw	r19,12(sp)
 1006aec:	dc400115 	stw	r17,4(sp)
 1006af0:	dc000015 	stw	r16,0(sp)
 1006af4:	2025883a 	mov	r18,r4
 1006af8:	10c01236 	bltu	r2,r3,1006b44 <_malloc_r+0x84>
 1006afc:	04400404 	movi	r17,16
 1006b00:	8940142e 	bgeu	r17,r5,1006b54 <_malloc_r+0x94>
 1006b04:	00800304 	movi	r2,12
 1006b08:	0007883a 	mov	r3,zero
 1006b0c:	90800015 	stw	r2,0(r18)
 1006b10:	1805883a 	mov	r2,r3
 1006b14:	dfc00917 	ldw	ra,36(sp)
 1006b18:	df000817 	ldw	fp,32(sp)
 1006b1c:	ddc00717 	ldw	r23,28(sp)
 1006b20:	dd800617 	ldw	r22,24(sp)
 1006b24:	dd400517 	ldw	r21,20(sp)
 1006b28:	dd000417 	ldw	r20,16(sp)
 1006b2c:	dcc00317 	ldw	r19,12(sp)
 1006b30:	dc800217 	ldw	r18,8(sp)
 1006b34:	dc400117 	ldw	r17,4(sp)
 1006b38:	dc000017 	ldw	r16,0(sp)
 1006b3c:	dec00a04 	addi	sp,sp,40
 1006b40:	f800283a 	ret
 1006b44:	00bffe04 	movi	r2,-8
 1006b48:	18a2703a 	and	r17,r3,r2
 1006b4c:	883fed16 	blt	r17,zero,1006b04 <_malloc_r+0x44>
 1006b50:	897fec36 	bltu	r17,r5,1006b04 <_malloc_r+0x44>
 1006b54:	9009883a 	mov	r4,r18
 1006b58:	100f6e00 	call	100f6e0 <__malloc_lock>
 1006b5c:	00807dc4 	movi	r2,503
 1006b60:	14402b2e 	bgeu	r2,r17,1006c10 <_malloc_r+0x150>
 1006b64:	8806d27a 	srli	r3,r17,9
 1006b68:	18003f1e 	bne	r3,zero,1006c68 <_malloc_r+0x1a8>
 1006b6c:	880cd0fa 	srli	r6,r17,3
 1006b70:	300490fa 	slli	r2,r6,3
 1006b74:	02c040b4 	movhi	r11,258
 1006b78:	5ae34804 	addi	r11,r11,-29408
 1006b7c:	12cb883a 	add	r5,r2,r11
 1006b80:	2c000317 	ldw	r16,12(r5)
 1006b84:	580f883a 	mov	r7,r11
 1006b88:	2c00041e 	bne	r5,r16,1006b9c <_malloc_r+0xdc>
 1006b8c:	00000a06 	br	1006bb8 <_malloc_r+0xf8>
 1006b90:	1800860e 	bge	r3,zero,1006dac <_malloc_r+0x2ec>
 1006b94:	84000317 	ldw	r16,12(r16)
 1006b98:	2c000726 	beq	r5,r16,1006bb8 <_malloc_r+0xf8>
 1006b9c:	80800117 	ldw	r2,4(r16)
 1006ba0:	00ffff04 	movi	r3,-4
 1006ba4:	10c8703a 	and	r4,r2,r3
 1006ba8:	2447c83a 	sub	r3,r4,r17
 1006bac:	008003c4 	movi	r2,15
 1006bb0:	10fff70e 	bge	r2,r3,1006b90 <_malloc_r+0xd0>
 1006bb4:	31bfffc4 	addi	r6,r6,-1
 1006bb8:	32400044 	addi	r9,r6,1
 1006bbc:	028040b4 	movhi	r10,258
 1006bc0:	52a34a04 	addi	r10,r10,-29400
 1006bc4:	54000217 	ldw	r16,8(r10)
 1006bc8:	8280a026 	beq	r16,r10,1006e4c <_malloc_r+0x38c>
 1006bcc:	80800117 	ldw	r2,4(r16)
 1006bd0:	00ffff04 	movi	r3,-4
 1006bd4:	10ca703a 	and	r5,r2,r3
 1006bd8:	2c4dc83a 	sub	r6,r5,r17
 1006bdc:	008003c4 	movi	r2,15
 1006be0:	11808316 	blt	r2,r6,1006df0 <_malloc_r+0x330>
 1006be4:	52800315 	stw	r10,12(r10)
 1006be8:	52800215 	stw	r10,8(r10)
 1006bec:	30002916 	blt	r6,zero,1006c94 <_malloc_r+0x1d4>
 1006bf0:	8147883a 	add	r3,r16,r5
 1006bf4:	18800117 	ldw	r2,4(r3)
 1006bf8:	9009883a 	mov	r4,r18
 1006bfc:	10800054 	ori	r2,r2,1
 1006c00:	18800115 	stw	r2,4(r3)
 1006c04:	100f7000 	call	100f700 <__malloc_unlock>
 1006c08:	80c00204 	addi	r3,r16,8
 1006c0c:	003fc006 	br	1006b10 <_malloc_r+0x50>
 1006c10:	02c040b4 	movhi	r11,258
 1006c14:	5ae34804 	addi	r11,r11,-29408
 1006c18:	8ac5883a 	add	r2,r17,r11
 1006c1c:	14000317 	ldw	r16,12(r2)
 1006c20:	580f883a 	mov	r7,r11
 1006c24:	8806d0fa 	srli	r3,r17,3
 1006c28:	14006c26 	beq	r2,r16,1006ddc <_malloc_r+0x31c>
 1006c2c:	80c00117 	ldw	r3,4(r16)
 1006c30:	00bfff04 	movi	r2,-4
 1006c34:	81800317 	ldw	r6,12(r16)
 1006c38:	1886703a 	and	r3,r3,r2
 1006c3c:	80c7883a 	add	r3,r16,r3
 1006c40:	18800117 	ldw	r2,4(r3)
 1006c44:	81400217 	ldw	r5,8(r16)
 1006c48:	9009883a 	mov	r4,r18
 1006c4c:	10800054 	ori	r2,r2,1
 1006c50:	18800115 	stw	r2,4(r3)
 1006c54:	31400215 	stw	r5,8(r6)
 1006c58:	29800315 	stw	r6,12(r5)
 1006c5c:	100f7000 	call	100f700 <__malloc_unlock>
 1006c60:	80c00204 	addi	r3,r16,8
 1006c64:	003faa06 	br	1006b10 <_malloc_r+0x50>
 1006c68:	00800104 	movi	r2,4
 1006c6c:	10c0052e 	bgeu	r2,r3,1006c84 <_malloc_r+0x1c4>
 1006c70:	00800504 	movi	r2,20
 1006c74:	10c07836 	bltu	r2,r3,1006e58 <_malloc_r+0x398>
 1006c78:	198016c4 	addi	r6,r3,91
 1006c7c:	300490fa 	slli	r2,r6,3
 1006c80:	003fbc06 	br	1006b74 <_malloc_r+0xb4>
 1006c84:	8804d1ba 	srli	r2,r17,6
 1006c88:	11800e04 	addi	r6,r2,56
 1006c8c:	300490fa 	slli	r2,r6,3
 1006c90:	003fb806 	br	1006b74 <_malloc_r+0xb4>
 1006c94:	00807fc4 	movi	r2,511
 1006c98:	1140bb36 	bltu	r2,r5,1006f88 <_malloc_r+0x4c8>
 1006c9c:	2806d0fa 	srli	r3,r5,3
 1006ca0:	573ffe04 	addi	fp,r10,-8
 1006ca4:	00800044 	movi	r2,1
 1006ca8:	180890fa 	slli	r4,r3,3
 1006cac:	1807d0ba 	srai	r3,r3,2
 1006cb0:	e1c00117 	ldw	r7,4(fp)
 1006cb4:	5909883a 	add	r4,r11,r4
 1006cb8:	21400217 	ldw	r5,8(r4)
 1006cbc:	10c4983a 	sll	r2,r2,r3
 1006cc0:	81000315 	stw	r4,12(r16)
 1006cc4:	81400215 	stw	r5,8(r16)
 1006cc8:	388eb03a 	or	r7,r7,r2
 1006ccc:	2c000315 	stw	r16,12(r5)
 1006cd0:	24000215 	stw	r16,8(r4)
 1006cd4:	e1c00115 	stw	r7,4(fp)
 1006cd8:	4807883a 	mov	r3,r9
 1006cdc:	4800cd16 	blt	r9,zero,1007014 <_malloc_r+0x554>
 1006ce0:	1807d0ba 	srai	r3,r3,2
 1006ce4:	00800044 	movi	r2,1
 1006ce8:	10c8983a 	sll	r4,r2,r3
 1006cec:	39004436 	bltu	r7,r4,1006e00 <_malloc_r+0x340>
 1006cf0:	21c4703a 	and	r2,r4,r7
 1006cf4:	10000a1e 	bne	r2,zero,1006d20 <_malloc_r+0x260>
 1006cf8:	2109883a 	add	r4,r4,r4
 1006cfc:	00bfff04 	movi	r2,-4
 1006d00:	4884703a 	and	r2,r9,r2
 1006d04:	3906703a 	and	r3,r7,r4
 1006d08:	12400104 	addi	r9,r2,4
 1006d0c:	1800041e 	bne	r3,zero,1006d20 <_malloc_r+0x260>
 1006d10:	2109883a 	add	r4,r4,r4
 1006d14:	3904703a 	and	r2,r7,r4
 1006d18:	4a400104 	addi	r9,r9,4
 1006d1c:	103ffc26 	beq	r2,zero,1006d10 <_malloc_r+0x250>
 1006d20:	480490fa 	slli	r2,r9,3
 1006d24:	4819883a 	mov	r12,r9
 1006d28:	023fff04 	movi	r8,-4
 1006d2c:	589b883a 	add	r13,r11,r2
 1006d30:	6807883a 	mov	r3,r13
 1006d34:	014003c4 	movi	r5,15
 1006d38:	1c000317 	ldw	r16,12(r3)
 1006d3c:	1c00041e 	bne	r3,r16,1006d50 <_malloc_r+0x290>
 1006d40:	0000a706 	br	1006fe0 <_malloc_r+0x520>
 1006d44:	3000ab0e 	bge	r6,zero,1006ff4 <_malloc_r+0x534>
 1006d48:	84000317 	ldw	r16,12(r16)
 1006d4c:	1c00a426 	beq	r3,r16,1006fe0 <_malloc_r+0x520>
 1006d50:	80800117 	ldw	r2,4(r16)
 1006d54:	1204703a 	and	r2,r2,r8
 1006d58:	144dc83a 	sub	r6,r2,r17
 1006d5c:	29bff90e 	bge	r5,r6,1006d44 <_malloc_r+0x284>
 1006d60:	81000317 	ldw	r4,12(r16)
 1006d64:	80c00217 	ldw	r3,8(r16)
 1006d68:	89400054 	ori	r5,r17,1
 1006d6c:	8445883a 	add	r2,r16,r17
 1006d70:	20c00215 	stw	r3,8(r4)
 1006d74:	19000315 	stw	r4,12(r3)
 1006d78:	81400115 	stw	r5,4(r16)
 1006d7c:	1187883a 	add	r3,r2,r6
 1006d80:	31000054 	ori	r4,r6,1
 1006d84:	50800315 	stw	r2,12(r10)
 1006d88:	50800215 	stw	r2,8(r10)
 1006d8c:	19800015 	stw	r6,0(r3)
 1006d90:	11000115 	stw	r4,4(r2)
 1006d94:	12800215 	stw	r10,8(r2)
 1006d98:	12800315 	stw	r10,12(r2)
 1006d9c:	9009883a 	mov	r4,r18
 1006da0:	100f7000 	call	100f700 <__malloc_unlock>
 1006da4:	80c00204 	addi	r3,r16,8
 1006da8:	003f5906 	br	1006b10 <_malloc_r+0x50>
 1006dac:	8109883a 	add	r4,r16,r4
 1006db0:	20800117 	ldw	r2,4(r4)
 1006db4:	80c00217 	ldw	r3,8(r16)
 1006db8:	81400317 	ldw	r5,12(r16)
 1006dbc:	10800054 	ori	r2,r2,1
 1006dc0:	20800115 	stw	r2,4(r4)
 1006dc4:	28c00215 	stw	r3,8(r5)
 1006dc8:	19400315 	stw	r5,12(r3)
 1006dcc:	9009883a 	mov	r4,r18
 1006dd0:	100f7000 	call	100f700 <__malloc_unlock>
 1006dd4:	80c00204 	addi	r3,r16,8
 1006dd8:	003f4d06 	br	1006b10 <_malloc_r+0x50>
 1006ddc:	80800204 	addi	r2,r16,8
 1006de0:	14000317 	ldw	r16,12(r2)
 1006de4:	143f911e 	bne	r2,r16,1006c2c <_malloc_r+0x16c>
 1006de8:	1a400084 	addi	r9,r3,2
 1006dec:	003f7306 	br	1006bbc <_malloc_r+0xfc>
 1006df0:	88c00054 	ori	r3,r17,1
 1006df4:	8445883a 	add	r2,r16,r17
 1006df8:	80c00115 	stw	r3,4(r16)
 1006dfc:	003fdf06 	br	1006d7c <_malloc_r+0x2bc>
 1006e00:	e4000217 	ldw	r16,8(fp)
 1006e04:	00bfff04 	movi	r2,-4
 1006e08:	80c00117 	ldw	r3,4(r16)
 1006e0c:	802d883a 	mov	r22,r16
 1006e10:	18aa703a 	and	r21,r3,r2
 1006e14:	ac401636 	bltu	r21,r17,1006e70 <_malloc_r+0x3b0>
 1006e18:	ac49c83a 	sub	r4,r21,r17
 1006e1c:	008003c4 	movi	r2,15
 1006e20:	1100130e 	bge	r2,r4,1006e70 <_malloc_r+0x3b0>
 1006e24:	88800054 	ori	r2,r17,1
 1006e28:	8447883a 	add	r3,r16,r17
 1006e2c:	80800115 	stw	r2,4(r16)
 1006e30:	20800054 	ori	r2,r4,1
 1006e34:	18800115 	stw	r2,4(r3)
 1006e38:	e0c00215 	stw	r3,8(fp)
 1006e3c:	9009883a 	mov	r4,r18
 1006e40:	100f7000 	call	100f700 <__malloc_unlock>
 1006e44:	80c00204 	addi	r3,r16,8
 1006e48:	003f3106 	br	1006b10 <_malloc_r+0x50>
 1006e4c:	39c00117 	ldw	r7,4(r7)
 1006e50:	573ffe04 	addi	fp,r10,-8
 1006e54:	003fa006 	br	1006cd8 <_malloc_r+0x218>
 1006e58:	00801504 	movi	r2,84
 1006e5c:	10c06736 	bltu	r2,r3,1006ffc <_malloc_r+0x53c>
 1006e60:	8804d33a 	srli	r2,r17,12
 1006e64:	11801b84 	addi	r6,r2,110
 1006e68:	300490fa 	slli	r2,r6,3
 1006e6c:	003f4106 	br	1006b74 <_malloc_r+0xb4>
 1006e70:	d0a6d717 	ldw	r2,-25764(gp)
 1006e74:	d0e00617 	ldw	r3,-32744(gp)
 1006e78:	053fffc4 	movi	r20,-1
 1006e7c:	10800404 	addi	r2,r2,16
 1006e80:	88a7883a 	add	r19,r17,r2
 1006e84:	1d000326 	beq	r3,r20,1006e94 <_malloc_r+0x3d4>
 1006e88:	98c3ffc4 	addi	r3,r19,4095
 1006e8c:	00bc0004 	movi	r2,-4096
 1006e90:	18a6703a 	and	r19,r3,r2
 1006e94:	9009883a 	mov	r4,r18
 1006e98:	980b883a 	mov	r5,r19
 1006e9c:	1008e340 	call	1008e34 <_sbrk_r>
 1006ea0:	1009883a 	mov	r4,r2
 1006ea4:	15000426 	beq	r2,r20,1006eb8 <_malloc_r+0x3f8>
 1006ea8:	854b883a 	add	r5,r16,r21
 1006eac:	1029883a 	mov	r20,r2
 1006eb0:	11405a2e 	bgeu	r2,r5,100701c <_malloc_r+0x55c>
 1006eb4:	87000c26 	beq	r16,fp,1006ee8 <_malloc_r+0x428>
 1006eb8:	e4000217 	ldw	r16,8(fp)
 1006ebc:	80c00117 	ldw	r3,4(r16)
 1006ec0:	00bfff04 	movi	r2,-4
 1006ec4:	1884703a 	and	r2,r3,r2
 1006ec8:	14400336 	bltu	r2,r17,1006ed8 <_malloc_r+0x418>
 1006ecc:	1449c83a 	sub	r4,r2,r17
 1006ed0:	008003c4 	movi	r2,15
 1006ed4:	113fd316 	blt	r2,r4,1006e24 <_malloc_r+0x364>
 1006ed8:	9009883a 	mov	r4,r18
 1006edc:	100f7000 	call	100f700 <__malloc_unlock>
 1006ee0:	0007883a 	mov	r3,zero
 1006ee4:	003f0a06 	br	1006b10 <_malloc_r+0x50>
 1006ee8:	05c040b4 	movhi	r23,258
 1006eec:	bdefe504 	addi	r23,r23,-16492
 1006ef0:	b8800017 	ldw	r2,0(r23)
 1006ef4:	988d883a 	add	r6,r19,r2
 1006ef8:	b9800015 	stw	r6,0(r23)
 1006efc:	d0e00617 	ldw	r3,-32744(gp)
 1006f00:	00bfffc4 	movi	r2,-1
 1006f04:	18808e26 	beq	r3,r2,1007140 <_malloc_r+0x680>
 1006f08:	2145c83a 	sub	r2,r4,r5
 1006f0c:	3085883a 	add	r2,r6,r2
 1006f10:	b8800015 	stw	r2,0(r23)
 1006f14:	20c001cc 	andi	r3,r4,7
 1006f18:	18005f1e 	bne	r3,zero,1007098 <_malloc_r+0x5d8>
 1006f1c:	000b883a 	mov	r5,zero
 1006f20:	a4c5883a 	add	r2,r20,r19
 1006f24:	1083ffcc 	andi	r2,r2,4095
 1006f28:	00c40004 	movi	r3,4096
 1006f2c:	1887c83a 	sub	r3,r3,r2
 1006f30:	28e7883a 	add	r19,r5,r3
 1006f34:	9009883a 	mov	r4,r18
 1006f38:	980b883a 	mov	r5,r19
 1006f3c:	1008e340 	call	1008e34 <_sbrk_r>
 1006f40:	1007883a 	mov	r3,r2
 1006f44:	00bfffc4 	movi	r2,-1
 1006f48:	18807a26 	beq	r3,r2,1007134 <_malloc_r+0x674>
 1006f4c:	1d05c83a 	sub	r2,r3,r20
 1006f50:	9885883a 	add	r2,r19,r2
 1006f54:	10c00054 	ori	r3,r2,1
 1006f58:	b8800017 	ldw	r2,0(r23)
 1006f5c:	a021883a 	mov	r16,r20
 1006f60:	a0c00115 	stw	r3,4(r20)
 1006f64:	9885883a 	add	r2,r19,r2
 1006f68:	b8800015 	stw	r2,0(r23)
 1006f6c:	e5000215 	stw	r20,8(fp)
 1006f70:	b7003626 	beq	r22,fp,100704c <_malloc_r+0x58c>
 1006f74:	018003c4 	movi	r6,15
 1006f78:	35404b36 	bltu	r6,r21,10070a8 <_malloc_r+0x5e8>
 1006f7c:	00800044 	movi	r2,1
 1006f80:	a0800115 	stw	r2,4(r20)
 1006f84:	003fcd06 	br	1006ebc <_malloc_r+0x3fc>
 1006f88:	2808d27a 	srli	r4,r5,9
 1006f8c:	2000371e 	bne	r4,zero,100706c <_malloc_r+0x5ac>
 1006f90:	2808d0fa 	srli	r4,r5,3
 1006f94:	200690fa 	slli	r3,r4,3
 1006f98:	1ad1883a 	add	r8,r3,r11
 1006f9c:	41800217 	ldw	r6,8(r8)
 1006fa0:	41805b26 	beq	r8,r6,1007110 <_malloc_r+0x650>
 1006fa4:	30800117 	ldw	r2,4(r6)
 1006fa8:	00ffff04 	movi	r3,-4
 1006fac:	10c4703a 	and	r2,r2,r3
 1006fb0:	2880022e 	bgeu	r5,r2,1006fbc <_malloc_r+0x4fc>
 1006fb4:	31800217 	ldw	r6,8(r6)
 1006fb8:	41bffa1e 	bne	r8,r6,1006fa4 <_malloc_r+0x4e4>
 1006fbc:	32000317 	ldw	r8,12(r6)
 1006fc0:	39c00117 	ldw	r7,4(r7)
 1006fc4:	82000315 	stw	r8,12(r16)
 1006fc8:	81800215 	stw	r6,8(r16)
 1006fcc:	070040b4 	movhi	fp,258
 1006fd0:	e7234804 	addi	fp,fp,-29408
 1006fd4:	34000315 	stw	r16,12(r6)
 1006fd8:	44000215 	stw	r16,8(r8)
 1006fdc:	003f3e06 	br	1006cd8 <_malloc_r+0x218>
 1006fe0:	63000044 	addi	r12,r12,1
 1006fe4:	608000cc 	andi	r2,r12,3
 1006fe8:	10005d26 	beq	r2,zero,1007160 <_malloc_r+0x6a0>
 1006fec:	18c00204 	addi	r3,r3,8
 1006ff0:	003f5106 	br	1006d38 <_malloc_r+0x278>
 1006ff4:	8089883a 	add	r4,r16,r2
 1006ff8:	003f6d06 	br	1006db0 <_malloc_r+0x2f0>
 1006ffc:	00805504 	movi	r2,340
 1007000:	10c02036 	bltu	r2,r3,1007084 <_malloc_r+0x5c4>
 1007004:	8804d3fa 	srli	r2,r17,15
 1007008:	11801dc4 	addi	r6,r2,119
 100700c:	300490fa 	slli	r2,r6,3
 1007010:	003ed806 	br	1006b74 <_malloc_r+0xb4>
 1007014:	48c000c4 	addi	r3,r9,3
 1007018:	003f3106 	br	1006ce0 <_malloc_r+0x220>
 100701c:	05c040b4 	movhi	r23,258
 1007020:	bdefe504 	addi	r23,r23,-16492
 1007024:	b8800017 	ldw	r2,0(r23)
 1007028:	988d883a 	add	r6,r19,r2
 100702c:	b9800015 	stw	r6,0(r23)
 1007030:	293fb21e 	bne	r5,r4,1006efc <_malloc_r+0x43c>
 1007034:	2083ffcc 	andi	r2,r4,4095
 1007038:	103fb01e 	bne	r2,zero,1006efc <_malloc_r+0x43c>
 100703c:	e4000217 	ldw	r16,8(fp)
 1007040:	9d45883a 	add	r2,r19,r21
 1007044:	10800054 	ori	r2,r2,1
 1007048:	80800115 	stw	r2,4(r16)
 100704c:	b8c00017 	ldw	r3,0(r23)
 1007050:	d0a6d817 	ldw	r2,-25760(gp)
 1007054:	10c0012e 	bgeu	r2,r3,100705c <_malloc_r+0x59c>
 1007058:	d0e6d815 	stw	r3,-25760(gp)
 100705c:	d0a6d917 	ldw	r2,-25756(gp)
 1007060:	10ff962e 	bgeu	r2,r3,1006ebc <_malloc_r+0x3fc>
 1007064:	d0e6d915 	stw	r3,-25756(gp)
 1007068:	003f9406 	br	1006ebc <_malloc_r+0x3fc>
 100706c:	00800104 	movi	r2,4
 1007070:	11001e36 	bltu	r2,r4,10070ec <_malloc_r+0x62c>
 1007074:	2804d1ba 	srli	r2,r5,6
 1007078:	11000e04 	addi	r4,r2,56
 100707c:	200690fa 	slli	r3,r4,3
 1007080:	003fc506 	br	1006f98 <_malloc_r+0x4d8>
 1007084:	00815504 	movi	r2,1364
 1007088:	10c01d2e 	bgeu	r2,r3,1007100 <_malloc_r+0x640>
 100708c:	01801f84 	movi	r6,126
 1007090:	0080fc04 	movi	r2,1008
 1007094:	003eb706 	br	1006b74 <_malloc_r+0xb4>
 1007098:	00800204 	movi	r2,8
 100709c:	10cbc83a 	sub	r5,r2,r3
 10070a0:	2169883a 	add	r20,r4,r5
 10070a4:	003f9e06 	br	1006f20 <_malloc_r+0x460>
 10070a8:	00bffe04 	movi	r2,-8
 10070ac:	a93ffd04 	addi	r4,r21,-12
 10070b0:	2088703a 	and	r4,r4,r2
 10070b4:	b10b883a 	add	r5,r22,r4
 10070b8:	00c00144 	movi	r3,5
 10070bc:	28c00215 	stw	r3,8(r5)
 10070c0:	28c00115 	stw	r3,4(r5)
 10070c4:	b0800117 	ldw	r2,4(r22)
 10070c8:	1080004c 	andi	r2,r2,1
 10070cc:	2084b03a 	or	r2,r4,r2
 10070d0:	b0800115 	stw	r2,4(r22)
 10070d4:	313fdd2e 	bgeu	r6,r4,100704c <_malloc_r+0x58c>
 10070d8:	b1400204 	addi	r5,r22,8
 10070dc:	9009883a 	mov	r4,r18
 10070e0:	1005f0c0 	call	1005f0c <_free_r>
 10070e4:	e4000217 	ldw	r16,8(fp)
 10070e8:	003fd806 	br	100704c <_malloc_r+0x58c>
 10070ec:	00800504 	movi	r2,20
 10070f0:	11001536 	bltu	r2,r4,1007148 <_malloc_r+0x688>
 10070f4:	210016c4 	addi	r4,r4,91
 10070f8:	200690fa 	slli	r3,r4,3
 10070fc:	003fa606 	br	1006f98 <_malloc_r+0x4d8>
 1007100:	8804d4ba 	srli	r2,r17,18
 1007104:	11801f04 	addi	r6,r2,124
 1007108:	300490fa 	slli	r2,r6,3
 100710c:	003e9906 	br	1006b74 <_malloc_r+0xb4>
 1007110:	2009d0ba 	srai	r4,r4,2
 1007114:	014040b4 	movhi	r5,258
 1007118:	29634804 	addi	r5,r5,-29408
 100711c:	00c00044 	movi	r3,1
 1007120:	28800117 	ldw	r2,4(r5)
 1007124:	1906983a 	sll	r3,r3,r4
 1007128:	10c4b03a 	or	r2,r2,r3
 100712c:	28800115 	stw	r2,4(r5)
 1007130:	003fa306 	br	1006fc0 <_malloc_r+0x500>
 1007134:	0027883a 	mov	r19,zero
 1007138:	00c00044 	movi	r3,1
 100713c:	003f8606 	br	1006f58 <_malloc_r+0x498>
 1007140:	d1200615 	stw	r4,-32744(gp)
 1007144:	003f7306 	br	1006f14 <_malloc_r+0x454>
 1007148:	00801504 	movi	r2,84
 100714c:	11001936 	bltu	r2,r4,10071b4 <_malloc_r+0x6f4>
 1007150:	2804d33a 	srli	r2,r5,12
 1007154:	11001b84 	addi	r4,r2,110
 1007158:	200690fa 	slli	r3,r4,3
 100715c:	003f8e06 	br	1006f98 <_malloc_r+0x4d8>
 1007160:	480b883a 	mov	r5,r9
 1007164:	6807883a 	mov	r3,r13
 1007168:	288000cc 	andi	r2,r5,3
 100716c:	18fffe04 	addi	r3,r3,-8
 1007170:	297fffc4 	addi	r5,r5,-1
 1007174:	10001526 	beq	r2,zero,10071cc <_malloc_r+0x70c>
 1007178:	18800217 	ldw	r2,8(r3)
 100717c:	10fffa26 	beq	r2,r3,1007168 <_malloc_r+0x6a8>
 1007180:	2109883a 	add	r4,r4,r4
 1007184:	393f1e36 	bltu	r7,r4,1006e00 <_malloc_r+0x340>
 1007188:	203f1d26 	beq	r4,zero,1006e00 <_malloc_r+0x340>
 100718c:	21c4703a 	and	r2,r4,r7
 1007190:	10000226 	beq	r2,zero,100719c <_malloc_r+0x6dc>
 1007194:	6013883a 	mov	r9,r12
 1007198:	003ee106 	br	1006d20 <_malloc_r+0x260>
 100719c:	2109883a 	add	r4,r4,r4
 10071a0:	3904703a 	and	r2,r7,r4
 10071a4:	63000104 	addi	r12,r12,4
 10071a8:	103ffc26 	beq	r2,zero,100719c <_malloc_r+0x6dc>
 10071ac:	6013883a 	mov	r9,r12
 10071b0:	003edb06 	br	1006d20 <_malloc_r+0x260>
 10071b4:	00805504 	movi	r2,340
 10071b8:	11000836 	bltu	r2,r4,10071dc <_malloc_r+0x71c>
 10071bc:	2804d3fa 	srli	r2,r5,15
 10071c0:	11001dc4 	addi	r4,r2,119
 10071c4:	200690fa 	slli	r3,r4,3
 10071c8:	003f7306 	br	1006f98 <_malloc_r+0x4d8>
 10071cc:	0104303a 	nor	r2,zero,r4
 10071d0:	388e703a 	and	r7,r7,r2
 10071d4:	e1c00115 	stw	r7,4(fp)
 10071d8:	003fe906 	br	1007180 <_malloc_r+0x6c0>
 10071dc:	00815504 	movi	r2,1364
 10071e0:	1100032e 	bgeu	r2,r4,10071f0 <_malloc_r+0x730>
 10071e4:	01001f84 	movi	r4,126
 10071e8:	00c0fc04 	movi	r3,1008
 10071ec:	003f6a06 	br	1006f98 <_malloc_r+0x4d8>
 10071f0:	2804d4ba 	srli	r2,r5,18
 10071f4:	11001f04 	addi	r4,r2,124
 10071f8:	200690fa 	slli	r3,r4,3
 10071fc:	003f6606 	br	1006f98 <_malloc_r+0x4d8>

01007200 <_mbrtowc_r>:
 1007200:	defffc04 	addi	sp,sp,-16
 1007204:	dc400215 	stw	r17,8(sp)
 1007208:	dc000115 	stw	r16,4(sp)
 100720c:	dfc00315 	stw	ra,12(sp)
 1007210:	dc000417 	ldw	r16,16(sp)
 1007214:	2023883a 	mov	r17,r4
 1007218:	30000f26 	beq	r6,zero,1007258 <_mbrtowc_r+0x58>
 100721c:	dc000015 	stw	r16,0(sp)
 1007220:	10072c00 	call	10072c0 <_mbtowc_r>
 1007224:	1007883a 	mov	r3,r2
 1007228:	00bfffc4 	movi	r2,-1
 100722c:	1809883a 	mov	r4,r3
 1007230:	1880111e 	bne	r3,r2,1007278 <_mbrtowc_r+0x78>
 1007234:	80000015 	stw	zero,0(r16)
 1007238:	00802284 	movi	r2,138
 100723c:	88800015 	stw	r2,0(r17)
 1007240:	2005883a 	mov	r2,r4
 1007244:	dfc00317 	ldw	ra,12(sp)
 1007248:	dc400217 	ldw	r17,8(sp)
 100724c:	dc000117 	ldw	r16,4(sp)
 1007250:	dec00404 	addi	sp,sp,16
 1007254:	f800283a 	ret
 1007258:	000b883a 	mov	r5,zero
 100725c:	018040b4 	movhi	r6,258
 1007260:	31a23c04 	addi	r6,r6,-30480
 1007264:	01c00044 	movi	r7,1
 1007268:	dc000015 	stw	r16,0(sp)
 100726c:	10072c00 	call	10072c0 <_mbtowc_r>
 1007270:	1007883a 	mov	r3,r2
 1007274:	003fec06 	br	1007228 <_mbrtowc_r+0x28>
 1007278:	1809883a 	mov	r4,r3
 100727c:	003ff006 	br	1007240 <_mbrtowc_r+0x40>

01007280 <mbrtowc>:
 1007280:	008040b4 	movhi	r2,258
 1007284:	10a8f804 	addi	r2,r2,-23584
 1007288:	2017883a 	mov	r11,r4
 100728c:	11000017 	ldw	r4,0(r2)
 1007290:	defffe04 	addi	sp,sp,-8
 1007294:	3013883a 	mov	r9,r6
 1007298:	2805883a 	mov	r2,r5
 100729c:	d9c00015 	stw	r7,0(sp)
 10072a0:	580b883a 	mov	r5,r11
 10072a4:	100d883a 	mov	r6,r2
 10072a8:	480f883a 	mov	r7,r9
 10072ac:	dfc00115 	stw	ra,4(sp)
 10072b0:	10072000 	call	1007200 <_mbrtowc_r>
 10072b4:	dfc00117 	ldw	ra,4(sp)
 10072b8:	dec00204 	addi	sp,sp,8
 10072bc:	f800283a 	ret

010072c0 <_mbtowc_r>:
 10072c0:	deffff04 	addi	sp,sp,-4
 10072c4:	0005883a 	mov	r2,zero
 10072c8:	28000326 	beq	r5,zero,10072d8 <_mbtowc_r+0x18>
 10072cc:	3000041e 	bne	r6,zero,10072e0 <_mbtowc_r+0x20>
 10072d0:	dec00104 	addi	sp,sp,4
 10072d4:	f800283a 	ret
 10072d8:	d80b883a 	mov	r5,sp
 10072dc:	303ffc26 	beq	r6,zero,10072d0 <_mbtowc_r+0x10>
 10072e0:	00bfff84 	movi	r2,-2
 10072e4:	383ffa26 	beq	r7,zero,10072d0 <_mbtowc_r+0x10>
 10072e8:	30800003 	ldbu	r2,0(r6)
 10072ec:	28800015 	stw	r2,0(r5)
 10072f0:	30c00003 	ldbu	r3,0(r6)
 10072f4:	1804c03a 	cmpne	r2,r3,zero
 10072f8:	dec00104 	addi	sp,sp,4
 10072fc:	f800283a 	ret

01007300 <memchr>:
 1007300:	008000c4 	movi	r2,3
 1007304:	29403fcc 	andi	r5,r5,255
 1007308:	2007883a 	mov	r3,r4
 100730c:	1180022e 	bgeu	r2,r6,1007318 <memchr+0x18>
 1007310:	2084703a 	and	r2,r4,r2
 1007314:	10000b26 	beq	r2,zero,1007344 <memchr+0x44>
 1007318:	313fffc4 	addi	r4,r6,-1
 100731c:	3000051e 	bne	r6,zero,1007334 <memchr+0x34>
 1007320:	00002c06 	br	10073d4 <memchr+0xd4>
 1007324:	213fffc4 	addi	r4,r4,-1
 1007328:	00bfffc4 	movi	r2,-1
 100732c:	18c00044 	addi	r3,r3,1
 1007330:	20802826 	beq	r4,r2,10073d4 <memchr+0xd4>
 1007334:	18800003 	ldbu	r2,0(r3)
 1007338:	28bffa1e 	bne	r5,r2,1007324 <memchr+0x24>
 100733c:	1805883a 	mov	r2,r3
 1007340:	f800283a 	ret
 1007344:	0011883a 	mov	r8,zero
 1007348:	0007883a 	mov	r3,zero
 100734c:	01c00104 	movi	r7,4
 1007350:	4004923a 	slli	r2,r8,8
 1007354:	18c00044 	addi	r3,r3,1
 1007358:	1151883a 	add	r8,r2,r5
 100735c:	19fffc1e 	bne	r3,r7,1007350 <memchr+0x50>
 1007360:	02bfbff4 	movhi	r10,65279
 1007364:	52bfbfc4 	addi	r10,r10,-257
 1007368:	02602074 	movhi	r9,32897
 100736c:	4a602004 	addi	r9,r9,-32640
 1007370:	02c000c4 	movi	r11,3
 1007374:	20800017 	ldw	r2,0(r4)
 1007378:	31bfff04 	addi	r6,r6,-4
 100737c:	200f883a 	mov	r7,r4
 1007380:	1204f03a 	xor	r2,r2,r8
 1007384:	1287883a 	add	r3,r2,r10
 1007388:	1a46703a 	and	r3,r3,r9
 100738c:	0084303a 	nor	r2,zero,r2
 1007390:	10c4703a 	and	r2,r2,r3
 1007394:	10000b26 	beq	r2,zero,10073c4 <memchr+0xc4>
 1007398:	20800003 	ldbu	r2,0(r4)
 100739c:	28800f26 	beq	r5,r2,10073dc <memchr+0xdc>
 10073a0:	20800043 	ldbu	r2,1(r4)
 10073a4:	21c00044 	addi	r7,r4,1
 10073a8:	28800c26 	beq	r5,r2,10073dc <memchr+0xdc>
 10073ac:	20800083 	ldbu	r2,2(r4)
 10073b0:	21c00084 	addi	r7,r4,2
 10073b4:	28800926 	beq	r5,r2,10073dc <memchr+0xdc>
 10073b8:	208000c3 	ldbu	r2,3(r4)
 10073bc:	21c000c4 	addi	r7,r4,3
 10073c0:	28800626 	beq	r5,r2,10073dc <memchr+0xdc>
 10073c4:	21000104 	addi	r4,r4,4
 10073c8:	59bfea36 	bltu	r11,r6,1007374 <memchr+0x74>
 10073cc:	2007883a 	mov	r3,r4
 10073d0:	003fd106 	br	1007318 <memchr+0x18>
 10073d4:	0005883a 	mov	r2,zero
 10073d8:	f800283a 	ret
 10073dc:	3805883a 	mov	r2,r7
 10073e0:	f800283a 	ret

010073e4 <memcpy>:
 10073e4:	01c003c4 	movi	r7,15
 10073e8:	2007883a 	mov	r3,r4
 10073ec:	3980032e 	bgeu	r7,r6,10073fc <memcpy+0x18>
 10073f0:	2904b03a 	or	r2,r5,r4
 10073f4:	108000cc 	andi	r2,r2,3
 10073f8:	10000926 	beq	r2,zero,1007420 <memcpy+0x3c>
 10073fc:	30000626 	beq	r6,zero,1007418 <memcpy+0x34>
 1007400:	30cd883a 	add	r6,r6,r3
 1007404:	28800003 	ldbu	r2,0(r5)
 1007408:	29400044 	addi	r5,r5,1
 100740c:	18800005 	stb	r2,0(r3)
 1007410:	18c00044 	addi	r3,r3,1
 1007414:	30fffb1e 	bne	r6,r3,1007404 <memcpy+0x20>
 1007418:	2005883a 	mov	r2,r4
 100741c:	f800283a 	ret
 1007420:	3811883a 	mov	r8,r7
 1007424:	200f883a 	mov	r7,r4
 1007428:	28c00017 	ldw	r3,0(r5)
 100742c:	31bffc04 	addi	r6,r6,-16
 1007430:	38c00015 	stw	r3,0(r7)
 1007434:	28800117 	ldw	r2,4(r5)
 1007438:	38800115 	stw	r2,4(r7)
 100743c:	28c00217 	ldw	r3,8(r5)
 1007440:	38c00215 	stw	r3,8(r7)
 1007444:	28800317 	ldw	r2,12(r5)
 1007448:	29400404 	addi	r5,r5,16
 100744c:	38800315 	stw	r2,12(r7)
 1007450:	39c00404 	addi	r7,r7,16
 1007454:	41bff436 	bltu	r8,r6,1007428 <memcpy+0x44>
 1007458:	008000c4 	movi	r2,3
 100745c:	1180072e 	bgeu	r2,r6,100747c <memcpy+0x98>
 1007460:	1007883a 	mov	r3,r2
 1007464:	28800017 	ldw	r2,0(r5)
 1007468:	31bfff04 	addi	r6,r6,-4
 100746c:	29400104 	addi	r5,r5,4
 1007470:	38800015 	stw	r2,0(r7)
 1007474:	39c00104 	addi	r7,r7,4
 1007478:	19bffa36 	bltu	r3,r6,1007464 <memcpy+0x80>
 100747c:	3807883a 	mov	r3,r7
 1007480:	003fde06 	br	10073fc <memcpy+0x18>

01007484 <memmove>:
 1007484:	2807883a 	mov	r3,r5
 1007488:	2011883a 	mov	r8,r4
 100748c:	29000c2e 	bgeu	r5,r4,10074c0 <memmove+0x3c>
 1007490:	298f883a 	add	r7,r5,r6
 1007494:	21c00a2e 	bgeu	r4,r7,10074c0 <memmove+0x3c>
 1007498:	30000726 	beq	r6,zero,10074b8 <memmove+0x34>
 100749c:	2187883a 	add	r3,r4,r6
 10074a0:	198dc83a 	sub	r6,r3,r6
 10074a4:	39ffffc4 	addi	r7,r7,-1
 10074a8:	38800003 	ldbu	r2,0(r7)
 10074ac:	18ffffc4 	addi	r3,r3,-1
 10074b0:	18800005 	stb	r2,0(r3)
 10074b4:	19bffb1e 	bne	r3,r6,10074a4 <memmove+0x20>
 10074b8:	2005883a 	mov	r2,r4
 10074bc:	f800283a 	ret
 10074c0:	01c003c4 	movi	r7,15
 10074c4:	39800a36 	bltu	r7,r6,10074f0 <memmove+0x6c>
 10074c8:	303ffb26 	beq	r6,zero,10074b8 <memmove+0x34>
 10074cc:	400f883a 	mov	r7,r8
 10074d0:	320d883a 	add	r6,r6,r8
 10074d4:	28800003 	ldbu	r2,0(r5)
 10074d8:	29400044 	addi	r5,r5,1
 10074dc:	38800005 	stb	r2,0(r7)
 10074e0:	39c00044 	addi	r7,r7,1
 10074e4:	39bffb1e 	bne	r7,r6,10074d4 <memmove+0x50>
 10074e8:	2005883a 	mov	r2,r4
 10074ec:	f800283a 	ret
 10074f0:	1904b03a 	or	r2,r3,r4
 10074f4:	108000cc 	andi	r2,r2,3
 10074f8:	103ff31e 	bne	r2,zero,10074c8 <memmove+0x44>
 10074fc:	3811883a 	mov	r8,r7
 1007500:	180b883a 	mov	r5,r3
 1007504:	200f883a 	mov	r7,r4
 1007508:	28c00017 	ldw	r3,0(r5)
 100750c:	31bffc04 	addi	r6,r6,-16
 1007510:	38c00015 	stw	r3,0(r7)
 1007514:	28800117 	ldw	r2,4(r5)
 1007518:	38800115 	stw	r2,4(r7)
 100751c:	28c00217 	ldw	r3,8(r5)
 1007520:	38c00215 	stw	r3,8(r7)
 1007524:	28800317 	ldw	r2,12(r5)
 1007528:	29400404 	addi	r5,r5,16
 100752c:	38800315 	stw	r2,12(r7)
 1007530:	39c00404 	addi	r7,r7,16
 1007534:	41bff436 	bltu	r8,r6,1007508 <memmove+0x84>
 1007538:	008000c4 	movi	r2,3
 100753c:	1180072e 	bgeu	r2,r6,100755c <memmove+0xd8>
 1007540:	1007883a 	mov	r3,r2
 1007544:	28800017 	ldw	r2,0(r5)
 1007548:	31bfff04 	addi	r6,r6,-4
 100754c:	29400104 	addi	r5,r5,4
 1007550:	38800015 	stw	r2,0(r7)
 1007554:	39c00104 	addi	r7,r7,4
 1007558:	19bffa36 	bltu	r3,r6,1007544 <memmove+0xc0>
 100755c:	3811883a 	mov	r8,r7
 1007560:	003fd906 	br	10074c8 <memmove+0x44>

01007564 <memset>:
 1007564:	008000c4 	movi	r2,3
 1007568:	29403fcc 	andi	r5,r5,255
 100756c:	2007883a 	mov	r3,r4
 1007570:	1180022e 	bgeu	r2,r6,100757c <memset+0x18>
 1007574:	2084703a 	and	r2,r4,r2
 1007578:	10000826 	beq	r2,zero,100759c <memset+0x38>
 100757c:	30000526 	beq	r6,zero,1007594 <memset+0x30>
 1007580:	2805883a 	mov	r2,r5
 1007584:	30cd883a 	add	r6,r6,r3
 1007588:	18800005 	stb	r2,0(r3)
 100758c:	18c00044 	addi	r3,r3,1
 1007590:	19bffd1e 	bne	r3,r6,1007588 <memset+0x24>
 1007594:	2005883a 	mov	r2,r4
 1007598:	f800283a 	ret
 100759c:	2804923a 	slli	r2,r5,8
 10075a0:	020003c4 	movi	r8,15
 10075a4:	200f883a 	mov	r7,r4
 10075a8:	2884b03a 	or	r2,r5,r2
 10075ac:	1006943a 	slli	r3,r2,16
 10075b0:	10c6b03a 	or	r3,r2,r3
 10075b4:	41800a2e 	bgeu	r8,r6,10075e0 <memset+0x7c>
 10075b8:	4005883a 	mov	r2,r8
 10075bc:	31bffc04 	addi	r6,r6,-16
 10075c0:	38c00015 	stw	r3,0(r7)
 10075c4:	38c00115 	stw	r3,4(r7)
 10075c8:	38c00215 	stw	r3,8(r7)
 10075cc:	38c00315 	stw	r3,12(r7)
 10075d0:	39c00404 	addi	r7,r7,16
 10075d4:	11bff936 	bltu	r2,r6,10075bc <memset+0x58>
 10075d8:	008000c4 	movi	r2,3
 10075dc:	1180052e 	bgeu	r2,r6,10075f4 <memset+0x90>
 10075e0:	31bfff04 	addi	r6,r6,-4
 10075e4:	008000c4 	movi	r2,3
 10075e8:	38c00015 	stw	r3,0(r7)
 10075ec:	39c00104 	addi	r7,r7,4
 10075f0:	11bffb36 	bltu	r2,r6,10075e0 <memset+0x7c>
 10075f4:	3807883a 	mov	r3,r7
 10075f8:	003fe006 	br	100757c <memset+0x18>

010075fc <_Bfree>:
 10075fc:	28000826 	beq	r5,zero,1007620 <_Bfree+0x24>
 1007600:	28800117 	ldw	r2,4(r5)
 1007604:	21001317 	ldw	r4,76(r4)
 1007608:	1085883a 	add	r2,r2,r2
 100760c:	1085883a 	add	r2,r2,r2
 1007610:	1105883a 	add	r2,r2,r4
 1007614:	10c00017 	ldw	r3,0(r2)
 1007618:	28c00015 	stw	r3,0(r5)
 100761c:	11400015 	stw	r5,0(r2)
 1007620:	f800283a 	ret

01007624 <__hi0bits>:
 1007624:	20bfffec 	andhi	r2,r4,65535
 1007628:	10001426 	beq	r2,zero,100767c <__hi0bits+0x58>
 100762c:	0007883a 	mov	r3,zero
 1007630:	20bfc02c 	andhi	r2,r4,65280
 1007634:	1000021e 	bne	r2,zero,1007640 <__hi0bits+0x1c>
 1007638:	2008923a 	slli	r4,r4,8
 100763c:	18c00204 	addi	r3,r3,8
 1007640:	20bc002c 	andhi	r2,r4,61440
 1007644:	1000021e 	bne	r2,zero,1007650 <__hi0bits+0x2c>
 1007648:	2008913a 	slli	r4,r4,4
 100764c:	18c00104 	addi	r3,r3,4
 1007650:	20b0002c 	andhi	r2,r4,49152
 1007654:	1000031e 	bne	r2,zero,1007664 <__hi0bits+0x40>
 1007658:	2105883a 	add	r2,r4,r4
 100765c:	18c00084 	addi	r3,r3,2
 1007660:	1089883a 	add	r4,r2,r2
 1007664:	20000316 	blt	r4,zero,1007674 <__hi0bits+0x50>
 1007668:	2090002c 	andhi	r2,r4,16384
 100766c:	10000626 	beq	r2,zero,1007688 <__hi0bits+0x64>
 1007670:	18c00044 	addi	r3,r3,1
 1007674:	1805883a 	mov	r2,r3
 1007678:	f800283a 	ret
 100767c:	2008943a 	slli	r4,r4,16
 1007680:	00c00404 	movi	r3,16
 1007684:	003fea06 	br	1007630 <__hi0bits+0xc>
 1007688:	00c00804 	movi	r3,32
 100768c:	1805883a 	mov	r2,r3
 1007690:	f800283a 	ret

01007694 <__lo0bits>:
 1007694:	20c00017 	ldw	r3,0(r4)
 1007698:	188001cc 	andi	r2,r3,7
 100769c:	10000a26 	beq	r2,zero,10076c8 <__lo0bits+0x34>
 10076a0:	1880004c 	andi	r2,r3,1
 10076a4:	1005003a 	cmpeq	r2,r2,zero
 10076a8:	10002126 	beq	r2,zero,1007730 <__lo0bits+0x9c>
 10076ac:	1880008c 	andi	r2,r3,2
 10076b0:	1000251e 	bne	r2,zero,1007748 <__lo0bits+0xb4>
 10076b4:	1804d0ba 	srli	r2,r3,2
 10076b8:	01400084 	movi	r5,2
 10076bc:	20800015 	stw	r2,0(r4)
 10076c0:	2805883a 	mov	r2,r5
 10076c4:	f800283a 	ret
 10076c8:	18bfffcc 	andi	r2,r3,65535
 10076cc:	10001526 	beq	r2,zero,1007724 <__lo0bits+0x90>
 10076d0:	000b883a 	mov	r5,zero
 10076d4:	18803fcc 	andi	r2,r3,255
 10076d8:	1000021e 	bne	r2,zero,10076e4 <__lo0bits+0x50>
 10076dc:	1806d23a 	srli	r3,r3,8
 10076e0:	29400204 	addi	r5,r5,8
 10076e4:	188003cc 	andi	r2,r3,15
 10076e8:	1000021e 	bne	r2,zero,10076f4 <__lo0bits+0x60>
 10076ec:	1806d13a 	srli	r3,r3,4
 10076f0:	29400104 	addi	r5,r5,4
 10076f4:	188000cc 	andi	r2,r3,3
 10076f8:	1000021e 	bne	r2,zero,1007704 <__lo0bits+0x70>
 10076fc:	1806d0ba 	srli	r3,r3,2
 1007700:	29400084 	addi	r5,r5,2
 1007704:	1880004c 	andi	r2,r3,1
 1007708:	1000031e 	bne	r2,zero,1007718 <__lo0bits+0x84>
 100770c:	1806d07a 	srli	r3,r3,1
 1007710:	18000a26 	beq	r3,zero,100773c <__lo0bits+0xa8>
 1007714:	29400044 	addi	r5,r5,1
 1007718:	2805883a 	mov	r2,r5
 100771c:	20c00015 	stw	r3,0(r4)
 1007720:	f800283a 	ret
 1007724:	1806d43a 	srli	r3,r3,16
 1007728:	01400404 	movi	r5,16
 100772c:	003fe906 	br	10076d4 <__lo0bits+0x40>
 1007730:	000b883a 	mov	r5,zero
 1007734:	2805883a 	mov	r2,r5
 1007738:	f800283a 	ret
 100773c:	01400804 	movi	r5,32
 1007740:	2805883a 	mov	r2,r5
 1007744:	f800283a 	ret
 1007748:	1804d07a 	srli	r2,r3,1
 100774c:	01400044 	movi	r5,1
 1007750:	20800015 	stw	r2,0(r4)
 1007754:	003fda06 	br	10076c0 <__lo0bits+0x2c>

01007758 <__mcmp>:
 1007758:	20800417 	ldw	r2,16(r4)
 100775c:	28c00417 	ldw	r3,16(r5)
 1007760:	10cfc83a 	sub	r7,r2,r3
 1007764:	38000c1e 	bne	r7,zero,1007798 <__mcmp+0x40>
 1007768:	18c5883a 	add	r2,r3,r3
 100776c:	1085883a 	add	r2,r2,r2
 1007770:	10c00504 	addi	r3,r2,20
 1007774:	21000504 	addi	r4,r4,20
 1007778:	28cb883a 	add	r5,r5,r3
 100777c:	2085883a 	add	r2,r4,r2
 1007780:	10bfff04 	addi	r2,r2,-4
 1007784:	297fff04 	addi	r5,r5,-4
 1007788:	11800017 	ldw	r6,0(r2)
 100778c:	28c00017 	ldw	r3,0(r5)
 1007790:	30c0031e 	bne	r6,r3,10077a0 <__mcmp+0x48>
 1007794:	20bffa36 	bltu	r4,r2,1007780 <__mcmp+0x28>
 1007798:	3805883a 	mov	r2,r7
 100779c:	f800283a 	ret
 10077a0:	30c00336 	bltu	r6,r3,10077b0 <__mcmp+0x58>
 10077a4:	01c00044 	movi	r7,1
 10077a8:	3805883a 	mov	r2,r7
 10077ac:	f800283a 	ret
 10077b0:	01ffffc4 	movi	r7,-1
 10077b4:	003ff806 	br	1007798 <__mcmp+0x40>

010077b8 <__ulp>:
 10077b8:	295ffc2c 	andhi	r5,r5,32752
 10077bc:	013f3034 	movhi	r4,64704
 10077c0:	290b883a 	add	r5,r5,r4
 10077c4:	0145c83a 	sub	r2,zero,r5
 10077c8:	1007d53a 	srai	r3,r2,20
 10077cc:	000d883a 	mov	r6,zero
 10077d0:	0140040e 	bge	zero,r5,10077e4 <__ulp+0x2c>
 10077d4:	280f883a 	mov	r7,r5
 10077d8:	3807883a 	mov	r3,r7
 10077dc:	3005883a 	mov	r2,r6
 10077e0:	f800283a 	ret
 10077e4:	008004c4 	movi	r2,19
 10077e8:	193ffb04 	addi	r4,r3,-20
 10077ec:	10c00c0e 	bge	r2,r3,1007820 <__ulp+0x68>
 10077f0:	008007c4 	movi	r2,31
 10077f4:	1107c83a 	sub	r3,r2,r4
 10077f8:	00800784 	movi	r2,30
 10077fc:	01400044 	movi	r5,1
 1007800:	11000216 	blt	r2,r4,100780c <__ulp+0x54>
 1007804:	00800044 	movi	r2,1
 1007808:	10ca983a 	sll	r5,r2,r3
 100780c:	000f883a 	mov	r7,zero
 1007810:	280d883a 	mov	r6,r5
 1007814:	3807883a 	mov	r3,r7
 1007818:	3005883a 	mov	r2,r6
 100781c:	f800283a 	ret
 1007820:	00800234 	movhi	r2,8
 1007824:	10cfd83a 	sra	r7,r2,r3
 1007828:	000d883a 	mov	r6,zero
 100782c:	3005883a 	mov	r2,r6
 1007830:	3807883a 	mov	r3,r7
 1007834:	f800283a 	ret

01007838 <__b2d>:
 1007838:	20800417 	ldw	r2,16(r4)
 100783c:	defff904 	addi	sp,sp,-28
 1007840:	dd000415 	stw	r20,16(sp)
 1007844:	1085883a 	add	r2,r2,r2
 1007848:	25000504 	addi	r20,r4,20
 100784c:	1085883a 	add	r2,r2,r2
 1007850:	dc000015 	stw	r16,0(sp)
 1007854:	a0a1883a 	add	r16,r20,r2
 1007858:	dd400515 	stw	r21,20(sp)
 100785c:	857fff17 	ldw	r21,-4(r16)
 1007860:	dc400115 	stw	r17,4(sp)
 1007864:	dfc00615 	stw	ra,24(sp)
 1007868:	a809883a 	mov	r4,r21
 100786c:	2823883a 	mov	r17,r5
 1007870:	dcc00315 	stw	r19,12(sp)
 1007874:	dc800215 	stw	r18,8(sp)
 1007878:	10076240 	call	1007624 <__hi0bits>
 100787c:	100b883a 	mov	r5,r2
 1007880:	00800804 	movi	r2,32
 1007884:	1145c83a 	sub	r2,r2,r5
 1007888:	88800015 	stw	r2,0(r17)
 100788c:	00800284 	movi	r2,10
 1007890:	80ffff04 	addi	r3,r16,-4
 1007894:	11401416 	blt	r2,r5,10078e8 <__b2d+0xb0>
 1007898:	008002c4 	movi	r2,11
 100789c:	1149c83a 	sub	r4,r2,r5
 10078a0:	a0c02736 	bltu	r20,r3,1007940 <__b2d+0x108>
 10078a4:	000d883a 	mov	r6,zero
 10078a8:	28800544 	addi	r2,r5,21
 10078ac:	a906d83a 	srl	r3,r21,r4
 10078b0:	a884983a 	sll	r2,r21,r2
 10078b4:	1ccffc34 	orhi	r19,r3,16368
 10078b8:	11a4b03a 	or	r18,r2,r6
 10078bc:	9005883a 	mov	r2,r18
 10078c0:	9807883a 	mov	r3,r19
 10078c4:	dfc00617 	ldw	ra,24(sp)
 10078c8:	dd400517 	ldw	r21,20(sp)
 10078cc:	dd000417 	ldw	r20,16(sp)
 10078d0:	dcc00317 	ldw	r19,12(sp)
 10078d4:	dc800217 	ldw	r18,8(sp)
 10078d8:	dc400117 	ldw	r17,4(sp)
 10078dc:	dc000017 	ldw	r16,0(sp)
 10078e0:	dec00704 	addi	sp,sp,28
 10078e4:	f800283a 	ret
 10078e8:	a0c00e36 	bltu	r20,r3,1007924 <__b2d+0xec>
 10078ec:	293ffd44 	addi	r4,r5,-11
 10078f0:	000d883a 	mov	r6,zero
 10078f4:	20000f26 	beq	r4,zero,1007934 <__b2d+0xfc>
 10078f8:	00800804 	movi	r2,32
 10078fc:	110bc83a 	sub	r5,r2,r4
 1007900:	a0c01236 	bltu	r20,r3,100794c <__b2d+0x114>
 1007904:	000f883a 	mov	r7,zero
 1007908:	a904983a 	sll	r2,r21,r4
 100790c:	3146d83a 	srl	r3,r6,r5
 1007910:	3108983a 	sll	r4,r6,r4
 1007914:	108ffc34 	orhi	r2,r2,16368
 1007918:	18a6b03a 	or	r19,r3,r2
 100791c:	3924b03a 	or	r18,r7,r4
 1007920:	003fe606 	br	10078bc <__b2d+0x84>
 1007924:	293ffd44 	addi	r4,r5,-11
 1007928:	81bffe17 	ldw	r6,-8(r16)
 100792c:	80fffe04 	addi	r3,r16,-8
 1007930:	203ff11e 	bne	r4,zero,10078f8 <__b2d+0xc0>
 1007934:	accffc34 	orhi	r19,r21,16368
 1007938:	3025883a 	mov	r18,r6
 100793c:	003fdf06 	br	10078bc <__b2d+0x84>
 1007940:	18bfff17 	ldw	r2,-4(r3)
 1007944:	110cd83a 	srl	r6,r2,r4
 1007948:	003fd706 	br	10078a8 <__b2d+0x70>
 100794c:	18bfff17 	ldw	r2,-4(r3)
 1007950:	114ed83a 	srl	r7,r2,r5
 1007954:	003fec06 	br	1007908 <__b2d+0xd0>

01007958 <__ratio>:
 1007958:	defff904 	addi	sp,sp,-28
 100795c:	dc400215 	stw	r17,8(sp)
 1007960:	2823883a 	mov	r17,r5
 1007964:	d80b883a 	mov	r5,sp
 1007968:	dfc00615 	stw	ra,24(sp)
 100796c:	dd000515 	stw	r20,20(sp)
 1007970:	dcc00415 	stw	r19,16(sp)
 1007974:	dc800315 	stw	r18,12(sp)
 1007978:	2025883a 	mov	r18,r4
 100797c:	10078380 	call	1007838 <__b2d>
 1007980:	8809883a 	mov	r4,r17
 1007984:	d9400104 	addi	r5,sp,4
 1007988:	1027883a 	mov	r19,r2
 100798c:	1829883a 	mov	r20,r3
 1007990:	10078380 	call	1007838 <__b2d>
 1007994:	89000417 	ldw	r4,16(r17)
 1007998:	91c00417 	ldw	r7,16(r18)
 100799c:	d9800117 	ldw	r6,4(sp)
 10079a0:	180b883a 	mov	r5,r3
 10079a4:	390fc83a 	sub	r7,r7,r4
 10079a8:	1009883a 	mov	r4,r2
 10079ac:	d8800017 	ldw	r2,0(sp)
 10079b0:	380e917a 	slli	r7,r7,5
 10079b4:	2011883a 	mov	r8,r4
 10079b8:	1185c83a 	sub	r2,r2,r6
 10079bc:	11c5883a 	add	r2,r2,r7
 10079c0:	1006953a 	slli	r3,r2,20
 10079c4:	2813883a 	mov	r9,r5
 10079c8:	00800d0e 	bge	zero,r2,1007a00 <__ratio+0xa8>
 10079cc:	1d29883a 	add	r20,r3,r20
 10079d0:	a00b883a 	mov	r5,r20
 10079d4:	480f883a 	mov	r7,r9
 10079d8:	9809883a 	mov	r4,r19
 10079dc:	400d883a 	mov	r6,r8
 10079e0:	100dd200 	call	100dd20 <__divdf3>
 10079e4:	dfc00617 	ldw	ra,24(sp)
 10079e8:	dd000517 	ldw	r20,20(sp)
 10079ec:	dcc00417 	ldw	r19,16(sp)
 10079f0:	dc800317 	ldw	r18,12(sp)
 10079f4:	dc400217 	ldw	r17,8(sp)
 10079f8:	dec00704 	addi	sp,sp,28
 10079fc:	f800283a 	ret
 1007a00:	28d3c83a 	sub	r9,r5,r3
 1007a04:	003ff206 	br	10079d0 <__ratio+0x78>

01007a08 <_mprec_log10>:
 1007a08:	defffe04 	addi	sp,sp,-8
 1007a0c:	008005c4 	movi	r2,23
 1007a10:	dc000015 	stw	r16,0(sp)
 1007a14:	dfc00115 	stw	ra,4(sp)
 1007a18:	2021883a 	mov	r16,r4
 1007a1c:	11000c16 	blt	r2,r4,1007a50 <_mprec_log10+0x48>
 1007a20:	200490fa 	slli	r2,r4,3
 1007a24:	00c040b4 	movhi	r3,258
 1007a28:	18e15004 	addi	r3,r3,-31424
 1007a2c:	10c5883a 	add	r2,r2,r3
 1007a30:	12400117 	ldw	r9,4(r2)
 1007a34:	12000017 	ldw	r8,0(r2)
 1007a38:	4807883a 	mov	r3,r9
 1007a3c:	4005883a 	mov	r2,r8
 1007a40:	dfc00117 	ldw	ra,4(sp)
 1007a44:	dc000017 	ldw	r16,0(sp)
 1007a48:	dec00204 	addi	sp,sp,8
 1007a4c:	f800283a 	ret
 1007a50:	0011883a 	mov	r8,zero
 1007a54:	024ffc34 	movhi	r9,16368
 1007a58:	0005883a 	mov	r2,zero
 1007a5c:	00d00934 	movhi	r3,16420
 1007a60:	480b883a 	mov	r5,r9
 1007a64:	4009883a 	mov	r4,r8
 1007a68:	180f883a 	mov	r7,r3
 1007a6c:	100d883a 	mov	r6,r2
 1007a70:	100d95c0 	call	100d95c <__muldf3>
 1007a74:	843fffc4 	addi	r16,r16,-1
 1007a78:	1011883a 	mov	r8,r2
 1007a7c:	1813883a 	mov	r9,r3
 1007a80:	803ff51e 	bne	r16,zero,1007a58 <_mprec_log10+0x50>
 1007a84:	4005883a 	mov	r2,r8
 1007a88:	4807883a 	mov	r3,r9
 1007a8c:	dfc00117 	ldw	ra,4(sp)
 1007a90:	dc000017 	ldw	r16,0(sp)
 1007a94:	dec00204 	addi	sp,sp,8
 1007a98:	f800283a 	ret

01007a9c <__copybits>:
 1007a9c:	297fffc4 	addi	r5,r5,-1
 1007aa0:	30800417 	ldw	r2,16(r6)
 1007aa4:	280bd17a 	srai	r5,r5,5
 1007aa8:	31800504 	addi	r6,r6,20
 1007aac:	1085883a 	add	r2,r2,r2
 1007ab0:	294b883a 	add	r5,r5,r5
 1007ab4:	294b883a 	add	r5,r5,r5
 1007ab8:	1085883a 	add	r2,r2,r2
 1007abc:	290b883a 	add	r5,r5,r4
 1007ac0:	3087883a 	add	r3,r6,r2
 1007ac4:	29400104 	addi	r5,r5,4
 1007ac8:	30c0052e 	bgeu	r6,r3,1007ae0 <__copybits+0x44>
 1007acc:	30800017 	ldw	r2,0(r6)
 1007ad0:	31800104 	addi	r6,r6,4
 1007ad4:	20800015 	stw	r2,0(r4)
 1007ad8:	21000104 	addi	r4,r4,4
 1007adc:	30fffb36 	bltu	r6,r3,1007acc <__copybits+0x30>
 1007ae0:	2140032e 	bgeu	r4,r5,1007af0 <__copybits+0x54>
 1007ae4:	20000015 	stw	zero,0(r4)
 1007ae8:	21000104 	addi	r4,r4,4
 1007aec:	217ffd36 	bltu	r4,r5,1007ae4 <__copybits+0x48>
 1007af0:	f800283a 	ret

01007af4 <__any_on>:
 1007af4:	20800417 	ldw	r2,16(r4)
 1007af8:	2807d17a 	srai	r3,r5,5
 1007afc:	21000504 	addi	r4,r4,20
 1007b00:	10c00d0e 	bge	r2,r3,1007b38 <__any_on+0x44>
 1007b04:	1085883a 	add	r2,r2,r2
 1007b08:	1085883a 	add	r2,r2,r2
 1007b0c:	208d883a 	add	r6,r4,r2
 1007b10:	2180182e 	bgeu	r4,r6,1007b74 <__any_on+0x80>
 1007b14:	30bfff17 	ldw	r2,-4(r6)
 1007b18:	30ffff04 	addi	r3,r6,-4
 1007b1c:	1000041e 	bne	r2,zero,1007b30 <__any_on+0x3c>
 1007b20:	20c0142e 	bgeu	r4,r3,1007b74 <__any_on+0x80>
 1007b24:	18ffff04 	addi	r3,r3,-4
 1007b28:	18800017 	ldw	r2,0(r3)
 1007b2c:	103ffc26 	beq	r2,zero,1007b20 <__any_on+0x2c>
 1007b30:	00800044 	movi	r2,1
 1007b34:	f800283a 	ret
 1007b38:	18800a0e 	bge	r3,r2,1007b64 <__any_on+0x70>
 1007b3c:	294007cc 	andi	r5,r5,31
 1007b40:	28000826 	beq	r5,zero,1007b64 <__any_on+0x70>
 1007b44:	18c5883a 	add	r2,r3,r3
 1007b48:	1085883a 	add	r2,r2,r2
 1007b4c:	208d883a 	add	r6,r4,r2
 1007b50:	30c00017 	ldw	r3,0(r6)
 1007b54:	1944d83a 	srl	r2,r3,r5
 1007b58:	1144983a 	sll	r2,r2,r5
 1007b5c:	18bff41e 	bne	r3,r2,1007b30 <__any_on+0x3c>
 1007b60:	003feb06 	br	1007b10 <__any_on+0x1c>
 1007b64:	18c5883a 	add	r2,r3,r3
 1007b68:	1085883a 	add	r2,r2,r2
 1007b6c:	208d883a 	add	r6,r4,r2
 1007b70:	003fe706 	br	1007b10 <__any_on+0x1c>
 1007b74:	0005883a 	mov	r2,zero
 1007b78:	f800283a 	ret

01007b7c <_Balloc>:
 1007b7c:	20c01317 	ldw	r3,76(r4)
 1007b80:	defffb04 	addi	sp,sp,-20
 1007b84:	dcc00315 	stw	r19,12(sp)
 1007b88:	dc800215 	stw	r18,8(sp)
 1007b8c:	dfc00415 	stw	ra,16(sp)
 1007b90:	2825883a 	mov	r18,r5
 1007b94:	dc400115 	stw	r17,4(sp)
 1007b98:	dc000015 	stw	r16,0(sp)
 1007b9c:	2027883a 	mov	r19,r4
 1007ba0:	01800404 	movi	r6,16
 1007ba4:	01400104 	movi	r5,4
 1007ba8:	18001726 	beq	r3,zero,1007c08 <_Balloc+0x8c>
 1007bac:	01400044 	movi	r5,1
 1007bb0:	9485883a 	add	r2,r18,r18
 1007bb4:	2ca2983a 	sll	r17,r5,r18
 1007bb8:	1085883a 	add	r2,r2,r2
 1007bbc:	10c7883a 	add	r3,r2,r3
 1007bc0:	1c000017 	ldw	r16,0(r3)
 1007bc4:	8c4d883a 	add	r6,r17,r17
 1007bc8:	318d883a 	add	r6,r6,r6
 1007bcc:	9809883a 	mov	r4,r19
 1007bd0:	31800504 	addi	r6,r6,20
 1007bd4:	80001226 	beq	r16,zero,1007c20 <_Balloc+0xa4>
 1007bd8:	80800017 	ldw	r2,0(r16)
 1007bdc:	18800015 	stw	r2,0(r3)
 1007be0:	80000415 	stw	zero,16(r16)
 1007be4:	80000315 	stw	zero,12(r16)
 1007be8:	8005883a 	mov	r2,r16
 1007bec:	dfc00417 	ldw	ra,16(sp)
 1007bf0:	dcc00317 	ldw	r19,12(sp)
 1007bf4:	dc800217 	ldw	r18,8(sp)
 1007bf8:	dc400117 	ldw	r17,4(sp)
 1007bfc:	dc000017 	ldw	r16,0(sp)
 1007c00:	dec00504 	addi	sp,sp,20
 1007c04:	f800283a 	ret
 1007c08:	100b6840 	call	100b684 <_calloc_r>
 1007c0c:	1007883a 	mov	r3,r2
 1007c10:	0021883a 	mov	r16,zero
 1007c14:	98801315 	stw	r2,76(r19)
 1007c18:	103fe41e 	bne	r2,zero,1007bac <_Balloc+0x30>
 1007c1c:	003ff206 	br	1007be8 <_Balloc+0x6c>
 1007c20:	100b6840 	call	100b684 <_calloc_r>
 1007c24:	103ff026 	beq	r2,zero,1007be8 <_Balloc+0x6c>
 1007c28:	1021883a 	mov	r16,r2
 1007c2c:	14800115 	stw	r18,4(r2)
 1007c30:	14400215 	stw	r17,8(r2)
 1007c34:	003fea06 	br	1007be0 <_Balloc+0x64>

01007c38 <__d2b>:
 1007c38:	defff504 	addi	sp,sp,-44
 1007c3c:	dcc00515 	stw	r19,20(sp)
 1007c40:	04c00044 	movi	r19,1
 1007c44:	dc000215 	stw	r16,8(sp)
 1007c48:	2821883a 	mov	r16,r5
 1007c4c:	980b883a 	mov	r5,r19
 1007c50:	ddc00915 	stw	r23,36(sp)
 1007c54:	dd800815 	stw	r22,32(sp)
 1007c58:	dd400715 	stw	r21,28(sp)
 1007c5c:	dd000615 	stw	r20,24(sp)
 1007c60:	dc800415 	stw	r18,16(sp)
 1007c64:	dc400315 	stw	r17,12(sp)
 1007c68:	dfc00a15 	stw	ra,40(sp)
 1007c6c:	3023883a 	mov	r17,r6
 1007c70:	382d883a 	mov	r22,r7
 1007c74:	ddc00b17 	ldw	r23,44(sp)
 1007c78:	1007b7c0 	call	1007b7c <_Balloc>
 1007c7c:	1025883a 	mov	r18,r2
 1007c80:	00a00034 	movhi	r2,32768
 1007c84:	10bfffc4 	addi	r2,r2,-1
 1007c88:	8888703a 	and	r4,r17,r2
 1007c8c:	202ad53a 	srli	r21,r4,20
 1007c90:	00800434 	movhi	r2,16
 1007c94:	10bfffc4 	addi	r2,r2,-1
 1007c98:	8886703a 	and	r3,r17,r2
 1007c9c:	a829003a 	cmpeq	r20,r21,zero
 1007ca0:	800b883a 	mov	r5,r16
 1007ca4:	d8c00115 	stw	r3,4(sp)
 1007ca8:	94000504 	addi	r16,r18,20
 1007cac:	a000021e 	bne	r20,zero,1007cb8 <__d2b+0x80>
 1007cb0:	18c00434 	orhi	r3,r3,16
 1007cb4:	d8c00115 	stw	r3,4(sp)
 1007cb8:	28002726 	beq	r5,zero,1007d58 <__d2b+0x120>
 1007cbc:	d809883a 	mov	r4,sp
 1007cc0:	d9400015 	stw	r5,0(sp)
 1007cc4:	10076940 	call	1007694 <__lo0bits>
 1007cc8:	100d883a 	mov	r6,r2
 1007ccc:	10003526 	beq	r2,zero,1007da4 <__d2b+0x16c>
 1007cd0:	d8c00117 	ldw	r3,4(sp)
 1007cd4:	00800804 	movi	r2,32
 1007cd8:	1185c83a 	sub	r2,r2,r6
 1007cdc:	d9000017 	ldw	r4,0(sp)
 1007ce0:	1886983a 	sll	r3,r3,r2
 1007ce4:	1906b03a 	or	r3,r3,r4
 1007ce8:	90c00515 	stw	r3,20(r18)
 1007cec:	d8c00117 	ldw	r3,4(sp)
 1007cf0:	1986d83a 	srl	r3,r3,r6
 1007cf4:	d8c00115 	stw	r3,4(sp)
 1007cf8:	180b003a 	cmpeq	r5,r3,zero
 1007cfc:	00800084 	movi	r2,2
 1007d00:	114bc83a 	sub	r5,r2,r5
 1007d04:	80c00115 	stw	r3,4(r16)
 1007d08:	91400415 	stw	r5,16(r18)
 1007d0c:	a0001a1e 	bne	r20,zero,1007d78 <__d2b+0x140>
 1007d10:	3545883a 	add	r2,r6,r21
 1007d14:	10bef344 	addi	r2,r2,-1075
 1007d18:	00c00d44 	movi	r3,53
 1007d1c:	b0800015 	stw	r2,0(r22)
 1007d20:	1987c83a 	sub	r3,r3,r6
 1007d24:	b8c00015 	stw	r3,0(r23)
 1007d28:	9005883a 	mov	r2,r18
 1007d2c:	dfc00a17 	ldw	ra,40(sp)
 1007d30:	ddc00917 	ldw	r23,36(sp)
 1007d34:	dd800817 	ldw	r22,32(sp)
 1007d38:	dd400717 	ldw	r21,28(sp)
 1007d3c:	dd000617 	ldw	r20,24(sp)
 1007d40:	dcc00517 	ldw	r19,20(sp)
 1007d44:	dc800417 	ldw	r18,16(sp)
 1007d48:	dc400317 	ldw	r17,12(sp)
 1007d4c:	dc000217 	ldw	r16,8(sp)
 1007d50:	dec00b04 	addi	sp,sp,44
 1007d54:	f800283a 	ret
 1007d58:	d9000104 	addi	r4,sp,4
 1007d5c:	10076940 	call	1007694 <__lo0bits>
 1007d60:	11800804 	addi	r6,r2,32
 1007d64:	d8800117 	ldw	r2,4(sp)
 1007d68:	94c00415 	stw	r19,16(r18)
 1007d6c:	980b883a 	mov	r5,r19
 1007d70:	90800515 	stw	r2,20(r18)
 1007d74:	a03fe626 	beq	r20,zero,1007d10 <__d2b+0xd8>
 1007d78:	2945883a 	add	r2,r5,r5
 1007d7c:	1085883a 	add	r2,r2,r2
 1007d80:	1405883a 	add	r2,r2,r16
 1007d84:	113fff17 	ldw	r4,-4(r2)
 1007d88:	30fef384 	addi	r3,r6,-1074
 1007d8c:	2820917a 	slli	r16,r5,5
 1007d90:	b0c00015 	stw	r3,0(r22)
 1007d94:	10076240 	call	1007624 <__hi0bits>
 1007d98:	80a1c83a 	sub	r16,r16,r2
 1007d9c:	bc000015 	stw	r16,0(r23)
 1007da0:	003fe106 	br	1007d28 <__d2b+0xf0>
 1007da4:	d8800017 	ldw	r2,0(sp)
 1007da8:	90800515 	stw	r2,20(r18)
 1007dac:	d8c00117 	ldw	r3,4(sp)
 1007db0:	003fd106 	br	1007cf8 <__d2b+0xc0>

01007db4 <__mdiff>:
 1007db4:	defffb04 	addi	sp,sp,-20
 1007db8:	dc000015 	stw	r16,0(sp)
 1007dbc:	2821883a 	mov	r16,r5
 1007dc0:	dc800215 	stw	r18,8(sp)
 1007dc4:	300b883a 	mov	r5,r6
 1007dc8:	2025883a 	mov	r18,r4
 1007dcc:	8009883a 	mov	r4,r16
 1007dd0:	dc400115 	stw	r17,4(sp)
 1007dd4:	dfc00415 	stw	ra,16(sp)
 1007dd8:	dcc00315 	stw	r19,12(sp)
 1007ddc:	3023883a 	mov	r17,r6
 1007de0:	10077580 	call	1007758 <__mcmp>
 1007de4:	10004226 	beq	r2,zero,1007ef0 <__mdiff+0x13c>
 1007de8:	10005016 	blt	r2,zero,1007f2c <__mdiff+0x178>
 1007dec:	0027883a 	mov	r19,zero
 1007df0:	81400117 	ldw	r5,4(r16)
 1007df4:	9009883a 	mov	r4,r18
 1007df8:	1007b7c0 	call	1007b7c <_Balloc>
 1007dfc:	1019883a 	mov	r12,r2
 1007e00:	82800417 	ldw	r10,16(r16)
 1007e04:	88800417 	ldw	r2,16(r17)
 1007e08:	81800504 	addi	r6,r16,20
 1007e0c:	5287883a 	add	r3,r10,r10
 1007e10:	1085883a 	add	r2,r2,r2
 1007e14:	18c7883a 	add	r3,r3,r3
 1007e18:	1085883a 	add	r2,r2,r2
 1007e1c:	8a000504 	addi	r8,r17,20
 1007e20:	64c00315 	stw	r19,12(r12)
 1007e24:	30db883a 	add	r13,r6,r3
 1007e28:	4097883a 	add	r11,r8,r2
 1007e2c:	61c00504 	addi	r7,r12,20
 1007e30:	0013883a 	mov	r9,zero
 1007e34:	31000017 	ldw	r4,0(r6)
 1007e38:	41400017 	ldw	r5,0(r8)
 1007e3c:	42000104 	addi	r8,r8,4
 1007e40:	20bfffcc 	andi	r2,r4,65535
 1007e44:	28ffffcc 	andi	r3,r5,65535
 1007e48:	10c5c83a 	sub	r2,r2,r3
 1007e4c:	1245883a 	add	r2,r2,r9
 1007e50:	2008d43a 	srli	r4,r4,16
 1007e54:	280ad43a 	srli	r5,r5,16
 1007e58:	1007d43a 	srai	r3,r2,16
 1007e5c:	3880000d 	sth	r2,0(r7)
 1007e60:	2149c83a 	sub	r4,r4,r5
 1007e64:	20c9883a 	add	r4,r4,r3
 1007e68:	3900008d 	sth	r4,2(r7)
 1007e6c:	31800104 	addi	r6,r6,4
 1007e70:	39c00104 	addi	r7,r7,4
 1007e74:	2013d43a 	srai	r9,r4,16
 1007e78:	42ffee36 	bltu	r8,r11,1007e34 <__mdiff+0x80>
 1007e7c:	33400c2e 	bgeu	r6,r13,1007eb0 <__mdiff+0xfc>
 1007e80:	30800017 	ldw	r2,0(r6)
 1007e84:	31800104 	addi	r6,r6,4
 1007e88:	10ffffcc 	andi	r3,r2,65535
 1007e8c:	1a47883a 	add	r3,r3,r9
 1007e90:	1004d43a 	srli	r2,r2,16
 1007e94:	1809d43a 	srai	r4,r3,16
 1007e98:	38c0000d 	sth	r3,0(r7)
 1007e9c:	1105883a 	add	r2,r2,r4
 1007ea0:	3880008d 	sth	r2,2(r7)
 1007ea4:	1013d43a 	srai	r9,r2,16
 1007ea8:	39c00104 	addi	r7,r7,4
 1007eac:	337ff436 	bltu	r6,r13,1007e80 <__mdiff+0xcc>
 1007eb0:	38bfff17 	ldw	r2,-4(r7)
 1007eb4:	38ffff04 	addi	r3,r7,-4
 1007eb8:	1000041e 	bne	r2,zero,1007ecc <__mdiff+0x118>
 1007ebc:	18ffff04 	addi	r3,r3,-4
 1007ec0:	18800017 	ldw	r2,0(r3)
 1007ec4:	52bfffc4 	addi	r10,r10,-1
 1007ec8:	103ffc26 	beq	r2,zero,1007ebc <__mdiff+0x108>
 1007ecc:	6005883a 	mov	r2,r12
 1007ed0:	62800415 	stw	r10,16(r12)
 1007ed4:	dfc00417 	ldw	ra,16(sp)
 1007ed8:	dcc00317 	ldw	r19,12(sp)
 1007edc:	dc800217 	ldw	r18,8(sp)
 1007ee0:	dc400117 	ldw	r17,4(sp)
 1007ee4:	dc000017 	ldw	r16,0(sp)
 1007ee8:	dec00504 	addi	sp,sp,20
 1007eec:	f800283a 	ret
 1007ef0:	9009883a 	mov	r4,r18
 1007ef4:	000b883a 	mov	r5,zero
 1007ef8:	1007b7c0 	call	1007b7c <_Balloc>
 1007efc:	1019883a 	mov	r12,r2
 1007f00:	00800044 	movi	r2,1
 1007f04:	60800415 	stw	r2,16(r12)
 1007f08:	6005883a 	mov	r2,r12
 1007f0c:	60000515 	stw	zero,20(r12)
 1007f10:	dfc00417 	ldw	ra,16(sp)
 1007f14:	dcc00317 	ldw	r19,12(sp)
 1007f18:	dc800217 	ldw	r18,8(sp)
 1007f1c:	dc400117 	ldw	r17,4(sp)
 1007f20:	dc000017 	ldw	r16,0(sp)
 1007f24:	dec00504 	addi	sp,sp,20
 1007f28:	f800283a 	ret
 1007f2c:	880d883a 	mov	r6,r17
 1007f30:	04c00044 	movi	r19,1
 1007f34:	8023883a 	mov	r17,r16
 1007f38:	3021883a 	mov	r16,r6
 1007f3c:	003fac06 	br	1007df0 <__mdiff+0x3c>

01007f40 <__lshift>:
 1007f40:	defff904 	addi	sp,sp,-28
 1007f44:	28800417 	ldw	r2,16(r5)
 1007f48:	dc000015 	stw	r16,0(sp)
 1007f4c:	3021d17a 	srai	r16,r6,5
 1007f50:	28c00217 	ldw	r3,8(r5)
 1007f54:	10800044 	addi	r2,r2,1
 1007f58:	dc400115 	stw	r17,4(sp)
 1007f5c:	80a3883a 	add	r17,r16,r2
 1007f60:	dd400515 	stw	r21,20(sp)
 1007f64:	dd000415 	stw	r20,16(sp)
 1007f68:	dc800215 	stw	r18,8(sp)
 1007f6c:	dfc00615 	stw	ra,24(sp)
 1007f70:	2825883a 	mov	r18,r5
 1007f74:	dcc00315 	stw	r19,12(sp)
 1007f78:	3029883a 	mov	r20,r6
 1007f7c:	202b883a 	mov	r21,r4
 1007f80:	29400117 	ldw	r5,4(r5)
 1007f84:	1c40030e 	bge	r3,r17,1007f94 <__lshift+0x54>
 1007f88:	18c7883a 	add	r3,r3,r3
 1007f8c:	29400044 	addi	r5,r5,1
 1007f90:	1c7ffd16 	blt	r3,r17,1007f88 <__lshift+0x48>
 1007f94:	a809883a 	mov	r4,r21
 1007f98:	1007b7c0 	call	1007b7c <_Balloc>
 1007f9c:	1027883a 	mov	r19,r2
 1007fa0:	11400504 	addi	r5,r2,20
 1007fa4:	0400090e 	bge	zero,r16,1007fcc <__lshift+0x8c>
 1007fa8:	2805883a 	mov	r2,r5
 1007fac:	0007883a 	mov	r3,zero
 1007fb0:	18c00044 	addi	r3,r3,1
 1007fb4:	10000015 	stw	zero,0(r2)
 1007fb8:	10800104 	addi	r2,r2,4
 1007fbc:	80fffc1e 	bne	r16,r3,1007fb0 <__lshift+0x70>
 1007fc0:	8405883a 	add	r2,r16,r16
 1007fc4:	1085883a 	add	r2,r2,r2
 1007fc8:	288b883a 	add	r5,r5,r2
 1007fcc:	90800417 	ldw	r2,16(r18)
 1007fd0:	91000504 	addi	r4,r18,20
 1007fd4:	a18007cc 	andi	r6,r20,31
 1007fd8:	1085883a 	add	r2,r2,r2
 1007fdc:	1085883a 	add	r2,r2,r2
 1007fe0:	208f883a 	add	r7,r4,r2
 1007fe4:	30001e26 	beq	r6,zero,1008060 <__lshift+0x120>
 1007fe8:	00800804 	movi	r2,32
 1007fec:	1191c83a 	sub	r8,r2,r6
 1007ff0:	0007883a 	mov	r3,zero
 1007ff4:	20800017 	ldw	r2,0(r4)
 1007ff8:	1184983a 	sll	r2,r2,r6
 1007ffc:	1884b03a 	or	r2,r3,r2
 1008000:	28800015 	stw	r2,0(r5)
 1008004:	20c00017 	ldw	r3,0(r4)
 1008008:	21000104 	addi	r4,r4,4
 100800c:	29400104 	addi	r5,r5,4
 1008010:	1a06d83a 	srl	r3,r3,r8
 1008014:	21fff736 	bltu	r4,r7,1007ff4 <__lshift+0xb4>
 1008018:	28c00015 	stw	r3,0(r5)
 100801c:	18000126 	beq	r3,zero,1008024 <__lshift+0xe4>
 1008020:	8c400044 	addi	r17,r17,1
 1008024:	88bfffc4 	addi	r2,r17,-1
 1008028:	98800415 	stw	r2,16(r19)
 100802c:	a809883a 	mov	r4,r21
 1008030:	900b883a 	mov	r5,r18
 1008034:	10075fc0 	call	10075fc <_Bfree>
 1008038:	9805883a 	mov	r2,r19
 100803c:	dfc00617 	ldw	ra,24(sp)
 1008040:	dd400517 	ldw	r21,20(sp)
 1008044:	dd000417 	ldw	r20,16(sp)
 1008048:	dcc00317 	ldw	r19,12(sp)
 100804c:	dc800217 	ldw	r18,8(sp)
 1008050:	dc400117 	ldw	r17,4(sp)
 1008054:	dc000017 	ldw	r16,0(sp)
 1008058:	dec00704 	addi	sp,sp,28
 100805c:	f800283a 	ret
 1008060:	20800017 	ldw	r2,0(r4)
 1008064:	21000104 	addi	r4,r4,4
 1008068:	28800015 	stw	r2,0(r5)
 100806c:	29400104 	addi	r5,r5,4
 1008070:	21ffec2e 	bgeu	r4,r7,1008024 <__lshift+0xe4>
 1008074:	20800017 	ldw	r2,0(r4)
 1008078:	21000104 	addi	r4,r4,4
 100807c:	28800015 	stw	r2,0(r5)
 1008080:	29400104 	addi	r5,r5,4
 1008084:	21fff636 	bltu	r4,r7,1008060 <__lshift+0x120>
 1008088:	003fe606 	br	1008024 <__lshift+0xe4>

0100808c <__multiply>:
 100808c:	defff904 	addi	sp,sp,-28
 1008090:	dcc00315 	stw	r19,12(sp)
 1008094:	dc800215 	stw	r18,8(sp)
 1008098:	2cc00417 	ldw	r19,16(r5)
 100809c:	34800417 	ldw	r18,16(r6)
 10080a0:	dd000415 	stw	r20,16(sp)
 10080a4:	dc400115 	stw	r17,4(sp)
 10080a8:	dfc00615 	stw	ra,24(sp)
 10080ac:	dd400515 	stw	r21,20(sp)
 10080b0:	dc000015 	stw	r16,0(sp)
 10080b4:	2823883a 	mov	r17,r5
 10080b8:	3029883a 	mov	r20,r6
 10080bc:	9c80040e 	bge	r19,r18,10080d0 <__multiply+0x44>
 10080c0:	9027883a 	mov	r19,r18
 10080c4:	2c800417 	ldw	r18,16(r5)
 10080c8:	2829883a 	mov	r20,r5
 10080cc:	3023883a 	mov	r17,r6
 10080d0:	88800217 	ldw	r2,8(r17)
 10080d4:	9ca1883a 	add	r16,r19,r18
 10080d8:	89400117 	ldw	r5,4(r17)
 10080dc:	1400010e 	bge	r2,r16,10080e4 <__multiply+0x58>
 10080e0:	29400044 	addi	r5,r5,1
 10080e4:	1007b7c0 	call	1007b7c <_Balloc>
 10080e8:	102b883a 	mov	r21,r2
 10080ec:	8405883a 	add	r2,r16,r16
 10080f0:	1085883a 	add	r2,r2,r2
 10080f4:	a9000504 	addi	r4,r21,20
 10080f8:	209d883a 	add	r14,r4,r2
 10080fc:	2380042e 	bgeu	r4,r14,1008110 <__multiply+0x84>
 1008100:	2005883a 	mov	r2,r4
 1008104:	10000015 	stw	zero,0(r2)
 1008108:	10800104 	addi	r2,r2,4
 100810c:	13bffd36 	bltu	r2,r14,1008104 <__multiply+0x78>
 1008110:	9485883a 	add	r2,r18,r18
 1008114:	9cc7883a 	add	r3,r19,r19
 1008118:	a1800504 	addi	r6,r20,20
 100811c:	1085883a 	add	r2,r2,r2
 1008120:	8b400504 	addi	r13,r17,20
 1008124:	18c7883a 	add	r3,r3,r3
 1008128:	309f883a 	add	r15,r6,r2
 100812c:	68d7883a 	add	r11,r13,r3
 1008130:	33c03b2e 	bgeu	r6,r15,1008220 <__multiply+0x194>
 1008134:	2019883a 	mov	r12,r4
 1008138:	30800017 	ldw	r2,0(r6)
 100813c:	127fffcc 	andi	r9,r2,65535
 1008140:	48001826 	beq	r9,zero,10081a4 <__multiply+0x118>
 1008144:	6811883a 	mov	r8,r13
 1008148:	600f883a 	mov	r7,r12
 100814c:	0015883a 	mov	r10,zero
 1008150:	40c00017 	ldw	r3,0(r8)
 1008154:	39400017 	ldw	r5,0(r7)
 1008158:	42000104 	addi	r8,r8,4
 100815c:	193fffcc 	andi	r4,r3,65535
 1008160:	4909383a 	mul	r4,r9,r4
 1008164:	1806d43a 	srli	r3,r3,16
 1008168:	28bfffcc 	andi	r2,r5,65535
 100816c:	5085883a 	add	r2,r10,r2
 1008170:	2089883a 	add	r4,r4,r2
 1008174:	48c7383a 	mul	r3,r9,r3
 1008178:	280ad43a 	srli	r5,r5,16
 100817c:	2004d43a 	srli	r2,r4,16
 1008180:	3900000d 	sth	r4,0(r7)
 1008184:	1947883a 	add	r3,r3,r5
 1008188:	10c5883a 	add	r2,r2,r3
 100818c:	3880008d 	sth	r2,2(r7)
 1008190:	1014d43a 	srli	r10,r2,16
 1008194:	39c00104 	addi	r7,r7,4
 1008198:	42ffed36 	bltu	r8,r11,1008150 <__multiply+0xc4>
 100819c:	3a800015 	stw	r10,0(r7)
 10081a0:	30800017 	ldw	r2,0(r6)
 10081a4:	1012d43a 	srli	r9,r2,16
 10081a8:	48001926 	beq	r9,zero,1008210 <__multiply+0x184>
 10081ac:	60800017 	ldw	r2,0(r12)
 10081b0:	6811883a 	mov	r8,r13
 10081b4:	600f883a 	mov	r7,r12
 10081b8:	0015883a 	mov	r10,zero
 10081bc:	100b883a 	mov	r5,r2
 10081c0:	41000017 	ldw	r4,0(r8)
 10081c4:	2806d43a 	srli	r3,r5,16
 10081c8:	3880000d 	sth	r2,0(r7)
 10081cc:	20bfffcc 	andi	r2,r4,65535
 10081d0:	4885383a 	mul	r2,r9,r2
 10081d4:	50c7883a 	add	r3,r10,r3
 10081d8:	2008d43a 	srli	r4,r4,16
 10081dc:	10c5883a 	add	r2,r2,r3
 10081e0:	3880008d 	sth	r2,2(r7)
 10081e4:	39c00104 	addi	r7,r7,4
 10081e8:	39400017 	ldw	r5,0(r7)
 10081ec:	4909383a 	mul	r4,r9,r4
 10081f0:	1004d43a 	srli	r2,r2,16
 10081f4:	28ffffcc 	andi	r3,r5,65535
 10081f8:	20c9883a 	add	r4,r4,r3
 10081fc:	1105883a 	add	r2,r2,r4
 1008200:	42000104 	addi	r8,r8,4
 1008204:	1014d43a 	srli	r10,r2,16
 1008208:	42ffed36 	bltu	r8,r11,10081c0 <__multiply+0x134>
 100820c:	38800015 	stw	r2,0(r7)
 1008210:	31800104 	addi	r6,r6,4
 1008214:	33c0022e 	bgeu	r6,r15,1008220 <__multiply+0x194>
 1008218:	63000104 	addi	r12,r12,4
 100821c:	003fc606 	br	1008138 <__multiply+0xac>
 1008220:	0400090e 	bge	zero,r16,1008248 <__multiply+0x1bc>
 1008224:	70bfff17 	ldw	r2,-4(r14)
 1008228:	70ffff04 	addi	r3,r14,-4
 100822c:	10000326 	beq	r2,zero,100823c <__multiply+0x1b0>
 1008230:	00000506 	br	1008248 <__multiply+0x1bc>
 1008234:	18800017 	ldw	r2,0(r3)
 1008238:	1000031e 	bne	r2,zero,1008248 <__multiply+0x1bc>
 100823c:	843fffc4 	addi	r16,r16,-1
 1008240:	18ffff04 	addi	r3,r3,-4
 1008244:	803ffb1e 	bne	r16,zero,1008234 <__multiply+0x1a8>
 1008248:	a805883a 	mov	r2,r21
 100824c:	ac000415 	stw	r16,16(r21)
 1008250:	dfc00617 	ldw	ra,24(sp)
 1008254:	dd400517 	ldw	r21,20(sp)
 1008258:	dd000417 	ldw	r20,16(sp)
 100825c:	dcc00317 	ldw	r19,12(sp)
 1008260:	dc800217 	ldw	r18,8(sp)
 1008264:	dc400117 	ldw	r17,4(sp)
 1008268:	dc000017 	ldw	r16,0(sp)
 100826c:	dec00704 	addi	sp,sp,28
 1008270:	f800283a 	ret

01008274 <__i2b>:
 1008274:	defffd04 	addi	sp,sp,-12
 1008278:	dc000015 	stw	r16,0(sp)
 100827c:	04000044 	movi	r16,1
 1008280:	dc800115 	stw	r18,4(sp)
 1008284:	2825883a 	mov	r18,r5
 1008288:	800b883a 	mov	r5,r16
 100828c:	dfc00215 	stw	ra,8(sp)
 1008290:	1007b7c0 	call	1007b7c <_Balloc>
 1008294:	14000415 	stw	r16,16(r2)
 1008298:	14800515 	stw	r18,20(r2)
 100829c:	dfc00217 	ldw	ra,8(sp)
 10082a0:	dc800117 	ldw	r18,4(sp)
 10082a4:	dc000017 	ldw	r16,0(sp)
 10082a8:	dec00304 	addi	sp,sp,12
 10082ac:	f800283a 	ret

010082b0 <__multadd>:
 10082b0:	defffa04 	addi	sp,sp,-24
 10082b4:	dc800215 	stw	r18,8(sp)
 10082b8:	2c800417 	ldw	r18,16(r5)
 10082bc:	dd000415 	stw	r20,16(sp)
 10082c0:	dcc00315 	stw	r19,12(sp)
 10082c4:	dc000015 	stw	r16,0(sp)
 10082c8:	dfc00515 	stw	ra,20(sp)
 10082cc:	3821883a 	mov	r16,r7
 10082d0:	dc400115 	stw	r17,4(sp)
 10082d4:	2827883a 	mov	r19,r5
 10082d8:	2029883a 	mov	r20,r4
 10082dc:	2a000504 	addi	r8,r5,20
 10082e0:	000f883a 	mov	r7,zero
 10082e4:	40800017 	ldw	r2,0(r8)
 10082e8:	39c00044 	addi	r7,r7,1
 10082ec:	10ffffcc 	andi	r3,r2,65535
 10082f0:	1987383a 	mul	r3,r3,r6
 10082f4:	1004d43a 	srli	r2,r2,16
 10082f8:	1c07883a 	add	r3,r3,r16
 10082fc:	180ad43a 	srli	r5,r3,16
 1008300:	1185383a 	mul	r2,r2,r6
 1008304:	18ffffcc 	andi	r3,r3,65535
 1008308:	1145883a 	add	r2,r2,r5
 100830c:	1008943a 	slli	r4,r2,16
 1008310:	1020d43a 	srli	r16,r2,16
 1008314:	20c9883a 	add	r4,r4,r3
 1008318:	41000015 	stw	r4,0(r8)
 100831c:	42000104 	addi	r8,r8,4
 1008320:	3cbff016 	blt	r7,r18,10082e4 <__multadd+0x34>
 1008324:	80000826 	beq	r16,zero,1008348 <__multadd+0x98>
 1008328:	98800217 	ldw	r2,8(r19)
 100832c:	90800f0e 	bge	r18,r2,100836c <__multadd+0xbc>
 1008330:	9485883a 	add	r2,r18,r18
 1008334:	1085883a 	add	r2,r2,r2
 1008338:	14c5883a 	add	r2,r2,r19
 100833c:	90c00044 	addi	r3,r18,1
 1008340:	14000515 	stw	r16,20(r2)
 1008344:	98c00415 	stw	r3,16(r19)
 1008348:	9805883a 	mov	r2,r19
 100834c:	dfc00517 	ldw	ra,20(sp)
 1008350:	dd000417 	ldw	r20,16(sp)
 1008354:	dcc00317 	ldw	r19,12(sp)
 1008358:	dc800217 	ldw	r18,8(sp)
 100835c:	dc400117 	ldw	r17,4(sp)
 1008360:	dc000017 	ldw	r16,0(sp)
 1008364:	dec00604 	addi	sp,sp,24
 1008368:	f800283a 	ret
 100836c:	99400117 	ldw	r5,4(r19)
 1008370:	a009883a 	mov	r4,r20
 1008374:	29400044 	addi	r5,r5,1
 1008378:	1007b7c0 	call	1007b7c <_Balloc>
 100837c:	99800417 	ldw	r6,16(r19)
 1008380:	99400304 	addi	r5,r19,12
 1008384:	11000304 	addi	r4,r2,12
 1008388:	318d883a 	add	r6,r6,r6
 100838c:	318d883a 	add	r6,r6,r6
 1008390:	31800204 	addi	r6,r6,8
 1008394:	1023883a 	mov	r17,r2
 1008398:	10073e40 	call	10073e4 <memcpy>
 100839c:	980b883a 	mov	r5,r19
 10083a0:	a009883a 	mov	r4,r20
 10083a4:	10075fc0 	call	10075fc <_Bfree>
 10083a8:	8827883a 	mov	r19,r17
 10083ac:	003fe006 	br	1008330 <__multadd+0x80>

010083b0 <__pow5mult>:
 10083b0:	defffa04 	addi	sp,sp,-24
 10083b4:	308000cc 	andi	r2,r6,3
 10083b8:	dd000415 	stw	r20,16(sp)
 10083bc:	dcc00315 	stw	r19,12(sp)
 10083c0:	dc000015 	stw	r16,0(sp)
 10083c4:	dfc00515 	stw	ra,20(sp)
 10083c8:	dc800215 	stw	r18,8(sp)
 10083cc:	dc400115 	stw	r17,4(sp)
 10083d0:	3021883a 	mov	r16,r6
 10083d4:	2027883a 	mov	r19,r4
 10083d8:	2829883a 	mov	r20,r5
 10083dc:	10002b1e 	bne	r2,zero,100848c <__pow5mult+0xdc>
 10083e0:	8025d0ba 	srai	r18,r16,2
 10083e4:	90001b26 	beq	r18,zero,1008454 <__pow5mult+0xa4>
 10083e8:	9c001217 	ldw	r16,72(r19)
 10083ec:	8000081e 	bne	r16,zero,1008410 <__pow5mult+0x60>
 10083f0:	00003006 	br	10084b4 <__pow5mult+0x104>
 10083f4:	800b883a 	mov	r5,r16
 10083f8:	800d883a 	mov	r6,r16
 10083fc:	9809883a 	mov	r4,r19
 1008400:	90001426 	beq	r18,zero,1008454 <__pow5mult+0xa4>
 1008404:	80800017 	ldw	r2,0(r16)
 1008408:	10001b26 	beq	r2,zero,1008478 <__pow5mult+0xc8>
 100840c:	1021883a 	mov	r16,r2
 1008410:	9080004c 	andi	r2,r18,1
 1008414:	1005003a 	cmpeq	r2,r2,zero
 1008418:	9025d07a 	srai	r18,r18,1
 100841c:	800d883a 	mov	r6,r16
 1008420:	9809883a 	mov	r4,r19
 1008424:	a00b883a 	mov	r5,r20
 1008428:	103ff21e 	bne	r2,zero,10083f4 <__pow5mult+0x44>
 100842c:	100808c0 	call	100808c <__multiply>
 1008430:	a00b883a 	mov	r5,r20
 1008434:	9809883a 	mov	r4,r19
 1008438:	1023883a 	mov	r17,r2
 100843c:	10075fc0 	call	10075fc <_Bfree>
 1008440:	8829883a 	mov	r20,r17
 1008444:	800b883a 	mov	r5,r16
 1008448:	800d883a 	mov	r6,r16
 100844c:	9809883a 	mov	r4,r19
 1008450:	903fec1e 	bne	r18,zero,1008404 <__pow5mult+0x54>
 1008454:	a005883a 	mov	r2,r20
 1008458:	dfc00517 	ldw	ra,20(sp)
 100845c:	dd000417 	ldw	r20,16(sp)
 1008460:	dcc00317 	ldw	r19,12(sp)
 1008464:	dc800217 	ldw	r18,8(sp)
 1008468:	dc400117 	ldw	r17,4(sp)
 100846c:	dc000017 	ldw	r16,0(sp)
 1008470:	dec00604 	addi	sp,sp,24
 1008474:	f800283a 	ret
 1008478:	100808c0 	call	100808c <__multiply>
 100847c:	80800015 	stw	r2,0(r16)
 1008480:	1021883a 	mov	r16,r2
 1008484:	10000015 	stw	zero,0(r2)
 1008488:	003fe106 	br	1008410 <__pow5mult+0x60>
 100848c:	1085883a 	add	r2,r2,r2
 1008490:	00c040b4 	movhi	r3,258
 1008494:	18e19604 	addi	r3,r3,-31144
 1008498:	1085883a 	add	r2,r2,r2
 100849c:	10c5883a 	add	r2,r2,r3
 10084a0:	11bfff17 	ldw	r6,-4(r2)
 10084a4:	000f883a 	mov	r7,zero
 10084a8:	10082b00 	call	10082b0 <__multadd>
 10084ac:	1029883a 	mov	r20,r2
 10084b0:	003fcb06 	br	10083e0 <__pow5mult+0x30>
 10084b4:	9809883a 	mov	r4,r19
 10084b8:	01409c44 	movi	r5,625
 10084bc:	10082740 	call	1008274 <__i2b>
 10084c0:	98801215 	stw	r2,72(r19)
 10084c4:	1021883a 	mov	r16,r2
 10084c8:	10000015 	stw	zero,0(r2)
 10084cc:	003fd006 	br	1008410 <__pow5mult+0x60>

010084d0 <__s2b>:
 10084d0:	defff904 	addi	sp,sp,-28
 10084d4:	dcc00315 	stw	r19,12(sp)
 10084d8:	dc800215 	stw	r18,8(sp)
 10084dc:	2827883a 	mov	r19,r5
 10084e0:	2025883a 	mov	r18,r4
 10084e4:	01400244 	movi	r5,9
 10084e8:	39000204 	addi	r4,r7,8
 10084ec:	dd000415 	stw	r20,16(sp)
 10084f0:	dc400115 	stw	r17,4(sp)
 10084f4:	dfc00615 	stw	ra,24(sp)
 10084f8:	dd400515 	stw	r21,20(sp)
 10084fc:	dc000015 	stw	r16,0(sp)
 1008500:	3829883a 	mov	r20,r7
 1008504:	3023883a 	mov	r17,r6
 1008508:	100e6fc0 	call	100e6fc <__divsi3>
 100850c:	00c00044 	movi	r3,1
 1008510:	1880350e 	bge	r3,r2,10085e8 <__s2b+0x118>
 1008514:	000b883a 	mov	r5,zero
 1008518:	18c7883a 	add	r3,r3,r3
 100851c:	29400044 	addi	r5,r5,1
 1008520:	18bffd16 	blt	r3,r2,1008518 <__s2b+0x48>
 1008524:	9009883a 	mov	r4,r18
 1008528:	1007b7c0 	call	1007b7c <_Balloc>
 100852c:	1011883a 	mov	r8,r2
 1008530:	d8800717 	ldw	r2,28(sp)
 1008534:	00c00044 	movi	r3,1
 1008538:	01800244 	movi	r6,9
 100853c:	40800515 	stw	r2,20(r8)
 1008540:	40c00415 	stw	r3,16(r8)
 1008544:	3440260e 	bge	r6,r17,10085e0 <__s2b+0x110>
 1008548:	3021883a 	mov	r16,r6
 100854c:	99ab883a 	add	r21,r19,r6
 1008550:	9c05883a 	add	r2,r19,r16
 1008554:	11c00007 	ldb	r7,0(r2)
 1008558:	400b883a 	mov	r5,r8
 100855c:	9009883a 	mov	r4,r18
 1008560:	39fff404 	addi	r7,r7,-48
 1008564:	01800284 	movi	r6,10
 1008568:	10082b00 	call	10082b0 <__multadd>
 100856c:	84000044 	addi	r16,r16,1
 1008570:	1011883a 	mov	r8,r2
 1008574:	8c3ff61e 	bne	r17,r16,1008550 <__s2b+0x80>
 1008578:	ac45883a 	add	r2,r21,r17
 100857c:	117ffe04 	addi	r5,r2,-8
 1008580:	880d883a 	mov	r6,r17
 1008584:	35000c0e 	bge	r6,r20,10085b8 <__s2b+0xe8>
 1008588:	a185c83a 	sub	r2,r20,r6
 100858c:	2821883a 	mov	r16,r5
 1008590:	28a3883a 	add	r17,r5,r2
 1008594:	81c00007 	ldb	r7,0(r16)
 1008598:	400b883a 	mov	r5,r8
 100859c:	9009883a 	mov	r4,r18
 10085a0:	39fff404 	addi	r7,r7,-48
 10085a4:	01800284 	movi	r6,10
 10085a8:	10082b00 	call	10082b0 <__multadd>
 10085ac:	84000044 	addi	r16,r16,1
 10085b0:	1011883a 	mov	r8,r2
 10085b4:	847ff71e 	bne	r16,r17,1008594 <__s2b+0xc4>
 10085b8:	4005883a 	mov	r2,r8
 10085bc:	dfc00617 	ldw	ra,24(sp)
 10085c0:	dd400517 	ldw	r21,20(sp)
 10085c4:	dd000417 	ldw	r20,16(sp)
 10085c8:	dcc00317 	ldw	r19,12(sp)
 10085cc:	dc800217 	ldw	r18,8(sp)
 10085d0:	dc400117 	ldw	r17,4(sp)
 10085d4:	dc000017 	ldw	r16,0(sp)
 10085d8:	dec00704 	addi	sp,sp,28
 10085dc:	f800283a 	ret
 10085e0:	99400284 	addi	r5,r19,10
 10085e4:	003fe706 	br	1008584 <__s2b+0xb4>
 10085e8:	000b883a 	mov	r5,zero
 10085ec:	003fcd06 	br	1008524 <__s2b+0x54>

010085f0 <_realloc_r>:
 10085f0:	defff404 	addi	sp,sp,-48
 10085f4:	dd800815 	stw	r22,32(sp)
 10085f8:	dc800415 	stw	r18,16(sp)
 10085fc:	dc400315 	stw	r17,12(sp)
 1008600:	dfc00b15 	stw	ra,44(sp)
 1008604:	df000a15 	stw	fp,40(sp)
 1008608:	ddc00915 	stw	r23,36(sp)
 100860c:	dd400715 	stw	r21,28(sp)
 1008610:	dd000615 	stw	r20,24(sp)
 1008614:	dcc00515 	stw	r19,20(sp)
 1008618:	dc000215 	stw	r16,8(sp)
 100861c:	2825883a 	mov	r18,r5
 1008620:	3023883a 	mov	r17,r6
 1008624:	202d883a 	mov	r22,r4
 1008628:	2800c926 	beq	r5,zero,1008950 <_realloc_r+0x360>
 100862c:	100f6e00 	call	100f6e0 <__malloc_lock>
 1008630:	943ffe04 	addi	r16,r18,-8
 1008634:	88c002c4 	addi	r3,r17,11
 1008638:	00800584 	movi	r2,22
 100863c:	82000117 	ldw	r8,4(r16)
 1008640:	10c01b2e 	bgeu	r2,r3,10086b0 <_realloc_r+0xc0>
 1008644:	00bffe04 	movi	r2,-8
 1008648:	188e703a 	and	r7,r3,r2
 100864c:	3839883a 	mov	fp,r7
 1008650:	38001a16 	blt	r7,zero,10086bc <_realloc_r+0xcc>
 1008654:	e4401936 	bltu	fp,r17,10086bc <_realloc_r+0xcc>
 1008658:	013fff04 	movi	r4,-4
 100865c:	4126703a 	and	r19,r8,r4
 1008660:	99c02616 	blt	r19,r7,10086fc <_realloc_r+0x10c>
 1008664:	802b883a 	mov	r21,r16
 1008668:	9829883a 	mov	r20,r19
 100866c:	84000204 	addi	r16,r16,8
 1008670:	a80f883a 	mov	r7,r21
 1008674:	a70dc83a 	sub	r6,r20,fp
 1008678:	008003c4 	movi	r2,15
 100867c:	1180c136 	bltu	r2,r6,1008984 <_realloc_r+0x394>
 1008680:	38800117 	ldw	r2,4(r7)
 1008684:	a549883a 	add	r4,r20,r21
 1008688:	1080004c 	andi	r2,r2,1
 100868c:	a084b03a 	or	r2,r20,r2
 1008690:	38800115 	stw	r2,4(r7)
 1008694:	20c00117 	ldw	r3,4(r4)
 1008698:	18c00054 	ori	r3,r3,1
 100869c:	20c00115 	stw	r3,4(r4)
 10086a0:	b009883a 	mov	r4,r22
 10086a4:	100f7000 	call	100f700 <__malloc_unlock>
 10086a8:	8023883a 	mov	r17,r16
 10086ac:	00000606 	br	10086c8 <_realloc_r+0xd8>
 10086b0:	01c00404 	movi	r7,16
 10086b4:	3839883a 	mov	fp,r7
 10086b8:	e47fe72e 	bgeu	fp,r17,1008658 <_realloc_r+0x68>
 10086bc:	00800304 	movi	r2,12
 10086c0:	0023883a 	mov	r17,zero
 10086c4:	b0800015 	stw	r2,0(r22)
 10086c8:	8805883a 	mov	r2,r17
 10086cc:	dfc00b17 	ldw	ra,44(sp)
 10086d0:	df000a17 	ldw	fp,40(sp)
 10086d4:	ddc00917 	ldw	r23,36(sp)
 10086d8:	dd800817 	ldw	r22,32(sp)
 10086dc:	dd400717 	ldw	r21,28(sp)
 10086e0:	dd000617 	ldw	r20,24(sp)
 10086e4:	dcc00517 	ldw	r19,20(sp)
 10086e8:	dc800417 	ldw	r18,16(sp)
 10086ec:	dc400317 	ldw	r17,12(sp)
 10086f0:	dc000217 	ldw	r16,8(sp)
 10086f4:	dec00c04 	addi	sp,sp,48
 10086f8:	f800283a 	ret
 10086fc:	008040b4 	movhi	r2,258
 1008700:	10a34804 	addi	r2,r2,-29408
 1008704:	12400217 	ldw	r9,8(r2)
 1008708:	84cd883a 	add	r6,r16,r19
 100870c:	802b883a 	mov	r21,r16
 1008710:	3240b926 	beq	r6,r9,10089f8 <_realloc_r+0x408>
 1008714:	31400117 	ldw	r5,4(r6)
 1008718:	00bfff84 	movi	r2,-2
 100871c:	2884703a 	and	r2,r5,r2
 1008720:	1185883a 	add	r2,r2,r6
 1008724:	10c00117 	ldw	r3,4(r2)
 1008728:	18c0004c 	andi	r3,r3,1
 100872c:	1807003a 	cmpeq	r3,r3,zero
 1008730:	1800a326 	beq	r3,zero,10089c0 <_realloc_r+0x3d0>
 1008734:	2908703a 	and	r4,r5,r4
 1008738:	9929883a 	add	r20,r19,r4
 100873c:	a1c0a30e 	bge	r20,r7,10089cc <_realloc_r+0x3dc>
 1008740:	4080004c 	andi	r2,r8,1
 1008744:	1000551e 	bne	r2,zero,100889c <_realloc_r+0x2ac>
 1008748:	80800017 	ldw	r2,0(r16)
 100874c:	80afc83a 	sub	r23,r16,r2
 1008750:	b8c00117 	ldw	r3,4(r23)
 1008754:	00bfff04 	movi	r2,-4
 1008758:	1884703a 	and	r2,r3,r2
 100875c:	30002e26 	beq	r6,zero,1008818 <_realloc_r+0x228>
 1008760:	3240b926 	beq	r6,r9,1008a48 <_realloc_r+0x458>
 1008764:	98a9883a 	add	r20,r19,r2
 1008768:	2509883a 	add	r4,r4,r20
 100876c:	d9000015 	stw	r4,0(sp)
 1008770:	21c02a16 	blt	r4,r7,100881c <_realloc_r+0x22c>
 1008774:	30800317 	ldw	r2,12(r6)
 1008778:	30c00217 	ldw	r3,8(r6)
 100877c:	01400904 	movi	r5,36
 1008780:	99bfff04 	addi	r6,r19,-4
 1008784:	18800315 	stw	r2,12(r3)
 1008788:	10c00215 	stw	r3,8(r2)
 100878c:	b9000317 	ldw	r4,12(r23)
 1008790:	b8800217 	ldw	r2,8(r23)
 1008794:	b82b883a 	mov	r21,r23
 1008798:	bc000204 	addi	r16,r23,8
 100879c:	20800215 	stw	r2,8(r4)
 10087a0:	11000315 	stw	r4,12(r2)
 10087a4:	2980e436 	bltu	r5,r6,1008b38 <_realloc_r+0x548>
 10087a8:	008004c4 	movi	r2,19
 10087ac:	9009883a 	mov	r4,r18
 10087b0:	8011883a 	mov	r8,r16
 10087b4:	11800f2e 	bgeu	r2,r6,10087f4 <_realloc_r+0x204>
 10087b8:	90800017 	ldw	r2,0(r18)
 10087bc:	ba000404 	addi	r8,r23,16
 10087c0:	91000204 	addi	r4,r18,8
 10087c4:	b8800215 	stw	r2,8(r23)
 10087c8:	90c00117 	ldw	r3,4(r18)
 10087cc:	008006c4 	movi	r2,27
 10087d0:	b8c00315 	stw	r3,12(r23)
 10087d4:	1180072e 	bgeu	r2,r6,10087f4 <_realloc_r+0x204>
 10087d8:	90c00217 	ldw	r3,8(r18)
 10087dc:	ba000604 	addi	r8,r23,24
 10087e0:	91000404 	addi	r4,r18,16
 10087e4:	b8c00415 	stw	r3,16(r23)
 10087e8:	90800317 	ldw	r2,12(r18)
 10087ec:	b8800515 	stw	r2,20(r23)
 10087f0:	3140e726 	beq	r6,r5,1008b90 <_realloc_r+0x5a0>
 10087f4:	20800017 	ldw	r2,0(r4)
 10087f8:	dd000017 	ldw	r20,0(sp)
 10087fc:	b80f883a 	mov	r7,r23
 1008800:	40800015 	stw	r2,0(r8)
 1008804:	20c00117 	ldw	r3,4(r4)
 1008808:	40c00115 	stw	r3,4(r8)
 100880c:	20800217 	ldw	r2,8(r4)
 1008810:	40800215 	stw	r2,8(r8)
 1008814:	003f9706 	br	1008674 <_realloc_r+0x84>
 1008818:	98a9883a 	add	r20,r19,r2
 100881c:	a1c01f16 	blt	r20,r7,100889c <_realloc_r+0x2ac>
 1008820:	b8c00317 	ldw	r3,12(r23)
 1008824:	b8800217 	ldw	r2,8(r23)
 1008828:	99bfff04 	addi	r6,r19,-4
 100882c:	01400904 	movi	r5,36
 1008830:	b82b883a 	mov	r21,r23
 1008834:	18800215 	stw	r2,8(r3)
 1008838:	10c00315 	stw	r3,12(r2)
 100883c:	bc000204 	addi	r16,r23,8
 1008840:	2980c336 	bltu	r5,r6,1008b50 <_realloc_r+0x560>
 1008844:	008004c4 	movi	r2,19
 1008848:	9009883a 	mov	r4,r18
 100884c:	8011883a 	mov	r8,r16
 1008850:	11800f2e 	bgeu	r2,r6,1008890 <_realloc_r+0x2a0>
 1008854:	90800017 	ldw	r2,0(r18)
 1008858:	ba000404 	addi	r8,r23,16
 100885c:	91000204 	addi	r4,r18,8
 1008860:	b8800215 	stw	r2,8(r23)
 1008864:	90c00117 	ldw	r3,4(r18)
 1008868:	008006c4 	movi	r2,27
 100886c:	b8c00315 	stw	r3,12(r23)
 1008870:	1180072e 	bgeu	r2,r6,1008890 <_realloc_r+0x2a0>
 1008874:	90c00217 	ldw	r3,8(r18)
 1008878:	ba000604 	addi	r8,r23,24
 100887c:	91000404 	addi	r4,r18,16
 1008880:	b8c00415 	stw	r3,16(r23)
 1008884:	90800317 	ldw	r2,12(r18)
 1008888:	b8800515 	stw	r2,20(r23)
 100888c:	3140c726 	beq	r6,r5,1008bac <_realloc_r+0x5bc>
 1008890:	20800017 	ldw	r2,0(r4)
 1008894:	b80f883a 	mov	r7,r23
 1008898:	003fd906 	br	1008800 <_realloc_r+0x210>
 100889c:	880b883a 	mov	r5,r17
 10088a0:	b009883a 	mov	r4,r22
 10088a4:	1006ac00 	call	1006ac0 <_malloc_r>
 10088a8:	1023883a 	mov	r17,r2
 10088ac:	10002526 	beq	r2,zero,1008944 <_realloc_r+0x354>
 10088b0:	80800117 	ldw	r2,4(r16)
 10088b4:	00ffff84 	movi	r3,-2
 10088b8:	893ffe04 	addi	r4,r17,-8
 10088bc:	10c4703a 	and	r2,r2,r3
 10088c0:	8085883a 	add	r2,r16,r2
 10088c4:	20809526 	beq	r4,r2,1008b1c <_realloc_r+0x52c>
 10088c8:	99bfff04 	addi	r6,r19,-4
 10088cc:	01c00904 	movi	r7,36
 10088d0:	39804536 	bltu	r7,r6,10089e8 <_realloc_r+0x3f8>
 10088d4:	008004c4 	movi	r2,19
 10088d8:	9009883a 	mov	r4,r18
 10088dc:	880b883a 	mov	r5,r17
 10088e0:	11800f2e 	bgeu	r2,r6,1008920 <_realloc_r+0x330>
 10088e4:	90800017 	ldw	r2,0(r18)
 10088e8:	89400204 	addi	r5,r17,8
 10088ec:	91000204 	addi	r4,r18,8
 10088f0:	88800015 	stw	r2,0(r17)
 10088f4:	90c00117 	ldw	r3,4(r18)
 10088f8:	008006c4 	movi	r2,27
 10088fc:	88c00115 	stw	r3,4(r17)
 1008900:	1180072e 	bgeu	r2,r6,1008920 <_realloc_r+0x330>
 1008904:	90c00217 	ldw	r3,8(r18)
 1008908:	89400404 	addi	r5,r17,16
 100890c:	91000404 	addi	r4,r18,16
 1008910:	88c00215 	stw	r3,8(r17)
 1008914:	90800317 	ldw	r2,12(r18)
 1008918:	88800315 	stw	r2,12(r17)
 100891c:	31c09126 	beq	r6,r7,1008b64 <_realloc_r+0x574>
 1008920:	20800017 	ldw	r2,0(r4)
 1008924:	28800015 	stw	r2,0(r5)
 1008928:	20c00117 	ldw	r3,4(r4)
 100892c:	28c00115 	stw	r3,4(r5)
 1008930:	20800217 	ldw	r2,8(r4)
 1008934:	28800215 	stw	r2,8(r5)
 1008938:	900b883a 	mov	r5,r18
 100893c:	b009883a 	mov	r4,r22
 1008940:	1005f0c0 	call	1005f0c <_free_r>
 1008944:	b009883a 	mov	r4,r22
 1008948:	100f7000 	call	100f700 <__malloc_unlock>
 100894c:	003f5e06 	br	10086c8 <_realloc_r+0xd8>
 1008950:	300b883a 	mov	r5,r6
 1008954:	dfc00b17 	ldw	ra,44(sp)
 1008958:	df000a17 	ldw	fp,40(sp)
 100895c:	ddc00917 	ldw	r23,36(sp)
 1008960:	dd800817 	ldw	r22,32(sp)
 1008964:	dd400717 	ldw	r21,28(sp)
 1008968:	dd000617 	ldw	r20,24(sp)
 100896c:	dcc00517 	ldw	r19,20(sp)
 1008970:	dc800417 	ldw	r18,16(sp)
 1008974:	dc400317 	ldw	r17,12(sp)
 1008978:	dc000217 	ldw	r16,8(sp)
 100897c:	dec00c04 	addi	sp,sp,48
 1008980:	1006ac01 	jmpi	1006ac0 <_malloc_r>
 1008984:	38800117 	ldw	r2,4(r7)
 1008988:	e54b883a 	add	r5,fp,r21
 100898c:	31000054 	ori	r4,r6,1
 1008990:	1080004c 	andi	r2,r2,1
 1008994:	1704b03a 	or	r2,r2,fp
 1008998:	38800115 	stw	r2,4(r7)
 100899c:	29000115 	stw	r4,4(r5)
 10089a0:	2987883a 	add	r3,r5,r6
 10089a4:	18800117 	ldw	r2,4(r3)
 10089a8:	29400204 	addi	r5,r5,8
 10089ac:	b009883a 	mov	r4,r22
 10089b0:	10800054 	ori	r2,r2,1
 10089b4:	18800115 	stw	r2,4(r3)
 10089b8:	1005f0c0 	call	1005f0c <_free_r>
 10089bc:	003f3806 	br	10086a0 <_realloc_r+0xb0>
 10089c0:	000d883a 	mov	r6,zero
 10089c4:	0009883a 	mov	r4,zero
 10089c8:	003f5d06 	br	1008740 <_realloc_r+0x150>
 10089cc:	30c00217 	ldw	r3,8(r6)
 10089d0:	30800317 	ldw	r2,12(r6)
 10089d4:	800f883a 	mov	r7,r16
 10089d8:	84000204 	addi	r16,r16,8
 10089dc:	10c00215 	stw	r3,8(r2)
 10089e0:	18800315 	stw	r2,12(r3)
 10089e4:	003f2306 	br	1008674 <_realloc_r+0x84>
 10089e8:	8809883a 	mov	r4,r17
 10089ec:	900b883a 	mov	r5,r18
 10089f0:	10074840 	call	1007484 <memmove>
 10089f4:	003fd006 	br	1008938 <_realloc_r+0x348>
 10089f8:	30800117 	ldw	r2,4(r6)
 10089fc:	e0c00404 	addi	r3,fp,16
 1008a00:	1108703a 	and	r4,r2,r4
 1008a04:	9905883a 	add	r2,r19,r4
 1008a08:	10ff4d16 	blt	r2,r3,1008740 <_realloc_r+0x150>
 1008a0c:	1705c83a 	sub	r2,r2,fp
 1008a10:	870b883a 	add	r5,r16,fp
 1008a14:	10800054 	ori	r2,r2,1
 1008a18:	28800115 	stw	r2,4(r5)
 1008a1c:	80c00117 	ldw	r3,4(r16)
 1008a20:	008040b4 	movhi	r2,258
 1008a24:	10a34804 	addi	r2,r2,-29408
 1008a28:	b009883a 	mov	r4,r22
 1008a2c:	18c0004c 	andi	r3,r3,1
 1008a30:	e0c6b03a 	or	r3,fp,r3
 1008a34:	11400215 	stw	r5,8(r2)
 1008a38:	80c00115 	stw	r3,4(r16)
 1008a3c:	100f7000 	call	100f700 <__malloc_unlock>
 1008a40:	84400204 	addi	r17,r16,8
 1008a44:	003f2006 	br	10086c8 <_realloc_r+0xd8>
 1008a48:	98a9883a 	add	r20,r19,r2
 1008a4c:	2509883a 	add	r4,r4,r20
 1008a50:	e0800404 	addi	r2,fp,16
 1008a54:	d9000115 	stw	r4,4(sp)
 1008a58:	20bf7016 	blt	r4,r2,100881c <_realloc_r+0x22c>
 1008a5c:	b8c00317 	ldw	r3,12(r23)
 1008a60:	b8800217 	ldw	r2,8(r23)
 1008a64:	99bfff04 	addi	r6,r19,-4
 1008a68:	01400904 	movi	r5,36
 1008a6c:	18800215 	stw	r2,8(r3)
 1008a70:	10c00315 	stw	r3,12(r2)
 1008a74:	bc400204 	addi	r17,r23,8
 1008a78:	29804136 	bltu	r5,r6,1008b80 <_realloc_r+0x590>
 1008a7c:	008004c4 	movi	r2,19
 1008a80:	9009883a 	mov	r4,r18
 1008a84:	880f883a 	mov	r7,r17
 1008a88:	11800f2e 	bgeu	r2,r6,1008ac8 <_realloc_r+0x4d8>
 1008a8c:	90800017 	ldw	r2,0(r18)
 1008a90:	b9c00404 	addi	r7,r23,16
 1008a94:	91000204 	addi	r4,r18,8
 1008a98:	b8800215 	stw	r2,8(r23)
 1008a9c:	90c00117 	ldw	r3,4(r18)
 1008aa0:	008006c4 	movi	r2,27
 1008aa4:	b8c00315 	stw	r3,12(r23)
 1008aa8:	1180072e 	bgeu	r2,r6,1008ac8 <_realloc_r+0x4d8>
 1008aac:	90c00217 	ldw	r3,8(r18)
 1008ab0:	b9c00604 	addi	r7,r23,24
 1008ab4:	91000404 	addi	r4,r18,16
 1008ab8:	b8c00415 	stw	r3,16(r23)
 1008abc:	90800317 	ldw	r2,12(r18)
 1008ac0:	b8800515 	stw	r2,20(r23)
 1008ac4:	31404026 	beq	r6,r5,1008bc8 <_realloc_r+0x5d8>
 1008ac8:	20800017 	ldw	r2,0(r4)
 1008acc:	38800015 	stw	r2,0(r7)
 1008ad0:	20c00117 	ldw	r3,4(r4)
 1008ad4:	38c00115 	stw	r3,4(r7)
 1008ad8:	20800217 	ldw	r2,8(r4)
 1008adc:	38800215 	stw	r2,8(r7)
 1008ae0:	d8c00117 	ldw	r3,4(sp)
 1008ae4:	bf0b883a 	add	r5,r23,fp
 1008ae8:	b009883a 	mov	r4,r22
 1008aec:	1f05c83a 	sub	r2,r3,fp
 1008af0:	10800054 	ori	r2,r2,1
 1008af4:	28800115 	stw	r2,4(r5)
 1008af8:	b8c00117 	ldw	r3,4(r23)
 1008afc:	008040b4 	movhi	r2,258
 1008b00:	10a34804 	addi	r2,r2,-29408
 1008b04:	11400215 	stw	r5,8(r2)
 1008b08:	18c0004c 	andi	r3,r3,1
 1008b0c:	e0c6b03a 	or	r3,fp,r3
 1008b10:	b8c00115 	stw	r3,4(r23)
 1008b14:	100f7000 	call	100f700 <__malloc_unlock>
 1008b18:	003eeb06 	br	10086c8 <_realloc_r+0xd8>
 1008b1c:	20800117 	ldw	r2,4(r4)
 1008b20:	00ffff04 	movi	r3,-4
 1008b24:	800f883a 	mov	r7,r16
 1008b28:	10c4703a 	and	r2,r2,r3
 1008b2c:	98a9883a 	add	r20,r19,r2
 1008b30:	84000204 	addi	r16,r16,8
 1008b34:	003ecf06 	br	1008674 <_realloc_r+0x84>
 1008b38:	900b883a 	mov	r5,r18
 1008b3c:	8009883a 	mov	r4,r16
 1008b40:	10074840 	call	1007484 <memmove>
 1008b44:	dd000017 	ldw	r20,0(sp)
 1008b48:	b80f883a 	mov	r7,r23
 1008b4c:	003ec906 	br	1008674 <_realloc_r+0x84>
 1008b50:	900b883a 	mov	r5,r18
 1008b54:	8009883a 	mov	r4,r16
 1008b58:	10074840 	call	1007484 <memmove>
 1008b5c:	b80f883a 	mov	r7,r23
 1008b60:	003ec406 	br	1008674 <_realloc_r+0x84>
 1008b64:	90c00417 	ldw	r3,16(r18)
 1008b68:	89400604 	addi	r5,r17,24
 1008b6c:	91000604 	addi	r4,r18,24
 1008b70:	88c00415 	stw	r3,16(r17)
 1008b74:	90800517 	ldw	r2,20(r18)
 1008b78:	88800515 	stw	r2,20(r17)
 1008b7c:	003f6806 	br	1008920 <_realloc_r+0x330>
 1008b80:	900b883a 	mov	r5,r18
 1008b84:	8809883a 	mov	r4,r17
 1008b88:	10074840 	call	1007484 <memmove>
 1008b8c:	003fd406 	br	1008ae0 <_realloc_r+0x4f0>
 1008b90:	90c00417 	ldw	r3,16(r18)
 1008b94:	91000604 	addi	r4,r18,24
 1008b98:	ba000804 	addi	r8,r23,32
 1008b9c:	b8c00615 	stw	r3,24(r23)
 1008ba0:	90800517 	ldw	r2,20(r18)
 1008ba4:	b8800715 	stw	r2,28(r23)
 1008ba8:	003f1206 	br	10087f4 <_realloc_r+0x204>
 1008bac:	90c00417 	ldw	r3,16(r18)
 1008bb0:	91000604 	addi	r4,r18,24
 1008bb4:	ba000804 	addi	r8,r23,32
 1008bb8:	b8c00615 	stw	r3,24(r23)
 1008bbc:	90800517 	ldw	r2,20(r18)
 1008bc0:	b8800715 	stw	r2,28(r23)
 1008bc4:	003f3206 	br	1008890 <_realloc_r+0x2a0>
 1008bc8:	90c00417 	ldw	r3,16(r18)
 1008bcc:	91000604 	addi	r4,r18,24
 1008bd0:	b9c00804 	addi	r7,r23,32
 1008bd4:	b8c00615 	stw	r3,24(r23)
 1008bd8:	90800517 	ldw	r2,20(r18)
 1008bdc:	b8800715 	stw	r2,28(r23)
 1008be0:	003fb906 	br	1008ac8 <_realloc_r+0x4d8>

01008be4 <__srefill_r>:
 1008be4:	defffd04 	addi	sp,sp,-12
 1008be8:	dc400115 	stw	r17,4(sp)
 1008bec:	dc000015 	stw	r16,0(sp)
 1008bf0:	dfc00215 	stw	ra,8(sp)
 1008bf4:	2023883a 	mov	r17,r4
 1008bf8:	2821883a 	mov	r16,r5
 1008bfc:	20000226 	beq	r4,zero,1008c08 <__srefill_r+0x24>
 1008c00:	20800e17 	ldw	r2,56(r4)
 1008c04:	10004126 	beq	r2,zero,1008d0c <__srefill_r+0x128>
 1008c08:	80c0030b 	ldhu	r3,12(r16)
 1008c0c:	80000115 	stw	zero,4(r16)
 1008c10:	1880080c 	andi	r2,r3,32
 1008c14:	1000361e 	bne	r2,zero,1008cf0 <__srefill_r+0x10c>
 1008c18:	1880010c 	andi	r2,r3,4
 1008c1c:	1000211e 	bne	r2,zero,1008ca4 <__srefill_r+0xc0>
 1008c20:	1880040c 	andi	r2,r3,16
 1008c24:	10005026 	beq	r2,zero,1008d68 <__srefill_r+0x184>
 1008c28:	1880020c 	andi	r2,r3,8
 1008c2c:	1000541e 	bne	r2,zero,1008d80 <__srefill_r+0x19c>
 1008c30:	8080030b 	ldhu	r2,12(r16)
 1008c34:	10800114 	ori	r2,r2,4
 1008c38:	8080030d 	sth	r2,12(r16)
 1008c3c:	80800417 	ldw	r2,16(r16)
 1008c40:	10004526 	beq	r2,zero,1008d58 <__srefill_r+0x174>
 1008c44:	8080030b 	ldhu	r2,12(r16)
 1008c48:	108000cc 	andi	r2,r2,3
 1008c4c:	1000361e 	bne	r2,zero,1008d28 <__srefill_r+0x144>
 1008c50:	81800417 	ldw	r6,16(r16)
 1008c54:	80c00817 	ldw	r3,32(r16)
 1008c58:	81400717 	ldw	r5,28(r16)
 1008c5c:	81c00517 	ldw	r7,20(r16)
 1008c60:	8809883a 	mov	r4,r17
 1008c64:	81800015 	stw	r6,0(r16)
 1008c68:	183ee83a 	callr	r3
 1008c6c:	80c0030b 	ldhu	r3,12(r16)
 1008c70:	1009883a 	mov	r4,r2
 1008c74:	80800115 	stw	r2,4(r16)
 1008c78:	00b7ffc4 	movi	r2,-8193
 1008c7c:	1884703a 	and	r2,r3,r2
 1008c80:	8080030d 	sth	r2,12(r16)
 1008c84:	0100230e 	bge	zero,r4,1008d14 <__srefill_r+0x130>
 1008c88:	0009883a 	mov	r4,zero
 1008c8c:	2005883a 	mov	r2,r4
 1008c90:	dfc00217 	ldw	ra,8(sp)
 1008c94:	dc400117 	ldw	r17,4(sp)
 1008c98:	dc000017 	ldw	r16,0(sp)
 1008c9c:	dec00304 	addi	sp,sp,12
 1008ca0:	f800283a 	ret
 1008ca4:	81400c17 	ldw	r5,48(r16)
 1008ca8:	283fe426 	beq	r5,zero,1008c3c <__srefill_r+0x58>
 1008cac:	80801004 	addi	r2,r16,64
 1008cb0:	28800226 	beq	r5,r2,1008cbc <__srefill_r+0xd8>
 1008cb4:	8809883a 	mov	r4,r17
 1008cb8:	1005f0c0 	call	1005f0c <_free_r>
 1008cbc:	80800f17 	ldw	r2,60(r16)
 1008cc0:	80000c15 	stw	zero,48(r16)
 1008cc4:	80800115 	stw	r2,4(r16)
 1008cc8:	103fdc26 	beq	r2,zero,1008c3c <__srefill_r+0x58>
 1008ccc:	80800e17 	ldw	r2,56(r16)
 1008cd0:	0009883a 	mov	r4,zero
 1008cd4:	80800015 	stw	r2,0(r16)
 1008cd8:	2005883a 	mov	r2,r4
 1008cdc:	dfc00217 	ldw	ra,8(sp)
 1008ce0:	dc400117 	ldw	r17,4(sp)
 1008ce4:	dc000017 	ldw	r16,0(sp)
 1008ce8:	dec00304 	addi	sp,sp,12
 1008cec:	f800283a 	ret
 1008cf0:	013fffc4 	movi	r4,-1
 1008cf4:	2005883a 	mov	r2,r4
 1008cf8:	dfc00217 	ldw	ra,8(sp)
 1008cfc:	dc400117 	ldw	r17,4(sp)
 1008d00:	dc000017 	ldw	r16,0(sp)
 1008d04:	dec00304 	addi	sp,sp,12
 1008d08:	f800283a 	ret
 1008d0c:	100594c0 	call	100594c <__sinit>
 1008d10:	003fbd06 	br	1008c08 <__srefill_r+0x24>
 1008d14:	20000b1e 	bne	r4,zero,1008d44 <__srefill_r+0x160>
 1008d18:	10800814 	ori	r2,r2,32
 1008d1c:	013fffc4 	movi	r4,-1
 1008d20:	8080030d 	sth	r2,12(r16)
 1008d24:	003fd906 	br	1008c8c <__srefill_r+0xa8>
 1008d28:	008040b4 	movhi	r2,258
 1008d2c:	10a8f904 	addi	r2,r2,-23580
 1008d30:	11000017 	ldw	r4,0(r2)
 1008d34:	01404074 	movhi	r5,257
 1008d38:	29636a04 	addi	r5,r5,-29272
 1008d3c:	10067840 	call	1006784 <_fwalk>
 1008d40:	003fc306 	br	1008c50 <__srefill_r+0x6c>
 1008d44:	10801014 	ori	r2,r2,64
 1008d48:	013fffc4 	movi	r4,-1
 1008d4c:	8080030d 	sth	r2,12(r16)
 1008d50:	80000115 	stw	zero,4(r16)
 1008d54:	003fcd06 	br	1008c8c <__srefill_r+0xa8>
 1008d58:	8809883a 	mov	r4,r17
 1008d5c:	800b883a 	mov	r5,r16
 1008d60:	100692c0 	call	100692c <__smakebuf_r>
 1008d64:	003fb706 	br	1008c44 <__srefill_r+0x60>
 1008d68:	18c01014 	ori	r3,r3,64
 1008d6c:	00800244 	movi	r2,9
 1008d70:	013fffc4 	movi	r4,-1
 1008d74:	88800015 	stw	r2,0(r17)
 1008d78:	80c0030d 	sth	r3,12(r16)
 1008d7c:	003fc306 	br	1008c8c <__srefill_r+0xa8>
 1008d80:	8809883a 	mov	r4,r17
 1008d84:	800b883a 	mov	r5,r16
 1008d88:	10056b40 	call	10056b4 <_fflush_r>
 1008d8c:	103fd81e 	bne	r2,zero,1008cf0 <__srefill_r+0x10c>
 1008d90:	8080030b 	ldhu	r2,12(r16)
 1008d94:	80000215 	stw	zero,8(r16)
 1008d98:	80000615 	stw	zero,24(r16)
 1008d9c:	10bffdcc 	andi	r2,r2,65527
 1008da0:	8080030d 	sth	r2,12(r16)
 1008da4:	003fa206 	br	1008c30 <__srefill_r+0x4c>

01008da8 <lflush>:
 1008da8:	20c0030b 	ldhu	r3,12(r4)
 1008dac:	01400244 	movi	r5,9
 1008db0:	0005883a 	mov	r2,zero
 1008db4:	18c0024c 	andi	r3,r3,9
 1008db8:	19400126 	beq	r3,r5,1008dc0 <lflush+0x18>
 1008dbc:	f800283a 	ret
 1008dc0:	10058b01 	jmpi	10058b0 <fflush>

01008dc4 <__isinfd>:
 1008dc4:	200d883a 	mov	r6,r4
 1008dc8:	0109c83a 	sub	r4,zero,r4
 1008dcc:	2188b03a 	or	r4,r4,r6
 1008dd0:	2008d7fa 	srli	r4,r4,31
 1008dd4:	00a00034 	movhi	r2,32768
 1008dd8:	10bfffc4 	addi	r2,r2,-1
 1008ddc:	1144703a 	and	r2,r2,r5
 1008de0:	2088b03a 	or	r4,r4,r2
 1008de4:	009ffc34 	movhi	r2,32752
 1008de8:	1105c83a 	sub	r2,r2,r4
 1008dec:	0087c83a 	sub	r3,zero,r2
 1008df0:	10c4b03a 	or	r2,r2,r3
 1008df4:	1004d7fa 	srli	r2,r2,31
 1008df8:	00c00044 	movi	r3,1
 1008dfc:	1885c83a 	sub	r2,r3,r2
 1008e00:	f800283a 	ret

01008e04 <__isnand>:
 1008e04:	200d883a 	mov	r6,r4
 1008e08:	0109c83a 	sub	r4,zero,r4
 1008e0c:	2188b03a 	or	r4,r4,r6
 1008e10:	2008d7fa 	srli	r4,r4,31
 1008e14:	00a00034 	movhi	r2,32768
 1008e18:	10bfffc4 	addi	r2,r2,-1
 1008e1c:	1144703a 	and	r2,r2,r5
 1008e20:	2088b03a 	or	r4,r4,r2
 1008e24:	009ffc34 	movhi	r2,32752
 1008e28:	1105c83a 	sub	r2,r2,r4
 1008e2c:	1004d7fa 	srli	r2,r2,31
 1008e30:	f800283a 	ret

01008e34 <_sbrk_r>:
 1008e34:	defffd04 	addi	sp,sp,-12
 1008e38:	dc000015 	stw	r16,0(sp)
 1008e3c:	040040b4 	movhi	r16,258
 1008e40:	842fd104 	addi	r16,r16,-16572
 1008e44:	dc400115 	stw	r17,4(sp)
 1008e48:	80000015 	stw	zero,0(r16)
 1008e4c:	2023883a 	mov	r17,r4
 1008e50:	2809883a 	mov	r4,r5
 1008e54:	dfc00215 	stw	ra,8(sp)
 1008e58:	100f9000 	call	100f900 <sbrk>
 1008e5c:	1007883a 	mov	r3,r2
 1008e60:	00bfffc4 	movi	r2,-1
 1008e64:	18800626 	beq	r3,r2,1008e80 <_sbrk_r+0x4c>
 1008e68:	1805883a 	mov	r2,r3
 1008e6c:	dfc00217 	ldw	ra,8(sp)
 1008e70:	dc400117 	ldw	r17,4(sp)
 1008e74:	dc000017 	ldw	r16,0(sp)
 1008e78:	dec00304 	addi	sp,sp,12
 1008e7c:	f800283a 	ret
 1008e80:	80800017 	ldw	r2,0(r16)
 1008e84:	103ff826 	beq	r2,zero,1008e68 <_sbrk_r+0x34>
 1008e88:	88800015 	stw	r2,0(r17)
 1008e8c:	1805883a 	mov	r2,r3
 1008e90:	dfc00217 	ldw	ra,8(sp)
 1008e94:	dc400117 	ldw	r17,4(sp)
 1008e98:	dc000017 	ldw	r16,0(sp)
 1008e9c:	dec00304 	addi	sp,sp,12
 1008ea0:	f800283a 	ret

01008ea4 <__sccl>:
 1008ea4:	28c00003 	ldbu	r3,0(r5)
 1008ea8:	00801784 	movi	r2,94
 1008eac:	2a000044 	addi	r8,r5,1
 1008eb0:	18802526 	beq	r3,r2,1008f48 <__sccl+0xa4>
 1008eb4:	180f883a 	mov	r7,r3
 1008eb8:	0013883a 	mov	r9,zero
 1008ebc:	000d883a 	mov	r6,zero
 1008ec0:	0007883a 	mov	r3,zero
 1008ec4:	01404004 	movi	r5,256
 1008ec8:	1905883a 	add	r2,r3,r4
 1008ecc:	18c00044 	addi	r3,r3,1
 1008ed0:	11800005 	stb	r6,0(r2)
 1008ed4:	197ffc1e 	bne	r3,r5,1008ec8 <__sccl+0x24>
 1008ed8:	38000c26 	beq	r7,zero,1008f0c <__sccl+0x68>
 1008edc:	00800044 	movi	r2,1
 1008ee0:	124dc83a 	sub	r6,r2,r9
 1008ee4:	3905883a 	add	r2,r7,r4
 1008ee8:	11800005 	stb	r6,0(r2)
 1008eec:	41400044 	addi	r5,r8,1
 1008ef0:	02400b44 	movi	r9,45
 1008ef4:	02801744 	movi	r10,93
 1008ef8:	28bfffc3 	ldbu	r2,-1(r5)
 1008efc:	2811883a 	mov	r8,r5
 1008f00:	12400726 	beq	r2,r9,1008f20 <__sccl+0x7c>
 1008f04:	12800226 	beq	r2,r10,1008f10 <__sccl+0x6c>
 1008f08:	1000031e 	bne	r2,zero,1008f18 <__sccl+0x74>
 1008f0c:	423fffc4 	addi	r8,r8,-1
 1008f10:	4005883a 	mov	r2,r8
 1008f14:	f800283a 	ret
 1008f18:	100f883a 	mov	r7,r2
 1008f1c:	003ff106 	br	1008ee4 <__sccl+0x40>
 1008f20:	28c00003 	ldbu	r3,0(r5)
 1008f24:	1a800d26 	beq	r3,r10,1008f5c <__sccl+0xb8>
 1008f28:	19c00c16 	blt	r3,r7,1008f5c <__sccl+0xb8>
 1008f2c:	21c5883a 	add	r2,r4,r7
 1008f30:	39c00044 	addi	r7,r7,1
 1008f34:	11800045 	stb	r6,1(r2)
 1008f38:	10800044 	addi	r2,r2,1
 1008f3c:	38fffc16 	blt	r7,r3,1008f30 <__sccl+0x8c>
 1008f40:	29400084 	addi	r5,r5,2
 1008f44:	003fec06 	br	1008ef8 <__sccl+0x54>
 1008f48:	29c00043 	ldbu	r7,1(r5)
 1008f4c:	02400044 	movi	r9,1
 1008f50:	2a000084 	addi	r8,r5,2
 1008f54:	480d883a 	mov	r6,r9
 1008f58:	003fd906 	br	1008ec0 <__sccl+0x1c>
 1008f5c:	01c00b44 	movi	r7,45
 1008f60:	003fe006 	br	1008ee4 <__sccl+0x40>

01008f64 <nanf>:
 1008f64:	009ff034 	movhi	r2,32704
 1008f68:	f800283a 	ret

01008f6c <sprintf>:
 1008f6c:	deffe504 	addi	sp,sp,-108
 1008f70:	2013883a 	mov	r9,r4
 1008f74:	dfc01815 	stw	ra,96(sp)
 1008f78:	d9801915 	stw	r6,100(sp)
 1008f7c:	d9c01a15 	stw	r7,104(sp)
 1008f80:	d8801904 	addi	r2,sp,100
 1008f84:	d8800015 	stw	r2,0(sp)
 1008f88:	008040b4 	movhi	r2,258
 1008f8c:	10a8f804 	addi	r2,r2,-23584
 1008f90:	11000017 	ldw	r4,0(r2)
 1008f94:	d9c00017 	ldw	r7,0(sp)
 1008f98:	00808204 	movi	r2,520
 1008f9c:	00e00034 	movhi	r3,32768
 1008fa0:	18ffffc4 	addi	r3,r3,-1
 1008fa4:	280d883a 	mov	r6,r5
 1008fa8:	d880040d 	sth	r2,16(sp)
 1008fac:	d9400104 	addi	r5,sp,4
 1008fb0:	00bfffc4 	movi	r2,-1
 1008fb4:	d8c00615 	stw	r3,24(sp)
 1008fb8:	d8c00315 	stw	r3,12(sp)
 1008fbc:	da400515 	stw	r9,20(sp)
 1008fc0:	d880048d 	sth	r2,18(sp)
 1008fc4:	da400115 	stw	r9,4(sp)
 1008fc8:	100075c0 	call	100075c <___vfprintf_internal_r>
 1008fcc:	d8c00117 	ldw	r3,4(sp)
 1008fd0:	18000005 	stb	zero,0(r3)
 1008fd4:	dfc01817 	ldw	ra,96(sp)
 1008fd8:	dec01b04 	addi	sp,sp,108
 1008fdc:	f800283a 	ret

01008fe0 <_sprintf_r>:
 1008fe0:	deffe604 	addi	sp,sp,-104
 1008fe4:	2813883a 	mov	r9,r5
 1008fe8:	dfc01815 	stw	ra,96(sp)
 1008fec:	d9c01915 	stw	r7,100(sp)
 1008ff0:	d8801904 	addi	r2,sp,100
 1008ff4:	d8800015 	stw	r2,0(sp)
 1008ff8:	100f883a 	mov	r7,r2
 1008ffc:	00808204 	movi	r2,520
 1009000:	00e00034 	movhi	r3,32768
 1009004:	18ffffc4 	addi	r3,r3,-1
 1009008:	d880040d 	sth	r2,16(sp)
 100900c:	d9400104 	addi	r5,sp,4
 1009010:	00bfffc4 	movi	r2,-1
 1009014:	d8c00615 	stw	r3,24(sp)
 1009018:	d8c00315 	stw	r3,12(sp)
 100901c:	da400515 	stw	r9,20(sp)
 1009020:	d880048d 	sth	r2,18(sp)
 1009024:	da400115 	stw	r9,4(sp)
 1009028:	100075c0 	call	100075c <___vfprintf_internal_r>
 100902c:	d8c00117 	ldw	r3,4(sp)
 1009030:	18000005 	stb	zero,0(r3)
 1009034:	dfc01817 	ldw	ra,96(sp)
 1009038:	dec01a04 	addi	sp,sp,104
 100903c:	f800283a 	ret

01009040 <__sclose>:
 1009040:	2940038f 	ldh	r5,14(r5)
 1009044:	100b7381 	jmpi	100b738 <_close_r>

01009048 <__sseek>:
 1009048:	defffe04 	addi	sp,sp,-8
 100904c:	dc000015 	stw	r16,0(sp)
 1009050:	2821883a 	mov	r16,r5
 1009054:	2940038f 	ldh	r5,14(r5)
 1009058:	dfc00115 	stw	ra,4(sp)
 100905c:	100c5380 	call	100c538 <_lseek_r>
 1009060:	1007883a 	mov	r3,r2
 1009064:	00bfffc4 	movi	r2,-1
 1009068:	18800926 	beq	r3,r2,1009090 <__sseek+0x48>
 100906c:	8080030b 	ldhu	r2,12(r16)
 1009070:	80c01415 	stw	r3,80(r16)
 1009074:	10840014 	ori	r2,r2,4096
 1009078:	8080030d 	sth	r2,12(r16)
 100907c:	1805883a 	mov	r2,r3
 1009080:	dfc00117 	ldw	ra,4(sp)
 1009084:	dc000017 	ldw	r16,0(sp)
 1009088:	dec00204 	addi	sp,sp,8
 100908c:	f800283a 	ret
 1009090:	8080030b 	ldhu	r2,12(r16)
 1009094:	10bbffcc 	andi	r2,r2,61439
 1009098:	8080030d 	sth	r2,12(r16)
 100909c:	1805883a 	mov	r2,r3
 10090a0:	dfc00117 	ldw	ra,4(sp)
 10090a4:	dc000017 	ldw	r16,0(sp)
 10090a8:	dec00204 	addi	sp,sp,8
 10090ac:	f800283a 	ret

010090b0 <__swrite>:
 10090b0:	2880030b 	ldhu	r2,12(r5)
 10090b4:	defffb04 	addi	sp,sp,-20
 10090b8:	dcc00315 	stw	r19,12(sp)
 10090bc:	1080400c 	andi	r2,r2,256
 10090c0:	dc800215 	stw	r18,8(sp)
 10090c4:	dc400115 	stw	r17,4(sp)
 10090c8:	dc000015 	stw	r16,0(sp)
 10090cc:	3027883a 	mov	r19,r6
 10090d0:	3825883a 	mov	r18,r7
 10090d4:	dfc00415 	stw	ra,16(sp)
 10090d8:	2821883a 	mov	r16,r5
 10090dc:	000d883a 	mov	r6,zero
 10090e0:	01c00084 	movi	r7,2
 10090e4:	2023883a 	mov	r17,r4
 10090e8:	10000226 	beq	r2,zero,10090f4 <__swrite+0x44>
 10090ec:	2940038f 	ldh	r5,14(r5)
 10090f0:	100c5380 	call	100c538 <_lseek_r>
 10090f4:	8080030b 	ldhu	r2,12(r16)
 10090f8:	8140038f 	ldh	r5,14(r16)
 10090fc:	8809883a 	mov	r4,r17
 1009100:	10bbffcc 	andi	r2,r2,61439
 1009104:	980d883a 	mov	r6,r19
 1009108:	900f883a 	mov	r7,r18
 100910c:	8080030d 	sth	r2,12(r16)
 1009110:	dfc00417 	ldw	ra,16(sp)
 1009114:	dcc00317 	ldw	r19,12(sp)
 1009118:	dc800217 	ldw	r18,8(sp)
 100911c:	dc400117 	ldw	r17,4(sp)
 1009120:	dc000017 	ldw	r16,0(sp)
 1009124:	dec00504 	addi	sp,sp,20
 1009128:	100b60c1 	jmpi	100b60c <_write_r>

0100912c <__sread>:
 100912c:	defffe04 	addi	sp,sp,-8
 1009130:	dc000015 	stw	r16,0(sp)
 1009134:	2821883a 	mov	r16,r5
 1009138:	2940038f 	ldh	r5,14(r5)
 100913c:	dfc00115 	stw	ra,4(sp)
 1009140:	100c5b00 	call	100c5b0 <_read_r>
 1009144:	1007883a 	mov	r3,r2
 1009148:	10000816 	blt	r2,zero,100916c <__sread+0x40>
 100914c:	80801417 	ldw	r2,80(r16)
 1009150:	10c5883a 	add	r2,r2,r3
 1009154:	80801415 	stw	r2,80(r16)
 1009158:	1805883a 	mov	r2,r3
 100915c:	dfc00117 	ldw	ra,4(sp)
 1009160:	dc000017 	ldw	r16,0(sp)
 1009164:	dec00204 	addi	sp,sp,8
 1009168:	f800283a 	ret
 100916c:	8080030b 	ldhu	r2,12(r16)
 1009170:	10bbffcc 	andi	r2,r2,61439
 1009174:	8080030d 	sth	r2,12(r16)
 1009178:	1805883a 	mov	r2,r3
 100917c:	dfc00117 	ldw	ra,4(sp)
 1009180:	dc000017 	ldw	r16,0(sp)
 1009184:	dec00204 	addi	sp,sp,8
 1009188:	f800283a 	ret

0100918c <strcmp>:
 100918c:	2144b03a 	or	r2,r4,r5
 1009190:	108000cc 	andi	r2,r2,3
 1009194:	10001d1e 	bne	r2,zero,100920c <strcmp+0x80>
 1009198:	200f883a 	mov	r7,r4
 100919c:	28800017 	ldw	r2,0(r5)
 10091a0:	21000017 	ldw	r4,0(r4)
 10091a4:	280d883a 	mov	r6,r5
 10091a8:	2080161e 	bne	r4,r2,1009204 <strcmp+0x78>
 10091ac:	023fbff4 	movhi	r8,65279
 10091b0:	423fbfc4 	addi	r8,r8,-257
 10091b4:	2207883a 	add	r3,r4,r8
 10091b8:	01602074 	movhi	r5,32897
 10091bc:	29602004 	addi	r5,r5,-32640
 10091c0:	1946703a 	and	r3,r3,r5
 10091c4:	0104303a 	nor	r2,zero,r4
 10091c8:	10c4703a 	and	r2,r2,r3
 10091cc:	10001c1e 	bne	r2,zero,1009240 <strcmp+0xb4>
 10091d0:	4013883a 	mov	r9,r8
 10091d4:	2811883a 	mov	r8,r5
 10091d8:	00000106 	br	10091e0 <strcmp+0x54>
 10091dc:	1800181e 	bne	r3,zero,1009240 <strcmp+0xb4>
 10091e0:	39c00104 	addi	r7,r7,4
 10091e4:	39000017 	ldw	r4,0(r7)
 10091e8:	31800104 	addi	r6,r6,4
 10091ec:	31400017 	ldw	r5,0(r6)
 10091f0:	2245883a 	add	r2,r4,r9
 10091f4:	1204703a 	and	r2,r2,r8
 10091f8:	0106303a 	nor	r3,zero,r4
 10091fc:	1886703a 	and	r3,r3,r2
 1009200:	217ff626 	beq	r4,r5,10091dc <strcmp+0x50>
 1009204:	3809883a 	mov	r4,r7
 1009208:	300b883a 	mov	r5,r6
 100920c:	20c00007 	ldb	r3,0(r4)
 1009210:	1800051e 	bne	r3,zero,1009228 <strcmp+0x9c>
 1009214:	00000606 	br	1009230 <strcmp+0xa4>
 1009218:	21000044 	addi	r4,r4,1
 100921c:	20c00007 	ldb	r3,0(r4)
 1009220:	29400044 	addi	r5,r5,1
 1009224:	18000226 	beq	r3,zero,1009230 <strcmp+0xa4>
 1009228:	28800007 	ldb	r2,0(r5)
 100922c:	18bffa26 	beq	r3,r2,1009218 <strcmp+0x8c>
 1009230:	20c00003 	ldbu	r3,0(r4)
 1009234:	28800003 	ldbu	r2,0(r5)
 1009238:	1885c83a 	sub	r2,r3,r2
 100923c:	f800283a 	ret
 1009240:	0005883a 	mov	r2,zero
 1009244:	f800283a 	ret

01009248 <match>:
 1009248:	21800017 	ldw	r6,0(r4)
 100924c:	01c01004 	movi	r7,64
 1009250:	02001684 	movi	r8,90
 1009254:	28800007 	ldb	r2,0(r5)
 1009258:	29400044 	addi	r5,r5,1
 100925c:	10000826 	beq	r2,zero,1009280 <match+0x38>
 1009260:	31800044 	addi	r6,r6,1
 1009264:	30c00007 	ldb	r3,0(r6)
 1009268:	38c0020e 	bge	r7,r3,1009274 <match+0x2c>
 100926c:	40c00116 	blt	r8,r3,1009274 <match+0x2c>
 1009270:	18c00804 	addi	r3,r3,32
 1009274:	18bff726 	beq	r3,r2,1009254 <match+0xc>
 1009278:	0005883a 	mov	r2,zero
 100927c:	f800283a 	ret
 1009280:	30800044 	addi	r2,r6,1
 1009284:	20800015 	stw	r2,0(r4)
 1009288:	00800044 	movi	r2,1
 100928c:	f800283a 	ret

01009290 <_strtod_r>:
 1009290:	deffde04 	addi	sp,sp,-136
 1009294:	df002015 	stw	fp,128(sp)
 1009298:	dd401d15 	stw	r21,116(sp)
 100929c:	dc401915 	stw	r17,100(sp)
 10092a0:	dfc02115 	stw	ra,132(sp)
 10092a4:	ddc01f15 	stw	r23,124(sp)
 10092a8:	dd801e15 	stw	r22,120(sp)
 10092ac:	dd001c15 	stw	r20,112(sp)
 10092b0:	dcc01b15 	stw	r19,108(sp)
 10092b4:	dc801a15 	stw	r18,104(sp)
 10092b8:	dc001815 	stw	r16,96(sp)
 10092bc:	2823883a 	mov	r17,r5
 10092c0:	202b883a 	mov	r21,r4
 10092c4:	d9801515 	stw	r6,84(sp)
 10092c8:	d8000915 	stw	zero,36(sp)
 10092cc:	d8000a15 	stw	zero,40(sp)
 10092d0:	d9400415 	stw	r5,16(sp)
 10092d4:	df000904 	addi	fp,sp,36
 10092d8:	da000417 	ldw	r8,16(sp)
 10092dc:	00800b44 	movi	r2,45
 10092e0:	40c00003 	ldbu	r3,0(r8)
 10092e4:	10c03536 	bltu	r2,r3,10093bc <_strtod_r+0x12c>
 10092e8:	18c5883a 	add	r2,r3,r3
 10092ec:	1085883a 	add	r2,r2,r2
 10092f0:	00c04074 	movhi	r3,257
 10092f4:	18e4c104 	addi	r3,r3,-27900
 10092f8:	10c5883a 	add	r2,r2,r3
 10092fc:	11000017 	ldw	r4,0(r2)
 1009300:	2000683a 	jmp	r4
 1009304:	010094f8 	rdprs	r4,zero,595
 1009308:	010093bc 	xorhi	r4,zero,590
 100930c:	010093bc 	xorhi	r4,zero,590
 1009310:	010093bc 	xorhi	r4,zero,590
 1009314:	010093bc 	xorhi	r4,zero,590
 1009318:	010093bc 	xorhi	r4,zero,590
 100931c:	010093bc 	xorhi	r4,zero,590
 1009320:	010093bc 	xorhi	r4,zero,590
 1009324:	010093bc 	xorhi	r4,zero,590
 1009328:	01009810 	cmplti	r4,zero,608
 100932c:	01009810 	cmplti	r4,zero,608
 1009330:	01009810 	cmplti	r4,zero,608
 1009334:	01009810 	cmplti	r4,zero,608
 1009338:	01009810 	cmplti	r4,zero,608
 100933c:	010093bc 	xorhi	r4,zero,590
 1009340:	010093bc 	xorhi	r4,zero,590
 1009344:	010093bc 	xorhi	r4,zero,590
 1009348:	010093bc 	xorhi	r4,zero,590
 100934c:	010093bc 	xorhi	r4,zero,590
 1009350:	010093bc 	xorhi	r4,zero,590
 1009354:	010093bc 	xorhi	r4,zero,590
 1009358:	010093bc 	xorhi	r4,zero,590
 100935c:	010093bc 	xorhi	r4,zero,590
 1009360:	010093bc 	xorhi	r4,zero,590
 1009364:	010093bc 	xorhi	r4,zero,590
 1009368:	010093bc 	xorhi	r4,zero,590
 100936c:	010093bc 	xorhi	r4,zero,590
 1009370:	010093bc 	xorhi	r4,zero,590
 1009374:	010093bc 	xorhi	r4,zero,590
 1009378:	010093bc 	xorhi	r4,zero,590
 100937c:	010093bc 	xorhi	r4,zero,590
 1009380:	010093bc 	xorhi	r4,zero,590
 1009384:	01009810 	cmplti	r4,zero,608
 1009388:	010093bc 	xorhi	r4,zero,590
 100938c:	010093bc 	xorhi	r4,zero,590
 1009390:	010093bc 	xorhi	r4,zero,590
 1009394:	010093bc 	xorhi	r4,zero,590
 1009398:	010093bc 	xorhi	r4,zero,590
 100939c:	010093bc 	xorhi	r4,zero,590
 10093a0:	010093bc 	xorhi	r4,zero,590
 10093a4:	010093bc 	xorhi	r4,zero,590
 10093a8:	010093bc 	xorhi	r4,zero,590
 10093ac:	010093bc 	xorhi	r4,zero,590
 10093b0:	010097f0 	cmpltui	r4,zero,607
 10093b4:	010093bc 	xorhi	r4,zero,590
 10093b8:	0100981c 	xori	r4,zero,608
 10093bc:	d8001115 	stw	zero,68(sp)
 10093c0:	40c00007 	ldb	r3,0(r8)
 10093c4:	00800c04 	movi	r2,48
 10093c8:	1880d026 	beq	r3,r2,100970c <_strtod_r+0x47c>
 10093cc:	001f883a 	mov	r15,zero
 10093d0:	41000007 	ldb	r4,0(r8)
 10093d4:	00c00bc4 	movi	r3,47
 10093d8:	402d883a 	mov	r22,r8
 10093dc:	1903470e 	bge	r3,r4,100a0fc <_strtod_r+0xe6c>
 10093e0:	00800e44 	movi	r2,57
 10093e4:	11034516 	blt	r2,r4,100a0fc <_strtod_r+0xe6c>
 10093e8:	180f883a 	mov	r7,r3
 10093ec:	1013883a 	mov	r9,r2
 10093f0:	4007883a 	mov	r3,r8
 10093f4:	000d883a 	mov	r6,zero
 10093f8:	0029883a 	mov	r20,zero
 10093fc:	0021883a 	mov	r16,zero
 1009400:	01400204 	movi	r5,8
 1009404:	028003c4 	movi	r10,15
 1009408:	29803116 	blt	r5,r6,10094d0 <_strtod_r+0x240>
 100940c:	a08002a4 	muli	r2,r20,10
 1009410:	1105883a 	add	r2,r2,r4
 1009414:	153ff404 	addi	r20,r2,-48
 1009418:	1a000044 	addi	r8,r3,1
 100941c:	da000415 	stw	r8,16(sp)
 1009420:	41000007 	ldb	r4,0(r8)
 1009424:	31800044 	addi	r6,r6,1
 1009428:	4007883a 	mov	r3,r8
 100942c:	3900010e 	bge	r7,r4,1009434 <_strtod_r+0x1a4>
 1009430:	493ff50e 	bge	r9,r4,1009408 <_strtod_r+0x178>
 1009434:	00800b84 	movi	r2,46
 1009438:	2080c126 	beq	r4,r2,1009740 <_strtod_r+0x4b0>
 100943c:	3027883a 	mov	r19,r6
 1009440:	0025883a 	mov	r18,zero
 1009444:	0015883a 	mov	r10,zero
 1009448:	000f883a 	mov	r7,zero
 100944c:	00801944 	movi	r2,101
 1009450:	20802426 	beq	r4,r2,10094e4 <_strtod_r+0x254>
 1009454:	00801144 	movi	r2,69
 1009458:	20802226 	beq	r4,r2,10094e4 <_strtod_r+0x254>
 100945c:	9816c03a 	cmpne	r11,r19,zero
 1009460:	000b883a 	mov	r5,zero
 1009464:	5800631e 	bne	r11,zero,10095f4 <_strtod_r+0x364>
 1009468:	3800c126 	beq	r7,zero,1009770 <_strtod_r+0x4e0>
 100946c:	d8c01517 	ldw	r3,84(sp)
 1009470:	18000226 	beq	r3,zero,100947c <_strtod_r+0x1ec>
 1009474:	d8800417 	ldw	r2,16(sp)
 1009478:	18800015 	stw	r2,0(r3)
 100947c:	d9001117 	ldw	r4,68(sp)
 1009480:	2005003a 	cmpeq	r2,r4,zero
 1009484:	10001f1e 	bne	r2,zero,1009504 <_strtod_r+0x274>
 1009488:	e0800017 	ldw	r2,0(fp)
 100948c:	e0c00117 	ldw	r3,4(fp)
 1009490:	1009883a 	mov	r4,r2
 1009494:	1960003c 	xorhi	r5,r3,32768
 1009498:	2005883a 	mov	r2,r4
 100949c:	2807883a 	mov	r3,r5
 10094a0:	dfc02117 	ldw	ra,132(sp)
 10094a4:	df002017 	ldw	fp,128(sp)
 10094a8:	ddc01f17 	ldw	r23,124(sp)
 10094ac:	dd801e17 	ldw	r22,120(sp)
 10094b0:	dd401d17 	ldw	r21,116(sp)
 10094b4:	dd001c17 	ldw	r20,112(sp)
 10094b8:	dcc01b17 	ldw	r19,108(sp)
 10094bc:	dc801a17 	ldw	r18,104(sp)
 10094c0:	dc401917 	ldw	r17,100(sp)
 10094c4:	dc001817 	ldw	r16,96(sp)
 10094c8:	dec02204 	addi	sp,sp,136
 10094cc:	f800283a 	ret
 10094d0:	51bfd116 	blt	r10,r6,1009418 <_strtod_r+0x188>
 10094d4:	808002a4 	muli	r2,r16,10
 10094d8:	1105883a 	add	r2,r2,r4
 10094dc:	143ff404 	addi	r16,r2,-48
 10094e0:	003fcd06 	br	1009418 <_strtod_r+0x188>
 10094e4:	9816c03a 	cmpne	r11,r19,zero
 10094e8:	5800091e 	bne	r11,zero,1009510 <_strtod_r+0x280>
 10094ec:	3800081e 	bne	r7,zero,1009510 <_strtod_r+0x280>
 10094f0:	7805003a 	cmpeq	r2,r15,zero
 10094f4:	10000626 	beq	r2,zero,1009510 <_strtod_r+0x280>
 10094f8:	d8001115 	stw	zero,68(sp)
 10094fc:	dc400415 	stw	r17,16(sp)
 1009500:	003fda06 	br	100946c <_strtod_r+0x1dc>
 1009504:	e1000017 	ldw	r4,0(fp)
 1009508:	e1400117 	ldw	r5,4(fp)
 100950c:	003fe206 	br	1009498 <_strtod_r+0x208>
 1009510:	dc400417 	ldw	r17,16(sp)
 1009514:	00800ac4 	movi	r2,43
 1009518:	8a000044 	addi	r8,r17,1
 100951c:	da000415 	stw	r8,16(sp)
 1009520:	88c00047 	ldb	r3,1(r17)
 1009524:	4009883a 	mov	r4,r8
 1009528:	1880bf26 	beq	r3,r2,1009828 <_strtod_r+0x598>
 100952c:	00800b44 	movi	r2,45
 1009530:	18834526 	beq	r3,r2,100a248 <_strtod_r+0xfb8>
 1009534:	1809883a 	mov	r4,r3
 1009538:	20fff404 	addi	r3,r4,-48
 100953c:	00800244 	movi	r2,9
 1009540:	001d883a 	mov	r14,zero
 1009544:	10c0bf36 	bltu	r2,r3,1009844 <_strtod_r+0x5b4>
 1009548:	00800c04 	movi	r2,48
 100954c:	2080061e 	bne	r4,r2,1009568 <_strtod_r+0x2d8>
 1009550:	da000417 	ldw	r8,16(sp)
 1009554:	2005883a 	mov	r2,r4
 1009558:	42000044 	addi	r8,r8,1
 100955c:	da000415 	stw	r8,16(sp)
 1009560:	41000007 	ldb	r4,0(r8)
 1009564:	20bffc26 	beq	r4,r2,1009558 <_strtod_r+0x2c8>
 1009568:	20fff3c4 	addi	r3,r4,-49
 100956c:	00800204 	movi	r2,8
 1009570:	10ffbb36 	bltu	r2,r3,1009460 <_strtod_r+0x1d0>
 1009574:	da000417 	ldw	r8,16(sp)
 1009578:	227ff404 	addi	r9,r4,-48
 100957c:	03000bc4 	movi	r12,47
 1009580:	4007883a 	mov	r3,r8
 1009584:	42000044 	addi	r8,r8,1
 1009588:	da000415 	stw	r8,16(sp)
 100958c:	41000007 	ldb	r4,0(r8)
 1009590:	61000d0e 	bge	r12,r4,10095c8 <_strtod_r+0x338>
 1009594:	00800e44 	movi	r2,57
 1009598:	11000b16 	blt	r2,r4,10095c8 <_strtod_r+0x338>
 100959c:	601b883a 	mov	r13,r12
 10095a0:	1019883a 	mov	r12,r2
 10095a4:	00000106 	br	10095ac <_strtod_r+0x31c>
 10095a8:	61000716 	blt	r12,r4,10095c8 <_strtod_r+0x338>
 10095ac:	488002a4 	muli	r2,r9,10
 10095b0:	42000044 	addi	r8,r8,1
 10095b4:	da000415 	stw	r8,16(sp)
 10095b8:	2085883a 	add	r2,r4,r2
 10095bc:	41000007 	ldb	r4,0(r8)
 10095c0:	127ff404 	addi	r9,r2,-48
 10095c4:	693ff816 	blt	r13,r4,10095a8 <_strtod_r+0x318>
 10095c8:	40c7c83a 	sub	r3,r8,r3
 10095cc:	00800204 	movi	r2,8
 10095d0:	10c2e416 	blt	r2,r3,100a164 <_strtod_r+0xed4>
 10095d4:	009387c4 	movi	r2,19999
 10095d8:	480b883a 	mov	r5,r9
 10095dc:	1240010e 	bge	r2,r9,10095e4 <_strtod_r+0x354>
 10095e0:	100b883a 	mov	r5,r2
 10095e4:	7005003a 	cmpeq	r2,r14,zero
 10095e8:	103f9e1e 	bne	r2,zero,1009464 <_strtod_r+0x1d4>
 10095ec:	014bc83a 	sub	r5,zero,r5
 10095f0:	583f9d26 	beq	r11,zero,1009468 <_strtod_r+0x1d8>
 10095f4:	2a8bc83a 	sub	r5,r5,r10
 10095f8:	d9400f15 	stw	r5,60(sp)
 10095fc:	30007a1e 	bne	r6,zero,10097e8 <_strtod_r+0x558>
 1009600:	dcc01215 	stw	r19,72(sp)
 1009604:	00800404 	movi	r2,16
 1009608:	9825883a 	mov	r18,r19
 100960c:	14c0010e 	bge	r2,r19,1009614 <_strtod_r+0x384>
 1009610:	1025883a 	mov	r18,r2
 1009614:	a009883a 	mov	r4,r20
 1009618:	100e4ec0 	call	100e4ec <__floatunsidf>
 100961c:	100f883a 	mov	r7,r2
 1009620:	e0800015 	stw	r2,0(fp)
 1009624:	00800244 	movi	r2,9
 1009628:	e0c00115 	stw	r3,4(fp)
 100962c:	1480160e 	bge	r2,r18,1009688 <_strtod_r+0x3f8>
 1009630:	900c90fa 	slli	r6,r18,3
 1009634:	010040b4 	movhi	r4,258
 1009638:	21215004 	addi	r4,r4,-31424
 100963c:	180b883a 	mov	r5,r3
 1009640:	310d883a 	add	r6,r6,r4
 1009644:	30ffef17 	ldw	r3,-68(r6)
 1009648:	30bfee17 	ldw	r2,-72(r6)
 100964c:	3809883a 	mov	r4,r7
 1009650:	180f883a 	mov	r7,r3
 1009654:	100d883a 	mov	r6,r2
 1009658:	100d95c0 	call	100d95c <__muldf3>
 100965c:	8009883a 	mov	r4,r16
 1009660:	1823883a 	mov	r17,r3
 1009664:	1021883a 	mov	r16,r2
 1009668:	100e4ec0 	call	100e4ec <__floatunsidf>
 100966c:	880b883a 	mov	r5,r17
 1009670:	180f883a 	mov	r7,r3
 1009674:	8009883a 	mov	r4,r16
 1009678:	100d883a 	mov	r6,r2
 100967c:	100d8e80 	call	100d8e8 <__adddf3>
 1009680:	e0c00115 	stw	r3,4(fp)
 1009684:	e0800015 	stw	r2,0(fp)
 1009688:	010003c4 	movi	r4,15
 100968c:	24c09816 	blt	r4,r19,10098f0 <_strtod_r+0x660>
 1009690:	d9800f17 	ldw	r6,60(sp)
 1009694:	303f7526 	beq	r6,zero,100946c <_strtod_r+0x1dc>
 1009698:	0183be0e 	bge	zero,r6,100a594 <_strtod_r+0x1304>
 100969c:	00800584 	movi	r2,22
 10096a0:	1182b20e 	bge	r2,r6,100a16c <_strtod_r+0xedc>
 10096a4:	d8c00f17 	ldw	r3,60(sp)
 10096a8:	24e3c83a 	sub	r17,r4,r19
 10096ac:	88800584 	addi	r2,r17,22
 10096b0:	10c08f16 	blt	r2,r3,10098f0 <_strtod_r+0x660>
 10096b4:	880890fa 	slli	r4,r17,3
 10096b8:	040040b4 	movhi	r16,258
 10096bc:	84215004 	addi	r16,r16,-31424
 10096c0:	e0800017 	ldw	r2,0(fp)
 10096c4:	2409883a 	add	r4,r4,r16
 10096c8:	22000017 	ldw	r8,0(r4)
 10096cc:	22400117 	ldw	r9,4(r4)
 10096d0:	e0c00117 	ldw	r3,4(fp)
 10096d4:	1009883a 	mov	r4,r2
 10096d8:	480f883a 	mov	r7,r9
 10096dc:	180b883a 	mov	r5,r3
 10096e0:	400d883a 	mov	r6,r8
 10096e4:	100d95c0 	call	100d95c <__muldf3>
 10096e8:	d9000f17 	ldw	r4,60(sp)
 10096ec:	180b883a 	mov	r5,r3
 10096f0:	2455c83a 	sub	r10,r4,r17
 10096f4:	501490fa 	slli	r10,r10,3
 10096f8:	1009883a 	mov	r4,r2
 10096fc:	5415883a 	add	r10,r10,r16
 1009700:	52000017 	ldw	r8,0(r10)
 1009704:	52400117 	ldw	r9,4(r10)
 1009708:	0002a206 	br	100a194 <_strtod_r+0xf04>
 100970c:	40c00047 	ldb	r3,1(r8)
 1009710:	00801604 	movi	r2,88
 1009714:	18804e26 	beq	r3,r2,1009850 <_strtod_r+0x5c0>
 1009718:	00801e04 	movi	r2,120
 100971c:	18804c26 	beq	r3,r2,1009850 <_strtod_r+0x5c0>
 1009720:	42000044 	addi	r8,r8,1
 1009724:	da000415 	stw	r8,16(sp)
 1009728:	40c00007 	ldb	r3,0(r8)
 100972c:	00800c04 	movi	r2,48
 1009730:	18bffb26 	beq	r3,r2,1009720 <_strtod_r+0x490>
 1009734:	183f4d26 	beq	r3,zero,100946c <_strtod_r+0x1dc>
 1009738:	03c00044 	movi	r15,1
 100973c:	003f2406 	br	10093d0 <_strtod_r+0x140>
 1009740:	42000044 	addi	r8,r8,1
 1009744:	da000415 	stw	r8,16(sp)
 1009748:	19000047 	ldb	r4,1(r3)
 100974c:	3000b726 	beq	r6,zero,1009a2c <_strtod_r+0x79c>
 1009750:	3027883a 	mov	r19,r6
 1009754:	0015883a 	mov	r10,zero
 1009758:	000f883a 	mov	r7,zero
 100975c:	227ff404 	addi	r9,r4,-48
 1009760:	00800244 	movi	r2,9
 1009764:	1242592e 	bgeu	r2,r9,100a0cc <_strtod_r+0xe3c>
 1009768:	04800044 	movi	r18,1
 100976c:	003f3706 	br	100944c <_strtod_r+0x1bc>
 1009770:	7804c03a 	cmpne	r2,r15,zero
 1009774:	103f3d1e 	bne	r2,zero,100946c <_strtod_r+0x1dc>
 1009778:	9004c03a 	cmpne	r2,r18,zero
 100977c:	103f5e1e 	bne	r2,zero,10094f8 <_strtod_r+0x268>
 1009780:	00801384 	movi	r2,78
 1009784:	2083a226 	beq	r4,r2,100a610 <_strtod_r+0x1380>
 1009788:	11039d16 	blt	r2,r4,100a600 <_strtod_r+0x1370>
 100978c:	00801244 	movi	r2,73
 1009790:	20bf591e 	bne	r4,r2,10094f8 <_strtod_r+0x268>
 1009794:	dc000404 	addi	r16,sp,16
 1009798:	8009883a 	mov	r4,r16
 100979c:	014040b4 	movhi	r5,258
 10097a0:	29619904 	addi	r5,r5,-31132
 10097a4:	10092480 	call	1009248 <match>
 10097a8:	103f5326 	beq	r2,zero,10094f8 <_strtod_r+0x268>
 10097ac:	d8800417 	ldw	r2,16(sp)
 10097b0:	8009883a 	mov	r4,r16
 10097b4:	014040b4 	movhi	r5,258
 10097b8:	29619a04 	addi	r5,r5,-31128
 10097bc:	123fffc4 	addi	r8,r2,-1
 10097c0:	da000415 	stw	r8,16(sp)
 10097c4:	10092480 	call	1009248 <match>
 10097c8:	1000031e 	bne	r2,zero,10097d8 <_strtod_r+0x548>
 10097cc:	d8800417 	ldw	r2,16(sp)
 10097d0:	12000044 	addi	r8,r2,1
 10097d4:	da000415 	stw	r8,16(sp)
 10097d8:	019ffc34 	movhi	r6,32752
 10097dc:	e1800115 	stw	r6,4(fp)
 10097e0:	e0000015 	stw	zero,0(fp)
 10097e4:	003f2106 	br	100946c <_strtod_r+0x1dc>
 10097e8:	d9801215 	stw	r6,72(sp)
 10097ec:	003f8506 	br	1009604 <_strtod_r+0x374>
 10097f0:	d8001115 	stw	zero,68(sp)
 10097f4:	42000044 	addi	r8,r8,1
 10097f8:	da000415 	stw	r8,16(sp)
 10097fc:	40800007 	ldb	r2,0(r8)
 1009800:	103eef1e 	bne	r2,zero,10093c0 <_strtod_r+0x130>
 1009804:	d8001115 	stw	zero,68(sp)
 1009808:	dc400415 	stw	r17,16(sp)
 100980c:	003f1706 	br	100946c <_strtod_r+0x1dc>
 1009810:	42000044 	addi	r8,r8,1
 1009814:	da000415 	stw	r8,16(sp)
 1009818:	003eaf06 	br	10092d8 <_strtod_r+0x48>
 100981c:	00800044 	movi	r2,1
 1009820:	d8801115 	stw	r2,68(sp)
 1009824:	003ff306 	br	10097f4 <_strtod_r+0x564>
 1009828:	001d883a 	mov	r14,zero
 100982c:	42000044 	addi	r8,r8,1
 1009830:	da000415 	stw	r8,16(sp)
 1009834:	21000047 	ldb	r4,1(r4)
 1009838:	00800244 	movi	r2,9
 100983c:	20fff404 	addi	r3,r4,-48
 1009840:	10ff412e 	bgeu	r2,r3,1009548 <_strtod_r+0x2b8>
 1009844:	000b883a 	mov	r5,zero
 1009848:	dc400415 	stw	r17,16(sp)
 100984c:	003f0506 	br	1009464 <_strtod_r+0x1d4>
 1009850:	d8c01117 	ldw	r3,68(sp)
 1009854:	048040b4 	movhi	r18,258
 1009858:	94a44f04 	addi	r18,r18,-28356
 100985c:	d8800504 	addi	r2,sp,20
 1009860:	a809883a 	mov	r4,r21
 1009864:	d9400404 	addi	r5,sp,16
 1009868:	900d883a 	mov	r6,r18
 100986c:	d9c00604 	addi	r7,sp,24
 1009870:	d8800015 	stw	r2,0(sp)
 1009874:	d8c00115 	stw	r3,4(sp)
 1009878:	100ba7c0 	call	100ba7c <__gethex>
 100987c:	140001cc 	andi	r16,r2,7
 1009880:	1027883a 	mov	r19,r2
 1009884:	803ef926 	beq	r16,zero,100946c <_strtod_r+0x1dc>
 1009888:	05000184 	movi	r20,6
 100988c:	853f1a26 	beq	r16,r20,10094f8 <_strtod_r+0x268>
 1009890:	d9800517 	ldw	r6,20(sp)
 1009894:	30000626 	beq	r6,zero,10098b0 <_strtod_r+0x620>
 1009898:	91400017 	ldw	r5,0(r18)
 100989c:	d9000d04 	addi	r4,sp,52
 10098a0:	1007a9c0 	call	1007a9c <__copybits>
 10098a4:	d9400517 	ldw	r5,20(sp)
 10098a8:	a809883a 	mov	r4,r21
 10098ac:	10075fc0 	call	10075fc <_Bfree>
 10098b0:	d9400617 	ldw	r5,24(sp)
 10098b4:	a4024136 	bltu	r20,r16,100a1bc <_strtod_r+0xf2c>
 10098b8:	8405883a 	add	r2,r16,r16
 10098bc:	1085883a 	add	r2,r2,r2
 10098c0:	00c04074 	movhi	r3,257
 10098c4:	18e63504 	addi	r3,r3,-26412
 10098c8:	10c5883a 	add	r2,r2,r3
 10098cc:	11000017 	ldw	r4,0(r2)
 10098d0:	2000683a 	jmp	r4
 10098d4:	0100a1fc 	xorhi	r4,zero,647
 10098d8:	0100a208 	cmpgei	r4,zero,648
 10098dc:	0100a1ac 	andhi	r4,zero,646
 10098e0:	0100a1d4 	movui	r4,647
 10098e4:	0100a1e4 	muli	r4,zero,647
 10098e8:	0100a208 	cmpgei	r4,zero,648
 10098ec:	0100a1fc 	xorhi	r4,zero,647
 10098f0:	d8c00f17 	ldw	r3,60(sp)
 10098f4:	9c85c83a 	sub	r2,r19,r18
 10098f8:	18a1883a 	add	r16,r3,r2
 10098fc:	0402d00e 	bge	zero,r16,100a440 <_strtod_r+0x11b0>
 1009900:	814003cc 	andi	r5,r16,15
 1009904:	28000f26 	beq	r5,zero,1009944 <_strtod_r+0x6b4>
 1009908:	280a90fa 	slli	r5,r5,3
 100990c:	010040b4 	movhi	r4,258
 1009910:	21215004 	addi	r4,r4,-31424
 1009914:	e0800017 	ldw	r2,0(fp)
 1009918:	290b883a 	add	r5,r5,r4
 100991c:	2a000017 	ldw	r8,0(r5)
 1009920:	e0c00117 	ldw	r3,4(fp)
 1009924:	2a400117 	ldw	r9,4(r5)
 1009928:	1009883a 	mov	r4,r2
 100992c:	180b883a 	mov	r5,r3
 1009930:	480f883a 	mov	r7,r9
 1009934:	400d883a 	mov	r6,r8
 1009938:	100d95c0 	call	100d95c <__muldf3>
 100993c:	e0c00115 	stw	r3,4(fp)
 1009940:	e0800015 	stw	r2,0(fp)
 1009944:	00bffc04 	movi	r2,-16
 1009948:	808c703a 	and	r6,r16,r2
 100994c:	30005b26 	beq	r6,zero,1009abc <_strtod_r+0x82c>
 1009950:	00804d04 	movi	r2,308
 1009954:	1181fd16 	blt	r2,r6,100a14c <_strtod_r+0xebc>
 1009958:	3021d13a 	srai	r16,r6,4
 100995c:	00800044 	movi	r2,1
 1009960:	1403610e 	bge	r2,r16,100a6e8 <_strtod_r+0x1458>
 1009964:	102f883a 	mov	r23,r2
 1009968:	0025883a 	mov	r18,zero
 100996c:	044040b4 	movhi	r17,258
 1009970:	8c618204 	addi	r17,r17,-31224
 1009974:	8080004c 	andi	r2,r16,1
 1009978:	1005003a 	cmpeq	r2,r2,zero
 100997c:	1000091e 	bne	r2,zero,10099a4 <_strtod_r+0x714>
 1009980:	e0800017 	ldw	r2,0(fp)
 1009984:	e0c00117 	ldw	r3,4(fp)
 1009988:	89800017 	ldw	r6,0(r17)
 100998c:	89c00117 	ldw	r7,4(r17)
 1009990:	180b883a 	mov	r5,r3
 1009994:	1009883a 	mov	r4,r2
 1009998:	100d95c0 	call	100d95c <__muldf3>
 100999c:	e0c00115 	stw	r3,4(fp)
 10099a0:	e0800015 	stw	r2,0(fp)
 10099a4:	8021d07a 	srai	r16,r16,1
 10099a8:	94800044 	addi	r18,r18,1
 10099ac:	8c400204 	addi	r17,r17,8
 10099b0:	bc3ff016 	blt	r23,r16,1009974 <_strtod_r+0x6e4>
 10099b4:	900e90fa 	slli	r7,r18,3
 10099b8:	018040b4 	movhi	r6,258
 10099bc:	31a18204 	addi	r6,r6,-31224
 10099c0:	e2000117 	ldw	r8,4(fp)
 10099c4:	398f883a 	add	r7,r7,r6
 10099c8:	38800017 	ldw	r2,0(r7)
 10099cc:	38c00117 	ldw	r3,4(r7)
 10099d0:	e1000017 	ldw	r4,0(fp)
 10099d4:	01bf2c34 	movhi	r6,64688
 10099d8:	418d883a 	add	r6,r8,r6
 10099dc:	300b883a 	mov	r5,r6
 10099e0:	180f883a 	mov	r7,r3
 10099e4:	100d883a 	mov	r6,r2
 10099e8:	100d95c0 	call	100d95c <__muldf3>
 10099ec:	1009883a 	mov	r4,r2
 10099f0:	180b883a 	mov	r5,r3
 10099f4:	199ffc2c 	andhi	r6,r3,32752
 10099f8:	009f2834 	movhi	r2,31904
 10099fc:	e1000015 	stw	r4,0(fp)
 1009a00:	e1400115 	stw	r5,4(fp)
 1009a04:	1181d136 	bltu	r2,r6,100a14c <_strtod_r+0xebc>
 1009a08:	009f2434 	movhi	r2,31888
 1009a0c:	1183202e 	bgeu	r2,r6,100a690 <_strtod_r+0x1400>
 1009a10:	d8001415 	stw	zero,80(sp)
 1009a14:	019ffc34 	movhi	r6,32752
 1009a18:	31bfffc4 	addi	r6,r6,-1
 1009a1c:	01ffffc4 	movi	r7,-1
 1009a20:	e1800115 	stw	r6,4(fp)
 1009a24:	e1c00015 	stw	r7,0(fp)
 1009a28:	00002506 	br	1009ac0 <_strtod_r+0x830>
 1009a2c:	00800c04 	movi	r2,48
 1009a30:	2083151e 	bne	r4,r2,100a688 <_strtod_r+0x13f8>
 1009a34:	2005883a 	mov	r2,r4
 1009a38:	000f883a 	mov	r7,zero
 1009a3c:	42000044 	addi	r8,r8,1
 1009a40:	da000415 	stw	r8,16(sp)
 1009a44:	41000007 	ldb	r4,0(r8)
 1009a48:	39c00044 	addi	r7,r7,1
 1009a4c:	20bffb26 	beq	r4,r2,1009a3c <_strtod_r+0x7ac>
 1009a50:	20fff3c4 	addi	r3,r4,-49
 1009a54:	00800204 	movi	r2,8
 1009a58:	10c1b836 	bltu	r2,r3,100a13c <_strtod_r+0xeac>
 1009a5c:	dd800417 	ldw	r22,16(sp)
 1009a60:	3815883a 	mov	r10,r7
 1009a64:	227ff404 	addi	r9,r4,-48
 1009a68:	b011883a 	mov	r8,r22
 1009a6c:	0027883a 	mov	r19,zero
 1009a70:	01c00044 	movi	r7,1
 1009a74:	4801fe26 	beq	r9,zero,100a270 <_strtod_r+0xfe0>
 1009a78:	00800044 	movi	r2,1
 1009a7c:	51d5883a 	add	r10,r10,r7
 1009a80:	11c31f0e 	bge	r2,r7,100a700 <_strtod_r+0x1470>
 1009a84:	1009883a 	mov	r4,r2
 1009a88:	9807883a 	mov	r3,r19
 1009a8c:	02c00204 	movi	r11,8
 1009a90:	03000404 	movi	r12,16
 1009a94:	00000306 	br	1009aa4 <_strtod_r+0x814>
 1009a98:	a50002a4 	muli	r20,r20,10
 1009a9c:	21000044 	addi	r4,r4,1
 1009aa0:	21c1eb26 	beq	r4,r7,100a250 <_strtod_r+0xfc0>
 1009aa4:	18c00044 	addi	r3,r3,1
 1009aa8:	18bfffc4 	addi	r2,r3,-1
 1009aac:	58bffa0e 	bge	r11,r2,1009a98 <_strtod_r+0x808>
 1009ab0:	60fffa16 	blt	r12,r3,1009a9c <_strtod_r+0x80c>
 1009ab4:	840002a4 	muli	r16,r16,10
 1009ab8:	003ff806 	br	1009a9c <_strtod_r+0x80c>
 1009abc:	d8001415 	stw	zero,80(sp)
 1009ac0:	d9801217 	ldw	r6,72(sp)
 1009ac4:	a809883a 	mov	r4,r21
 1009ac8:	b00b883a 	mov	r5,r22
 1009acc:	980f883a 	mov	r7,r19
 1009ad0:	dd000015 	stw	r20,0(sp)
 1009ad4:	10084d00 	call	10084d0 <__s2b>
 1009ad8:	d9800f17 	ldw	r6,60(sp)
 1009adc:	11000304 	addi	r4,r2,12
 1009ae0:	d8801015 	stw	r2,64(sp)
 1009ae4:	300c803a 	cmplt	r6,r6,zero
 1009ae8:	d9001715 	stw	r4,92(sp)
 1009aec:	d9801615 	stw	r6,88(sp)
 1009af0:	d8801017 	ldw	r2,64(sp)
 1009af4:	a809883a 	mov	r4,r21
 1009af8:	11400117 	ldw	r5,4(r2)
 1009afc:	1007b7c0 	call	1007b7c <_Balloc>
 1009b00:	d8c01017 	ldw	r3,64(sp)
 1009b04:	d9401717 	ldw	r5,92(sp)
 1009b08:	11000304 	addi	r4,r2,12
 1009b0c:	19800417 	ldw	r6,16(r3)
 1009b10:	102f883a 	mov	r23,r2
 1009b14:	318d883a 	add	r6,r6,r6
 1009b18:	318d883a 	add	r6,r6,r6
 1009b1c:	31800204 	addi	r6,r6,8
 1009b20:	10073e40 	call	10073e4 <memcpy>
 1009b24:	e2000017 	ldw	r8,0(fp)
 1009b28:	e2400117 	ldw	r9,4(fp)
 1009b2c:	d9800304 	addi	r6,sp,12
 1009b30:	400b883a 	mov	r5,r8
 1009b34:	a809883a 	mov	r4,r21
 1009b38:	d9c00204 	addi	r7,sp,8
 1009b3c:	d9800015 	stw	r6,0(sp)
 1009b40:	480d883a 	mov	r6,r9
 1009b44:	1007c380 	call	1007c38 <__d2b>
 1009b48:	a809883a 	mov	r4,r21
 1009b4c:	01400044 	movi	r5,1
 1009b50:	d8800515 	stw	r2,20(sp)
 1009b54:	10082740 	call	1008274 <__i2b>
 1009b58:	102d883a 	mov	r22,r2
 1009b5c:	d8801617 	ldw	r2,88(sp)
 1009b60:	1001051e 	bne	r2,zero,1009f78 <_strtod_r+0xce8>
 1009b64:	dd000f17 	ldw	r20,60(sp)
 1009b68:	000f883a 	mov	r7,zero
 1009b6c:	0013883a 	mov	r9,zero
 1009b70:	a011883a 	mov	r8,r20
 1009b74:	d8800217 	ldw	r2,8(sp)
 1009b78:	1000fd16 	blt	r2,zero,1009f70 <_strtod_r+0xce0>
 1009b7c:	388f883a 	add	r7,r7,r2
 1009b80:	d9801417 	ldw	r6,80(sp)
 1009b84:	d9400317 	ldw	r5,12(sp)
 1009b88:	00ff0084 	movi	r3,-1022
 1009b8c:	1189c83a 	sub	r4,r2,r6
 1009b90:	2145883a 	add	r2,r4,r5
 1009b94:	10bfffc4 	addi	r2,r2,-1
 1009b98:	10c09f0e 	bge	r2,r3,1009e18 <_strtod_r+0xb88>
 1009b9c:	21810cc4 	addi	r6,r4,1075
 1009ba0:	d8c01417 	ldw	r3,80(sp)
 1009ba4:	4185883a 	add	r2,r8,r6
 1009ba8:	39a1883a 	add	r16,r7,r6
 1009bac:	18a5883a 	add	r18,r3,r2
 1009bb0:	3807883a 	mov	r3,r7
 1009bb4:	81c0010e 	bge	r16,r7,1009bbc <_strtod_r+0x92c>
 1009bb8:	8007883a 	mov	r3,r16
 1009bbc:	9005883a 	mov	r2,r18
 1009bc0:	1c80010e 	bge	r3,r18,1009bc8 <_strtod_r+0x938>
 1009bc4:	1805883a 	mov	r2,r3
 1009bc8:	0080e70e 	bge	zero,r2,1009f68 <_strtod_r+0xcd8>
 1009bcc:	38a7c83a 	sub	r19,r7,r2
 1009bd0:	80a1c83a 	sub	r16,r16,r2
 1009bd4:	90a5c83a 	sub	r18,r18,r2
 1009bd8:	02400e0e 	bge	zero,r9,1009c14 <_strtod_r+0x984>
 1009bdc:	480d883a 	mov	r6,r9
 1009be0:	b00b883a 	mov	r5,r22
 1009be4:	a809883a 	mov	r4,r21
 1009be8:	10083b00 	call	10083b0 <__pow5mult>
 1009bec:	d9800517 	ldw	r6,20(sp)
 1009bf0:	a809883a 	mov	r4,r21
 1009bf4:	100b883a 	mov	r5,r2
 1009bf8:	102d883a 	mov	r22,r2
 1009bfc:	100808c0 	call	100808c <__multiply>
 1009c00:	d9400517 	ldw	r5,20(sp)
 1009c04:	1023883a 	mov	r17,r2
 1009c08:	a809883a 	mov	r4,r21
 1009c0c:	10075fc0 	call	10075fc <_Bfree>
 1009c10:	dc400515 	stw	r17,20(sp)
 1009c14:	0400050e 	bge	zero,r16,1009c2c <_strtod_r+0x99c>
 1009c18:	d9400517 	ldw	r5,20(sp)
 1009c1c:	800d883a 	mov	r6,r16
 1009c20:	a809883a 	mov	r4,r21
 1009c24:	1007f400 	call	1007f40 <__lshift>
 1009c28:	d8800515 	stw	r2,20(sp)
 1009c2c:	a000741e 	bne	r20,zero,1009e00 <_strtod_r+0xb70>
 1009c30:	0480050e 	bge	zero,r18,1009c48 <_strtod_r+0x9b8>
 1009c34:	b80b883a 	mov	r5,r23
 1009c38:	900d883a 	mov	r6,r18
 1009c3c:	a809883a 	mov	r4,r21
 1009c40:	1007f400 	call	1007f40 <__lshift>
 1009c44:	102f883a 	mov	r23,r2
 1009c48:	04c0050e 	bge	zero,r19,1009c60 <_strtod_r+0x9d0>
 1009c4c:	b00b883a 	mov	r5,r22
 1009c50:	980d883a 	mov	r6,r19
 1009c54:	a809883a 	mov	r4,r21
 1009c58:	1007f400 	call	1007f40 <__lshift>
 1009c5c:	102d883a 	mov	r22,r2
 1009c60:	d9400517 	ldw	r5,20(sp)
 1009c64:	a809883a 	mov	r4,r21
 1009c68:	b80d883a 	mov	r6,r23
 1009c6c:	1007db40 	call	1007db4 <__mdiff>
 1009c70:	11000317 	ldw	r4,12(r2)
 1009c74:	b00b883a 	mov	r5,r22
 1009c78:	10000315 	stw	zero,12(r2)
 1009c7c:	d9001315 	stw	r4,76(sp)
 1009c80:	1009883a 	mov	r4,r2
 1009c84:	1029883a 	mov	r20,r2
 1009c88:	10077580 	call	1007758 <__mcmp>
 1009c8c:	10017c16 	blt	r2,zero,100a280 <_strtod_r+0xff0>
 1009c90:	1001af26 	beq	r2,zero,100a350 <_strtod_r+0x10c0>
 1009c94:	a009883a 	mov	r4,r20
 1009c98:	b00b883a 	mov	r5,r22
 1009c9c:	10079580 	call	1007958 <__ratio>
 1009ca0:	0011883a 	mov	r8,zero
 1009ca4:	02500034 	movhi	r9,16384
 1009ca8:	480f883a 	mov	r7,r9
 1009cac:	1009883a 	mov	r4,r2
 1009cb0:	180b883a 	mov	r5,r3
 1009cb4:	400d883a 	mov	r6,r8
 1009cb8:	1021883a 	mov	r16,r2
 1009cbc:	1823883a 	mov	r17,r3
 1009cc0:	100e2200 	call	100e220 <__ledf2>
 1009cc4:	00805716 	blt	zero,r2,1009e24 <_strtod_r+0xb94>
 1009cc8:	d9801317 	ldw	r6,76(sp)
 1009ccc:	3025003a 	cmpeq	r18,r6,zero
 1009cd0:	90008b1e 	bne	r18,zero,1009f00 <_strtod_r+0xc70>
 1009cd4:	008ffc34 	movhi	r2,16368
 1009cd8:	0021883a 	mov	r16,zero
 1009cdc:	1023883a 	mov	r17,r2
 1009ce0:	d8000715 	stw	zero,28(sp)
 1009ce4:	d8800815 	stw	r2,32(sp)
 1009ce8:	e1c00117 	ldw	r7,4(fp)
 1009cec:	009ff834 	movhi	r2,32736
 1009cf0:	3cdffc2c 	andhi	r19,r7,32752
 1009cf4:	98805e26 	beq	r19,r2,1009e70 <_strtod_r+0xbe0>
 1009cf8:	d8801417 	ldw	r2,80(sp)
 1009cfc:	10001b26 	beq	r2,zero,1009d6c <_strtod_r+0xadc>
 1009d00:	0081a834 	movhi	r2,1696
 1009d04:	14c01936 	bltu	r2,r19,1009d6c <_strtod_r+0xadc>
 1009d08:	00bff034 	movhi	r2,65472
 1009d0c:	00d07834 	movhi	r3,16864
 1009d10:	18ffffc4 	addi	r3,r3,-1
 1009d14:	180f883a 	mov	r7,r3
 1009d18:	8009883a 	mov	r4,r16
 1009d1c:	880b883a 	mov	r5,r17
 1009d20:	100d883a 	mov	r6,r2
 1009d24:	100e2200 	call	100e220 <__ledf2>
 1009d28:	00800b16 	blt	zero,r2,1009d58 <_strtod_r+0xac8>
 1009d2c:	880b883a 	mov	r5,r17
 1009d30:	8009883a 	mov	r4,r16
 1009d34:	100c6c00 	call	100c6c0 <__fixunsdfsi>
 1009d38:	1000df1e 	bne	r2,zero,100a0b8 <_strtod_r+0xe28>
 1009d3c:	0021883a 	mov	r16,zero
 1009d40:	044ffc34 	movhi	r17,16368
 1009d44:	9000d91e 	bne	r18,zero,100a0ac <_strtod_r+0xe1c>
 1009d48:	8005883a 	mov	r2,r16
 1009d4c:	8807883a 	mov	r3,r17
 1009d50:	d8c00815 	stw	r3,32(sp)
 1009d54:	d8800715 	stw	r2,28(sp)
 1009d58:	d8800817 	ldw	r2,32(sp)
 1009d5c:	00c1ac34 	movhi	r3,1712
 1009d60:	14c5c83a 	sub	r2,r2,r19
 1009d64:	10c5883a 	add	r2,r2,r3
 1009d68:	d8800815 	stw	r2,32(sp)
 1009d6c:	e0800017 	ldw	r2,0(fp)
 1009d70:	e0c00117 	ldw	r3,4(fp)
 1009d74:	1009883a 	mov	r4,r2
 1009d78:	180b883a 	mov	r5,r3
 1009d7c:	10077b80 	call	10077b8 <__ulp>
 1009d80:	d9800717 	ldw	r6,28(sp)
 1009d84:	d9c00817 	ldw	r7,32(sp)
 1009d88:	180b883a 	mov	r5,r3
 1009d8c:	1009883a 	mov	r4,r2
 1009d90:	100d95c0 	call	100d95c <__muldf3>
 1009d94:	e2000017 	ldw	r8,0(fp)
 1009d98:	e2400117 	ldw	r9,4(fp)
 1009d9c:	180b883a 	mov	r5,r3
 1009da0:	1009883a 	mov	r4,r2
 1009da4:	480f883a 	mov	r7,r9
 1009da8:	400d883a 	mov	r6,r8
 1009dac:	100d8e80 	call	100d8e8 <__adddf3>
 1009db0:	e0c00115 	stw	r3,4(fp)
 1009db4:	e0800015 	stw	r2,0(fp)
 1009db8:	d8c01417 	ldw	r3,80(sp)
 1009dbc:	e4800117 	ldw	r18,4(fp)
 1009dc0:	1800021e 	bne	r3,zero,1009dcc <_strtod_r+0xb3c>
 1009dc4:	909ffc2c 	andhi	r2,r18,32752
 1009dc8:	98807b26 	beq	r19,r2,1009fb8 <_strtod_r+0xd28>
 1009dcc:	d9400517 	ldw	r5,20(sp)
 1009dd0:	a809883a 	mov	r4,r21
 1009dd4:	10075fc0 	call	10075fc <_Bfree>
 1009dd8:	a809883a 	mov	r4,r21
 1009ddc:	b80b883a 	mov	r5,r23
 1009de0:	10075fc0 	call	10075fc <_Bfree>
 1009de4:	a809883a 	mov	r4,r21
 1009de8:	b00b883a 	mov	r5,r22
 1009dec:	10075fc0 	call	10075fc <_Bfree>
 1009df0:	a809883a 	mov	r4,r21
 1009df4:	a00b883a 	mov	r5,r20
 1009df8:	10075fc0 	call	10075fc <_Bfree>
 1009dfc:	003f3c06 	br	1009af0 <_strtod_r+0x860>
 1009e00:	b80b883a 	mov	r5,r23
 1009e04:	a00d883a 	mov	r6,r20
 1009e08:	a809883a 	mov	r4,r21
 1009e0c:	10083b00 	call	10083b0 <__pow5mult>
 1009e10:	102f883a 	mov	r23,r2
 1009e14:	003f8606 	br	1009c30 <_strtod_r+0x9a0>
 1009e18:	00800d84 	movi	r2,54
 1009e1c:	114dc83a 	sub	r6,r2,r5
 1009e20:	003f5f06 	br	1009ba0 <_strtod_r+0x910>
 1009e24:	0005883a 	mov	r2,zero
 1009e28:	00cff834 	movhi	r3,16352
 1009e2c:	880b883a 	mov	r5,r17
 1009e30:	8009883a 	mov	r4,r16
 1009e34:	100d883a 	mov	r6,r2
 1009e38:	180f883a 	mov	r7,r3
 1009e3c:	100d95c0 	call	100d95c <__muldf3>
 1009e40:	d9801317 	ldw	r6,76(sp)
 1009e44:	1021883a 	mov	r16,r2
 1009e48:	1823883a 	mov	r17,r3
 1009e4c:	3025003a 	cmpeq	r18,r6,zero
 1009e50:	90000126 	beq	r18,zero,1009e58 <_strtod_r+0xbc8>
 1009e54:	18e0003c 	xorhi	r3,r3,32768
 1009e58:	d8800715 	stw	r2,28(sp)
 1009e5c:	d8c00815 	stw	r3,32(sp)
 1009e60:	e1c00117 	ldw	r7,4(fp)
 1009e64:	009ff834 	movhi	r2,32736
 1009e68:	3cdffc2c 	andhi	r19,r7,32752
 1009e6c:	98bfa21e 	bne	r19,r2,1009cf8 <_strtod_r+0xa68>
 1009e70:	e1000017 	ldw	r4,0(fp)
 1009e74:	01bf2c34 	movhi	r6,64688
 1009e78:	398d883a 	add	r6,r7,r6
 1009e7c:	d9000b15 	stw	r4,44(sp)
 1009e80:	d9c00c15 	stw	r7,48(sp)
 1009e84:	300b883a 	mov	r5,r6
 1009e88:	e1800115 	stw	r6,4(fp)
 1009e8c:	10077b80 	call	10077b8 <__ulp>
 1009e90:	d9800717 	ldw	r6,28(sp)
 1009e94:	d9c00817 	ldw	r7,32(sp)
 1009e98:	180b883a 	mov	r5,r3
 1009e9c:	1009883a 	mov	r4,r2
 1009ea0:	100d95c0 	call	100d95c <__muldf3>
 1009ea4:	e2000017 	ldw	r8,0(fp)
 1009ea8:	e2400117 	ldw	r9,4(fp)
 1009eac:	180b883a 	mov	r5,r3
 1009eb0:	1009883a 	mov	r4,r2
 1009eb4:	480f883a 	mov	r7,r9
 1009eb8:	400d883a 	mov	r6,r8
 1009ebc:	100d8e80 	call	100d8e8 <__adddf3>
 1009ec0:	1009883a 	mov	r4,r2
 1009ec4:	180b883a 	mov	r5,r3
 1009ec8:	009f2834 	movhi	r2,31904
 1009ecc:	10bfffc4 	addi	r2,r2,-1
 1009ed0:	18dffc2c 	andhi	r3,r3,32752
 1009ed4:	e1000015 	stw	r4,0(fp)
 1009ed8:	e1400115 	stw	r5,4(fp)
 1009edc:	10c06f2e 	bgeu	r2,r3,100a09c <_strtod_r+0xe0c>
 1009ee0:	d8800c17 	ldw	r2,48(sp)
 1009ee4:	011ffc34 	movhi	r4,32752
 1009ee8:	213fffc4 	addi	r4,r4,-1
 1009eec:	11007a26 	beq	r2,r4,100a0d8 <_strtod_r+0xe48>
 1009ef0:	01ffffc4 	movi	r7,-1
 1009ef4:	e1000115 	stw	r4,4(fp)
 1009ef8:	e1c00015 	stw	r7,0(fp)
 1009efc:	003fb306 	br	1009dcc <_strtod_r+0xb3c>
 1009f00:	e0c00017 	ldw	r3,0(fp)
 1009f04:	1800221e 	bne	r3,zero,1009f90 <_strtod_r+0xd00>
 1009f08:	e0800117 	ldw	r2,4(fp)
 1009f0c:	00c00434 	movhi	r3,16
 1009f10:	18ffffc4 	addi	r3,r3,-1
 1009f14:	10c4703a 	and	r2,r2,r3
 1009f18:	1000211e 	bne	r2,zero,1009fa0 <_strtod_r+0xd10>
 1009f1c:	0005883a 	mov	r2,zero
 1009f20:	00cffc34 	movhi	r3,16368
 1009f24:	180f883a 	mov	r7,r3
 1009f28:	8009883a 	mov	r4,r16
 1009f2c:	880b883a 	mov	r5,r17
 1009f30:	100d883a 	mov	r6,r2
 1009f34:	100e1980 	call	100e198 <__ltdf2>
 1009f38:	10013c16 	blt	r2,zero,100a42c <_strtod_r+0x119c>
 1009f3c:	0005883a 	mov	r2,zero
 1009f40:	00cff834 	movhi	r3,16352
 1009f44:	880b883a 	mov	r5,r17
 1009f48:	8009883a 	mov	r4,r16
 1009f4c:	180f883a 	mov	r7,r3
 1009f50:	100d883a 	mov	r6,r2
 1009f54:	100d95c0 	call	100d95c <__muldf3>
 1009f58:	1823883a 	mov	r17,r3
 1009f5c:	1021883a 	mov	r16,r2
 1009f60:	18e0003c 	xorhi	r3,r3,32768
 1009f64:	003fbc06 	br	1009e58 <_strtod_r+0xbc8>
 1009f68:	3827883a 	mov	r19,r7
 1009f6c:	003f1a06 	br	1009bd8 <_strtod_r+0x948>
 1009f70:	4091c83a 	sub	r8,r8,r2
 1009f74:	003f0206 	br	1009b80 <_strtod_r+0x8f0>
 1009f78:	d8c00f17 	ldw	r3,60(sp)
 1009f7c:	0011883a 	mov	r8,zero
 1009f80:	0029883a 	mov	r20,zero
 1009f84:	00d3c83a 	sub	r9,zero,r3
 1009f88:	480f883a 	mov	r7,r9
 1009f8c:	003ef906 	br	1009b74 <_strtod_r+0x8e4>
 1009f90:	00800044 	movi	r2,1
 1009f94:	1880021e 	bne	r3,r2,1009fa0 <_strtod_r+0xd10>
 1009f98:	e0800117 	ldw	r2,4(fp)
 1009f9c:	1000a526 	beq	r2,zero,100a234 <_strtod_r+0xfa4>
 1009fa0:	00affc34 	movhi	r2,49136
 1009fa4:	0021883a 	mov	r16,zero
 1009fa8:	044ffc34 	movhi	r17,16368
 1009fac:	d8800815 	stw	r2,32(sp)
 1009fb0:	d8000715 	stw	zero,28(sp)
 1009fb4:	003f4c06 	br	1009ce8 <_strtod_r+0xa58>
 1009fb8:	880b883a 	mov	r5,r17
 1009fbc:	8009883a 	mov	r4,r16
 1009fc0:	100e3a00 	call	100e3a0 <__fixdfsi>
 1009fc4:	1009883a 	mov	r4,r2
 1009fc8:	100e2a80 	call	100e2a8 <__floatsidf>
 1009fcc:	880b883a 	mov	r5,r17
 1009fd0:	8009883a 	mov	r4,r16
 1009fd4:	100d883a 	mov	r6,r2
 1009fd8:	180f883a 	mov	r7,r3
 1009fdc:	100d8680 	call	100d868 <__subdf3>
 1009fe0:	d9001317 	ldw	r4,76(sp)
 1009fe4:	100b883a 	mov	r5,r2
 1009fe8:	180d883a 	mov	r6,r3
 1009fec:	1021883a 	mov	r16,r2
 1009ff0:	1823883a 	mov	r17,r3
 1009ff4:	2000061e 	bne	r4,zero,100a010 <_strtod_r+0xd80>
 1009ff8:	e0800017 	ldw	r2,0(fp)
 1009ffc:	1000041e 	bne	r2,zero,100a010 <_strtod_r+0xd80>
 100a000:	00c00434 	movhi	r3,16
 100a004:	18ffffc4 	addi	r3,r3,-1
 100a008:	90c4703a 	and	r2,r18,r3
 100a00c:	10004026 	beq	r2,zero,100a110 <_strtod_r+0xe80>
 100a010:	00a52834 	movhi	r2,38048
 100a014:	108d6544 	addi	r2,r2,13717
 100a018:	00cff834 	movhi	r3,16352
 100a01c:	18ffffc4 	addi	r3,r3,-1
 100a020:	180f883a 	mov	r7,r3
 100a024:	8009883a 	mov	r4,r16
 100a028:	880b883a 	mov	r5,r17
 100a02c:	100d883a 	mov	r6,r2
 100a030:	100e1980 	call	100e198 <__ltdf2>
 100a034:	10000916 	blt	r2,zero,100a05c <_strtod_r+0xdcc>
 100a038:	008d6c34 	movhi	r2,13744
 100a03c:	10b94d44 	addi	r2,r2,-6859
 100a040:	00cff834 	movhi	r3,16352
 100a044:	880b883a 	mov	r5,r17
 100a048:	180f883a 	mov	r7,r3
 100a04c:	8009883a 	mov	r4,r16
 100a050:	100d883a 	mov	r6,r2
 100a054:	100e0880 	call	100e088 <__gtdf2>
 100a058:	00bf5c0e 	bge	zero,r2,1009dcc <_strtod_r+0xb3c>
 100a05c:	d9400517 	ldw	r5,20(sp)
 100a060:	a809883a 	mov	r4,r21
 100a064:	10075fc0 	call	10075fc <_Bfree>
 100a068:	a809883a 	mov	r4,r21
 100a06c:	b80b883a 	mov	r5,r23
 100a070:	10075fc0 	call	10075fc <_Bfree>
 100a074:	a809883a 	mov	r4,r21
 100a078:	b00b883a 	mov	r5,r22
 100a07c:	10075fc0 	call	10075fc <_Bfree>
 100a080:	d9401017 	ldw	r5,64(sp)
 100a084:	a809883a 	mov	r4,r21
 100a088:	10075fc0 	call	10075fc <_Bfree>
 100a08c:	a809883a 	mov	r4,r21
 100a090:	a00b883a 	mov	r5,r20
 100a094:	10075fc0 	call	10075fc <_Bfree>
 100a098:	003cf406 	br	100946c <_strtod_r+0x1dc>
 100a09c:	0080d434 	movhi	r2,848
 100a0a0:	288d883a 	add	r6,r5,r2
 100a0a4:	e1800115 	stw	r6,4(fp)
 100a0a8:	003f4306 	br	1009db8 <_strtod_r+0xb28>
 100a0ac:	8005883a 	mov	r2,r16
 100a0b0:	88e0003c 	xorhi	r3,r17,32768
 100a0b4:	003f2606 	br	1009d50 <_strtod_r+0xac0>
 100a0b8:	1009883a 	mov	r4,r2
 100a0bc:	100e4ec0 	call	100e4ec <__floatunsidf>
 100a0c0:	1021883a 	mov	r16,r2
 100a0c4:	1823883a 	mov	r17,r3
 100a0c8:	003f1e06 	br	1009d44 <_strtod_r+0xab4>
 100a0cc:	da000417 	ldw	r8,16(sp)
 100a0d0:	39c00044 	addi	r7,r7,1
 100a0d4:	003e6706 	br	1009a74 <_strtod_r+0x7e4>
 100a0d8:	d8c00b17 	ldw	r3,44(sp)
 100a0dc:	00bfffc4 	movi	r2,-1
 100a0e0:	18bf831e 	bne	r3,r2,1009ef0 <_strtod_r+0xc60>
 100a0e4:	00c00884 	movi	r3,34
 100a0e8:	a8c00015 	stw	r3,0(r21)
 100a0ec:	009ffc34 	movhi	r2,32752
 100a0f0:	e0800115 	stw	r2,4(fp)
 100a0f4:	e0000015 	stw	zero,0(fp)
 100a0f8:	003fd806 	br	100a05c <_strtod_r+0xdcc>
 100a0fc:	4007883a 	mov	r3,r8
 100a100:	000d883a 	mov	r6,zero
 100a104:	0029883a 	mov	r20,zero
 100a108:	0021883a 	mov	r16,zero
 100a10c:	003cc906 	br	1009434 <_strtod_r+0x1a4>
 100a110:	00a52834 	movhi	r2,38048
 100a114:	108d6544 	addi	r2,r2,13717
 100a118:	00cff434 	movhi	r3,16336
 100a11c:	18ffffc4 	addi	r3,r3,-1
 100a120:	2809883a 	mov	r4,r5
 100a124:	180f883a 	mov	r7,r3
 100a128:	300b883a 	mov	r5,r6
 100a12c:	100d883a 	mov	r6,r2
 100a130:	100e1980 	call	100e198 <__ltdf2>
 100a134:	103f250e 	bge	r2,zero,1009dcc <_strtod_r+0xb3c>
 100a138:	003fc806 	br	100a05c <_strtod_r+0xdcc>
 100a13c:	0027883a 	mov	r19,zero
 100a140:	04800044 	movi	r18,1
 100a144:	0015883a 	mov	r10,zero
 100a148:	003cc006 	br	100944c <_strtod_r+0x1bc>
 100a14c:	00800884 	movi	r2,34
 100a150:	a8800015 	stw	r2,0(r21)
 100a154:	019ffc34 	movhi	r6,32752
 100a158:	e1800115 	stw	r6,4(fp)
 100a15c:	e0000015 	stw	zero,0(fp)
 100a160:	003cc206 	br	100946c <_strtod_r+0x1dc>
 100a164:	015387c4 	movi	r5,19999
 100a168:	003d1e06 	br	10095e4 <_strtod_r+0x354>
 100a16c:	300a90fa 	slli	r5,r6,3
 100a170:	e0800017 	ldw	r2,0(fp)
 100a174:	e0c00117 	ldw	r3,4(fp)
 100a178:	010040b4 	movhi	r4,258
 100a17c:	21215004 	addi	r4,r4,-31424
 100a180:	290b883a 	add	r5,r5,r4
 100a184:	2a000017 	ldw	r8,0(r5)
 100a188:	2a400117 	ldw	r9,4(r5)
 100a18c:	1009883a 	mov	r4,r2
 100a190:	180b883a 	mov	r5,r3
 100a194:	480f883a 	mov	r7,r9
 100a198:	400d883a 	mov	r6,r8
 100a19c:	100d95c0 	call	100d95c <__muldf3>
 100a1a0:	e0c00115 	stw	r3,4(fp)
 100a1a4:	e0800015 	stw	r2,0(fp)
 100a1a8:	003cb006 	br	100946c <_strtod_r+0x1dc>
 100a1ac:	d8800d17 	ldw	r2,52(sp)
 100a1b0:	e0800015 	stw	r2,0(fp)
 100a1b4:	d8c00e17 	ldw	r3,56(sp)
 100a1b8:	e0c00115 	stw	r3,4(fp)
 100a1bc:	9880020c 	andi	r2,r19,8
 100a1c0:	103caa26 	beq	r2,zero,100946c <_strtod_r+0x1dc>
 100a1c4:	e0800117 	ldw	r2,4(fp)
 100a1c8:	10a00034 	orhi	r2,r2,32768
 100a1cc:	e0800115 	stw	r2,4(fp)
 100a1d0:	003ca606 	br	100946c <_strtod_r+0x1dc>
 100a1d4:	009ffc34 	movhi	r2,32752
 100a1d8:	e0800115 	stw	r2,4(fp)
 100a1dc:	e0000015 	stw	zero,0(fp)
 100a1e0:	003ff606 	br	100a1bc <_strtod_r+0xf2c>
 100a1e4:	00a00034 	movhi	r2,32768
 100a1e8:	10bfffc4 	addi	r2,r2,-1
 100a1ec:	00ffffc4 	movi	r3,-1
 100a1f0:	e0800115 	stw	r2,4(fp)
 100a1f4:	e0c00015 	stw	r3,0(fp)
 100a1f8:	003ff006 	br	100a1bc <_strtod_r+0xf2c>
 100a1fc:	e0000115 	stw	zero,4(fp)
 100a200:	e0000015 	stw	zero,0(fp)
 100a204:	003fed06 	br	100a1bc <_strtod_r+0xf2c>
 100a208:	d8800e17 	ldw	r2,56(sp)
 100a20c:	29010cc4 	addi	r4,r5,1075
 100a210:	00fffc34 	movhi	r3,65520
 100a214:	18ffffc4 	addi	r3,r3,-1
 100a218:	2008953a 	slli	r4,r4,20
 100a21c:	10c4703a 	and	r2,r2,r3
 100a220:	d8c00d17 	ldw	r3,52(sp)
 100a224:	1104b03a 	or	r2,r2,r4
 100a228:	e0800115 	stw	r2,4(fp)
 100a22c:	e0c00015 	stw	r3,0(fp)
 100a230:	003fe206 	br	100a1bc <_strtod_r+0xf2c>
 100a234:	00800884 	movi	r2,34
 100a238:	a8800015 	stw	r2,0(r21)
 100a23c:	e0000015 	stw	zero,0(fp)
 100a240:	e0000115 	stw	zero,4(fp)
 100a244:	003f8506 	br	100a05c <_strtod_r+0xdcc>
 100a248:	03800044 	movi	r14,1
 100a24c:	003d7706 	br	100982c <_strtod_r+0x59c>
 100a250:	99c5883a 	add	r2,r19,r7
 100a254:	11ffffc4 	addi	r7,r2,-1
 100a258:	00800204 	movi	r2,8
 100a25c:	3cc00044 	addi	r19,r7,1
 100a260:	11c0df16 	blt	r2,r7,100a5e0 <_strtod_r+0x1350>
 100a264:	a08002a4 	muli	r2,r20,10
 100a268:	000f883a 	mov	r7,zero
 100a26c:	1269883a 	add	r20,r2,r9
 100a270:	42000044 	addi	r8,r8,1
 100a274:	da000415 	stw	r8,16(sp)
 100a278:	41000007 	ldb	r4,0(r8)
 100a27c:	003d3706 	br	100975c <_strtod_r+0x4cc>
 100a280:	d9801317 	ldw	r6,76(sp)
 100a284:	3000511e 	bne	r6,zero,100a3cc <_strtod_r+0x113c>
 100a288:	e0800017 	ldw	r2,0(fp)
 100a28c:	1000d81e 	bne	r2,zero,100a5f0 <_strtod_r+0x1360>
 100a290:	e0c00117 	ldw	r3,4(fp)
 100a294:	01000434 	movhi	r4,16
 100a298:	213fffc4 	addi	r4,r4,-1
 100a29c:	1904703a 	and	r2,r3,r4
 100a2a0:	1000b01e 	bne	r2,zero,100a564 <_strtod_r+0x12d4>
 100a2a4:	18dffc2c 	andhi	r3,r3,32752
 100a2a8:	0081ac34 	movhi	r2,1712
 100a2ac:	10c1102e 	bgeu	r2,r3,100a6f0 <_strtod_r+0x1460>
 100a2b0:	a0800517 	ldw	r2,20(r20)
 100a2b4:	1000031e 	bne	r2,zero,100a2c4 <_strtod_r+0x1034>
 100a2b8:	a0c00417 	ldw	r3,16(r20)
 100a2bc:	00800044 	movi	r2,1
 100a2c0:	10c0420e 	bge	r2,r3,100a3cc <_strtod_r+0x113c>
 100a2c4:	a00b883a 	mov	r5,r20
 100a2c8:	a809883a 	mov	r4,r21
 100a2cc:	01800044 	movi	r6,1
 100a2d0:	1007f400 	call	1007f40 <__lshift>
 100a2d4:	1009883a 	mov	r4,r2
 100a2d8:	b00b883a 	mov	r5,r22
 100a2dc:	1029883a 	mov	r20,r2
 100a2e0:	10077580 	call	1007758 <__mcmp>
 100a2e4:	0080c20e 	bge	zero,r2,100a5f0 <_strtod_r+0x1360>
 100a2e8:	e1800117 	ldw	r6,4(fp)
 100a2ec:	d9001417 	ldw	r4,80(sp)
 100a2f0:	2013003a 	cmpeq	r9,r4,zero
 100a2f4:	4800ef1e 	bne	r9,zero,100a6b4 <_strtod_r+0x1424>
 100a2f8:	30dffc2c 	andhi	r3,r6,32752
 100a2fc:	0081ac34 	movhi	r2,1712
 100a300:	10c0ec36 	bltu	r2,r3,100a6b4 <_strtod_r+0x1424>
 100a304:	0080dc34 	movhi	r2,880
 100a308:	10ffca2e 	bgeu	r2,r3,100a234 <_strtod_r+0xfa4>
 100a30c:	e0800017 	ldw	r2,0(fp)
 100a310:	e0c00117 	ldw	r3,4(fp)
 100a314:	020e5434 	movhi	r8,14672
 100a318:	000d883a 	mov	r6,zero
 100a31c:	400f883a 	mov	r7,r8
 100a320:	180b883a 	mov	r5,r3
 100a324:	1009883a 	mov	r4,r2
 100a328:	da000c15 	stw	r8,48(sp)
 100a32c:	d8000b15 	stw	zero,44(sp)
 100a330:	100d95c0 	call	100d95c <__muldf3>
 100a334:	e0800015 	stw	r2,0(fp)
 100a338:	e0c00115 	stw	r3,4(fp)
 100a33c:	183f471e 	bne	r3,zero,100a05c <_strtod_r+0xdcc>
 100a340:	103f461e 	bne	r2,zero,100a05c <_strtod_r+0xdcc>
 100a344:	00800884 	movi	r2,34
 100a348:	a8800015 	stw	r2,0(r21)
 100a34c:	003f4306 	br	100a05c <_strtod_r+0xdcc>
 100a350:	d8801317 	ldw	r2,76(sp)
 100a354:	1025003a 	cmpeq	r18,r2,zero
 100a358:	9000861e 	bne	r18,zero,100a574 <_strtod_r+0x12e4>
 100a35c:	e1400117 	ldw	r5,4(fp)
 100a360:	00c00434 	movhi	r3,16
 100a364:	18ffffc4 	addi	r3,r3,-1
 100a368:	28c4703a 	and	r2,r5,r3
 100a36c:	10c01b26 	beq	r2,r3,100a3dc <_strtod_r+0x114c>
 100a370:	e1c00017 	ldw	r7,0(fp)
 100a374:	3880004c 	andi	r2,r7,1
 100a378:	1005003a 	cmpeq	r2,r2,zero
 100a37c:	1000791e 	bne	r2,zero,100a564 <_strtod_r+0x12d4>
 100a380:	9000b126 	beq	r18,zero,100a648 <_strtod_r+0x13b8>
 100a384:	e4400117 	ldw	r17,4(fp)
 100a388:	3809883a 	mov	r4,r7
 100a38c:	3821883a 	mov	r16,r7
 100a390:	880b883a 	mov	r5,r17
 100a394:	10077b80 	call	10077b8 <__ulp>
 100a398:	180f883a 	mov	r7,r3
 100a39c:	880b883a 	mov	r5,r17
 100a3a0:	8009883a 	mov	r4,r16
 100a3a4:	100d883a 	mov	r6,r2
 100a3a8:	100d8680 	call	100d868 <__subdf3>
 100a3ac:	1009883a 	mov	r4,r2
 100a3b0:	000d883a 	mov	r6,zero
 100a3b4:	000f883a 	mov	r7,zero
 100a3b8:	180b883a 	mov	r5,r3
 100a3bc:	e0800015 	stw	r2,0(fp)
 100a3c0:	e0c00115 	stw	r3,4(fp)
 100a3c4:	100e0000 	call	100e000 <__nedf2>
 100a3c8:	103f9a26 	beq	r2,zero,100a234 <_strtod_r+0xfa4>
 100a3cc:	d9001417 	ldw	r4,80(sp)
 100a3d0:	2013003a 	cmpeq	r9,r4,zero
 100a3d4:	483f211e 	bne	r9,zero,100a05c <_strtod_r+0xdcc>
 100a3d8:	003fcc06 	br	100a30c <_strtod_r+0x107c>
 100a3dc:	d9001417 	ldw	r4,80(sp)
 100a3e0:	e1c00017 	ldw	r7,0(fp)
 100a3e4:	2013003a 	cmpeq	r9,r4,zero
 100a3e8:	4800bd1e 	bne	r9,zero,100a6e0 <_strtod_r+0x1450>
 100a3ec:	28dffc2c 	andhi	r3,r5,32752
 100a3f0:	0081a834 	movhi	r2,1696
 100a3f4:	10c0ba36 	bltu	r2,r3,100a6e0 <_strtod_r+0x1450>
 100a3f8:	1804d53a 	srli	r2,r3,20
 100a3fc:	00c01ac4 	movi	r3,107
 100a400:	013fffc4 	movi	r4,-1
 100a404:	1887c83a 	sub	r3,r3,r2
 100a408:	20c4983a 	sll	r2,r4,r3
 100a40c:	11ffd91e 	bne	r2,r7,100a374 <_strtod_r+0x10e4>
 100a410:	28dffc2c 	andhi	r3,r5,32752
 100a414:	00800434 	movhi	r2,16
 100a418:	188d883a 	add	r6,r3,r2
 100a41c:	e1800115 	stw	r6,4(fp)
 100a420:	e0000015 	stw	zero,0(fp)
 100a424:	483f0d1e 	bne	r9,zero,100a05c <_strtod_r+0xdcc>
 100a428:	003fb806 	br	100a30c <_strtod_r+0x107c>
 100a42c:	0021883a 	mov	r16,zero
 100a430:	0005883a 	mov	r2,zero
 100a434:	044ff834 	movhi	r17,16352
 100a438:	00eff834 	movhi	r3,49120
 100a43c:	003e8606 	br	1009e58 <_strtod_r+0xbc8>
 100a440:	803d9e26 	beq	r16,zero,1009abc <_strtod_r+0x82c>
 100a444:	0421c83a 	sub	r16,zero,r16
 100a448:	814003cc 	andi	r5,r16,15
 100a44c:	28000f26 	beq	r5,zero,100a48c <_strtod_r+0x11fc>
 100a450:	280a90fa 	slli	r5,r5,3
 100a454:	010040b4 	movhi	r4,258
 100a458:	21215004 	addi	r4,r4,-31424
 100a45c:	e0800017 	ldw	r2,0(fp)
 100a460:	290b883a 	add	r5,r5,r4
 100a464:	2a000017 	ldw	r8,0(r5)
 100a468:	e0c00117 	ldw	r3,4(fp)
 100a46c:	2a400117 	ldw	r9,4(r5)
 100a470:	1009883a 	mov	r4,r2
 100a474:	180b883a 	mov	r5,r3
 100a478:	480f883a 	mov	r7,r9
 100a47c:	400d883a 	mov	r6,r8
 100a480:	100dd200 	call	100dd20 <__divdf3>
 100a484:	e0c00115 	stw	r3,4(fp)
 100a488:	e0800015 	stw	r2,0(fp)
 100a48c:	8021d13a 	srai	r16,r16,4
 100a490:	803d8a26 	beq	r16,zero,1009abc <_strtod_r+0x82c>
 100a494:	008007c4 	movi	r2,31
 100a498:	14002d16 	blt	r2,r16,100a550 <_strtod_r+0x12c0>
 100a49c:	8080040c 	andi	r2,r16,16
 100a4a0:	10009926 	beq	r2,zero,100a708 <_strtod_r+0x1478>
 100a4a4:	00801a84 	movi	r2,106
 100a4a8:	d8801415 	stw	r2,80(sp)
 100a4ac:	0400110e 	bge	zero,r16,100a4f4 <_strtod_r+0x1264>
 100a4b0:	044040b4 	movhi	r17,258
 100a4b4:	8c619d04 	addi	r17,r17,-31116
 100a4b8:	8080004c 	andi	r2,r16,1
 100a4bc:	1005003a 	cmpeq	r2,r2,zero
 100a4c0:	1000091e 	bne	r2,zero,100a4e8 <_strtod_r+0x1258>
 100a4c4:	e0800017 	ldw	r2,0(fp)
 100a4c8:	e0c00117 	ldw	r3,4(fp)
 100a4cc:	89800017 	ldw	r6,0(r17)
 100a4d0:	89c00117 	ldw	r7,4(r17)
 100a4d4:	180b883a 	mov	r5,r3
 100a4d8:	1009883a 	mov	r4,r2
 100a4dc:	100d95c0 	call	100d95c <__muldf3>
 100a4e0:	e0c00115 	stw	r3,4(fp)
 100a4e4:	e0800015 	stw	r2,0(fp)
 100a4e8:	8021d07a 	srai	r16,r16,1
 100a4ec:	8c400204 	addi	r17,r17,8
 100a4f0:	043ff116 	blt	zero,r16,100a4b8 <_strtod_r+0x1228>
 100a4f4:	d8c01417 	ldw	r3,80(sp)
 100a4f8:	18000d26 	beq	r3,zero,100a530 <_strtod_r+0x12a0>
 100a4fc:	e1000117 	ldw	r4,4(fp)
 100a500:	00c01ac4 	movi	r3,107
 100a504:	209ffc2c 	andhi	r2,r4,32752
 100a508:	1004d53a 	srli	r2,r2,20
 100a50c:	1887c83a 	sub	r3,r3,r2
 100a510:	00c0070e 	bge	zero,r3,100a530 <_strtod_r+0x12a0>
 100a514:	008007c4 	movi	r2,31
 100a518:	10c0900e 	bge	r2,r3,100a75c <_strtod_r+0x14cc>
 100a51c:	00800d04 	movi	r2,52
 100a520:	e0000015 	stw	zero,0(fp)
 100a524:	10c0870e 	bge	r2,r3,100a744 <_strtod_r+0x14b4>
 100a528:	0180dc34 	movhi	r6,880
 100a52c:	e1800115 	stw	r6,4(fp)
 100a530:	e0800017 	ldw	r2,0(fp)
 100a534:	e0c00117 	ldw	r3,4(fp)
 100a538:	000d883a 	mov	r6,zero
 100a53c:	000f883a 	mov	r7,zero
 100a540:	180b883a 	mov	r5,r3
 100a544:	1009883a 	mov	r4,r2
 100a548:	100e0000 	call	100e000 <__nedf2>
 100a54c:	103d5c1e 	bne	r2,zero,1009ac0 <_strtod_r+0x830>
 100a550:	00800884 	movi	r2,34
 100a554:	a8800015 	stw	r2,0(r21)
 100a558:	e0000015 	stw	zero,0(fp)
 100a55c:	e0000115 	stw	zero,4(fp)
 100a560:	003bc206 	br	100946c <_strtod_r+0x1dc>
 100a564:	d8801417 	ldw	r2,80(sp)
 100a568:	1013003a 	cmpeq	r9,r2,zero
 100a56c:	483ebb1e 	bne	r9,zero,100a05c <_strtod_r+0xdcc>
 100a570:	003f6606 	br	100a30c <_strtod_r+0x107c>
 100a574:	e1800117 	ldw	r6,4(fp)
 100a578:	00c00434 	movhi	r3,16
 100a57c:	18ffffc4 	addi	r3,r3,-1
 100a580:	30c4703a 	and	r2,r6,r3
 100a584:	103f7a1e 	bne	r2,zero,100a370 <_strtod_r+0x10e0>
 100a588:	e1c00017 	ldw	r7,0(fp)
 100a58c:	383f791e 	bne	r7,zero,100a374 <_strtod_r+0x10e4>
 100a590:	003f5606 	br	100a2ec <_strtod_r+0x105c>
 100a594:	d9800f17 	ldw	r6,60(sp)
 100a598:	00bffa84 	movi	r2,-22
 100a59c:	30bcd416 	blt	r6,r2,10098f0 <_strtod_r+0x660>
 100a5a0:	317ffe24 	muli	r5,r6,-8
 100a5a4:	010040b4 	movhi	r4,258
 100a5a8:	21215004 	addi	r4,r4,-31424
 100a5ac:	e0800017 	ldw	r2,0(fp)
 100a5b0:	290b883a 	add	r5,r5,r4
 100a5b4:	2a000017 	ldw	r8,0(r5)
 100a5b8:	e0c00117 	ldw	r3,4(fp)
 100a5bc:	2a400117 	ldw	r9,4(r5)
 100a5c0:	1009883a 	mov	r4,r2
 100a5c4:	180b883a 	mov	r5,r3
 100a5c8:	480f883a 	mov	r7,r9
 100a5cc:	400d883a 	mov	r6,r8
 100a5d0:	100dd200 	call	100dd20 <__divdf3>
 100a5d4:	e0c00115 	stw	r3,4(fp)
 100a5d8:	e0800015 	stw	r2,0(fp)
 100a5dc:	003ba306 	br	100946c <_strtod_r+0x1dc>
 100a5e0:	00800404 	movi	r2,16
 100a5e4:	14c02f0e 	bge	r2,r19,100a6a4 <_strtod_r+0x1414>
 100a5e8:	000f883a 	mov	r7,zero
 100a5ec:	003f2006 	br	100a270 <_strtod_r+0xfe0>
 100a5f0:	d9801417 	ldw	r6,80(sp)
 100a5f4:	3013003a 	cmpeq	r9,r6,zero
 100a5f8:	483e981e 	bne	r9,zero,100a05c <_strtod_r+0xdcc>
 100a5fc:	003f4306 	br	100a30c <_strtod_r+0x107c>
 100a600:	00801a44 	movi	r2,105
 100a604:	20bc6326 	beq	r4,r2,1009794 <_strtod_r+0x504>
 100a608:	00801b84 	movi	r2,110
 100a60c:	20bbba1e 	bne	r4,r2,10094f8 <_strtod_r+0x268>
 100a610:	dc000404 	addi	r16,sp,16
 100a614:	8009883a 	mov	r4,r16
 100a618:	014040b4 	movhi	r5,258
 100a61c:	29619c04 	addi	r5,r5,-31120
 100a620:	10092480 	call	1009248 <match>
 100a624:	103bb426 	beq	r2,zero,10094f8 <_strtod_r+0x268>
 100a628:	d8800417 	ldw	r2,16(sp)
 100a62c:	00c00a04 	movi	r3,40
 100a630:	11000007 	ldb	r4,0(r2)
 100a634:	20c03626 	beq	r4,r3,100a710 <_strtod_r+0x1480>
 100a638:	01bffe34 	movhi	r6,65528
 100a63c:	e1800115 	stw	r6,4(fp)
 100a640:	e0000015 	stw	zero,0(fp)
 100a644:	003b8906 	br	100946c <_strtod_r+0x1dc>
 100a648:	e4400117 	ldw	r17,4(fp)
 100a64c:	3809883a 	mov	r4,r7
 100a650:	3821883a 	mov	r16,r7
 100a654:	880b883a 	mov	r5,r17
 100a658:	10077b80 	call	10077b8 <__ulp>
 100a65c:	100d883a 	mov	r6,r2
 100a660:	880b883a 	mov	r5,r17
 100a664:	180f883a 	mov	r7,r3
 100a668:	8009883a 	mov	r4,r16
 100a66c:	100d8e80 	call	100d8e8 <__adddf3>
 100a670:	d9801417 	ldw	r6,80(sp)
 100a674:	e0c00115 	stw	r3,4(fp)
 100a678:	e0800015 	stw	r2,0(fp)
 100a67c:	3013003a 	cmpeq	r9,r6,zero
 100a680:	483e761e 	bne	r9,zero,100a05c <_strtod_r+0xdcc>
 100a684:	003f2106 	br	100a30c <_strtod_r+0x107c>
 100a688:	000f883a 	mov	r7,zero
 100a68c:	003cf006 	br	1009a50 <_strtod_r+0x7c0>
 100a690:	0080d434 	movhi	r2,848
 100a694:	188d883a 	add	r6,r3,r2
 100a698:	d8001415 	stw	zero,80(sp)
 100a69c:	e1800115 	stw	r6,4(fp)
 100a6a0:	003d0706 	br	1009ac0 <_strtod_r+0x830>
 100a6a4:	808002a4 	muli	r2,r16,10
 100a6a8:	000f883a 	mov	r7,zero
 100a6ac:	1261883a 	add	r16,r2,r9
 100a6b0:	003eef06 	br	100a270 <_strtod_r+0xfe0>
 100a6b4:	309ffc2c 	andhi	r2,r6,32752
 100a6b8:	00fffc34 	movhi	r3,65520
 100a6bc:	10c5883a 	add	r2,r2,r3
 100a6c0:	00c00434 	movhi	r3,16
 100a6c4:	18ffffc4 	addi	r3,r3,-1
 100a6c8:	10ccb03a 	or	r6,r2,r3
 100a6cc:	01ffffc4 	movi	r7,-1
 100a6d0:	e1800115 	stw	r6,4(fp)
 100a6d4:	e1c00015 	stw	r7,0(fp)
 100a6d8:	483e601e 	bne	r9,zero,100a05c <_strtod_r+0xdcc>
 100a6dc:	003f0b06 	br	100a30c <_strtod_r+0x107c>
 100a6e0:	00bfffc4 	movi	r2,-1
 100a6e4:	003f4906 	br	100a40c <_strtod_r+0x117c>
 100a6e8:	0025883a 	mov	r18,zero
 100a6ec:	003cb106 	br	10099b4 <_strtod_r+0x724>
 100a6f0:	d8c01417 	ldw	r3,80(sp)
 100a6f4:	1813003a 	cmpeq	r9,r3,zero
 100a6f8:	483e581e 	bne	r9,zero,100a05c <_strtod_r+0xdcc>
 100a6fc:	003f0306 	br	100a30c <_strtod_r+0x107c>
 100a700:	980f883a 	mov	r7,r19
 100a704:	003ed406 	br	100a258 <_strtod_r+0xfc8>
 100a708:	d8001415 	stw	zero,80(sp)
 100a70c:	003f6706 	br	100a4ac <_strtod_r+0x121c>
 100a710:	8009883a 	mov	r4,r16
 100a714:	014040b4 	movhi	r5,258
 100a718:	29644a04 	addi	r5,r5,-28376
 100a71c:	d9800d04 	addi	r6,sp,52
 100a720:	100c2800 	call	100c280 <__hexnan>
 100a724:	00c00144 	movi	r3,5
 100a728:	10ffc31e 	bne	r2,r3,100a638 <_strtod_r+0x13a8>
 100a72c:	d8800e17 	ldw	r2,56(sp)
 100a730:	d9c00d17 	ldw	r7,52(sp)
 100a734:	119ffc34 	orhi	r6,r2,32752
 100a738:	e1800115 	stw	r6,4(fp)
 100a73c:	e1c00015 	stw	r7,0(fp)
 100a740:	003b4a06 	br	100946c <_strtod_r+0x1dc>
 100a744:	18fff804 	addi	r3,r3,-32
 100a748:	00bfffc4 	movi	r2,-1
 100a74c:	10c4983a 	sll	r2,r2,r3
 100a750:	208c703a 	and	r6,r4,r2
 100a754:	e1800115 	stw	r6,4(fp)
 100a758:	003f7506 	br	100a530 <_strtod_r+0x12a0>
 100a75c:	00bfffc4 	movi	r2,-1
 100a760:	10c4983a 	sll	r2,r2,r3
 100a764:	e0c00017 	ldw	r3,0(fp)
 100a768:	188e703a 	and	r7,r3,r2
 100a76c:	e1c00015 	stw	r7,0(fp)
 100a770:	003f6f06 	br	100a530 <_strtod_r+0x12a0>

0100a774 <strtof>:
 100a774:	defffa04 	addi	sp,sp,-24
 100a778:	dd000415 	stw	r20,16(sp)
 100a77c:	050040b4 	movhi	r20,258
 100a780:	a528f804 	addi	r20,r20,-23584
 100a784:	2007883a 	mov	r3,r4
 100a788:	a1000017 	ldw	r4,0(r20)
 100a78c:	280d883a 	mov	r6,r5
 100a790:	180b883a 	mov	r5,r3
 100a794:	dfc00515 	stw	ra,20(sp)
 100a798:	dcc00315 	stw	r19,12(sp)
 100a79c:	dc800215 	stw	r18,8(sp)
 100a7a0:	dc400115 	stw	r17,4(sp)
 100a7a4:	dc000015 	stw	r16,0(sp)
 100a7a8:	10092900 	call	1009290 <_strtod_r>
 100a7ac:	180b883a 	mov	r5,r3
 100a7b0:	1009883a 	mov	r4,r2
 100a7b4:	1823883a 	mov	r17,r3
 100a7b8:	1021883a 	mov	r16,r2
 100a7bc:	100e4780 	call	100e478 <__truncdfsf2>
 100a7c0:	1009883a 	mov	r4,r2
 100a7c4:	000b883a 	mov	r5,zero
 100a7c8:	1025883a 	mov	r18,r2
 100a7cc:	1027883a 	mov	r19,r2
 100a7d0:	100d2f00 	call	100d2f0 <__nesf2>
 100a7d4:	000d883a 	mov	r6,zero
 100a7d8:	000f883a 	mov	r7,zero
 100a7dc:	8009883a 	mov	r4,r16
 100a7e0:	880b883a 	mov	r5,r17
 100a7e4:	10000e1e 	bne	r2,zero,100a820 <strtof+0xac>
 100a7e8:	100e0000 	call	100e000 <__nedf2>
 100a7ec:	10000c26 	beq	r2,zero,100a820 <strtof+0xac>
 100a7f0:	a0c00017 	ldw	r3,0(r20)
 100a7f4:	00800884 	movi	r2,34
 100a7f8:	18800015 	stw	r2,0(r3)
 100a7fc:	9805883a 	mov	r2,r19
 100a800:	dfc00517 	ldw	ra,20(sp)
 100a804:	dd000417 	ldw	r20,16(sp)
 100a808:	dcc00317 	ldw	r19,12(sp)
 100a80c:	dc800217 	ldw	r18,8(sp)
 100a810:	dc400117 	ldw	r17,4(sp)
 100a814:	dc000017 	ldw	r16,0(sp)
 100a818:	dec00604 	addi	sp,sp,24
 100a81c:	f800283a 	ret
 100a820:	9009883a 	mov	r4,r18
 100a824:	015fe034 	movhi	r5,32640
 100a828:	297fffc4 	addi	r5,r5,-1
 100a82c:	100d3680 	call	100d368 <__gtsf2>
 100a830:	00ffffc4 	movi	r3,-1
 100a834:	011ffc34 	movhi	r4,32752
 100a838:	213fffc4 	addi	r4,r4,-1
 100a83c:	200f883a 	mov	r7,r4
 100a840:	180d883a 	mov	r6,r3
 100a844:	8009883a 	mov	r4,r16
 100a848:	880b883a 	mov	r5,r17
 100a84c:	00800f16 	blt	zero,r2,100a88c <strtof+0x118>
 100a850:	9009883a 	mov	r4,r18
 100a854:	017fe034 	movhi	r5,65408
 100a858:	297fffc4 	addi	r5,r5,-1
 100a85c:	100d3e00 	call	100d3e0 <__ltsf2>
 100a860:	023fffc4 	movi	r8,-1
 100a864:	027ffc34 	movhi	r9,65520
 100a868:	4a7fffc4 	addi	r9,r9,-1
 100a86c:	880b883a 	mov	r5,r17
 100a870:	480f883a 	mov	r7,r9
 100a874:	8009883a 	mov	r4,r16
 100a878:	400d883a 	mov	r6,r8
 100a87c:	103fdf0e 	bge	r2,zero,100a7fc <strtof+0x88>
 100a880:	100e1980 	call	100e198 <__ltdf2>
 100a884:	103fda0e 	bge	r2,zero,100a7f0 <strtof+0x7c>
 100a888:	003fdc06 	br	100a7fc <strtof+0x88>
 100a88c:	100e0880 	call	100e088 <__gtdf2>
 100a890:	00bfd70e 	bge	zero,r2,100a7f0 <strtof+0x7c>
 100a894:	003fee06 	br	100a850 <strtof+0xdc>

0100a898 <strtod>:
 100a898:	018040b4 	movhi	r6,258
 100a89c:	31a8f804 	addi	r6,r6,-23584
 100a8a0:	2007883a 	mov	r3,r4
 100a8a4:	31000017 	ldw	r4,0(r6)
 100a8a8:	280d883a 	mov	r6,r5
 100a8ac:	180b883a 	mov	r5,r3
 100a8b0:	10092901 	jmpi	1009290 <_strtod_r>

0100a8b4 <_strtol_r>:
 100a8b4:	defff304 	addi	sp,sp,-52
 100a8b8:	008040b4 	movhi	r2,258
 100a8bc:	10a8f704 	addi	r2,r2,-23588
 100a8c0:	dcc00615 	stw	r19,24(sp)
 100a8c4:	14c00017 	ldw	r19,0(r2)
 100a8c8:	ddc00a15 	stw	r23,40(sp)
 100a8cc:	dc000315 	stw	r16,12(sp)
 100a8d0:	dfc00c15 	stw	ra,48(sp)
 100a8d4:	df000b15 	stw	fp,44(sp)
 100a8d8:	dd800915 	stw	r22,36(sp)
 100a8dc:	dd400815 	stw	r21,32(sp)
 100a8e0:	dd000715 	stw	r20,28(sp)
 100a8e4:	dc800515 	stw	r18,20(sp)
 100a8e8:	dc400415 	stw	r17,16(sp)
 100a8ec:	282f883a 	mov	r23,r5
 100a8f0:	d9000015 	stw	r4,0(sp)
 100a8f4:	d9800115 	stw	r6,4(sp)
 100a8f8:	2821883a 	mov	r16,r5
 100a8fc:	84400007 	ldb	r17,0(r16)
 100a900:	84000044 	addi	r16,r16,1
 100a904:	9c47883a 	add	r3,r19,r17
 100a908:	18800003 	ldbu	r2,0(r3)
 100a90c:	1080020c 	andi	r2,r2,8
 100a910:	103ffa1e 	bne	r2,zero,100a8fc <_strtol_r+0x48>
 100a914:	00800b44 	movi	r2,45
 100a918:	88805c26 	beq	r17,r2,100aa8c <_strtol_r+0x1d8>
 100a91c:	00800ac4 	movi	r2,43
 100a920:	88805726 	beq	r17,r2,100aa80 <_strtol_r+0x1cc>
 100a924:	0039883a 	mov	fp,zero
 100a928:	3807003a 	cmpeq	r3,r7,zero
 100a92c:	1800431e 	bne	r3,zero,100aa3c <_strtol_r+0x188>
 100a930:	00800404 	movi	r2,16
 100a934:	38804126 	beq	r7,r2,100aa3c <_strtol_r+0x188>
 100a938:	3829883a 	mov	r20,r7
 100a93c:	e02cc03a 	cmpne	r22,fp,zero
 100a940:	b0004b1e 	bne	r22,zero,100aa70 <_strtol_r+0x1bc>
 100a944:	04a00034 	movhi	r18,32768
 100a948:	94bfffc4 	addi	r18,r18,-1
 100a94c:	9009883a 	mov	r4,r18
 100a950:	a00b883a 	mov	r5,r20
 100a954:	d9c00215 	stw	r7,8(sp)
 100a958:	100e7c40 	call	100e7c4 <__umodsi3>
 100a95c:	9009883a 	mov	r4,r18
 100a960:	a00b883a 	mov	r5,r20
 100a964:	102b883a 	mov	r21,r2
 100a968:	100e7bc0 	call	100e7bc <__udivsi3>
 100a96c:	1011883a 	mov	r8,r2
 100a970:	9c45883a 	add	r2,r19,r17
 100a974:	11000003 	ldbu	r4,0(r2)
 100a978:	000b883a 	mov	r5,zero
 100a97c:	000d883a 	mov	r6,zero
 100a980:	20c0010c 	andi	r3,r4,4
 100a984:	d9c00217 	ldw	r7,8(sp)
 100a988:	18000e26 	beq	r3,zero,100a9c4 <_strtol_r+0x110>
 100a98c:	88fff404 	addi	r3,r17,-48
 100a990:	19c0140e 	bge	r3,r7,100a9e4 <_strtol_r+0x130>
 100a994:	30003116 	blt	r6,zero,100aa5c <_strtol_r+0x1a8>
 100a998:	41403036 	bltu	r8,r5,100aa5c <_strtol_r+0x1a8>
 100a99c:	2a002e26 	beq	r5,r8,100aa58 <_strtol_r+0x1a4>
 100a9a0:	2d05383a 	mul	r2,r5,r20
 100a9a4:	01800044 	movi	r6,1
 100a9a8:	10cb883a 	add	r5,r2,r3
 100a9ac:	84400007 	ldb	r17,0(r16)
 100a9b0:	84000044 	addi	r16,r16,1
 100a9b4:	9c45883a 	add	r2,r19,r17
 100a9b8:	11000003 	ldbu	r4,0(r2)
 100a9bc:	20c0010c 	andi	r3,r4,4
 100a9c0:	183ff21e 	bne	r3,zero,100a98c <_strtol_r+0xd8>
 100a9c4:	208000cc 	andi	r2,r4,3
 100a9c8:	10000626 	beq	r2,zero,100a9e4 <_strtol_r+0x130>
 100a9cc:	2080004c 	andi	r2,r4,1
 100a9d0:	1005003a 	cmpeq	r2,r2,zero
 100a9d4:	1000231e 	bne	r2,zero,100aa64 <_strtol_r+0x1b0>
 100a9d8:	00800dc4 	movi	r2,55
 100a9dc:	8887c83a 	sub	r3,r17,r2
 100a9e0:	19ffec16 	blt	r3,r7,100a994 <_strtol_r+0xe0>
 100a9e4:	30002d16 	blt	r6,zero,100aa9c <_strtol_r+0x1e8>
 100a9e8:	b000231e 	bne	r22,zero,100aa78 <_strtol_r+0x1c4>
 100a9ec:	2807883a 	mov	r3,r5
 100a9f0:	d8800117 	ldw	r2,4(sp)
 100a9f4:	10000426 	beq	r2,zero,100aa08 <_strtol_r+0x154>
 100a9f8:	30000126 	beq	r6,zero,100aa00 <_strtol_r+0x14c>
 100a9fc:	85ffffc4 	addi	r23,r16,-1
 100aa00:	d9000117 	ldw	r4,4(sp)
 100aa04:	25c00015 	stw	r23,0(r4)
 100aa08:	1805883a 	mov	r2,r3
 100aa0c:	dfc00c17 	ldw	ra,48(sp)
 100aa10:	df000b17 	ldw	fp,44(sp)
 100aa14:	ddc00a17 	ldw	r23,40(sp)
 100aa18:	dd800917 	ldw	r22,36(sp)
 100aa1c:	dd400817 	ldw	r21,32(sp)
 100aa20:	dd000717 	ldw	r20,28(sp)
 100aa24:	dcc00617 	ldw	r19,24(sp)
 100aa28:	dc800517 	ldw	r18,20(sp)
 100aa2c:	dc400417 	ldw	r17,16(sp)
 100aa30:	dc000317 	ldw	r16,12(sp)
 100aa34:	dec00d04 	addi	sp,sp,52
 100aa38:	f800283a 	ret
 100aa3c:	00800c04 	movi	r2,48
 100aa40:	88801d26 	beq	r17,r2,100aab8 <_strtol_r+0x204>
 100aa44:	183fbc26 	beq	r3,zero,100a938 <_strtol_r+0x84>
 100aa48:	00800c04 	movi	r2,48
 100aa4c:	88802726 	beq	r17,r2,100aaec <_strtol_r+0x238>
 100aa50:	01c00284 	movi	r7,10
 100aa54:	003fb806 	br	100a938 <_strtol_r+0x84>
 100aa58:	a8ffd10e 	bge	r21,r3,100a9a0 <_strtol_r+0xec>
 100aa5c:	01bfffc4 	movi	r6,-1
 100aa60:	003fd206 	br	100a9ac <_strtol_r+0xf8>
 100aa64:	008015c4 	movi	r2,87
 100aa68:	8887c83a 	sub	r3,r17,r2
 100aa6c:	003fdc06 	br	100a9e0 <_strtol_r+0x12c>
 100aa70:	04a00034 	movhi	r18,32768
 100aa74:	003fb506 	br	100a94c <_strtol_r+0x98>
 100aa78:	0147c83a 	sub	r3,zero,r5
 100aa7c:	003fdc06 	br	100a9f0 <_strtol_r+0x13c>
 100aa80:	84400007 	ldb	r17,0(r16)
 100aa84:	84000044 	addi	r16,r16,1
 100aa88:	003fa606 	br	100a924 <_strtol_r+0x70>
 100aa8c:	84400007 	ldb	r17,0(r16)
 100aa90:	07000044 	movi	fp,1
 100aa94:	84000044 	addi	r16,r16,1
 100aa98:	003fa306 	br	100a928 <_strtol_r+0x74>
 100aa9c:	e005003a 	cmpeq	r2,fp,zero
 100aaa0:	10000f1e 	bne	r2,zero,100aae0 <_strtol_r+0x22c>
 100aaa4:	00e00034 	movhi	r3,32768
 100aaa8:	d9000017 	ldw	r4,0(sp)
 100aaac:	00800884 	movi	r2,34
 100aab0:	20800015 	stw	r2,0(r4)
 100aab4:	003fce06 	br	100a9f0 <_strtol_r+0x13c>
 100aab8:	81000007 	ldb	r4,0(r16)
 100aabc:	00801e04 	movi	r2,120
 100aac0:	20800226 	beq	r4,r2,100aacc <_strtol_r+0x218>
 100aac4:	00801604 	movi	r2,88
 100aac8:	20bfde1e 	bne	r4,r2,100aa44 <_strtol_r+0x190>
 100aacc:	84400047 	ldb	r17,1(r16)
 100aad0:	01c00404 	movi	r7,16
 100aad4:	84000084 	addi	r16,r16,2
 100aad8:	3829883a 	mov	r20,r7
 100aadc:	003f9706 	br	100a93c <_strtol_r+0x88>
 100aae0:	00e00034 	movhi	r3,32768
 100aae4:	18ffffc4 	addi	r3,r3,-1
 100aae8:	003fef06 	br	100aaa8 <_strtol_r+0x1f4>
 100aaec:	01c00204 	movi	r7,8
 100aaf0:	3829883a 	mov	r20,r7
 100aaf4:	003f9106 	br	100a93c <_strtol_r+0x88>

0100aaf8 <strtol>:
 100aaf8:	008040b4 	movhi	r2,258
 100aafc:	10a8f804 	addi	r2,r2,-23584
 100ab00:	2013883a 	mov	r9,r4
 100ab04:	11000017 	ldw	r4,0(r2)
 100ab08:	2805883a 	mov	r2,r5
 100ab0c:	300f883a 	mov	r7,r6
 100ab10:	480b883a 	mov	r5,r9
 100ab14:	100d883a 	mov	r6,r2
 100ab18:	100a8b41 	jmpi	100a8b4 <_strtol_r>

0100ab1c <_strtoll_r>:
 100ab1c:	defff004 	addi	sp,sp,-64
 100ab20:	008040b4 	movhi	r2,258
 100ab24:	10a8f704 	addi	r2,r2,-23588
 100ab28:	df000e15 	stw	fp,56(sp)
 100ab2c:	17000017 	ldw	fp,0(r2)
 100ab30:	ddc00d15 	stw	r23,52(sp)
 100ab34:	dd000a15 	stw	r20,40(sp)
 100ab38:	dfc00f15 	stw	ra,60(sp)
 100ab3c:	dd800c15 	stw	r22,48(sp)
 100ab40:	dd400b15 	stw	r21,44(sp)
 100ab44:	dcc00915 	stw	r19,36(sp)
 100ab48:	dc800815 	stw	r18,32(sp)
 100ab4c:	dc400715 	stw	r17,28(sp)
 100ab50:	dc000615 	stw	r16,24(sp)
 100ab54:	d9400315 	stw	r5,12(sp)
 100ab58:	d9000215 	stw	r4,8(sp)
 100ab5c:	d9800415 	stw	r6,16(sp)
 100ab60:	382f883a 	mov	r23,r7
 100ab64:	2829883a 	mov	r20,r5
 100ab68:	a4c00007 	ldb	r19,0(r20)
 100ab6c:	a5000044 	addi	r20,r20,1
 100ab70:	e4c7883a 	add	r3,fp,r19
 100ab74:	18800003 	ldbu	r2,0(r3)
 100ab78:	1080020c 	andi	r2,r2,8
 100ab7c:	103ffa1e 	bne	r2,zero,100ab68 <_strtoll_r+0x4c>
 100ab80:	00800b44 	movi	r2,45
 100ab84:	98808826 	beq	r19,r2,100ada8 <_strtoll_r+0x28c>
 100ab88:	00800ac4 	movi	r2,43
 100ab8c:	98808326 	beq	r19,r2,100ad9c <_strtoll_r+0x280>
 100ab90:	d8000115 	stw	zero,4(sp)
 100ab94:	b807003a 	cmpeq	r3,r23,zero
 100ab98:	18005f1e 	bne	r3,zero,100ad18 <_strtoll_r+0x1fc>
 100ab9c:	00800404 	movi	r2,16
 100aba0:	b8805d26 	beq	r23,r2,100ad18 <_strtoll_r+0x1fc>
 100aba4:	b82dd7fa 	srai	r22,r23,31
 100aba8:	b82b883a 	mov	r21,r23
 100abac:	d8c00117 	ldw	r3,4(sp)
 100abb0:	1806c03a 	cmpne	r3,r3,zero
 100abb4:	d8c00515 	stw	r3,20(sp)
 100abb8:	1800631e 	bne	r3,zero,100ad48 <_strtoll_r+0x22c>
 100abbc:	043fffc4 	movi	r16,-1
 100abc0:	04600034 	movhi	r17,32768
 100abc4:	8c7fffc4 	addi	r17,r17,-1
 100abc8:	880b883a 	mov	r5,r17
 100abcc:	8009883a 	mov	r4,r16
 100abd0:	a80d883a 	mov	r6,r21
 100abd4:	b00f883a 	mov	r7,r22
 100abd8:	100cd400 	call	100cd40 <__umoddi3>
 100abdc:	880b883a 	mov	r5,r17
 100abe0:	8009883a 	mov	r4,r16
 100abe4:	b00f883a 	mov	r7,r22
 100abe8:	a80d883a 	mov	r6,r21
 100abec:	d8800015 	stw	r2,0(sp)
 100abf0:	100c7640 	call	100c764 <__udivdi3>
 100abf4:	1023883a 	mov	r17,r2
 100abf8:	e4c5883a 	add	r2,fp,r19
 100abfc:	11000003 	ldbu	r4,0(r2)
 100ac00:	1825883a 	mov	r18,r3
 100ac04:	0015883a 	mov	r10,zero
 100ac08:	20c0010c 	andi	r3,r4,4
 100ac0c:	0017883a 	mov	r11,zero
 100ac10:	000f883a 	mov	r7,zero
 100ac14:	18001a26 	beq	r3,zero,100ac80 <_strtoll_r+0x164>
 100ac18:	9c3ff404 	addi	r16,r19,-48
 100ac1c:	85c0200e 	bge	r16,r23,100aca0 <_strtoll_r+0x184>
 100ac20:	38003b16 	blt	r7,zero,100ad10 <_strtoll_r+0x1f4>
 100ac24:	92c03a36 	bltu	r18,r11,100ad10 <_strtoll_r+0x1f4>
 100ac28:	5c803826 	beq	r11,r18,100ad0c <_strtoll_r+0x1f0>
 100ac2c:	54404c26 	beq	r10,r17,100ad60 <_strtoll_r+0x244>
 100ac30:	580b883a 	mov	r5,r11
 100ac34:	5009883a 	mov	r4,r10
 100ac38:	a80d883a 	mov	r6,r21
 100ac3c:	b00f883a 	mov	r7,r22
 100ac40:	100c6280 	call	100c628 <__muldi3>
 100ac44:	8013d7fa 	srai	r9,r16,31
 100ac48:	100d883a 	mov	r6,r2
 100ac4c:	1405883a 	add	r2,r2,r16
 100ac50:	118d803a 	cmpltu	r6,r2,r6
 100ac54:	1a47883a 	add	r3,r3,r9
 100ac58:	30cd883a 	add	r6,r6,r3
 100ac5c:	1015883a 	mov	r10,r2
 100ac60:	3017883a 	mov	r11,r6
 100ac64:	01c00044 	movi	r7,1
 100ac68:	a4c00007 	ldb	r19,0(r20)
 100ac6c:	a5000044 	addi	r20,r20,1
 100ac70:	e4c5883a 	add	r2,fp,r19
 100ac74:	11000003 	ldbu	r4,0(r2)
 100ac78:	20c0010c 	andi	r3,r4,4
 100ac7c:	183fe61e 	bne	r3,zero,100ac18 <_strtoll_r+0xfc>
 100ac80:	208000cc 	andi	r2,r4,3
 100ac84:	10000626 	beq	r2,zero,100aca0 <_strtoll_r+0x184>
 100ac88:	2080004c 	andi	r2,r4,1
 100ac8c:	1005003a 	cmpeq	r2,r2,zero
 100ac90:	1000301e 	bne	r2,zero,100ad54 <_strtoll_r+0x238>
 100ac94:	02000dc4 	movi	r8,55
 100ac98:	9a21c83a 	sub	r16,r19,r8
 100ac9c:	85ffe016 	blt	r16,r23,100ac20 <_strtoll_r+0x104>
 100aca0:	38004616 	blt	r7,zero,100adbc <_strtoll_r+0x2a0>
 100aca4:	d8800517 	ldw	r2,20(sp)
 100aca8:	1000341e 	bne	r2,zero,100ad7c <_strtoll_r+0x260>
 100acac:	500b883a 	mov	r5,r10
 100acb0:	580d883a 	mov	r6,r11
 100acb4:	d8c00417 	ldw	r3,16(sp)
 100acb8:	18000626 	beq	r3,zero,100acd4 <_strtoll_r+0x1b8>
 100acbc:	38000226 	beq	r7,zero,100acc8 <_strtoll_r+0x1ac>
 100acc0:	a53fffc4 	addi	r20,r20,-1
 100acc4:	dd000315 	stw	r20,12(sp)
 100acc8:	d8c00317 	ldw	r3,12(sp)
 100accc:	d8800417 	ldw	r2,16(sp)
 100acd0:	10c00015 	stw	r3,0(r2)
 100acd4:	2805883a 	mov	r2,r5
 100acd8:	3007883a 	mov	r3,r6
 100acdc:	dfc00f17 	ldw	ra,60(sp)
 100ace0:	df000e17 	ldw	fp,56(sp)
 100ace4:	ddc00d17 	ldw	r23,52(sp)
 100ace8:	dd800c17 	ldw	r22,48(sp)
 100acec:	dd400b17 	ldw	r21,44(sp)
 100acf0:	dd000a17 	ldw	r20,40(sp)
 100acf4:	dcc00917 	ldw	r19,36(sp)
 100acf8:	dc800817 	ldw	r18,32(sp)
 100acfc:	dc400717 	ldw	r17,28(sp)
 100ad00:	dc000617 	ldw	r16,24(sp)
 100ad04:	dec01004 	addi	sp,sp,64
 100ad08:	f800283a 	ret
 100ad0c:	8abfc72e 	bgeu	r17,r10,100ac2c <_strtoll_r+0x110>
 100ad10:	01ffffc4 	movi	r7,-1
 100ad14:	003fd406 	br	100ac68 <_strtoll_r+0x14c>
 100ad18:	00800c04 	movi	r2,48
 100ad1c:	98803226 	beq	r19,r2,100ade8 <_strtoll_r+0x2cc>
 100ad20:	183fa026 	beq	r3,zero,100aba4 <_strtoll_r+0x88>
 100ad24:	00800c04 	movi	r2,48
 100ad28:	98803e26 	beq	r19,r2,100ae24 <_strtoll_r+0x308>
 100ad2c:	d8c00117 	ldw	r3,4(sp)
 100ad30:	05c00284 	movi	r23,10
 100ad34:	b82b883a 	mov	r21,r23
 100ad38:	1806c03a 	cmpne	r3,r3,zero
 100ad3c:	002d883a 	mov	r22,zero
 100ad40:	d8c00515 	stw	r3,20(sp)
 100ad44:	183f9d26 	beq	r3,zero,100abbc <_strtoll_r+0xa0>
 100ad48:	0021883a 	mov	r16,zero
 100ad4c:	04600034 	movhi	r17,32768
 100ad50:	003f9d06 	br	100abc8 <_strtoll_r+0xac>
 100ad54:	020015c4 	movi	r8,87
 100ad58:	9a21c83a 	sub	r16,r19,r8
 100ad5c:	003fcf06 	br	100ac9c <_strtoll_r+0x180>
 100ad60:	5cbfb31e 	bne	r11,r18,100ac30 <_strtoll_r+0x114>
 100ad64:	d8800017 	ldw	r2,0(sp)
 100ad68:	143fb10e 	bge	r2,r16,100ac30 <_strtoll_r+0x114>
 100ad6c:	8815883a 	mov	r10,r17
 100ad70:	9017883a 	mov	r11,r18
 100ad74:	01ffffc4 	movi	r7,-1
 100ad78:	003fbb06 	br	100ac68 <_strtoll_r+0x14c>
 100ad7c:	0009883a 	mov	r4,zero
 100ad80:	2285c83a 	sub	r2,r4,r10
 100ad84:	2089803a 	cmpltu	r4,r4,r2
 100ad88:	02c7c83a 	sub	r3,zero,r11
 100ad8c:	1909c83a 	sub	r4,r3,r4
 100ad90:	100b883a 	mov	r5,r2
 100ad94:	200d883a 	mov	r6,r4
 100ad98:	003fc606 	br	100acb4 <_strtoll_r+0x198>
 100ad9c:	a4c00007 	ldb	r19,0(r20)
 100ada0:	a5000044 	addi	r20,r20,1
 100ada4:	003f7a06 	br	100ab90 <_strtoll_r+0x74>
 100ada8:	a4c00007 	ldb	r19,0(r20)
 100adac:	00800044 	movi	r2,1
 100adb0:	a5000044 	addi	r20,r20,1
 100adb4:	d8800115 	stw	r2,4(sp)
 100adb8:	003f7606 	br	100ab94 <_strtoll_r+0x78>
 100adbc:	d8c00117 	ldw	r3,4(sp)
 100adc0:	1805003a 	cmpeq	r2,r3,zero
 100adc4:	1000131e 	bne	r2,zero,100ae14 <_strtoll_r+0x2f8>
 100adc8:	0005883a 	mov	r2,zero
 100adcc:	00e00034 	movhi	r3,32768
 100add0:	100b883a 	mov	r5,r2
 100add4:	180d883a 	mov	r6,r3
 100add8:	d8c00217 	ldw	r3,8(sp)
 100addc:	00800884 	movi	r2,34
 100ade0:	18800015 	stw	r2,0(r3)
 100ade4:	003fb306 	br	100acb4 <_strtoll_r+0x198>
 100ade8:	a1000007 	ldb	r4,0(r20)
 100adec:	00801e04 	movi	r2,120
 100adf0:	20800226 	beq	r4,r2,100adfc <_strtoll_r+0x2e0>
 100adf4:	00801604 	movi	r2,88
 100adf8:	20bfc91e 	bne	r4,r2,100ad20 <_strtoll_r+0x204>
 100adfc:	a4c00047 	ldb	r19,1(r20)
 100ae00:	05c00404 	movi	r23,16
 100ae04:	b82b883a 	mov	r21,r23
 100ae08:	a5000084 	addi	r20,r20,2
 100ae0c:	002d883a 	mov	r22,zero
 100ae10:	003f6606 	br	100abac <_strtoll_r+0x90>
 100ae14:	017fffc4 	movi	r5,-1
 100ae18:	01a00034 	movhi	r6,32768
 100ae1c:	31bfffc4 	addi	r6,r6,-1
 100ae20:	003fed06 	br	100add8 <_strtoll_r+0x2bc>
 100ae24:	05c00204 	movi	r23,8
 100ae28:	b82b883a 	mov	r21,r23
 100ae2c:	002d883a 	mov	r22,zero
 100ae30:	003f5e06 	br	100abac <_strtoll_r+0x90>

0100ae34 <_strtoul_r>:
 100ae34:	defff604 	addi	sp,sp,-40
 100ae38:	008040b4 	movhi	r2,258
 100ae3c:	10a8f704 	addi	r2,r2,-23588
 100ae40:	dd000415 	stw	r20,16(sp)
 100ae44:	15000017 	ldw	r20,0(r2)
 100ae48:	ddc00715 	stw	r23,28(sp)
 100ae4c:	dd800615 	stw	r22,24(sp)
 100ae50:	dd400515 	stw	r21,20(sp)
 100ae54:	dc800215 	stw	r18,8(sp)
 100ae58:	dc000015 	stw	r16,0(sp)
 100ae5c:	dfc00915 	stw	ra,36(sp)
 100ae60:	df000815 	stw	fp,32(sp)
 100ae64:	dcc00315 	stw	r19,12(sp)
 100ae68:	dc400115 	stw	r17,4(sp)
 100ae6c:	282b883a 	mov	r21,r5
 100ae70:	202f883a 	mov	r23,r4
 100ae74:	302d883a 	mov	r22,r6
 100ae78:	3825883a 	mov	r18,r7
 100ae7c:	2821883a 	mov	r16,r5
 100ae80:	84400007 	ldb	r17,0(r16)
 100ae84:	84000044 	addi	r16,r16,1
 100ae88:	a447883a 	add	r3,r20,r17
 100ae8c:	18800003 	ldbu	r2,0(r3)
 100ae90:	1080020c 	andi	r2,r2,8
 100ae94:	103ffa1e 	bne	r2,zero,100ae80 <_strtoul_r+0x4c>
 100ae98:	00800b44 	movi	r2,45
 100ae9c:	88805626 	beq	r17,r2,100aff8 <_strtoul_r+0x1c4>
 100aea0:	00800ac4 	movi	r2,43
 100aea4:	88805126 	beq	r17,r2,100afec <_strtoul_r+0x1b8>
 100aea8:	0039883a 	mov	fp,zero
 100aeac:	9007003a 	cmpeq	r3,r18,zero
 100aeb0:	18003b1e 	bne	r3,zero,100afa0 <_strtoul_r+0x16c>
 100aeb4:	00800404 	movi	r2,16
 100aeb8:	90803926 	beq	r18,r2,100afa0 <_strtoul_r+0x16c>
 100aebc:	013fffc4 	movi	r4,-1
 100aec0:	900b883a 	mov	r5,r18
 100aec4:	100e7bc0 	call	100e7bc <__udivsi3>
 100aec8:	013fffc4 	movi	r4,-1
 100aecc:	900b883a 	mov	r5,r18
 100aed0:	1027883a 	mov	r19,r2
 100aed4:	100e7c40 	call	100e7c4 <__umodsi3>
 100aed8:	1011883a 	mov	r8,r2
 100aedc:	900f883a 	mov	r7,r18
 100aee0:	a445883a 	add	r2,r20,r17
 100aee4:	11000003 	ldbu	r4,0(r2)
 100aee8:	000b883a 	mov	r5,zero
 100aeec:	000d883a 	mov	r6,zero
 100aef0:	20c0010c 	andi	r3,r4,4
 100aef4:	18000e26 	beq	r3,zero,100af30 <_strtoul_r+0xfc>
 100aef8:	88fff404 	addi	r3,r17,-48
 100aefc:	1c80140e 	bge	r3,r18,100af50 <_strtoul_r+0x11c>
 100af00:	30003316 	blt	r6,zero,100afd0 <_strtoul_r+0x19c>
 100af04:	99403236 	bltu	r19,r5,100afd0 <_strtoul_r+0x19c>
 100af08:	2cc03026 	beq	r5,r19,100afcc <_strtoul_r+0x198>
 100af0c:	29c5383a 	mul	r2,r5,r7
 100af10:	01800044 	movi	r6,1
 100af14:	10cb883a 	add	r5,r2,r3
 100af18:	84400007 	ldb	r17,0(r16)
 100af1c:	84000044 	addi	r16,r16,1
 100af20:	a445883a 	add	r2,r20,r17
 100af24:	11000003 	ldbu	r4,0(r2)
 100af28:	20c0010c 	andi	r3,r4,4
 100af2c:	183ff21e 	bne	r3,zero,100aef8 <_strtoul_r+0xc4>
 100af30:	208000cc 	andi	r2,r4,3
 100af34:	10000626 	beq	r2,zero,100af50 <_strtoul_r+0x11c>
 100af38:	2080004c 	andi	r2,r4,1
 100af3c:	1005003a 	cmpeq	r2,r2,zero
 100af40:	1000251e 	bne	r2,zero,100afd8 <_strtoul_r+0x1a4>
 100af44:	00800dc4 	movi	r2,55
 100af48:	8887c83a 	sub	r3,r17,r2
 100af4c:	1cbfec16 	blt	r3,r18,100af00 <_strtoul_r+0xcc>
 100af50:	3000400e 	bge	r6,zero,100b054 <_strtoul_r+0x220>
 100af54:	00800884 	movi	r2,34
 100af58:	017fffc4 	movi	r5,-1
 100af5c:	b8800015 	stw	r2,0(r23)
 100af60:	b0000226 	beq	r22,zero,100af6c <_strtoul_r+0x138>
 100af64:	30001f1e 	bne	r6,zero,100afe4 <_strtoul_r+0x1b0>
 100af68:	b5400015 	stw	r21,0(r22)
 100af6c:	2805883a 	mov	r2,r5
 100af70:	dfc00917 	ldw	ra,36(sp)
 100af74:	df000817 	ldw	fp,32(sp)
 100af78:	ddc00717 	ldw	r23,28(sp)
 100af7c:	dd800617 	ldw	r22,24(sp)
 100af80:	dd400517 	ldw	r21,20(sp)
 100af84:	dd000417 	ldw	r20,16(sp)
 100af88:	dcc00317 	ldw	r19,12(sp)
 100af8c:	dc800217 	ldw	r18,8(sp)
 100af90:	dc400117 	ldw	r17,4(sp)
 100af94:	dc000017 	ldw	r16,0(sp)
 100af98:	dec00a04 	addi	sp,sp,40
 100af9c:	f800283a 	ret
 100afa0:	00800c04 	movi	r2,48
 100afa4:	88801826 	beq	r17,r2,100b008 <_strtoul_r+0x1d4>
 100afa8:	183fc426 	beq	r3,zero,100aebc <_strtoul_r+0x88>
 100afac:	00800c04 	movi	r2,48
 100afb0:	88802226 	beq	r17,r2,100b03c <_strtoul_r+0x208>
 100afb4:	04800284 	movi	r18,10
 100afb8:	900f883a 	mov	r7,r18
 100afbc:	04c666b4 	movhi	r19,6554
 100afc0:	9ce66644 	addi	r19,r19,-26215
 100afc4:	02000144 	movi	r8,5
 100afc8:	003fc506 	br	100aee0 <_strtoul_r+0xac>
 100afcc:	40ffcf0e 	bge	r8,r3,100af0c <_strtoul_r+0xd8>
 100afd0:	01bfffc4 	movi	r6,-1
 100afd4:	003fd006 	br	100af18 <_strtoul_r+0xe4>
 100afd8:	008015c4 	movi	r2,87
 100afdc:	8887c83a 	sub	r3,r17,r2
 100afe0:	003fda06 	br	100af4c <_strtoul_r+0x118>
 100afe4:	857fffc4 	addi	r21,r16,-1
 100afe8:	003fdf06 	br	100af68 <_strtoul_r+0x134>
 100afec:	84400007 	ldb	r17,0(r16)
 100aff0:	84000044 	addi	r16,r16,1
 100aff4:	003fac06 	br	100aea8 <_strtoul_r+0x74>
 100aff8:	84400007 	ldb	r17,0(r16)
 100affc:	07000044 	movi	fp,1
 100b000:	84000044 	addi	r16,r16,1
 100b004:	003fa906 	br	100aeac <_strtoul_r+0x78>
 100b008:	81000007 	ldb	r4,0(r16)
 100b00c:	00801e04 	movi	r2,120
 100b010:	20800226 	beq	r4,r2,100b01c <_strtoul_r+0x1e8>
 100b014:	00801604 	movi	r2,88
 100b018:	20bfe31e 	bne	r4,r2,100afa8 <_strtoul_r+0x174>
 100b01c:	84400047 	ldb	r17,1(r16)
 100b020:	04800404 	movi	r18,16
 100b024:	84000084 	addi	r16,r16,2
 100b028:	900f883a 	mov	r7,r18
 100b02c:	04c40034 	movhi	r19,4096
 100b030:	9cffffc4 	addi	r19,r19,-1
 100b034:	020003c4 	movi	r8,15
 100b038:	003fa906 	br	100aee0 <_strtoul_r+0xac>
 100b03c:	04800204 	movi	r18,8
 100b040:	900f883a 	mov	r7,r18
 100b044:	04c80034 	movhi	r19,8192
 100b048:	9cffffc4 	addi	r19,r19,-1
 100b04c:	020001c4 	movi	r8,7
 100b050:	003fa306 	br	100aee0 <_strtoul_r+0xac>
 100b054:	e005003a 	cmpeq	r2,fp,zero
 100b058:	103fc11e 	bne	r2,zero,100af60 <_strtoul_r+0x12c>
 100b05c:	014bc83a 	sub	r5,zero,r5
 100b060:	003fbf06 	br	100af60 <_strtoul_r+0x12c>

0100b064 <strtoul>:
 100b064:	008040b4 	movhi	r2,258
 100b068:	10a8f804 	addi	r2,r2,-23584
 100b06c:	2013883a 	mov	r9,r4
 100b070:	11000017 	ldw	r4,0(r2)
 100b074:	2805883a 	mov	r2,r5
 100b078:	300f883a 	mov	r7,r6
 100b07c:	480b883a 	mov	r5,r9
 100b080:	100d883a 	mov	r6,r2
 100b084:	100ae341 	jmpi	100ae34 <_strtoul_r>

0100b088 <_strtoull_r>:
 100b088:	defff104 	addi	sp,sp,-60
 100b08c:	008040b4 	movhi	r2,258
 100b090:	10a8f704 	addi	r2,r2,-23588
 100b094:	df000d15 	stw	fp,52(sp)
 100b098:	17000017 	ldw	fp,0(r2)
 100b09c:	ddc00c15 	stw	r23,48(sp)
 100b0a0:	dcc00815 	stw	r19,32(sp)
 100b0a4:	dfc00e15 	stw	ra,56(sp)
 100b0a8:	dd800b15 	stw	r22,44(sp)
 100b0ac:	dd400a15 	stw	r21,40(sp)
 100b0b0:	dd000915 	stw	r20,36(sp)
 100b0b4:	dc800715 	stw	r18,28(sp)
 100b0b8:	dc400615 	stw	r17,24(sp)
 100b0bc:	dc000515 	stw	r16,20(sp)
 100b0c0:	d9400215 	stw	r5,8(sp)
 100b0c4:	d9000115 	stw	r4,4(sp)
 100b0c8:	d9800315 	stw	r6,12(sp)
 100b0cc:	382f883a 	mov	r23,r7
 100b0d0:	2827883a 	mov	r19,r5
 100b0d4:	9d000007 	ldb	r20,0(r19)
 100b0d8:	9cc00044 	addi	r19,r19,1
 100b0dc:	e507883a 	add	r3,fp,r20
 100b0e0:	18800003 	ldbu	r2,0(r3)
 100b0e4:	1080020c 	andi	r2,r2,8
 100b0e8:	103ffa1e 	bne	r2,zero,100b0d4 <_strtoull_r+0x4c>
 100b0ec:	00800b44 	movi	r2,45
 100b0f0:	a0807a26 	beq	r20,r2,100b2dc <_strtoull_r+0x254>
 100b0f4:	00800ac4 	movi	r2,43
 100b0f8:	a0807526 	beq	r20,r2,100b2d0 <_strtoull_r+0x248>
 100b0fc:	d8000015 	stw	zero,0(sp)
 100b100:	b807003a 	cmpeq	r3,r23,zero
 100b104:	18005a1e 	bne	r3,zero,100b270 <_strtoull_r+0x1e8>
 100b108:	00800404 	movi	r2,16
 100b10c:	b8805826 	beq	r23,r2,100b270 <_strtoull_r+0x1e8>
 100b110:	b82dd7fa 	srai	r22,r23,31
 100b114:	043fffc4 	movi	r16,-1
 100b118:	8009883a 	mov	r4,r16
 100b11c:	800b883a 	mov	r5,r16
 100b120:	b80d883a 	mov	r6,r23
 100b124:	b00f883a 	mov	r7,r22
 100b128:	100c7640 	call	100c764 <__udivdi3>
 100b12c:	8009883a 	mov	r4,r16
 100b130:	800b883a 	mov	r5,r16
 100b134:	b80d883a 	mov	r6,r23
 100b138:	b00f883a 	mov	r7,r22
 100b13c:	1023883a 	mov	r17,r2
 100b140:	1825883a 	mov	r18,r3
 100b144:	100cd400 	call	100cd40 <__umoddi3>
 100b148:	b82b883a 	mov	r21,r23
 100b14c:	1019883a 	mov	r12,r2
 100b150:	e505883a 	add	r2,fp,r20
 100b154:	11000003 	ldbu	r4,0(r2)
 100b158:	0015883a 	mov	r10,zero
 100b15c:	0017883a 	mov	r11,zero
 100b160:	20c0010c 	andi	r3,r4,4
 100b164:	000d883a 	mov	r6,zero
 100b168:	18001c26 	beq	r3,zero,100b1dc <_strtoull_r+0x154>
 100b16c:	a43ff404 	addi	r16,r20,-48
 100b170:	85c0220e 	bge	r16,r23,100b1fc <_strtoull_r+0x174>
 100b174:	30003c16 	blt	r6,zero,100b268 <_strtoull_r+0x1e0>
 100b178:	92c03b36 	bltu	r18,r11,100b268 <_strtoull_r+0x1e0>
 100b17c:	5c803926 	beq	r11,r18,100b264 <_strtoull_r+0x1dc>
 100b180:	54404c26 	beq	r10,r17,100b2b4 <_strtoull_r+0x22c>
 100b184:	580b883a 	mov	r5,r11
 100b188:	5009883a 	mov	r4,r10
 100b18c:	a80d883a 	mov	r6,r21
 100b190:	b00f883a 	mov	r7,r22
 100b194:	db000415 	stw	r12,16(sp)
 100b198:	100c6280 	call	100c628 <__muldi3>
 100b19c:	8013d7fa 	srai	r9,r16,31
 100b1a0:	100d883a 	mov	r6,r2
 100b1a4:	1405883a 	add	r2,r2,r16
 100b1a8:	118d803a 	cmpltu	r6,r2,r6
 100b1ac:	1a47883a 	add	r3,r3,r9
 100b1b0:	db000417 	ldw	r12,16(sp)
 100b1b4:	30cd883a 	add	r6,r6,r3
 100b1b8:	3017883a 	mov	r11,r6
 100b1bc:	1015883a 	mov	r10,r2
 100b1c0:	01800044 	movi	r6,1
 100b1c4:	9d000007 	ldb	r20,0(r19)
 100b1c8:	9cc00044 	addi	r19,r19,1
 100b1cc:	e505883a 	add	r2,fp,r20
 100b1d0:	11000003 	ldbu	r4,0(r2)
 100b1d4:	20c0010c 	andi	r3,r4,4
 100b1d8:	183fe41e 	bne	r3,zero,100b16c <_strtoull_r+0xe4>
 100b1dc:	208000cc 	andi	r2,r4,3
 100b1e0:	10000626 	beq	r2,zero,100b1fc <_strtoull_r+0x174>
 100b1e4:	2080004c 	andi	r2,r4,1
 100b1e8:	1005003a 	cmpeq	r2,r2,zero
 100b1ec:	10002e1e 	bne	r2,zero,100b2a8 <_strtoull_r+0x220>
 100b1f0:	02000dc4 	movi	r8,55
 100b1f4:	a221c83a 	sub	r16,r20,r8
 100b1f8:	85ffde16 	blt	r16,r23,100b174 <_strtoull_r+0xec>
 100b1fc:	3000530e 	bge	r6,zero,100b34c <_strtoull_r+0x2c4>
 100b200:	d8c00117 	ldw	r3,4(sp)
 100b204:	02bfffc4 	movi	r10,-1
 100b208:	00800884 	movi	r2,34
 100b20c:	5017883a 	mov	r11,r10
 100b210:	18800015 	stw	r2,0(r3)
 100b214:	d8800317 	ldw	r2,12(sp)
 100b218:	10000426 	beq	r2,zero,100b22c <_strtoull_r+0x1a4>
 100b21c:	3000291e 	bne	r6,zero,100b2c4 <_strtoull_r+0x23c>
 100b220:	d8800217 	ldw	r2,8(sp)
 100b224:	d8c00317 	ldw	r3,12(sp)
 100b228:	18800015 	stw	r2,0(r3)
 100b22c:	5005883a 	mov	r2,r10
 100b230:	5807883a 	mov	r3,r11
 100b234:	dfc00e17 	ldw	ra,56(sp)
 100b238:	df000d17 	ldw	fp,52(sp)
 100b23c:	ddc00c17 	ldw	r23,48(sp)
 100b240:	dd800b17 	ldw	r22,44(sp)
 100b244:	dd400a17 	ldw	r21,40(sp)
 100b248:	dd000917 	ldw	r20,36(sp)
 100b24c:	dcc00817 	ldw	r19,32(sp)
 100b250:	dc800717 	ldw	r18,28(sp)
 100b254:	dc400617 	ldw	r17,24(sp)
 100b258:	dc000517 	ldw	r16,20(sp)
 100b25c:	dec00f04 	addi	sp,sp,60
 100b260:	f800283a 	ret
 100b264:	8abfc62e 	bgeu	r17,r10,100b180 <_strtoull_r+0xf8>
 100b268:	01bfffc4 	movi	r6,-1
 100b26c:	003fd506 	br	100b1c4 <_strtoull_r+0x13c>
 100b270:	00800c04 	movi	r2,48
 100b274:	a0801e26 	beq	r20,r2,100b2f0 <_strtoull_r+0x268>
 100b278:	183fa526 	beq	r3,zero,100b110 <_strtoull_r+0x88>
 100b27c:	00800c04 	movi	r2,48
 100b280:	a0802a26 	beq	r20,r2,100b32c <_strtoull_r+0x2a4>
 100b284:	05c00284 	movi	r23,10
 100b288:	b82b883a 	mov	r21,r23
 100b28c:	046666b4 	movhi	r17,39322
 100b290:	8c666644 	addi	r17,r17,-26215
 100b294:	002d883a 	mov	r22,zero
 100b298:	048666b4 	movhi	r18,6554
 100b29c:	94a66644 	addi	r18,r18,-26215
 100b2a0:	03000144 	movi	r12,5
 100b2a4:	003faa06 	br	100b150 <_strtoull_r+0xc8>
 100b2a8:	020015c4 	movi	r8,87
 100b2ac:	a221c83a 	sub	r16,r20,r8
 100b2b0:	003fd106 	br	100b1f8 <_strtoull_r+0x170>
 100b2b4:	5cbfb31e 	bne	r11,r18,100b184 <_strtoull_r+0xfc>
 100b2b8:	643fb20e 	bge	r12,r16,100b184 <_strtoull_r+0xfc>
 100b2bc:	01bfffc4 	movi	r6,-1
 100b2c0:	003fc006 	br	100b1c4 <_strtoull_r+0x13c>
 100b2c4:	9cffffc4 	addi	r19,r19,-1
 100b2c8:	dcc00215 	stw	r19,8(sp)
 100b2cc:	003fd406 	br	100b220 <_strtoull_r+0x198>
 100b2d0:	9d000007 	ldb	r20,0(r19)
 100b2d4:	9cc00044 	addi	r19,r19,1
 100b2d8:	003f8806 	br	100b0fc <_strtoull_r+0x74>
 100b2dc:	9d000007 	ldb	r20,0(r19)
 100b2e0:	00800044 	movi	r2,1
 100b2e4:	9cc00044 	addi	r19,r19,1
 100b2e8:	d8800015 	stw	r2,0(sp)
 100b2ec:	003f8406 	br	100b100 <_strtoull_r+0x78>
 100b2f0:	99000007 	ldb	r4,0(r19)
 100b2f4:	00801e04 	movi	r2,120
 100b2f8:	20800226 	beq	r4,r2,100b304 <_strtoull_r+0x27c>
 100b2fc:	00801604 	movi	r2,88
 100b300:	20bfdd1e 	bne	r4,r2,100b278 <_strtoull_r+0x1f0>
 100b304:	9d000047 	ldb	r20,1(r19)
 100b308:	05c00404 	movi	r23,16
 100b30c:	b82b883a 	mov	r21,r23
 100b310:	047fffc4 	movi	r17,-1
 100b314:	9cc00084 	addi	r19,r19,2
 100b318:	002d883a 	mov	r22,zero
 100b31c:	04840034 	movhi	r18,4096
 100b320:	94bfffc4 	addi	r18,r18,-1
 100b324:	030003c4 	movi	r12,15
 100b328:	003f8906 	br	100b150 <_strtoull_r+0xc8>
 100b32c:	05c00204 	movi	r23,8
 100b330:	b82b883a 	mov	r21,r23
 100b334:	047fffc4 	movi	r17,-1
 100b338:	002d883a 	mov	r22,zero
 100b33c:	04880034 	movhi	r18,8192
 100b340:	94bfffc4 	addi	r18,r18,-1
 100b344:	030001c4 	movi	r12,7
 100b348:	003f8106 	br	100b150 <_strtoull_r+0xc8>
 100b34c:	d8c00017 	ldw	r3,0(sp)
 100b350:	1805003a 	cmpeq	r2,r3,zero
 100b354:	103faf1e 	bne	r2,zero,100b214 <_strtoull_r+0x18c>
 100b358:	0009883a 	mov	r4,zero
 100b35c:	2285c83a 	sub	r2,r4,r10
 100b360:	02c7c83a 	sub	r3,zero,r11
 100b364:	2089803a 	cmpltu	r4,r4,r2
 100b368:	1909c83a 	sub	r4,r3,r4
 100b36c:	1015883a 	mov	r10,r2
 100b370:	2017883a 	mov	r11,r4
 100b374:	003fa706 	br	100b214 <_strtoull_r+0x18c>

0100b378 <__submore>:
 100b378:	defffa04 	addi	sp,sp,-24
 100b37c:	28c00c17 	ldw	r3,48(r5)
 100b380:	dc800215 	stw	r18,8(sp)
 100b384:	2825883a 	mov	r18,r5
 100b388:	dc000015 	stw	r16,0(sp)
 100b38c:	90801004 	addi	r2,r18,64
 100b390:	04010004 	movi	r16,1024
 100b394:	dfc00515 	stw	ra,20(sp)
 100b398:	dd000415 	stw	r20,16(sp)
 100b39c:	dcc00315 	stw	r19,12(sp)
 100b3a0:	dc400115 	stw	r17,4(sp)
 100b3a4:	800b883a 	mov	r5,r16
 100b3a8:	18801b26 	beq	r3,r2,100b418 <__submore+0xa0>
 100b3ac:	94400d17 	ldw	r17,52(r18)
 100b3b0:	180b883a 	mov	r5,r3
 100b3b4:	8c69883a 	add	r20,r17,r17
 100b3b8:	a00d883a 	mov	r6,r20
 100b3bc:	10085f00 	call	10085f0 <_realloc_r>
 100b3c0:	1467883a 	add	r19,r2,r17
 100b3c4:	1021883a 	mov	r16,r2
 100b3c8:	880d883a 	mov	r6,r17
 100b3cc:	9809883a 	mov	r4,r19
 100b3d0:	100b883a 	mov	r5,r2
 100b3d4:	10000e26 	beq	r2,zero,100b410 <__submore+0x98>
 100b3d8:	10073e40 	call	10073e4 <memcpy>
 100b3dc:	000d883a 	mov	r6,zero
 100b3e0:	95000d15 	stw	r20,52(r18)
 100b3e4:	94c00015 	stw	r19,0(r18)
 100b3e8:	94000c15 	stw	r16,48(r18)
 100b3ec:	3005883a 	mov	r2,r6
 100b3f0:	dfc00517 	ldw	ra,20(sp)
 100b3f4:	dd000417 	ldw	r20,16(sp)
 100b3f8:	dcc00317 	ldw	r19,12(sp)
 100b3fc:	dc800217 	ldw	r18,8(sp)
 100b400:	dc400117 	ldw	r17,4(sp)
 100b404:	dc000017 	ldw	r16,0(sp)
 100b408:	dec00604 	addi	sp,sp,24
 100b40c:	f800283a 	ret
 100b410:	01bfffc4 	movi	r6,-1
 100b414:	003ff506 	br	100b3ec <__submore+0x74>
 100b418:	1006ac00 	call	1006ac0 <_malloc_r>
 100b41c:	1009883a 	mov	r4,r2
 100b420:	1140ff44 	addi	r5,r2,1021
 100b424:	000d883a 	mov	r6,zero
 100b428:	103ff926 	beq	r2,zero,100b410 <__submore+0x98>
 100b42c:	90801083 	ldbu	r2,66(r18)
 100b430:	94000d15 	stw	r16,52(r18)
 100b434:	91000c15 	stw	r4,48(r18)
 100b438:	28800085 	stb	r2,2(r5)
 100b43c:	90c01043 	ldbu	r3,65(r18)
 100b440:	28c00045 	stb	r3,1(r5)
 100b444:	90801003 	ldbu	r2,64(r18)
 100b448:	2080ff45 	stb	r2,1021(r4)
 100b44c:	91400015 	stw	r5,0(r18)
 100b450:	003fe606 	br	100b3ec <__submore+0x74>

0100b454 <_ungetc_r>:
 100b454:	defffc04 	addi	sp,sp,-16
 100b458:	00bfffc4 	movi	r2,-1
 100b45c:	dc400215 	stw	r17,8(sp)
 100b460:	dc000115 	stw	r16,4(sp)
 100b464:	dfc00315 	stw	ra,12(sp)
 100b468:	2821883a 	mov	r16,r5
 100b46c:	2023883a 	mov	r17,r4
 100b470:	28801826 	beq	r5,r2,100b4d4 <_ungetc_r+0x80>
 100b474:	20000226 	beq	r4,zero,100b480 <_ungetc_r+0x2c>
 100b478:	20800e17 	ldw	r2,56(r4)
 100b47c:	10001b26 	beq	r2,zero,100b4ec <_ungetc_r+0x98>
 100b480:	3100030b 	ldhu	r4,12(r6)
 100b484:	00bff7c4 	movi	r2,-33
 100b488:	2084703a 	and	r2,r4,r2
 100b48c:	117fffcc 	andi	r5,r2,65535
 100b490:	28c0010c 	andi	r3,r5,4
 100b494:	1009883a 	mov	r4,r2
 100b498:	3080030d 	sth	r2,12(r6)
 100b49c:	18003526 	beq	r3,zero,100b574 <_ungetc_r+0x120>
 100b4a0:	30800c17 	ldw	r2,48(r6)
 100b4a4:	84003fcc 	andi	r16,r16,255
 100b4a8:	10001426 	beq	r2,zero,100b4fc <_ungetc_r+0xa8>
 100b4ac:	30c00117 	ldw	r3,4(r6)
 100b4b0:	30800d17 	ldw	r2,52(r6)
 100b4b4:	1880380e 	bge	r3,r2,100b598 <_ungetc_r+0x144>
 100b4b8:	30c00017 	ldw	r3,0(r6)
 100b4bc:	19ffffc4 	addi	r7,r3,-1
 100b4c0:	31c00015 	stw	r7,0(r6)
 100b4c4:	1c3fffc5 	stb	r16,-1(r3)
 100b4c8:	30800117 	ldw	r2,4(r6)
 100b4cc:	10800044 	addi	r2,r2,1
 100b4d0:	30800115 	stw	r2,4(r6)
 100b4d4:	8005883a 	mov	r2,r16
 100b4d8:	dfc00317 	ldw	ra,12(sp)
 100b4dc:	dc400217 	ldw	r17,8(sp)
 100b4e0:	dc000117 	ldw	r16,4(sp)
 100b4e4:	dec00404 	addi	sp,sp,16
 100b4e8:	f800283a 	ret
 100b4ec:	d9800015 	stw	r6,0(sp)
 100b4f0:	100594c0 	call	100594c <__sinit>
 100b4f4:	d9800017 	ldw	r6,0(sp)
 100b4f8:	003fe106 	br	100b480 <_ungetc_r+0x2c>
 100b4fc:	30800417 	ldw	r2,16(r6)
 100b500:	10002326 	beq	r2,zero,100b590 <_ungetc_r+0x13c>
 100b504:	31c00017 	ldw	r7,0(r6)
 100b508:	11c0022e 	bgeu	r2,r7,100b514 <_ungetc_r+0xc0>
 100b50c:	38bfffc3 	ldbu	r2,-1(r7)
 100b510:	80801226 	beq	r16,r2,100b55c <_ungetc_r+0x108>
 100b514:	30c00117 	ldw	r3,4(r6)
 100b518:	00800044 	movi	r2,1
 100b51c:	30800115 	stw	r2,4(r6)
 100b520:	008000c4 	movi	r2,3
 100b524:	31001004 	addi	r4,r6,64
 100b528:	31401084 	addi	r5,r6,66
 100b52c:	30800d15 	stw	r2,52(r6)
 100b530:	8005883a 	mov	r2,r16
 100b534:	30c00f15 	stw	r3,60(r6)
 100b538:	31c00e15 	stw	r7,56(r6)
 100b53c:	31000c15 	stw	r4,48(r6)
 100b540:	31400015 	stw	r5,0(r6)
 100b544:	34001085 	stb	r16,66(r6)
 100b548:	dfc00317 	ldw	ra,12(sp)
 100b54c:	dc400217 	ldw	r17,8(sp)
 100b550:	dc000117 	ldw	r16,4(sp)
 100b554:	dec00404 	addi	sp,sp,16
 100b558:	f800283a 	ret
 100b55c:	30800117 	ldw	r2,4(r6)
 100b560:	39ffffc4 	addi	r7,r7,-1
 100b564:	31c00015 	stw	r7,0(r6)
 100b568:	10800044 	addi	r2,r2,1
 100b56c:	30800115 	stw	r2,4(r6)
 100b570:	003fd806 	br	100b4d4 <_ungetc_r+0x80>
 100b574:	2880040c 	andi	r2,r5,16
 100b578:	10000d26 	beq	r2,zero,100b5b0 <_ungetc_r+0x15c>
 100b57c:	2880020c 	andi	r2,r5,8
 100b580:	10000d1e 	bne	r2,zero,100b5b8 <_ungetc_r+0x164>
 100b584:	20800114 	ori	r2,r4,4
 100b588:	3080030d 	sth	r2,12(r6)
 100b58c:	003fc406 	br	100b4a0 <_ungetc_r+0x4c>
 100b590:	31c00017 	ldw	r7,0(r6)
 100b594:	003fdf06 	br	100b514 <_ungetc_r+0xc0>
 100b598:	300b883a 	mov	r5,r6
 100b59c:	8809883a 	mov	r4,r17
 100b5a0:	d9800015 	stw	r6,0(sp)
 100b5a4:	100b3780 	call	100b378 <__submore>
 100b5a8:	d9800017 	ldw	r6,0(sp)
 100b5ac:	103fc226 	beq	r2,zero,100b4b8 <_ungetc_r+0x64>
 100b5b0:	043fffc4 	movi	r16,-1
 100b5b4:	003fc706 	br	100b4d4 <_ungetc_r+0x80>
 100b5b8:	300b883a 	mov	r5,r6
 100b5bc:	8809883a 	mov	r4,r17
 100b5c0:	d9800015 	stw	r6,0(sp)
 100b5c4:	10056b40 	call	10056b4 <_fflush_r>
 100b5c8:	d9800017 	ldw	r6,0(sp)
 100b5cc:	103ff81e 	bne	r2,zero,100b5b0 <_ungetc_r+0x15c>
 100b5d0:	3100030b 	ldhu	r4,12(r6)
 100b5d4:	00bffdc4 	movi	r2,-9
 100b5d8:	30000215 	stw	zero,8(r6)
 100b5dc:	2084703a 	and	r2,r4,r2
 100b5e0:	1009883a 	mov	r4,r2
 100b5e4:	3080030d 	sth	r2,12(r6)
 100b5e8:	30000615 	stw	zero,24(r6)
 100b5ec:	003fe506 	br	100b584 <_ungetc_r+0x130>

0100b5f0 <ungetc>:
 100b5f0:	018040b4 	movhi	r6,258
 100b5f4:	31a8f804 	addi	r6,r6,-23584
 100b5f8:	2007883a 	mov	r3,r4
 100b5fc:	31000017 	ldw	r4,0(r6)
 100b600:	280d883a 	mov	r6,r5
 100b604:	180b883a 	mov	r5,r3
 100b608:	100b4541 	jmpi	100b454 <_ungetc_r>

0100b60c <_write_r>:
 100b60c:	defffd04 	addi	sp,sp,-12
 100b610:	dc000015 	stw	r16,0(sp)
 100b614:	040040b4 	movhi	r16,258
 100b618:	842fd104 	addi	r16,r16,-16572
 100b61c:	dc400115 	stw	r17,4(sp)
 100b620:	80000015 	stw	zero,0(r16)
 100b624:	2023883a 	mov	r17,r4
 100b628:	2809883a 	mov	r4,r5
 100b62c:	300b883a 	mov	r5,r6
 100b630:	380d883a 	mov	r6,r7
 100b634:	dfc00215 	stw	ra,8(sp)
 100b638:	100f9bc0 	call	100f9bc <write>
 100b63c:	1007883a 	mov	r3,r2
 100b640:	00bfffc4 	movi	r2,-1
 100b644:	18800626 	beq	r3,r2,100b660 <_write_r+0x54>
 100b648:	1805883a 	mov	r2,r3
 100b64c:	dfc00217 	ldw	ra,8(sp)
 100b650:	dc400117 	ldw	r17,4(sp)
 100b654:	dc000017 	ldw	r16,0(sp)
 100b658:	dec00304 	addi	sp,sp,12
 100b65c:	f800283a 	ret
 100b660:	80800017 	ldw	r2,0(r16)
 100b664:	103ff826 	beq	r2,zero,100b648 <_write_r+0x3c>
 100b668:	88800015 	stw	r2,0(r17)
 100b66c:	1805883a 	mov	r2,r3
 100b670:	dfc00217 	ldw	ra,8(sp)
 100b674:	dc400117 	ldw	r17,4(sp)
 100b678:	dc000017 	ldw	r16,0(sp)
 100b67c:	dec00304 	addi	sp,sp,12
 100b680:	f800283a 	ret

0100b684 <_calloc_r>:
 100b684:	298b383a 	mul	r5,r5,r6
 100b688:	defffe04 	addi	sp,sp,-8
 100b68c:	dc000015 	stw	r16,0(sp)
 100b690:	dfc00115 	stw	ra,4(sp)
 100b694:	1006ac00 	call	1006ac0 <_malloc_r>
 100b698:	1021883a 	mov	r16,r2
 100b69c:	01c00904 	movi	r7,36
 100b6a0:	10000d26 	beq	r2,zero,100b6d8 <_calloc_r+0x54>
 100b6a4:	10ffff17 	ldw	r3,-4(r2)
 100b6a8:	1009883a 	mov	r4,r2
 100b6ac:	00bfff04 	movi	r2,-4
 100b6b0:	1886703a 	and	r3,r3,r2
 100b6b4:	1887883a 	add	r3,r3,r2
 100b6b8:	180d883a 	mov	r6,r3
 100b6bc:	000b883a 	mov	r5,zero
 100b6c0:	38c01736 	bltu	r7,r3,100b720 <_calloc_r+0x9c>
 100b6c4:	008004c4 	movi	r2,19
 100b6c8:	10c00836 	bltu	r2,r3,100b6ec <_calloc_r+0x68>
 100b6cc:	20000215 	stw	zero,8(r4)
 100b6d0:	20000015 	stw	zero,0(r4)
 100b6d4:	20000115 	stw	zero,4(r4)
 100b6d8:	8005883a 	mov	r2,r16
 100b6dc:	dfc00117 	ldw	ra,4(sp)
 100b6e0:	dc000017 	ldw	r16,0(sp)
 100b6e4:	dec00204 	addi	sp,sp,8
 100b6e8:	f800283a 	ret
 100b6ec:	008006c4 	movi	r2,27
 100b6f0:	80000015 	stw	zero,0(r16)
 100b6f4:	80000115 	stw	zero,4(r16)
 100b6f8:	81000204 	addi	r4,r16,8
 100b6fc:	10fff32e 	bgeu	r2,r3,100b6cc <_calloc_r+0x48>
 100b700:	80000215 	stw	zero,8(r16)
 100b704:	80000315 	stw	zero,12(r16)
 100b708:	81000404 	addi	r4,r16,16
 100b70c:	19ffef1e 	bne	r3,r7,100b6cc <_calloc_r+0x48>
 100b710:	81000604 	addi	r4,r16,24
 100b714:	80000415 	stw	zero,16(r16)
 100b718:	80000515 	stw	zero,20(r16)
 100b71c:	003feb06 	br	100b6cc <_calloc_r+0x48>
 100b720:	10075640 	call	1007564 <memset>
 100b724:	8005883a 	mov	r2,r16
 100b728:	dfc00117 	ldw	ra,4(sp)
 100b72c:	dc000017 	ldw	r16,0(sp)
 100b730:	dec00204 	addi	sp,sp,8
 100b734:	f800283a 	ret

0100b738 <_close_r>:
 100b738:	defffd04 	addi	sp,sp,-12
 100b73c:	dc000015 	stw	r16,0(sp)
 100b740:	040040b4 	movhi	r16,258
 100b744:	842fd104 	addi	r16,r16,-16572
 100b748:	dc400115 	stw	r17,4(sp)
 100b74c:	80000015 	stw	zero,0(r16)
 100b750:	2023883a 	mov	r17,r4
 100b754:	2809883a 	mov	r4,r5
 100b758:	dfc00215 	stw	ra,8(sp)
 100b75c:	100f05c0 	call	100f05c <close>
 100b760:	1007883a 	mov	r3,r2
 100b764:	00bfffc4 	movi	r2,-1
 100b768:	18800626 	beq	r3,r2,100b784 <_close_r+0x4c>
 100b76c:	1805883a 	mov	r2,r3
 100b770:	dfc00217 	ldw	ra,8(sp)
 100b774:	dc400117 	ldw	r17,4(sp)
 100b778:	dc000017 	ldw	r16,0(sp)
 100b77c:	dec00304 	addi	sp,sp,12
 100b780:	f800283a 	ret
 100b784:	80800017 	ldw	r2,0(r16)
 100b788:	103ff826 	beq	r2,zero,100b76c <_close_r+0x34>
 100b78c:	88800015 	stw	r2,0(r17)
 100b790:	1805883a 	mov	r2,r3
 100b794:	dfc00217 	ldw	ra,8(sp)
 100b798:	dc400117 	ldw	r17,4(sp)
 100b79c:	dc000017 	ldw	r16,0(sp)
 100b7a0:	dec00304 	addi	sp,sp,12
 100b7a4:	f800283a 	ret

0100b7a8 <_fclose_r>:
 100b7a8:	defffc04 	addi	sp,sp,-16
 100b7ac:	dc400115 	stw	r17,4(sp)
 100b7b0:	dc000015 	stw	r16,0(sp)
 100b7b4:	dfc00315 	stw	ra,12(sp)
 100b7b8:	dc800215 	stw	r18,8(sp)
 100b7bc:	2821883a 	mov	r16,r5
 100b7c0:	2023883a 	mov	r17,r4
 100b7c4:	28002926 	beq	r5,zero,100b86c <_fclose_r+0xc4>
 100b7c8:	100593c0 	call	100593c <__sfp_lock_acquire>
 100b7cc:	88000226 	beq	r17,zero,100b7d8 <_fclose_r+0x30>
 100b7d0:	88800e17 	ldw	r2,56(r17)
 100b7d4:	10002d26 	beq	r2,zero,100b88c <_fclose_r+0xe4>
 100b7d8:	8080030f 	ldh	r2,12(r16)
 100b7dc:	10002226 	beq	r2,zero,100b868 <_fclose_r+0xc0>
 100b7e0:	8809883a 	mov	r4,r17
 100b7e4:	800b883a 	mov	r5,r16
 100b7e8:	10056b40 	call	10056b4 <_fflush_r>
 100b7ec:	1025883a 	mov	r18,r2
 100b7f0:	80800b17 	ldw	r2,44(r16)
 100b7f4:	10000426 	beq	r2,zero,100b808 <_fclose_r+0x60>
 100b7f8:	81400717 	ldw	r5,28(r16)
 100b7fc:	8809883a 	mov	r4,r17
 100b800:	103ee83a 	callr	r2
 100b804:	10002a16 	blt	r2,zero,100b8b0 <_fclose_r+0x108>
 100b808:	8080030b 	ldhu	r2,12(r16)
 100b80c:	1080200c 	andi	r2,r2,128
 100b810:	1000231e 	bne	r2,zero,100b8a0 <_fclose_r+0xf8>
 100b814:	81400c17 	ldw	r5,48(r16)
 100b818:	28000526 	beq	r5,zero,100b830 <_fclose_r+0x88>
 100b81c:	80801004 	addi	r2,r16,64
 100b820:	28800226 	beq	r5,r2,100b82c <_fclose_r+0x84>
 100b824:	8809883a 	mov	r4,r17
 100b828:	1005f0c0 	call	1005f0c <_free_r>
 100b82c:	80000c15 	stw	zero,48(r16)
 100b830:	81401117 	ldw	r5,68(r16)
 100b834:	28000326 	beq	r5,zero,100b844 <_fclose_r+0x9c>
 100b838:	8809883a 	mov	r4,r17
 100b83c:	1005f0c0 	call	1005f0c <_free_r>
 100b840:	80001115 	stw	zero,68(r16)
 100b844:	8000030d 	sth	zero,12(r16)
 100b848:	10059400 	call	1005940 <__sfp_lock_release>
 100b84c:	9005883a 	mov	r2,r18
 100b850:	dfc00317 	ldw	ra,12(sp)
 100b854:	dc800217 	ldw	r18,8(sp)
 100b858:	dc400117 	ldw	r17,4(sp)
 100b85c:	dc000017 	ldw	r16,0(sp)
 100b860:	dec00404 	addi	sp,sp,16
 100b864:	f800283a 	ret
 100b868:	10059400 	call	1005940 <__sfp_lock_release>
 100b86c:	0025883a 	mov	r18,zero
 100b870:	9005883a 	mov	r2,r18
 100b874:	dfc00317 	ldw	ra,12(sp)
 100b878:	dc800217 	ldw	r18,8(sp)
 100b87c:	dc400117 	ldw	r17,4(sp)
 100b880:	dc000017 	ldw	r16,0(sp)
 100b884:	dec00404 	addi	sp,sp,16
 100b888:	f800283a 	ret
 100b88c:	8809883a 	mov	r4,r17
 100b890:	100594c0 	call	100594c <__sinit>
 100b894:	8080030f 	ldh	r2,12(r16)
 100b898:	103fd11e 	bne	r2,zero,100b7e0 <_fclose_r+0x38>
 100b89c:	003ff206 	br	100b868 <_fclose_r+0xc0>
 100b8a0:	81400417 	ldw	r5,16(r16)
 100b8a4:	8809883a 	mov	r4,r17
 100b8a8:	1005f0c0 	call	1005f0c <_free_r>
 100b8ac:	003fd906 	br	100b814 <_fclose_r+0x6c>
 100b8b0:	04bfffc4 	movi	r18,-1
 100b8b4:	003fd406 	br	100b808 <_fclose_r+0x60>

0100b8b8 <fclose>:
 100b8b8:	008040b4 	movhi	r2,258
 100b8bc:	10a8f804 	addi	r2,r2,-23584
 100b8c0:	200b883a 	mov	r5,r4
 100b8c4:	11000017 	ldw	r4,0(r2)
 100b8c8:	100b7a81 	jmpi	100b7a8 <_fclose_r>

0100b8cc <_fstat_r>:
 100b8cc:	defffd04 	addi	sp,sp,-12
 100b8d0:	dc000015 	stw	r16,0(sp)
 100b8d4:	040040b4 	movhi	r16,258
 100b8d8:	842fd104 	addi	r16,r16,-16572
 100b8dc:	dc400115 	stw	r17,4(sp)
 100b8e0:	80000015 	stw	zero,0(r16)
 100b8e4:	2023883a 	mov	r17,r4
 100b8e8:	2809883a 	mov	r4,r5
 100b8ec:	300b883a 	mov	r5,r6
 100b8f0:	dfc00215 	stw	ra,8(sp)
 100b8f4:	100f1e40 	call	100f1e4 <fstat>
 100b8f8:	1007883a 	mov	r3,r2
 100b8fc:	00bfffc4 	movi	r2,-1
 100b900:	18800626 	beq	r3,r2,100b91c <_fstat_r+0x50>
 100b904:	1805883a 	mov	r2,r3
 100b908:	dfc00217 	ldw	ra,8(sp)
 100b90c:	dc400117 	ldw	r17,4(sp)
 100b910:	dc000017 	ldw	r16,0(sp)
 100b914:	dec00304 	addi	sp,sp,12
 100b918:	f800283a 	ret
 100b91c:	80800017 	ldw	r2,0(r16)
 100b920:	103ff826 	beq	r2,zero,100b904 <_fstat_r+0x38>
 100b924:	88800015 	stw	r2,0(r17)
 100b928:	1805883a 	mov	r2,r3
 100b92c:	dfc00217 	ldw	ra,8(sp)
 100b930:	dc400117 	ldw	r17,4(sp)
 100b934:	dc000017 	ldw	r16,0(sp)
 100b938:	dec00304 	addi	sp,sp,12
 100b93c:	f800283a 	ret

0100b940 <htinit>:
 100b940:	28800003 	ldbu	r2,0(r5)
 100b944:	10000626 	beq	r2,zero,100b960 <htinit+0x20>
 100b948:	1105883a 	add	r2,r2,r4
 100b94c:	11800005 	stb	r6,0(r2)
 100b950:	28800043 	ldbu	r2,1(r5)
 100b954:	31800044 	addi	r6,r6,1
 100b958:	29400044 	addi	r5,r5,1
 100b95c:	103ffa1e 	bne	r2,zero,100b948 <htinit+0x8>
 100b960:	f800283a 	ret

0100b964 <__hexdig_init>:
 100b964:	defffd04 	addi	sp,sp,-12
 100b968:	dc400015 	stw	r17,0(sp)
 100b96c:	044040b4 	movhi	r17,258
 100b970:	8c6fef04 	addi	r17,r17,-16452
 100b974:	dcc00115 	stw	r19,4(sp)
 100b978:	8809883a 	mov	r4,r17
 100b97c:	04c00684 	movi	r19,26
 100b980:	014040b4 	movhi	r5,258
 100b984:	2961a704 	addi	r5,r5,-31076
 100b988:	01800404 	movi	r6,16
 100b98c:	dfc00215 	stw	ra,8(sp)
 100b990:	100b9400 	call	100b940 <htinit>
 100b994:	980d883a 	mov	r6,r19
 100b998:	8809883a 	mov	r4,r17
 100b99c:	014040b4 	movhi	r5,258
 100b9a0:	2961aa04 	addi	r5,r5,-31064
 100b9a4:	100b9400 	call	100b940 <htinit>
 100b9a8:	8809883a 	mov	r4,r17
 100b9ac:	980d883a 	mov	r6,r19
 100b9b0:	014040b4 	movhi	r5,258
 100b9b4:	2961ac04 	addi	r5,r5,-31056
 100b9b8:	dfc00217 	ldw	ra,8(sp)
 100b9bc:	dcc00117 	ldw	r19,4(sp)
 100b9c0:	dc400017 	ldw	r17,0(sp)
 100b9c4:	dec00304 	addi	sp,sp,12
 100b9c8:	100b9401 	jmpi	100b940 <htinit>

0100b9cc <rshift>:
 100b9cc:	2807d17a 	srai	r3,r5,5
 100b9d0:	20800417 	ldw	r2,16(r4)
 100b9d4:	22400504 	addi	r9,r4,20
 100b9d8:	480f883a 	mov	r7,r9
 100b9dc:	1880190e 	bge	r3,r2,100ba44 <rshift+0x78>
 100b9e0:	1085883a 	add	r2,r2,r2
 100b9e4:	18c7883a 	add	r3,r3,r3
 100b9e8:	1085883a 	add	r2,r2,r2
 100b9ec:	18c7883a 	add	r3,r3,r3
 100b9f0:	294007cc 	andi	r5,r5,31
 100b9f4:	4891883a 	add	r8,r9,r2
 100b9f8:	48cd883a 	add	r6,r9,r3
 100b9fc:	28001726 	beq	r5,zero,100ba5c <rshift+0x90>
 100ba00:	30c00017 	ldw	r3,0(r6)
 100ba04:	00800804 	movi	r2,32
 100ba08:	31800104 	addi	r6,r6,4
 100ba0c:	1155c83a 	sub	r10,r2,r5
 100ba10:	1946d83a 	srl	r3,r3,r5
 100ba14:	3200092e 	bgeu	r6,r8,100ba3c <rshift+0x70>
 100ba18:	30800017 	ldw	r2,0(r6)
 100ba1c:	1284983a 	sll	r2,r2,r10
 100ba20:	10c4b03a 	or	r2,r2,r3
 100ba24:	38800015 	stw	r2,0(r7)
 100ba28:	30c00017 	ldw	r3,0(r6)
 100ba2c:	31800104 	addi	r6,r6,4
 100ba30:	39c00104 	addi	r7,r7,4
 100ba34:	1946d83a 	srl	r3,r3,r5
 100ba38:	323ff736 	bltu	r6,r8,100ba18 <rshift+0x4c>
 100ba3c:	38c00015 	stw	r3,0(r7)
 100ba40:	18000c1e 	bne	r3,zero,100ba74 <rshift+0xa8>
 100ba44:	3a45c83a 	sub	r2,r7,r9
 100ba48:	1005d0ba 	srai	r2,r2,2
 100ba4c:	20800415 	stw	r2,16(r4)
 100ba50:	1000011e 	bne	r2,zero,100ba58 <rshift+0x8c>
 100ba54:	20000515 	stw	zero,20(r4)
 100ba58:	f800283a 	ret
 100ba5c:	323ff92e 	bgeu	r6,r8,100ba44 <rshift+0x78>
 100ba60:	30800017 	ldw	r2,0(r6)
 100ba64:	31800104 	addi	r6,r6,4
 100ba68:	38800015 	stw	r2,0(r7)
 100ba6c:	39c00104 	addi	r7,r7,4
 100ba70:	003ffa06 	br	100ba5c <rshift+0x90>
 100ba74:	39c00104 	addi	r7,r7,4
 100ba78:	003ff206 	br	100ba44 <rshift+0x78>

0100ba7c <__gethex>:
 100ba7c:	defff304 	addi	sp,sp,-52
 100ba80:	dd400815 	stw	r21,32(sp)
 100ba84:	dd000715 	stw	r20,28(sp)
 100ba88:	dcc00615 	stw	r19,24(sp)
 100ba8c:	dc400415 	stw	r17,16(sp)
 100ba90:	dfc00c15 	stw	ra,48(sp)
 100ba94:	df000b15 	stw	fp,44(sp)
 100ba98:	ddc00a15 	stw	r23,40(sp)
 100ba9c:	dd800915 	stw	r22,36(sp)
 100baa0:	dc800515 	stw	r18,20(sp)
 100baa4:	dc000315 	stw	r16,12(sp)
 100baa8:	044040b4 	movhi	r17,258
 100baac:	8c6fef04 	addi	r17,r17,-16452
 100bab0:	88800c03 	ldbu	r2,48(r17)
 100bab4:	202b883a 	mov	r21,r4
 100bab8:	2827883a 	mov	r19,r5
 100babc:	3029883a 	mov	r20,r6
 100bac0:	d9c00115 	stw	r7,4(sp)
 100bac4:	10006e26 	beq	r2,zero,100bc80 <__gethex+0x204>
 100bac8:	99800017 	ldw	r6,0(r19)
 100bacc:	00800c04 	movi	r2,48
 100bad0:	31000083 	ldbu	r4,2(r6)
 100bad4:	30c00084 	addi	r3,r6,2
 100bad8:	20806f1e 	bne	r4,r2,100bc98 <__gethex+0x21c>
 100badc:	200b883a 	mov	r5,r4
 100bae0:	3007883a 	mov	r3,r6
 100bae4:	188000c3 	ldbu	r2,3(r3)
 100bae8:	18c00044 	addi	r3,r3,1
 100baec:	1009883a 	mov	r4,r2
 100baf0:	117ffc26 	beq	r2,r5,100bae4 <__gethex+0x68>
 100baf4:	1997c83a 	sub	r11,r3,r6
 100baf8:	19400084 	addi	r5,r3,2
 100bafc:	2445883a 	add	r2,r4,r17
 100bb00:	10c00003 	ldbu	r3,0(r2)
 100bb04:	18002d26 	beq	r3,zero,100bbbc <__gethex+0x140>
 100bb08:	29000003 	ldbu	r4,0(r5)
 100bb0c:	2825883a 	mov	r18,r5
 100bb10:	000d883a 	mov	r6,zero
 100bb14:	0013883a 	mov	r9,zero
 100bb18:	21003fcc 	andi	r4,r4,255
 100bb1c:	2445883a 	add	r2,r4,r17
 100bb20:	10c00003 	ldbu	r3,0(r2)
 100bb24:	18000526 	beq	r3,zero,100bb3c <__gethex+0xc0>
 100bb28:	29400044 	addi	r5,r5,1
 100bb2c:	29000003 	ldbu	r4,0(r5)
 100bb30:	2445883a 	add	r2,r4,r17
 100bb34:	10c00003 	ldbu	r3,0(r2)
 100bb38:	183ffb1e 	bne	r3,zero,100bb28 <__gethex+0xac>
 100bb3c:	00800b84 	movi	r2,46
 100bb40:	20805826 	beq	r4,r2,100bca4 <__gethex+0x228>
 100bb44:	30007a26 	beq	r6,zero,100bd30 <__gethex+0x2b4>
 100bb48:	2985c83a 	sub	r2,r5,r6
 100bb4c:	1085883a 	add	r2,r2,r2
 100bb50:	1085883a 	add	r2,r2,r2
 100bb54:	00adc83a 	sub	r22,zero,r2
 100bb58:	2821883a 	mov	r16,r5
 100bb5c:	80c00003 	ldbu	r3,0(r16)
 100bb60:	00801404 	movi	r2,80
 100bb64:	18801e26 	beq	r3,r2,100bbe0 <__gethex+0x164>
 100bb68:	00801c04 	movi	r2,112
 100bb6c:	18801c26 	beq	r3,r2,100bbe0 <__gethex+0x164>
 100bb70:	800d883a 	mov	r6,r16
 100bb74:	4805003a 	cmpeq	r2,r9,zero
 100bb78:	99800015 	stw	r6,0(r19)
 100bb7c:	1000861e 	bne	r2,zero,100bd98 <__gethex+0x31c>
 100bb80:	58003d26 	beq	r11,zero,100bc78 <__gethex+0x1fc>
 100bb84:	0025883a 	mov	r18,zero
 100bb88:	9005883a 	mov	r2,r18
 100bb8c:	dfc00c17 	ldw	ra,48(sp)
 100bb90:	df000b17 	ldw	fp,44(sp)
 100bb94:	ddc00a17 	ldw	r23,40(sp)
 100bb98:	dd800917 	ldw	r22,36(sp)
 100bb9c:	dd400817 	ldw	r21,32(sp)
 100bba0:	dd000717 	ldw	r20,28(sp)
 100bba4:	dcc00617 	ldw	r19,24(sp)
 100bba8:	dc800517 	ldw	r18,20(sp)
 100bbac:	dc400417 	ldw	r17,16(sp)
 100bbb0:	dc000317 	ldw	r16,12(sp)
 100bbb4:	dec00d04 	addi	sp,sp,52
 100bbb8:	f800283a 	ret
 100bbbc:	00800b84 	movi	r2,46
 100bbc0:	20804a26 	beq	r4,r2,100bcec <__gethex+0x270>
 100bbc4:	2821883a 	mov	r16,r5
 100bbc8:	80c00003 	ldbu	r3,0(r16)
 100bbcc:	00801404 	movi	r2,80
 100bbd0:	2825883a 	mov	r18,r5
 100bbd4:	02400044 	movi	r9,1
 100bbd8:	002d883a 	mov	r22,zero
 100bbdc:	18bfe21e 	bne	r3,r2,100bb68 <__gethex+0xec>
 100bbe0:	80c00043 	ldbu	r3,1(r16)
 100bbe4:	00800ac4 	movi	r2,43
 100bbe8:	81000044 	addi	r4,r16,1
 100bbec:	18804a26 	beq	r3,r2,100bd18 <__gethex+0x29c>
 100bbf0:	00800b44 	movi	r2,45
 100bbf4:	18804c26 	beq	r3,r2,100bd28 <__gethex+0x2ac>
 100bbf8:	0015883a 	mov	r10,zero
 100bbfc:	1c45883a 	add	r2,r3,r17
 100bc00:	10800003 	ldbu	r2,0(r2)
 100bc04:	103fda26 	beq	r2,zero,100bb70 <__gethex+0xf4>
 100bc08:	02000644 	movi	r8,25
 100bc0c:	40bfd816 	blt	r8,r2,100bb70 <__gethex+0xf4>
 100bc10:	20c00043 	ldbu	r3,1(r4)
 100bc14:	11fffc04 	addi	r7,r2,-16
 100bc18:	008040b4 	movhi	r2,258
 100bc1c:	10afef04 	addi	r2,r2,-16452
 100bc20:	1887883a 	add	r3,r3,r2
 100bc24:	18800003 	ldbu	r2,0(r3)
 100bc28:	21800044 	addi	r6,r4,1
 100bc2c:	10000d26 	beq	r2,zero,100bc64 <__gethex+0x1e8>
 100bc30:	100b883a 	mov	r5,r2
 100bc34:	4080020e 	bge	r8,r2,100bc40 <__gethex+0x1c4>
 100bc38:	00000a06 	br	100bc64 <__gethex+0x1e8>
 100bc3c:	41000916 	blt	r8,r4,100bc64 <__gethex+0x1e8>
 100bc40:	31800044 	addi	r6,r6,1
 100bc44:	30800003 	ldbu	r2,0(r6)
 100bc48:	38c002a4 	muli	r3,r7,10
 100bc4c:	1445883a 	add	r2,r2,r17
 100bc50:	11000003 	ldbu	r4,0(r2)
 100bc54:	1947883a 	add	r3,r3,r5
 100bc58:	19fffc04 	addi	r7,r3,-16
 100bc5c:	200b883a 	mov	r5,r4
 100bc60:	203ff61e 	bne	r4,zero,100bc3c <__gethex+0x1c0>
 100bc64:	5005003a 	cmpeq	r2,r10,zero
 100bc68:	1000011e 	bne	r2,zero,100bc70 <__gethex+0x1f4>
 100bc6c:	01cfc83a 	sub	r7,zero,r7
 100bc70:	b1ed883a 	add	r22,r22,r7
 100bc74:	003fbf06 	br	100bb74 <__gethex+0xf8>
 100bc78:	04800184 	movi	r18,6
 100bc7c:	003fc206 	br	100bb88 <__gethex+0x10c>
 100bc80:	100b9640 	call	100b964 <__hexdig_init>
 100bc84:	99800017 	ldw	r6,0(r19)
 100bc88:	00800c04 	movi	r2,48
 100bc8c:	31000083 	ldbu	r4,2(r6)
 100bc90:	30c00084 	addi	r3,r6,2
 100bc94:	20bf9126 	beq	r4,r2,100badc <__gethex+0x60>
 100bc98:	180b883a 	mov	r5,r3
 100bc9c:	0017883a 	mov	r11,zero
 100bca0:	003f9606 	br	100bafc <__gethex+0x80>
 100bca4:	303fa81e 	bne	r6,zero,100bb48 <__gethex+0xcc>
 100bca8:	29400044 	addi	r5,r5,1
 100bcac:	28800003 	ldbu	r2,0(r5)
 100bcb0:	1445883a 	add	r2,r2,r17
 100bcb4:	10c00003 	ldbu	r3,0(r2)
 100bcb8:	1800ad26 	beq	r3,zero,100bf70 <__gethex+0x4f4>
 100bcbc:	2809883a 	mov	r4,r5
 100bcc0:	21000044 	addi	r4,r4,1
 100bcc4:	20800003 	ldbu	r2,0(r4)
 100bcc8:	1445883a 	add	r2,r2,r17
 100bccc:	10c00003 	ldbu	r3,0(r2)
 100bcd0:	183ffb1e 	bne	r3,zero,100bcc0 <__gethex+0x244>
 100bcd4:	2145c83a 	sub	r2,r4,r5
 100bcd8:	1085883a 	add	r2,r2,r2
 100bcdc:	1085883a 	add	r2,r2,r2
 100bce0:	00adc83a 	sub	r22,zero,r2
 100bce4:	200b883a 	mov	r5,r4
 100bce8:	003f9b06 	br	100bb58 <__gethex+0xdc>
 100bcec:	29000043 	ldbu	r4,1(r5)
 100bcf0:	008040b4 	movhi	r2,258
 100bcf4:	10afef04 	addi	r2,r2,-16452
 100bcf8:	2c000044 	addi	r16,r5,1
 100bcfc:	2085883a 	add	r2,r4,r2
 100bd00:	10c00003 	ldbu	r3,0(r2)
 100bd04:	18000d1e 	bne	r3,zero,100bd3c <__gethex+0x2c0>
 100bd08:	2825883a 	mov	r18,r5
 100bd0c:	02400044 	movi	r9,1
 100bd10:	002d883a 	mov	r22,zero
 100bd14:	003f9106 	br	100bb5c <__gethex+0xe0>
 100bd18:	0015883a 	mov	r10,zero
 100bd1c:	21000044 	addi	r4,r4,1
 100bd20:	20c00003 	ldbu	r3,0(r4)
 100bd24:	003fb506 	br	100bbfc <__gethex+0x180>
 100bd28:	02800044 	movi	r10,1
 100bd2c:	003ffb06 	br	100bd1c <__gethex+0x2a0>
 100bd30:	2821883a 	mov	r16,r5
 100bd34:	002d883a 	mov	r22,zero
 100bd38:	003f8806 	br	100bb5c <__gethex+0xe0>
 100bd3c:	00800c04 	movi	r2,48
 100bd40:	20800e1e 	bne	r4,r2,100bd7c <__gethex+0x300>
 100bd44:	2007883a 	mov	r3,r4
 100bd48:	800b883a 	mov	r5,r16
 100bd4c:	29400044 	addi	r5,r5,1
 100bd50:	29000003 	ldbu	r4,0(r5)
 100bd54:	20803fcc 	andi	r2,r4,255
 100bd58:	10fffc26 	beq	r2,r3,100bd4c <__gethex+0x2d0>
 100bd5c:	1445883a 	add	r2,r2,r17
 100bd60:	10c00003 	ldbu	r3,0(r2)
 100bd64:	1800071e 	bne	r3,zero,100bd84 <__gethex+0x308>
 100bd68:	02c00044 	movi	r11,1
 100bd6c:	800d883a 	mov	r6,r16
 100bd70:	2825883a 	mov	r18,r5
 100bd74:	5813883a 	mov	r9,r11
 100bd78:	003f6706 	br	100bb18 <__gethex+0x9c>
 100bd7c:	81000003 	ldbu	r4,0(r16)
 100bd80:	800b883a 	mov	r5,r16
 100bd84:	800d883a 	mov	r6,r16
 100bd88:	2825883a 	mov	r18,r5
 100bd8c:	02c00044 	movi	r11,1
 100bd90:	0013883a 	mov	r9,zero
 100bd94:	003f6006 	br	100bb18 <__gethex+0x9c>
 100bd98:	8485c83a 	sub	r2,r16,r18
 100bd9c:	10bfffc4 	addi	r2,r2,-1
 100bda0:	00c001c4 	movi	r3,7
 100bda4:	1880700e 	bge	r3,r2,100bf68 <__gethex+0x4ec>
 100bda8:	000b883a 	mov	r5,zero
 100bdac:	1005d07a 	srai	r2,r2,1
 100bdb0:	29400044 	addi	r5,r5,1
 100bdb4:	18bffd16 	blt	r3,r2,100bdac <__gethex+0x330>
 100bdb8:	a809883a 	mov	r4,r21
 100bdbc:	1007b7c0 	call	1007b7c <_Balloc>
 100bdc0:	1027883a 	mov	r19,r2
 100bdc4:	10800504 	addi	r2,r2,20
 100bdc8:	d8800215 	stw	r2,8(sp)
 100bdcc:	9400522e 	bgeu	r18,r16,100bf18 <__gethex+0x49c>
 100bdd0:	da000217 	ldw	r8,8(sp)
 100bdd4:	800b883a 	mov	r5,r16
 100bdd8:	000f883a 	mov	r7,zero
 100bddc:	0009883a 	mov	r4,zero
 100bde0:	02400b84 	movi	r9,46
 100bde4:	02800804 	movi	r10,32
 100bde8:	297fffc4 	addi	r5,r5,-1
 100bdec:	28c00003 	ldbu	r3,0(r5)
 100bdf0:	1a400826 	beq	r3,r9,100be14 <__gethex+0x398>
 100bdf4:	380d883a 	mov	r6,r7
 100bdf8:	3a802726 	beq	r7,r10,100be98 <__gethex+0x41c>
 100bdfc:	39c00104 	addi	r7,r7,4
 100be00:	1c47883a 	add	r3,r3,r17
 100be04:	18800003 	ldbu	r2,0(r3)
 100be08:	108003cc 	andi	r2,r2,15
 100be0c:	1184983a 	sll	r2,r2,r6
 100be10:	2088b03a 	or	r4,r4,r2
 100be14:	917ff436 	bltu	r18,r5,100bde8 <__gethex+0x36c>
 100be18:	d8c00217 	ldw	r3,8(sp)
 100be1c:	40800104 	addi	r2,r8,4
 100be20:	41000015 	stw	r4,0(r8)
 100be24:	10c5c83a 	sub	r2,r2,r3
 100be28:	1021d0ba 	srai	r16,r2,2
 100be2c:	9c000415 	stw	r16,16(r19)
 100be30:	10076240 	call	1007624 <__hi0bits>
 100be34:	8006917a 	slli	r3,r16,5
 100be38:	a5c00017 	ldw	r23,0(r20)
 100be3c:	1885c83a 	sub	r2,r3,r2
 100be40:	b8801c16 	blt	r23,r2,100beb4 <__gethex+0x438>
 100be44:	15c00a16 	blt	r2,r23,100be70 <__gethex+0x3f4>
 100be48:	0039883a 	mov	fp,zero
 100be4c:	a0800217 	ldw	r2,8(r20)
 100be50:	1580340e 	bge	r2,r22,100bf24 <__gethex+0x4a8>
 100be54:	a809883a 	mov	r4,r21
 100be58:	980b883a 	mov	r5,r19
 100be5c:	10075fc0 	call	10075fc <_Bfree>
 100be60:	d8c00d17 	ldw	r3,52(sp)
 100be64:	048028c4 	movi	r18,163
 100be68:	18000015 	stw	zero,0(r3)
 100be6c:	003f4606 	br	100bb88 <__gethex+0x10c>
 100be70:	b8a1c83a 	sub	r16,r23,r2
 100be74:	980b883a 	mov	r5,r19
 100be78:	a809883a 	mov	r4,r21
 100be7c:	800d883a 	mov	r6,r16
 100be80:	1007f400 	call	1007f40 <__lshift>
 100be84:	1027883a 	mov	r19,r2
 100be88:	b42dc83a 	sub	r22,r22,r16
 100be8c:	10800504 	addi	r2,r2,20
 100be90:	d8800215 	stw	r2,8(sp)
 100be94:	003fec06 	br	100be48 <__gethex+0x3cc>
 100be98:	41000015 	stw	r4,0(r8)
 100be9c:	28c00003 	ldbu	r3,0(r5)
 100bea0:	01c00104 	movi	r7,4
 100bea4:	000d883a 	mov	r6,zero
 100bea8:	41d1883a 	add	r8,r8,r7
 100beac:	0009883a 	mov	r4,zero
 100beb0:	003fd306 	br	100be00 <__gethex+0x384>
 100beb4:	15e1c83a 	sub	r16,r2,r23
 100beb8:	9809883a 	mov	r4,r19
 100bebc:	800b883a 	mov	r5,r16
 100bec0:	1007af40 	call	1007af4 <__any_on>
 100bec4:	1000061e 	bne	r2,zero,100bee0 <__gethex+0x464>
 100bec8:	0039883a 	mov	fp,zero
 100becc:	9809883a 	mov	r4,r19
 100bed0:	800b883a 	mov	r5,r16
 100bed4:	100b9cc0 	call	100b9cc <rshift>
 100bed8:	b42d883a 	add	r22,r22,r16
 100bedc:	003fdb06 	br	100be4c <__gethex+0x3d0>
 100bee0:	817fffc4 	addi	r5,r16,-1
 100bee4:	2805d17a 	srai	r2,r5,5
 100bee8:	d8c00217 	ldw	r3,8(sp)
 100beec:	290007cc 	andi	r4,r5,31
 100bef0:	1085883a 	add	r2,r2,r2
 100bef4:	1085883a 	add	r2,r2,r2
 100bef8:	01800044 	movi	r6,1
 100befc:	10c5883a 	add	r2,r2,r3
 100bf00:	3108983a 	sll	r4,r6,r4
 100bf04:	10c00017 	ldw	r3,0(r2)
 100bf08:	20c8703a 	and	r4,r4,r3
 100bf0c:	20001a1e 	bne	r4,zero,100bf78 <__gethex+0x4fc>
 100bf10:	3039883a 	mov	fp,r6
 100bf14:	003fed06 	br	100becc <__gethex+0x450>
 100bf18:	1011883a 	mov	r8,r2
 100bf1c:	0009883a 	mov	r4,zero
 100bf20:	003fbd06 	br	100be18 <__gethex+0x39c>
 100bf24:	a1000117 	ldw	r4,4(r20)
 100bf28:	b1001a16 	blt	r22,r4,100bf94 <__gethex+0x518>
 100bf2c:	04800044 	movi	r18,1
 100bf30:	e0000826 	beq	fp,zero,100bf54 <__gethex+0x4d8>
 100bf34:	a1000317 	ldw	r4,12(r20)
 100bf38:	00800084 	movi	r2,2
 100bf3c:	20809426 	beq	r4,r2,100c190 <__gethex+0x714>
 100bf40:	008000c4 	movi	r2,3
 100bf44:	20805826 	beq	r4,r2,100c0a8 <__gethex+0x62c>
 100bf48:	00800044 	movi	r2,1
 100bf4c:	20803f26 	beq	r4,r2,100c04c <__gethex+0x5d0>
 100bf50:	94800414 	ori	r18,r18,16
 100bf54:	d8800d17 	ldw	r2,52(sp)
 100bf58:	d8c00117 	ldw	r3,4(sp)
 100bf5c:	14c00015 	stw	r19,0(r2)
 100bf60:	1d800015 	stw	r22,0(r3)
 100bf64:	003f0806 	br	100bb88 <__gethex+0x10c>
 100bf68:	000b883a 	mov	r5,zero
 100bf6c:	003f9206 	br	100bdb8 <__gethex+0x33c>
 100bf70:	002d883a 	mov	r22,zero
 100bf74:	003ef806 	br	100bb58 <__gethex+0xdc>
 100bf78:	3140160e 	bge	r6,r5,100bfd4 <__gethex+0x558>
 100bf7c:	9809883a 	mov	r4,r19
 100bf80:	817fff84 	addi	r5,r16,-2
 100bf84:	1007af40 	call	1007af4 <__any_on>
 100bf88:	10001226 	beq	r2,zero,100bfd4 <__gethex+0x558>
 100bf8c:	070000c4 	movi	fp,3
 100bf90:	003fce06 	br	100becc <__gethex+0x450>
 100bf94:	25a3c83a 	sub	r17,r4,r22
 100bf98:	8dc01016 	blt	r17,r23,100bfdc <__gethex+0x560>
 100bf9c:	a0c00317 	ldw	r3,12(r20)
 100bfa0:	00800084 	movi	r2,2
 100bfa4:	18809326 	beq	r3,r2,100c1f4 <__gethex+0x778>
 100bfa8:	008000c4 	movi	r2,3
 100bfac:	18808e26 	beq	r3,r2,100c1e8 <__gethex+0x76c>
 100bfb0:	00800044 	movi	r2,1
 100bfb4:	18807b26 	beq	r3,r2,100c1a4 <__gethex+0x728>
 100bfb8:	a809883a 	mov	r4,r21
 100bfbc:	980b883a 	mov	r5,r19
 100bfc0:	10075fc0 	call	10075fc <_Bfree>
 100bfc4:	d8c00d17 	ldw	r3,52(sp)
 100bfc8:	04801404 	movi	r18,80
 100bfcc:	18000015 	stw	zero,0(r3)
 100bfd0:	003eed06 	br	100bb88 <__gethex+0x10c>
 100bfd4:	07000084 	movi	fp,2
 100bfd8:	003fbc06 	br	100becc <__gethex+0x450>
 100bfdc:	8c3fffc4 	addi	r16,r17,-1
 100bfe0:	e0001426 	beq	fp,zero,100c034 <__gethex+0x5b8>
 100bfe4:	07000044 	movi	fp,1
 100bfe8:	8005d17a 	srai	r2,r16,5
 100bfec:	d8c00217 	ldw	r3,8(sp)
 100bff0:	814007cc 	andi	r5,r16,31
 100bff4:	1085883a 	add	r2,r2,r2
 100bff8:	1085883a 	add	r2,r2,r2
 100bffc:	10c5883a 	add	r2,r2,r3
 100c000:	00c00044 	movi	r3,1
 100c004:	1946983a 	sll	r3,r3,r5
 100c008:	11000017 	ldw	r4,0(r2)
 100c00c:	1906703a 	and	r3,r3,r4
 100c010:	18000126 	beq	r3,zero,100c018 <__gethex+0x59c>
 100c014:	e7000094 	ori	fp,fp,2
 100c018:	880b883a 	mov	r5,r17
 100c01c:	9809883a 	mov	r4,r19
 100c020:	100b9cc0 	call	100b9cc <rshift>
 100c024:	a5800117 	ldw	r22,4(r20)
 100c028:	bc6fc83a 	sub	r23,r23,r17
 100c02c:	04800084 	movi	r18,2
 100c030:	003fbf06 	br	100bf30 <__gethex+0x4b4>
 100c034:	043fec0e 	bge	zero,r16,100bfe8 <__gethex+0x56c>
 100c038:	9809883a 	mov	r4,r19
 100c03c:	800b883a 	mov	r5,r16
 100c040:	1007af40 	call	1007af4 <__any_on>
 100c044:	1039883a 	mov	fp,r2
 100c048:	003fe706 	br	100bfe8 <__gethex+0x56c>
 100c04c:	e080008c 	andi	r2,fp,2
 100c050:	103fbf26 	beq	r2,zero,100bf50 <__gethex+0x4d4>
 100c054:	d8c00217 	ldw	r3,8(sp)
 100c058:	18800017 	ldw	r2,0(r3)
 100c05c:	e084b03a 	or	r2,fp,r2
 100c060:	1104703a 	and	r2,r2,r4
 100c064:	103fba26 	beq	r2,zero,100bf50 <__gethex+0x4d4>
 100c068:	9c000417 	ldw	r16,16(r19)
 100c06c:	d8c00217 	ldw	r3,8(sp)
 100c070:	017fffc4 	movi	r5,-1
 100c074:	8405883a 	add	r2,r16,r16
 100c078:	10b9883a 	add	fp,r2,r2
 100c07c:	1f09883a 	add	r4,r3,fp
 100c080:	dc000015 	stw	r16,0(sp)
 100c084:	00000306 	br	100c094 <__gethex+0x618>
 100c088:	18000015 	stw	zero,0(r3)
 100c08c:	18c00104 	addi	r3,r3,4
 100c090:	1900082e 	bgeu	r3,r4,100c0b4 <__gethex+0x638>
 100c094:	18800017 	ldw	r2,0(r3)
 100c098:	117ffb26 	beq	r2,r5,100c088 <__gethex+0x60c>
 100c09c:	10800044 	addi	r2,r2,1
 100c0a0:	18800015 	stw	r2,0(r3)
 100c0a4:	00001f06 	br	100c124 <__gethex+0x6a8>
 100c0a8:	d8800e17 	ldw	r2,56(sp)
 100c0ac:	103fa826 	beq	r2,zero,100bf50 <__gethex+0x4d4>
 100c0b0:	003fed06 	br	100c068 <__gethex+0x5ec>
 100c0b4:	98800217 	ldw	r2,8(r19)
 100c0b8:	80801316 	blt	r16,r2,100c108 <__gethex+0x68c>
 100c0bc:	99400117 	ldw	r5,4(r19)
 100c0c0:	a809883a 	mov	r4,r21
 100c0c4:	29400044 	addi	r5,r5,1
 100c0c8:	1007b7c0 	call	1007b7c <_Balloc>
 100c0cc:	99800417 	ldw	r6,16(r19)
 100c0d0:	99400304 	addi	r5,r19,12
 100c0d4:	11000304 	addi	r4,r2,12
 100c0d8:	318d883a 	add	r6,r6,r6
 100c0dc:	318d883a 	add	r6,r6,r6
 100c0e0:	31800204 	addi	r6,r6,8
 100c0e4:	1023883a 	mov	r17,r2
 100c0e8:	10073e40 	call	10073e4 <memcpy>
 100c0ec:	980b883a 	mov	r5,r19
 100c0f0:	a809883a 	mov	r4,r21
 100c0f4:	10075fc0 	call	10075fc <_Bfree>
 100c0f8:	8c000417 	ldw	r16,16(r17)
 100c0fc:	88800504 	addi	r2,r17,20
 100c100:	8827883a 	mov	r19,r17
 100c104:	d8800215 	stw	r2,8(sp)
 100c108:	8405883a 	add	r2,r16,r16
 100c10c:	1085883a 	add	r2,r2,r2
 100c110:	14c5883a 	add	r2,r2,r19
 100c114:	84000044 	addi	r16,r16,1
 100c118:	00c00044 	movi	r3,1
 100c11c:	10c00515 	stw	r3,20(r2)
 100c120:	9c000415 	stw	r16,16(r19)
 100c124:	00800084 	movi	r2,2
 100c128:	90801426 	beq	r18,r2,100c17c <__gethex+0x700>
 100c12c:	d8800017 	ldw	r2,0(sp)
 100c130:	14000b16 	blt	r2,r16,100c160 <__gethex+0x6e4>
 100c134:	bc0007cc 	andi	r16,r23,31
 100c138:	8000021e 	bne	r16,zero,100c144 <__gethex+0x6c8>
 100c13c:	94800814 	ori	r18,r18,32
 100c140:	003f8406 	br	100bf54 <__gethex+0x4d8>
 100c144:	d8c00217 	ldw	r3,8(sp)
 100c148:	1f05883a 	add	r2,r3,fp
 100c14c:	113fff17 	ldw	r4,-4(r2)
 100c150:	10076240 	call	1007624 <__hi0bits>
 100c154:	00c00804 	movi	r3,32
 100c158:	1c07c83a 	sub	r3,r3,r16
 100c15c:	10fff70e 	bge	r2,r3,100c13c <__gethex+0x6c0>
 100c160:	9809883a 	mov	r4,r19
 100c164:	01400044 	movi	r5,1
 100c168:	100b9cc0 	call	100b9cc <rshift>
 100c16c:	a0800217 	ldw	r2,8(r20)
 100c170:	b5800044 	addi	r22,r22,1
 100c174:	15bf3716 	blt	r2,r22,100be54 <__gethex+0x3d8>
 100c178:	003ff006 	br	100c13c <__gethex+0x6c0>
 100c17c:	a0800017 	ldw	r2,0(r20)
 100c180:	10bfffc4 	addi	r2,r2,-1
 100c184:	b8801e26 	beq	r23,r2,100c200 <__gethex+0x784>
 100c188:	04800884 	movi	r18,34
 100c18c:	003f7106 	br	100bf54 <__gethex+0x4d8>
 100c190:	d8c00e17 	ldw	r3,56(sp)
 100c194:	00800044 	movi	r2,1
 100c198:	10c5c83a 	sub	r2,r2,r3
 100c19c:	103f6c26 	beq	r2,zero,100bf50 <__gethex+0x4d4>
 100c1a0:	003fb106 	br	100c068 <__gethex+0x5ec>
 100c1a4:	bc7f841e 	bne	r23,r17,100bfb8 <__gethex+0x53c>
 100c1a8:	1dc0050e 	bge	r3,r23,100c1c0 <__gethex+0x744>
 100c1ac:	b8cbc83a 	sub	r5,r23,r3
 100c1b0:	9809883a 	mov	r4,r19
 100c1b4:	1007af40 	call	1007af4 <__any_on>
 100c1b8:	103f7f26 	beq	r2,zero,100bfb8 <__gethex+0x53c>
 100c1bc:	a1000117 	ldw	r4,4(r20)
 100c1c0:	d8800117 	ldw	r2,4(sp)
 100c1c4:	d8c00217 	ldw	r3,8(sp)
 100c1c8:	04000044 	movi	r16,1
 100c1cc:	11000015 	stw	r4,0(r2)
 100c1d0:	d8800d17 	ldw	r2,52(sp)
 100c1d4:	04801884 	movi	r18,98
 100c1d8:	1c000015 	stw	r16,0(r3)
 100c1dc:	14c00015 	stw	r19,0(r2)
 100c1e0:	9c000415 	stw	r16,16(r19)
 100c1e4:	003e6806 	br	100bb88 <__gethex+0x10c>
 100c1e8:	d8c00e17 	ldw	r3,56(sp)
 100c1ec:	183f7226 	beq	r3,zero,100bfb8 <__gethex+0x53c>
 100c1f0:	003ff306 	br	100c1c0 <__gethex+0x744>
 100c1f4:	d8800e17 	ldw	r2,56(sp)
 100c1f8:	103ff126 	beq	r2,zero,100c1c0 <__gethex+0x744>
 100c1fc:	003f6e06 	br	100bfb8 <__gethex+0x53c>
 100c200:	b805d17a 	srai	r2,r23,5
 100c204:	d8c00217 	ldw	r3,8(sp)
 100c208:	b94007cc 	andi	r5,r23,31
 100c20c:	1085883a 	add	r2,r2,r2
 100c210:	1085883a 	add	r2,r2,r2
 100c214:	10c5883a 	add	r2,r2,r3
 100c218:	00c00044 	movi	r3,1
 100c21c:	1946983a 	sll	r3,r3,r5
 100c220:	11000017 	ldw	r4,0(r2)
 100c224:	1906703a 	and	r3,r3,r4
 100c228:	183fd726 	beq	r3,zero,100c188 <__gethex+0x70c>
 100c22c:	04800844 	movi	r18,33
 100c230:	003f4806 	br	100bf54 <__gethex+0x4d8>

0100c234 <L_shift>:
 100c234:	00800204 	movi	r2,8
 100c238:	1185c83a 	sub	r2,r2,r6
 100c23c:	1085883a 	add	r2,r2,r2
 100c240:	21c00017 	ldw	r7,0(r4)
 100c244:	1093883a 	add	r9,r2,r2
 100c248:	00800804 	movi	r2,32
 100c24c:	200d883a 	mov	r6,r4
 100c250:	1251c83a 	sub	r8,r2,r9
 100c254:	31800104 	addi	r6,r6,4
 100c258:	3805883a 	mov	r2,r7
 100c25c:	31c00017 	ldw	r7,0(r6)
 100c260:	3a08983a 	sll	r4,r7,r8
 100c264:	3a46d83a 	srl	r3,r7,r9
 100c268:	1104b03a 	or	r2,r2,r4
 100c26c:	180f883a 	mov	r7,r3
 100c270:	30bfff15 	stw	r2,-4(r6)
 100c274:	30c00015 	stw	r3,0(r6)
 100c278:	317ff636 	bltu	r6,r5,100c254 <L_shift+0x20>
 100c27c:	f800283a 	ret

0100c280 <__hexnan>:
 100c280:	defff404 	addi	sp,sp,-48
 100c284:	dd800815 	stw	r22,32(sp)
 100c288:	058040b4 	movhi	r22,258
 100c28c:	b5afef04 	addi	r22,r22,-16452
 100c290:	b0800c03 	ldbu	r2,48(r22)
 100c294:	dcc00515 	stw	r19,20(sp)
 100c298:	dc000215 	stw	r16,8(sp)
 100c29c:	dfc00b15 	stw	ra,44(sp)
 100c2a0:	df000a15 	stw	fp,40(sp)
 100c2a4:	ddc00915 	stw	r23,36(sp)
 100c2a8:	dd400715 	stw	r21,28(sp)
 100c2ac:	dd000615 	stw	r20,24(sp)
 100c2b0:	dc800415 	stw	r18,16(sp)
 100c2b4:	dc400315 	stw	r17,12(sp)
 100c2b8:	d9000115 	stw	r4,4(sp)
 100c2bc:	2821883a 	mov	r16,r5
 100c2c0:	3027883a 	mov	r19,r6
 100c2c4:	10007426 	beq	r2,zero,100c498 <__hexnan+0x218>
 100c2c8:	80c00017 	ldw	r3,0(r16)
 100c2cc:	1805d17a 	srai	r2,r3,5
 100c2d0:	18c007cc 	andi	r3,r3,31
 100c2d4:	1839003a 	cmpeq	fp,r3,zero
 100c2d8:	1085883a 	add	r2,r2,r2
 100c2dc:	1085883a 	add	r2,r2,r2
 100c2e0:	d8c00015 	stw	r3,0(sp)
 100c2e4:	14c5883a 	add	r2,r2,r19
 100c2e8:	e000011e 	bne	fp,zero,100c2f0 <__hexnan+0x70>
 100c2ec:	10800104 	addi	r2,r2,4
 100c2f0:	d8c00117 	ldw	r3,4(sp)
 100c2f4:	153fff04 	addi	r20,r2,-4
 100c2f8:	a021883a 	mov	r16,r20
 100c2fc:	1c400017 	ldw	r17,0(r3)
 100c300:	a02b883a 	mov	r21,r20
 100c304:	0025883a 	mov	r18,zero
 100c308:	002f883a 	mov	r23,zero
 100c30c:	000d883a 	mov	r6,zero
 100c310:	103fff15 	stw	zero,-4(r2)
 100c314:	8c400044 	addi	r17,r17,1
 100c318:	89000003 	ldbu	r4,0(r17)
 100c31c:	20000e26 	beq	r4,zero,100c358 <__hexnan+0xd8>
 100c320:	2585883a 	add	r2,r4,r22
 100c324:	10c00003 	ldbu	r3,0(r2)
 100c328:	18002e1e 	bne	r3,zero,100c3e4 <__hexnan+0x164>
 100c32c:	00800804 	movi	r2,32
 100c330:	11005536 	bltu	r2,r4,100c488 <__hexnan+0x208>
 100c334:	bcbff70e 	bge	r23,r18,100c314 <__hexnan+0x94>
 100c338:	8540022e 	bgeu	r16,r21,100c344 <__hexnan+0xc4>
 100c33c:	008001c4 	movi	r2,7
 100c340:	11803c0e 	bge	r2,r6,100c434 <__hexnan+0x1b4>
 100c344:	9c003536 	bltu	r19,r16,100c41c <__hexnan+0x19c>
 100c348:	8c400044 	addi	r17,r17,1
 100c34c:	89000003 	ldbu	r4,0(r17)
 100c350:	01800204 	movi	r6,8
 100c354:	203ff21e 	bne	r4,zero,100c320 <__hexnan+0xa0>
 100c358:	90004d26 	beq	r18,zero,100c490 <__hexnan+0x210>
 100c35c:	85404336 	bltu	r16,r21,100c46c <__hexnan+0x1ec>
 100c360:	9c00382e 	bgeu	r19,r16,100c444 <__hexnan+0x1c4>
 100c364:	9807883a 	mov	r3,r19
 100c368:	80800017 	ldw	r2,0(r16)
 100c36c:	84000104 	addi	r16,r16,4
 100c370:	18800015 	stw	r2,0(r3)
 100c374:	18c00104 	addi	r3,r3,4
 100c378:	a43ffb2e 	bgeu	r20,r16,100c368 <__hexnan+0xe8>
 100c37c:	18000015 	stw	zero,0(r3)
 100c380:	18c00104 	addi	r3,r3,4
 100c384:	a0fffd2e 	bgeu	r20,r3,100c37c <__hexnan+0xfc>
 100c388:	a0800017 	ldw	r2,0(r20)
 100c38c:	1000071e 	bne	r2,zero,100c3ac <__hexnan+0x12c>
 100c390:	9d004326 	beq	r19,r20,100c4a0 <__hexnan+0x220>
 100c394:	a007883a 	mov	r3,r20
 100c398:	00000106 	br	100c3a0 <__hexnan+0x120>
 100c39c:	98c04026 	beq	r19,r3,100c4a0 <__hexnan+0x220>
 100c3a0:	18ffff04 	addi	r3,r3,-4
 100c3a4:	18800017 	ldw	r2,0(r3)
 100c3a8:	103ffc26 	beq	r2,zero,100c39c <__hexnan+0x11c>
 100c3ac:	00c00144 	movi	r3,5
 100c3b0:	1805883a 	mov	r2,r3
 100c3b4:	dfc00b17 	ldw	ra,44(sp)
 100c3b8:	df000a17 	ldw	fp,40(sp)
 100c3bc:	ddc00917 	ldw	r23,36(sp)
 100c3c0:	dd800817 	ldw	r22,32(sp)
 100c3c4:	dd400717 	ldw	r21,28(sp)
 100c3c8:	dd000617 	ldw	r20,24(sp)
 100c3cc:	dcc00517 	ldw	r19,20(sp)
 100c3d0:	dc800417 	ldw	r18,16(sp)
 100c3d4:	dc400317 	ldw	r17,12(sp)
 100c3d8:	dc000217 	ldw	r16,8(sp)
 100c3dc:	dec00c04 	addi	sp,sp,48
 100c3e0:	f800283a 	ret
 100c3e4:	31800044 	addi	r6,r6,1
 100c3e8:	00800204 	movi	r2,8
 100c3ec:	94800044 	addi	r18,r18,1
 100c3f0:	1180040e 	bge	r2,r6,100c404 <__hexnan+0x184>
 100c3f4:	9c3fc72e 	bgeu	r19,r16,100c314 <__hexnan+0x94>
 100c3f8:	843fff04 	addi	r16,r16,-4
 100c3fc:	80000015 	stw	zero,0(r16)
 100c400:	01800044 	movi	r6,1
 100c404:	80800017 	ldw	r2,0(r16)
 100c408:	18c003cc 	andi	r3,r3,15
 100c40c:	1004913a 	slli	r2,r2,4
 100c410:	10c4b03a 	or	r2,r2,r3
 100c414:	80800015 	stw	r2,0(r16)
 100c418:	003fbe06 	br	100c314 <__hexnan+0x94>
 100c41c:	843fff04 	addi	r16,r16,-4
 100c420:	802b883a 	mov	r21,r16
 100c424:	902f883a 	mov	r23,r18
 100c428:	000d883a 	mov	r6,zero
 100c42c:	80000015 	stw	zero,0(r16)
 100c430:	003fb806 	br	100c314 <__hexnan+0x94>
 100c434:	8009883a 	mov	r4,r16
 100c438:	a80b883a 	mov	r5,r21
 100c43c:	100c2340 	call	100c234 <L_shift>
 100c440:	003fc006 	br	100c344 <__hexnan+0xc4>
 100c444:	e03fd01e 	bne	fp,zero,100c388 <__hexnan+0x108>
 100c448:	d8c00017 	ldw	r3,0(sp)
 100c44c:	00800804 	movi	r2,32
 100c450:	10c5c83a 	sub	r2,r2,r3
 100c454:	00ffffc4 	movi	r3,-1
 100c458:	1886d83a 	srl	r3,r3,r2
 100c45c:	a0800017 	ldw	r2,0(r20)
 100c460:	10c4703a 	and	r2,r2,r3
 100c464:	a0800015 	stw	r2,0(r20)
 100c468:	003fc806 	br	100c38c <__hexnan+0x10c>
 100c46c:	008001c4 	movi	r2,7
 100c470:	11bfbb16 	blt	r2,r6,100c360 <__hexnan+0xe0>
 100c474:	a80b883a 	mov	r5,r21
 100c478:	8009883a 	mov	r4,r16
 100c47c:	100c2340 	call	100c234 <L_shift>
 100c480:	9c3ff02e 	bgeu	r19,r16,100c444 <__hexnan+0x1c4>
 100c484:	003fb706 	br	100c364 <__hexnan+0xe4>
 100c488:	00800a44 	movi	r2,41
 100c48c:	20800826 	beq	r4,r2,100c4b0 <__hexnan+0x230>
 100c490:	00c00104 	movi	r3,4
 100c494:	003fc606 	br	100c3b0 <__hexnan+0x130>
 100c498:	100b9640 	call	100b964 <__hexdig_init>
 100c49c:	003f8a06 	br	100c2c8 <__hexnan+0x48>
 100c4a0:	00800044 	movi	r2,1
 100c4a4:	00c00144 	movi	r3,5
 100c4a8:	98800015 	stw	r2,0(r19)
 100c4ac:	003fc006 	br	100c3b0 <__hexnan+0x130>
 100c4b0:	903ff726 	beq	r18,zero,100c490 <__hexnan+0x210>
 100c4b4:	d8c00117 	ldw	r3,4(sp)
 100c4b8:	88800044 	addi	r2,r17,1
 100c4bc:	18800015 	stw	r2,0(r3)
 100c4c0:	857fa72e 	bgeu	r16,r21,100c360 <__hexnan+0xe0>
 100c4c4:	003fe906 	br	100c46c <__hexnan+0x1ec>

0100c4c8 <_isatty_r>:
 100c4c8:	defffd04 	addi	sp,sp,-12
 100c4cc:	dc000015 	stw	r16,0(sp)
 100c4d0:	040040b4 	movhi	r16,258
 100c4d4:	842fd104 	addi	r16,r16,-16572
 100c4d8:	dc400115 	stw	r17,4(sp)
 100c4dc:	80000015 	stw	zero,0(r16)
 100c4e0:	2023883a 	mov	r17,r4
 100c4e4:	2809883a 	mov	r4,r5
 100c4e8:	dfc00215 	stw	ra,8(sp)
 100c4ec:	100f3180 	call	100f318 <isatty>
 100c4f0:	1007883a 	mov	r3,r2
 100c4f4:	00bfffc4 	movi	r2,-1
 100c4f8:	18800626 	beq	r3,r2,100c514 <_isatty_r+0x4c>
 100c4fc:	1805883a 	mov	r2,r3
 100c500:	dfc00217 	ldw	ra,8(sp)
 100c504:	dc400117 	ldw	r17,4(sp)
 100c508:	dc000017 	ldw	r16,0(sp)
 100c50c:	dec00304 	addi	sp,sp,12
 100c510:	f800283a 	ret
 100c514:	80800017 	ldw	r2,0(r16)
 100c518:	103ff826 	beq	r2,zero,100c4fc <_isatty_r+0x34>
 100c51c:	88800015 	stw	r2,0(r17)
 100c520:	1805883a 	mov	r2,r3
 100c524:	dfc00217 	ldw	ra,8(sp)
 100c528:	dc400117 	ldw	r17,4(sp)
 100c52c:	dc000017 	ldw	r16,0(sp)
 100c530:	dec00304 	addi	sp,sp,12
 100c534:	f800283a 	ret

0100c538 <_lseek_r>:
 100c538:	defffd04 	addi	sp,sp,-12
 100c53c:	dc000015 	stw	r16,0(sp)
 100c540:	040040b4 	movhi	r16,258
 100c544:	842fd104 	addi	r16,r16,-16572
 100c548:	dc400115 	stw	r17,4(sp)
 100c54c:	80000015 	stw	zero,0(r16)
 100c550:	2023883a 	mov	r17,r4
 100c554:	2809883a 	mov	r4,r5
 100c558:	300b883a 	mov	r5,r6
 100c55c:	380d883a 	mov	r6,r7
 100c560:	dfc00215 	stw	ra,8(sp)
 100c564:	100f5240 	call	100f524 <lseek>
 100c568:	1007883a 	mov	r3,r2
 100c56c:	00bfffc4 	movi	r2,-1
 100c570:	18800626 	beq	r3,r2,100c58c <_lseek_r+0x54>
 100c574:	1805883a 	mov	r2,r3
 100c578:	dfc00217 	ldw	ra,8(sp)
 100c57c:	dc400117 	ldw	r17,4(sp)
 100c580:	dc000017 	ldw	r16,0(sp)
 100c584:	dec00304 	addi	sp,sp,12
 100c588:	f800283a 	ret
 100c58c:	80800017 	ldw	r2,0(r16)
 100c590:	103ff826 	beq	r2,zero,100c574 <_lseek_r+0x3c>
 100c594:	88800015 	stw	r2,0(r17)
 100c598:	1805883a 	mov	r2,r3
 100c59c:	dfc00217 	ldw	ra,8(sp)
 100c5a0:	dc400117 	ldw	r17,4(sp)
 100c5a4:	dc000017 	ldw	r16,0(sp)
 100c5a8:	dec00304 	addi	sp,sp,12
 100c5ac:	f800283a 	ret

0100c5b0 <_read_r>:
 100c5b0:	defffd04 	addi	sp,sp,-12
 100c5b4:	dc000015 	stw	r16,0(sp)
 100c5b8:	040040b4 	movhi	r16,258
 100c5bc:	842fd104 	addi	r16,r16,-16572
 100c5c0:	dc400115 	stw	r17,4(sp)
 100c5c4:	80000015 	stw	zero,0(r16)
 100c5c8:	2023883a 	mov	r17,r4
 100c5cc:	2809883a 	mov	r4,r5
 100c5d0:	300b883a 	mov	r5,r6
 100c5d4:	380d883a 	mov	r6,r7
 100c5d8:	dfc00215 	stw	ra,8(sp)
 100c5dc:	100f7200 	call	100f720 <read>
 100c5e0:	1007883a 	mov	r3,r2
 100c5e4:	00bfffc4 	movi	r2,-1
 100c5e8:	18800626 	beq	r3,r2,100c604 <_read_r+0x54>
 100c5ec:	1805883a 	mov	r2,r3
 100c5f0:	dfc00217 	ldw	ra,8(sp)
 100c5f4:	dc400117 	ldw	r17,4(sp)
 100c5f8:	dc000017 	ldw	r16,0(sp)
 100c5fc:	dec00304 	addi	sp,sp,12
 100c600:	f800283a 	ret
 100c604:	80800017 	ldw	r2,0(r16)
 100c608:	103ff826 	beq	r2,zero,100c5ec <_read_r+0x3c>
 100c60c:	88800015 	stw	r2,0(r17)
 100c610:	1805883a 	mov	r2,r3
 100c614:	dfc00217 	ldw	ra,8(sp)
 100c618:	dc400117 	ldw	r17,4(sp)
 100c61c:	dc000017 	ldw	r16,0(sp)
 100c620:	dec00304 	addi	sp,sp,12
 100c624:	f800283a 	ret

0100c628 <__muldi3>:
 100c628:	2011883a 	mov	r8,r4
 100c62c:	427fffcc 	andi	r9,r8,65535
 100c630:	4018d43a 	srli	r12,r8,16
 100c634:	32bfffcc 	andi	r10,r6,65535
 100c638:	3016d43a 	srli	r11,r6,16
 100c63c:	4a85383a 	mul	r2,r9,r10
 100c640:	6295383a 	mul	r10,r12,r10
 100c644:	4ad3383a 	mul	r9,r9,r11
 100c648:	113fffcc 	andi	r4,r2,65535
 100c64c:	1004d43a 	srli	r2,r2,16
 100c650:	4a93883a 	add	r9,r9,r10
 100c654:	3807883a 	mov	r3,r7
 100c658:	1245883a 	add	r2,r2,r9
 100c65c:	280f883a 	mov	r7,r5
 100c660:	180b883a 	mov	r5,r3
 100c664:	1006943a 	slli	r3,r2,16
 100c668:	defffd04 	addi	sp,sp,-12
 100c66c:	dc800215 	stw	r18,8(sp)
 100c670:	1907883a 	add	r3,r3,r4
 100c674:	dc400115 	stw	r17,4(sp)
 100c678:	dc000015 	stw	r16,0(sp)
 100c67c:	4165383a 	mul	r18,r8,r5
 100c680:	31e3383a 	mul	r17,r6,r7
 100c684:	1012d43a 	srli	r9,r2,16
 100c688:	62d9383a 	mul	r12,r12,r11
 100c68c:	181f883a 	mov	r15,r3
 100c690:	1280022e 	bgeu	r2,r10,100c69c <__muldi3+0x74>
 100c694:	00800074 	movhi	r2,1
 100c698:	6099883a 	add	r12,r12,r2
 100c69c:	624d883a 	add	r6,r12,r9
 100c6a0:	9187883a 	add	r3,r18,r6
 100c6a4:	88c7883a 	add	r3,r17,r3
 100c6a8:	7805883a 	mov	r2,r15
 100c6ac:	dc800217 	ldw	r18,8(sp)
 100c6b0:	dc400117 	ldw	r17,4(sp)
 100c6b4:	dc000017 	ldw	r16,0(sp)
 100c6b8:	dec00304 	addi	sp,sp,12
 100c6bc:	f800283a 	ret

0100c6c0 <__fixunsdfsi>:
 100c6c0:	defffb04 	addi	sp,sp,-20
 100c6c4:	dc400115 	stw	r17,4(sp)
 100c6c8:	dc000015 	stw	r16,0(sp)
 100c6cc:	04507834 	movhi	r17,16864
 100c6d0:	0021883a 	mov	r16,zero
 100c6d4:	800d883a 	mov	r6,r16
 100c6d8:	880f883a 	mov	r7,r17
 100c6dc:	dcc00315 	stw	r19,12(sp)
 100c6e0:	dc800215 	stw	r18,8(sp)
 100c6e4:	2827883a 	mov	r19,r5
 100c6e8:	2025883a 	mov	r18,r4
 100c6ec:	dfc00415 	stw	ra,16(sp)
 100c6f0:	100e1100 	call	100e110 <__gedf2>
 100c6f4:	000d883a 	mov	r6,zero
 100c6f8:	880f883a 	mov	r7,r17
 100c6fc:	980b883a 	mov	r5,r19
 100c700:	9009883a 	mov	r4,r18
 100c704:	10000d16 	blt	r2,zero,100c73c <__fixunsdfsi+0x7c>
 100c708:	100d8680 	call	100d868 <__subdf3>
 100c70c:	180b883a 	mov	r5,r3
 100c710:	1009883a 	mov	r4,r2
 100c714:	100e3a00 	call	100e3a0 <__fixdfsi>
 100c718:	00e00034 	movhi	r3,32768
 100c71c:	10c5883a 	add	r2,r2,r3
 100c720:	dfc00417 	ldw	ra,16(sp)
 100c724:	dcc00317 	ldw	r19,12(sp)
 100c728:	dc800217 	ldw	r18,8(sp)
 100c72c:	dc400117 	ldw	r17,4(sp)
 100c730:	dc000017 	ldw	r16,0(sp)
 100c734:	dec00504 	addi	sp,sp,20
 100c738:	f800283a 	ret
 100c73c:	980b883a 	mov	r5,r19
 100c740:	9009883a 	mov	r4,r18
 100c744:	100e3a00 	call	100e3a0 <__fixdfsi>
 100c748:	dfc00417 	ldw	ra,16(sp)
 100c74c:	dcc00317 	ldw	r19,12(sp)
 100c750:	dc800217 	ldw	r18,8(sp)
 100c754:	dc400117 	ldw	r17,4(sp)
 100c758:	dc000017 	ldw	r16,0(sp)
 100c75c:	dec00504 	addi	sp,sp,20
 100c760:	f800283a 	ret

0100c764 <__udivdi3>:
 100c764:	defff004 	addi	sp,sp,-64
 100c768:	2005883a 	mov	r2,r4
 100c76c:	3011883a 	mov	r8,r6
 100c770:	df000e15 	stw	fp,56(sp)
 100c774:	dd000a15 	stw	r20,40(sp)
 100c778:	dc000615 	stw	r16,24(sp)
 100c77c:	dfc00f15 	stw	ra,60(sp)
 100c780:	ddc00d15 	stw	r23,52(sp)
 100c784:	dd800c15 	stw	r22,48(sp)
 100c788:	dd400b15 	stw	r21,44(sp)
 100c78c:	dcc00915 	stw	r19,36(sp)
 100c790:	dc800815 	stw	r18,32(sp)
 100c794:	dc400715 	stw	r17,28(sp)
 100c798:	4021883a 	mov	r16,r8
 100c79c:	1039883a 	mov	fp,r2
 100c7a0:	2829883a 	mov	r20,r5
 100c7a4:	38003b1e 	bne	r7,zero,100c894 <__udivdi3+0x130>
 100c7a8:	2a005c36 	bltu	r5,r8,100c91c <__udivdi3+0x1b8>
 100c7ac:	4000a626 	beq	r8,zero,100ca48 <__udivdi3+0x2e4>
 100c7b0:	00bfffd4 	movui	r2,65535
 100c7b4:	14009e36 	bltu	r2,r16,100ca30 <__udivdi3+0x2cc>
 100c7b8:	00803fc4 	movi	r2,255
 100c7bc:	14013d36 	bltu	r2,r16,100ccb4 <__udivdi3+0x550>
 100c7c0:	000b883a 	mov	r5,zero
 100c7c4:	0005883a 	mov	r2,zero
 100c7c8:	8084d83a 	srl	r2,r16,r2
 100c7cc:	010040b4 	movhi	r4,258
 100c7d0:	2121b304 	addi	r4,r4,-31028
 100c7d4:	01800804 	movi	r6,32
 100c7d8:	1105883a 	add	r2,r2,r4
 100c7dc:	10c00003 	ldbu	r3,0(r2)
 100c7e0:	28c7883a 	add	r3,r5,r3
 100c7e4:	30edc83a 	sub	r22,r6,r3
 100c7e8:	b000ee1e 	bne	r22,zero,100cba4 <__udivdi3+0x440>
 100c7ec:	802ad43a 	srli	r21,r16,16
 100c7f0:	00800044 	movi	r2,1
 100c7f4:	a423c83a 	sub	r17,r20,r16
 100c7f8:	85ffffcc 	andi	r23,r16,65535
 100c7fc:	d8800315 	stw	r2,12(sp)
 100c800:	8809883a 	mov	r4,r17
 100c804:	a80b883a 	mov	r5,r21
 100c808:	100e7bc0 	call	100e7bc <__udivsi3>
 100c80c:	8809883a 	mov	r4,r17
 100c810:	a80b883a 	mov	r5,r21
 100c814:	102d883a 	mov	r22,r2
 100c818:	100e7c40 	call	100e7c4 <__umodsi3>
 100c81c:	1004943a 	slli	r2,r2,16
 100c820:	e006d43a 	srli	r3,fp,16
 100c824:	bda3383a 	mul	r17,r23,r22
 100c828:	10c4b03a 	or	r2,r2,r3
 100c82c:	1440042e 	bgeu	r2,r17,100c840 <__udivdi3+0xdc>
 100c830:	1405883a 	add	r2,r2,r16
 100c834:	b5bfffc4 	addi	r22,r22,-1
 100c838:	14000136 	bltu	r2,r16,100c840 <__udivdi3+0xdc>
 100c83c:	14413d36 	bltu	r2,r17,100cd34 <__udivdi3+0x5d0>
 100c840:	1463c83a 	sub	r17,r2,r17
 100c844:	8809883a 	mov	r4,r17
 100c848:	a80b883a 	mov	r5,r21
 100c84c:	100e7bc0 	call	100e7bc <__udivsi3>
 100c850:	8809883a 	mov	r4,r17
 100c854:	a80b883a 	mov	r5,r21
 100c858:	1029883a 	mov	r20,r2
 100c85c:	100e7c40 	call	100e7c4 <__umodsi3>
 100c860:	1004943a 	slli	r2,r2,16
 100c864:	bd09383a 	mul	r4,r23,r20
 100c868:	e0ffffcc 	andi	r3,fp,65535
 100c86c:	10c4b03a 	or	r2,r2,r3
 100c870:	1100042e 	bgeu	r2,r4,100c884 <__udivdi3+0x120>
 100c874:	8085883a 	add	r2,r16,r2
 100c878:	a53fffc4 	addi	r20,r20,-1
 100c87c:	14000136 	bltu	r2,r16,100c884 <__udivdi3+0x120>
 100c880:	11012036 	bltu	r2,r4,100cd04 <__udivdi3+0x5a0>
 100c884:	b004943a 	slli	r2,r22,16
 100c888:	d9000317 	ldw	r4,12(sp)
 100c88c:	a084b03a 	or	r2,r20,r2
 100c890:	00001506 	br	100c8e8 <__udivdi3+0x184>
 100c894:	380d883a 	mov	r6,r7
 100c898:	29c06236 	bltu	r5,r7,100ca24 <__udivdi3+0x2c0>
 100c89c:	00bfffd4 	movui	r2,65535
 100c8a0:	11c05a36 	bltu	r2,r7,100ca0c <__udivdi3+0x2a8>
 100c8a4:	00803fc4 	movi	r2,255
 100c8a8:	11c0fc36 	bltu	r2,r7,100cc9c <__udivdi3+0x538>
 100c8ac:	000b883a 	mov	r5,zero
 100c8b0:	0005883a 	mov	r2,zero
 100c8b4:	3084d83a 	srl	r2,r6,r2
 100c8b8:	010040b4 	movhi	r4,258
 100c8bc:	2121b304 	addi	r4,r4,-31028
 100c8c0:	01c00804 	movi	r7,32
 100c8c4:	1105883a 	add	r2,r2,r4
 100c8c8:	10c00003 	ldbu	r3,0(r2)
 100c8cc:	28c7883a 	add	r3,r5,r3
 100c8d0:	38efc83a 	sub	r23,r7,r3
 100c8d4:	b800691e 	bne	r23,zero,100ca7c <__udivdi3+0x318>
 100c8d8:	35000136 	bltu	r6,r20,100c8e0 <__udivdi3+0x17c>
 100c8dc:	e4005136 	bltu	fp,r16,100ca24 <__udivdi3+0x2c0>
 100c8e0:	00800044 	movi	r2,1
 100c8e4:	0009883a 	mov	r4,zero
 100c8e8:	2007883a 	mov	r3,r4
 100c8ec:	dfc00f17 	ldw	ra,60(sp)
 100c8f0:	df000e17 	ldw	fp,56(sp)
 100c8f4:	ddc00d17 	ldw	r23,52(sp)
 100c8f8:	dd800c17 	ldw	r22,48(sp)
 100c8fc:	dd400b17 	ldw	r21,44(sp)
 100c900:	dd000a17 	ldw	r20,40(sp)
 100c904:	dcc00917 	ldw	r19,36(sp)
 100c908:	dc800817 	ldw	r18,32(sp)
 100c90c:	dc400717 	ldw	r17,28(sp)
 100c910:	dc000617 	ldw	r16,24(sp)
 100c914:	dec01004 	addi	sp,sp,64
 100c918:	f800283a 	ret
 100c91c:	00bfffd4 	movui	r2,65535
 100c920:	12005036 	bltu	r2,r8,100ca64 <__udivdi3+0x300>
 100c924:	00803fc4 	movi	r2,255
 100c928:	1200e836 	bltu	r2,r8,100cccc <__udivdi3+0x568>
 100c92c:	000b883a 	mov	r5,zero
 100c930:	0005883a 	mov	r2,zero
 100c934:	8084d83a 	srl	r2,r16,r2
 100c938:	010040b4 	movhi	r4,258
 100c93c:	2121b304 	addi	r4,r4,-31028
 100c940:	01800804 	movi	r6,32
 100c944:	1105883a 	add	r2,r2,r4
 100c948:	10c00003 	ldbu	r3,0(r2)
 100c94c:	28c7883a 	add	r3,r5,r3
 100c950:	30cbc83a 	sub	r5,r6,r3
 100c954:	28000626 	beq	r5,zero,100c970 <__udivdi3+0x20c>
 100c958:	3145c83a 	sub	r2,r6,r5
 100c95c:	e084d83a 	srl	r2,fp,r2
 100c960:	a146983a 	sll	r3,r20,r5
 100c964:	e178983a 	sll	fp,fp,r5
 100c968:	8160983a 	sll	r16,r16,r5
 100c96c:	18a8b03a 	or	r20,r3,r2
 100c970:	802ad43a 	srli	r21,r16,16
 100c974:	a009883a 	mov	r4,r20
 100c978:	85ffffcc 	andi	r23,r16,65535
 100c97c:	a80b883a 	mov	r5,r21
 100c980:	100e7bc0 	call	100e7bc <__udivsi3>
 100c984:	a009883a 	mov	r4,r20
 100c988:	a80b883a 	mov	r5,r21
 100c98c:	102d883a 	mov	r22,r2
 100c990:	100e7c40 	call	100e7c4 <__umodsi3>
 100c994:	1004943a 	slli	r2,r2,16
 100c998:	e006d43a 	srli	r3,fp,16
 100c99c:	bda3383a 	mul	r17,r23,r22
 100c9a0:	10c4b03a 	or	r2,r2,r3
 100c9a4:	1440042e 	bgeu	r2,r17,100c9b8 <__udivdi3+0x254>
 100c9a8:	1405883a 	add	r2,r2,r16
 100c9ac:	b5bfffc4 	addi	r22,r22,-1
 100c9b0:	14000136 	bltu	r2,r16,100c9b8 <__udivdi3+0x254>
 100c9b4:	1440d536 	bltu	r2,r17,100cd0c <__udivdi3+0x5a8>
 100c9b8:	1463c83a 	sub	r17,r2,r17
 100c9bc:	8809883a 	mov	r4,r17
 100c9c0:	a80b883a 	mov	r5,r21
 100c9c4:	100e7bc0 	call	100e7bc <__udivsi3>
 100c9c8:	8809883a 	mov	r4,r17
 100c9cc:	a80b883a 	mov	r5,r21
 100c9d0:	1029883a 	mov	r20,r2
 100c9d4:	100e7c40 	call	100e7c4 <__umodsi3>
 100c9d8:	1004943a 	slli	r2,r2,16
 100c9dc:	bd09383a 	mul	r4,r23,r20
 100c9e0:	e0ffffcc 	andi	r3,fp,65535
 100c9e4:	10c4b03a 	or	r2,r2,r3
 100c9e8:	1100042e 	bgeu	r2,r4,100c9fc <__udivdi3+0x298>
 100c9ec:	8085883a 	add	r2,r16,r2
 100c9f0:	a53fffc4 	addi	r20,r20,-1
 100c9f4:	14000136 	bltu	r2,r16,100c9fc <__udivdi3+0x298>
 100c9f8:	1100c736 	bltu	r2,r4,100cd18 <__udivdi3+0x5b4>
 100c9fc:	b004943a 	slli	r2,r22,16
 100ca00:	0009883a 	mov	r4,zero
 100ca04:	a084b03a 	or	r2,r20,r2
 100ca08:	003fb706 	br	100c8e8 <__udivdi3+0x184>
 100ca0c:	00804034 	movhi	r2,256
 100ca10:	10bfffc4 	addi	r2,r2,-1
 100ca14:	11c0a436 	bltu	r2,r7,100cca8 <__udivdi3+0x544>
 100ca18:	01400404 	movi	r5,16
 100ca1c:	2805883a 	mov	r2,r5
 100ca20:	003fa406 	br	100c8b4 <__udivdi3+0x150>
 100ca24:	0005883a 	mov	r2,zero
 100ca28:	0009883a 	mov	r4,zero
 100ca2c:	003fae06 	br	100c8e8 <__udivdi3+0x184>
 100ca30:	00804034 	movhi	r2,256
 100ca34:	10bfffc4 	addi	r2,r2,-1
 100ca38:	1400a136 	bltu	r2,r16,100ccc0 <__udivdi3+0x55c>
 100ca3c:	01400404 	movi	r5,16
 100ca40:	2805883a 	mov	r2,r5
 100ca44:	003f6006 	br	100c7c8 <__udivdi3+0x64>
 100ca48:	01000044 	movi	r4,1
 100ca4c:	000b883a 	mov	r5,zero
 100ca50:	100e7bc0 	call	100e7bc <__udivsi3>
 100ca54:	1021883a 	mov	r16,r2
 100ca58:	00bfffd4 	movui	r2,65535
 100ca5c:	143ff436 	bltu	r2,r16,100ca30 <__udivdi3+0x2cc>
 100ca60:	003f5506 	br	100c7b8 <__udivdi3+0x54>
 100ca64:	00804034 	movhi	r2,256
 100ca68:	10bfffc4 	addi	r2,r2,-1
 100ca6c:	12009a36 	bltu	r2,r8,100ccd8 <__udivdi3+0x574>
 100ca70:	01400404 	movi	r5,16
 100ca74:	2805883a 	mov	r2,r5
 100ca78:	003fae06 	br	100c934 <__udivdi3+0x1d0>
 100ca7c:	3dc5c83a 	sub	r2,r7,r23
 100ca80:	35c8983a 	sll	r4,r6,r23
 100ca84:	8086d83a 	srl	r3,r16,r2
 100ca88:	a0a2d83a 	srl	r17,r20,r2
 100ca8c:	e084d83a 	srl	r2,fp,r2
 100ca90:	20eab03a 	or	r21,r4,r3
 100ca94:	a82cd43a 	srli	r22,r21,16
 100ca98:	a5c6983a 	sll	r3,r20,r23
 100ca9c:	8809883a 	mov	r4,r17
 100caa0:	b00b883a 	mov	r5,r22
 100caa4:	1886b03a 	or	r3,r3,r2
 100caa8:	d8c00215 	stw	r3,8(sp)
 100caac:	100e7bc0 	call	100e7bc <__udivsi3>
 100cab0:	8809883a 	mov	r4,r17
 100cab4:	b00b883a 	mov	r5,r22
 100cab8:	1029883a 	mov	r20,r2
 100cabc:	100e7c40 	call	100e7c4 <__umodsi3>
 100cac0:	a8ffffcc 	andi	r3,r21,65535
 100cac4:	d8c00515 	stw	r3,20(sp)
 100cac8:	d9000217 	ldw	r4,8(sp)
 100cacc:	d9400517 	ldw	r5,20(sp)
 100cad0:	1004943a 	slli	r2,r2,16
 100cad4:	2006d43a 	srli	r3,r4,16
 100cad8:	85e0983a 	sll	r16,r16,r23
 100cadc:	2d23383a 	mul	r17,r5,r20
 100cae0:	10c4b03a 	or	r2,r2,r3
 100cae4:	dc000015 	stw	r16,0(sp)
 100cae8:	1440032e 	bgeu	r2,r17,100caf8 <__udivdi3+0x394>
 100caec:	1545883a 	add	r2,r2,r21
 100caf0:	a53fffc4 	addi	r20,r20,-1
 100caf4:	15407f2e 	bgeu	r2,r21,100ccf4 <__udivdi3+0x590>
 100caf8:	1463c83a 	sub	r17,r2,r17
 100cafc:	8809883a 	mov	r4,r17
 100cb00:	b00b883a 	mov	r5,r22
 100cb04:	100e7bc0 	call	100e7bc <__udivsi3>
 100cb08:	8809883a 	mov	r4,r17
 100cb0c:	b00b883a 	mov	r5,r22
 100cb10:	1021883a 	mov	r16,r2
 100cb14:	100e7c40 	call	100e7c4 <__umodsi3>
 100cb18:	d8c00517 	ldw	r3,20(sp)
 100cb1c:	d9000217 	ldw	r4,8(sp)
 100cb20:	1004943a 	slli	r2,r2,16
 100cb24:	1c0f383a 	mul	r7,r3,r16
 100cb28:	20ffffcc 	andi	r3,r4,65535
 100cb2c:	10e2b03a 	or	r17,r2,r3
 100cb30:	89c0032e 	bgeu	r17,r7,100cb40 <__udivdi3+0x3dc>
 100cb34:	8d63883a 	add	r17,r17,r21
 100cb38:	843fffc4 	addi	r16,r16,-1
 100cb3c:	8d40692e 	bgeu	r17,r21,100cce4 <__udivdi3+0x580>
 100cb40:	a008943a 	slli	r4,r20,16
 100cb44:	d9400017 	ldw	r5,0(sp)
 100cb48:	89e3c83a 	sub	r17,r17,r7
 100cb4c:	8110b03a 	or	r8,r16,r4
 100cb50:	280cd43a 	srli	r6,r5,16
 100cb54:	28ffffcc 	andi	r3,r5,65535
 100cb58:	40bfffcc 	andi	r2,r8,65535
 100cb5c:	400ad43a 	srli	r5,r8,16
 100cb60:	10d3383a 	mul	r9,r2,r3
 100cb64:	1185383a 	mul	r2,r2,r6
 100cb68:	28c7383a 	mul	r3,r5,r3
 100cb6c:	4808d43a 	srli	r4,r9,16
 100cb70:	298b383a 	mul	r5,r5,r6
 100cb74:	10c5883a 	add	r2,r2,r3
 100cb78:	2089883a 	add	r4,r4,r2
 100cb7c:	20c0022e 	bgeu	r4,r3,100cb88 <__udivdi3+0x424>
 100cb80:	00800074 	movhi	r2,1
 100cb84:	288b883a 	add	r5,r5,r2
 100cb88:	2004d43a 	srli	r2,r4,16
 100cb8c:	288b883a 	add	r5,r5,r2
 100cb90:	89403f36 	bltu	r17,r5,100cc90 <__udivdi3+0x52c>
 100cb94:	89403926 	beq	r17,r5,100cc7c <__udivdi3+0x518>
 100cb98:	4005883a 	mov	r2,r8
 100cb9c:	0009883a 	mov	r4,zero
 100cba0:	003f5106 	br	100c8e8 <__udivdi3+0x184>
 100cba4:	85a0983a 	sll	r16,r16,r22
 100cba8:	3585c83a 	sub	r2,r6,r22
 100cbac:	a0a2d83a 	srl	r17,r20,r2
 100cbb0:	802ad43a 	srli	r21,r16,16
 100cbb4:	e084d83a 	srl	r2,fp,r2
 100cbb8:	a586983a 	sll	r3,r20,r22
 100cbbc:	8809883a 	mov	r4,r17
 100cbc0:	a80b883a 	mov	r5,r21
 100cbc4:	1886b03a 	or	r3,r3,r2
 100cbc8:	d8c00115 	stw	r3,4(sp)
 100cbcc:	100e7bc0 	call	100e7bc <__udivsi3>
 100cbd0:	8809883a 	mov	r4,r17
 100cbd4:	a80b883a 	mov	r5,r21
 100cbd8:	d8800415 	stw	r2,16(sp)
 100cbdc:	100e7c40 	call	100e7c4 <__umodsi3>
 100cbe0:	d9000117 	ldw	r4,4(sp)
 100cbe4:	d9400417 	ldw	r5,16(sp)
 100cbe8:	1004943a 	slli	r2,r2,16
 100cbec:	85ffffcc 	andi	r23,r16,65535
 100cbf0:	2006d43a 	srli	r3,r4,16
 100cbf4:	b963383a 	mul	r17,r23,r5
 100cbf8:	10c4b03a 	or	r2,r2,r3
 100cbfc:	1440042e 	bgeu	r2,r17,100cc10 <__udivdi3+0x4ac>
 100cc00:	297fffc4 	addi	r5,r5,-1
 100cc04:	1405883a 	add	r2,r2,r16
 100cc08:	d9400415 	stw	r5,16(sp)
 100cc0c:	1400442e 	bgeu	r2,r16,100cd20 <__udivdi3+0x5bc>
 100cc10:	1463c83a 	sub	r17,r2,r17
 100cc14:	8809883a 	mov	r4,r17
 100cc18:	a80b883a 	mov	r5,r21
 100cc1c:	100e7bc0 	call	100e7bc <__udivsi3>
 100cc20:	8809883a 	mov	r4,r17
 100cc24:	a80b883a 	mov	r5,r21
 100cc28:	1029883a 	mov	r20,r2
 100cc2c:	100e7c40 	call	100e7c4 <__umodsi3>
 100cc30:	d9400117 	ldw	r5,4(sp)
 100cc34:	1004943a 	slli	r2,r2,16
 100cc38:	bd09383a 	mul	r4,r23,r20
 100cc3c:	28ffffcc 	andi	r3,r5,65535
 100cc40:	10c6b03a 	or	r3,r2,r3
 100cc44:	1900062e 	bgeu	r3,r4,100cc60 <__udivdi3+0x4fc>
 100cc48:	1c07883a 	add	r3,r3,r16
 100cc4c:	a53fffc4 	addi	r20,r20,-1
 100cc50:	1c000336 	bltu	r3,r16,100cc60 <__udivdi3+0x4fc>
 100cc54:	1900022e 	bgeu	r3,r4,100cc60 <__udivdi3+0x4fc>
 100cc58:	a53fffc4 	addi	r20,r20,-1
 100cc5c:	1c07883a 	add	r3,r3,r16
 100cc60:	d9400417 	ldw	r5,16(sp)
 100cc64:	e5b8983a 	sll	fp,fp,r22
 100cc68:	1923c83a 	sub	r17,r3,r4
 100cc6c:	2804943a 	slli	r2,r5,16
 100cc70:	a0a8b03a 	or	r20,r20,r2
 100cc74:	dd000315 	stw	r20,12(sp)
 100cc78:	003ee106 	br	100c800 <__udivdi3+0x9c>
 100cc7c:	2004943a 	slli	r2,r4,16
 100cc80:	e5c8983a 	sll	r4,fp,r23
 100cc84:	48ffffcc 	andi	r3,r9,65535
 100cc88:	10c5883a 	add	r2,r2,r3
 100cc8c:	20bfc22e 	bgeu	r4,r2,100cb98 <__udivdi3+0x434>
 100cc90:	40bfffc4 	addi	r2,r8,-1
 100cc94:	0009883a 	mov	r4,zero
 100cc98:	003f1306 	br	100c8e8 <__udivdi3+0x184>
 100cc9c:	01400204 	movi	r5,8
 100cca0:	2805883a 	mov	r2,r5
 100cca4:	003f0306 	br	100c8b4 <__udivdi3+0x150>
 100cca8:	01400604 	movi	r5,24
 100ccac:	2805883a 	mov	r2,r5
 100ccb0:	003f0006 	br	100c8b4 <__udivdi3+0x150>
 100ccb4:	01400204 	movi	r5,8
 100ccb8:	2805883a 	mov	r2,r5
 100ccbc:	003ec206 	br	100c7c8 <__udivdi3+0x64>
 100ccc0:	01400604 	movi	r5,24
 100ccc4:	2805883a 	mov	r2,r5
 100ccc8:	003ebf06 	br	100c7c8 <__udivdi3+0x64>
 100cccc:	01400204 	movi	r5,8
 100ccd0:	2805883a 	mov	r2,r5
 100ccd4:	003f1706 	br	100c934 <__udivdi3+0x1d0>
 100ccd8:	01400604 	movi	r5,24
 100ccdc:	2805883a 	mov	r2,r5
 100cce0:	003f1406 	br	100c934 <__udivdi3+0x1d0>
 100cce4:	89ff962e 	bgeu	r17,r7,100cb40 <__udivdi3+0x3dc>
 100cce8:	8d63883a 	add	r17,r17,r21
 100ccec:	843fffc4 	addi	r16,r16,-1
 100ccf0:	003f9306 	br	100cb40 <__udivdi3+0x3dc>
 100ccf4:	147f802e 	bgeu	r2,r17,100caf8 <__udivdi3+0x394>
 100ccf8:	a53fffc4 	addi	r20,r20,-1
 100ccfc:	1545883a 	add	r2,r2,r21
 100cd00:	003f7d06 	br	100caf8 <__udivdi3+0x394>
 100cd04:	a53fffc4 	addi	r20,r20,-1
 100cd08:	003ede06 	br	100c884 <__udivdi3+0x120>
 100cd0c:	b5bfffc4 	addi	r22,r22,-1
 100cd10:	1405883a 	add	r2,r2,r16
 100cd14:	003f2806 	br	100c9b8 <__udivdi3+0x254>
 100cd18:	a53fffc4 	addi	r20,r20,-1
 100cd1c:	003f3706 	br	100c9fc <__udivdi3+0x298>
 100cd20:	147fbb2e 	bgeu	r2,r17,100cc10 <__udivdi3+0x4ac>
 100cd24:	297fffc4 	addi	r5,r5,-1
 100cd28:	1405883a 	add	r2,r2,r16
 100cd2c:	d9400415 	stw	r5,16(sp)
 100cd30:	003fb706 	br	100cc10 <__udivdi3+0x4ac>
 100cd34:	b5bfffc4 	addi	r22,r22,-1
 100cd38:	1405883a 	add	r2,r2,r16
 100cd3c:	003ec006 	br	100c840 <__udivdi3+0xdc>

0100cd40 <__umoddi3>:
 100cd40:	defff104 	addi	sp,sp,-60
 100cd44:	dd800b15 	stw	r22,44(sp)
 100cd48:	dd000915 	stw	r20,36(sp)
 100cd4c:	dc000515 	stw	r16,20(sp)
 100cd50:	dfc00e15 	stw	ra,56(sp)
 100cd54:	df000d15 	stw	fp,52(sp)
 100cd58:	ddc00c15 	stw	r23,48(sp)
 100cd5c:	dd400a15 	stw	r21,40(sp)
 100cd60:	dcc00815 	stw	r19,32(sp)
 100cd64:	dc800715 	stw	r18,28(sp)
 100cd68:	dc400615 	stw	r17,24(sp)
 100cd6c:	3021883a 	mov	r16,r6
 100cd70:	202d883a 	mov	r22,r4
 100cd74:	2829883a 	mov	r20,r5
 100cd78:	38002b1e 	bne	r7,zero,100ce28 <__umoddi3+0xe8>
 100cd7c:	29805036 	bltu	r5,r6,100cec0 <__umoddi3+0x180>
 100cd80:	30008a26 	beq	r6,zero,100cfac <__umoddi3+0x26c>
 100cd84:	00bfffd4 	movui	r2,65535
 100cd88:	14008236 	bltu	r2,r16,100cf94 <__umoddi3+0x254>
 100cd8c:	00803fc4 	movi	r2,255
 100cd90:	14013636 	bltu	r2,r16,100d26c <__umoddi3+0x52c>
 100cd94:	000b883a 	mov	r5,zero
 100cd98:	0005883a 	mov	r2,zero
 100cd9c:	8084d83a 	srl	r2,r16,r2
 100cda0:	010040b4 	movhi	r4,258
 100cda4:	2121b304 	addi	r4,r4,-31028
 100cda8:	01800804 	movi	r6,32
 100cdac:	1105883a 	add	r2,r2,r4
 100cdb0:	10c00003 	ldbu	r3,0(r2)
 100cdb4:	28c7883a 	add	r3,r5,r3
 100cdb8:	30efc83a 	sub	r23,r6,r3
 100cdbc:	b800941e 	bne	r23,zero,100d010 <__umoddi3+0x2d0>
 100cdc0:	802ad43a 	srli	r21,r16,16
 100cdc4:	a423c83a 	sub	r17,r20,r16
 100cdc8:	0039883a 	mov	fp,zero
 100cdcc:	853fffcc 	andi	r20,r16,65535
 100cdd0:	8809883a 	mov	r4,r17
 100cdd4:	a80b883a 	mov	r5,r21
 100cdd8:	100e7bc0 	call	100e7bc <__udivsi3>
 100cddc:	8809883a 	mov	r4,r17
 100cde0:	a80b883a 	mov	r5,r21
 100cde4:	a0a3383a 	mul	r17,r20,r2
 100cde8:	100e7c40 	call	100e7c4 <__umodsi3>
 100cdec:	1004943a 	slli	r2,r2,16
 100cdf0:	b006d43a 	srli	r3,r22,16
 100cdf4:	10c4b03a 	or	r2,r2,r3
 100cdf8:	1440032e 	bgeu	r2,r17,100ce08 <__umoddi3+0xc8>
 100cdfc:	1405883a 	add	r2,r2,r16
 100ce00:	14000136 	bltu	r2,r16,100ce08 <__umoddi3+0xc8>
 100ce04:	14413536 	bltu	r2,r17,100d2dc <__umoddi3+0x59c>
 100ce08:	1463c83a 	sub	r17,r2,r17
 100ce0c:	8809883a 	mov	r4,r17
 100ce10:	a80b883a 	mov	r5,r21
 100ce14:	100e7bc0 	call	100e7bc <__udivsi3>
 100ce18:	8809883a 	mov	r4,r17
 100ce1c:	a0a3383a 	mul	r17,r20,r2
 100ce20:	a80b883a 	mov	r5,r21
 100ce24:	00004d06 	br	100cf5c <__umoddi3+0x21c>
 100ce28:	380d883a 	mov	r6,r7
 100ce2c:	29c0102e 	bgeu	r5,r7,100ce70 <__umoddi3+0x130>
 100ce30:	2011883a 	mov	r8,r4
 100ce34:	2813883a 	mov	r9,r5
 100ce38:	4005883a 	mov	r2,r8
 100ce3c:	4807883a 	mov	r3,r9
 100ce40:	dfc00e17 	ldw	ra,56(sp)
 100ce44:	df000d17 	ldw	fp,52(sp)
 100ce48:	ddc00c17 	ldw	r23,48(sp)
 100ce4c:	dd800b17 	ldw	r22,44(sp)
 100ce50:	dd400a17 	ldw	r21,40(sp)
 100ce54:	dd000917 	ldw	r20,36(sp)
 100ce58:	dcc00817 	ldw	r19,32(sp)
 100ce5c:	dc800717 	ldw	r18,28(sp)
 100ce60:	dc400617 	ldw	r17,24(sp)
 100ce64:	dc000517 	ldw	r16,20(sp)
 100ce68:	dec00f04 	addi	sp,sp,60
 100ce6c:	f800283a 	ret
 100ce70:	00bfffd4 	movui	r2,65535
 100ce74:	11c05a36 	bltu	r2,r7,100cfe0 <__umoddi3+0x2a0>
 100ce78:	00803fc4 	movi	r2,255
 100ce7c:	11c0fe36 	bltu	r2,r7,100d278 <__umoddi3+0x538>
 100ce80:	000b883a 	mov	r5,zero
 100ce84:	0005883a 	mov	r2,zero
 100ce88:	3084d83a 	srl	r2,r6,r2
 100ce8c:	010040b4 	movhi	r4,258
 100ce90:	2121b304 	addi	r4,r4,-31028
 100ce94:	01c00804 	movi	r7,32
 100ce98:	1105883a 	add	r2,r2,r4
 100ce9c:	10c00003 	ldbu	r3,0(r2)
 100cea0:	28c7883a 	add	r3,r5,r3
 100cea4:	38ebc83a 	sub	r21,r7,r3
 100cea8:	a800851e 	bne	r21,zero,100d0c0 <__umoddi3+0x380>
 100ceac:	35005236 	bltu	r6,r20,100cff8 <__umoddi3+0x2b8>
 100ceb0:	b400512e 	bgeu	r22,r16,100cff8 <__umoddi3+0x2b8>
 100ceb4:	b011883a 	mov	r8,r22
 100ceb8:	a013883a 	mov	r9,r20
 100cebc:	003fde06 	br	100ce38 <__umoddi3+0xf8>
 100cec0:	00bfffd4 	movui	r2,65535
 100cec4:	11804036 	bltu	r2,r6,100cfc8 <__umoddi3+0x288>
 100cec8:	00803fc4 	movi	r2,255
 100cecc:	1180ed36 	bltu	r2,r6,100d284 <__umoddi3+0x544>
 100ced0:	000b883a 	mov	r5,zero
 100ced4:	0005883a 	mov	r2,zero
 100ced8:	8084d83a 	srl	r2,r16,r2
 100cedc:	010040b4 	movhi	r4,258
 100cee0:	2121b304 	addi	r4,r4,-31028
 100cee4:	01800804 	movi	r6,32
 100cee8:	1105883a 	add	r2,r2,r4
 100ceec:	10c00003 	ldbu	r3,0(r2)
 100cef0:	28c7883a 	add	r3,r5,r3
 100cef4:	30c7c83a 	sub	r3,r6,r3
 100cef8:	1800bf1e 	bne	r3,zero,100d1f8 <__umoddi3+0x4b8>
 100cefc:	0039883a 	mov	fp,zero
 100cf00:	802ad43a 	srli	r21,r16,16
 100cf04:	a009883a 	mov	r4,r20
 100cf08:	85ffffcc 	andi	r23,r16,65535
 100cf0c:	a80b883a 	mov	r5,r21
 100cf10:	100e7bc0 	call	100e7bc <__udivsi3>
 100cf14:	a009883a 	mov	r4,r20
 100cf18:	a80b883a 	mov	r5,r21
 100cf1c:	b8a3383a 	mul	r17,r23,r2
 100cf20:	100e7c40 	call	100e7c4 <__umodsi3>
 100cf24:	1004943a 	slli	r2,r2,16
 100cf28:	b006d43a 	srli	r3,r22,16
 100cf2c:	10c4b03a 	or	r2,r2,r3
 100cf30:	1440032e 	bgeu	r2,r17,100cf40 <__umoddi3+0x200>
 100cf34:	1405883a 	add	r2,r2,r16
 100cf38:	14000136 	bltu	r2,r16,100cf40 <__umoddi3+0x200>
 100cf3c:	1440e536 	bltu	r2,r17,100d2d4 <__umoddi3+0x594>
 100cf40:	1463c83a 	sub	r17,r2,r17
 100cf44:	8809883a 	mov	r4,r17
 100cf48:	a80b883a 	mov	r5,r21
 100cf4c:	100e7bc0 	call	100e7bc <__udivsi3>
 100cf50:	8809883a 	mov	r4,r17
 100cf54:	b8a3383a 	mul	r17,r23,r2
 100cf58:	a80b883a 	mov	r5,r21
 100cf5c:	100e7c40 	call	100e7c4 <__umodsi3>
 100cf60:	1004943a 	slli	r2,r2,16
 100cf64:	b0ffffcc 	andi	r3,r22,65535
 100cf68:	10c4b03a 	or	r2,r2,r3
 100cf6c:	1440042e 	bgeu	r2,r17,100cf80 <__umoddi3+0x240>
 100cf70:	1405883a 	add	r2,r2,r16
 100cf74:	14000236 	bltu	r2,r16,100cf80 <__umoddi3+0x240>
 100cf78:	1440012e 	bgeu	r2,r17,100cf80 <__umoddi3+0x240>
 100cf7c:	1405883a 	add	r2,r2,r16
 100cf80:	1445c83a 	sub	r2,r2,r17
 100cf84:	1724d83a 	srl	r18,r2,fp
 100cf88:	0013883a 	mov	r9,zero
 100cf8c:	9011883a 	mov	r8,r18
 100cf90:	003fa906 	br	100ce38 <__umoddi3+0xf8>
 100cf94:	00804034 	movhi	r2,256
 100cf98:	10bfffc4 	addi	r2,r2,-1
 100cf9c:	1400b036 	bltu	r2,r16,100d260 <__umoddi3+0x520>
 100cfa0:	01400404 	movi	r5,16
 100cfa4:	2805883a 	mov	r2,r5
 100cfa8:	003f7c06 	br	100cd9c <__umoddi3+0x5c>
 100cfac:	01000044 	movi	r4,1
 100cfb0:	000b883a 	mov	r5,zero
 100cfb4:	100e7bc0 	call	100e7bc <__udivsi3>
 100cfb8:	1021883a 	mov	r16,r2
 100cfbc:	00bfffd4 	movui	r2,65535
 100cfc0:	143ff436 	bltu	r2,r16,100cf94 <__umoddi3+0x254>
 100cfc4:	003f7106 	br	100cd8c <__umoddi3+0x4c>
 100cfc8:	00804034 	movhi	r2,256
 100cfcc:	10bfffc4 	addi	r2,r2,-1
 100cfd0:	1180af36 	bltu	r2,r6,100d290 <__umoddi3+0x550>
 100cfd4:	01400404 	movi	r5,16
 100cfd8:	2805883a 	mov	r2,r5
 100cfdc:	003fbe06 	br	100ced8 <__umoddi3+0x198>
 100cfe0:	00804034 	movhi	r2,256
 100cfe4:	10bfffc4 	addi	r2,r2,-1
 100cfe8:	11c0ac36 	bltu	r2,r7,100d29c <__umoddi3+0x55c>
 100cfec:	01400404 	movi	r5,16
 100cff0:	2805883a 	mov	r2,r5
 100cff4:	003fa406 	br	100ce88 <__umoddi3+0x148>
 100cff8:	b409c83a 	sub	r4,r22,r16
 100cffc:	b105803a 	cmpltu	r2,r22,r4
 100d000:	a187c83a 	sub	r3,r20,r6
 100d004:	18a9c83a 	sub	r20,r3,r2
 100d008:	202d883a 	mov	r22,r4
 100d00c:	003fa906 	br	100ceb4 <__umoddi3+0x174>
 100d010:	85e0983a 	sll	r16,r16,r23
 100d014:	35c5c83a 	sub	r2,r6,r23
 100d018:	a0a2d83a 	srl	r17,r20,r2
 100d01c:	802ad43a 	srli	r21,r16,16
 100d020:	b084d83a 	srl	r2,r22,r2
 100d024:	a5c6983a 	sll	r3,r20,r23
 100d028:	8809883a 	mov	r4,r17
 100d02c:	a80b883a 	mov	r5,r21
 100d030:	1886b03a 	or	r3,r3,r2
 100d034:	d8c00115 	stw	r3,4(sp)
 100d038:	853fffcc 	andi	r20,r16,65535
 100d03c:	100e7bc0 	call	100e7bc <__udivsi3>
 100d040:	8809883a 	mov	r4,r17
 100d044:	a80b883a 	mov	r5,r21
 100d048:	a0a3383a 	mul	r17,r20,r2
 100d04c:	100e7c40 	call	100e7c4 <__umodsi3>
 100d050:	d9000117 	ldw	r4,4(sp)
 100d054:	1004943a 	slli	r2,r2,16
 100d058:	b839883a 	mov	fp,r23
 100d05c:	2006d43a 	srli	r3,r4,16
 100d060:	10c4b03a 	or	r2,r2,r3
 100d064:	1440022e 	bgeu	r2,r17,100d070 <__umoddi3+0x330>
 100d068:	1405883a 	add	r2,r2,r16
 100d06c:	1400962e 	bgeu	r2,r16,100d2c8 <__umoddi3+0x588>
 100d070:	1463c83a 	sub	r17,r2,r17
 100d074:	8809883a 	mov	r4,r17
 100d078:	a80b883a 	mov	r5,r21
 100d07c:	100e7bc0 	call	100e7bc <__udivsi3>
 100d080:	8809883a 	mov	r4,r17
 100d084:	a80b883a 	mov	r5,r21
 100d088:	a0a3383a 	mul	r17,r20,r2
 100d08c:	100e7c40 	call	100e7c4 <__umodsi3>
 100d090:	d9400117 	ldw	r5,4(sp)
 100d094:	1004943a 	slli	r2,r2,16
 100d098:	28ffffcc 	andi	r3,r5,65535
 100d09c:	10c4b03a 	or	r2,r2,r3
 100d0a0:	1440042e 	bgeu	r2,r17,100d0b4 <__umoddi3+0x374>
 100d0a4:	1405883a 	add	r2,r2,r16
 100d0a8:	14000236 	bltu	r2,r16,100d0b4 <__umoddi3+0x374>
 100d0ac:	1440012e 	bgeu	r2,r17,100d0b4 <__umoddi3+0x374>
 100d0b0:	1405883a 	add	r2,r2,r16
 100d0b4:	b5ec983a 	sll	r22,r22,r23
 100d0b8:	1463c83a 	sub	r17,r2,r17
 100d0bc:	003f4406 	br	100cdd0 <__umoddi3+0x90>
 100d0c0:	3d4fc83a 	sub	r7,r7,r21
 100d0c4:	3546983a 	sll	r3,r6,r21
 100d0c8:	81c4d83a 	srl	r2,r16,r7
 100d0cc:	a1e2d83a 	srl	r17,r20,r7
 100d0d0:	a54c983a 	sll	r6,r20,r21
 100d0d4:	18aeb03a 	or	r23,r3,r2
 100d0d8:	b828d43a 	srli	r20,r23,16
 100d0dc:	b1c4d83a 	srl	r2,r22,r7
 100d0e0:	8809883a 	mov	r4,r17
 100d0e4:	a00b883a 	mov	r5,r20
 100d0e8:	308cb03a 	or	r6,r6,r2
 100d0ec:	d9c00315 	stw	r7,12(sp)
 100d0f0:	d9800215 	stw	r6,8(sp)
 100d0f4:	100e7bc0 	call	100e7bc <__udivsi3>
 100d0f8:	8809883a 	mov	r4,r17
 100d0fc:	a00b883a 	mov	r5,r20
 100d100:	1039883a 	mov	fp,r2
 100d104:	100e7c40 	call	100e7c4 <__umodsi3>
 100d108:	b8ffffcc 	andi	r3,r23,65535
 100d10c:	d8c00415 	stw	r3,16(sp)
 100d110:	d9000217 	ldw	r4,8(sp)
 100d114:	d9400417 	ldw	r5,16(sp)
 100d118:	1004943a 	slli	r2,r2,16
 100d11c:	2006d43a 	srli	r3,r4,16
 100d120:	8560983a 	sll	r16,r16,r21
 100d124:	2f23383a 	mul	r17,r5,fp
 100d128:	10c4b03a 	or	r2,r2,r3
 100d12c:	dc000015 	stw	r16,0(sp)
 100d130:	b56c983a 	sll	r22,r22,r21
 100d134:	1440032e 	bgeu	r2,r17,100d144 <__umoddi3+0x404>
 100d138:	15c5883a 	add	r2,r2,r23
 100d13c:	e73fffc4 	addi	fp,fp,-1
 100d140:	15c05d2e 	bgeu	r2,r23,100d2b8 <__umoddi3+0x578>
 100d144:	1463c83a 	sub	r17,r2,r17
 100d148:	8809883a 	mov	r4,r17
 100d14c:	a00b883a 	mov	r5,r20
 100d150:	100e7bc0 	call	100e7bc <__udivsi3>
 100d154:	8809883a 	mov	r4,r17
 100d158:	a00b883a 	mov	r5,r20
 100d15c:	1021883a 	mov	r16,r2
 100d160:	100e7c40 	call	100e7c4 <__umodsi3>
 100d164:	d8c00417 	ldw	r3,16(sp)
 100d168:	d9000217 	ldw	r4,8(sp)
 100d16c:	1004943a 	slli	r2,r2,16
 100d170:	1c23383a 	mul	r17,r3,r16
 100d174:	20ffffcc 	andi	r3,r4,65535
 100d178:	10ceb03a 	or	r7,r2,r3
 100d17c:	3c40032e 	bgeu	r7,r17,100d18c <__umoddi3+0x44c>
 100d180:	3dcf883a 	add	r7,r7,r23
 100d184:	843fffc4 	addi	r16,r16,-1
 100d188:	3dc0472e 	bgeu	r7,r23,100d2a8 <__umoddi3+0x568>
 100d18c:	e004943a 	slli	r2,fp,16
 100d190:	d9400017 	ldw	r5,0(sp)
 100d194:	3c4fc83a 	sub	r7,r7,r17
 100d198:	8084b03a 	or	r2,r16,r2
 100d19c:	28ffffcc 	andi	r3,r5,65535
 100d1a0:	280cd43a 	srli	r6,r5,16
 100d1a4:	100ad43a 	srli	r5,r2,16
 100d1a8:	10bfffcc 	andi	r2,r2,65535
 100d1ac:	10d1383a 	mul	r8,r2,r3
 100d1b0:	28c7383a 	mul	r3,r5,r3
 100d1b4:	1185383a 	mul	r2,r2,r6
 100d1b8:	4008d43a 	srli	r4,r8,16
 100d1bc:	298b383a 	mul	r5,r5,r6
 100d1c0:	10c5883a 	add	r2,r2,r3
 100d1c4:	2089883a 	add	r4,r4,r2
 100d1c8:	20c0022e 	bgeu	r4,r3,100d1d4 <__umoddi3+0x494>
 100d1cc:	00800074 	movhi	r2,1
 100d1d0:	288b883a 	add	r5,r5,r2
 100d1d4:	2004d43a 	srli	r2,r4,16
 100d1d8:	2008943a 	slli	r4,r4,16
 100d1dc:	40ffffcc 	andi	r3,r8,65535
 100d1e0:	288b883a 	add	r5,r5,r2
 100d1e4:	20c9883a 	add	r4,r4,r3
 100d1e8:	39400b36 	bltu	r7,r5,100d218 <__umoddi3+0x4d8>
 100d1ec:	39403d26 	beq	r7,r5,100d2e4 <__umoddi3+0x5a4>
 100d1f0:	394bc83a 	sub	r5,r7,r5
 100d1f4:	00000f06 	br	100d234 <__umoddi3+0x4f4>
 100d1f8:	30c5c83a 	sub	r2,r6,r3
 100d1fc:	1839883a 	mov	fp,r3
 100d200:	b084d83a 	srl	r2,r22,r2
 100d204:	a0c6983a 	sll	r3,r20,r3
 100d208:	8720983a 	sll	r16,r16,fp
 100d20c:	b72c983a 	sll	r22,r22,fp
 100d210:	18a8b03a 	or	r20,r3,r2
 100d214:	003f3a06 	br	100cf00 <__umoddi3+0x1c0>
 100d218:	d8c00017 	ldw	r3,0(sp)
 100d21c:	20c5c83a 	sub	r2,r4,r3
 100d220:	2089803a 	cmpltu	r4,r4,r2
 100d224:	2dc7c83a 	sub	r3,r5,r23
 100d228:	1907c83a 	sub	r3,r3,r4
 100d22c:	38cbc83a 	sub	r5,r7,r3
 100d230:	1009883a 	mov	r4,r2
 100d234:	b105c83a 	sub	r2,r22,r4
 100d238:	b087803a 	cmpltu	r3,r22,r2
 100d23c:	28c7c83a 	sub	r3,r5,r3
 100d240:	d9400317 	ldw	r5,12(sp)
 100d244:	1544d83a 	srl	r2,r2,r21
 100d248:	1948983a 	sll	r4,r3,r5
 100d24c:	1d46d83a 	srl	r3,r3,r21
 100d250:	20a4b03a 	or	r18,r4,r2
 100d254:	9011883a 	mov	r8,r18
 100d258:	1813883a 	mov	r9,r3
 100d25c:	003ef606 	br	100ce38 <__umoddi3+0xf8>
 100d260:	01400604 	movi	r5,24
 100d264:	2805883a 	mov	r2,r5
 100d268:	003ecc06 	br	100cd9c <__umoddi3+0x5c>
 100d26c:	01400204 	movi	r5,8
 100d270:	2805883a 	mov	r2,r5
 100d274:	003ec906 	br	100cd9c <__umoddi3+0x5c>
 100d278:	01400204 	movi	r5,8
 100d27c:	2805883a 	mov	r2,r5
 100d280:	003f0106 	br	100ce88 <__umoddi3+0x148>
 100d284:	01400204 	movi	r5,8
 100d288:	2805883a 	mov	r2,r5
 100d28c:	003f1206 	br	100ced8 <__umoddi3+0x198>
 100d290:	01400604 	movi	r5,24
 100d294:	2805883a 	mov	r2,r5
 100d298:	003f0f06 	br	100ced8 <__umoddi3+0x198>
 100d29c:	01400604 	movi	r5,24
 100d2a0:	2805883a 	mov	r2,r5
 100d2a4:	003ef806 	br	100ce88 <__umoddi3+0x148>
 100d2a8:	3c7fb82e 	bgeu	r7,r17,100d18c <__umoddi3+0x44c>
 100d2ac:	843fffc4 	addi	r16,r16,-1
 100d2b0:	3dcf883a 	add	r7,r7,r23
 100d2b4:	003fb506 	br	100d18c <__umoddi3+0x44c>
 100d2b8:	147fa22e 	bgeu	r2,r17,100d144 <__umoddi3+0x404>
 100d2bc:	e73fffc4 	addi	fp,fp,-1
 100d2c0:	15c5883a 	add	r2,r2,r23
 100d2c4:	003f9f06 	br	100d144 <__umoddi3+0x404>
 100d2c8:	147f692e 	bgeu	r2,r17,100d070 <__umoddi3+0x330>
 100d2cc:	1405883a 	add	r2,r2,r16
 100d2d0:	003f6706 	br	100d070 <__umoddi3+0x330>
 100d2d4:	1405883a 	add	r2,r2,r16
 100d2d8:	003f1906 	br	100cf40 <__umoddi3+0x200>
 100d2dc:	1405883a 	add	r2,r2,r16
 100d2e0:	003ec906 	br	100ce08 <__umoddi3+0xc8>
 100d2e4:	b13fcc36 	bltu	r22,r4,100d218 <__umoddi3+0x4d8>
 100d2e8:	000b883a 	mov	r5,zero
 100d2ec:	003fd106 	br	100d234 <__umoddi3+0x4f4>

0100d2f0 <__nesf2>:
 100d2f0:	defff304 	addi	sp,sp,-52
 100d2f4:	dc400b15 	stw	r17,44(sp)
 100d2f8:	dc400204 	addi	r17,sp,8
 100d2fc:	dc000a15 	stw	r16,40(sp)
 100d300:	d9000015 	stw	r4,0(sp)
 100d304:	d9400115 	stw	r5,4(sp)
 100d308:	d809883a 	mov	r4,sp
 100d30c:	880b883a 	mov	r5,r17
 100d310:	dc000604 	addi	r16,sp,24
 100d314:	dfc00c15 	stw	ra,48(sp)
 100d318:	100e84c0 	call	100e84c <__unpack_f>
 100d31c:	d9000104 	addi	r4,sp,4
 100d320:	800b883a 	mov	r5,r16
 100d324:	100e84c0 	call	100e84c <__unpack_f>
 100d328:	d8800217 	ldw	r2,8(sp)
 100d32c:	00c00044 	movi	r3,1
 100d330:	180d883a 	mov	r6,r3
 100d334:	1880062e 	bgeu	r3,r2,100d350 <__nesf2+0x60>
 100d338:	d8800617 	ldw	r2,24(sp)
 100d33c:	8809883a 	mov	r4,r17
 100d340:	800b883a 	mov	r5,r16
 100d344:	1880022e 	bgeu	r3,r2,100d350 <__nesf2+0x60>
 100d348:	100e9140 	call	100e914 <__fpcmp_parts_f>
 100d34c:	100d883a 	mov	r6,r2
 100d350:	3005883a 	mov	r2,r6
 100d354:	dfc00c17 	ldw	ra,48(sp)
 100d358:	dc400b17 	ldw	r17,44(sp)
 100d35c:	dc000a17 	ldw	r16,40(sp)
 100d360:	dec00d04 	addi	sp,sp,52
 100d364:	f800283a 	ret

0100d368 <__gtsf2>:
 100d368:	defff304 	addi	sp,sp,-52
 100d36c:	dc400b15 	stw	r17,44(sp)
 100d370:	dc400204 	addi	r17,sp,8
 100d374:	dc000a15 	stw	r16,40(sp)
 100d378:	d9000015 	stw	r4,0(sp)
 100d37c:	d9400115 	stw	r5,4(sp)
 100d380:	d809883a 	mov	r4,sp
 100d384:	880b883a 	mov	r5,r17
 100d388:	dc000604 	addi	r16,sp,24
 100d38c:	dfc00c15 	stw	ra,48(sp)
 100d390:	100e84c0 	call	100e84c <__unpack_f>
 100d394:	d9000104 	addi	r4,sp,4
 100d398:	800b883a 	mov	r5,r16
 100d39c:	100e84c0 	call	100e84c <__unpack_f>
 100d3a0:	d8800217 	ldw	r2,8(sp)
 100d3a4:	00c00044 	movi	r3,1
 100d3a8:	01bfffc4 	movi	r6,-1
 100d3ac:	1880062e 	bgeu	r3,r2,100d3c8 <__gtsf2+0x60>
 100d3b0:	d8800617 	ldw	r2,24(sp)
 100d3b4:	8809883a 	mov	r4,r17
 100d3b8:	800b883a 	mov	r5,r16
 100d3bc:	1880022e 	bgeu	r3,r2,100d3c8 <__gtsf2+0x60>
 100d3c0:	100e9140 	call	100e914 <__fpcmp_parts_f>
 100d3c4:	100d883a 	mov	r6,r2
 100d3c8:	3005883a 	mov	r2,r6
 100d3cc:	dfc00c17 	ldw	ra,48(sp)
 100d3d0:	dc400b17 	ldw	r17,44(sp)
 100d3d4:	dc000a17 	ldw	r16,40(sp)
 100d3d8:	dec00d04 	addi	sp,sp,52
 100d3dc:	f800283a 	ret

0100d3e0 <__ltsf2>:
 100d3e0:	defff304 	addi	sp,sp,-52
 100d3e4:	dc400b15 	stw	r17,44(sp)
 100d3e8:	dc400204 	addi	r17,sp,8
 100d3ec:	dc000a15 	stw	r16,40(sp)
 100d3f0:	d9000015 	stw	r4,0(sp)
 100d3f4:	d9400115 	stw	r5,4(sp)
 100d3f8:	d809883a 	mov	r4,sp
 100d3fc:	880b883a 	mov	r5,r17
 100d400:	dc000604 	addi	r16,sp,24
 100d404:	dfc00c15 	stw	ra,48(sp)
 100d408:	100e84c0 	call	100e84c <__unpack_f>
 100d40c:	d9000104 	addi	r4,sp,4
 100d410:	800b883a 	mov	r5,r16
 100d414:	100e84c0 	call	100e84c <__unpack_f>
 100d418:	d8800217 	ldw	r2,8(sp)
 100d41c:	00c00044 	movi	r3,1
 100d420:	180d883a 	mov	r6,r3
 100d424:	1880062e 	bgeu	r3,r2,100d440 <__ltsf2+0x60>
 100d428:	d8800617 	ldw	r2,24(sp)
 100d42c:	8809883a 	mov	r4,r17
 100d430:	800b883a 	mov	r5,r16
 100d434:	1880022e 	bgeu	r3,r2,100d440 <__ltsf2+0x60>
 100d438:	100e9140 	call	100e914 <__fpcmp_parts_f>
 100d43c:	100d883a 	mov	r6,r2
 100d440:	3005883a 	mov	r2,r6
 100d444:	dfc00c17 	ldw	ra,48(sp)
 100d448:	dc400b17 	ldw	r17,44(sp)
 100d44c:	dc000a17 	ldw	r16,40(sp)
 100d450:	dec00d04 	addi	sp,sp,52
 100d454:	f800283a 	ret

0100d458 <_fpadd_parts>:
 100d458:	defff804 	addi	sp,sp,-32
 100d45c:	dcc00315 	stw	r19,12(sp)
 100d460:	2027883a 	mov	r19,r4
 100d464:	21000017 	ldw	r4,0(r4)
 100d468:	00c00044 	movi	r3,1
 100d46c:	dd400515 	stw	r21,20(sp)
 100d470:	dd000415 	stw	r20,16(sp)
 100d474:	ddc00715 	stw	r23,28(sp)
 100d478:	dd800615 	stw	r22,24(sp)
 100d47c:	dc800215 	stw	r18,8(sp)
 100d480:	dc400115 	stw	r17,4(sp)
 100d484:	dc000015 	stw	r16,0(sp)
 100d488:	282b883a 	mov	r21,r5
 100d48c:	3029883a 	mov	r20,r6
 100d490:	1900632e 	bgeu	r3,r4,100d620 <_fpadd_parts+0x1c8>
 100d494:	28800017 	ldw	r2,0(r5)
 100d498:	1880812e 	bgeu	r3,r2,100d6a0 <_fpadd_parts+0x248>
 100d49c:	00c00104 	movi	r3,4
 100d4a0:	20c0dc26 	beq	r4,r3,100d814 <_fpadd_parts+0x3bc>
 100d4a4:	10c07e26 	beq	r2,r3,100d6a0 <_fpadd_parts+0x248>
 100d4a8:	00c00084 	movi	r3,2
 100d4ac:	10c06726 	beq	r2,r3,100d64c <_fpadd_parts+0x1f4>
 100d4b0:	20c07b26 	beq	r4,r3,100d6a0 <_fpadd_parts+0x248>
 100d4b4:	9dc00217 	ldw	r23,8(r19)
 100d4b8:	28c00217 	ldw	r3,8(r5)
 100d4bc:	9c400317 	ldw	r17,12(r19)
 100d4c0:	2bc00317 	ldw	r15,12(r5)
 100d4c4:	b8cdc83a 	sub	r6,r23,r3
 100d4c8:	9c800417 	ldw	r18,16(r19)
 100d4cc:	2c000417 	ldw	r16,16(r5)
 100d4d0:	3009883a 	mov	r4,r6
 100d4d4:	30009716 	blt	r6,zero,100d734 <_fpadd_parts+0x2dc>
 100d4d8:	00800fc4 	movi	r2,63
 100d4dc:	11806b16 	blt	r2,r6,100d68c <_fpadd_parts+0x234>
 100d4e0:	0100a40e 	bge	zero,r4,100d774 <_fpadd_parts+0x31c>
 100d4e4:	35bff804 	addi	r22,r6,-32
 100d4e8:	b000bc16 	blt	r22,zero,100d7dc <_fpadd_parts+0x384>
 100d4ec:	8596d83a 	srl	r11,r16,r22
 100d4f0:	0019883a 	mov	r12,zero
 100d4f4:	0013883a 	mov	r9,zero
 100d4f8:	01000044 	movi	r4,1
 100d4fc:	0015883a 	mov	r10,zero
 100d500:	b000be16 	blt	r22,zero,100d7fc <_fpadd_parts+0x3a4>
 100d504:	2590983a 	sll	r8,r4,r22
 100d508:	000f883a 	mov	r7,zero
 100d50c:	00bfffc4 	movi	r2,-1
 100d510:	3889883a 	add	r4,r7,r2
 100d514:	408b883a 	add	r5,r8,r2
 100d518:	21cd803a 	cmpltu	r6,r4,r7
 100d51c:	314b883a 	add	r5,r6,r5
 100d520:	7904703a 	and	r2,r15,r4
 100d524:	8146703a 	and	r3,r16,r5
 100d528:	10c4b03a 	or	r2,r2,r3
 100d52c:	10000226 	beq	r2,zero,100d538 <_fpadd_parts+0xe0>
 100d530:	02400044 	movi	r9,1
 100d534:	0015883a 	mov	r10,zero
 100d538:	5a5eb03a 	or	r15,r11,r9
 100d53c:	62a0b03a 	or	r16,r12,r10
 100d540:	99400117 	ldw	r5,4(r19)
 100d544:	a8800117 	ldw	r2,4(r21)
 100d548:	28806e26 	beq	r5,r2,100d704 <_fpadd_parts+0x2ac>
 100d54c:	28006626 	beq	r5,zero,100d6e8 <_fpadd_parts+0x290>
 100d550:	7c45c83a 	sub	r2,r15,r17
 100d554:	7889803a 	cmpltu	r4,r15,r2
 100d558:	8487c83a 	sub	r3,r16,r18
 100d55c:	1909c83a 	sub	r4,r3,r4
 100d560:	100d883a 	mov	r6,r2
 100d564:	200f883a 	mov	r7,r4
 100d568:	38007716 	blt	r7,zero,100d748 <_fpadd_parts+0x2f0>
 100d56c:	a5c00215 	stw	r23,8(r20)
 100d570:	a1c00415 	stw	r7,16(r20)
 100d574:	a0000115 	stw	zero,4(r20)
 100d578:	a1800315 	stw	r6,12(r20)
 100d57c:	a2000317 	ldw	r8,12(r20)
 100d580:	a2400417 	ldw	r9,16(r20)
 100d584:	00bfffc4 	movi	r2,-1
 100d588:	408b883a 	add	r5,r8,r2
 100d58c:	2a09803a 	cmpltu	r4,r5,r8
 100d590:	488d883a 	add	r6,r9,r2
 100d594:	01c40034 	movhi	r7,4096
 100d598:	39ffffc4 	addi	r7,r7,-1
 100d59c:	218d883a 	add	r6,r4,r6
 100d5a0:	39801736 	bltu	r7,r6,100d600 <_fpadd_parts+0x1a8>
 100d5a4:	31c06526 	beq	r6,r7,100d73c <_fpadd_parts+0x2e4>
 100d5a8:	a3000217 	ldw	r12,8(r20)
 100d5ac:	4209883a 	add	r4,r8,r8
 100d5b0:	00bfffc4 	movi	r2,-1
 100d5b4:	220f803a 	cmpltu	r7,r4,r8
 100d5b8:	4a4b883a 	add	r5,r9,r9
 100d5bc:	394f883a 	add	r7,r7,r5
 100d5c0:	2095883a 	add	r10,r4,r2
 100d5c4:	3897883a 	add	r11,r7,r2
 100d5c8:	510d803a 	cmpltu	r6,r10,r4
 100d5cc:	6099883a 	add	r12,r12,r2
 100d5d0:	32d7883a 	add	r11,r6,r11
 100d5d4:	00840034 	movhi	r2,4096
 100d5d8:	10bfffc4 	addi	r2,r2,-1
 100d5dc:	2011883a 	mov	r8,r4
 100d5e0:	3813883a 	mov	r9,r7
 100d5e4:	a1000315 	stw	r4,12(r20)
 100d5e8:	a1c00415 	stw	r7,16(r20)
 100d5ec:	a3000215 	stw	r12,8(r20)
 100d5f0:	12c00336 	bltu	r2,r11,100d600 <_fpadd_parts+0x1a8>
 100d5f4:	58bfed1e 	bne	r11,r2,100d5ac <_fpadd_parts+0x154>
 100d5f8:	00bfff84 	movi	r2,-2
 100d5fc:	12bfeb2e 	bgeu	r2,r10,100d5ac <_fpadd_parts+0x154>
 100d600:	a2800417 	ldw	r10,16(r20)
 100d604:	008000c4 	movi	r2,3
 100d608:	00c80034 	movhi	r3,8192
 100d60c:	18ffffc4 	addi	r3,r3,-1
 100d610:	a2400317 	ldw	r9,12(r20)
 100d614:	a0800015 	stw	r2,0(r20)
 100d618:	1a802336 	bltu	r3,r10,100d6a8 <_fpadd_parts+0x250>
 100d61c:	a027883a 	mov	r19,r20
 100d620:	9805883a 	mov	r2,r19
 100d624:	ddc00717 	ldw	r23,28(sp)
 100d628:	dd800617 	ldw	r22,24(sp)
 100d62c:	dd400517 	ldw	r21,20(sp)
 100d630:	dd000417 	ldw	r20,16(sp)
 100d634:	dcc00317 	ldw	r19,12(sp)
 100d638:	dc800217 	ldw	r18,8(sp)
 100d63c:	dc400117 	ldw	r17,4(sp)
 100d640:	dc000017 	ldw	r16,0(sp)
 100d644:	dec00804 	addi	sp,sp,32
 100d648:	f800283a 	ret
 100d64c:	20fff41e 	bne	r4,r3,100d620 <_fpadd_parts+0x1c8>
 100d650:	31000015 	stw	r4,0(r6)
 100d654:	98800117 	ldw	r2,4(r19)
 100d658:	30800115 	stw	r2,4(r6)
 100d65c:	98c00217 	ldw	r3,8(r19)
 100d660:	30c00215 	stw	r3,8(r6)
 100d664:	98800317 	ldw	r2,12(r19)
 100d668:	30800315 	stw	r2,12(r6)
 100d66c:	98c00417 	ldw	r3,16(r19)
 100d670:	30c00415 	stw	r3,16(r6)
 100d674:	98800117 	ldw	r2,4(r19)
 100d678:	28c00117 	ldw	r3,4(r5)
 100d67c:	3027883a 	mov	r19,r6
 100d680:	10c4703a 	and	r2,r2,r3
 100d684:	30800115 	stw	r2,4(r6)
 100d688:	003fe506 	br	100d620 <_fpadd_parts+0x1c8>
 100d68c:	1dc02616 	blt	r3,r23,100d728 <_fpadd_parts+0x2d0>
 100d690:	0023883a 	mov	r17,zero
 100d694:	182f883a 	mov	r23,r3
 100d698:	0025883a 	mov	r18,zero
 100d69c:	003fa806 	br	100d540 <_fpadd_parts+0xe8>
 100d6a0:	a827883a 	mov	r19,r21
 100d6a4:	003fde06 	br	100d620 <_fpadd_parts+0x1c8>
 100d6a8:	01800044 	movi	r6,1
 100d6ac:	500497fa 	slli	r2,r10,31
 100d6b0:	4808d07a 	srli	r4,r9,1
 100d6b4:	518ad83a 	srl	r5,r10,r6
 100d6b8:	a2000217 	ldw	r8,8(r20)
 100d6bc:	1108b03a 	or	r4,r2,r4
 100d6c0:	0007883a 	mov	r3,zero
 100d6c4:	4984703a 	and	r2,r9,r6
 100d6c8:	208cb03a 	or	r6,r4,r2
 100d6cc:	28ceb03a 	or	r7,r5,r3
 100d6d0:	42000044 	addi	r8,r8,1
 100d6d4:	a027883a 	mov	r19,r20
 100d6d8:	a1c00415 	stw	r7,16(r20)
 100d6dc:	a2000215 	stw	r8,8(r20)
 100d6e0:	a1800315 	stw	r6,12(r20)
 100d6e4:	003fce06 	br	100d620 <_fpadd_parts+0x1c8>
 100d6e8:	8bc5c83a 	sub	r2,r17,r15
 100d6ec:	8889803a 	cmpltu	r4,r17,r2
 100d6f0:	9407c83a 	sub	r3,r18,r16
 100d6f4:	1909c83a 	sub	r4,r3,r4
 100d6f8:	100d883a 	mov	r6,r2
 100d6fc:	200f883a 	mov	r7,r4
 100d700:	003f9906 	br	100d568 <_fpadd_parts+0x110>
 100d704:	7c45883a 	add	r2,r15,r17
 100d708:	13c9803a 	cmpltu	r4,r2,r15
 100d70c:	8487883a 	add	r3,r16,r18
 100d710:	20c9883a 	add	r4,r4,r3
 100d714:	a1400115 	stw	r5,4(r20)
 100d718:	a5c00215 	stw	r23,8(r20)
 100d71c:	a0800315 	stw	r2,12(r20)
 100d720:	a1000415 	stw	r4,16(r20)
 100d724:	003fb606 	br	100d600 <_fpadd_parts+0x1a8>
 100d728:	001f883a 	mov	r15,zero
 100d72c:	0021883a 	mov	r16,zero
 100d730:	003f8306 	br	100d540 <_fpadd_parts+0xe8>
 100d734:	018dc83a 	sub	r6,zero,r6
 100d738:	003f6706 	br	100d4d8 <_fpadd_parts+0x80>
 100d73c:	00bfff84 	movi	r2,-2
 100d740:	117faf36 	bltu	r2,r5,100d600 <_fpadd_parts+0x1a8>
 100d744:	003f9806 	br	100d5a8 <_fpadd_parts+0x150>
 100d748:	0005883a 	mov	r2,zero
 100d74c:	1189c83a 	sub	r4,r2,r6
 100d750:	1105803a 	cmpltu	r2,r2,r4
 100d754:	01cbc83a 	sub	r5,zero,r7
 100d758:	2885c83a 	sub	r2,r5,r2
 100d75c:	01800044 	movi	r6,1
 100d760:	a1800115 	stw	r6,4(r20)
 100d764:	a5c00215 	stw	r23,8(r20)
 100d768:	a1000315 	stw	r4,12(r20)
 100d76c:	a0800415 	stw	r2,16(r20)
 100d770:	003f8206 	br	100d57c <_fpadd_parts+0x124>
 100d774:	203f7226 	beq	r4,zero,100d540 <_fpadd_parts+0xe8>
 100d778:	35bff804 	addi	r22,r6,-32
 100d77c:	b9af883a 	add	r23,r23,r6
 100d780:	b0003116 	blt	r22,zero,100d848 <_fpadd_parts+0x3f0>
 100d784:	959ad83a 	srl	r13,r18,r22
 100d788:	001d883a 	mov	r14,zero
 100d78c:	000f883a 	mov	r7,zero
 100d790:	01000044 	movi	r4,1
 100d794:	0011883a 	mov	r8,zero
 100d798:	b0002516 	blt	r22,zero,100d830 <_fpadd_parts+0x3d8>
 100d79c:	2594983a 	sll	r10,r4,r22
 100d7a0:	0013883a 	mov	r9,zero
 100d7a4:	00bfffc4 	movi	r2,-1
 100d7a8:	4889883a 	add	r4,r9,r2
 100d7ac:	508b883a 	add	r5,r10,r2
 100d7b0:	224d803a 	cmpltu	r6,r4,r9
 100d7b4:	314b883a 	add	r5,r6,r5
 100d7b8:	8904703a 	and	r2,r17,r4
 100d7bc:	9146703a 	and	r3,r18,r5
 100d7c0:	10c4b03a 	or	r2,r2,r3
 100d7c4:	10000226 	beq	r2,zero,100d7d0 <_fpadd_parts+0x378>
 100d7c8:	01c00044 	movi	r7,1
 100d7cc:	0011883a 	mov	r8,zero
 100d7d0:	69e2b03a 	or	r17,r13,r7
 100d7d4:	7224b03a 	or	r18,r14,r8
 100d7d8:	003f5906 	br	100d540 <_fpadd_parts+0xe8>
 100d7dc:	8407883a 	add	r3,r16,r16
 100d7e0:	008007c4 	movi	r2,31
 100d7e4:	1185c83a 	sub	r2,r2,r6
 100d7e8:	1886983a 	sll	r3,r3,r2
 100d7ec:	7996d83a 	srl	r11,r15,r6
 100d7f0:	8198d83a 	srl	r12,r16,r6
 100d7f4:	1ad6b03a 	or	r11,r3,r11
 100d7f8:	003f3e06 	br	100d4f4 <_fpadd_parts+0x9c>
 100d7fc:	2006d07a 	srli	r3,r4,1
 100d800:	008007c4 	movi	r2,31
 100d804:	1185c83a 	sub	r2,r2,r6
 100d808:	1890d83a 	srl	r8,r3,r2
 100d80c:	218e983a 	sll	r7,r4,r6
 100d810:	003f3e06 	br	100d50c <_fpadd_parts+0xb4>
 100d814:	113f821e 	bne	r2,r4,100d620 <_fpadd_parts+0x1c8>
 100d818:	28c00117 	ldw	r3,4(r5)
 100d81c:	98800117 	ldw	r2,4(r19)
 100d820:	10ff7f26 	beq	r2,r3,100d620 <_fpadd_parts+0x1c8>
 100d824:	04c040b4 	movhi	r19,258
 100d828:	9ce1ae04 	addi	r19,r19,-31048
 100d82c:	003f7c06 	br	100d620 <_fpadd_parts+0x1c8>
 100d830:	2006d07a 	srli	r3,r4,1
 100d834:	008007c4 	movi	r2,31
 100d838:	1185c83a 	sub	r2,r2,r6
 100d83c:	1894d83a 	srl	r10,r3,r2
 100d840:	2192983a 	sll	r9,r4,r6
 100d844:	003fd706 	br	100d7a4 <_fpadd_parts+0x34c>
 100d848:	9487883a 	add	r3,r18,r18
 100d84c:	008007c4 	movi	r2,31
 100d850:	1185c83a 	sub	r2,r2,r6
 100d854:	1886983a 	sll	r3,r3,r2
 100d858:	899ad83a 	srl	r13,r17,r6
 100d85c:	919cd83a 	srl	r14,r18,r6
 100d860:	1b5ab03a 	or	r13,r3,r13
 100d864:	003fc906 	br	100d78c <_fpadd_parts+0x334>

0100d868 <__subdf3>:
 100d868:	deffea04 	addi	sp,sp,-88
 100d86c:	dcc01415 	stw	r19,80(sp)
 100d870:	dcc00404 	addi	r19,sp,16
 100d874:	2011883a 	mov	r8,r4
 100d878:	2813883a 	mov	r9,r5
 100d87c:	dc401315 	stw	r17,76(sp)
 100d880:	d809883a 	mov	r4,sp
 100d884:	980b883a 	mov	r5,r19
 100d888:	dc400904 	addi	r17,sp,36
 100d88c:	dfc01515 	stw	ra,84(sp)
 100d890:	da400115 	stw	r9,4(sp)
 100d894:	d9c00315 	stw	r7,12(sp)
 100d898:	da000015 	stw	r8,0(sp)
 100d89c:	d9800215 	stw	r6,8(sp)
 100d8a0:	100ecfc0 	call	100ecfc <__unpack_d>
 100d8a4:	d9000204 	addi	r4,sp,8
 100d8a8:	880b883a 	mov	r5,r17
 100d8ac:	100ecfc0 	call	100ecfc <__unpack_d>
 100d8b0:	d8800a17 	ldw	r2,40(sp)
 100d8b4:	880b883a 	mov	r5,r17
 100d8b8:	9809883a 	mov	r4,r19
 100d8bc:	d9800e04 	addi	r6,sp,56
 100d8c0:	1080005c 	xori	r2,r2,1
 100d8c4:	d8800a15 	stw	r2,40(sp)
 100d8c8:	100d4580 	call	100d458 <_fpadd_parts>
 100d8cc:	1009883a 	mov	r4,r2
 100d8d0:	100e9e80 	call	100e9e8 <__pack_d>
 100d8d4:	dfc01517 	ldw	ra,84(sp)
 100d8d8:	dcc01417 	ldw	r19,80(sp)
 100d8dc:	dc401317 	ldw	r17,76(sp)
 100d8e0:	dec01604 	addi	sp,sp,88
 100d8e4:	f800283a 	ret

0100d8e8 <__adddf3>:
 100d8e8:	deffea04 	addi	sp,sp,-88
 100d8ec:	dcc01415 	stw	r19,80(sp)
 100d8f0:	dcc00404 	addi	r19,sp,16
 100d8f4:	2011883a 	mov	r8,r4
 100d8f8:	2813883a 	mov	r9,r5
 100d8fc:	dc401315 	stw	r17,76(sp)
 100d900:	d809883a 	mov	r4,sp
 100d904:	980b883a 	mov	r5,r19
 100d908:	dc400904 	addi	r17,sp,36
 100d90c:	dfc01515 	stw	ra,84(sp)
 100d910:	da400115 	stw	r9,4(sp)
 100d914:	d9c00315 	stw	r7,12(sp)
 100d918:	da000015 	stw	r8,0(sp)
 100d91c:	d9800215 	stw	r6,8(sp)
 100d920:	100ecfc0 	call	100ecfc <__unpack_d>
 100d924:	d9000204 	addi	r4,sp,8
 100d928:	880b883a 	mov	r5,r17
 100d92c:	100ecfc0 	call	100ecfc <__unpack_d>
 100d930:	d9800e04 	addi	r6,sp,56
 100d934:	9809883a 	mov	r4,r19
 100d938:	880b883a 	mov	r5,r17
 100d93c:	100d4580 	call	100d458 <_fpadd_parts>
 100d940:	1009883a 	mov	r4,r2
 100d944:	100e9e80 	call	100e9e8 <__pack_d>
 100d948:	dfc01517 	ldw	ra,84(sp)
 100d94c:	dcc01417 	ldw	r19,80(sp)
 100d950:	dc401317 	ldw	r17,76(sp)
 100d954:	dec01604 	addi	sp,sp,88
 100d958:	f800283a 	ret

0100d95c <__muldf3>:
 100d95c:	deffe004 	addi	sp,sp,-128
 100d960:	dc401815 	stw	r17,96(sp)
 100d964:	dc400404 	addi	r17,sp,16
 100d968:	2011883a 	mov	r8,r4
 100d96c:	2813883a 	mov	r9,r5
 100d970:	dc001715 	stw	r16,92(sp)
 100d974:	d809883a 	mov	r4,sp
 100d978:	880b883a 	mov	r5,r17
 100d97c:	dc000904 	addi	r16,sp,36
 100d980:	dfc01f15 	stw	ra,124(sp)
 100d984:	da400115 	stw	r9,4(sp)
 100d988:	d9c00315 	stw	r7,12(sp)
 100d98c:	da000015 	stw	r8,0(sp)
 100d990:	d9800215 	stw	r6,8(sp)
 100d994:	ddc01e15 	stw	r23,120(sp)
 100d998:	dd801d15 	stw	r22,116(sp)
 100d99c:	dd401c15 	stw	r21,112(sp)
 100d9a0:	dd001b15 	stw	r20,108(sp)
 100d9a4:	dcc01a15 	stw	r19,104(sp)
 100d9a8:	dc801915 	stw	r18,100(sp)
 100d9ac:	100ecfc0 	call	100ecfc <__unpack_d>
 100d9b0:	d9000204 	addi	r4,sp,8
 100d9b4:	800b883a 	mov	r5,r16
 100d9b8:	100ecfc0 	call	100ecfc <__unpack_d>
 100d9bc:	d9000417 	ldw	r4,16(sp)
 100d9c0:	00800044 	movi	r2,1
 100d9c4:	1100102e 	bgeu	r2,r4,100da08 <__muldf3+0xac>
 100d9c8:	d8c00917 	ldw	r3,36(sp)
 100d9cc:	10c0062e 	bgeu	r2,r3,100d9e8 <__muldf3+0x8c>
 100d9d0:	00800104 	movi	r2,4
 100d9d4:	20800a26 	beq	r4,r2,100da00 <__muldf3+0xa4>
 100d9d8:	1880cc26 	beq	r3,r2,100dd0c <__muldf3+0x3b0>
 100d9dc:	00800084 	movi	r2,2
 100d9e0:	20800926 	beq	r4,r2,100da08 <__muldf3+0xac>
 100d9e4:	1880191e 	bne	r3,r2,100da4c <__muldf3+0xf0>
 100d9e8:	d8c00a17 	ldw	r3,40(sp)
 100d9ec:	d8800517 	ldw	r2,20(sp)
 100d9f0:	8009883a 	mov	r4,r16
 100d9f4:	10c4c03a 	cmpne	r2,r2,r3
 100d9f8:	d8800a15 	stw	r2,40(sp)
 100d9fc:	00000706 	br	100da1c <__muldf3+0xc0>
 100da00:	00800084 	movi	r2,2
 100da04:	1880c326 	beq	r3,r2,100dd14 <__muldf3+0x3b8>
 100da08:	d8800517 	ldw	r2,20(sp)
 100da0c:	d8c00a17 	ldw	r3,40(sp)
 100da10:	8809883a 	mov	r4,r17
 100da14:	10c4c03a 	cmpne	r2,r2,r3
 100da18:	d8800515 	stw	r2,20(sp)
 100da1c:	100e9e80 	call	100e9e8 <__pack_d>
 100da20:	dfc01f17 	ldw	ra,124(sp)
 100da24:	ddc01e17 	ldw	r23,120(sp)
 100da28:	dd801d17 	ldw	r22,116(sp)
 100da2c:	dd401c17 	ldw	r21,112(sp)
 100da30:	dd001b17 	ldw	r20,108(sp)
 100da34:	dcc01a17 	ldw	r19,104(sp)
 100da38:	dc801917 	ldw	r18,100(sp)
 100da3c:	dc401817 	ldw	r17,96(sp)
 100da40:	dc001717 	ldw	r16,92(sp)
 100da44:	dec02004 	addi	sp,sp,128
 100da48:	f800283a 	ret
 100da4c:	dd800717 	ldw	r22,28(sp)
 100da50:	dc800c17 	ldw	r18,48(sp)
 100da54:	002b883a 	mov	r21,zero
 100da58:	0023883a 	mov	r17,zero
 100da5c:	a80b883a 	mov	r5,r21
 100da60:	b00d883a 	mov	r6,r22
 100da64:	880f883a 	mov	r7,r17
 100da68:	ddc00817 	ldw	r23,32(sp)
 100da6c:	dcc00d17 	ldw	r19,52(sp)
 100da70:	9009883a 	mov	r4,r18
 100da74:	100c6280 	call	100c628 <__muldi3>
 100da78:	001b883a 	mov	r13,zero
 100da7c:	680f883a 	mov	r7,r13
 100da80:	b009883a 	mov	r4,r22
 100da84:	000b883a 	mov	r5,zero
 100da88:	980d883a 	mov	r6,r19
 100da8c:	b82d883a 	mov	r22,r23
 100da90:	002f883a 	mov	r23,zero
 100da94:	db401615 	stw	r13,88(sp)
 100da98:	d8801315 	stw	r2,76(sp)
 100da9c:	d8c01415 	stw	r3,80(sp)
 100daa0:	dcc01515 	stw	r19,84(sp)
 100daa4:	100c6280 	call	100c628 <__muldi3>
 100daa8:	b00d883a 	mov	r6,r22
 100daac:	000b883a 	mov	r5,zero
 100dab0:	9009883a 	mov	r4,r18
 100dab4:	b80f883a 	mov	r7,r23
 100dab8:	1021883a 	mov	r16,r2
 100dabc:	1823883a 	mov	r17,r3
 100dac0:	100c6280 	call	100c628 <__muldi3>
 100dac4:	8085883a 	add	r2,r16,r2
 100dac8:	140d803a 	cmpltu	r6,r2,r16
 100dacc:	88c7883a 	add	r3,r17,r3
 100dad0:	30cd883a 	add	r6,r6,r3
 100dad4:	1029883a 	mov	r20,r2
 100dad8:	302b883a 	mov	r21,r6
 100dadc:	da801317 	ldw	r10,76(sp)
 100dae0:	dac01417 	ldw	r11,80(sp)
 100dae4:	db001517 	ldw	r12,84(sp)
 100dae8:	db401617 	ldw	r13,88(sp)
 100daec:	3440612e 	bgeu	r6,r17,100dc74 <__muldf3+0x318>
 100daf0:	0009883a 	mov	r4,zero
 100daf4:	5105883a 	add	r2,r10,r4
 100daf8:	128d803a 	cmpltu	r6,r2,r10
 100dafc:	5d07883a 	add	r3,r11,r20
 100db00:	30cd883a 	add	r6,r6,r3
 100db04:	0021883a 	mov	r16,zero
 100db08:	04400044 	movi	r17,1
 100db0c:	1025883a 	mov	r18,r2
 100db10:	3027883a 	mov	r19,r6
 100db14:	32c06236 	bltu	r6,r11,100dca0 <__muldf3+0x344>
 100db18:	59807a26 	beq	r11,r6,100dd04 <__muldf3+0x3a8>
 100db1c:	680b883a 	mov	r5,r13
 100db20:	b80f883a 	mov	r7,r23
 100db24:	6009883a 	mov	r4,r12
 100db28:	b00d883a 	mov	r6,r22
 100db2c:	100c6280 	call	100c628 <__muldi3>
 100db30:	1009883a 	mov	r4,r2
 100db34:	000f883a 	mov	r7,zero
 100db38:	1545883a 	add	r2,r2,r21
 100db3c:	1111803a 	cmpltu	r8,r2,r4
 100db40:	19c7883a 	add	r3,r3,r7
 100db44:	40c7883a 	add	r3,r8,r3
 100db48:	88cb883a 	add	r5,r17,r3
 100db4c:	d8c00617 	ldw	r3,24(sp)
 100db50:	8089883a 	add	r4,r16,r2
 100db54:	d8800b17 	ldw	r2,44(sp)
 100db58:	18c00104 	addi	r3,r3,4
 100db5c:	240d803a 	cmpltu	r6,r4,r16
 100db60:	10c7883a 	add	r3,r2,r3
 100db64:	2013883a 	mov	r9,r4
 100db68:	d8800a17 	ldw	r2,40(sp)
 100db6c:	d9000517 	ldw	r4,20(sp)
 100db70:	314d883a 	add	r6,r6,r5
 100db74:	3015883a 	mov	r10,r6
 100db78:	2088c03a 	cmpne	r4,r4,r2
 100db7c:	00880034 	movhi	r2,8192
 100db80:	10bfffc4 	addi	r2,r2,-1
 100db84:	d9000f15 	stw	r4,60(sp)
 100db88:	d8c01015 	stw	r3,64(sp)
 100db8c:	1180162e 	bgeu	r2,r6,100dbe8 <__muldf3+0x28c>
 100db90:	1811883a 	mov	r8,r3
 100db94:	101f883a 	mov	r15,r2
 100db98:	980497fa 	slli	r2,r19,31
 100db9c:	9016d07a 	srli	r11,r18,1
 100dba0:	500697fa 	slli	r3,r10,31
 100dba4:	480cd07a 	srli	r6,r9,1
 100dba8:	500ed07a 	srli	r7,r10,1
 100dbac:	12d6b03a 	or	r11,r2,r11
 100dbb0:	00800044 	movi	r2,1
 100dbb4:	198cb03a 	or	r6,r3,r6
 100dbb8:	4888703a 	and	r4,r9,r2
 100dbbc:	9818d07a 	srli	r12,r19,1
 100dbc0:	001b883a 	mov	r13,zero
 100dbc4:	03a00034 	movhi	r14,32768
 100dbc8:	3013883a 	mov	r9,r6
 100dbcc:	3815883a 	mov	r10,r7
 100dbd0:	4091883a 	add	r8,r8,r2
 100dbd4:	20000226 	beq	r4,zero,100dbe0 <__muldf3+0x284>
 100dbd8:	5b64b03a 	or	r18,r11,r13
 100dbdc:	63a6b03a 	or	r19,r12,r14
 100dbe0:	7abfed36 	bltu	r15,r10,100db98 <__muldf3+0x23c>
 100dbe4:	da001015 	stw	r8,64(sp)
 100dbe8:	00840034 	movhi	r2,4096
 100dbec:	10bfffc4 	addi	r2,r2,-1
 100dbf0:	12801436 	bltu	r2,r10,100dc44 <__muldf3+0x2e8>
 100dbf4:	da001017 	ldw	r8,64(sp)
 100dbf8:	101f883a 	mov	r15,r2
 100dbfc:	4a45883a 	add	r2,r9,r9
 100dc00:	124d803a 	cmpltu	r6,r2,r9
 100dc04:	5287883a 	add	r3,r10,r10
 100dc08:	9497883a 	add	r11,r18,r18
 100dc0c:	5c8f803a 	cmpltu	r7,r11,r18
 100dc10:	9cd9883a 	add	r12,r19,r19
 100dc14:	01000044 	movi	r4,1
 100dc18:	30cd883a 	add	r6,r6,r3
 100dc1c:	3b0f883a 	add	r7,r7,r12
 100dc20:	423fffc4 	addi	r8,r8,-1
 100dc24:	1013883a 	mov	r9,r2
 100dc28:	3015883a 	mov	r10,r6
 100dc2c:	111ab03a 	or	r13,r2,r4
 100dc30:	98003016 	blt	r19,zero,100dcf4 <__muldf3+0x398>
 100dc34:	5825883a 	mov	r18,r11
 100dc38:	3827883a 	mov	r19,r7
 100dc3c:	7abfef2e 	bgeu	r15,r10,100dbfc <__muldf3+0x2a0>
 100dc40:	da001015 	stw	r8,64(sp)
 100dc44:	00803fc4 	movi	r2,255
 100dc48:	488e703a 	and	r7,r9,r2
 100dc4c:	00802004 	movi	r2,128
 100dc50:	0007883a 	mov	r3,zero
 100dc54:	0011883a 	mov	r8,zero
 100dc58:	38801826 	beq	r7,r2,100dcbc <__muldf3+0x360>
 100dc5c:	008000c4 	movi	r2,3
 100dc60:	d9000e04 	addi	r4,sp,56
 100dc64:	da801215 	stw	r10,72(sp)
 100dc68:	d8800e15 	stw	r2,56(sp)
 100dc6c:	da401115 	stw	r9,68(sp)
 100dc70:	003f6a06 	br	100da1c <__muldf3+0xc0>
 100dc74:	89802126 	beq	r17,r6,100dcfc <__muldf3+0x3a0>
 100dc78:	0009883a 	mov	r4,zero
 100dc7c:	5105883a 	add	r2,r10,r4
 100dc80:	128d803a 	cmpltu	r6,r2,r10
 100dc84:	5d07883a 	add	r3,r11,r20
 100dc88:	30cd883a 	add	r6,r6,r3
 100dc8c:	0021883a 	mov	r16,zero
 100dc90:	0023883a 	mov	r17,zero
 100dc94:	1025883a 	mov	r18,r2
 100dc98:	3027883a 	mov	r19,r6
 100dc9c:	32ff9e2e 	bgeu	r6,r11,100db18 <__muldf3+0x1bc>
 100dca0:	00800044 	movi	r2,1
 100dca4:	8089883a 	add	r4,r16,r2
 100dca8:	240d803a 	cmpltu	r6,r4,r16
 100dcac:	344d883a 	add	r6,r6,r17
 100dcb0:	2021883a 	mov	r16,r4
 100dcb4:	3023883a 	mov	r17,r6
 100dcb8:	003f9806 	br	100db1c <__muldf3+0x1c0>
 100dcbc:	403fe71e 	bne	r8,zero,100dc5c <__muldf3+0x300>
 100dcc0:	01004004 	movi	r4,256
 100dcc4:	4904703a 	and	r2,r9,r4
 100dcc8:	10c4b03a 	or	r2,r2,r3
 100dccc:	103fe31e 	bne	r2,zero,100dc5c <__muldf3+0x300>
 100dcd0:	94c4b03a 	or	r2,r18,r19
 100dcd4:	103fe126 	beq	r2,zero,100dc5c <__muldf3+0x300>
 100dcd8:	49c5883a 	add	r2,r9,r7
 100dcdc:	1251803a 	cmpltu	r8,r2,r9
 100dce0:	4291883a 	add	r8,r8,r10
 100dce4:	013fc004 	movi	r4,-256
 100dce8:	1112703a 	and	r9,r2,r4
 100dcec:	4015883a 	mov	r10,r8
 100dcf0:	003fda06 	br	100dc5c <__muldf3+0x300>
 100dcf4:	6813883a 	mov	r9,r13
 100dcf8:	003fce06 	br	100dc34 <__muldf3+0x2d8>
 100dcfc:	143f7c36 	bltu	r2,r16,100daf0 <__muldf3+0x194>
 100dd00:	003fdd06 	br	100dc78 <__muldf3+0x31c>
 100dd04:	12bf852e 	bgeu	r2,r10,100db1c <__muldf3+0x1c0>
 100dd08:	003fe506 	br	100dca0 <__muldf3+0x344>
 100dd0c:	00800084 	movi	r2,2
 100dd10:	20bf351e 	bne	r4,r2,100d9e8 <__muldf3+0x8c>
 100dd14:	010040b4 	movhi	r4,258
 100dd18:	2121ae04 	addi	r4,r4,-31048
 100dd1c:	003f3f06 	br	100da1c <__muldf3+0xc0>

0100dd20 <__divdf3>:
 100dd20:	deffed04 	addi	sp,sp,-76
 100dd24:	dcc01115 	stw	r19,68(sp)
 100dd28:	dcc00404 	addi	r19,sp,16
 100dd2c:	2011883a 	mov	r8,r4
 100dd30:	2813883a 	mov	r9,r5
 100dd34:	dc000e15 	stw	r16,56(sp)
 100dd38:	d809883a 	mov	r4,sp
 100dd3c:	980b883a 	mov	r5,r19
 100dd40:	dc000904 	addi	r16,sp,36
 100dd44:	dfc01215 	stw	ra,72(sp)
 100dd48:	da400115 	stw	r9,4(sp)
 100dd4c:	d9c00315 	stw	r7,12(sp)
 100dd50:	da000015 	stw	r8,0(sp)
 100dd54:	d9800215 	stw	r6,8(sp)
 100dd58:	dc801015 	stw	r18,64(sp)
 100dd5c:	dc400f15 	stw	r17,60(sp)
 100dd60:	100ecfc0 	call	100ecfc <__unpack_d>
 100dd64:	d9000204 	addi	r4,sp,8
 100dd68:	800b883a 	mov	r5,r16
 100dd6c:	100ecfc0 	call	100ecfc <__unpack_d>
 100dd70:	d9000417 	ldw	r4,16(sp)
 100dd74:	00800044 	movi	r2,1
 100dd78:	11000b2e 	bgeu	r2,r4,100dda8 <__divdf3+0x88>
 100dd7c:	d9400917 	ldw	r5,36(sp)
 100dd80:	1140762e 	bgeu	r2,r5,100df5c <__divdf3+0x23c>
 100dd84:	d8800517 	ldw	r2,20(sp)
 100dd88:	d8c00a17 	ldw	r3,40(sp)
 100dd8c:	01800104 	movi	r6,4
 100dd90:	10c4f03a 	xor	r2,r2,r3
 100dd94:	d8800515 	stw	r2,20(sp)
 100dd98:	21800226 	beq	r4,r6,100dda4 <__divdf3+0x84>
 100dd9c:	00800084 	movi	r2,2
 100dda0:	2080141e 	bne	r4,r2,100ddf4 <__divdf3+0xd4>
 100dda4:	29000926 	beq	r5,r4,100ddcc <__divdf3+0xac>
 100dda8:	9809883a 	mov	r4,r19
 100ddac:	100e9e80 	call	100e9e8 <__pack_d>
 100ddb0:	dfc01217 	ldw	ra,72(sp)
 100ddb4:	dcc01117 	ldw	r19,68(sp)
 100ddb8:	dc801017 	ldw	r18,64(sp)
 100ddbc:	dc400f17 	ldw	r17,60(sp)
 100ddc0:	dc000e17 	ldw	r16,56(sp)
 100ddc4:	dec01304 	addi	sp,sp,76
 100ddc8:	f800283a 	ret
 100ddcc:	010040b4 	movhi	r4,258
 100ddd0:	2121ae04 	addi	r4,r4,-31048
 100ddd4:	100e9e80 	call	100e9e8 <__pack_d>
 100ddd8:	dfc01217 	ldw	ra,72(sp)
 100dddc:	dcc01117 	ldw	r19,68(sp)
 100dde0:	dc801017 	ldw	r18,64(sp)
 100dde4:	dc400f17 	ldw	r17,60(sp)
 100dde8:	dc000e17 	ldw	r16,56(sp)
 100ddec:	dec01304 	addi	sp,sp,76
 100ddf0:	f800283a 	ret
 100ddf4:	29805b26 	beq	r5,r6,100df64 <__divdf3+0x244>
 100ddf8:	28802d26 	beq	r5,r2,100deb0 <__divdf3+0x190>
 100ddfc:	d8c00617 	ldw	r3,24(sp)
 100de00:	d8800b17 	ldw	r2,44(sp)
 100de04:	d9c00817 	ldw	r7,32(sp)
 100de08:	dc400d17 	ldw	r17,52(sp)
 100de0c:	188bc83a 	sub	r5,r3,r2
 100de10:	d9800717 	ldw	r6,28(sp)
 100de14:	dc000c17 	ldw	r16,48(sp)
 100de18:	d9400615 	stw	r5,24(sp)
 100de1c:	3c403836 	bltu	r7,r17,100df00 <__divdf3+0x1e0>
 100de20:	89c03626 	beq	r17,r7,100defc <__divdf3+0x1dc>
 100de24:	0015883a 	mov	r10,zero
 100de28:	001d883a 	mov	r14,zero
 100de2c:	02c40034 	movhi	r11,4096
 100de30:	001f883a 	mov	r15,zero
 100de34:	003f883a 	mov	ra,zero
 100de38:	04800f44 	movi	r18,61
 100de3c:	00000f06 	br	100de7c <__divdf3+0x15c>
 100de40:	601d883a 	mov	r14,r12
 100de44:	681f883a 	mov	r15,r13
 100de48:	400d883a 	mov	r6,r8
 100de4c:	100f883a 	mov	r7,r2
 100de50:	3191883a 	add	r8,r6,r6
 100de54:	5808d07a 	srli	r4,r11,1
 100de58:	4185803a 	cmpltu	r2,r8,r6
 100de5c:	39d3883a 	add	r9,r7,r7
 100de60:	28c6b03a 	or	r3,r5,r3
 100de64:	1245883a 	add	r2,r2,r9
 100de68:	1815883a 	mov	r10,r3
 100de6c:	2017883a 	mov	r11,r4
 100de70:	400d883a 	mov	r6,r8
 100de74:	100f883a 	mov	r7,r2
 100de78:	fc801726 	beq	ra,r18,100ded8 <__divdf3+0x1b8>
 100de7c:	580a97fa 	slli	r5,r11,31
 100de80:	5006d07a 	srli	r3,r10,1
 100de84:	ffc00044 	addi	ra,ra,1
 100de88:	3c7ff136 	bltu	r7,r17,100de50 <__divdf3+0x130>
 100de8c:	3411c83a 	sub	r8,r6,r16
 100de90:	3205803a 	cmpltu	r2,r6,r8
 100de94:	3c53c83a 	sub	r9,r7,r17
 100de98:	7298b03a 	or	r12,r14,r10
 100de9c:	7adab03a 	or	r13,r15,r11
 100dea0:	4885c83a 	sub	r2,r9,r2
 100dea4:	89ffe61e 	bne	r17,r7,100de40 <__divdf3+0x120>
 100dea8:	343fe936 	bltu	r6,r16,100de50 <__divdf3+0x130>
 100deac:	003fe406 	br	100de40 <__divdf3+0x120>
 100deb0:	9809883a 	mov	r4,r19
 100deb4:	d9800415 	stw	r6,16(sp)
 100deb8:	100e9e80 	call	100e9e8 <__pack_d>
 100debc:	dfc01217 	ldw	ra,72(sp)
 100dec0:	dcc01117 	ldw	r19,68(sp)
 100dec4:	dc801017 	ldw	r18,64(sp)
 100dec8:	dc400f17 	ldw	r17,60(sp)
 100decc:	dc000e17 	ldw	r16,56(sp)
 100ded0:	dec01304 	addi	sp,sp,76
 100ded4:	f800283a 	ret
 100ded8:	00803fc4 	movi	r2,255
 100dedc:	7090703a 	and	r8,r14,r2
 100dee0:	00802004 	movi	r2,128
 100dee4:	0007883a 	mov	r3,zero
 100dee8:	0013883a 	mov	r9,zero
 100deec:	40800d26 	beq	r8,r2,100df24 <__divdf3+0x204>
 100def0:	dbc00815 	stw	r15,32(sp)
 100def4:	db800715 	stw	r14,28(sp)
 100def8:	003fab06 	br	100dda8 <__divdf3+0x88>
 100defc:	343fc92e 	bgeu	r6,r16,100de24 <__divdf3+0x104>
 100df00:	3185883a 	add	r2,r6,r6
 100df04:	1189803a 	cmpltu	r4,r2,r6
 100df08:	39c7883a 	add	r3,r7,r7
 100df0c:	20c9883a 	add	r4,r4,r3
 100df10:	297fffc4 	addi	r5,r5,-1
 100df14:	100d883a 	mov	r6,r2
 100df18:	200f883a 	mov	r7,r4
 100df1c:	d9400615 	stw	r5,24(sp)
 100df20:	003fc006 	br	100de24 <__divdf3+0x104>
 100df24:	483ff21e 	bne	r9,zero,100def0 <__divdf3+0x1d0>
 100df28:	01004004 	movi	r4,256
 100df2c:	7104703a 	and	r2,r14,r4
 100df30:	10c4b03a 	or	r2,r2,r3
 100df34:	103fee1e 	bne	r2,zero,100def0 <__divdf3+0x1d0>
 100df38:	31c4b03a 	or	r2,r6,r7
 100df3c:	103fec26 	beq	r2,zero,100def0 <__divdf3+0x1d0>
 100df40:	7205883a 	add	r2,r14,r8
 100df44:	1391803a 	cmpltu	r8,r2,r14
 100df48:	43d1883a 	add	r8,r8,r15
 100df4c:	013fc004 	movi	r4,-256
 100df50:	111c703a 	and	r14,r2,r4
 100df54:	401f883a 	mov	r15,r8
 100df58:	003fe506 	br	100def0 <__divdf3+0x1d0>
 100df5c:	8009883a 	mov	r4,r16
 100df60:	003f9206 	br	100ddac <__divdf3+0x8c>
 100df64:	9809883a 	mov	r4,r19
 100df68:	d8000715 	stw	zero,28(sp)
 100df6c:	d8000815 	stw	zero,32(sp)
 100df70:	d8000615 	stw	zero,24(sp)
 100df74:	003f8d06 	br	100ddac <__divdf3+0x8c>

0100df78 <__eqdf2>:
 100df78:	deffef04 	addi	sp,sp,-68
 100df7c:	dc400f15 	stw	r17,60(sp)
 100df80:	dc400404 	addi	r17,sp,16
 100df84:	2005883a 	mov	r2,r4
 100df88:	2807883a 	mov	r3,r5
 100df8c:	dc000e15 	stw	r16,56(sp)
 100df90:	d809883a 	mov	r4,sp
 100df94:	880b883a 	mov	r5,r17
 100df98:	dc000904 	addi	r16,sp,36
 100df9c:	d8c00115 	stw	r3,4(sp)
 100dfa0:	d8800015 	stw	r2,0(sp)
 100dfa4:	d9800215 	stw	r6,8(sp)
 100dfa8:	dfc01015 	stw	ra,64(sp)
 100dfac:	d9c00315 	stw	r7,12(sp)
 100dfb0:	100ecfc0 	call	100ecfc <__unpack_d>
 100dfb4:	d9000204 	addi	r4,sp,8
 100dfb8:	800b883a 	mov	r5,r16
 100dfbc:	100ecfc0 	call	100ecfc <__unpack_d>
 100dfc0:	d8800417 	ldw	r2,16(sp)
 100dfc4:	00c00044 	movi	r3,1
 100dfc8:	180d883a 	mov	r6,r3
 100dfcc:	1880062e 	bgeu	r3,r2,100dfe8 <__eqdf2+0x70>
 100dfd0:	d8800917 	ldw	r2,36(sp)
 100dfd4:	8809883a 	mov	r4,r17
 100dfd8:	800b883a 	mov	r5,r16
 100dfdc:	1880022e 	bgeu	r3,r2,100dfe8 <__eqdf2+0x70>
 100dfe0:	100ee340 	call	100ee34 <__fpcmp_parts_d>
 100dfe4:	100d883a 	mov	r6,r2
 100dfe8:	3005883a 	mov	r2,r6
 100dfec:	dfc01017 	ldw	ra,64(sp)
 100dff0:	dc400f17 	ldw	r17,60(sp)
 100dff4:	dc000e17 	ldw	r16,56(sp)
 100dff8:	dec01104 	addi	sp,sp,68
 100dffc:	f800283a 	ret

0100e000 <__nedf2>:
 100e000:	deffef04 	addi	sp,sp,-68
 100e004:	dc400f15 	stw	r17,60(sp)
 100e008:	dc400404 	addi	r17,sp,16
 100e00c:	2005883a 	mov	r2,r4
 100e010:	2807883a 	mov	r3,r5
 100e014:	dc000e15 	stw	r16,56(sp)
 100e018:	d809883a 	mov	r4,sp
 100e01c:	880b883a 	mov	r5,r17
 100e020:	dc000904 	addi	r16,sp,36
 100e024:	d8c00115 	stw	r3,4(sp)
 100e028:	d8800015 	stw	r2,0(sp)
 100e02c:	d9800215 	stw	r6,8(sp)
 100e030:	dfc01015 	stw	ra,64(sp)
 100e034:	d9c00315 	stw	r7,12(sp)
 100e038:	100ecfc0 	call	100ecfc <__unpack_d>
 100e03c:	d9000204 	addi	r4,sp,8
 100e040:	800b883a 	mov	r5,r16
 100e044:	100ecfc0 	call	100ecfc <__unpack_d>
 100e048:	d8800417 	ldw	r2,16(sp)
 100e04c:	00c00044 	movi	r3,1
 100e050:	180d883a 	mov	r6,r3
 100e054:	1880062e 	bgeu	r3,r2,100e070 <__nedf2+0x70>
 100e058:	d8800917 	ldw	r2,36(sp)
 100e05c:	8809883a 	mov	r4,r17
 100e060:	800b883a 	mov	r5,r16
 100e064:	1880022e 	bgeu	r3,r2,100e070 <__nedf2+0x70>
 100e068:	100ee340 	call	100ee34 <__fpcmp_parts_d>
 100e06c:	100d883a 	mov	r6,r2
 100e070:	3005883a 	mov	r2,r6
 100e074:	dfc01017 	ldw	ra,64(sp)
 100e078:	dc400f17 	ldw	r17,60(sp)
 100e07c:	dc000e17 	ldw	r16,56(sp)
 100e080:	dec01104 	addi	sp,sp,68
 100e084:	f800283a 	ret

0100e088 <__gtdf2>:
 100e088:	deffef04 	addi	sp,sp,-68
 100e08c:	dc400f15 	stw	r17,60(sp)
 100e090:	dc400404 	addi	r17,sp,16
 100e094:	2005883a 	mov	r2,r4
 100e098:	2807883a 	mov	r3,r5
 100e09c:	dc000e15 	stw	r16,56(sp)
 100e0a0:	d809883a 	mov	r4,sp
 100e0a4:	880b883a 	mov	r5,r17
 100e0a8:	dc000904 	addi	r16,sp,36
 100e0ac:	d8c00115 	stw	r3,4(sp)
 100e0b0:	d8800015 	stw	r2,0(sp)
 100e0b4:	d9800215 	stw	r6,8(sp)
 100e0b8:	dfc01015 	stw	ra,64(sp)
 100e0bc:	d9c00315 	stw	r7,12(sp)
 100e0c0:	100ecfc0 	call	100ecfc <__unpack_d>
 100e0c4:	d9000204 	addi	r4,sp,8
 100e0c8:	800b883a 	mov	r5,r16
 100e0cc:	100ecfc0 	call	100ecfc <__unpack_d>
 100e0d0:	d8800417 	ldw	r2,16(sp)
 100e0d4:	00c00044 	movi	r3,1
 100e0d8:	01bfffc4 	movi	r6,-1
 100e0dc:	1880062e 	bgeu	r3,r2,100e0f8 <__gtdf2+0x70>
 100e0e0:	d8800917 	ldw	r2,36(sp)
 100e0e4:	8809883a 	mov	r4,r17
 100e0e8:	800b883a 	mov	r5,r16
 100e0ec:	1880022e 	bgeu	r3,r2,100e0f8 <__gtdf2+0x70>
 100e0f0:	100ee340 	call	100ee34 <__fpcmp_parts_d>
 100e0f4:	100d883a 	mov	r6,r2
 100e0f8:	3005883a 	mov	r2,r6
 100e0fc:	dfc01017 	ldw	ra,64(sp)
 100e100:	dc400f17 	ldw	r17,60(sp)
 100e104:	dc000e17 	ldw	r16,56(sp)
 100e108:	dec01104 	addi	sp,sp,68
 100e10c:	f800283a 	ret

0100e110 <__gedf2>:
 100e110:	deffef04 	addi	sp,sp,-68
 100e114:	dc400f15 	stw	r17,60(sp)
 100e118:	dc400404 	addi	r17,sp,16
 100e11c:	2005883a 	mov	r2,r4
 100e120:	2807883a 	mov	r3,r5
 100e124:	dc000e15 	stw	r16,56(sp)
 100e128:	d809883a 	mov	r4,sp
 100e12c:	880b883a 	mov	r5,r17
 100e130:	dc000904 	addi	r16,sp,36
 100e134:	d8c00115 	stw	r3,4(sp)
 100e138:	d8800015 	stw	r2,0(sp)
 100e13c:	d9800215 	stw	r6,8(sp)
 100e140:	dfc01015 	stw	ra,64(sp)
 100e144:	d9c00315 	stw	r7,12(sp)
 100e148:	100ecfc0 	call	100ecfc <__unpack_d>
 100e14c:	d9000204 	addi	r4,sp,8
 100e150:	800b883a 	mov	r5,r16
 100e154:	100ecfc0 	call	100ecfc <__unpack_d>
 100e158:	d8800417 	ldw	r2,16(sp)
 100e15c:	00c00044 	movi	r3,1
 100e160:	01bfffc4 	movi	r6,-1
 100e164:	1880062e 	bgeu	r3,r2,100e180 <__gedf2+0x70>
 100e168:	d8800917 	ldw	r2,36(sp)
 100e16c:	8809883a 	mov	r4,r17
 100e170:	800b883a 	mov	r5,r16
 100e174:	1880022e 	bgeu	r3,r2,100e180 <__gedf2+0x70>
 100e178:	100ee340 	call	100ee34 <__fpcmp_parts_d>
 100e17c:	100d883a 	mov	r6,r2
 100e180:	3005883a 	mov	r2,r6
 100e184:	dfc01017 	ldw	ra,64(sp)
 100e188:	dc400f17 	ldw	r17,60(sp)
 100e18c:	dc000e17 	ldw	r16,56(sp)
 100e190:	dec01104 	addi	sp,sp,68
 100e194:	f800283a 	ret

0100e198 <__ltdf2>:
 100e198:	deffef04 	addi	sp,sp,-68
 100e19c:	dc400f15 	stw	r17,60(sp)
 100e1a0:	dc400404 	addi	r17,sp,16
 100e1a4:	2005883a 	mov	r2,r4
 100e1a8:	2807883a 	mov	r3,r5
 100e1ac:	dc000e15 	stw	r16,56(sp)
 100e1b0:	d809883a 	mov	r4,sp
 100e1b4:	880b883a 	mov	r5,r17
 100e1b8:	dc000904 	addi	r16,sp,36
 100e1bc:	d8c00115 	stw	r3,4(sp)
 100e1c0:	d8800015 	stw	r2,0(sp)
 100e1c4:	d9800215 	stw	r6,8(sp)
 100e1c8:	dfc01015 	stw	ra,64(sp)
 100e1cc:	d9c00315 	stw	r7,12(sp)
 100e1d0:	100ecfc0 	call	100ecfc <__unpack_d>
 100e1d4:	d9000204 	addi	r4,sp,8
 100e1d8:	800b883a 	mov	r5,r16
 100e1dc:	100ecfc0 	call	100ecfc <__unpack_d>
 100e1e0:	d8800417 	ldw	r2,16(sp)
 100e1e4:	00c00044 	movi	r3,1
 100e1e8:	180d883a 	mov	r6,r3
 100e1ec:	1880062e 	bgeu	r3,r2,100e208 <__ltdf2+0x70>
 100e1f0:	d8800917 	ldw	r2,36(sp)
 100e1f4:	8809883a 	mov	r4,r17
 100e1f8:	800b883a 	mov	r5,r16
 100e1fc:	1880022e 	bgeu	r3,r2,100e208 <__ltdf2+0x70>
 100e200:	100ee340 	call	100ee34 <__fpcmp_parts_d>
 100e204:	100d883a 	mov	r6,r2
 100e208:	3005883a 	mov	r2,r6
 100e20c:	dfc01017 	ldw	ra,64(sp)
 100e210:	dc400f17 	ldw	r17,60(sp)
 100e214:	dc000e17 	ldw	r16,56(sp)
 100e218:	dec01104 	addi	sp,sp,68
 100e21c:	f800283a 	ret

0100e220 <__ledf2>:
 100e220:	deffef04 	addi	sp,sp,-68
 100e224:	dc400f15 	stw	r17,60(sp)
 100e228:	dc400404 	addi	r17,sp,16
 100e22c:	2005883a 	mov	r2,r4
 100e230:	2807883a 	mov	r3,r5
 100e234:	dc000e15 	stw	r16,56(sp)
 100e238:	d809883a 	mov	r4,sp
 100e23c:	880b883a 	mov	r5,r17
 100e240:	dc000904 	addi	r16,sp,36
 100e244:	d8c00115 	stw	r3,4(sp)
 100e248:	d8800015 	stw	r2,0(sp)
 100e24c:	d9800215 	stw	r6,8(sp)
 100e250:	dfc01015 	stw	ra,64(sp)
 100e254:	d9c00315 	stw	r7,12(sp)
 100e258:	100ecfc0 	call	100ecfc <__unpack_d>
 100e25c:	d9000204 	addi	r4,sp,8
 100e260:	800b883a 	mov	r5,r16
 100e264:	100ecfc0 	call	100ecfc <__unpack_d>
 100e268:	d8800417 	ldw	r2,16(sp)
 100e26c:	00c00044 	movi	r3,1
 100e270:	180d883a 	mov	r6,r3
 100e274:	1880062e 	bgeu	r3,r2,100e290 <__ledf2+0x70>
 100e278:	d8800917 	ldw	r2,36(sp)
 100e27c:	8809883a 	mov	r4,r17
 100e280:	800b883a 	mov	r5,r16
 100e284:	1880022e 	bgeu	r3,r2,100e290 <__ledf2+0x70>
 100e288:	100ee340 	call	100ee34 <__fpcmp_parts_d>
 100e28c:	100d883a 	mov	r6,r2
 100e290:	3005883a 	mov	r2,r6
 100e294:	dfc01017 	ldw	ra,64(sp)
 100e298:	dc400f17 	ldw	r17,60(sp)
 100e29c:	dc000e17 	ldw	r16,56(sp)
 100e2a0:	dec01104 	addi	sp,sp,68
 100e2a4:	f800283a 	ret

0100e2a8 <__floatsidf>:
 100e2a8:	2006d7fa 	srli	r3,r4,31
 100e2ac:	defff604 	addi	sp,sp,-40
 100e2b0:	008000c4 	movi	r2,3
 100e2b4:	dfc00915 	stw	ra,36(sp)
 100e2b8:	dcc00815 	stw	r19,32(sp)
 100e2bc:	dc800715 	stw	r18,28(sp)
 100e2c0:	dc400615 	stw	r17,24(sp)
 100e2c4:	dc000515 	stw	r16,20(sp)
 100e2c8:	d8800015 	stw	r2,0(sp)
 100e2cc:	d8c00115 	stw	r3,4(sp)
 100e2d0:	20000f1e 	bne	r4,zero,100e310 <__floatsidf+0x68>
 100e2d4:	00800084 	movi	r2,2
 100e2d8:	d8800015 	stw	r2,0(sp)
 100e2dc:	d809883a 	mov	r4,sp
 100e2e0:	100e9e80 	call	100e9e8 <__pack_d>
 100e2e4:	1009883a 	mov	r4,r2
 100e2e8:	180b883a 	mov	r5,r3
 100e2ec:	2005883a 	mov	r2,r4
 100e2f0:	2807883a 	mov	r3,r5
 100e2f4:	dfc00917 	ldw	ra,36(sp)
 100e2f8:	dcc00817 	ldw	r19,32(sp)
 100e2fc:	dc800717 	ldw	r18,28(sp)
 100e300:	dc400617 	ldw	r17,24(sp)
 100e304:	dc000517 	ldw	r16,20(sp)
 100e308:	dec00a04 	addi	sp,sp,40
 100e30c:	f800283a 	ret
 100e310:	00800f04 	movi	r2,60
 100e314:	1807003a 	cmpeq	r3,r3,zero
 100e318:	d8800215 	stw	r2,8(sp)
 100e31c:	18001126 	beq	r3,zero,100e364 <__floatsidf+0xbc>
 100e320:	0027883a 	mov	r19,zero
 100e324:	2025883a 	mov	r18,r4
 100e328:	d9000315 	stw	r4,12(sp)
 100e32c:	dcc00415 	stw	r19,16(sp)
 100e330:	100e7cc0 	call	100e7cc <__clzsi2>
 100e334:	11000744 	addi	r4,r2,29
 100e338:	013fe80e 	bge	zero,r4,100e2dc <__floatsidf+0x34>
 100e33c:	10bfff44 	addi	r2,r2,-3
 100e340:	10000c16 	blt	r2,zero,100e374 <__floatsidf+0xcc>
 100e344:	90a2983a 	sll	r17,r18,r2
 100e348:	0021883a 	mov	r16,zero
 100e34c:	d8800217 	ldw	r2,8(sp)
 100e350:	dc400415 	stw	r17,16(sp)
 100e354:	dc000315 	stw	r16,12(sp)
 100e358:	1105c83a 	sub	r2,r2,r4
 100e35c:	d8800215 	stw	r2,8(sp)
 100e360:	003fde06 	br	100e2dc <__floatsidf+0x34>
 100e364:	00a00034 	movhi	r2,32768
 100e368:	20800a26 	beq	r4,r2,100e394 <__floatsidf+0xec>
 100e36c:	0109c83a 	sub	r4,zero,r4
 100e370:	003feb06 	br	100e320 <__floatsidf+0x78>
 100e374:	9006d07a 	srli	r3,r18,1
 100e378:	008007c4 	movi	r2,31
 100e37c:	1105c83a 	sub	r2,r2,r4
 100e380:	1886d83a 	srl	r3,r3,r2
 100e384:	9922983a 	sll	r17,r19,r4
 100e388:	9120983a 	sll	r16,r18,r4
 100e38c:	1c62b03a 	or	r17,r3,r17
 100e390:	003fee06 	br	100e34c <__floatsidf+0xa4>
 100e394:	0009883a 	mov	r4,zero
 100e398:	01707834 	movhi	r5,49632
 100e39c:	003fd306 	br	100e2ec <__floatsidf+0x44>

0100e3a0 <__fixdfsi>:
 100e3a0:	defff804 	addi	sp,sp,-32
 100e3a4:	2005883a 	mov	r2,r4
 100e3a8:	2807883a 	mov	r3,r5
 100e3ac:	d809883a 	mov	r4,sp
 100e3b0:	d9400204 	addi	r5,sp,8
 100e3b4:	d8c00115 	stw	r3,4(sp)
 100e3b8:	d8800015 	stw	r2,0(sp)
 100e3bc:	dfc00715 	stw	ra,28(sp)
 100e3c0:	100ecfc0 	call	100ecfc <__unpack_d>
 100e3c4:	d8c00217 	ldw	r3,8(sp)
 100e3c8:	00800084 	movi	r2,2
 100e3cc:	1880051e 	bne	r3,r2,100e3e4 <__fixdfsi+0x44>
 100e3d0:	0007883a 	mov	r3,zero
 100e3d4:	1805883a 	mov	r2,r3
 100e3d8:	dfc00717 	ldw	ra,28(sp)
 100e3dc:	dec00804 	addi	sp,sp,32
 100e3e0:	f800283a 	ret
 100e3e4:	00800044 	movi	r2,1
 100e3e8:	10fff92e 	bgeu	r2,r3,100e3d0 <__fixdfsi+0x30>
 100e3ec:	00800104 	movi	r2,4
 100e3f0:	18800426 	beq	r3,r2,100e404 <__fixdfsi+0x64>
 100e3f4:	d8c00417 	ldw	r3,16(sp)
 100e3f8:	183ff516 	blt	r3,zero,100e3d0 <__fixdfsi+0x30>
 100e3fc:	00800784 	movi	r2,30
 100e400:	10c0080e 	bge	r2,r3,100e424 <__fixdfsi+0x84>
 100e404:	d8800317 	ldw	r2,12(sp)
 100e408:	1000121e 	bne	r2,zero,100e454 <__fixdfsi+0xb4>
 100e40c:	00e00034 	movhi	r3,32768
 100e410:	18ffffc4 	addi	r3,r3,-1
 100e414:	1805883a 	mov	r2,r3
 100e418:	dfc00717 	ldw	ra,28(sp)
 100e41c:	dec00804 	addi	sp,sp,32
 100e420:	f800283a 	ret
 100e424:	00800f04 	movi	r2,60
 100e428:	10d1c83a 	sub	r8,r2,r3
 100e42c:	40bff804 	addi	r2,r8,-32
 100e430:	d9800517 	ldw	r6,20(sp)
 100e434:	d9c00617 	ldw	r7,24(sp)
 100e438:	10000816 	blt	r2,zero,100e45c <__fixdfsi+0xbc>
 100e43c:	3888d83a 	srl	r4,r7,r2
 100e440:	d8800317 	ldw	r2,12(sp)
 100e444:	2007883a 	mov	r3,r4
 100e448:	103fe226 	beq	r2,zero,100e3d4 <__fixdfsi+0x34>
 100e44c:	0107c83a 	sub	r3,zero,r4
 100e450:	003fe006 	br	100e3d4 <__fixdfsi+0x34>
 100e454:	00e00034 	movhi	r3,32768
 100e458:	003fde06 	br	100e3d4 <__fixdfsi+0x34>
 100e45c:	39c7883a 	add	r3,r7,r7
 100e460:	008007c4 	movi	r2,31
 100e464:	1205c83a 	sub	r2,r2,r8
 100e468:	1886983a 	sll	r3,r3,r2
 100e46c:	3208d83a 	srl	r4,r6,r8
 100e470:	1908b03a 	or	r4,r3,r4
 100e474:	003ff206 	br	100e440 <__fixdfsi+0xa0>

0100e478 <__truncdfsf2>:
 100e478:	defff804 	addi	sp,sp,-32
 100e47c:	2005883a 	mov	r2,r4
 100e480:	2807883a 	mov	r3,r5
 100e484:	d809883a 	mov	r4,sp
 100e488:	d9400204 	addi	r5,sp,8
 100e48c:	d8c00115 	stw	r3,4(sp)
 100e490:	d8800015 	stw	r2,0(sp)
 100e494:	dfc00715 	stw	ra,28(sp)
 100e498:	100ecfc0 	call	100ecfc <__unpack_d>
 100e49c:	d9c00517 	ldw	r7,20(sp)
 100e4a0:	da000617 	ldw	r8,24(sp)
 100e4a4:	02d00034 	movhi	r11,16384
 100e4a8:	5affffc4 	addi	r11,r11,-1
 100e4ac:	3812d7ba 	srli	r9,r7,30
 100e4b0:	401a90ba 	slli	r13,r8,2
 100e4b4:	3ac4703a 	and	r2,r7,r11
 100e4b8:	0007883a 	mov	r3,zero
 100e4bc:	6a52b03a 	or	r9,r13,r9
 100e4c0:	10c4b03a 	or	r2,r2,r3
 100e4c4:	d9000217 	ldw	r4,8(sp)
 100e4c8:	d9400317 	ldw	r5,12(sp)
 100e4cc:	d9800417 	ldw	r6,16(sp)
 100e4d0:	480f883a 	mov	r7,r9
 100e4d4:	10000126 	beq	r2,zero,100e4dc <__truncdfsf2+0x64>
 100e4d8:	49c00054 	ori	r7,r9,1
 100e4dc:	100e9bc0 	call	100e9bc <__make_fp>
 100e4e0:	dfc00717 	ldw	ra,28(sp)
 100e4e4:	dec00804 	addi	sp,sp,32
 100e4e8:	f800283a 	ret

0100e4ec <__floatunsidf>:
 100e4ec:	defff204 	addi	sp,sp,-56
 100e4f0:	dfc00d15 	stw	ra,52(sp)
 100e4f4:	ddc00c15 	stw	r23,48(sp)
 100e4f8:	dd800b15 	stw	r22,44(sp)
 100e4fc:	dd400a15 	stw	r21,40(sp)
 100e500:	dd000915 	stw	r20,36(sp)
 100e504:	dcc00815 	stw	r19,32(sp)
 100e508:	dc800715 	stw	r18,28(sp)
 100e50c:	dc400615 	stw	r17,24(sp)
 100e510:	dc000515 	stw	r16,20(sp)
 100e514:	d8000115 	stw	zero,4(sp)
 100e518:	20000f1e 	bne	r4,zero,100e558 <__floatunsidf+0x6c>
 100e51c:	00800084 	movi	r2,2
 100e520:	d8800015 	stw	r2,0(sp)
 100e524:	d809883a 	mov	r4,sp
 100e528:	100e9e80 	call	100e9e8 <__pack_d>
 100e52c:	dfc00d17 	ldw	ra,52(sp)
 100e530:	ddc00c17 	ldw	r23,48(sp)
 100e534:	dd800b17 	ldw	r22,44(sp)
 100e538:	dd400a17 	ldw	r21,40(sp)
 100e53c:	dd000917 	ldw	r20,36(sp)
 100e540:	dcc00817 	ldw	r19,32(sp)
 100e544:	dc800717 	ldw	r18,28(sp)
 100e548:	dc400617 	ldw	r17,24(sp)
 100e54c:	dc000517 	ldw	r16,20(sp)
 100e550:	dec00e04 	addi	sp,sp,56
 100e554:	f800283a 	ret
 100e558:	008000c4 	movi	r2,3
 100e55c:	00c00f04 	movi	r3,60
 100e560:	002f883a 	mov	r23,zero
 100e564:	202d883a 	mov	r22,r4
 100e568:	d8800015 	stw	r2,0(sp)
 100e56c:	d8c00215 	stw	r3,8(sp)
 100e570:	d9000315 	stw	r4,12(sp)
 100e574:	ddc00415 	stw	r23,16(sp)
 100e578:	100e7cc0 	call	100e7cc <__clzsi2>
 100e57c:	12400744 	addi	r9,r2,29
 100e580:	48000b16 	blt	r9,zero,100e5b0 <__floatunsidf+0xc4>
 100e584:	483fe726 	beq	r9,zero,100e524 <__floatunsidf+0x38>
 100e588:	10bfff44 	addi	r2,r2,-3
 100e58c:	10002e16 	blt	r2,zero,100e648 <__floatunsidf+0x15c>
 100e590:	b0a2983a 	sll	r17,r22,r2
 100e594:	0021883a 	mov	r16,zero
 100e598:	d8800217 	ldw	r2,8(sp)
 100e59c:	dc400415 	stw	r17,16(sp)
 100e5a0:	dc000315 	stw	r16,12(sp)
 100e5a4:	1245c83a 	sub	r2,r2,r9
 100e5a8:	d8800215 	stw	r2,8(sp)
 100e5ac:	003fdd06 	br	100e524 <__floatunsidf+0x38>
 100e5b0:	0255c83a 	sub	r10,zero,r9
 100e5b4:	51bff804 	addi	r6,r10,-32
 100e5b8:	30001b16 	blt	r6,zero,100e628 <__floatunsidf+0x13c>
 100e5bc:	b9a8d83a 	srl	r20,r23,r6
 100e5c0:	002b883a 	mov	r21,zero
 100e5c4:	000f883a 	mov	r7,zero
 100e5c8:	01000044 	movi	r4,1
 100e5cc:	0011883a 	mov	r8,zero
 100e5d0:	30002516 	blt	r6,zero,100e668 <__floatunsidf+0x17c>
 100e5d4:	21a6983a 	sll	r19,r4,r6
 100e5d8:	0025883a 	mov	r18,zero
 100e5dc:	00bfffc4 	movi	r2,-1
 100e5e0:	9089883a 	add	r4,r18,r2
 100e5e4:	988b883a 	add	r5,r19,r2
 100e5e8:	248d803a 	cmpltu	r6,r4,r18
 100e5ec:	314b883a 	add	r5,r6,r5
 100e5f0:	b104703a 	and	r2,r22,r4
 100e5f4:	b946703a 	and	r3,r23,r5
 100e5f8:	10c4b03a 	or	r2,r2,r3
 100e5fc:	10000226 	beq	r2,zero,100e608 <__floatunsidf+0x11c>
 100e600:	01c00044 	movi	r7,1
 100e604:	0011883a 	mov	r8,zero
 100e608:	d9000217 	ldw	r4,8(sp)
 100e60c:	a1c4b03a 	or	r2,r20,r7
 100e610:	aa06b03a 	or	r3,r21,r8
 100e614:	2249c83a 	sub	r4,r4,r9
 100e618:	d8c00415 	stw	r3,16(sp)
 100e61c:	d9000215 	stw	r4,8(sp)
 100e620:	d8800315 	stw	r2,12(sp)
 100e624:	003fbf06 	br	100e524 <__floatunsidf+0x38>
 100e628:	bdc7883a 	add	r3,r23,r23
 100e62c:	008007c4 	movi	r2,31
 100e630:	1285c83a 	sub	r2,r2,r10
 100e634:	1886983a 	sll	r3,r3,r2
 100e638:	b2a8d83a 	srl	r20,r22,r10
 100e63c:	baaad83a 	srl	r21,r23,r10
 100e640:	1d28b03a 	or	r20,r3,r20
 100e644:	003fdf06 	br	100e5c4 <__floatunsidf+0xd8>
 100e648:	b006d07a 	srli	r3,r22,1
 100e64c:	008007c4 	movi	r2,31
 100e650:	1245c83a 	sub	r2,r2,r9
 100e654:	1886d83a 	srl	r3,r3,r2
 100e658:	ba62983a 	sll	r17,r23,r9
 100e65c:	b260983a 	sll	r16,r22,r9
 100e660:	1c62b03a 	or	r17,r3,r17
 100e664:	003fcc06 	br	100e598 <__floatunsidf+0xac>
 100e668:	2006d07a 	srli	r3,r4,1
 100e66c:	008007c4 	movi	r2,31
 100e670:	1285c83a 	sub	r2,r2,r10
 100e674:	18a6d83a 	srl	r19,r3,r2
 100e678:	22a4983a 	sll	r18,r4,r10
 100e67c:	003fd706 	br	100e5dc <__floatunsidf+0xf0>

0100e680 <udivmodsi4>:
 100e680:	29001b2e 	bgeu	r5,r4,100e6f0 <udivmodsi4+0x70>
 100e684:	28001a16 	blt	r5,zero,100e6f0 <udivmodsi4+0x70>
 100e688:	00800044 	movi	r2,1
 100e68c:	0007883a 	mov	r3,zero
 100e690:	01c007c4 	movi	r7,31
 100e694:	00000306 	br	100e6a4 <udivmodsi4+0x24>
 100e698:	19c01326 	beq	r3,r7,100e6e8 <udivmodsi4+0x68>
 100e69c:	18c00044 	addi	r3,r3,1
 100e6a0:	28000416 	blt	r5,zero,100e6b4 <udivmodsi4+0x34>
 100e6a4:	294b883a 	add	r5,r5,r5
 100e6a8:	1085883a 	add	r2,r2,r2
 100e6ac:	293ffa36 	bltu	r5,r4,100e698 <udivmodsi4+0x18>
 100e6b0:	10000d26 	beq	r2,zero,100e6e8 <udivmodsi4+0x68>
 100e6b4:	0007883a 	mov	r3,zero
 100e6b8:	21400236 	bltu	r4,r5,100e6c4 <udivmodsi4+0x44>
 100e6bc:	2149c83a 	sub	r4,r4,r5
 100e6c0:	1886b03a 	or	r3,r3,r2
 100e6c4:	1004d07a 	srli	r2,r2,1
 100e6c8:	280ad07a 	srli	r5,r5,1
 100e6cc:	103ffa1e 	bne	r2,zero,100e6b8 <udivmodsi4+0x38>
 100e6d0:	30000226 	beq	r6,zero,100e6dc <udivmodsi4+0x5c>
 100e6d4:	2005883a 	mov	r2,r4
 100e6d8:	f800283a 	ret
 100e6dc:	1809883a 	mov	r4,r3
 100e6e0:	2005883a 	mov	r2,r4
 100e6e4:	f800283a 	ret
 100e6e8:	0007883a 	mov	r3,zero
 100e6ec:	003ff806 	br	100e6d0 <udivmodsi4+0x50>
 100e6f0:	00800044 	movi	r2,1
 100e6f4:	0007883a 	mov	r3,zero
 100e6f8:	003fef06 	br	100e6b8 <udivmodsi4+0x38>

0100e6fc <__divsi3>:
 100e6fc:	defffe04 	addi	sp,sp,-8
 100e700:	dc000015 	stw	r16,0(sp)
 100e704:	dfc00115 	stw	ra,4(sp)
 100e708:	0021883a 	mov	r16,zero
 100e70c:	20000c16 	blt	r4,zero,100e740 <__divsi3+0x44>
 100e710:	000d883a 	mov	r6,zero
 100e714:	28000e16 	blt	r5,zero,100e750 <__divsi3+0x54>
 100e718:	100e6800 	call	100e680 <udivmodsi4>
 100e71c:	1007883a 	mov	r3,r2
 100e720:	8005003a 	cmpeq	r2,r16,zero
 100e724:	1000011e 	bne	r2,zero,100e72c <__divsi3+0x30>
 100e728:	00c7c83a 	sub	r3,zero,r3
 100e72c:	1805883a 	mov	r2,r3
 100e730:	dfc00117 	ldw	ra,4(sp)
 100e734:	dc000017 	ldw	r16,0(sp)
 100e738:	dec00204 	addi	sp,sp,8
 100e73c:	f800283a 	ret
 100e740:	0109c83a 	sub	r4,zero,r4
 100e744:	04000044 	movi	r16,1
 100e748:	000d883a 	mov	r6,zero
 100e74c:	283ff20e 	bge	r5,zero,100e718 <__divsi3+0x1c>
 100e750:	014bc83a 	sub	r5,zero,r5
 100e754:	8021003a 	cmpeq	r16,r16,zero
 100e758:	003fef06 	br	100e718 <__divsi3+0x1c>

0100e75c <__modsi3>:
 100e75c:	deffff04 	addi	sp,sp,-4
 100e760:	dfc00015 	stw	ra,0(sp)
 100e764:	01800044 	movi	r6,1
 100e768:	2807883a 	mov	r3,r5
 100e76c:	20000416 	blt	r4,zero,100e780 <__modsi3+0x24>
 100e770:	28000c16 	blt	r5,zero,100e7a4 <__modsi3+0x48>
 100e774:	dfc00017 	ldw	ra,0(sp)
 100e778:	dec00104 	addi	sp,sp,4
 100e77c:	100e6801 	jmpi	100e680 <udivmodsi4>
 100e780:	0109c83a 	sub	r4,zero,r4
 100e784:	28000b16 	blt	r5,zero,100e7b4 <__modsi3+0x58>
 100e788:	180b883a 	mov	r5,r3
 100e78c:	01800044 	movi	r6,1
 100e790:	100e6800 	call	100e680 <udivmodsi4>
 100e794:	0085c83a 	sub	r2,zero,r2
 100e798:	dfc00017 	ldw	ra,0(sp)
 100e79c:	dec00104 	addi	sp,sp,4
 100e7a0:	f800283a 	ret
 100e7a4:	014bc83a 	sub	r5,zero,r5
 100e7a8:	dfc00017 	ldw	ra,0(sp)
 100e7ac:	dec00104 	addi	sp,sp,4
 100e7b0:	100e6801 	jmpi	100e680 <udivmodsi4>
 100e7b4:	0147c83a 	sub	r3,zero,r5
 100e7b8:	003ff306 	br	100e788 <__modsi3+0x2c>

0100e7bc <__udivsi3>:
 100e7bc:	000d883a 	mov	r6,zero
 100e7c0:	100e6801 	jmpi	100e680 <udivmodsi4>

0100e7c4 <__umodsi3>:
 100e7c4:	01800044 	movi	r6,1
 100e7c8:	100e6801 	jmpi	100e680 <udivmodsi4>

0100e7cc <__clzsi2>:
 100e7cc:	00bfffd4 	movui	r2,65535
 100e7d0:	11000e36 	bltu	r2,r4,100e80c <__clzsi2+0x40>
 100e7d4:	00803fc4 	movi	r2,255
 100e7d8:	01400204 	movi	r5,8
 100e7dc:	0007883a 	mov	r3,zero
 100e7e0:	11001036 	bltu	r2,r4,100e824 <__clzsi2+0x58>
 100e7e4:	000b883a 	mov	r5,zero
 100e7e8:	20c6d83a 	srl	r3,r4,r3
 100e7ec:	008040b4 	movhi	r2,258
 100e7f0:	10a1b304 	addi	r2,r2,-31028
 100e7f4:	1887883a 	add	r3,r3,r2
 100e7f8:	18800003 	ldbu	r2,0(r3)
 100e7fc:	00c00804 	movi	r3,32
 100e800:	2885883a 	add	r2,r5,r2
 100e804:	1885c83a 	sub	r2,r3,r2
 100e808:	f800283a 	ret
 100e80c:	01400404 	movi	r5,16
 100e810:	00804034 	movhi	r2,256
 100e814:	10bfffc4 	addi	r2,r2,-1
 100e818:	2807883a 	mov	r3,r5
 100e81c:	113ff22e 	bgeu	r2,r4,100e7e8 <__clzsi2+0x1c>
 100e820:	01400604 	movi	r5,24
 100e824:	2807883a 	mov	r3,r5
 100e828:	20c6d83a 	srl	r3,r4,r3
 100e82c:	008040b4 	movhi	r2,258
 100e830:	10a1b304 	addi	r2,r2,-31028
 100e834:	1887883a 	add	r3,r3,r2
 100e838:	18800003 	ldbu	r2,0(r3)
 100e83c:	00c00804 	movi	r3,32
 100e840:	2885883a 	add	r2,r5,r2
 100e844:	1885c83a 	sub	r2,r3,r2
 100e848:	f800283a 	ret

0100e84c <__unpack_f>:
 100e84c:	21800017 	ldw	r6,0(r4)
 100e850:	00c02034 	movhi	r3,128
 100e854:	18ffffc4 	addi	r3,r3,-1
 100e858:	3004d5fa 	srli	r2,r6,23
 100e85c:	3008d7fa 	srli	r4,r6,31
 100e860:	30ce703a 	and	r7,r6,r3
 100e864:	10c03fcc 	andi	r3,r2,255
 100e868:	29000115 	stw	r4,4(r5)
 100e86c:	1800131e 	bne	r3,zero,100e8bc <__unpack_f+0x70>
 100e870:	38000f26 	beq	r7,zero,100e8b0 <__unpack_f+0x64>
 100e874:	380691fa 	slli	r3,r7,7
 100e878:	01bfe084 	movi	r6,-126
 100e87c:	008000c4 	movi	r2,3
 100e880:	01100034 	movhi	r4,16384
 100e884:	213fffc4 	addi	r4,r4,-1
 100e888:	28800015 	stw	r2,0(r5)
 100e88c:	29800215 	stw	r6,8(r5)
 100e890:	20c00536 	bltu	r4,r3,100e8a8 <__unpack_f+0x5c>
 100e894:	3005883a 	mov	r2,r6
 100e898:	18c7883a 	add	r3,r3,r3
 100e89c:	10bfffc4 	addi	r2,r2,-1
 100e8a0:	20fffd2e 	bgeu	r4,r3,100e898 <__unpack_f+0x4c>
 100e8a4:	28800215 	stw	r2,8(r5)
 100e8a8:	28c00315 	stw	r3,12(r5)
 100e8ac:	f800283a 	ret
 100e8b0:	00800084 	movi	r2,2
 100e8b4:	28800015 	stw	r2,0(r5)
 100e8b8:	f800283a 	ret
 100e8bc:	00803fc4 	movi	r2,255
 100e8c0:	18800826 	beq	r3,r2,100e8e4 <__unpack_f+0x98>
 100e8c4:	380491fa 	slli	r2,r7,7
 100e8c8:	18ffe044 	addi	r3,r3,-127
 100e8cc:	28c00215 	stw	r3,8(r5)
 100e8d0:	10900034 	orhi	r2,r2,16384
 100e8d4:	28800315 	stw	r2,12(r5)
 100e8d8:	008000c4 	movi	r2,3
 100e8dc:	28800015 	stw	r2,0(r5)
 100e8e0:	f800283a 	ret
 100e8e4:	3800031e 	bne	r7,zero,100e8f4 <__unpack_f+0xa8>
 100e8e8:	00800104 	movi	r2,4
 100e8ec:	28800015 	stw	r2,0(r5)
 100e8f0:	f800283a 	ret
 100e8f4:	3080042c 	andhi	r2,r6,16
 100e8f8:	10000426 	beq	r2,zero,100e90c <__unpack_f+0xc0>
 100e8fc:	00800044 	movi	r2,1
 100e900:	28800015 	stw	r2,0(r5)
 100e904:	29c00315 	stw	r7,12(r5)
 100e908:	f800283a 	ret
 100e90c:	28000015 	stw	zero,0(r5)
 100e910:	003ffc06 	br	100e904 <__unpack_f+0xb8>

0100e914 <__fpcmp_parts_f>:
 100e914:	21800017 	ldw	r6,0(r4)
 100e918:	00c00044 	movi	r3,1
 100e91c:	19800a2e 	bgeu	r3,r6,100e948 <__fpcmp_parts_f+0x34>
 100e920:	28800017 	ldw	r2,0(r5)
 100e924:	1880082e 	bgeu	r3,r2,100e948 <__fpcmp_parts_f+0x34>
 100e928:	00c00104 	movi	r3,4
 100e92c:	30c01e26 	beq	r6,r3,100e9a8 <__fpcmp_parts_f+0x94>
 100e930:	10c01a26 	beq	r2,r3,100e99c <__fpcmp_parts_f+0x88>
 100e934:	00c00084 	movi	r3,2
 100e938:	30c00526 	beq	r6,r3,100e950 <__fpcmp_parts_f+0x3c>
 100e93c:	10c0071e 	bne	r2,r3,100e95c <__fpcmp_parts_f+0x48>
 100e940:	20800117 	ldw	r2,4(r4)
 100e944:	1000091e 	bne	r2,zero,100e96c <__fpcmp_parts_f+0x58>
 100e948:	00800044 	movi	r2,1
 100e94c:	f800283a 	ret
 100e950:	10c0121e 	bne	r2,r3,100e99c <__fpcmp_parts_f+0x88>
 100e954:	0005883a 	mov	r2,zero
 100e958:	f800283a 	ret
 100e95c:	20c00117 	ldw	r3,4(r4)
 100e960:	28800117 	ldw	r2,4(r5)
 100e964:	18800326 	beq	r3,r2,100e974 <__fpcmp_parts_f+0x60>
 100e968:	183ff726 	beq	r3,zero,100e948 <__fpcmp_parts_f+0x34>
 100e96c:	00bfffc4 	movi	r2,-1
 100e970:	f800283a 	ret
 100e974:	21800217 	ldw	r6,8(r4)
 100e978:	28800217 	ldw	r2,8(r5)
 100e97c:	11bffa16 	blt	r2,r6,100e968 <__fpcmp_parts_f+0x54>
 100e980:	30800416 	blt	r6,r2,100e994 <__fpcmp_parts_f+0x80>
 100e984:	21000317 	ldw	r4,12(r4)
 100e988:	29400317 	ldw	r5,12(r5)
 100e98c:	293ff636 	bltu	r5,r4,100e968 <__fpcmp_parts_f+0x54>
 100e990:	217ff02e 	bgeu	r4,r5,100e954 <__fpcmp_parts_f+0x40>
 100e994:	183fec1e 	bne	r3,zero,100e948 <__fpcmp_parts_f+0x34>
 100e998:	003ff406 	br	100e96c <__fpcmp_parts_f+0x58>
 100e99c:	28800117 	ldw	r2,4(r5)
 100e9a0:	103fe91e 	bne	r2,zero,100e948 <__fpcmp_parts_f+0x34>
 100e9a4:	003ff106 	br	100e96c <__fpcmp_parts_f+0x58>
 100e9a8:	11bfe51e 	bne	r2,r6,100e940 <__fpcmp_parts_f+0x2c>
 100e9ac:	28c00117 	ldw	r3,4(r5)
 100e9b0:	20800117 	ldw	r2,4(r4)
 100e9b4:	1885c83a 	sub	r2,r3,r2
 100e9b8:	f800283a 	ret

0100e9bc <__make_fp>:
 100e9bc:	defffb04 	addi	sp,sp,-20
 100e9c0:	d9000015 	stw	r4,0(sp)
 100e9c4:	d809883a 	mov	r4,sp
 100e9c8:	dfc00415 	stw	ra,16(sp)
 100e9cc:	d9400115 	stw	r5,4(sp)
 100e9d0:	d9800215 	stw	r6,8(sp)
 100e9d4:	d9c00315 	stw	r7,12(sp)
 100e9d8:	100eefc0 	call	100eefc <__pack_f>
 100e9dc:	dfc00417 	ldw	ra,16(sp)
 100e9e0:	dec00504 	addi	sp,sp,20
 100e9e4:	f800283a 	ret

0100e9e8 <__pack_d>:
 100e9e8:	20c00017 	ldw	r3,0(r4)
 100e9ec:	defffd04 	addi	sp,sp,-12
 100e9f0:	dc000015 	stw	r16,0(sp)
 100e9f4:	dc800215 	stw	r18,8(sp)
 100e9f8:	dc400115 	stw	r17,4(sp)
 100e9fc:	00800044 	movi	r2,1
 100ea00:	22000317 	ldw	r8,12(r4)
 100ea04:	001f883a 	mov	r15,zero
 100ea08:	22400417 	ldw	r9,16(r4)
 100ea0c:	24000117 	ldw	r16,4(r4)
 100ea10:	10c0552e 	bgeu	r2,r3,100eb68 <__pack_d+0x180>
 100ea14:	00800104 	movi	r2,4
 100ea18:	18804f26 	beq	r3,r2,100eb58 <__pack_d+0x170>
 100ea1c:	00800084 	movi	r2,2
 100ea20:	18800226 	beq	r3,r2,100ea2c <__pack_d+0x44>
 100ea24:	4244b03a 	or	r2,r8,r9
 100ea28:	10001a1e 	bne	r2,zero,100ea94 <__pack_d+0xac>
 100ea2c:	000d883a 	mov	r6,zero
 100ea30:	000f883a 	mov	r7,zero
 100ea34:	0011883a 	mov	r8,zero
 100ea38:	00800434 	movhi	r2,16
 100ea3c:	10bfffc4 	addi	r2,r2,-1
 100ea40:	301d883a 	mov	r14,r6
 100ea44:	3884703a 	and	r2,r7,r2
 100ea48:	400a953a 	slli	r5,r8,20
 100ea4c:	79bffc2c 	andhi	r6,r15,65520
 100ea50:	308cb03a 	or	r6,r6,r2
 100ea54:	00e00434 	movhi	r3,32784
 100ea58:	18ffffc4 	addi	r3,r3,-1
 100ea5c:	800497fa 	slli	r2,r16,31
 100ea60:	30c6703a 	and	r3,r6,r3
 100ea64:	1946b03a 	or	r3,r3,r5
 100ea68:	01600034 	movhi	r5,32768
 100ea6c:	297fffc4 	addi	r5,r5,-1
 100ea70:	194a703a 	and	r5,r3,r5
 100ea74:	288ab03a 	or	r5,r5,r2
 100ea78:	2807883a 	mov	r3,r5
 100ea7c:	7005883a 	mov	r2,r14
 100ea80:	dc800217 	ldw	r18,8(sp)
 100ea84:	dc400117 	ldw	r17,4(sp)
 100ea88:	dc000017 	ldw	r16,0(sp)
 100ea8c:	dec00304 	addi	sp,sp,12
 100ea90:	f800283a 	ret
 100ea94:	21000217 	ldw	r4,8(r4)
 100ea98:	00bf0084 	movi	r2,-1022
 100ea9c:	20803f16 	blt	r4,r2,100eb9c <__pack_d+0x1b4>
 100eaa0:	0080ffc4 	movi	r2,1023
 100eaa4:	11002c16 	blt	r2,r4,100eb58 <__pack_d+0x170>
 100eaa8:	00803fc4 	movi	r2,255
 100eaac:	408c703a 	and	r6,r8,r2
 100eab0:	00802004 	movi	r2,128
 100eab4:	0007883a 	mov	r3,zero
 100eab8:	000f883a 	mov	r7,zero
 100eabc:	2280ffc4 	addi	r10,r4,1023
 100eac0:	30801e26 	beq	r6,r2,100eb3c <__pack_d+0x154>
 100eac4:	00801fc4 	movi	r2,127
 100eac8:	4089883a 	add	r4,r8,r2
 100eacc:	220d803a 	cmpltu	r6,r4,r8
 100ead0:	324d883a 	add	r6,r6,r9
 100ead4:	2011883a 	mov	r8,r4
 100ead8:	3013883a 	mov	r9,r6
 100eadc:	00880034 	movhi	r2,8192
 100eae0:	10bfffc4 	addi	r2,r2,-1
 100eae4:	12400d36 	bltu	r2,r9,100eb1c <__pack_d+0x134>
 100eae8:	4804963a 	slli	r2,r9,24
 100eaec:	400cd23a 	srli	r6,r8,8
 100eaf0:	480ed23a 	srli	r7,r9,8
 100eaf4:	013fffc4 	movi	r4,-1
 100eaf8:	118cb03a 	or	r6,r2,r6
 100eafc:	01400434 	movhi	r5,16
 100eb00:	297fffc4 	addi	r5,r5,-1
 100eb04:	3104703a 	and	r2,r6,r4
 100eb08:	3946703a 	and	r3,r7,r5
 100eb0c:	5201ffcc 	andi	r8,r10,2047
 100eb10:	100d883a 	mov	r6,r2
 100eb14:	180f883a 	mov	r7,r3
 100eb18:	003fc706 	br	100ea38 <__pack_d+0x50>
 100eb1c:	480897fa 	slli	r4,r9,31
 100eb20:	4004d07a 	srli	r2,r8,1
 100eb24:	4806d07a 	srli	r3,r9,1
 100eb28:	52800044 	addi	r10,r10,1
 100eb2c:	2084b03a 	or	r2,r4,r2
 100eb30:	1011883a 	mov	r8,r2
 100eb34:	1813883a 	mov	r9,r3
 100eb38:	003feb06 	br	100eae8 <__pack_d+0x100>
 100eb3c:	383fe11e 	bne	r7,zero,100eac4 <__pack_d+0xdc>
 100eb40:	01004004 	movi	r4,256
 100eb44:	4104703a 	and	r2,r8,r4
 100eb48:	10c4b03a 	or	r2,r2,r3
 100eb4c:	103fe326 	beq	r2,zero,100eadc <__pack_d+0xf4>
 100eb50:	3005883a 	mov	r2,r6
 100eb54:	003fdc06 	br	100eac8 <__pack_d+0xe0>
 100eb58:	000d883a 	mov	r6,zero
 100eb5c:	000f883a 	mov	r7,zero
 100eb60:	0201ffc4 	movi	r8,2047
 100eb64:	003fb406 	br	100ea38 <__pack_d+0x50>
 100eb68:	0005883a 	mov	r2,zero
 100eb6c:	00c00234 	movhi	r3,8
 100eb70:	408cb03a 	or	r6,r8,r2
 100eb74:	48ceb03a 	or	r7,r9,r3
 100eb78:	013fffc4 	movi	r4,-1
 100eb7c:	01400434 	movhi	r5,16
 100eb80:	297fffc4 	addi	r5,r5,-1
 100eb84:	3104703a 	and	r2,r6,r4
 100eb88:	3946703a 	and	r3,r7,r5
 100eb8c:	100d883a 	mov	r6,r2
 100eb90:	180f883a 	mov	r7,r3
 100eb94:	0201ffc4 	movi	r8,2047
 100eb98:	003fa706 	br	100ea38 <__pack_d+0x50>
 100eb9c:	1109c83a 	sub	r4,r2,r4
 100eba0:	00800e04 	movi	r2,56
 100eba4:	11004316 	blt	r2,r4,100ecb4 <__pack_d+0x2cc>
 100eba8:	21fff804 	addi	r7,r4,-32
 100ebac:	38004516 	blt	r7,zero,100ecc4 <__pack_d+0x2dc>
 100ebb0:	49d8d83a 	srl	r12,r9,r7
 100ebb4:	001b883a 	mov	r13,zero
 100ebb8:	0023883a 	mov	r17,zero
 100ebbc:	01400044 	movi	r5,1
 100ebc0:	0025883a 	mov	r18,zero
 100ebc4:	38004716 	blt	r7,zero,100ece4 <__pack_d+0x2fc>
 100ebc8:	29d6983a 	sll	r11,r5,r7
 100ebcc:	0015883a 	mov	r10,zero
 100ebd0:	00bfffc4 	movi	r2,-1
 100ebd4:	5089883a 	add	r4,r10,r2
 100ebd8:	588b883a 	add	r5,r11,r2
 100ebdc:	228d803a 	cmpltu	r6,r4,r10
 100ebe0:	314b883a 	add	r5,r6,r5
 100ebe4:	4104703a 	and	r2,r8,r4
 100ebe8:	4946703a 	and	r3,r9,r5
 100ebec:	10c4b03a 	or	r2,r2,r3
 100ebf0:	10000226 	beq	r2,zero,100ebfc <__pack_d+0x214>
 100ebf4:	04400044 	movi	r17,1
 100ebf8:	0025883a 	mov	r18,zero
 100ebfc:	00803fc4 	movi	r2,255
 100ec00:	644eb03a 	or	r7,r12,r17
 100ec04:	3892703a 	and	r9,r7,r2
 100ec08:	00802004 	movi	r2,128
 100ec0c:	6c90b03a 	or	r8,r13,r18
 100ec10:	0015883a 	mov	r10,zero
 100ec14:	48801626 	beq	r9,r2,100ec70 <__pack_d+0x288>
 100ec18:	01001fc4 	movi	r4,127
 100ec1c:	3905883a 	add	r2,r7,r4
 100ec20:	11cd803a 	cmpltu	r6,r2,r7
 100ec24:	320d883a 	add	r6,r6,r8
 100ec28:	100f883a 	mov	r7,r2
 100ec2c:	00840034 	movhi	r2,4096
 100ec30:	10bfffc4 	addi	r2,r2,-1
 100ec34:	3011883a 	mov	r8,r6
 100ec38:	0007883a 	mov	r3,zero
 100ec3c:	11801b36 	bltu	r2,r6,100ecac <__pack_d+0x2c4>
 100ec40:	4004963a 	slli	r2,r8,24
 100ec44:	3808d23a 	srli	r4,r7,8
 100ec48:	400ad23a 	srli	r5,r8,8
 100ec4c:	1813883a 	mov	r9,r3
 100ec50:	1108b03a 	or	r4,r2,r4
 100ec54:	00bfffc4 	movi	r2,-1
 100ec58:	00c00434 	movhi	r3,16
 100ec5c:	18ffffc4 	addi	r3,r3,-1
 100ec60:	208c703a 	and	r6,r4,r2
 100ec64:	28ce703a 	and	r7,r5,r3
 100ec68:	4a01ffcc 	andi	r8,r9,2047
 100ec6c:	003f7206 	br	100ea38 <__pack_d+0x50>
 100ec70:	503fe91e 	bne	r10,zero,100ec18 <__pack_d+0x230>
 100ec74:	01004004 	movi	r4,256
 100ec78:	3904703a 	and	r2,r7,r4
 100ec7c:	0007883a 	mov	r3,zero
 100ec80:	10c4b03a 	or	r2,r2,r3
 100ec84:	10000626 	beq	r2,zero,100eca0 <__pack_d+0x2b8>
 100ec88:	3a45883a 	add	r2,r7,r9
 100ec8c:	11cd803a 	cmpltu	r6,r2,r7
 100ec90:	320d883a 	add	r6,r6,r8
 100ec94:	100f883a 	mov	r7,r2
 100ec98:	3011883a 	mov	r8,r6
 100ec9c:	0007883a 	mov	r3,zero
 100eca0:	00840034 	movhi	r2,4096
 100eca4:	10bfffc4 	addi	r2,r2,-1
 100eca8:	123fe52e 	bgeu	r2,r8,100ec40 <__pack_d+0x258>
 100ecac:	00c00044 	movi	r3,1
 100ecb0:	003fe306 	br	100ec40 <__pack_d+0x258>
 100ecb4:	0009883a 	mov	r4,zero
 100ecb8:	0013883a 	mov	r9,zero
 100ecbc:	000b883a 	mov	r5,zero
 100ecc0:	003fe406 	br	100ec54 <__pack_d+0x26c>
 100ecc4:	4a47883a 	add	r3,r9,r9
 100ecc8:	008007c4 	movi	r2,31
 100eccc:	1105c83a 	sub	r2,r2,r4
 100ecd0:	1886983a 	sll	r3,r3,r2
 100ecd4:	4118d83a 	srl	r12,r8,r4
 100ecd8:	491ad83a 	srl	r13,r9,r4
 100ecdc:	1b18b03a 	or	r12,r3,r12
 100ece0:	003fb506 	br	100ebb8 <__pack_d+0x1d0>
 100ece4:	2806d07a 	srli	r3,r5,1
 100ece8:	008007c4 	movi	r2,31
 100ecec:	1105c83a 	sub	r2,r2,r4
 100ecf0:	1896d83a 	srl	r11,r3,r2
 100ecf4:	2914983a 	sll	r10,r5,r4
 100ecf8:	003fb506 	br	100ebd0 <__pack_d+0x1e8>

0100ecfc <__unpack_d>:
 100ecfc:	20c00117 	ldw	r3,4(r4)
 100ed00:	22400017 	ldw	r9,0(r4)
 100ed04:	00800434 	movhi	r2,16
 100ed08:	10bfffc4 	addi	r2,r2,-1
 100ed0c:	1808d53a 	srli	r4,r3,20
 100ed10:	180cd7fa 	srli	r6,r3,31
 100ed14:	1894703a 	and	r10,r3,r2
 100ed18:	2201ffcc 	andi	r8,r4,2047
 100ed1c:	281b883a 	mov	r13,r5
 100ed20:	4817883a 	mov	r11,r9
 100ed24:	29800115 	stw	r6,4(r5)
 100ed28:	5019883a 	mov	r12,r10
 100ed2c:	40001e1e 	bne	r8,zero,100eda8 <__unpack_d+0xac>
 100ed30:	4a84b03a 	or	r2,r9,r10
 100ed34:	10001926 	beq	r2,zero,100ed9c <__unpack_d+0xa0>
 100ed38:	4804d63a 	srli	r2,r9,24
 100ed3c:	500c923a 	slli	r6,r10,8
 100ed40:	013f0084 	movi	r4,-1022
 100ed44:	00c40034 	movhi	r3,4096
 100ed48:	18ffffc4 	addi	r3,r3,-1
 100ed4c:	118cb03a 	or	r6,r2,r6
 100ed50:	008000c4 	movi	r2,3
 100ed54:	480a923a 	slli	r5,r9,8
 100ed58:	68800015 	stw	r2,0(r13)
 100ed5c:	69000215 	stw	r4,8(r13)
 100ed60:	19800b36 	bltu	r3,r6,100ed90 <__unpack_d+0x94>
 100ed64:	200f883a 	mov	r7,r4
 100ed68:	1811883a 	mov	r8,r3
 100ed6c:	2945883a 	add	r2,r5,r5
 100ed70:	1149803a 	cmpltu	r4,r2,r5
 100ed74:	3187883a 	add	r3,r6,r6
 100ed78:	20c9883a 	add	r4,r4,r3
 100ed7c:	100b883a 	mov	r5,r2
 100ed80:	200d883a 	mov	r6,r4
 100ed84:	39ffffc4 	addi	r7,r7,-1
 100ed88:	413ff82e 	bgeu	r8,r4,100ed6c <__unpack_d+0x70>
 100ed8c:	69c00215 	stw	r7,8(r13)
 100ed90:	69800415 	stw	r6,16(r13)
 100ed94:	69400315 	stw	r5,12(r13)
 100ed98:	f800283a 	ret
 100ed9c:	00800084 	movi	r2,2
 100eda0:	28800015 	stw	r2,0(r5)
 100eda4:	f800283a 	ret
 100eda8:	0081ffc4 	movi	r2,2047
 100edac:	40800f26 	beq	r8,r2,100edec <__unpack_d+0xf0>
 100edb0:	480cd63a 	srli	r6,r9,24
 100edb4:	5006923a 	slli	r3,r10,8
 100edb8:	4804923a 	slli	r2,r9,8
 100edbc:	0009883a 	mov	r4,zero
 100edc0:	30c6b03a 	or	r3,r6,r3
 100edc4:	01440034 	movhi	r5,4096
 100edc8:	110cb03a 	or	r6,r2,r4
 100edcc:	423f0044 	addi	r8,r8,-1023
 100edd0:	194eb03a 	or	r7,r3,r5
 100edd4:	008000c4 	movi	r2,3
 100edd8:	69c00415 	stw	r7,16(r13)
 100eddc:	6a000215 	stw	r8,8(r13)
 100ede0:	68800015 	stw	r2,0(r13)
 100ede4:	69800315 	stw	r6,12(r13)
 100ede8:	f800283a 	ret
 100edec:	4a84b03a 	or	r2,r9,r10
 100edf0:	1000031e 	bne	r2,zero,100ee00 <__unpack_d+0x104>
 100edf4:	00800104 	movi	r2,4
 100edf8:	28800015 	stw	r2,0(r5)
 100edfc:	f800283a 	ret
 100ee00:	0009883a 	mov	r4,zero
 100ee04:	01400234 	movhi	r5,8
 100ee08:	4904703a 	and	r2,r9,r4
 100ee0c:	5146703a 	and	r3,r10,r5
 100ee10:	10c4b03a 	or	r2,r2,r3
 100ee14:	10000526 	beq	r2,zero,100ee2c <__unpack_d+0x130>
 100ee18:	00800044 	movi	r2,1
 100ee1c:	68800015 	stw	r2,0(r13)
 100ee20:	6b000415 	stw	r12,16(r13)
 100ee24:	6ac00315 	stw	r11,12(r13)
 100ee28:	f800283a 	ret
 100ee2c:	68000015 	stw	zero,0(r13)
 100ee30:	003ffb06 	br	100ee20 <__unpack_d+0x124>

0100ee34 <__fpcmp_parts_d>:
 100ee34:	21800017 	ldw	r6,0(r4)
 100ee38:	00c00044 	movi	r3,1
 100ee3c:	19800a2e 	bgeu	r3,r6,100ee68 <__fpcmp_parts_d+0x34>
 100ee40:	28800017 	ldw	r2,0(r5)
 100ee44:	1880082e 	bgeu	r3,r2,100ee68 <__fpcmp_parts_d+0x34>
 100ee48:	00c00104 	movi	r3,4
 100ee4c:	30c02626 	beq	r6,r3,100eee8 <__fpcmp_parts_d+0xb4>
 100ee50:	10c02226 	beq	r2,r3,100eedc <__fpcmp_parts_d+0xa8>
 100ee54:	00c00084 	movi	r3,2
 100ee58:	30c00526 	beq	r6,r3,100ee70 <__fpcmp_parts_d+0x3c>
 100ee5c:	10c0071e 	bne	r2,r3,100ee7c <__fpcmp_parts_d+0x48>
 100ee60:	20800117 	ldw	r2,4(r4)
 100ee64:	1000091e 	bne	r2,zero,100ee8c <__fpcmp_parts_d+0x58>
 100ee68:	00800044 	movi	r2,1
 100ee6c:	f800283a 	ret
 100ee70:	10c01a1e 	bne	r2,r3,100eedc <__fpcmp_parts_d+0xa8>
 100ee74:	0005883a 	mov	r2,zero
 100ee78:	f800283a 	ret
 100ee7c:	22000117 	ldw	r8,4(r4)
 100ee80:	28800117 	ldw	r2,4(r5)
 100ee84:	40800326 	beq	r8,r2,100ee94 <__fpcmp_parts_d+0x60>
 100ee88:	403ff726 	beq	r8,zero,100ee68 <__fpcmp_parts_d+0x34>
 100ee8c:	00bfffc4 	movi	r2,-1
 100ee90:	f800283a 	ret
 100ee94:	20c00217 	ldw	r3,8(r4)
 100ee98:	28800217 	ldw	r2,8(r5)
 100ee9c:	10fffa16 	blt	r2,r3,100ee88 <__fpcmp_parts_d+0x54>
 100eea0:	18800916 	blt	r3,r2,100eec8 <__fpcmp_parts_d+0x94>
 100eea4:	21c00417 	ldw	r7,16(r4)
 100eea8:	28c00417 	ldw	r3,16(r5)
 100eeac:	21800317 	ldw	r6,12(r4)
 100eeb0:	28800317 	ldw	r2,12(r5)
 100eeb4:	19fff436 	bltu	r3,r7,100ee88 <__fpcmp_parts_d+0x54>
 100eeb8:	38c00526 	beq	r7,r3,100eed0 <__fpcmp_parts_d+0x9c>
 100eebc:	38c00236 	bltu	r7,r3,100eec8 <__fpcmp_parts_d+0x94>
 100eec0:	19ffec1e 	bne	r3,r7,100ee74 <__fpcmp_parts_d+0x40>
 100eec4:	30bfeb2e 	bgeu	r6,r2,100ee74 <__fpcmp_parts_d+0x40>
 100eec8:	403fe71e 	bne	r8,zero,100ee68 <__fpcmp_parts_d+0x34>
 100eecc:	003fef06 	br	100ee8c <__fpcmp_parts_d+0x58>
 100eed0:	11bffa2e 	bgeu	r2,r6,100eebc <__fpcmp_parts_d+0x88>
 100eed4:	403fe426 	beq	r8,zero,100ee68 <__fpcmp_parts_d+0x34>
 100eed8:	003fec06 	br	100ee8c <__fpcmp_parts_d+0x58>
 100eedc:	28800117 	ldw	r2,4(r5)
 100eee0:	103fe11e 	bne	r2,zero,100ee68 <__fpcmp_parts_d+0x34>
 100eee4:	003fe906 	br	100ee8c <__fpcmp_parts_d+0x58>
 100eee8:	11bfdd1e 	bne	r2,r6,100ee60 <__fpcmp_parts_d+0x2c>
 100eeec:	28c00117 	ldw	r3,4(r5)
 100eef0:	20800117 	ldw	r2,4(r4)
 100eef4:	1885c83a 	sub	r2,r3,r2
 100eef8:	f800283a 	ret

0100eefc <__pack_f>:
 100eefc:	20c00017 	ldw	r3,0(r4)
 100ef00:	01c00044 	movi	r7,1
 100ef04:	21800317 	ldw	r6,12(r4)
 100ef08:	21400117 	ldw	r5,4(r4)
 100ef0c:	38c02d2e 	bgeu	r7,r3,100efc4 <__pack_f+0xc8>
 100ef10:	00800104 	movi	r2,4
 100ef14:	18802826 	beq	r3,r2,100efb8 <__pack_f+0xbc>
 100ef18:	00800084 	movi	r2,2
 100ef1c:	18800126 	beq	r3,r2,100ef24 <__pack_f+0x28>
 100ef20:	3000101e 	bne	r6,zero,100ef64 <__pack_f+0x68>
 100ef24:	000d883a 	mov	r6,zero
 100ef28:	0007883a 	mov	r3,zero
 100ef2c:	19003fcc 	andi	r4,r3,255
 100ef30:	200895fa 	slli	r4,r4,23
 100ef34:	00c02034 	movhi	r3,128
 100ef38:	18ffffc4 	addi	r3,r3,-1
 100ef3c:	30c6703a 	and	r3,r6,r3
 100ef40:	10a0002c 	andhi	r2,r2,32768
 100ef44:	10c4b03a 	or	r2,r2,r3
 100ef48:	280a97fa 	slli	r5,r5,31
 100ef4c:	1104b03a 	or	r2,r2,r4
 100ef50:	00e00034 	movhi	r3,32768
 100ef54:	18ffffc4 	addi	r3,r3,-1
 100ef58:	10c4703a 	and	r2,r2,r3
 100ef5c:	1144b03a 	or	r2,r2,r5
 100ef60:	f800283a 	ret
 100ef64:	21000217 	ldw	r4,8(r4)
 100ef68:	00bfe084 	movi	r2,-126
 100ef6c:	20801b16 	blt	r4,r2,100efdc <__pack_f+0xe0>
 100ef70:	00801fc4 	movi	r2,127
 100ef74:	11001016 	blt	r2,r4,100efb8 <__pack_f+0xbc>
 100ef78:	308e703a 	and	r7,r6,r2
 100ef7c:	2087883a 	add	r3,r4,r2
 100ef80:	00801004 	movi	r2,64
 100ef84:	38800526 	beq	r7,r2,100ef9c <__pack_f+0xa0>
 100ef88:	31800fc4 	addi	r6,r6,63
 100ef8c:	30000716 	blt	r6,zero,100efac <__pack_f+0xb0>
 100ef90:	300490ba 	slli	r2,r6,2
 100ef94:	100cd27a 	srli	r6,r2,9
 100ef98:	003fe406 	br	100ef2c <__pack_f+0x30>
 100ef9c:	3080200c 	andi	r2,r6,128
 100efa0:	103ffa26 	beq	r2,zero,100ef8c <__pack_f+0x90>
 100efa4:	31cd883a 	add	r6,r6,r7
 100efa8:	003ff806 	br	100ef8c <__pack_f+0x90>
 100efac:	300cd07a 	srli	r6,r6,1
 100efb0:	18c00044 	addi	r3,r3,1
 100efb4:	003ff606 	br	100ef90 <__pack_f+0x94>
 100efb8:	000d883a 	mov	r6,zero
 100efbc:	00ffffc4 	movi	r3,-1
 100efc0:	003fda06 	br	100ef2c <__pack_f+0x30>
 100efc4:	31800434 	orhi	r6,r6,16
 100efc8:	00802034 	movhi	r2,128
 100efcc:	10bfffc4 	addi	r2,r2,-1
 100efd0:	308c703a 	and	r6,r6,r2
 100efd4:	00ffffc4 	movi	r3,-1
 100efd8:	003fd406 	br	100ef2c <__pack_f+0x30>
 100efdc:	1109c83a 	sub	r4,r2,r4
 100efe0:	00800644 	movi	r2,25
 100efe4:	11001216 	blt	r2,r4,100f030 <__pack_f+0x134>
 100efe8:	3904983a 	sll	r2,r7,r4
 100efec:	3106d83a 	srl	r3,r6,r4
 100eff0:	10bfffc4 	addi	r2,r2,-1
 100eff4:	3084703a 	and	r2,r6,r2
 100eff8:	1004c03a 	cmpne	r2,r2,zero
 100effc:	1886b03a 	or	r3,r3,r2
 100f000:	19001fcc 	andi	r4,r3,127
 100f004:	00801004 	movi	r2,64
 100f008:	20800c26 	beq	r4,r2,100f03c <__pack_f+0x140>
 100f00c:	18c00fc4 	addi	r3,r3,63
 100f010:	00900034 	movhi	r2,16384
 100f014:	10bfffc4 	addi	r2,r2,-1
 100f018:	180cd1fa 	srli	r6,r3,7
 100f01c:	10c7803a 	cmpltu	r3,r2,r3
 100f020:	00802034 	movhi	r2,128
 100f024:	10bfffc4 	addi	r2,r2,-1
 100f028:	308c703a 	and	r6,r6,r2
 100f02c:	003fbf06 	br	100ef2c <__pack_f+0x30>
 100f030:	0007883a 	mov	r3,zero
 100f034:	000d883a 	mov	r6,zero
 100f038:	003ff906 	br	100f020 <__pack_f+0x124>
 100f03c:	1880200c 	andi	r2,r3,128
 100f040:	10000126 	beq	r2,zero,100f048 <__pack_f+0x14c>
 100f044:	1907883a 	add	r3,r3,r4
 100f048:	180cd1fa 	srli	r6,r3,7
 100f04c:	00900034 	movhi	r2,16384
 100f050:	10bfffc4 	addi	r2,r2,-1
 100f054:	10c7803a 	cmpltu	r3,r2,r3
 100f058:	003ff106 	br	100f020 <__pack_f+0x124>

0100f05c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100f05c:	defff804 	addi	sp,sp,-32
 100f060:	dfc00715 	stw	ra,28(sp)
 100f064:	df000615 	stw	fp,24(sp)
 100f068:	df000604 	addi	fp,sp,24
 100f06c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100f070:	e0bffc17 	ldw	r2,-16(fp)
 100f074:	1004803a 	cmplt	r2,r2,zero
 100f078:	1000081e 	bne	r2,zero,100f09c <close+0x40>
 100f07c:	e0bffc17 	ldw	r2,-16(fp)
 100f080:	10800324 	muli	r2,r2,12
 100f084:	1007883a 	mov	r3,r2
 100f088:	008040b4 	movhi	r2,258
 100f08c:	10a45e04 	addi	r2,r2,-28296
 100f090:	1887883a 	add	r3,r3,r2
 100f094:	e0ffff15 	stw	r3,-4(fp)
 100f098:	00000106 	br	100f0a0 <close+0x44>
 100f09c:	e03fff15 	stw	zero,-4(fp)
 100f0a0:	e0bfff17 	ldw	r2,-4(fp)
 100f0a4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 100f0a8:	e0bffb17 	ldw	r2,-20(fp)
 100f0ac:	1005003a 	cmpeq	r2,r2,zero
 100f0b0:	10001d1e 	bne	r2,zero,100f128 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100f0b4:	e0bffb17 	ldw	r2,-20(fp)
 100f0b8:	10800017 	ldw	r2,0(r2)
 100f0bc:	10800417 	ldw	r2,16(r2)
 100f0c0:	1005003a 	cmpeq	r2,r2,zero
 100f0c4:	1000071e 	bne	r2,zero,100f0e4 <close+0x88>
 100f0c8:	e0bffb17 	ldw	r2,-20(fp)
 100f0cc:	10800017 	ldw	r2,0(r2)
 100f0d0:	10800417 	ldw	r2,16(r2)
 100f0d4:	e13ffb17 	ldw	r4,-20(fp)
 100f0d8:	103ee83a 	callr	r2
 100f0dc:	e0bffe15 	stw	r2,-8(fp)
 100f0e0:	00000106 	br	100f0e8 <close+0x8c>
 100f0e4:	e03ffe15 	stw	zero,-8(fp)
 100f0e8:	e0bffe17 	ldw	r2,-8(fp)
 100f0ec:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100f0f0:	e13ffc17 	ldw	r4,-16(fp)
 100f0f4:	100f8a00 	call	100f8a0 <alt_release_fd>
    if (rval < 0)
 100f0f8:	e0bffa17 	ldw	r2,-24(fp)
 100f0fc:	1004403a 	cmpge	r2,r2,zero
 100f100:	1000071e 	bne	r2,zero,100f120 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 100f104:	100f1580 	call	100f158 <alt_get_errno>
 100f108:	e0fffa17 	ldw	r3,-24(fp)
 100f10c:	00c7c83a 	sub	r3,zero,r3
 100f110:	10c00015 	stw	r3,0(r2)
      return -1;
 100f114:	00bfffc4 	movi	r2,-1
 100f118:	e0bffd15 	stw	r2,-12(fp)
 100f11c:	00000806 	br	100f140 <close+0xe4>
    }
    return 0;
 100f120:	e03ffd15 	stw	zero,-12(fp)
 100f124:	00000606 	br	100f140 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100f128:	100f1580 	call	100f158 <alt_get_errno>
 100f12c:	1007883a 	mov	r3,r2
 100f130:	00801444 	movi	r2,81
 100f134:	18800015 	stw	r2,0(r3)
    return -1;
 100f138:	00bfffc4 	movi	r2,-1
 100f13c:	e0bffd15 	stw	r2,-12(fp)
 100f140:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 100f144:	e037883a 	mov	sp,fp
 100f148:	dfc00117 	ldw	ra,4(sp)
 100f14c:	df000017 	ldw	fp,0(sp)
 100f150:	dec00204 	addi	sp,sp,8
 100f154:	f800283a 	ret

0100f158 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100f158:	defffd04 	addi	sp,sp,-12
 100f15c:	dfc00215 	stw	ra,8(sp)
 100f160:	df000115 	stw	fp,4(sp)
 100f164:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100f168:	008040b4 	movhi	r2,258
 100f16c:	10a90304 	addi	r2,r2,-23540
 100f170:	10800017 	ldw	r2,0(r2)
 100f174:	1005003a 	cmpeq	r2,r2,zero
 100f178:	1000061e 	bne	r2,zero,100f194 <alt_get_errno+0x3c>
 100f17c:	008040b4 	movhi	r2,258
 100f180:	10a90304 	addi	r2,r2,-23540
 100f184:	10800017 	ldw	r2,0(r2)
 100f188:	103ee83a 	callr	r2
 100f18c:	e0bfff15 	stw	r2,-4(fp)
 100f190:	00000306 	br	100f1a0 <alt_get_errno+0x48>
 100f194:	008040b4 	movhi	r2,258
 100f198:	10afd104 	addi	r2,r2,-16572
 100f19c:	e0bfff15 	stw	r2,-4(fp)
 100f1a0:	e0bfff17 	ldw	r2,-4(fp)
}
 100f1a4:	e037883a 	mov	sp,fp
 100f1a8:	dfc00117 	ldw	ra,4(sp)
 100f1ac:	df000017 	ldw	fp,0(sp)
 100f1b0:	dec00204 	addi	sp,sp,8
 100f1b4:	f800283a 	ret

0100f1b8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100f1b8:	defffc04 	addi	sp,sp,-16
 100f1bc:	df000315 	stw	fp,12(sp)
 100f1c0:	df000304 	addi	fp,sp,12
 100f1c4:	e13ffd15 	stw	r4,-12(fp)
 100f1c8:	e17ffe15 	stw	r5,-8(fp)
 100f1cc:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100f1d0:	e0bfff17 	ldw	r2,-4(fp)
}
 100f1d4:	e037883a 	mov	sp,fp
 100f1d8:	df000017 	ldw	fp,0(sp)
 100f1dc:	dec00104 	addi	sp,sp,4
 100f1e0:	f800283a 	ret

0100f1e4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100f1e4:	defff904 	addi	sp,sp,-28
 100f1e8:	dfc00615 	stw	ra,24(sp)
 100f1ec:	df000515 	stw	fp,20(sp)
 100f1f0:	df000504 	addi	fp,sp,20
 100f1f4:	e13ffc15 	stw	r4,-16(fp)
 100f1f8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100f1fc:	e0bffc17 	ldw	r2,-16(fp)
 100f200:	1004803a 	cmplt	r2,r2,zero
 100f204:	1000081e 	bne	r2,zero,100f228 <fstat+0x44>
 100f208:	e0bffc17 	ldw	r2,-16(fp)
 100f20c:	10800324 	muli	r2,r2,12
 100f210:	1007883a 	mov	r3,r2
 100f214:	008040b4 	movhi	r2,258
 100f218:	10a45e04 	addi	r2,r2,-28296
 100f21c:	1887883a 	add	r3,r3,r2
 100f220:	e0ffff15 	stw	r3,-4(fp)
 100f224:	00000106 	br	100f22c <fstat+0x48>
 100f228:	e03fff15 	stw	zero,-4(fp)
 100f22c:	e0bfff17 	ldw	r2,-4(fp)
 100f230:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100f234:	e0bffb17 	ldw	r2,-20(fp)
 100f238:	1005003a 	cmpeq	r2,r2,zero
 100f23c:	1000121e 	bne	r2,zero,100f288 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100f240:	e0bffb17 	ldw	r2,-20(fp)
 100f244:	10800017 	ldw	r2,0(r2)
 100f248:	10800817 	ldw	r2,32(r2)
 100f24c:	1005003a 	cmpeq	r2,r2,zero
 100f250:	1000081e 	bne	r2,zero,100f274 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 100f254:	e0bffb17 	ldw	r2,-20(fp)
 100f258:	10800017 	ldw	r2,0(r2)
 100f25c:	10800817 	ldw	r2,32(r2)
 100f260:	e13ffb17 	ldw	r4,-20(fp)
 100f264:	e17ffd17 	ldw	r5,-12(fp)
 100f268:	103ee83a 	callr	r2
 100f26c:	e0bffe15 	stw	r2,-8(fp)
 100f270:	00000b06 	br	100f2a0 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100f274:	e0fffd17 	ldw	r3,-12(fp)
 100f278:	00880004 	movi	r2,8192
 100f27c:	18800115 	stw	r2,4(r3)
      return 0;
 100f280:	e03ffe15 	stw	zero,-8(fp)
 100f284:	00000606 	br	100f2a0 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100f288:	100f2b80 	call	100f2b8 <alt_get_errno>
 100f28c:	1007883a 	mov	r3,r2
 100f290:	00801444 	movi	r2,81
 100f294:	18800015 	stw	r2,0(r3)
    return -1;
 100f298:	00bfffc4 	movi	r2,-1
 100f29c:	e0bffe15 	stw	r2,-8(fp)
 100f2a0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100f2a4:	e037883a 	mov	sp,fp
 100f2a8:	dfc00117 	ldw	ra,4(sp)
 100f2ac:	df000017 	ldw	fp,0(sp)
 100f2b0:	dec00204 	addi	sp,sp,8
 100f2b4:	f800283a 	ret

0100f2b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100f2b8:	defffd04 	addi	sp,sp,-12
 100f2bc:	dfc00215 	stw	ra,8(sp)
 100f2c0:	df000115 	stw	fp,4(sp)
 100f2c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100f2c8:	008040b4 	movhi	r2,258
 100f2cc:	10a90304 	addi	r2,r2,-23540
 100f2d0:	10800017 	ldw	r2,0(r2)
 100f2d4:	1005003a 	cmpeq	r2,r2,zero
 100f2d8:	1000061e 	bne	r2,zero,100f2f4 <alt_get_errno+0x3c>
 100f2dc:	008040b4 	movhi	r2,258
 100f2e0:	10a90304 	addi	r2,r2,-23540
 100f2e4:	10800017 	ldw	r2,0(r2)
 100f2e8:	103ee83a 	callr	r2
 100f2ec:	e0bfff15 	stw	r2,-4(fp)
 100f2f0:	00000306 	br	100f300 <alt_get_errno+0x48>
 100f2f4:	008040b4 	movhi	r2,258
 100f2f8:	10afd104 	addi	r2,r2,-16572
 100f2fc:	e0bfff15 	stw	r2,-4(fp)
 100f300:	e0bfff17 	ldw	r2,-4(fp)
}
 100f304:	e037883a 	mov	sp,fp
 100f308:	dfc00117 	ldw	ra,4(sp)
 100f30c:	df000017 	ldw	fp,0(sp)
 100f310:	dec00204 	addi	sp,sp,8
 100f314:	f800283a 	ret

0100f318 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100f318:	deffeb04 	addi	sp,sp,-84
 100f31c:	dfc01415 	stw	ra,80(sp)
 100f320:	df001315 	stw	fp,76(sp)
 100f324:	df001304 	addi	fp,sp,76
 100f328:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100f32c:	e0bffd17 	ldw	r2,-12(fp)
 100f330:	1004803a 	cmplt	r2,r2,zero
 100f334:	1000081e 	bne	r2,zero,100f358 <isatty+0x40>
 100f338:	e0bffd17 	ldw	r2,-12(fp)
 100f33c:	10800324 	muli	r2,r2,12
 100f340:	1007883a 	mov	r3,r2
 100f344:	008040b4 	movhi	r2,258
 100f348:	10a45e04 	addi	r2,r2,-28296
 100f34c:	1887883a 	add	r3,r3,r2
 100f350:	e0ffff15 	stw	r3,-4(fp)
 100f354:	00000106 	br	100f35c <isatty+0x44>
 100f358:	e03fff15 	stw	zero,-4(fp)
 100f35c:	e0bfff17 	ldw	r2,-4(fp)
 100f360:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 100f364:	e0bfed17 	ldw	r2,-76(fp)
 100f368:	1005003a 	cmpeq	r2,r2,zero
 100f36c:	10000f1e 	bne	r2,zero,100f3ac <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100f370:	e0bfed17 	ldw	r2,-76(fp)
 100f374:	10800017 	ldw	r2,0(r2)
 100f378:	10800817 	ldw	r2,32(r2)
 100f37c:	1004c03a 	cmpne	r2,r2,zero
 100f380:	1000031e 	bne	r2,zero,100f390 <isatty+0x78>
    {
      return 1;
 100f384:	00800044 	movi	r2,1
 100f388:	e0bffe15 	stw	r2,-8(fp)
 100f38c:	00000c06 	br	100f3c0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100f390:	e17fee04 	addi	r5,fp,-72
 100f394:	e13ffd17 	ldw	r4,-12(fp)
 100f398:	100f1e40 	call	100f1e4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100f39c:	e0bfef17 	ldw	r2,-68(fp)
 100f3a0:	10880020 	cmpeqi	r2,r2,8192
 100f3a4:	e0bffe15 	stw	r2,-8(fp)
 100f3a8:	00000506 	br	100f3c0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100f3ac:	100f3d80 	call	100f3d8 <alt_get_errno>
 100f3b0:	1007883a 	mov	r3,r2
 100f3b4:	00801444 	movi	r2,81
 100f3b8:	18800015 	stw	r2,0(r3)
    return 0;
 100f3bc:	e03ffe15 	stw	zero,-8(fp)
 100f3c0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100f3c4:	e037883a 	mov	sp,fp
 100f3c8:	dfc00117 	ldw	ra,4(sp)
 100f3cc:	df000017 	ldw	fp,0(sp)
 100f3d0:	dec00204 	addi	sp,sp,8
 100f3d4:	f800283a 	ret

0100f3d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100f3d8:	defffd04 	addi	sp,sp,-12
 100f3dc:	dfc00215 	stw	ra,8(sp)
 100f3e0:	df000115 	stw	fp,4(sp)
 100f3e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100f3e8:	008040b4 	movhi	r2,258
 100f3ec:	10a90304 	addi	r2,r2,-23540
 100f3f0:	10800017 	ldw	r2,0(r2)
 100f3f4:	1005003a 	cmpeq	r2,r2,zero
 100f3f8:	1000061e 	bne	r2,zero,100f414 <alt_get_errno+0x3c>
 100f3fc:	008040b4 	movhi	r2,258
 100f400:	10a90304 	addi	r2,r2,-23540
 100f404:	10800017 	ldw	r2,0(r2)
 100f408:	103ee83a 	callr	r2
 100f40c:	e0bfff15 	stw	r2,-4(fp)
 100f410:	00000306 	br	100f420 <alt_get_errno+0x48>
 100f414:	008040b4 	movhi	r2,258
 100f418:	10afd104 	addi	r2,r2,-16572
 100f41c:	e0bfff15 	stw	r2,-4(fp)
 100f420:	e0bfff17 	ldw	r2,-4(fp)
}
 100f424:	e037883a 	mov	sp,fp
 100f428:	dfc00117 	ldw	ra,4(sp)
 100f42c:	df000017 	ldw	fp,0(sp)
 100f430:	dec00204 	addi	sp,sp,8
 100f434:	f800283a 	ret

0100f438 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100f438:	defffe04 	addi	sp,sp,-8
 100f43c:	dfc00115 	stw	ra,4(sp)
 100f440:	df000015 	stw	fp,0(sp)
 100f444:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100f448:	010040b4 	movhi	r4,258
 100f44c:	21290804 	addi	r4,r4,-23520
 100f450:	014040b4 	movhi	r5,258
 100f454:	29624504 	addi	r5,r5,-30444
 100f458:	018040b4 	movhi	r6,258
 100f45c:	31a90804 	addi	r6,r6,-23520
 100f460:	100f4b80 	call	100f4b8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100f464:	01004034 	movhi	r4,256
 100f468:	21000804 	addi	r4,r4,32
 100f46c:	01404034 	movhi	r5,256
 100f470:	29400804 	addi	r5,r5,32
 100f474:	01804034 	movhi	r6,256
 100f478:	31806e04 	addi	r6,r6,440
 100f47c:	100f4b80 	call	100f4b8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100f480:	010040b4 	movhi	r4,258
 100f484:	21200404 	addi	r4,r4,-32752
 100f488:	014040b4 	movhi	r5,258
 100f48c:	29600404 	addi	r5,r5,-32752
 100f490:	018040b4 	movhi	r6,258
 100f494:	31a24504 	addi	r6,r6,-30444
 100f498:	100f4b80 	call	100f4b8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100f49c:	10157ec0 	call	10157ec <alt_dcache_flush_all>
  alt_icache_flush_all();
 100f4a0:	1015aa00 	call	1015aa0 <alt_icache_flush_all>
}
 100f4a4:	e037883a 	mov	sp,fp
 100f4a8:	dfc00117 	ldw	ra,4(sp)
 100f4ac:	df000017 	ldw	fp,0(sp)
 100f4b0:	dec00204 	addi	sp,sp,8
 100f4b4:	f800283a 	ret

0100f4b8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100f4b8:	defffc04 	addi	sp,sp,-16
 100f4bc:	df000315 	stw	fp,12(sp)
 100f4c0:	df000304 	addi	fp,sp,12
 100f4c4:	e13ffd15 	stw	r4,-12(fp)
 100f4c8:	e17ffe15 	stw	r5,-8(fp)
 100f4cc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100f4d0:	e0fffe17 	ldw	r3,-8(fp)
 100f4d4:	e0bffd17 	ldw	r2,-12(fp)
 100f4d8:	18800e26 	beq	r3,r2,100f514 <alt_load_section+0x5c>
  {
    while( to != end )
 100f4dc:	00000a06 	br	100f508 <alt_load_section+0x50>
    {
      *to++ = *from++;
 100f4e0:	e0bffd17 	ldw	r2,-12(fp)
 100f4e4:	10c00017 	ldw	r3,0(r2)
 100f4e8:	e0bffe17 	ldw	r2,-8(fp)
 100f4ec:	10c00015 	stw	r3,0(r2)
 100f4f0:	e0bffe17 	ldw	r2,-8(fp)
 100f4f4:	10800104 	addi	r2,r2,4
 100f4f8:	e0bffe15 	stw	r2,-8(fp)
 100f4fc:	e0bffd17 	ldw	r2,-12(fp)
 100f500:	10800104 	addi	r2,r2,4
 100f504:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100f508:	e0fffe17 	ldw	r3,-8(fp)
 100f50c:	e0bfff17 	ldw	r2,-4(fp)
 100f510:	18bff31e 	bne	r3,r2,100f4e0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 100f514:	e037883a 	mov	sp,fp
 100f518:	df000017 	ldw	fp,0(sp)
 100f51c:	dec00104 	addi	sp,sp,4
 100f520:	f800283a 	ret

0100f524 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100f524:	defff804 	addi	sp,sp,-32
 100f528:	dfc00715 	stw	ra,28(sp)
 100f52c:	df000615 	stw	fp,24(sp)
 100f530:	df000604 	addi	fp,sp,24
 100f534:	e13ffc15 	stw	r4,-16(fp)
 100f538:	e17ffd15 	stw	r5,-12(fp)
 100f53c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100f540:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100f544:	e0bffc17 	ldw	r2,-16(fp)
 100f548:	1004803a 	cmplt	r2,r2,zero
 100f54c:	1000081e 	bne	r2,zero,100f570 <lseek+0x4c>
 100f550:	e0bffc17 	ldw	r2,-16(fp)
 100f554:	10800324 	muli	r2,r2,12
 100f558:	1007883a 	mov	r3,r2
 100f55c:	008040b4 	movhi	r2,258
 100f560:	10a45e04 	addi	r2,r2,-28296
 100f564:	1887883a 	add	r3,r3,r2
 100f568:	e0ffff15 	stw	r3,-4(fp)
 100f56c:	00000106 	br	100f574 <lseek+0x50>
 100f570:	e03fff15 	stw	zero,-4(fp)
 100f574:	e0bfff17 	ldw	r2,-4(fp)
 100f578:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 100f57c:	e0bffb17 	ldw	r2,-20(fp)
 100f580:	1005003a 	cmpeq	r2,r2,zero
 100f584:	1000111e 	bne	r2,zero,100f5cc <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100f588:	e0bffb17 	ldw	r2,-20(fp)
 100f58c:	10800017 	ldw	r2,0(r2)
 100f590:	10800717 	ldw	r2,28(r2)
 100f594:	1005003a 	cmpeq	r2,r2,zero
 100f598:	1000091e 	bne	r2,zero,100f5c0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100f59c:	e0bffb17 	ldw	r2,-20(fp)
 100f5a0:	10800017 	ldw	r2,0(r2)
 100f5a4:	10800717 	ldw	r2,28(r2)
 100f5a8:	e13ffb17 	ldw	r4,-20(fp)
 100f5ac:	e17ffd17 	ldw	r5,-12(fp)
 100f5b0:	e1bffe17 	ldw	r6,-8(fp)
 100f5b4:	103ee83a 	callr	r2
 100f5b8:	e0bffa15 	stw	r2,-24(fp)
 100f5bc:	00000506 	br	100f5d4 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100f5c0:	00bfde84 	movi	r2,-134
 100f5c4:	e0bffa15 	stw	r2,-24(fp)
 100f5c8:	00000206 	br	100f5d4 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 100f5cc:	00bfebc4 	movi	r2,-81
 100f5d0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 100f5d4:	e0bffa17 	ldw	r2,-24(fp)
 100f5d8:	1004403a 	cmpge	r2,r2,zero
 100f5dc:	1000071e 	bne	r2,zero,100f5fc <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 100f5e0:	100f6140 	call	100f614 <alt_get_errno>
 100f5e4:	1007883a 	mov	r3,r2
 100f5e8:	e0bffa17 	ldw	r2,-24(fp)
 100f5ec:	0085c83a 	sub	r2,zero,r2
 100f5f0:	18800015 	stw	r2,0(r3)
    rc = -1;
 100f5f4:	00bfffc4 	movi	r2,-1
 100f5f8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100f5fc:	e0bffa17 	ldw	r2,-24(fp)
}
 100f600:	e037883a 	mov	sp,fp
 100f604:	dfc00117 	ldw	ra,4(sp)
 100f608:	df000017 	ldw	fp,0(sp)
 100f60c:	dec00204 	addi	sp,sp,8
 100f610:	f800283a 	ret

0100f614 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100f614:	defffd04 	addi	sp,sp,-12
 100f618:	dfc00215 	stw	ra,8(sp)
 100f61c:	df000115 	stw	fp,4(sp)
 100f620:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100f624:	008040b4 	movhi	r2,258
 100f628:	10a90304 	addi	r2,r2,-23540
 100f62c:	10800017 	ldw	r2,0(r2)
 100f630:	1005003a 	cmpeq	r2,r2,zero
 100f634:	1000061e 	bne	r2,zero,100f650 <alt_get_errno+0x3c>
 100f638:	008040b4 	movhi	r2,258
 100f63c:	10a90304 	addi	r2,r2,-23540
 100f640:	10800017 	ldw	r2,0(r2)
 100f644:	103ee83a 	callr	r2
 100f648:	e0bfff15 	stw	r2,-4(fp)
 100f64c:	00000306 	br	100f65c <alt_get_errno+0x48>
 100f650:	008040b4 	movhi	r2,258
 100f654:	10afd104 	addi	r2,r2,-16572
 100f658:	e0bfff15 	stw	r2,-4(fp)
 100f65c:	e0bfff17 	ldw	r2,-4(fp)
}
 100f660:	e037883a 	mov	sp,fp
 100f664:	dfc00117 	ldw	ra,4(sp)
 100f668:	df000017 	ldw	fp,0(sp)
 100f66c:	dec00204 	addi	sp,sp,8
 100f670:	f800283a 	ret

0100f674 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100f674:	defffd04 	addi	sp,sp,-12
 100f678:	dfc00215 	stw	ra,8(sp)
 100f67c:	df000115 	stw	fp,4(sp)
 100f680:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100f684:	0009883a 	mov	r4,zero
 100f688:	100fb3c0 	call	100fb3c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100f68c:	100fb700 	call	100fb70 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100f690:	010040b4 	movhi	r4,258
 100f694:	2121f604 	addi	r4,r4,-30760
 100f698:	014040b4 	movhi	r5,258
 100f69c:	2961f604 	addi	r5,r5,-30760
 100f6a0:	018040b4 	movhi	r6,258
 100f6a4:	31a1f604 	addi	r6,r6,-30760
 100f6a8:	1015b940 	call	1015b94 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100f6ac:	10159440 	call	1015944 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100f6b0:	01004074 	movhi	r4,257
 100f6b4:	21166a04 	addi	r4,r4,22952
 100f6b8:	10165340 	call	1016534 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100f6bc:	d126db17 	ldw	r4,-25748(gp)
 100f6c0:	d166dc17 	ldw	r5,-25744(gp)
 100f6c4:	d1a6dd17 	ldw	r6,-25740(gp)
 100f6c8:	10003840 	call	1000384 <main>
 100f6cc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100f6d0:	01000044 	movi	r4,1
 100f6d4:	100f05c0 	call	100f05c <close>
  exit (result);
 100f6d8:	e13fff17 	ldw	r4,-4(fp)
 100f6dc:	10165480 	call	1016548 <exit>

0100f6e0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100f6e0:	defffe04 	addi	sp,sp,-8
 100f6e4:	df000115 	stw	fp,4(sp)
 100f6e8:	df000104 	addi	fp,sp,4
 100f6ec:	e13fff15 	stw	r4,-4(fp)
}
 100f6f0:	e037883a 	mov	sp,fp
 100f6f4:	df000017 	ldw	fp,0(sp)
 100f6f8:	dec00104 	addi	sp,sp,4
 100f6fc:	f800283a 	ret

0100f700 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100f700:	defffe04 	addi	sp,sp,-8
 100f704:	df000115 	stw	fp,4(sp)
 100f708:	df000104 	addi	fp,sp,4
 100f70c:	e13fff15 	stw	r4,-4(fp)
}
 100f710:	e037883a 	mov	sp,fp
 100f714:	df000017 	ldw	fp,0(sp)
 100f718:	dec00104 	addi	sp,sp,4
 100f71c:	f800283a 	ret

0100f720 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100f720:	defff704 	addi	sp,sp,-36
 100f724:	dfc00815 	stw	ra,32(sp)
 100f728:	df000715 	stw	fp,28(sp)
 100f72c:	df000704 	addi	fp,sp,28
 100f730:	e13ffb15 	stw	r4,-20(fp)
 100f734:	e17ffc15 	stw	r5,-16(fp)
 100f738:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100f73c:	e0bffb17 	ldw	r2,-20(fp)
 100f740:	1004803a 	cmplt	r2,r2,zero
 100f744:	1000081e 	bne	r2,zero,100f768 <read+0x48>
 100f748:	e0bffb17 	ldw	r2,-20(fp)
 100f74c:	10800324 	muli	r2,r2,12
 100f750:	1007883a 	mov	r3,r2
 100f754:	008040b4 	movhi	r2,258
 100f758:	10a45e04 	addi	r2,r2,-28296
 100f75c:	1887883a 	add	r3,r3,r2
 100f760:	e0ffff15 	stw	r3,-4(fp)
 100f764:	00000106 	br	100f76c <read+0x4c>
 100f768:	e03fff15 	stw	zero,-4(fp)
 100f76c:	e0bfff17 	ldw	r2,-4(fp)
 100f770:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100f774:	e0bffa17 	ldw	r2,-24(fp)
 100f778:	1005003a 	cmpeq	r2,r2,zero
 100f77c:	1000241e 	bne	r2,zero,100f810 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100f780:	e0bffa17 	ldw	r2,-24(fp)
 100f784:	10800217 	ldw	r2,8(r2)
 100f788:	108000cc 	andi	r2,r2,3
 100f78c:	10800060 	cmpeqi	r2,r2,1
 100f790:	10001a1e 	bne	r2,zero,100f7fc <read+0xdc>
 100f794:	e0bffa17 	ldw	r2,-24(fp)
 100f798:	10800017 	ldw	r2,0(r2)
 100f79c:	10800517 	ldw	r2,20(r2)
 100f7a0:	1005003a 	cmpeq	r2,r2,zero
 100f7a4:	1000151e 	bne	r2,zero,100f7fc <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100f7a8:	e0bffa17 	ldw	r2,-24(fp)
 100f7ac:	10800017 	ldw	r2,0(r2)
 100f7b0:	10800517 	ldw	r2,20(r2)
 100f7b4:	e17ffc17 	ldw	r5,-16(fp)
 100f7b8:	e1bffd17 	ldw	r6,-12(fp)
 100f7bc:	e13ffa17 	ldw	r4,-24(fp)
 100f7c0:	103ee83a 	callr	r2
 100f7c4:	e0bff915 	stw	r2,-28(fp)
 100f7c8:	e0bff917 	ldw	r2,-28(fp)
 100f7cc:	1004403a 	cmpge	r2,r2,zero
 100f7d0:	1000071e 	bne	r2,zero,100f7f0 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 100f7d4:	100f8400 	call	100f840 <alt_get_errno>
 100f7d8:	e0fff917 	ldw	r3,-28(fp)
 100f7dc:	00c7c83a 	sub	r3,zero,r3
 100f7e0:	10c00015 	stw	r3,0(r2)
          return -1;
 100f7e4:	00bfffc4 	movi	r2,-1
 100f7e8:	e0bffe15 	stw	r2,-8(fp)
 100f7ec:	00000e06 	br	100f828 <read+0x108>
        }
        return rval;
 100f7f0:	e0bff917 	ldw	r2,-28(fp)
 100f7f4:	e0bffe15 	stw	r2,-8(fp)
 100f7f8:	00000b06 	br	100f828 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100f7fc:	100f8400 	call	100f840 <alt_get_errno>
 100f800:	1007883a 	mov	r3,r2
 100f804:	00800344 	movi	r2,13
 100f808:	18800015 	stw	r2,0(r3)
 100f80c:	00000406 	br	100f820 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100f810:	100f8400 	call	100f840 <alt_get_errno>
 100f814:	1007883a 	mov	r3,r2
 100f818:	00801444 	movi	r2,81
 100f81c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100f820:	00bfffc4 	movi	r2,-1
 100f824:	e0bffe15 	stw	r2,-8(fp)
 100f828:	e0bffe17 	ldw	r2,-8(fp)
}
 100f82c:	e037883a 	mov	sp,fp
 100f830:	dfc00117 	ldw	ra,4(sp)
 100f834:	df000017 	ldw	fp,0(sp)
 100f838:	dec00204 	addi	sp,sp,8
 100f83c:	f800283a 	ret

0100f840 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100f840:	defffd04 	addi	sp,sp,-12
 100f844:	dfc00215 	stw	ra,8(sp)
 100f848:	df000115 	stw	fp,4(sp)
 100f84c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100f850:	008040b4 	movhi	r2,258
 100f854:	10a90304 	addi	r2,r2,-23540
 100f858:	10800017 	ldw	r2,0(r2)
 100f85c:	1005003a 	cmpeq	r2,r2,zero
 100f860:	1000061e 	bne	r2,zero,100f87c <alt_get_errno+0x3c>
 100f864:	008040b4 	movhi	r2,258
 100f868:	10a90304 	addi	r2,r2,-23540
 100f86c:	10800017 	ldw	r2,0(r2)
 100f870:	103ee83a 	callr	r2
 100f874:	e0bfff15 	stw	r2,-4(fp)
 100f878:	00000306 	br	100f888 <alt_get_errno+0x48>
 100f87c:	008040b4 	movhi	r2,258
 100f880:	10afd104 	addi	r2,r2,-16572
 100f884:	e0bfff15 	stw	r2,-4(fp)
 100f888:	e0bfff17 	ldw	r2,-4(fp)
}
 100f88c:	e037883a 	mov	sp,fp
 100f890:	dfc00117 	ldw	ra,4(sp)
 100f894:	df000017 	ldw	fp,0(sp)
 100f898:	dec00204 	addi	sp,sp,8
 100f89c:	f800283a 	ret

0100f8a0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100f8a0:	defffe04 	addi	sp,sp,-8
 100f8a4:	df000115 	stw	fp,4(sp)
 100f8a8:	df000104 	addi	fp,sp,4
 100f8ac:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100f8b0:	e0bfff17 	ldw	r2,-4(fp)
 100f8b4:	108000d0 	cmplti	r2,r2,3
 100f8b8:	10000d1e 	bne	r2,zero,100f8f0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 100f8bc:	e0bfff17 	ldw	r2,-4(fp)
 100f8c0:	00c040b4 	movhi	r3,258
 100f8c4:	18e45e04 	addi	r3,r3,-28296
 100f8c8:	10800324 	muli	r2,r2,12
 100f8cc:	10c5883a 	add	r2,r2,r3
 100f8d0:	10800204 	addi	r2,r2,8
 100f8d4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100f8d8:	e0bfff17 	ldw	r2,-4(fp)
 100f8dc:	00c040b4 	movhi	r3,258
 100f8e0:	18e45e04 	addi	r3,r3,-28296
 100f8e4:	10800324 	muli	r2,r2,12
 100f8e8:	10c5883a 	add	r2,r2,r3
 100f8ec:	10000015 	stw	zero,0(r2)
  }
}
 100f8f0:	e037883a 	mov	sp,fp
 100f8f4:	df000017 	ldw	fp,0(sp)
 100f8f8:	dec00104 	addi	sp,sp,4
 100f8fc:	f800283a 	ret

0100f900 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100f900:	defff804 	addi	sp,sp,-32
 100f904:	df000715 	stw	fp,28(sp)
 100f908:	df000704 	addi	fp,sp,28
 100f90c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f910:	0005303a 	rdctl	r2,status
 100f914:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f918:	e0fffb17 	ldw	r3,-20(fp)
 100f91c:	00bfff84 	movi	r2,-2
 100f920:	1884703a 	and	r2,r3,r2
 100f924:	1001703a 	wrctl	status,r2
  
  return context;
 100f928:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100f92c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100f930:	d0a00d17 	ldw	r2,-32716(gp)
 100f934:	10c000c4 	addi	r3,r2,3
 100f938:	00bfff04 	movi	r2,-4
 100f93c:	1884703a 	and	r2,r3,r2
 100f940:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100f944:	d0e00d17 	ldw	r3,-32716(gp)
 100f948:	e0bffe17 	ldw	r2,-8(fp)
 100f94c:	1887883a 	add	r3,r3,r2
 100f950:	00806034 	movhi	r2,384
 100f954:	10800004 	addi	r2,r2,0
 100f958:	10c0072e 	bgeu	r2,r3,100f978 <sbrk+0x78>
 100f95c:	e0bffd17 	ldw	r2,-12(fp)
 100f960:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f964:	e0bffa17 	ldw	r2,-24(fp)
 100f968:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100f96c:	00bfffc4 	movi	r2,-1
 100f970:	e0bfff15 	stw	r2,-4(fp)
 100f974:	00000c06 	br	100f9a8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100f978:	d0a00d17 	ldw	r2,-32716(gp)
 100f97c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100f980:	d0e00d17 	ldw	r3,-32716(gp)
 100f984:	e0bffe17 	ldw	r2,-8(fp)
 100f988:	1885883a 	add	r2,r3,r2
 100f98c:	d0a00d15 	stw	r2,-32716(gp)
 100f990:	e0bffd17 	ldw	r2,-12(fp)
 100f994:	e0bff915 	stw	r2,-28(fp)
 100f998:	e0bff917 	ldw	r2,-28(fp)
 100f99c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100f9a0:	e0bffc17 	ldw	r2,-16(fp)
 100f9a4:	e0bfff15 	stw	r2,-4(fp)
 100f9a8:	e0bfff17 	ldw	r2,-4(fp)
} 
 100f9ac:	e037883a 	mov	sp,fp
 100f9b0:	df000017 	ldw	fp,0(sp)
 100f9b4:	dec00104 	addi	sp,sp,4
 100f9b8:	f800283a 	ret

0100f9bc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100f9bc:	defff704 	addi	sp,sp,-36
 100f9c0:	dfc00815 	stw	ra,32(sp)
 100f9c4:	df000715 	stw	fp,28(sp)
 100f9c8:	df000704 	addi	fp,sp,28
 100f9cc:	e13ffb15 	stw	r4,-20(fp)
 100f9d0:	e17ffc15 	stw	r5,-16(fp)
 100f9d4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100f9d8:	e0bffb17 	ldw	r2,-20(fp)
 100f9dc:	1004803a 	cmplt	r2,r2,zero
 100f9e0:	1000081e 	bne	r2,zero,100fa04 <write+0x48>
 100f9e4:	e0bffb17 	ldw	r2,-20(fp)
 100f9e8:	10800324 	muli	r2,r2,12
 100f9ec:	1007883a 	mov	r3,r2
 100f9f0:	008040b4 	movhi	r2,258
 100f9f4:	10a45e04 	addi	r2,r2,-28296
 100f9f8:	1887883a 	add	r3,r3,r2
 100f9fc:	e0ffff15 	stw	r3,-4(fp)
 100fa00:	00000106 	br	100fa08 <write+0x4c>
 100fa04:	e03fff15 	stw	zero,-4(fp)
 100fa08:	e0bfff17 	ldw	r2,-4(fp)
 100fa0c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100fa10:	e0bffa17 	ldw	r2,-24(fp)
 100fa14:	1005003a 	cmpeq	r2,r2,zero
 100fa18:	1000241e 	bne	r2,zero,100faac <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100fa1c:	e0bffa17 	ldw	r2,-24(fp)
 100fa20:	10800217 	ldw	r2,8(r2)
 100fa24:	108000cc 	andi	r2,r2,3
 100fa28:	1005003a 	cmpeq	r2,r2,zero
 100fa2c:	10001a1e 	bne	r2,zero,100fa98 <write+0xdc>
 100fa30:	e0bffa17 	ldw	r2,-24(fp)
 100fa34:	10800017 	ldw	r2,0(r2)
 100fa38:	10800617 	ldw	r2,24(r2)
 100fa3c:	1005003a 	cmpeq	r2,r2,zero
 100fa40:	1000151e 	bne	r2,zero,100fa98 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100fa44:	e0bffa17 	ldw	r2,-24(fp)
 100fa48:	10800017 	ldw	r2,0(r2)
 100fa4c:	10800617 	ldw	r2,24(r2)
 100fa50:	e17ffc17 	ldw	r5,-16(fp)
 100fa54:	e1bffd17 	ldw	r6,-12(fp)
 100fa58:	e13ffa17 	ldw	r4,-24(fp)
 100fa5c:	103ee83a 	callr	r2
 100fa60:	e0bff915 	stw	r2,-28(fp)
 100fa64:	e0bff917 	ldw	r2,-28(fp)
 100fa68:	1004403a 	cmpge	r2,r2,zero
 100fa6c:	1000071e 	bne	r2,zero,100fa8c <write+0xd0>
      {
        ALT_ERRNO = -rval;
 100fa70:	100fadc0 	call	100fadc <alt_get_errno>
 100fa74:	e0fff917 	ldw	r3,-28(fp)
 100fa78:	00c7c83a 	sub	r3,zero,r3
 100fa7c:	10c00015 	stw	r3,0(r2)
        return -1;
 100fa80:	00bfffc4 	movi	r2,-1
 100fa84:	e0bffe15 	stw	r2,-8(fp)
 100fa88:	00000e06 	br	100fac4 <write+0x108>
      }
      return rval;
 100fa8c:	e0bff917 	ldw	r2,-28(fp)
 100fa90:	e0bffe15 	stw	r2,-8(fp)
 100fa94:	00000b06 	br	100fac4 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100fa98:	100fadc0 	call	100fadc <alt_get_errno>
 100fa9c:	1007883a 	mov	r3,r2
 100faa0:	00800344 	movi	r2,13
 100faa4:	18800015 	stw	r2,0(r3)
 100faa8:	00000406 	br	100fabc <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100faac:	100fadc0 	call	100fadc <alt_get_errno>
 100fab0:	1007883a 	mov	r3,r2
 100fab4:	00801444 	movi	r2,81
 100fab8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100fabc:	00bfffc4 	movi	r2,-1
 100fac0:	e0bffe15 	stw	r2,-8(fp)
 100fac4:	e0bffe17 	ldw	r2,-8(fp)
}
 100fac8:	e037883a 	mov	sp,fp
 100facc:	dfc00117 	ldw	ra,4(sp)
 100fad0:	df000017 	ldw	fp,0(sp)
 100fad4:	dec00204 	addi	sp,sp,8
 100fad8:	f800283a 	ret

0100fadc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100fadc:	defffd04 	addi	sp,sp,-12
 100fae0:	dfc00215 	stw	ra,8(sp)
 100fae4:	df000115 	stw	fp,4(sp)
 100fae8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100faec:	008040b4 	movhi	r2,258
 100faf0:	10a90304 	addi	r2,r2,-23540
 100faf4:	10800017 	ldw	r2,0(r2)
 100faf8:	1005003a 	cmpeq	r2,r2,zero
 100fafc:	1000061e 	bne	r2,zero,100fb18 <alt_get_errno+0x3c>
 100fb00:	008040b4 	movhi	r2,258
 100fb04:	10a90304 	addi	r2,r2,-23540
 100fb08:	10800017 	ldw	r2,0(r2)
 100fb0c:	103ee83a 	callr	r2
 100fb10:	e0bfff15 	stw	r2,-4(fp)
 100fb14:	00000306 	br	100fb24 <alt_get_errno+0x48>
 100fb18:	008040b4 	movhi	r2,258
 100fb1c:	10afd104 	addi	r2,r2,-16572
 100fb20:	e0bfff15 	stw	r2,-4(fp)
 100fb24:	e0bfff17 	ldw	r2,-4(fp)
}
 100fb28:	e037883a 	mov	sp,fp
 100fb2c:	dfc00117 	ldw	ra,4(sp)
 100fb30:	df000017 	ldw	fp,0(sp)
 100fb34:	dec00204 	addi	sp,sp,8
 100fb38:	f800283a 	ret

0100fb3c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100fb3c:	defffd04 	addi	sp,sp,-12
 100fb40:	dfc00215 	stw	ra,8(sp)
 100fb44:	df000115 	stw	fp,4(sp)
 100fb48:	df000104 	addi	fp,sp,4
 100fb4c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 100fb50:	10162340 	call	1016234 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100fb54:	00800044 	movi	r2,1
 100fb58:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100fb5c:	e037883a 	mov	sp,fp
 100fb60:	dfc00117 	ldw	ra,4(sp)
 100fb64:	df000017 	ldw	fp,0(sp)
 100fb68:	dec00204 	addi	sp,sp,8
 100fb6c:	f800283a 	ret

0100fb70 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100fb70:	defffe04 	addi	sp,sp,-8
 100fb74:	dfc00115 	stw	ra,4(sp)
 100fb78:	df000015 	stw	fp,0(sp)
 100fb7c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 100fb80:	01043804 	movi	r4,4320
 100fb84:	000b883a 	mov	r5,zero
 100fb88:	018000c4 	movi	r6,3
 100fb8c:	01c0fa04 	movi	r7,1000
 100fb90:	1014d480 	call	1014d48 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 100fb94:	010040b4 	movhi	r4,258
 100fb98:	2124c804 	addi	r4,r4,-27872
 100fb9c:	000b883a 	mov	r5,zero
 100fba0:	000d883a 	mov	r6,zero
 100fba4:	10143740 	call	1014374 <altera_avalon_jtag_uart_init>
 100fba8:	010040b4 	movhi	r4,258
 100fbac:	2124be04 	addi	r4,r4,-27912
 100fbb0:	100fbf80 	call	100fbf8 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 100fbb4:	010040b4 	movhi	r4,258
 100fbb8:	2128d604 	addi	r4,r4,-23720
 100fbbc:	1014e800 	call	1014e80 <alt_up_character_lcd_init>
 100fbc0:	010040b4 	movhi	r4,258
 100fbc4:	2128d604 	addi	r4,r4,-23720
 100fbc8:	100fbf80 	call	100fbf8 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
 100fbcc:	010040b4 	movhi	r4,258
 100fbd0:	2128e104 	addi	r4,r4,-23676
 100fbd4:	100fbf80 	call	100fbf8 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 100fbd8:	010040b4 	movhi	r4,258
 100fbdc:	2128ec04 	addi	r4,r4,-23632
 100fbe0:	100fbf80 	call	100fbf8 <alt_dev_reg>
}
 100fbe4:	e037883a 	mov	sp,fp
 100fbe8:	dfc00117 	ldw	ra,4(sp)
 100fbec:	df000017 	ldw	fp,0(sp)
 100fbf0:	dec00204 	addi	sp,sp,8
 100fbf4:	f800283a 	ret

0100fbf8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100fbf8:	defffd04 	addi	sp,sp,-12
 100fbfc:	dfc00215 	stw	ra,8(sp)
 100fc00:	df000115 	stw	fp,4(sp)
 100fc04:	df000104 	addi	fp,sp,4
 100fc08:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100fc0c:	e13fff17 	ldw	r4,-4(fp)
 100fc10:	014040b4 	movhi	r5,258
 100fc14:	29690004 	addi	r5,r5,-23552
 100fc18:	10158300 	call	1015830 <alt_dev_llist_insert>
}
 100fc1c:	e037883a 	mov	sp,fp
 100fc20:	dfc00117 	ldw	ra,4(sp)
 100fc24:	df000017 	ldw	fp,0(sp)
 100fc28:	dec00204 	addi	sp,sp,8
 100fc2c:	f800283a 	ret

0100fc30 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset);

bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
 100fc30:	defffa04 	addi	sp,sp,-24
 100fc34:	dfc00515 	stw	ra,20(sp)
 100fc38:	df000415 	stw	fp,16(sp)
 100fc3c:	df000404 	addi	fp,sp,16
 100fc40:	e13ffe15 	stw	r4,-8(fp)
 100fc44:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 100fc48:	e03ffd15 	stw	zero,-12(fp)

	if (alt_up_sd_card_is_Present()) {
 100fc4c:	1012a540 	call	1012a54 <alt_up_sd_card_is_Present>
 100fc50:	1005003a 	cmpeq	r2,r2,zero
 100fc54:	1000221e 	bne	r2,zero,100fce0 <Write_Sector_Data+0xb0>
		short int reg_state = 0xff;
 100fc58:	00803fc4 	movi	r2,255
 100fc5c:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 100fc60:	d0a6e417 	ldw	r2,-25712(gp)
 100fc64:	1009883a 	mov	r4,r2
 100fc68:	e0fffe17 	ldw	r3,-8(fp)
 100fc6c:	e0bfff17 	ldw	r2,-4(fp)
 100fc70:	1885883a 	add	r2,r3,r2
 100fc74:	1006927a 	slli	r3,r2,9
 100fc78:	2005883a 	mov	r2,r4
 100fc7c:	10c00035 	stwio	r3,0(r2)
				(sector_index + partition_offset)*512);
		IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
 100fc80:	d0a6e317 	ldw	r2,-25716(gp)
 100fc84:	1007883a 	mov	r3,r2
 100fc88:	00800604 	movi	r2,24
 100fc8c:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 100fc90:	d0a6e017 	ldw	r2,-25728(gp)
 100fc94:	1080002b 	ldhuio	r2,0(r2)
 100fc98:	e0bffc0d 	sth	r2,-16(fp)
		} while ((reg_state & 0x04) != 0);
 100fc9c:	e0bffc0b 	ldhu	r2,-16(fp)
 100fca0:	10bfffcc 	andi	r2,r2,65535
 100fca4:	1080010c 	andi	r2,r2,4
 100fca8:	1004c03a 	cmpne	r2,r2,zero
 100fcac:	103ff81e 	bne	r2,zero,100fc90 <Write_Sector_Data+0x60>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
 100fcb0:	e0bffc0b 	ldhu	r2,-16(fp)
 100fcb4:	10bfffcc 	andi	r2,r2,65535
 100fcb8:	1080040c 	andi	r2,r2,16
 100fcbc:	1004c03a 	cmpne	r2,r2,zero
 100fcc0:	1000071e 	bne	r2,zero,100fce0 <Write_Sector_Data+0xb0>
			result = true;
 100fcc4:	00800044 	movi	r2,1
 100fcc8:	e0bffd15 	stw	r2,-12(fp)
			current_sector_modified = false;
 100fccc:	d026e915 	stw	zero,-25692(gp)
			current_sector_index = sector_index + partition_offset;
 100fcd0:	e0fffe17 	ldw	r3,-8(fp)
 100fcd4:	e0bfff17 	ldw	r2,-4(fp)
 100fcd8:	1885883a 	add	r2,r3,r2
 100fcdc:	d0a6ea15 	stw	r2,-25688(gp)
		}
	}
	return result;
 100fce0:	e0bffd17 	ldw	r2,-12(fp)
}
 100fce4:	e037883a 	mov	sp,fp
 100fce8:	dfc00117 	ldw	ra,4(sp)
 100fcec:	df000017 	ldw	fp,0(sp)
 100fcf0:	dec00204 	addi	sp,sp,8
 100fcf4:	f800283a 	ret

0100fcf8 <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
 100fcf8:	defffd04 	addi	sp,sp,-12
 100fcfc:	dfc00215 	stw	ra,8(sp)
 100fd00:	df000115 	stw	fp,4(sp)
 100fd04:	df000104 	addi	fp,sp,4
	bool result = true;
 100fd08:	00800044 	movi	r2,1
 100fd0c:	e0bfff15 	stw	r2,-4(fp)
	if (current_sector_modified) {
 100fd10:	d0a6e917 	ldw	r2,-25692(gp)
 100fd14:	1005003a 	cmpeq	r2,r2,zero
 100fd18:	1000051e 	bne	r2,zero,100fd30 <Save_Modified_Sector+0x38>
		result = Write_Sector_Data(current_sector_index, 0);
 100fd1c:	d0a6ea17 	ldw	r2,-25688(gp)
 100fd20:	1009883a 	mov	r4,r2
 100fd24:	000b883a 	mov	r5,zero
 100fd28:	100fc300 	call	100fc30 <Write_Sector_Data>
 100fd2c:	e0bfff15 	stw	r2,-4(fp)
	}
	return result;
 100fd30:	e0bfff17 	ldw	r2,-4(fp)
}
 100fd34:	e037883a 	mov	sp,fp
 100fd38:	dfc00117 	ldw	ra,4(sp)
 100fd3c:	df000017 	ldw	fp,0(sp)
 100fd40:	dec00204 	addi	sp,sp,8
 100fd44:	f800283a 	ret

0100fd48 <Read_Sector_Data>:

bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 100fd48:	defff904 	addi	sp,sp,-28
 100fd4c:	dfc00615 	stw	ra,24(sp)
 100fd50:	df000515 	stw	fp,20(sp)
 100fd54:	df000504 	addi	fp,sp,20
 100fd58:	e13ffd15 	stw	r4,-12(fp)
 100fd5c:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 100fd60:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
 100fd64:	1012a540 	call	1012a54 <alt_up_sd_card_is_Present>
 100fd68:	1005003a 	cmpeq	r2,r2,zero
 100fd6c:	10002d1e 	bne	r2,zero,100fe24 <Read_Sector_Data+0xdc>
		short int reg_state = 0xff;
 100fd70:	00803fc4 	movi	r2,255
 100fd74:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
 100fd78:	d0a6e917 	ldw	r2,-25692(gp)
 100fd7c:	1005003a 	cmpeq	r2,r2,zero
 100fd80:	1000081e 	bne	r2,zero,100fda4 <Read_Sector_Data+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
 100fd84:	d0a6ea17 	ldw	r2,-25688(gp)
 100fd88:	1009883a 	mov	r4,r2
 100fd8c:	000b883a 	mov	r5,zero
 100fd90:	100fc300 	call	100fc30 <Write_Sector_Data>
 100fd94:	1004c03a 	cmpne	r2,r2,zero
 100fd98:	1000021e 	bne	r2,zero,100fda4 <Read_Sector_Data+0x5c>
				return false;
 100fd9c:	e03fff15 	stw	zero,-4(fp)
 100fda0:	00002206 	br	100fe2c <Read_Sector_Data+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 100fda4:	d0a6e417 	ldw	r2,-25712(gp)
 100fda8:	1009883a 	mov	r4,r2
 100fdac:	e0fffd17 	ldw	r3,-12(fp)
 100fdb0:	e0bffe17 	ldw	r2,-8(fp)
 100fdb4:	1885883a 	add	r2,r3,r2
 100fdb8:	1006927a 	slli	r3,r2,9
 100fdbc:	2005883a 	mov	r2,r4
 100fdc0:	10c00035 	stwio	r3,0(r2)
				(sector_index + partition_offset)*512);
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 100fdc4:	d0a6e317 	ldw	r2,-25716(gp)
 100fdc8:	1007883a 	mov	r3,r2
 100fdcc:	00800444 	movi	r2,17
 100fdd0:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 100fdd4:	d0a6e017 	ldw	r2,-25728(gp)
 100fdd8:	1080002b 	ldhuio	r2,0(r2)
 100fddc:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
 100fde0:	e0bffb0b 	ldhu	r2,-20(fp)
 100fde4:	10bfffcc 	andi	r2,r2,65535
 100fde8:	1080010c 	andi	r2,r2,4
 100fdec:	1004c03a 	cmpne	r2,r2,zero
 100fdf0:	103ff81e 	bne	r2,zero,100fdd4 <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
 100fdf4:	e0bffb0b 	ldhu	r2,-20(fp)
 100fdf8:	10bfffcc 	andi	r2,r2,65535
 100fdfc:	1080040c 	andi	r2,r2,16
 100fe00:	1004c03a 	cmpne	r2,r2,zero
 100fe04:	1000071e 	bne	r2,zero,100fe24 <Read_Sector_Data+0xdc>
			result = true;
 100fe08:	00800044 	movi	r2,1
 100fe0c:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
 100fe10:	d026e915 	stw	zero,-25692(gp)
			current_sector_index = sector_index + partition_offset;
 100fe14:	e0fffd17 	ldw	r3,-12(fp)
 100fe18:	e0bffe17 	ldw	r2,-8(fp)
 100fe1c:	1885883a 	add	r2,r3,r2
 100fe20:	d0a6ea15 	stw	r2,-25688(gp)
		}
	}
	return result;
 100fe24:	e0bffc17 	ldw	r2,-16(fp)
 100fe28:	e0bfff15 	stw	r2,-4(fp)
 100fe2c:	e0bfff17 	ldw	r2,-4(fp)
}
 100fe30:	e037883a 	mov	sp,fp
 100fe34:	dfc00117 	ldw	ra,4(sp)
 100fe38:	df000017 	ldw	fp,0(sp)
 100fe3c:	dec00204 	addi	sp,sp,8
 100fe40:	f800283a 	ret

0100fe44 <get_cluster_flag>:

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
 100fe44:	defffa04 	addi	sp,sp,-24
 100fe48:	dfc00515 	stw	ra,20(sp)
 100fe4c:	df000415 	stw	fp,16(sp)
 100fe50:	df000404 	addi	fp,sp,16
 100fe54:	e13ffd15 	stw	r4,-12(fp)
 100fe58:	e17ffe15 	stw	r5,-8(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
 100fe5c:	e0bffd17 	ldw	r2,-12(fp)
 100fe60:	1006d23a 	srli	r3,r2,8
 100fe64:	d0a6e617 	ldw	r2,-25704(gp)
 100fe68:	1885883a 	add	r2,r3,r2
 100fe6c:	e0bffc15 	stw	r2,-16(fp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
 100fe70:	008040b4 	movhi	r2,258
 100fe74:	10b03404 	addi	r2,r2,-16176
 100fe78:	10c01117 	ldw	r3,68(r2)
 100fe7c:	e0bffc17 	ldw	r2,-16(fp)
 100fe80:	10c5883a 	add	r2,r2,r3
 100fe84:	e0bffc15 	stw	r2,-16(fp)

	if (sector_index != current_sector_index) {
 100fe88:	d0e6ea17 	ldw	r3,-25688(gp)
 100fe8c:	e0bffc17 	ldw	r2,-16(fp)
 100fe90:	10c00726 	beq	r2,r3,100feb0 <get_cluster_flag+0x6c>
		if (Read_Sector_Data(sector_index, 0) == false) {
 100fe94:	e13ffc17 	ldw	r4,-16(fp)
 100fe98:	000b883a 	mov	r5,zero
 100fe9c:	100fd480 	call	100fd48 <Read_Sector_Data>
 100fea0:	1004c03a 	cmpne	r2,r2,zero
 100fea4:	1000021e 	bne	r2,zero,100feb0 <get_cluster_flag+0x6c>
			return false;
 100fea8:	e03fff15 	stw	zero,-4(fp)
 100feac:	00000d06 	br	100fee4 <get_cluster_flag+0xa0>
		}
	}
	*flag =
 100feb0:	d0a6e817 	ldw	r2,-25696(gp)
 100feb4:	10800a17 	ldw	r2,40(r2)
 100feb8:	1007883a 	mov	r3,r2
 100febc:	e0bffd17 	ldw	r2,-12(fp)
 100fec0:	10803fcc 	andi	r2,r2,255
 100fec4:	1085883a 	add	r2,r2,r2
 100fec8:	1885883a 	add	r2,r3,r2
 100fecc:	1080002b 	ldhuio	r2,0(r2)
 100fed0:	1007883a 	mov	r3,r2
 100fed4:	e0bffe17 	ldw	r2,-8(fp)
 100fed8:	10c0000d 	sth	r3,0(r2)
			(unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
	return true;
 100fedc:	00800044 	movi	r2,1
 100fee0:	e0bfff15 	stw	r2,-4(fp)
 100fee4:	e0bfff17 	ldw	r2,-4(fp)
}
 100fee8:	e037883a 	mov	sp,fp
 100feec:	dfc00117 	ldw	ra,4(sp)
 100fef0:	df000017 	ldw	fp,0(sp)
 100fef4:	dec00204 	addi	sp,sp,8
 100fef8:	f800283a 	ret

0100fefc <mark_cluster>:

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
 100fefc:	defff904 	addi	sp,sp,-28
 100ff00:	dfc00615 	stw	ra,24(sp)
 100ff04:	df000515 	stw	fp,20(sp)
 100ff08:	df000504 	addi	fp,sp,20
 100ff0c:	e13ffc15 	stw	r4,-16(fp)
 100ff10:	e1bffe15 	stw	r6,-8(fp)
 100ff14:	e17ffd0d 	sth	r5,-12(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
 100ff18:	e0bffc17 	ldw	r2,-16(fp)
 100ff1c:	1006d23a 	srli	r3,r2,8
 100ff20:	d0a6e617 	ldw	r2,-25704(gp)
 100ff24:	1885883a 	add	r2,r3,r2
 100ff28:	e0bffb15 	stw	r2,-20(fp)

	if (first_fat) {
 100ff2c:	e0bffe17 	ldw	r2,-8(fp)
 100ff30:	1005003a 	cmpeq	r2,r2,zero
 100ff34:	1000071e 	bne	r2,zero,100ff54 <mark_cluster+0x58>
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
 100ff38:	008040b4 	movhi	r2,258
 100ff3c:	10b03404 	addi	r2,r2,-16176
 100ff40:	10c01117 	ldw	r3,68(r2)
 100ff44:	e0bffb17 	ldw	r2,-20(fp)
 100ff48:	10c5883a 	add	r2,r2,r3
 100ff4c:	e0bffb15 	stw	r2,-20(fp)
 100ff50:	00000606 	br	100ff6c <mark_cluster+0x70>
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
 100ff54:	008040b4 	movhi	r2,258
 100ff58:	10b03404 	addi	r2,r2,-16176
 100ff5c:	10c01217 	ldw	r3,72(r2)
 100ff60:	e0bffb17 	ldw	r2,-20(fp)
 100ff64:	10c5883a 	add	r2,r2,r3
 100ff68:	e0bffb15 	stw	r2,-20(fp)
	}

	if (sector_index != current_sector_index) {
 100ff6c:	d0e6ea17 	ldw	r3,-25688(gp)
 100ff70:	e0bffb17 	ldw	r2,-20(fp)
 100ff74:	10c00726 	beq	r2,r3,100ff94 <mark_cluster+0x98>
		if (Read_Sector_Data(sector_index, 0) == false) {
 100ff78:	e13ffb17 	ldw	r4,-20(fp)
 100ff7c:	000b883a 	mov	r5,zero
 100ff80:	100fd480 	call	100fd48 <Read_Sector_Data>
 100ff84:	1004c03a 	cmpne	r2,r2,zero
 100ff88:	1000021e 	bne	r2,zero,100ff94 <mark_cluster+0x98>
			return false;
 100ff8c:	e03fff15 	stw	zero,-4(fp)
 100ff90:	00000d06 	br	100ffc8 <mark_cluster+0xcc>
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
 100ff94:	d0a6e817 	ldw	r2,-25696(gp)
 100ff98:	10800a17 	ldw	r2,40(r2)
 100ff9c:	1007883a 	mov	r3,r2
 100ffa0:	e0bffc17 	ldw	r2,-16(fp)
 100ffa4:	10803fcc 	andi	r2,r2,255
 100ffa8:	1085883a 	add	r2,r2,r2
 100ffac:	1885883a 	add	r2,r3,r2
 100ffb0:	e0fffd0f 	ldh	r3,-12(fp)
 100ffb4:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
 100ffb8:	00800044 	movi	r2,1
 100ffbc:	d0a6e915 	stw	r2,-25692(gp)
	return true;
 100ffc0:	00800044 	movi	r2,1
 100ffc4:	e0bfff15 	stw	r2,-4(fp)
 100ffc8:	e0bfff17 	ldw	r2,-4(fp)
}
 100ffcc:	e037883a 	mov	sp,fp
 100ffd0:	dfc00117 	ldw	ra,4(sp)
 100ffd4:	df000017 	ldw	fp,0(sp)
 100ffd8:	dec00204 	addi	sp,sp,8
 100ffdc:	f800283a 	ret

0100ffe0 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
 100ffe0:	defff704 	addi	sp,sp,-36
 100ffe4:	dfc00815 	stw	ra,32(sp)
 100ffe8:	df000715 	stw	fp,28(sp)
 100ffec:	df000704 	addi	fp,sp,28
	bool result = false;
 100fff0:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data_Attempt_CRC(0, 0)) {
 100fff4:	0009883a 	mov	r4,zero
 100fff8:	000b883a 	mov	r5,zero
 100fffc:	101419c0 	call	101419c <Read_Sector_Data_Attempt_CRC>
 1010000:	1005003a 	cmpeq	r2,r2,zero
 1010004:	10005c1e 	bne	r2,zero,1010178 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
 1010008:	d0a6e817 	ldw	r2,-25696(gp)
 101000c:	10800a17 	ldw	r2,40(r2)
 1010010:	10807f84 	addi	r2,r2,510
 1010014:	1080002b 	ldhuio	r2,0(r2)
 1010018:	10bfffcc 	andi	r2,r2,65535
 101001c:	10a0001c 	xori	r2,r2,32768
 1010020:	10a00004 	addi	r2,r2,-32768
 1010024:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
 1010028:	e0bffd17 	ldw	r2,-12(fp)
 101002c:	10ffffcc 	andi	r3,r2,65535
 1010030:	00aa9554 	movui	r2,43605
 1010034:	1880501e 	bne	r3,r2,1010178 <Check_for_Master_Boot_Record+0x198>
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
 1010038:	e03ffe15 	stw	zero,-8(fp)
 101003c:	00004b06 	br	101016c <Check_for_Master_Boot_Record+0x18c>
				int partition_data_offset = (index * 16) + 0x01be;
 1010040:	e0bffe17 	ldw	r2,-8(fp)
 1010044:	1004913a 	slli	r2,r2,4
 1010048:	10806f84 	addi	r2,r2,446
 101004c:	e0bffa15 	stw	r2,-24(fp)
				char type;

				// Read Partition type
				type =
 1010050:	d0a6e817 	ldw	r2,-25696(gp)
 1010054:	10800a17 	ldw	r2,40(r2)
 1010058:	1007883a 	mov	r3,r2
 101005c:	e0bffa17 	ldw	r2,-24(fp)
 1010060:	1885883a 	add	r2,r3,r2
 1010064:	10800104 	addi	r2,r2,4
 1010068:	10800023 	ldbuio	r2,0(r2)
 101006c:	e0bff905 	stb	r2,-28(fp)
						(unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
 1010070:	e0bff907 	ldb	r2,-28(fp)
 1010074:	10800060 	cmpeqi	r2,r2,1
 1010078:	1000091e 	bne	r2,zero,10100a0 <Check_for_Master_Boot_Record+0xc0>
 101007c:	e0bff907 	ldb	r2,-28(fp)
 1010080:	10800120 	cmpeqi	r2,r2,4
 1010084:	1000061e 	bne	r2,zero,10100a0 <Check_for_Master_Boot_Record+0xc0>
 1010088:	e0bff907 	ldb	r2,-28(fp)
 101008c:	108001a0 	cmpeqi	r2,r2,6
 1010090:	1000031e 	bne	r2,zero,10100a0 <Check_for_Master_Boot_Record+0xc0>
 1010094:	e0bff907 	ldb	r2,-28(fp)
 1010098:	10800398 	cmpnei	r2,r2,14
 101009c:	1000301e 	bne	r2,zero,1010160 <Check_for_Master_Boot_Record+0x180>
					// Get partition offset and size.
					offset =
 10100a0:	d0a6e817 	ldw	r2,-25696(gp)
 10100a4:	10800a17 	ldw	r2,40(r2)
 10100a8:	1007883a 	mov	r3,r2
 10100ac:	e0bffa17 	ldw	r2,-24(fp)
 10100b0:	1885883a 	add	r2,r3,r2
 10100b4:	10800284 	addi	r2,r2,10
 10100b8:	1080002b 	ldhuio	r2,0(r2)
 10100bc:	10bfffcc 	andi	r2,r2,65535
 10100c0:	1008943a 	slli	r4,r2,16
 10100c4:	d0a6e817 	ldw	r2,-25696(gp)
 10100c8:	10800a17 	ldw	r2,40(r2)
 10100cc:	1007883a 	mov	r3,r2
 10100d0:	e0bffa17 	ldw	r2,-24(fp)
 10100d4:	1885883a 	add	r2,r3,r2
 10100d8:	10800204 	addi	r2,r2,8
 10100dc:	1080002b 	ldhuio	r2,0(r2)
 10100e0:	10bfffcc 	andi	r2,r2,65535
 10100e4:	2084b03a 	or	r2,r4,r2
 10100e8:	e0bffc15 	stw	r2,-16(fp)
							(((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size =
 10100ec:	d0a6e817 	ldw	r2,-25696(gp)
 10100f0:	10800a17 	ldw	r2,40(r2)
 10100f4:	1007883a 	mov	r3,r2
 10100f8:	e0bffa17 	ldw	r2,-24(fp)
 10100fc:	1885883a 	add	r2,r3,r2
 1010100:	10800384 	addi	r2,r2,14
 1010104:	1080002b 	ldhuio	r2,0(r2)
 1010108:	10bfffcc 	andi	r2,r2,65535
 101010c:	1008943a 	slli	r4,r2,16
 1010110:	d0a6e817 	ldw	r2,-25696(gp)
 1010114:	10800a17 	ldw	r2,40(r2)
 1010118:	1007883a 	mov	r3,r2
 101011c:	e0bffa17 	ldw	r2,-24(fp)
 1010120:	1885883a 	add	r2,r3,r2
 1010124:	10800304 	addi	r2,r2,12
 1010128:	1080002b 	ldhuio	r2,0(r2)
 101012c:	10bfffcc 	andi	r2,r2,65535
 1010130:	2084b03a 	or	r2,r4,r2
 1010134:	e0bffb15 	stw	r2,-20(fp)
							(((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
 1010138:	e0bffb17 	ldw	r2,-20(fp)
 101013c:	10800050 	cmplti	r2,r2,1
 1010140:	1000071e 	bne	r2,zero,1010160 <Check_for_Master_Boot_Record+0x180>
						result = true;
 1010144:	00800044 	movi	r2,1
 1010148:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
 101014c:	e0bffb17 	ldw	r2,-20(fp)
 1010150:	d0a6e715 	stw	r2,-25700(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
 1010154:	e0bffc17 	ldw	r2,-16(fp)
 1010158:	d0a6e615 	stw	r2,-25704(gp)
						break;
 101015c:	00000606 	br	1010178 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
 1010160:	e0bffe17 	ldw	r2,-8(fp)
 1010164:	10800044 	addi	r2,r2,1
 1010168:	e0bffe15 	stw	r2,-8(fp)
 101016c:	e0bffe17 	ldw	r2,-8(fp)
 1010170:	10800110 	cmplti	r2,r2,4
 1010174:	103fb21e 	bne	r2,zero,1010040 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
 1010178:	e0bfff17 	ldw	r2,-4(fp)
}
 101017c:	e037883a 	mov	sp,fp
 1010180:	dfc00117 	ldw	ra,4(sp)
 1010184:	df000017 	ldw	fp,0(sp)
 1010188:	dec00204 	addi	sp,sp,8
 101018c:	f800283a 	ret

01010190 <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record,
		unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
 1010190:	defff804 	addi	sp,sp,-32
 1010194:	dfc00715 	stw	ra,28(sp)
 1010198:	df000615 	stw	fp,24(sp)
 101019c:	df000604 	addi	fp,sp,24
 10101a0:	e13ffc15 	stw	r4,-16(fp)
 10101a4:	e17ffd15 	stw	r5,-12(fp)
 10101a8:	e1bffe15 	stw	r6,-8(fp)
 10101ac:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
 10101b0:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
 10101b4:	e0bffc17 	ldw	r2,-16(fp)
 10101b8:	108007cc 	andi	r2,r2,31
 10101bc:	1004c03a 	cmpne	r2,r2,zero
 10101c0:	10008e1e 	bne	r2,zero,10103fc <Read_File_Record_At_Offset+0x26c>
 10101c4:	1012a540 	call	1012a54 <alt_up_sd_card_is_Present>
 10101c8:	1005003a 	cmpeq	r2,r2,zero
 10101cc:	10008b1e 	bne	r2,zero,10103fc <Read_File_Record_At_Offset+0x26c>
 10101d0:	d0a6df17 	ldw	r2,-25732(gp)
 10101d4:	1005003a 	cmpeq	r2,r2,zero
 10101d8:	1000881e 	bne	r2,zero,10103fc <Read_File_Record_At_Offset+0x26c>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
 10101dc:	e03ffa15 	stw	zero,-24(fp)
 10101e0:	00001006 	br	1010224 <Read_File_Record_At_Offset+0x94>
			record->name[counter] =
 10101e4:	e17ffa17 	ldw	r5,-24(fp)
 10101e8:	d0a6e817 	ldw	r2,-25696(gp)
 10101ec:	10800a17 	ldw	r2,40(r2)
 10101f0:	1009883a 	mov	r4,r2
 10101f4:	e0fffc17 	ldw	r3,-16(fp)
 10101f8:	e0bffa17 	ldw	r2,-24(fp)
 10101fc:	1885883a 	add	r2,r3,r2
 1010200:	2085883a 	add	r2,r4,r2
 1010204:	10800023 	ldbuio	r2,0(r2)
 1010208:	1007883a 	mov	r3,r2
 101020c:	e0bffd17 	ldw	r2,-12(fp)
 1010210:	1145883a 	add	r2,r2,r5
 1010214:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
 1010218:	e0bffa17 	ldw	r2,-24(fp)
 101021c:	10800044 	addi	r2,r2,1
 1010220:	e0bffa15 	stw	r2,-24(fp)
 1010224:	e0bffa17 	ldw	r2,-24(fp)
 1010228:	10800210 	cmplti	r2,r2,8
 101022c:	103fed1e 	bne	r2,zero,10101e4 <Read_File_Record_At_Offset+0x54>
			record->name[counter] =
					(char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
 1010230:	e03ffa15 	stw	zero,-24(fp)
 1010234:	00001206 	br	1010280 <Read_File_Record_At_Offset+0xf0>
			record->extension[counter] =
 1010238:	e17ffa17 	ldw	r5,-24(fp)
 101023c:	d0a6e817 	ldw	r2,-25696(gp)
 1010240:	10800a17 	ldw	r2,40(r2)
 1010244:	1009883a 	mov	r4,r2
 1010248:	e0fffc17 	ldw	r3,-16(fp)
 101024c:	e0bffa17 	ldw	r2,-24(fp)
 1010250:	1885883a 	add	r2,r3,r2
 1010254:	2085883a 	add	r2,r4,r2
 1010258:	10800204 	addi	r2,r2,8
 101025c:	10800023 	ldbuio	r2,0(r2)
 1010260:	1007883a 	mov	r3,r2
 1010264:	e0bffd17 	ldw	r2,-12(fp)
 1010268:	2885883a 	add	r2,r5,r2
 101026c:	10800204 	addi	r2,r2,8
 1010270:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++) {
			record->name[counter] =
					(char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
 1010274:	e0bffa17 	ldw	r2,-24(fp)
 1010278:	10800044 	addi	r2,r2,1
 101027c:	e0bffa15 	stw	r2,-24(fp)
 1010280:	e0bffa17 	ldw	r2,-24(fp)
 1010284:	108000d0 	cmplti	r2,r2,3
 1010288:	103feb1e 	bne	r2,zero,1010238 <Read_File_Record_At_Offset+0xa8>
			record->extension[counter] =
					(char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}
		record->attributes =
 101028c:	d0a6e817 	ldw	r2,-25696(gp)
 1010290:	10800a17 	ldw	r2,40(r2)
 1010294:	1007883a 	mov	r3,r2
 1010298:	e0bffc17 	ldw	r2,-16(fp)
 101029c:	1885883a 	add	r2,r3,r2
 10102a0:	108002c4 	addi	r2,r2,11
 10102a4:	10800023 	ldbuio	r2,0(r2)
 10102a8:	1007883a 	mov	r3,r2
 10102ac:	e0bffd17 	ldw	r2,-12(fp)
 10102b0:	10c002c5 	stb	r3,11(r2)
				(char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time =
 10102b4:	d0a6e817 	ldw	r2,-25696(gp)
 10102b8:	10800a17 	ldw	r2,40(r2)
 10102bc:	1007883a 	mov	r3,r2
 10102c0:	e0bffc17 	ldw	r2,-16(fp)
 10102c4:	1885883a 	add	r2,r3,r2
 10102c8:	10800384 	addi	r2,r2,14
 10102cc:	1080002b 	ldhuio	r2,0(r2)
 10102d0:	1007883a 	mov	r3,r2
 10102d4:	e0bffd17 	ldw	r2,-12(fp)
 10102d8:	10c0030d 	sth	r3,12(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date =
 10102dc:	d0a6e817 	ldw	r2,-25696(gp)
 10102e0:	10800a17 	ldw	r2,40(r2)
 10102e4:	1007883a 	mov	r3,r2
 10102e8:	e0bffc17 	ldw	r2,-16(fp)
 10102ec:	1885883a 	add	r2,r3,r2
 10102f0:	10800404 	addi	r2,r2,16
 10102f4:	1080002b 	ldhuio	r2,0(r2)
 10102f8:	1007883a 	mov	r3,r2
 10102fc:	e0bffd17 	ldw	r2,-12(fp)
 1010300:	10c0038d 	sth	r3,14(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date =
 1010304:	d0a6e817 	ldw	r2,-25696(gp)
 1010308:	10800a17 	ldw	r2,40(r2)
 101030c:	1007883a 	mov	r3,r2
 1010310:	e0bffc17 	ldw	r2,-16(fp)
 1010314:	1885883a 	add	r2,r3,r2
 1010318:	10800484 	addi	r2,r2,18
 101031c:	1080002b 	ldhuio	r2,0(r2)
 1010320:	1007883a 	mov	r3,r2
 1010324:	e0bffd17 	ldw	r2,-12(fp)
 1010328:	10c0040d 	sth	r3,16(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time =
 101032c:	d0a6e817 	ldw	r2,-25696(gp)
 1010330:	10800a17 	ldw	r2,40(r2)
 1010334:	1007883a 	mov	r3,r2
 1010338:	e0bffc17 	ldw	r2,-16(fp)
 101033c:	1885883a 	add	r2,r3,r2
 1010340:	10800584 	addi	r2,r2,22
 1010344:	1080002b 	ldhuio	r2,0(r2)
 1010348:	1007883a 	mov	r3,r2
 101034c:	e0bffd17 	ldw	r2,-12(fp)
 1010350:	10c0048d 	sth	r3,18(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date =
 1010354:	d0a6e817 	ldw	r2,-25696(gp)
 1010358:	10800a17 	ldw	r2,40(r2)
 101035c:	1007883a 	mov	r3,r2
 1010360:	e0bffc17 	ldw	r2,-16(fp)
 1010364:	1885883a 	add	r2,r3,r2
 1010368:	10800604 	addi	r2,r2,24
 101036c:	1080002b 	ldhuio	r2,0(r2)
 1010370:	1007883a 	mov	r3,r2
 1010374:	e0bffd17 	ldw	r2,-12(fp)
 1010378:	10c0050d 	sth	r3,20(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index =
 101037c:	d0a6e817 	ldw	r2,-25696(gp)
 1010380:	10800a17 	ldw	r2,40(r2)
 1010384:	1007883a 	mov	r3,r2
 1010388:	e0bffc17 	ldw	r2,-16(fp)
 101038c:	1885883a 	add	r2,r3,r2
 1010390:	10800684 	addi	r2,r2,26
 1010394:	1080002b 	ldhuio	r2,0(r2)
 1010398:	1007883a 	mov	r3,r2
 101039c:	e0bffd17 	ldw	r2,-12(fp)
 10103a0:	10c0058d 	sth	r3,22(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes =
 10103a4:	d0a6e817 	ldw	r2,-25696(gp)
 10103a8:	10800a17 	ldw	r2,40(r2)
 10103ac:	1007883a 	mov	r3,r2
 10103b0:	e0bffc17 	ldw	r2,-16(fp)
 10103b4:	1885883a 	add	r2,r3,r2
 10103b8:	10800704 	addi	r2,r2,28
 10103bc:	10800037 	ldwio	r2,0(r2)
 10103c0:	1007883a 	mov	r3,r2
 10103c4:	e0bffd17 	ldw	r2,-12(fp)
 10103c8:	10c00615 	stw	r3,24(r2)
				(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
 10103cc:	e0fffd17 	ldw	r3,-12(fp)
 10103d0:	e0bffe17 	ldw	r2,-8(fp)
 10103d4:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
 10103d8:	e0fffd17 	ldw	r3,-12(fp)
 10103dc:	e0bfff17 	ldw	r2,-4(fp)
 10103e0:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
 10103e4:	e0bffc17 	ldw	r2,-16(fp)
 10103e8:	1007883a 	mov	r3,r2
 10103ec:	e0bffd17 	ldw	r2,-12(fp)
 10103f0:	10c00c0d 	sth	r3,48(r2)
		result = true;
 10103f4:	00800044 	movi	r2,1
 10103f8:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 10103fc:	e0bffb17 	ldw	r2,-20(fp)
}
 1010400:	e037883a 	mov	sp,fp
 1010404:	dfc00117 	ldw	ra,4(sp)
 1010408:	df000017 	ldw	fp,0(sp)
 101040c:	dec00204 	addi	sp,sp,8
 1010410:	f800283a 	ret

01010414 <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
 1010414:	defff904 	addi	sp,sp,-28
 1010418:	dfc00615 	stw	ra,24(sp)
 101041c:	df000515 	stw	fp,20(sp)
 1010420:	df000504 	addi	fp,sp,20
 1010424:	e13ffe15 	stw	r4,-8(fp)
 1010428:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 101042c:	e03ffd15 	stw	zero,-12(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
 1010430:	e0bffe17 	ldw	r2,-8(fp)
 1010434:	108007cc 	andi	r2,r2,31
 1010438:	1004c03a 	cmpne	r2,r2,zero
 101043c:	10009d1e 	bne	r2,zero,10106b4 <Write_File_Record_At_Offset+0x2a0>
 1010440:	1012a540 	call	1012a54 <alt_up_sd_card_is_Present>
 1010444:	1005003a 	cmpeq	r2,r2,zero
 1010448:	10009a1e 	bne	r2,zero,10106b4 <Write_File_Record_At_Offset+0x2a0>
 101044c:	d0a6df17 	ldw	r2,-25732(gp)
 1010450:	1005003a 	cmpeq	r2,r2,zero
 1010454:	1000971e 	bne	r2,zero,10106b4 <Write_File_Record_At_Offset+0x2a0>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
 1010458:	e03ffc15 	stw	zero,-16(fp)
 101045c:	00001e06 	br	10104d8 <Write_File_Record_At_Offset+0xc4>
			short int two_chars = (short int) record->name[counter + 1];
 1010460:	e0bffc17 	ldw	r2,-16(fp)
 1010464:	10c00044 	addi	r3,r2,1
 1010468:	e0bfff17 	ldw	r2,-4(fp)
 101046c:	10c5883a 	add	r2,r2,r3
 1010470:	10800003 	ldbu	r2,0(r2)
 1010474:	10803fcc 	andi	r2,r2,255
 1010478:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars << 8;
 101047c:	e0bffb0f 	ldh	r2,-20(fp)
 1010480:	1004923a 	slli	r2,r2,8
 1010484:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars | record->name[counter];
 1010488:	e0fffc17 	ldw	r3,-16(fp)
 101048c:	e0bfff17 	ldw	r2,-4(fp)
 1010490:	10c5883a 	add	r2,r2,r3
 1010494:	10800003 	ldbu	r2,0(r2)
 1010498:	10c03fcc 	andi	r3,r2,255
 101049c:	e0bffb0b 	ldhu	r2,-20(fp)
 10104a0:	10c4b03a 	or	r2,r2,r3
 10104a4:	e0bffb0d 	sth	r2,-20(fp)
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
 10104a8:	d0a6e817 	ldw	r2,-25696(gp)
 10104ac:	10800a17 	ldw	r2,40(r2)
 10104b0:	1009883a 	mov	r4,r2
 10104b4:	e0fffe17 	ldw	r3,-8(fp)
 10104b8:	e0bffc17 	ldw	r2,-16(fp)
 10104bc:	1885883a 	add	r2,r3,r2
 10104c0:	2085883a 	add	r2,r4,r2
 10104c4:	e0fffb0f 	ldh	r3,-20(fp)
 10104c8:	10c0002d 	sthio	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
 10104cc:	e0bffc17 	ldw	r2,-16(fp)
 10104d0:	10800084 	addi	r2,r2,2
 10104d4:	e0bffc15 	stw	r2,-16(fp)
 10104d8:	e0bffc17 	ldw	r2,-16(fp)
 10104dc:	10800210 	cmplti	r2,r2,8
 10104e0:	103fdf1e 	bne	r2,zero,1010460 <Write_File_Record_At_Offset+0x4c>
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
 10104e4:	e03ffc15 	stw	zero,-16(fp)
 10104e8:	00001306 	br	1010538 <Write_File_Record_At_Offset+0x124>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8,
 10104ec:	d0a6e817 	ldw	r2,-25696(gp)
 10104f0:	10800a17 	ldw	r2,40(r2)
 10104f4:	1009883a 	mov	r4,r2
 10104f8:	e0fffe17 	ldw	r3,-8(fp)
 10104fc:	e0bffc17 	ldw	r2,-16(fp)
 1010500:	1885883a 	add	r2,r3,r2
 1010504:	2085883a 	add	r2,r4,r2
 1010508:	11000204 	addi	r4,r2,8
 101050c:	e0fffc17 	ldw	r3,-16(fp)
 1010510:	e0bfff17 	ldw	r2,-4(fp)
 1010514:	1885883a 	add	r2,r3,r2
 1010518:	10800204 	addi	r2,r2,8
 101051c:	10800003 	ldbu	r2,0(r2)
 1010520:	10c03fcc 	andi	r3,r2,255
 1010524:	2005883a 	mov	r2,r4
 1010528:	10c00025 	stbio	r3,0(r2)
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
 101052c:	e0bffc17 	ldw	r2,-16(fp)
 1010530:	10800044 	addi	r2,r2,1
 1010534:	e0bffc15 	stw	r2,-16(fp)
 1010538:	e0bffc17 	ldw	r2,-16(fp)
 101053c:	108000d0 	cmplti	r2,r2,3
 1010540:	103fea1e 	bne	r2,zero,10104ec <Write_File_Record_At_Offset+0xd8>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8,
					record->extension[counter]);
		}
		IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
 1010544:	d0a6e817 	ldw	r2,-25696(gp)
 1010548:	10800a17 	ldw	r2,40(r2)
 101054c:	1007883a 	mov	r3,r2
 1010550:	e0bffe17 	ldw	r2,-8(fp)
 1010554:	1885883a 	add	r2,r3,r2
 1010558:	110002c4 	addi	r4,r2,11
 101055c:	e0bfff17 	ldw	r2,-4(fp)
 1010560:	108002c3 	ldbu	r2,11(r2)
 1010564:	10c03fcc 	andi	r3,r2,255
 1010568:	2005883a 	mov	r2,r4
 101056c:	10c00025 	stbio	r3,0(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
 1010570:	d0a6e817 	ldw	r2,-25696(gp)
 1010574:	10800a17 	ldw	r2,40(r2)
 1010578:	1007883a 	mov	r3,r2
 101057c:	e0bffe17 	ldw	r2,-8(fp)
 1010580:	1885883a 	add	r2,r3,r2
 1010584:	11000384 	addi	r4,r2,14
 1010588:	e0bfff17 	ldw	r2,-4(fp)
 101058c:	1080030b 	ldhu	r2,12(r2)
 1010590:	10ffffcc 	andi	r3,r2,65535
 1010594:	2005883a 	mov	r2,r4
 1010598:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
 101059c:	d0a6e817 	ldw	r2,-25696(gp)
 10105a0:	10800a17 	ldw	r2,40(r2)
 10105a4:	1007883a 	mov	r3,r2
 10105a8:	e0bffe17 	ldw	r2,-8(fp)
 10105ac:	1885883a 	add	r2,r3,r2
 10105b0:	11000404 	addi	r4,r2,16
 10105b4:	e0bfff17 	ldw	r2,-4(fp)
 10105b8:	1080038b 	ldhu	r2,14(r2)
 10105bc:	10ffffcc 	andi	r3,r2,65535
 10105c0:	2005883a 	mov	r2,r4
 10105c4:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+18,
 10105c8:	d0a6e817 	ldw	r2,-25696(gp)
 10105cc:	10800a17 	ldw	r2,40(r2)
 10105d0:	1007883a 	mov	r3,r2
 10105d4:	e0bffe17 	ldw	r2,-8(fp)
 10105d8:	1885883a 	add	r2,r3,r2
 10105dc:	11000484 	addi	r4,r2,18
 10105e0:	e0bfff17 	ldw	r2,-4(fp)
 10105e4:	1080040b 	ldhu	r2,16(r2)
 10105e8:	10ffffcc 	andi	r3,r2,65535
 10105ec:	2005883a 	mov	r2,r4
 10105f0:	10c0002d 	sthio	r3,0(r2)
				record->last_access_date);
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset+22,
 10105f4:	d0a6e817 	ldw	r2,-25696(gp)
 10105f8:	10800a17 	ldw	r2,40(r2)
 10105fc:	1007883a 	mov	r3,r2
 1010600:	e0bffe17 	ldw	r2,-8(fp)
 1010604:	1885883a 	add	r2,r3,r2
 1010608:	11000584 	addi	r4,r2,22
 101060c:	e0bfff17 	ldw	r2,-4(fp)
 1010610:	1080048b 	ldhu	r2,18(r2)
 1010614:	10ffffcc 	andi	r3,r2,65535
 1010618:	2005883a 	mov	r2,r4
 101061c:	10c0002d 	sthio	r3,0(r2)
				record->last_modified_time);
		IOWR_16DIRECT(device_pointer->base, offset+24,
 1010620:	d0a6e817 	ldw	r2,-25696(gp)
 1010624:	10800a17 	ldw	r2,40(r2)
 1010628:	1007883a 	mov	r3,r2
 101062c:	e0bffe17 	ldw	r2,-8(fp)
 1010630:	1885883a 	add	r2,r3,r2
 1010634:	11000604 	addi	r4,r2,24
 1010638:	e0bfff17 	ldw	r2,-4(fp)
 101063c:	1080050b 	ldhu	r2,20(r2)
 1010640:	10ffffcc 	andi	r3,r2,65535
 1010644:	2005883a 	mov	r2,r4
 1010648:	10c0002d 	sthio	r3,0(r2)
				record->last_modified_date);
		IOWR_16DIRECT(device_pointer->base, offset+26,
 101064c:	d0a6e817 	ldw	r2,-25696(gp)
 1010650:	10800a17 	ldw	r2,40(r2)
 1010654:	1007883a 	mov	r3,r2
 1010658:	e0bffe17 	ldw	r2,-8(fp)
 101065c:	1885883a 	add	r2,r3,r2
 1010660:	11000684 	addi	r4,r2,26
 1010664:	e0bfff17 	ldw	r2,-4(fp)
 1010668:	1080058b 	ldhu	r2,22(r2)
 101066c:	10ffffcc 	andi	r3,r2,65535
 1010670:	2005883a 	mov	r2,r4
 1010674:	10c0002d 	sthio	r3,0(r2)
				record->start_cluster_index);
		IOWR_32DIRECT(device_pointer->base, offset+28,
 1010678:	d0a6e817 	ldw	r2,-25696(gp)
 101067c:	10800a17 	ldw	r2,40(r2)
 1010680:	1007883a 	mov	r3,r2
 1010684:	e0bffe17 	ldw	r2,-8(fp)
 1010688:	1885883a 	add	r2,r3,r2
 101068c:	11000704 	addi	r4,r2,28
 1010690:	e0bfff17 	ldw	r2,-4(fp)
 1010694:	10800617 	ldw	r2,24(r2)
 1010698:	1007883a 	mov	r3,r2
 101069c:	2005883a 	mov	r2,r4
 10106a0:	10c00035 	stwio	r3,0(r2)
				record->file_size_in_bytes);
		current_sector_modified = true;
 10106a4:	00800044 	movi	r2,1
 10106a8:	d0a6e915 	stw	r2,-25692(gp)
		result = true;
 10106ac:	00800044 	movi	r2,1
 10106b0:	e0bffd15 	stw	r2,-12(fp)
	}
	return result;
 10106b4:	e0bffd17 	ldw	r2,-12(fp)
}
 10106b8:	e037883a 	mov	sp,fp
 10106bc:	dfc00117 	ldw	ra,4(sp)
 10106c0:	df000017 	ldw	fp,0(sp)
 10106c4:	dec00204 	addi	sp,sp,8
 10106c8:	f800283a 	ret

010106cc <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
 10106cc:	defff904 	addi	sp,sp,-28
 10106d0:	dfc00615 	stw	ra,24(sp)
 10106d4:	df000515 	stw	fp,20(sp)
 10106d8:	df000504 	addi	fp,sp,20
 10106dc:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
 10106e0:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
 10106e4:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
 10106e8:	0009883a 	mov	r4,zero
 10106ec:	e17fff17 	ldw	r5,-4(fp)
 10106f0:	101419c0 	call	101419c <Read_Sector_Data_Attempt_CRC>
 10106f4:	e0bffe15 	stw	r2,-8(fp)
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
 10106f8:	d0a6e817 	ldw	r2,-25696(gp)
 10106fc:	10800a17 	ldw	r2,40(r2)
 1010700:	10807f84 	addi	r2,r2,510
 1010704:	1080002b 	ldhuio	r2,0(r2)
 1010708:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
 101070c:	e0bffc0f 	ldh	r2,-16(fp)
 1010710:	10ffffcc 	andi	r3,r2,65535
 1010714:	00aa9554 	movui	r2,43605
 1010718:	1881751e 	bne	r3,r2,1010cf0 <Check_for_DOS_FAT+0x624>
 101071c:	e0bffe17 	ldw	r2,-8(fp)
 1010720:	1005003a 	cmpeq	r2,r2,zero
 1010724:	1001721e 	bne	r2,zero,1010cf0 <Check_for_DOS_FAT+0x624>
		int num_clusters = 0;
 1010728:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0] =
 101072c:	d0a6e817 	ldw	r2,-25696(gp)
 1010730:	10800a17 	ldw	r2,40(r2)
 1010734:	10800023 	ldbuio	r2,0(r2)
 1010738:	1007883a 	mov	r3,r2
 101073c:	008040b4 	movhi	r2,258
 1010740:	10b03404 	addi	r2,r2,-16176
 1010744:	10c00005 	stb	r3,0(r2)
				(char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] =
 1010748:	d0a6e817 	ldw	r2,-25696(gp)
 101074c:	10800a17 	ldw	r2,40(r2)
 1010750:	10800044 	addi	r2,r2,1
 1010754:	10800023 	ldbuio	r2,0(r2)
 1010758:	1007883a 	mov	r3,r2
 101075c:	008040b4 	movhi	r2,258
 1010760:	10b03404 	addi	r2,r2,-16176
 1010764:	10c00045 	stb	r3,1(r2)
				(char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] =
 1010768:	d0a6e817 	ldw	r2,-25696(gp)
 101076c:	10800a17 	ldw	r2,40(r2)
 1010770:	10800084 	addi	r2,r2,2
 1010774:	10800023 	ldbuio	r2,0(r2)
 1010778:	1007883a 	mov	r3,r2
 101077c:	008040b4 	movhi	r2,258
 1010780:	10b03404 	addi	r2,r2,-16176
 1010784:	10c00085 	stb	r3,2(r2)
				(char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
 1010788:	e03ffd15 	stw	zero,-12(fp)
 101078c:	00001006 	br	10107d0 <Check_for_DOS_FAT+0x104>
			boot_sector_data.OEM_name[counter] =
 1010790:	e13ffd17 	ldw	r4,-12(fp)
 1010794:	d0a6e817 	ldw	r2,-25696(gp)
 1010798:	10800a17 	ldw	r2,40(r2)
 101079c:	1007883a 	mov	r3,r2
 10107a0:	e0bffd17 	ldw	r2,-12(fp)
 10107a4:	1885883a 	add	r2,r3,r2
 10107a8:	108000c4 	addi	r2,r2,3
 10107ac:	10800023 	ldbuio	r2,0(r2)
 10107b0:	1007883a 	mov	r3,r2
 10107b4:	008040b4 	movhi	r2,258
 10107b8:	10b03404 	addi	r2,r2,-16176
 10107bc:	1105883a 	add	r2,r2,r4
 10107c0:	10c000c5 	stb	r3,3(r2)
				(char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] =
				(char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] =
				(char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
 10107c4:	e0bffd17 	ldw	r2,-12(fp)
 10107c8:	10800044 	addi	r2,r2,1
 10107cc:	e0bffd15 	stw	r2,-12(fp)
 10107d0:	e0bffd17 	ldw	r2,-12(fp)
 10107d4:	10800210 	cmplti	r2,r2,8
 10107d8:	103fed1e 	bne	r2,zero,1010790 <Check_for_DOS_FAT+0xc4>
			boot_sector_data.OEM_name[counter] =
					(char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes =
 10107dc:	d0a6e817 	ldw	r2,-25696(gp)
 10107e0:	10800a17 	ldw	r2,40(r2)
 10107e4:	10800304 	addi	r2,r2,12
 10107e8:	10800023 	ldbuio	r2,0(r2)
 10107ec:	10803fcc 	andi	r2,r2,255
 10107f0:	1004923a 	slli	r2,r2,8
 10107f4:	1007883a 	mov	r3,r2
 10107f8:	d0a6e817 	ldw	r2,-25696(gp)
 10107fc:	10800a17 	ldw	r2,40(r2)
 1010800:	108002c4 	addi	r2,r2,11
 1010804:	10800023 	ldbuio	r2,0(r2)
 1010808:	10803fcc 	andi	r2,r2,255
 101080c:	1080201c 	xori	r2,r2,128
 1010810:	10bfe004 	addi	r2,r2,-128
 1010814:	1884b03a 	or	r2,r3,r2
 1010818:	1007883a 	mov	r3,r2
 101081c:	008040b4 	movhi	r2,258
 1010820:	10b03404 	addi	r2,r2,-16176
 1010824:	10c0030d 	sth	r3,12(r2)
				(((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8)
						| ((char) IORD_8DIRECT(device_pointer->base, 11));
		boot_sector_data.sectors_per_cluster =
 1010828:	d0a6e817 	ldw	r2,-25696(gp)
 101082c:	10800a17 	ldw	r2,40(r2)
 1010830:	10800344 	addi	r2,r2,13
 1010834:	10800023 	ldbuio	r2,0(r2)
 1010838:	1007883a 	mov	r3,r2
 101083c:	008040b4 	movhi	r2,258
 1010840:	10b03404 	addi	r2,r2,-16176
 1010844:	10c00385 	stb	r3,14(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
		boot_sector_data.reserved_sectors =
 1010848:	d0a6e817 	ldw	r2,-25696(gp)
 101084c:	10800a17 	ldw	r2,40(r2)
 1010850:	10800384 	addi	r2,r2,14
 1010854:	1080002b 	ldhuio	r2,0(r2)
 1010858:	1007883a 	mov	r3,r2
 101085c:	008040b4 	movhi	r2,258
 1010860:	10b03404 	addi	r2,r2,-16176
 1010864:	10c0040d 	sth	r3,16(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
		boot_sector_data.number_of_FATs =
 1010868:	d0a6e817 	ldw	r2,-25696(gp)
 101086c:	10800a17 	ldw	r2,40(r2)
 1010870:	10800404 	addi	r2,r2,16
 1010874:	10800023 	ldbuio	r2,0(r2)
 1010878:	1007883a 	mov	r3,r2
 101087c:	008040b4 	movhi	r2,258
 1010880:	10b03404 	addi	r2,r2,-16176
 1010884:	10c00485 	stb	r3,18(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
		boot_sector_data.max_number_of_dir_entires =
 1010888:	d0a6e817 	ldw	r2,-25696(gp)
 101088c:	10800a17 	ldw	r2,40(r2)
 1010890:	10800484 	addi	r2,r2,18
 1010894:	10800023 	ldbuio	r2,0(r2)
 1010898:	10803fcc 	andi	r2,r2,255
 101089c:	1004923a 	slli	r2,r2,8
 10108a0:	1007883a 	mov	r3,r2
 10108a4:	d0a6e817 	ldw	r2,-25696(gp)
 10108a8:	10800a17 	ldw	r2,40(r2)
 10108ac:	10800444 	addi	r2,r2,17
 10108b0:	10800023 	ldbuio	r2,0(r2)
 10108b4:	10803fcc 	andi	r2,r2,255
 10108b8:	1884b03a 	or	r2,r3,r2
 10108bc:	1007883a 	mov	r3,r2
 10108c0:	008040b4 	movhi	r2,258
 10108c4:	10b03404 	addi	r2,r2,-16176
 10108c8:	10c0050d 	sth	r3,20(r2)
				(((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 18))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
		boot_sector_data.number_of_sectors_in_partition =
 10108cc:	d0a6e817 	ldw	r2,-25696(gp)
 10108d0:	10800a17 	ldw	r2,40(r2)
 10108d4:	10800504 	addi	r2,r2,20
 10108d8:	10800023 	ldbuio	r2,0(r2)
 10108dc:	10803fcc 	andi	r2,r2,255
 10108e0:	1004923a 	slli	r2,r2,8
 10108e4:	1007883a 	mov	r3,r2
 10108e8:	d0a6e817 	ldw	r2,-25696(gp)
 10108ec:	10800a17 	ldw	r2,40(r2)
 10108f0:	108004c4 	addi	r2,r2,19
 10108f4:	10800023 	ldbuio	r2,0(r2)
 10108f8:	10803fcc 	andi	r2,r2,255
 10108fc:	1884b03a 	or	r2,r3,r2
 1010900:	1007883a 	mov	r3,r2
 1010904:	008040b4 	movhi	r2,258
 1010908:	10b03404 	addi	r2,r2,-16176
 101090c:	10c0058d 	sth	r3,22(r2)
				(((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 20))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
		boot_sector_data.media_descriptor =
 1010910:	d0a6e817 	ldw	r2,-25696(gp)
 1010914:	10800a17 	ldw	r2,40(r2)
 1010918:	10800544 	addi	r2,r2,21
 101091c:	10800023 	ldbuio	r2,0(r2)
 1010920:	1007883a 	mov	r3,r2
 1010924:	008040b4 	movhi	r2,258
 1010928:	10b03404 	addi	r2,r2,-16176
 101092c:	10c00605 	stb	r3,24(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
		boot_sector_data.number_of_sectors_per_table =
 1010930:	d0a6e817 	ldw	r2,-25696(gp)
 1010934:	10800a17 	ldw	r2,40(r2)
 1010938:	10800584 	addi	r2,r2,22
 101093c:	1080002b 	ldhuio	r2,0(r2)
 1010940:	1007883a 	mov	r3,r2
 1010944:	008040b4 	movhi	r2,258
 1010948:	10b03404 	addi	r2,r2,-16176
 101094c:	10c0068d 	sth	r3,26(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
		boot_sector_data.number_of_sectors_per_track =
 1010950:	d0a6e817 	ldw	r2,-25696(gp)
 1010954:	10800a17 	ldw	r2,40(r2)
 1010958:	10800604 	addi	r2,r2,24
 101095c:	1080002b 	ldhuio	r2,0(r2)
 1010960:	1007883a 	mov	r3,r2
 1010964:	008040b4 	movhi	r2,258
 1010968:	10b03404 	addi	r2,r2,-16176
 101096c:	10c0070d 	sth	r3,28(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
		boot_sector_data.number_of_heads =
 1010970:	d0a6e817 	ldw	r2,-25696(gp)
 1010974:	10800a17 	ldw	r2,40(r2)
 1010978:	10800684 	addi	r2,r2,26
 101097c:	1080002b 	ldhuio	r2,0(r2)
 1010980:	1007883a 	mov	r3,r2
 1010984:	008040b4 	movhi	r2,258
 1010988:	10b03404 	addi	r2,r2,-16176
 101098c:	10c0078d 	sth	r3,30(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors =
 1010990:	d0a6e817 	ldw	r2,-25696(gp)
 1010994:	10800a17 	ldw	r2,40(r2)
 1010998:	10800704 	addi	r2,r2,28
 101099c:	10800037 	ldwio	r2,0(r2)
 10109a0:	1007883a 	mov	r3,r2
 10109a4:	008040b4 	movhi	r2,258
 10109a8:	10b03404 	addi	r2,r2,-16176
 10109ac:	10c00815 	stw	r3,32(r2)
				((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB =
 10109b0:	d0a6e817 	ldw	r2,-25696(gp)
 10109b4:	10800a17 	ldw	r2,40(r2)
 10109b8:	10800804 	addi	r2,r2,32
 10109bc:	10800037 	ldwio	r2,0(r2)
 10109c0:	1007883a 	mov	r3,r2
 10109c4:	008040b4 	movhi	r2,258
 10109c8:	10b03404 	addi	r2,r2,-16176
 10109cc:	10c00915 	stw	r3,36(r2)
				((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number =
 10109d0:	d0a6e817 	ldw	r2,-25696(gp)
 10109d4:	10800a17 	ldw	r2,40(r2)
 10109d8:	10800904 	addi	r2,r2,36
 10109dc:	10800023 	ldbuio	r2,0(r2)
 10109e0:	1007883a 	mov	r3,r2
 10109e4:	008040b4 	movhi	r2,258
 10109e8:	10b03404 	addi	r2,r2,-16176
 10109ec:	10c00a05 	stb	r3,40(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head =
 10109f0:	d0a6e817 	ldw	r2,-25696(gp)
 10109f4:	10800a17 	ldw	r2,40(r2)
 10109f8:	10800944 	addi	r2,r2,37
 10109fc:	10800023 	ldbuio	r2,0(r2)
 1010a00:	1007883a 	mov	r3,r2
 1010a04:	008040b4 	movhi	r2,258
 1010a08:	10b03404 	addi	r2,r2,-16176
 1010a0c:	10c00a45 	stb	r3,41(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature =
 1010a10:	d0a6e817 	ldw	r2,-25696(gp)
 1010a14:	10800a17 	ldw	r2,40(r2)
 1010a18:	10800984 	addi	r2,r2,38
 1010a1c:	10800023 	ldbuio	r2,0(r2)
 1010a20:	1007883a 	mov	r3,r2
 1010a24:	008040b4 	movhi	r2,258
 1010a28:	10b03404 	addi	r2,r2,-16176
 1010a2c:	10c00a85 	stb	r3,42(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset =
 1010a30:	008040b4 	movhi	r2,258
 1010a34:	10b03404 	addi	r2,r2,-16176
 1010a38:	1080040b 	ldhu	r2,16(r2)
 1010a3c:	10ffffcc 	andi	r3,r2,65535
 1010a40:	008040b4 	movhi	r2,258
 1010a44:	10b03404 	addi	r2,r2,-16176
 1010a48:	10c01115 	stw	r3,68(r2)
				boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset =
 1010a4c:	008040b4 	movhi	r2,258
 1010a50:	10b03404 	addi	r2,r2,-16176
 1010a54:	10c01117 	ldw	r3,68(r2)
 1010a58:	008040b4 	movhi	r2,258
 1010a5c:	10b03404 	addi	r2,r2,-16176
 1010a60:	1080068b 	ldhu	r2,26(r2)
 1010a64:	10bfffcc 	andi	r2,r2,65535
 1010a68:	1887883a 	add	r3,r3,r2
 1010a6c:	008040b4 	movhi	r2,258
 1010a70:	10b03404 	addi	r2,r2,-16176
 1010a74:	10c01215 	stw	r3,72(r2)
				boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset =
 1010a78:	008040b4 	movhi	r2,258
 1010a7c:	10b03404 	addi	r2,r2,-16176
 1010a80:	10c01217 	ldw	r3,72(r2)
 1010a84:	008040b4 	movhi	r2,258
 1010a88:	10b03404 	addi	r2,r2,-16176
 1010a8c:	1080068b 	ldhu	r2,26(r2)
 1010a90:	10bfffcc 	andi	r2,r2,65535
 1010a94:	1887883a 	add	r3,r3,r2
 1010a98:	008040b4 	movhi	r2,258
 1010a9c:	10b03404 	addi	r2,r2,-16176
 1010aa0:	10c01315 	stw	r3,76(r2)
				boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset =
 1010aa4:	008040b4 	movhi	r2,258
 1010aa8:	10b03404 	addi	r2,r2,-16176
 1010aac:	11001317 	ldw	r4,76(r2)
 1010ab0:	008040b4 	movhi	r2,258
 1010ab4:	10b03404 	addi	r2,r2,-16176
 1010ab8:	1080050b 	ldhu	r2,20(r2)
 1010abc:	10bfffcc 	andi	r2,r2,65535
 1010ac0:	1006917a 	slli	r3,r2,5
 1010ac4:	008040b4 	movhi	r2,258
 1010ac8:	10b03404 	addi	r2,r2,-16176
 1010acc:	1080030b 	ldhu	r2,12(r2)
 1010ad0:	10bfffcc 	andi	r2,r2,65535
 1010ad4:	1885283a 	div	r2,r3,r2
 1010ad8:	2087883a 	add	r3,r4,r2
 1010adc:	008040b4 	movhi	r2,258
 1010ae0:	10b03404 	addi	r2,r2,-16176
 1010ae4:	10c01415 	stw	r3,80(r2)
				boot_sector_data.root_directory_sector_offset
						+ (32 * boot_sector_data.max_number_of_dir_entires
								/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
 1010ae8:	008040b4 	movhi	r2,258
 1010aec:	10b03404 	addi	r2,r2,-16176
 1010af0:	1080058b 	ldhu	r2,22(r2)
 1010af4:	10bfffcc 	andi	r2,r2,65535
 1010af8:	1005003a 	cmpeq	r2,r2,zero
 1010afc:	10000b1e 	bne	r2,zero,1010b2c <Check_for_DOS_FAT+0x460>
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
 1010b00:	008040b4 	movhi	r2,258
 1010b04:	10b03404 	addi	r2,r2,-16176
 1010b08:	1080058b 	ldhu	r2,22(r2)
 1010b0c:	10ffffcc 	andi	r3,r2,65535
 1010b10:	008040b4 	movhi	r2,258
 1010b14:	10b03404 	addi	r2,r2,-16176
 1010b18:	10800383 	ldbu	r2,14(r2)
 1010b1c:	10803fcc 	andi	r2,r2,255
 1010b20:	1885283a 	div	r2,r3,r2
 1010b24:	e0bffb15 	stw	r2,-20(fp)
 1010b28:	00000906 	br	1010b50 <Check_for_DOS_FAT+0x484>
					/ boot_sector_data.sectors_per_cluster);
		} else {
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB
 1010b2c:	008040b4 	movhi	r2,258
 1010b30:	10b03404 	addi	r2,r2,-16176
 1010b34:	10c00917 	ldw	r3,36(r2)
 1010b38:	008040b4 	movhi	r2,258
 1010b3c:	10b03404 	addi	r2,r2,-16176
 1010b40:	10800383 	ldbu	r2,14(r2)
 1010b44:	10803fcc 	andi	r2,r2,255
 1010b48:	1885203a 	divu	r2,r3,r2
 1010b4c:	e0bffb15 	stw	r2,-20(fp)
					/ boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087) {
 1010b50:	e0bffb17 	ldw	r2,-20(fp)
 1010b54:	1083fdc8 	cmpgei	r2,r2,4087
 1010b58:	1000051e 	bne	r2,zero,1010b70 <Check_for_DOS_FAT+0x4a4>
			boot_sector_data.bits_for_cluster_index = 12;
 1010b5c:	00c040b4 	movhi	r3,258
 1010b60:	18f03404 	addi	r3,r3,-16176
 1010b64:	00800304 	movi	r2,12
 1010b68:	18801085 	stb	r2,66(r3)
 1010b6c:	00000c06 	br	1010ba0 <Check_for_DOS_FAT+0x4d4>
		} else if (num_clusters <= 65517) {
 1010b70:	e0fffb17 	ldw	r3,-20(fp)
 1010b74:	00bffb54 	movui	r2,65517
 1010b78:	10c00516 	blt	r2,r3,1010b90 <Check_for_DOS_FAT+0x4c4>
			boot_sector_data.bits_for_cluster_index = 16;
 1010b7c:	00c040b4 	movhi	r3,258
 1010b80:	18f03404 	addi	r3,r3,-16176
 1010b84:	00800404 	movi	r2,16
 1010b88:	18801085 	stb	r2,66(r3)
 1010b8c:	00000406 	br	1010ba0 <Check_for_DOS_FAT+0x4d4>
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
 1010b90:	00c040b4 	movhi	r3,258
 1010b94:	18f03404 	addi	r3,r3,-16176
 1010b98:	00800804 	movi	r2,32
 1010b9c:	18801085 	stb	r2,66(r3)
		}

		for (counter = 0; counter < 4; counter++) {
 1010ba0:	e03ffd15 	stw	zero,-12(fp)
 1010ba4:	00001106 	br	1010bec <Check_for_DOS_FAT+0x520>
			boot_sector_data.volume_id[counter] =
 1010ba8:	e13ffd17 	ldw	r4,-12(fp)
 1010bac:	d0a6e817 	ldw	r2,-25696(gp)
 1010bb0:	10800a17 	ldw	r2,40(r2)
 1010bb4:	1007883a 	mov	r3,r2
 1010bb8:	e0bffd17 	ldw	r2,-12(fp)
 1010bbc:	1885883a 	add	r2,r3,r2
 1010bc0:	108009c4 	addi	r2,r2,39
 1010bc4:	10800023 	ldbuio	r2,0(r2)
 1010bc8:	1007883a 	mov	r3,r2
 1010bcc:	008040b4 	movhi	r2,258
 1010bd0:	10b03404 	addi	r2,r2,-16176
 1010bd4:	2085883a 	add	r2,r4,r2
 1010bd8:	10800a04 	addi	r2,r2,40
 1010bdc:	10c000c5 	stb	r3,3(r2)
			boot_sector_data.bits_for_cluster_index = 16;
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
		}

		for (counter = 0; counter < 4; counter++) {
 1010be0:	e0bffd17 	ldw	r2,-12(fp)
 1010be4:	10800044 	addi	r2,r2,1
 1010be8:	e0bffd15 	stw	r2,-12(fp)
 1010bec:	e0bffd17 	ldw	r2,-12(fp)
 1010bf0:	10800110 	cmplti	r2,r2,4
 1010bf4:	103fec1e 	bne	r2,zero,1010ba8 <Check_for_DOS_FAT+0x4dc>
			boot_sector_data.volume_id[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
 1010bf8:	e03ffd15 	stw	zero,-12(fp)
 1010bfc:	00001106 	br	1010c44 <Check_for_DOS_FAT+0x578>
			boot_sector_data.volume_label[counter] =
 1010c00:	e13ffd17 	ldw	r4,-12(fp)
 1010c04:	d0a6e817 	ldw	r2,-25696(gp)
 1010c08:	10800a17 	ldw	r2,40(r2)
 1010c0c:	1007883a 	mov	r3,r2
 1010c10:	e0bffd17 	ldw	r2,-12(fp)
 1010c14:	1885883a 	add	r2,r3,r2
 1010c18:	10800ac4 	addi	r2,r2,43
 1010c1c:	10800023 	ldbuio	r2,0(r2)
 1010c20:	1007883a 	mov	r3,r2
 1010c24:	008040b4 	movhi	r2,258
 1010c28:	10b03404 	addi	r2,r2,-16176
 1010c2c:	2085883a 	add	r2,r4,r2
 1010c30:	10800b04 	addi	r2,r2,44
 1010c34:	10c000c5 	stb	r3,3(r2)

		for (counter = 0; counter < 4; counter++) {
			boot_sector_data.volume_id[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
 1010c38:	e0bffd17 	ldw	r2,-12(fp)
 1010c3c:	10800044 	addi	r2,r2,1
 1010c40:	e0bffd15 	stw	r2,-12(fp)
 1010c44:	e0bffd17 	ldw	r2,-12(fp)
 1010c48:	108002d0 	cmplti	r2,r2,11
 1010c4c:	103fec1e 	bne	r2,zero,1010c00 <Check_for_DOS_FAT+0x534>
			boot_sector_data.volume_label[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
 1010c50:	e03ffd15 	stw	zero,-12(fp)
 1010c54:	00001106 	br	1010c9c <Check_for_DOS_FAT+0x5d0>
			boot_sector_data.file_system_type[counter] =
 1010c58:	e13ffd17 	ldw	r4,-12(fp)
 1010c5c:	d0a6e817 	ldw	r2,-25696(gp)
 1010c60:	10800a17 	ldw	r2,40(r2)
 1010c64:	1007883a 	mov	r3,r2
 1010c68:	e0bffd17 	ldw	r2,-12(fp)
 1010c6c:	1885883a 	add	r2,r3,r2
 1010c70:	10800d84 	addi	r2,r2,54
 1010c74:	10800023 	ldbuio	r2,0(r2)
 1010c78:	1007883a 	mov	r3,r2
 1010c7c:	008040b4 	movhi	r2,258
 1010c80:	10b03404 	addi	r2,r2,-16176
 1010c84:	2085883a 	add	r2,r4,r2
 1010c88:	10800e04 	addi	r2,r2,56
 1010c8c:	10c00085 	stb	r3,2(r2)
		}
		for (counter = 0; counter < 11; counter++) {
			boot_sector_data.volume_label[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
 1010c90:	e0bffd17 	ldw	r2,-12(fp)
 1010c94:	10800044 	addi	r2,r2,1
 1010c98:	e0bffd15 	stw	r2,-12(fp)
 1010c9c:	e0bffd17 	ldw	r2,-12(fp)
 1010ca0:	10800210 	cmplti	r2,r2,8
 1010ca4:	103fec1e 	bne	r2,zero,1010c58 <Check_for_DOS_FAT+0x58c>
			boot_sector_data.file_system_type[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
 1010ca8:	e03ffd15 	stw	zero,-12(fp)
 1010cac:	00000a06 	br	1010cd8 <Check_for_DOS_FAT+0x60c>
			active_files[counter].in_use = false;
 1010cb0:	e0bffd17 	ldw	r2,-12(fp)
 1010cb4:	00c040b4 	movhi	r3,258
 1010cb8:	18f04904 	addi	r3,r3,-16092
 1010cbc:	100491ba 	slli	r2,r2,6
 1010cc0:	10c5883a 	add	r2,r2,r3
 1010cc4:	10800f04 	addi	r2,r2,60
 1010cc8:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.file_system_type[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
 1010ccc:	e0bffd17 	ldw	r2,-12(fp)
 1010cd0:	10800044 	addi	r2,r2,1
 1010cd4:	e0bffd15 	stw	r2,-12(fp)
 1010cd8:	e0bffd17 	ldw	r2,-12(fp)
 1010cdc:	10800510 	cmplti	r2,r2,20
 1010ce0:	103ff31e 	bne	r2,zero,1010cb0 <Check_for_DOS_FAT+0x5e4>
			active_files[counter].in_use = false;
		}
		result = true;
 1010ce4:	00800044 	movi	r2,1
 1010ce8:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
 1010cec:	00000106 	br	1010cf4 <Check_for_DOS_FAT+0x628>
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
			active_files[counter].in_use = false;
		}
		result = true;
	} else {
		result = false;
 1010cf0:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
 1010cf4:	e0bffe17 	ldw	r2,-8(fp)
}
 1010cf8:	e037883a 	mov	sp,fp
 1010cfc:	dfc00117 	ldw	ra,4(sp)
 1010d00:	df000017 	ldw	fp,0(sp)
 1010d04:	dec00204 	addi	sp,sp,8
 1010d08:	f800283a 	ret

01010d0c <Look_for_FAT16>:

bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
 1010d0c:	defffc04 	addi	sp,sp,-16
 1010d10:	dfc00315 	stw	ra,12(sp)
 1010d14:	df000215 	stw	fp,8(sp)
 1010d18:	df000204 	addi	fp,sp,8
	bool result = false;
 1010d1c:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
 1010d20:	1012a540 	call	1012a54 <alt_up_sd_card_is_Present>
 1010d24:	1005003a 	cmpeq	r2,r2,zero
 1010d28:	1000331e 	bne	r2,zero,1010df8 <Look_for_FAT16+0xec>
		Read_Sector_Data_Attempt_CRC(0, 0);
 1010d2c:	0009883a 	mov	r4,zero
 1010d30:	000b883a 	mov	r5,zero
 1010d34:	101419c0 	call	101419c <Read_Sector_Data_Attempt_CRC>

		short int csd_file_format = *CSD_register_w0;
 1010d38:	d0a6e217 	ldw	r2,-25720(gp)
 1010d3c:	1080000b 	ldhu	r2,0(r2)
 1010d40:	e0bffe0d 	sth	r2,-8(fp)

		fat_partition_offset_in_512_byte_sectors = 0;
 1010d44:	d026e615 	stw	zero,-25704(gp)
		fat_partition_size_in_512_byte_sectors = 0;
 1010d48:	d026e715 	stw	zero,-25700(gp)

		if (((csd_file_format & 0x8000) == 0)
 1010d4c:	e0bffe0f 	ldh	r2,-8(fp)
 1010d50:	1004803a 	cmplt	r2,r2,zero
 1010d54:	1000281e 	bne	r2,zero,1010df8 <Look_for_FAT16+0xec>
 1010d58:	e0bffe0b 	ldhu	r2,-8(fp)
 1010d5c:	10bfffcc 	andi	r2,r2,65535
 1010d60:	1083000c 	andi	r2,r2,3072
 1010d64:	10830020 	cmpeqi	r2,r2,3072
 1010d68:	1000231e 	bne	r2,zero,1010df8 <Look_for_FAT16+0xec>
				&& ((csd_file_format & 0x0c00) != 0x0c00)) {
			if ((csd_file_format & 0x0c00) == 0x0400) {
 1010d6c:	e0bffe0b 	ldhu	r2,-8(fp)
 1010d70:	10bfffcc 	andi	r2,r2,65535
 1010d74:	1083000c 	andi	r2,r2,3072
 1010d78:	10810018 	cmpnei	r2,r2,1024
 1010d7c:	1000031e 	bne	r2,zero,1010d8c <Look_for_FAT16+0x80>
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
 1010d80:	0009883a 	mov	r4,zero
 1010d84:	10106cc0 	call	10106cc <Check_for_DOS_FAT>
 1010d88:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000) {
 1010d8c:	e0bffe0b 	ldhu	r2,-8(fp)
 1010d90:	10bfffcc 	andi	r2,r2,65535
 1010d94:	1083000c 	andi	r2,r2,3072
 1010d98:	1004c03a 	cmpne	r2,r2,zero
 1010d9c:	1000061e 	bne	r2,zero,1010db8 <Look_for_FAT16+0xac>
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record()) {
 1010da0:	100ffe00 	call	100ffe0 <Check_for_Master_Boot_Record>
 1010da4:	1005003a 	cmpeq	r2,r2,zero
 1010da8:	1000031e 	bne	r2,zero,1010db8 <Look_for_FAT16+0xac>
					result = Check_for_DOS_FAT(
 1010dac:	d126e617 	ldw	r4,-25704(gp)
 1010db0:	10106cc0 	call	10106cc <Check_for_DOS_FAT>
 1010db4:	e0bfff15 	stw	r2,-4(fp)
							fat_partition_offset_in_512_byte_sectors);
				}
			}
			if (result == true) {
 1010db8:	e0bfff17 	ldw	r2,-4(fp)
 1010dbc:	10800058 	cmpnei	r2,r2,1
 1010dc0:	10000d1e 	bne	r2,zero,1010df8 <Look_for_FAT16+0xec>
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16) {
 1010dc4:	008040b4 	movhi	r2,258
 1010dc8:	10b03404 	addi	r2,r2,-16176
 1010dcc:	10801083 	ldbu	r2,66(r2)
 1010dd0:	10803fcc 	andi	r2,r2,255
 1010dd4:	10800420 	cmpeqi	r2,r2,16
 1010dd8:	1000021e 	bne	r2,zero,1010de4 <Look_for_FAT16+0xd8>
					result = false;
 1010ddc:	e03fff15 	stw	zero,-4(fp)
 1010de0:	00000506 	br	1010df8 <Look_for_FAT16+0xec>
				} else {
					fat_partition_size_in_512_byte_sectors =
 1010de4:	008040b4 	movhi	r2,258
 1010de8:	10b03404 	addi	r2,r2,-16176
 1010dec:	1080058b 	ldhu	r2,22(r2)
 1010df0:	10bfffcc 	andi	r2,r2,65535
 1010df4:	d0a6e715 	stw	r2,-25700(gp)
							boot_sector_data.number_of_sectors_in_partition;
				}
			}
		}
	}
	return result;
 1010df8:	e0bfff17 	ldw	r2,-4(fp)
}
 1010dfc:	e037883a 	mov	sp,fp
 1010e00:	dfc00117 	ldw	ra,4(sp)
 1010e04:	df000017 	ldw	fp,0(sp)
 1010e08:	dec00204 	addi	sp,sp,8
 1010e0c:	f800283a 	ret

01010e10 <filename_to_upper_case>:

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
 1010e10:	defffb04 	addi	sp,sp,-20
 1010e14:	dfc00415 	stw	ra,16(sp)
 1010e18:	df000315 	stw	fp,12(sp)
 1010e1c:	df000304 	addi	fp,sp,12
 1010e20:	e13fff15 	stw	r4,-4(fp)
	int index;
	int length = strlen(file_name);
 1010e24:	e13fff17 	ldw	r4,-4(fp)
 1010e28:	10006900 	call	1000690 <strlen>
 1010e2c:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
 1010e30:	e03ffe15 	stw	zero,-8(fp)
 1010e34:	00002206 	br	1010ec0 <filename_to_upper_case+0xb0>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
 1010e38:	e0bffe17 	ldw	r2,-8(fp)
 1010e3c:	1007883a 	mov	r3,r2
 1010e40:	e0bfff17 	ldw	r2,-4(fp)
 1010e44:	1885883a 	add	r2,r3,r2
 1010e48:	10800003 	ldbu	r2,0(r2)
 1010e4c:	10803fcc 	andi	r2,r2,255
 1010e50:	1080201c 	xori	r2,r2,128
 1010e54:	10bfe004 	addi	r2,r2,-128
 1010e58:	10801850 	cmplti	r2,r2,97
 1010e5c:	1000151e 	bne	r2,zero,1010eb4 <filename_to_upper_case+0xa4>
 1010e60:	e0bffe17 	ldw	r2,-8(fp)
 1010e64:	1007883a 	mov	r3,r2
 1010e68:	e0bfff17 	ldw	r2,-4(fp)
 1010e6c:	1885883a 	add	r2,r3,r2
 1010e70:	10800003 	ldbu	r2,0(r2)
 1010e74:	10803fcc 	andi	r2,r2,255
 1010e78:	1080201c 	xori	r2,r2,128
 1010e7c:	10bfe004 	addi	r2,r2,-128
 1010e80:	10801ec8 	cmpgei	r2,r2,123
 1010e84:	10000b1e 	bne	r2,zero,1010eb4 <filename_to_upper_case+0xa4>
			file_name[index] = (file_name[index] - 'a') + 'A';
 1010e88:	e0bffe17 	ldw	r2,-8(fp)
 1010e8c:	1007883a 	mov	r3,r2
 1010e90:	e0bfff17 	ldw	r2,-4(fp)
 1010e94:	1889883a 	add	r4,r3,r2
 1010e98:	e0bffe17 	ldw	r2,-8(fp)
 1010e9c:	1007883a 	mov	r3,r2
 1010ea0:	e0bfff17 	ldw	r2,-4(fp)
 1010ea4:	1885883a 	add	r2,r3,r2
 1010ea8:	10800003 	ldbu	r2,0(r2)
 1010eac:	10bff804 	addi	r2,r2,-32
 1010eb0:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
 1010eb4:	e0bffe17 	ldw	r2,-8(fp)
 1010eb8:	10800044 	addi	r2,r2,1
 1010ebc:	e0bffe15 	stw	r2,-8(fp)
 1010ec0:	e0fffe17 	ldw	r3,-8(fp)
 1010ec4:	e0bffd17 	ldw	r2,-12(fp)
 1010ec8:	18bfdb16 	blt	r3,r2,1010e38 <filename_to_upper_case+0x28>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
			file_name[index] = (file_name[index] - 'a') + 'A';
		}
	}
}
 1010ecc:	e037883a 	mov	sp,fp
 1010ed0:	dfc00117 	ldw	ra,4(sp)
 1010ed4:	df000017 	ldw	fp,0(sp)
 1010ed8:	dec00204 	addi	sp,sp,8
 1010edc:	f800283a 	ret

01010ee0 <check_file_name_for_FAT16_compliance>:

bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
 1010ee0:	defff804 	addi	sp,sp,-32
 1010ee4:	dfc00715 	stw	ra,28(sp)
 1010ee8:	df000615 	stw	fp,24(sp)
 1010eec:	df000604 	addi	fp,sp,24
 1010ef0:	e13fff15 	stw	r4,-4(fp)
	int length = strlen(file_name);
 1010ef4:	e13fff17 	ldw	r4,-4(fp)
 1010ef8:	10006900 	call	1000690 <strlen>
 1010efc:	e0bffe15 	stw	r2,-8(fp)
	int index;
	int last_dir_break_position = -1;
 1010f00:	00bfffc4 	movi	r2,-1
 1010f04:	e0bffc15 	stw	r2,-16(fp)
	int last_period = -1;
 1010f08:	00bfffc4 	movi	r2,-1
 1010f0c:	e0bffb15 	stw	r2,-20(fp)
	bool result = true;
 1010f10:	00800044 	movi	r2,1
 1010f14:	e0bffa15 	stw	r2,-24(fp)

	for (index = 0; index < length; index++) {
 1010f18:	e03ffd15 	stw	zero,-12(fp)
 1010f1c:	00007606 	br	10110f8 <check_file_name_for_FAT16_compliance+0x218>
		if ((file_name[index] == ' ')
 1010f20:	e0bffd17 	ldw	r2,-12(fp)
 1010f24:	1007883a 	mov	r3,r2
 1010f28:	e0bfff17 	ldw	r2,-4(fp)
 1010f2c:	1885883a 	add	r2,r3,r2
 1010f30:	10800003 	ldbu	r2,0(r2)
 1010f34:	10803fcc 	andi	r2,r2,255
 1010f38:	1080201c 	xori	r2,r2,128
 1010f3c:	10bfe004 	addi	r2,r2,-128
 1010f40:	10800820 	cmpeqi	r2,r2,32
 1010f44:	1000431e 	bne	r2,zero,1011054 <check_file_name_for_FAT16_compliance+0x174>
 1010f48:	e0bffd17 	ldw	r2,-12(fp)
 1010f4c:	10ffffc4 	addi	r3,r2,-1
 1010f50:	e0bffc17 	ldw	r2,-16(fp)
 1010f54:	1880141e 	bne	r3,r2,1010fa8 <check_file_name_for_FAT16_compliance+0xc8>
 1010f58:	e0bffd17 	ldw	r2,-12(fp)
 1010f5c:	1007883a 	mov	r3,r2
 1010f60:	e0bfff17 	ldw	r2,-4(fp)
 1010f64:	1885883a 	add	r2,r3,r2
 1010f68:	10800003 	ldbu	r2,0(r2)
 1010f6c:	10803fcc 	andi	r2,r2,255
 1010f70:	1080201c 	xori	r2,r2,128
 1010f74:	10bfe004 	addi	r2,r2,-128
 1010f78:	10801720 	cmpeqi	r2,r2,92
 1010f7c:	1000351e 	bne	r2,zero,1011054 <check_file_name_for_FAT16_compliance+0x174>
 1010f80:	e0bffd17 	ldw	r2,-12(fp)
 1010f84:	1007883a 	mov	r3,r2
 1010f88:	e0bfff17 	ldw	r2,-4(fp)
 1010f8c:	1885883a 	add	r2,r3,r2
 1010f90:	10800003 	ldbu	r2,0(r2)
 1010f94:	10803fcc 	andi	r2,r2,255
 1010f98:	1080201c 	xori	r2,r2,128
 1010f9c:	10bfe004 	addi	r2,r2,-128
 1010fa0:	10800be0 	cmpeqi	r2,r2,47
 1010fa4:	10002b1e 	bne	r2,zero,1011054 <check_file_name_for_FAT16_compliance+0x174>
 1010fa8:	e0fffd17 	ldw	r3,-12(fp)
 1010fac:	e0bffb17 	ldw	r2,-20(fp)
 1010fb0:	1885c83a 	sub	r2,r3,r2
 1010fb4:	10800258 	cmpnei	r2,r2,9
 1010fb8:	10000a1e 	bne	r2,zero,1010fe4 <check_file_name_for_FAT16_compliance+0x104>
 1010fbc:	e0bffd17 	ldw	r2,-12(fp)
 1010fc0:	1007883a 	mov	r3,r2
 1010fc4:	e0bfff17 	ldw	r2,-4(fp)
 1010fc8:	1885883a 	add	r2,r3,r2
 1010fcc:	10800003 	ldbu	r2,0(r2)
 1010fd0:	10803fcc 	andi	r2,r2,255
 1010fd4:	1080201c 	xori	r2,r2,128
 1010fd8:	10bfe004 	addi	r2,r2,-128
 1010fdc:	10800b98 	cmpnei	r2,r2,46
 1010fe0:	10001c1e 	bne	r2,zero,1011054 <check_file_name_for_FAT16_compliance+0x174>
 1010fe4:	e0fffc17 	ldw	r3,-16(fp)
 1010fe8:	e0bffb17 	ldw	r2,-20(fp)
 1010fec:	18801b26 	beq	r3,r2,101105c <check_file_name_for_FAT16_compliance+0x17c>
 1010ff0:	e0fffd17 	ldw	r3,-12(fp)
 1010ff4:	e0bffb17 	ldw	r2,-20(fp)
 1010ff8:	1885c83a 	sub	r2,r3,r2
 1010ffc:	10800110 	cmplti	r2,r2,4
 1011000:	1000161e 	bne	r2,zero,101105c <check_file_name_for_FAT16_compliance+0x17c>
 1011004:	e0bffd17 	ldw	r2,-12(fp)
 1011008:	1007883a 	mov	r3,r2
 101100c:	e0bfff17 	ldw	r2,-4(fp)
 1011010:	1885883a 	add	r2,r3,r2
 1011014:	10800003 	ldbu	r2,0(r2)
 1011018:	10803fcc 	andi	r2,r2,255
 101101c:	1080201c 	xori	r2,r2,128
 1011020:	10bfe004 	addi	r2,r2,-128
 1011024:	10801720 	cmpeqi	r2,r2,92
 1011028:	10000c1e 	bne	r2,zero,101105c <check_file_name_for_FAT16_compliance+0x17c>
 101102c:	e0bffd17 	ldw	r2,-12(fp)
 1011030:	1007883a 	mov	r3,r2
 1011034:	e0bfff17 	ldw	r2,-4(fp)
 1011038:	1885883a 	add	r2,r3,r2
 101103c:	10800003 	ldbu	r2,0(r2)
 1011040:	10803fcc 	andi	r2,r2,255
 1011044:	1080201c 	xori	r2,r2,128
 1011048:	10bfe004 	addi	r2,r2,-128
 101104c:	10800be0 	cmpeqi	r2,r2,47
 1011050:	1000021e 	bne	r2,zero,101105c <check_file_name_for_FAT16_compliance+0x17c>
				|| ((index - last_period == 9) && (file_name[index] != '.'))
				|| ((last_dir_break_position != last_period)
						&& (index - last_period > 3)
						&& (file_name[index] != '\\')
						&& (file_name[index] != '/'))) {
			result = false;
 1011054:	e03ffa15 	stw	zero,-24(fp)
			break;
 1011058:	00002a06 	br	1011104 <check_file_name_for_FAT16_compliance+0x224>
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
 101105c:	e0bffd17 	ldw	r2,-12(fp)
 1011060:	1007883a 	mov	r3,r2
 1011064:	e0bfff17 	ldw	r2,-4(fp)
 1011068:	1885883a 	add	r2,r3,r2
 101106c:	10800003 	ldbu	r2,0(r2)
 1011070:	10803fcc 	andi	r2,r2,255
 1011074:	1080201c 	xori	r2,r2,128
 1011078:	10bfe004 	addi	r2,r2,-128
 101107c:	10801720 	cmpeqi	r2,r2,92
 1011080:	10000a1e 	bne	r2,zero,10110ac <check_file_name_for_FAT16_compliance+0x1cc>
 1011084:	e0bffd17 	ldw	r2,-12(fp)
 1011088:	1007883a 	mov	r3,r2
 101108c:	e0bfff17 	ldw	r2,-4(fp)
 1011090:	1885883a 	add	r2,r3,r2
 1011094:	10800003 	ldbu	r2,0(r2)
 1011098:	10803fcc 	andi	r2,r2,255
 101109c:	1080201c 	xori	r2,r2,128
 10110a0:	10bfe004 	addi	r2,r2,-128
 10110a4:	10800bd8 	cmpnei	r2,r2,47
 10110a8:	1000041e 	bne	r2,zero,10110bc <check_file_name_for_FAT16_compliance+0x1dc>
			last_period = index;
 10110ac:	e0bffd17 	ldw	r2,-12(fp)
 10110b0:	e0bffb15 	stw	r2,-20(fp)
			last_dir_break_position = index;
 10110b4:	e0bffd17 	ldw	r2,-12(fp)
 10110b8:	e0bffc15 	stw	r2,-16(fp)
		}
		if (file_name[index] == '.') {
 10110bc:	e0bffd17 	ldw	r2,-12(fp)
 10110c0:	1007883a 	mov	r3,r2
 10110c4:	e0bfff17 	ldw	r2,-4(fp)
 10110c8:	1885883a 	add	r2,r3,r2
 10110cc:	10800003 	ldbu	r2,0(r2)
 10110d0:	10803fcc 	andi	r2,r2,255
 10110d4:	1080201c 	xori	r2,r2,128
 10110d8:	10bfe004 	addi	r2,r2,-128
 10110dc:	10800b98 	cmpnei	r2,r2,46
 10110e0:	1000021e 	bne	r2,zero,10110ec <check_file_name_for_FAT16_compliance+0x20c>
			last_period = index;
 10110e4:	e0bffd17 	ldw	r2,-12(fp)
 10110e8:	e0bffb15 	stw	r2,-20(fp)
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
 10110ec:	e0bffd17 	ldw	r2,-12(fp)
 10110f0:	10800044 	addi	r2,r2,1
 10110f4:	e0bffd15 	stw	r2,-12(fp)
 10110f8:	e0fffd17 	ldw	r3,-12(fp)
 10110fc:	e0bffe17 	ldw	r2,-8(fp)
 1011100:	18bf8716 	blt	r3,r2,1010f20 <check_file_name_for_FAT16_compliance+0x40>
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
 1011104:	e0fffe17 	ldw	r3,-8(fp)
 1011108:	e0bfff17 	ldw	r2,-4(fp)
 101110c:	1885883a 	add	r2,r3,r2
 1011110:	10bfffc4 	addi	r2,r2,-1
 1011114:	10800003 	ldbu	r2,0(r2)
 1011118:	10803fcc 	andi	r2,r2,255
 101111c:	1080201c 	xori	r2,r2,128
 1011120:	10bfe004 	addi	r2,r2,-128
 1011124:	10801720 	cmpeqi	r2,r2,92
 1011128:	10000a1e 	bne	r2,zero,1011154 <check_file_name_for_FAT16_compliance+0x274>
 101112c:	e0fffe17 	ldw	r3,-8(fp)
 1011130:	e0bfff17 	ldw	r2,-4(fp)
 1011134:	1885883a 	add	r2,r3,r2
 1011138:	10bfffc4 	addi	r2,r2,-1
 101113c:	10800003 	ldbu	r2,0(r2)
 1011140:	10803fcc 	andi	r2,r2,255
 1011144:	1080201c 	xori	r2,r2,128
 1011148:	10bfe004 	addi	r2,r2,-128
 101114c:	10800bd8 	cmpnei	r2,r2,47
 1011150:	1000011e 	bne	r2,zero,1011158 <check_file_name_for_FAT16_compliance+0x278>
		result = false;
 1011154:	e03ffa15 	stw	zero,-24(fp)
	}
	return result;
 1011158:	e0bffa17 	ldw	r2,-24(fp)
}
 101115c:	e037883a 	mov	sp,fp
 1011160:	dfc00117 	ldw	ra,4(sp)
 1011164:	df000017 	ldw	fp,0(sp)
 1011168:	dec00204 	addi	sp,sp,8
 101116c:	f800283a 	ret

01011170 <get_dir_divider_location>:

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
 1011170:	defffb04 	addi	sp,sp,-20
 1011174:	dfc00415 	stw	ra,16(sp)
 1011178:	df000315 	stw	fp,12(sp)
 101117c:	df000304 	addi	fp,sp,12
 1011180:	e13fff15 	stw	r4,-4(fp)
	int index = 0;
 1011184:	e03ffe15 	stw	zero,-8(fp)
	int length = strlen(name);
 1011188:	e13fff17 	ldw	r4,-4(fp)
 101118c:	10006900 	call	1000690 <strlen>
 1011190:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
 1011194:	e03ffe15 	stw	zero,-8(fp)
 1011198:	00001706 	br	10111f8 <get_dir_divider_location+0x88>
		if ((name[index] == '\\') || (name[index] == '/')) {
 101119c:	e0bffe17 	ldw	r2,-8(fp)
 10111a0:	1007883a 	mov	r3,r2
 10111a4:	e0bfff17 	ldw	r2,-4(fp)
 10111a8:	1885883a 	add	r2,r3,r2
 10111ac:	10800003 	ldbu	r2,0(r2)
 10111b0:	10803fcc 	andi	r2,r2,255
 10111b4:	1080201c 	xori	r2,r2,128
 10111b8:	10bfe004 	addi	r2,r2,-128
 10111bc:	10801720 	cmpeqi	r2,r2,92
 10111c0:	1000101e 	bne	r2,zero,1011204 <get_dir_divider_location+0x94>
 10111c4:	e0bffe17 	ldw	r2,-8(fp)
 10111c8:	1007883a 	mov	r3,r2
 10111cc:	e0bfff17 	ldw	r2,-4(fp)
 10111d0:	1885883a 	add	r2,r3,r2
 10111d4:	10800003 	ldbu	r2,0(r2)
 10111d8:	10803fcc 	andi	r2,r2,255
 10111dc:	1080201c 	xori	r2,r2,128
 10111e0:	10bfe004 	addi	r2,r2,-128
 10111e4:	10800be0 	cmpeqi	r2,r2,47
 10111e8:	1000061e 	bne	r2,zero,1011204 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
 10111ec:	e0bffe17 	ldw	r2,-8(fp)
 10111f0:	10800044 	addi	r2,r2,1
 10111f4:	e0bffe15 	stw	r2,-8(fp)
 10111f8:	e0fffe17 	ldw	r3,-8(fp)
 10111fc:	e0bffd17 	ldw	r2,-12(fp)
 1011200:	18bfe616 	blt	r3,r2,101119c <get_dir_divider_location+0x2c>
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
 1011204:	e0fffe17 	ldw	r3,-8(fp)
 1011208:	e0bffd17 	ldw	r2,-12(fp)
 101120c:	1880021e 	bne	r3,r2,1011218 <get_dir_divider_location+0xa8>
		index = -1;
 1011210:	00bfffc4 	movi	r2,-1
 1011214:	e0bffe15 	stw	r2,-8(fp)
	}

	return index;
 1011218:	e0bffe17 	ldw	r2,-8(fp)
}
 101121c:	e037883a 	mov	sp,fp
 1011220:	dfc00117 	ldw	ra,4(sp)
 1011224:	df000017 	ldw	fp,0(sp)
 1011228:	dec00204 	addi	sp,sp,8
 101122c:	f800283a 	ret

01011230 <match_file_record_to_name_ext>:

bool match_file_record_to_name_ext(t_file_record *file_record, char *name,
		char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
 1011230:	defff604 	addi	sp,sp,-40
 1011234:	df000915 	stw	fp,36(sp)
 1011238:	df000904 	addi	fp,sp,36
 101123c:	e13ff915 	stw	r4,-28(fp)
 1011240:	e17ffa15 	stw	r5,-24(fp)
 1011244:	e1bffb15 	stw	r6,-20(fp)
	bool match = true;
 1011248:	00800044 	movi	r2,1
 101124c:	e0bff815 	stw	r2,-32(fp)
	int index;

	for (index = 0; index < 8; index++) {
 1011250:	e03ff715 	stw	zero,-36(fp)
 1011254:	00005006 	br	1011398 <match_file_record_to_name_ext+0x168>
		if (CHAR_TO_UPPER(file_record->name[index])
 1011258:	e0fff717 	ldw	r3,-36(fp)
 101125c:	e0bff917 	ldw	r2,-28(fp)
 1011260:	10c5883a 	add	r2,r2,r3
 1011264:	10800003 	ldbu	r2,0(r2)
 1011268:	10803fcc 	andi	r2,r2,255
 101126c:	10801870 	cmpltui	r2,r2,97
 1011270:	1000111e 	bne	r2,zero,10112b8 <match_file_record_to_name_ext+0x88>
 1011274:	e0fff717 	ldw	r3,-36(fp)
 1011278:	e0bff917 	ldw	r2,-28(fp)
 101127c:	10c5883a 	add	r2,r2,r3
 1011280:	10800003 	ldbu	r2,0(r2)
 1011284:	10803fcc 	andi	r2,r2,255
 1011288:	10801ee8 	cmpgeui	r2,r2,123
 101128c:	10000a1e 	bne	r2,zero,10112b8 <match_file_record_to_name_ext+0x88>
 1011290:	e0fff717 	ldw	r3,-36(fp)
 1011294:	e0bff917 	ldw	r2,-28(fp)
 1011298:	10c5883a 	add	r2,r2,r3
 101129c:	10800003 	ldbu	r2,0(r2)
 10112a0:	10bff804 	addi	r2,r2,-32
 10112a4:	10803fcc 	andi	r2,r2,255
 10112a8:	1080201c 	xori	r2,r2,128
 10112ac:	10bfe004 	addi	r2,r2,-128
 10112b0:	e0bfff15 	stw	r2,-4(fp)
 10112b4:	00000806 	br	10112d8 <match_file_record_to_name_ext+0xa8>
 10112b8:	e0fff717 	ldw	r3,-36(fp)
 10112bc:	e0bff917 	ldw	r2,-28(fp)
 10112c0:	10c5883a 	add	r2,r2,r3
 10112c4:	10800003 	ldbu	r2,0(r2)
 10112c8:	10803fcc 	andi	r2,r2,255
 10112cc:	1080201c 	xori	r2,r2,128
 10112d0:	10bfe004 	addi	r2,r2,-128
 10112d4:	e0bfff15 	stw	r2,-4(fp)
 10112d8:	e0bff717 	ldw	r2,-36(fp)
 10112dc:	1007883a 	mov	r3,r2
 10112e0:	e0bffa17 	ldw	r2,-24(fp)
 10112e4:	1885883a 	add	r2,r3,r2
 10112e8:	10800003 	ldbu	r2,0(r2)
 10112ec:	10803fcc 	andi	r2,r2,255
 10112f0:	1080201c 	xori	r2,r2,128
 10112f4:	10bfe004 	addi	r2,r2,-128
 10112f8:	10801850 	cmplti	r2,r2,97
 10112fc:	1000151e 	bne	r2,zero,1011354 <match_file_record_to_name_ext+0x124>
 1011300:	e0bff717 	ldw	r2,-36(fp)
 1011304:	1007883a 	mov	r3,r2
 1011308:	e0bffa17 	ldw	r2,-24(fp)
 101130c:	1885883a 	add	r2,r3,r2
 1011310:	10800003 	ldbu	r2,0(r2)
 1011314:	10803fcc 	andi	r2,r2,255
 1011318:	1080201c 	xori	r2,r2,128
 101131c:	10bfe004 	addi	r2,r2,-128
 1011320:	10801ec8 	cmpgei	r2,r2,123
 1011324:	10000b1e 	bne	r2,zero,1011354 <match_file_record_to_name_ext+0x124>
 1011328:	e0bff717 	ldw	r2,-36(fp)
 101132c:	1007883a 	mov	r3,r2
 1011330:	e0bffa17 	ldw	r2,-24(fp)
 1011334:	1885883a 	add	r2,r3,r2
 1011338:	10800003 	ldbu	r2,0(r2)
 101133c:	10bff804 	addi	r2,r2,-32
 1011340:	10803fcc 	andi	r2,r2,255
 1011344:	1080201c 	xori	r2,r2,128
 1011348:	10bfe004 	addi	r2,r2,-128
 101134c:	e0bffe15 	stw	r2,-8(fp)
 1011350:	00000906 	br	1011378 <match_file_record_to_name_ext+0x148>
 1011354:	e0bff717 	ldw	r2,-36(fp)
 1011358:	1007883a 	mov	r3,r2
 101135c:	e0bffa17 	ldw	r2,-24(fp)
 1011360:	1885883a 	add	r2,r3,r2
 1011364:	10800003 	ldbu	r2,0(r2)
 1011368:	10803fcc 	andi	r2,r2,255
 101136c:	1080201c 	xori	r2,r2,128
 1011370:	10bfe004 	addi	r2,r2,-128
 1011374:	e0bffe15 	stw	r2,-8(fp)
 1011378:	e0bfff17 	ldw	r2,-4(fp)
 101137c:	e0fffe17 	ldw	r3,-8(fp)
 1011380:	10c00226 	beq	r2,r3,101138c <match_file_record_to_name_ext+0x15c>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
 1011384:	e03ff815 	stw	zero,-32(fp)
			break;
 1011388:	00000606 	br	10113a4 <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
 101138c:	e0bff717 	ldw	r2,-36(fp)
 1011390:	10800044 	addi	r2,r2,1
 1011394:	e0bff715 	stw	r2,-36(fp)
 1011398:	e0bff717 	ldw	r2,-36(fp)
 101139c:	10800210 	cmplti	r2,r2,8
 10113a0:	103fad1e 	bne	r2,zero,1011258 <match_file_record_to_name_ext+0x28>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
 10113a4:	e03ff715 	stw	zero,-36(fp)
 10113a8:	00005406 	br	10114fc <match_file_record_to_name_ext+0x2cc>
		if (CHAR_TO_UPPER(file_record->extension[index])
 10113ac:	e0fff717 	ldw	r3,-36(fp)
 10113b0:	e0bff917 	ldw	r2,-28(fp)
 10113b4:	1885883a 	add	r2,r3,r2
 10113b8:	10800204 	addi	r2,r2,8
 10113bc:	10800003 	ldbu	r2,0(r2)
 10113c0:	10803fcc 	andi	r2,r2,255
 10113c4:	10801870 	cmpltui	r2,r2,97
 10113c8:	1000131e 	bne	r2,zero,1011418 <match_file_record_to_name_ext+0x1e8>
 10113cc:	e0fff717 	ldw	r3,-36(fp)
 10113d0:	e0bff917 	ldw	r2,-28(fp)
 10113d4:	1885883a 	add	r2,r3,r2
 10113d8:	10800204 	addi	r2,r2,8
 10113dc:	10800003 	ldbu	r2,0(r2)
 10113e0:	10803fcc 	andi	r2,r2,255
 10113e4:	10801ee8 	cmpgeui	r2,r2,123
 10113e8:	10000b1e 	bne	r2,zero,1011418 <match_file_record_to_name_ext+0x1e8>
 10113ec:	e0fff717 	ldw	r3,-36(fp)
 10113f0:	e0bff917 	ldw	r2,-28(fp)
 10113f4:	1885883a 	add	r2,r3,r2
 10113f8:	10800204 	addi	r2,r2,8
 10113fc:	10800003 	ldbu	r2,0(r2)
 1011400:	10bff804 	addi	r2,r2,-32
 1011404:	10803fcc 	andi	r2,r2,255
 1011408:	1080201c 	xori	r2,r2,128
 101140c:	10bfe004 	addi	r2,r2,-128
 1011410:	e0bffd15 	stw	r2,-12(fp)
 1011414:	00000906 	br	101143c <match_file_record_to_name_ext+0x20c>
 1011418:	e0fff717 	ldw	r3,-36(fp)
 101141c:	e0bff917 	ldw	r2,-28(fp)
 1011420:	1885883a 	add	r2,r3,r2
 1011424:	10800204 	addi	r2,r2,8
 1011428:	10800003 	ldbu	r2,0(r2)
 101142c:	10803fcc 	andi	r2,r2,255
 1011430:	1080201c 	xori	r2,r2,128
 1011434:	10bfe004 	addi	r2,r2,-128
 1011438:	e0bffd15 	stw	r2,-12(fp)
 101143c:	e0bff717 	ldw	r2,-36(fp)
 1011440:	1007883a 	mov	r3,r2
 1011444:	e0bffb17 	ldw	r2,-20(fp)
 1011448:	1885883a 	add	r2,r3,r2
 101144c:	10800003 	ldbu	r2,0(r2)
 1011450:	10803fcc 	andi	r2,r2,255
 1011454:	1080201c 	xori	r2,r2,128
 1011458:	10bfe004 	addi	r2,r2,-128
 101145c:	10801850 	cmplti	r2,r2,97
 1011460:	1000151e 	bne	r2,zero,10114b8 <match_file_record_to_name_ext+0x288>
 1011464:	e0bff717 	ldw	r2,-36(fp)
 1011468:	1007883a 	mov	r3,r2
 101146c:	e0bffb17 	ldw	r2,-20(fp)
 1011470:	1885883a 	add	r2,r3,r2
 1011474:	10800003 	ldbu	r2,0(r2)
 1011478:	10803fcc 	andi	r2,r2,255
 101147c:	1080201c 	xori	r2,r2,128
 1011480:	10bfe004 	addi	r2,r2,-128
 1011484:	10801ec8 	cmpgei	r2,r2,123
 1011488:	10000b1e 	bne	r2,zero,10114b8 <match_file_record_to_name_ext+0x288>
 101148c:	e0bff717 	ldw	r2,-36(fp)
 1011490:	1007883a 	mov	r3,r2
 1011494:	e0bffb17 	ldw	r2,-20(fp)
 1011498:	1885883a 	add	r2,r3,r2
 101149c:	10800003 	ldbu	r2,0(r2)
 10114a0:	10bff804 	addi	r2,r2,-32
 10114a4:	10803fcc 	andi	r2,r2,255
 10114a8:	1080201c 	xori	r2,r2,128
 10114ac:	10bfe004 	addi	r2,r2,-128
 10114b0:	e0bffc15 	stw	r2,-16(fp)
 10114b4:	00000906 	br	10114dc <match_file_record_to_name_ext+0x2ac>
 10114b8:	e0bff717 	ldw	r2,-36(fp)
 10114bc:	1007883a 	mov	r3,r2
 10114c0:	e0bffb17 	ldw	r2,-20(fp)
 10114c4:	1885883a 	add	r2,r3,r2
 10114c8:	10800003 	ldbu	r2,0(r2)
 10114cc:	10803fcc 	andi	r2,r2,255
 10114d0:	1080201c 	xori	r2,r2,128
 10114d4:	10bfe004 	addi	r2,r2,-128
 10114d8:	e0bffc15 	stw	r2,-16(fp)
 10114dc:	e0bffd17 	ldw	r2,-12(fp)
 10114e0:	e0fffc17 	ldw	r3,-16(fp)
 10114e4:	10c00226 	beq	r2,r3,10114f0 <match_file_record_to_name_ext+0x2c0>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
 10114e8:	e03ff815 	stw	zero,-32(fp)
			break;
 10114ec:	00000606 	br	1011508 <match_file_record_to_name_ext+0x2d8>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
 10114f0:	e0bff717 	ldw	r2,-36(fp)
 10114f4:	10800044 	addi	r2,r2,1
 10114f8:	e0bff715 	stw	r2,-36(fp)
 10114fc:	e0bff717 	ldw	r2,-36(fp)
 1011500:	108000d0 	cmplti	r2,r2,3
 1011504:	103fa91e 	bne	r2,zero,10113ac <match_file_record_to_name_ext+0x17c>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
			break;
		}
	}
	return match;
 1011508:	e0bff817 	ldw	r2,-32(fp)
}
 101150c:	e037883a 	mov	sp,fp
 1011510:	df000017 	ldw	fp,0(sp)
 1011514:	dec00104 	addi	sp,sp,4
 1011518:	f800283a 	ret

0101151c <get_home_directory_cluster_for_file>:

bool get_home_directory_cluster_for_file(char *file_name,
		int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
 101151c:	deffe604 	addi	sp,sp,-104
 1011520:	dfc01915 	stw	ra,100(sp)
 1011524:	df001815 	stw	fp,96(sp)
 1011528:	df001804 	addi	fp,sp,96
 101152c:	e13ffc15 	stw	r4,-16(fp)
 1011530:	e17ffd15 	stw	r5,-12(fp)
 1011534:	e1bffe15 	stw	r6,-8(fp)
	bool result = false;
 1011538:	e03ff715 	stw	zero,-36(fp)
	int home_dir_cluster = 0;
 101153c:	e03ff615 	stw	zero,-40(fp)
	int location, index;
	int start_location = 0;
 1011540:	e03ff315 	stw	zero,-52(fp)

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
 1011544:	e13ffc17 	ldw	r4,-16(fp)
 1011548:	10111700 	call	1011170 <get_dir_divider_location>
 101154c:	e0bff515 	stw	r2,-44(fp)
	while (location > 0) {
 1011550:	00012206 	br	10119dc <get_home_directory_cluster_for_file+0x4c0>
		char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 1011554:	00800804 	movi	r2,32
 1011558:	e0bff805 	stb	r2,-32(fp)
 101155c:	00800804 	movi	r2,32
 1011560:	e0bff845 	stb	r2,-31(fp)
 1011564:	00800804 	movi	r2,32
 1011568:	e0bff885 	stb	r2,-30(fp)
 101156c:	00800804 	movi	r2,32
 1011570:	e0bff8c5 	stb	r2,-29(fp)
 1011574:	00800804 	movi	r2,32
 1011578:	e0bff905 	stb	r2,-28(fp)
 101157c:	00800804 	movi	r2,32
 1011580:	e0bff945 	stb	r2,-27(fp)
 1011584:	00800804 	movi	r2,32
 1011588:	e0bff985 	stb	r2,-26(fp)
 101158c:	00800804 	movi	r2,32
 1011590:	e0bff9c5 	stb	r2,-25(fp)
		char extension[3] = { ' ', ' ', ' ' };
 1011594:	00800804 	movi	r2,32
 1011598:	e0bffa05 	stb	r2,-24(fp)
 101159c:	00800804 	movi	r2,32
 10115a0:	e0bffa45 	stb	r2,-23(fp)
 10115a4:	00800804 	movi	r2,32
 10115a8:	e0bffa85 	stb	r2,-22(fp)
		int ext_index = -1;
 10115ac:	00bfffc4 	movi	r2,-1
 10115b0:	e0bff215 	stw	r2,-56(fp)
		int new_cluster = home_dir_cluster;
 10115b4:	e0bff617 	ldw	r2,-40(fp)
 10115b8:	e0bff115 	stw	r2,-60(fp)

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
 10115bc:	e03ff415 	stw	zero,-48(fp)
 10115c0:	00002e06 	br	101167c <get_home_directory_cluster_for_file+0x160>
			if (file_name[index + start_location] == '.') {
 10115c4:	e0fff417 	ldw	r3,-48(fp)
 10115c8:	e0bff317 	ldw	r2,-52(fp)
 10115cc:	1885883a 	add	r2,r3,r2
 10115d0:	1007883a 	mov	r3,r2
 10115d4:	e0bffc17 	ldw	r2,-16(fp)
 10115d8:	1885883a 	add	r2,r3,r2
 10115dc:	10800003 	ldbu	r2,0(r2)
 10115e0:	10803fcc 	andi	r2,r2,255
 10115e4:	1080201c 	xori	r2,r2,128
 10115e8:	10bfe004 	addi	r2,r2,-128
 10115ec:	10800b98 	cmpnei	r2,r2,46
 10115f0:	1000031e 	bne	r2,zero,1011600 <get_home_directory_cluster_for_file+0xe4>
				ext_index = index;
 10115f4:	e0bff417 	ldw	r2,-48(fp)
 10115f8:	e0bff215 	stw	r2,-56(fp)
 10115fc:	00001c06 	br	1011670 <get_home_directory_cluster_for_file+0x154>
			} else if (ext_index < 0) {
 1011600:	e0bff217 	ldw	r2,-56(fp)
 1011604:	1004403a 	cmpge	r2,r2,zero
 1011608:	10000c1e 	bne	r2,zero,101163c <get_home_directory_cluster_for_file+0x120>
				name[index] = file_name[index + start_location];
 101160c:	e13ff417 	ldw	r4,-48(fp)
 1011610:	e0fff417 	ldw	r3,-48(fp)
 1011614:	e0bff317 	ldw	r2,-52(fp)
 1011618:	1885883a 	add	r2,r3,r2
 101161c:	1007883a 	mov	r3,r2
 1011620:	e0bffc17 	ldw	r2,-16(fp)
 1011624:	1885883a 	add	r2,r3,r2
 1011628:	10c00003 	ldbu	r3,0(r2)
 101162c:	e0bff804 	addi	r2,fp,-32
 1011630:	1105883a 	add	r2,r2,r4
 1011634:	10c00005 	stb	r3,0(r2)
 1011638:	00000d06 	br	1011670 <get_home_directory_cluster_for_file+0x154>
			} else {
				extension[index - ext_index] =
 101163c:	e0fff417 	ldw	r3,-48(fp)
 1011640:	e0bff217 	ldw	r2,-56(fp)
 1011644:	1889c83a 	sub	r4,r3,r2
 1011648:	e0fff417 	ldw	r3,-48(fp)
 101164c:	e0bff317 	ldw	r2,-52(fp)
 1011650:	1885883a 	add	r2,r3,r2
 1011654:	1007883a 	mov	r3,r2
 1011658:	e0bffc17 	ldw	r2,-16(fp)
 101165c:	1885883a 	add	r2,r3,r2
 1011660:	10c00003 	ldbu	r3,0(r2)
 1011664:	e0bffa04 	addi	r2,fp,-24
 1011668:	1105883a 	add	r2,r2,r4
 101166c:	10c00005 	stb	r3,0(r2)
		char extension[3] = { ' ', ' ', ' ' };
		int ext_index = -1;
		int new_cluster = home_dir_cluster;

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
 1011670:	e0bff417 	ldw	r2,-48(fp)
 1011674:	10800044 	addi	r2,r2,1
 1011678:	e0bff415 	stw	r2,-48(fp)
 101167c:	e0fff417 	ldw	r3,-48(fp)
 1011680:	e0bff517 	ldw	r2,-44(fp)
 1011684:	18bfcf16 	blt	r3,r2,10115c4 <get_home_directory_cluster_for_file+0xa8>
				extension[index - ext_index] =
						file_name[index + start_location];
			}
		}

		if (home_dir_cluster == 0) {
 1011688:	e0bff617 	ldw	r2,-40(fp)
 101168c:	1004c03a 	cmpne	r2,r2,zero
 1011690:	1000551e 	bne	r2,zero,10117e8 <get_home_directory_cluster_for_file+0x2cc>
			/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
 1011694:	008040b4 	movhi	r2,258
 1011698:	10b03404 	addi	r2,r2,-16176
 101169c:	1080050b 	ldhu	r2,20(r2)
 10116a0:	10bfffcc 	andi	r2,r2,65535
 10116a4:	1006917a 	slli	r3,r2,5
 10116a8:	008040b4 	movhi	r2,258
 10116ac:	10b03404 	addi	r2,r2,-16176
 10116b0:	1080030b 	ldhu	r2,12(r2)
 10116b4:	10bfffcc 	andi	r2,r2,65535
 10116b8:	1885283a 	div	r2,r3,r2
 10116bc:	e0bff015 	stw	r2,-64(fp)
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
 10116c0:	e03fef15 	stw	zero,-68(fp)
 10116c4:	00003806 	br	10117a8 <get_home_directory_cluster_for_file+0x28c>
					sector_index++) {
				if (Read_Sector_Data(
 10116c8:	008040b4 	movhi	r2,258
 10116cc:	10b03404 	addi	r2,r2,-16176
 10116d0:	10c01317 	ldw	r3,76(r2)
 10116d4:	e0bfef17 	ldw	r2,-68(fp)
 10116d8:	1885883a 	add	r2,r3,r2
 10116dc:	1009883a 	mov	r4,r2
 10116e0:	d166e617 	ldw	r5,-25704(gp)
 10116e4:	100fd480 	call	100fd48 <Read_Sector_Data>
 10116e8:	1005003a 	cmpeq	r2,r2,zero
 10116ec:	1000311e 	bne	r2,zero,10117b4 <get_home_directory_cluster_for_file+0x298>
						sector_index
								+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 10116f0:	e03fee15 	stw	zero,-72(fp)
 10116f4:	00002306 	br	1011784 <get_home_directory_cluster_for_file+0x268>

						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
 10116f8:	e0bfee17 	ldw	r2,-72(fp)
 10116fc:	1008917a 	slli	r4,r2,5
 1011700:	e1ffef17 	ldw	r7,-68(fp)
 1011704:	e17ffe17 	ldw	r5,-8(fp)
 1011708:	000d883a 	mov	r6,zero
 101170c:	10101900 	call	1010190 <Read_File_Record_At_Offset>
								file_record, 0, sector_index);
						if ((file_record->name[0] != 0xe5)
 1011710:	e0bffe17 	ldw	r2,-8(fp)
 1011714:	10800003 	ldbu	r2,0(r2)
 1011718:	10803fcc 	andi	r2,r2,255
 101171c:	10803960 	cmpeqi	r2,r2,229
 1011720:	1000151e 	bne	r2,zero,1011778 <get_home_directory_cluster_for_file+0x25c>
 1011724:	e0bffe17 	ldw	r2,-8(fp)
 1011728:	10800003 	ldbu	r2,0(r2)
 101172c:	10803fcc 	andi	r2,r2,255
 1011730:	1005003a 	cmpeq	r2,r2,zero
 1011734:	1000101e 	bne	r2,zero,1011778 <get_home_directory_cluster_for_file+0x25c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
 1011738:	e17ff804 	addi	r5,fp,-32
 101173c:	e1bffa04 	addi	r6,fp,-24
 1011740:	e13ffe17 	ldw	r4,-8(fp)
 1011744:	10112300 	call	1011230 <match_file_record_to_name_ext>
 1011748:	e0bfed15 	stw	r2,-76(fp)
							if (match) {
 101174c:	e0bfed17 	ldw	r2,-76(fp)
 1011750:	1005003a 	cmpeq	r2,r2,zero
 1011754:	1000081e 	bne	r2,zero,1011778 <get_home_directory_cluster_for_file+0x25c>
								new_cluster = file_record->start_cluster_index;
 1011758:	e0bffe17 	ldw	r2,-8(fp)
 101175c:	1080058b 	ldhu	r2,22(r2)
 1011760:	10bfffcc 	andi	r2,r2,65535
 1011764:	e0bff115 	stw	r2,-60(fp)
								file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
 1011768:	e0fffe17 	ldw	r3,-8(fp)
 101176c:	00800044 	movi	r2,1
 1011770:	18800a15 	stw	r2,40(r3)
								break;
 1011774:	00000606 	br	1011790 <get_home_directory_cluster_for_file+0x274>
						sector_index
								+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 1011778:	e0bfee17 	ldw	r2,-72(fp)
 101177c:	10800044 	addi	r2,r2,1
 1011780:	e0bfee15 	stw	r2,-72(fp)
 1011784:	e0bfee17 	ldw	r2,-72(fp)
 1011788:	10800410 	cmplti	r2,r2,16
 101178c:	103fda1e 	bne	r2,zero,10116f8 <get_home_directory_cluster_for_file+0x1dc>
						}
					}
				} else {
					break;
				}
				if (new_cluster != home_dir_cluster) {
 1011790:	e0fff117 	ldw	r3,-60(fp)
 1011794:	e0bff617 	ldw	r2,-40(fp)
 1011798:	1880061e 	bne	r3,r2,10117b4 <get_home_directory_cluster_for_file+0x298>
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
					sector_index++) {
 101179c:	e0bfef17 	ldw	r2,-68(fp)
 10117a0:	10800044 	addi	r2,r2,1
 10117a4:	e0bfef15 	stw	r2,-68(fp)
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
 10117a8:	e0ffef17 	ldw	r3,-68(fp)
 10117ac:	e0bff017 	ldw	r2,-64(fp)
 10117b0:	18bfc516 	blt	r3,r2,10116c8 <get_home_directory_cluster_for_file+0x1ac>
				}
				if (new_cluster != home_dir_cluster) {
					break;
				}
			}
			if (new_cluster != home_dir_cluster) {
 10117b4:	e0fff117 	ldw	r3,-60(fp)
 10117b8:	e0bff617 	ldw	r2,-40(fp)
 10117bc:	18800826 	beq	r3,r2,10117e0 <get_home_directory_cluster_for_file+0x2c4>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
 10117c0:	e0bff117 	ldw	r2,-60(fp)
 10117c4:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
 10117c8:	e0fff317 	ldw	r3,-52(fp)
 10117cc:	e0bff517 	ldw	r2,-44(fp)
 10117d0:	1885883a 	add	r2,r3,r2
 10117d4:	10800044 	addi	r2,r2,1
 10117d8:	e0bff315 	stw	r2,-52(fp)
 10117dc:	00007406 	br	10119b0 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
 10117e0:	e03fff15 	stw	zero,-4(fp)
 10117e4:	00008c06 	br	1011a18 <get_home_directory_cluster_for_file+0x4fc>
			}
		} else {
			// This is a subdirectory that can have any number of elements. So scan through it as though it was a file
			// and see if you can find the directory of interest.
			int cluster = home_dir_cluster;
 10117e8:	e0bff617 	ldw	r2,-40(fp)
 10117ec:	e0bfec15 	stw	r2,-80(fp)

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
 10117f0:	e0bfec17 	ldw	r2,-80(fp)
 10117f4:	10ffff84 	addi	r3,r2,-2
 10117f8:	008040b4 	movhi	r2,258
 10117fc:	10b03404 	addi	r2,r2,-16176
 1011800:	10800383 	ldbu	r2,14(r2)
 1011804:	10803fcc 	andi	r2,r2,255
 1011808:	1885383a 	mul	r2,r3,r2
 101180c:	1007883a 	mov	r3,r2
 1011810:	008040b4 	movhi	r2,258
 1011814:	10b03404 	addi	r2,r2,-16176
 1011818:	10801417 	ldw	r2,80(r2)
 101181c:	1885883a 	add	r2,r3,r2
 1011820:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index;

				for (sector_index = 0;
 1011824:	e03fea15 	stw	zero,-88(fp)
						sector_index < boot_sector_data.sectors_per_cluster;
 1011828:	00003206 	br	10118f4 <get_home_directory_cluster_for_file+0x3d8>
						sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
 101182c:	e0ffea17 	ldw	r3,-88(fp)
 1011830:	e0bfeb17 	ldw	r2,-84(fp)
 1011834:	1889883a 	add	r4,r3,r2
 1011838:	d166e617 	ldw	r5,-25704(gp)
 101183c:	100fd480 	call	100fd48 <Read_Sector_Data>
 1011840:	1005003a 	cmpeq	r2,r2,zero
 1011844:	1000311e 	bne	r2,zero,101190c <get_home_directory_cluster_for_file+0x3f0>
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
 1011848:	e03fe915 	stw	zero,-92(fp)
 101184c:	00002006 	br	10118d0 <get_home_directory_cluster_for_file+0x3b4>
								file_counter++) {
							// Read file record.
							Read_File_Record_At_Offset(file_counter * 32,
 1011850:	e0bfe917 	ldw	r2,-92(fp)
 1011854:	1008917a 	slli	r4,r2,5
 1011858:	e1bfec17 	ldw	r6,-80(fp)
 101185c:	e1ffea17 	ldw	r7,-88(fp)
 1011860:	e17ffe17 	ldw	r5,-8(fp)
 1011864:	10101900 	call	1010190 <Read_File_Record_At_Offset>
									file_record, cluster, sector_index);
							if ((file_record->name[0] != 0xe5)
 1011868:	e0bffe17 	ldw	r2,-8(fp)
 101186c:	10800003 	ldbu	r2,0(r2)
 1011870:	10803fcc 	andi	r2,r2,255
 1011874:	10803960 	cmpeqi	r2,r2,229
 1011878:	1000121e 	bne	r2,zero,10118c4 <get_home_directory_cluster_for_file+0x3a8>
 101187c:	e0bffe17 	ldw	r2,-8(fp)
 1011880:	10800003 	ldbu	r2,0(r2)
 1011884:	10803fcc 	andi	r2,r2,255
 1011888:	1005003a 	cmpeq	r2,r2,zero
 101188c:	10000d1e 	bne	r2,zero,10118c4 <get_home_directory_cluster_for_file+0x3a8>
									&& (file_record->name[0] != 0x00)) {
								bool match = match_file_record_to_name_ext(
										file_record, name, extension);
 1011890:	e17ff804 	addi	r5,fp,-32
 1011894:	e1bffa04 	addi	r6,fp,-24
 1011898:	e13ffe17 	ldw	r4,-8(fp)
 101189c:	10112300 	call	1011230 <match_file_record_to_name_ext>
 10118a0:	e0bfe815 	stw	r2,-96(fp)
								if (match) {
 10118a4:	e0bfe817 	ldw	r2,-96(fp)
 10118a8:	1005003a 	cmpeq	r2,r2,zero
 10118ac:	1000051e 	bne	r2,zero,10118c4 <get_home_directory_cluster_for_file+0x3a8>
									new_cluster =
 10118b0:	e0bffe17 	ldw	r2,-8(fp)
 10118b4:	1080058b 	ldhu	r2,22(r2)
 10118b8:	10bfffcc 	andi	r2,r2,65535
 10118bc:	e0bff115 	stw	r2,-60(fp)
											file_record->start_cluster_index;
									break;
 10118c0:	00000606 	br	10118dc <get_home_directory_cluster_for_file+0x3c0>
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
								file_counter++) {
 10118c4:	e0bfe917 	ldw	r2,-92(fp)
 10118c8:	10800044 	addi	r2,r2,1
 10118cc:	e0bfe915 	stw	r2,-92(fp)
						sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
 10118d0:	e0bfe917 	ldw	r2,-92(fp)
 10118d4:	10800410 	cmplti	r2,r2,16
 10118d8:	103fdd1e 	bne	r2,zero,1011850 <get_home_directory_cluster_for_file+0x334>
							}
						}
					} else {
						break;
					}
					if (new_cluster != home_dir_cluster) {
 10118dc:	e0fff117 	ldw	r3,-60(fp)
 10118e0:	e0bff617 	ldw	r2,-40(fp)
 10118e4:	1880091e 	bne	r3,r2,101190c <get_home_directory_cluster_for_file+0x3f0>
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0;
						sector_index < boot_sector_data.sectors_per_cluster;
						sector_index++) {
 10118e8:	e0bfea17 	ldw	r2,-88(fp)
 10118ec:	10800044 	addi	r2,r2,1
 10118f0:	e0bfea15 	stw	r2,-88(fp)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0;
						sector_index < boot_sector_data.sectors_per_cluster;
 10118f4:	008040b4 	movhi	r2,258
 10118f8:	10b03404 	addi	r2,r2,-16176
 10118fc:	10800383 	ldbu	r2,14(r2)
 1011900:	10c03fcc 	andi	r3,r2,255
 1011904:	e0bfea17 	ldw	r2,-88(fp)
 1011908:	10ffc816 	blt	r2,r3,101182c <get_home_directory_cluster_for_file+0x310>
						break;
					}
				}
				// If this is the end of the cluster and the directory has not been found, then see if there is another cluster
				// that holds data for the current directory.
				if (new_cluster == home_dir_cluster) {
 101190c:	e0fff117 	ldw	r3,-60(fp)
 1011910:	e0bff617 	ldw	r2,-40(fp)
 1011914:	1880131e 	bne	r3,r2,1011964 <get_home_directory_cluster_for_file+0x448>
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster)) {
 1011918:	e13ff117 	ldw	r4,-60(fp)
 101191c:	e17ffb04 	addi	r5,fp,-20
 1011920:	100fe440 	call	100fe44 <get_cluster_flag>
 1011924:	1005003a 	cmpeq	r2,r2,zero
 1011928:	10000c1e 	bne	r2,zero,101195c <get_home_directory_cluster_for_file+0x440>
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
 101192c:	e0bffb0b 	ldhu	r2,-20(fp)
 1011930:	10bfffcc 	andi	r2,r2,65535
 1011934:	10fffe0c 	andi	r3,r2,65528
 1011938:	00bffe14 	movui	r2,65528
 101193c:	1880021e 	bne	r3,r2,1011948 <get_home_directory_cluster_for_file+0x42c>
							return false;
 1011940:	e03fff15 	stw	zero,-4(fp)
 1011944:	00003406 	br	1011a18 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
 1011948:	e0bffb0b 	ldhu	r2,-20(fp)
 101194c:	10bfffcc 	andi	r2,r2,65535
 1011950:	10bffe0c 	andi	r2,r2,65528
 1011954:	e0bff115 	stw	r2,-60(fp)
 1011958:	00000206 	br	1011964 <get_home_directory_cluster_for_file+0x448>
					} else {
						// Directory path is invalid.                 
						return false;
 101195c:	e03fff15 	stw	zero,-4(fp)
 1011960:	00002d06 	br	1011a18 <get_home_directory_cluster_for_file+0x4fc>
					}
				}
			} while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
 1011964:	e0ffec17 	ldw	r3,-80(fp)
 1011968:	00bffdd4 	movui	r2,65527
 101196c:	10c00316 	blt	r2,r3,101197c <get_home_directory_cluster_for_file+0x460>
 1011970:	e0fff117 	ldw	r3,-60(fp)
 1011974:	e0bff617 	ldw	r2,-40(fp)
 1011978:	18bf9d26 	beq	r3,r2,10117f0 <get_home_directory_cluster_for_file+0x2d4>
			if (new_cluster != home_dir_cluster) {
 101197c:	e0fff117 	ldw	r3,-60(fp)
 1011980:	e0bff617 	ldw	r2,-40(fp)
 1011984:	18800826 	beq	r3,r2,10119a8 <get_home_directory_cluster_for_file+0x48c>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
 1011988:	e0bff117 	ldw	r2,-60(fp)
 101198c:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
 1011990:	e0fff317 	ldw	r3,-52(fp)
 1011994:	e0bff517 	ldw	r2,-44(fp)
 1011998:	1885883a 	add	r2,r3,r2
 101199c:	10800044 	addi	r2,r2,1
 10119a0:	e0bff315 	stw	r2,-52(fp)
 10119a4:	00000206 	br	10119b0 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
 10119a8:	e03fff15 	stw	zero,-4(fp)
 10119ac:	00001a06 	br	1011a18 <get_home_directory_cluster_for_file+0x4fc>
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
 10119b0:	e0bff317 	ldw	r2,-52(fp)
 10119b4:	1007883a 	mov	r3,r2
 10119b8:	e0bffc17 	ldw	r2,-16(fp)
 10119bc:	1889883a 	add	r4,r3,r2
 10119c0:	10111700 	call	1011170 <get_dir_divider_location>
 10119c4:	e0bff515 	stw	r2,-44(fp)
		if (location < 0) {
 10119c8:	e0bff517 	ldw	r2,-44(fp)
 10119cc:	1004403a 	cmpge	r2,r2,zero
 10119d0:	1000021e 	bne	r2,zero,10119dc <get_home_directory_cluster_for_file+0x4c0>
			// Directory has been located.
			result = true;
 10119d4:	00800044 	movi	r2,1
 10119d8:	e0bff715 	stw	r2,-36(fp)
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
 10119dc:	e0bff517 	ldw	r2,-44(fp)
 10119e0:	10800048 	cmpgei	r2,r2,1
 10119e4:	103edb1e 	bne	r2,zero,1011554 <get_home_directory_cluster_for_file+0x38>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
 10119e8:	e0fffd17 	ldw	r3,-12(fp)
 10119ec:	e0bff617 	ldw	r2,-40(fp)
 10119f0:	18800015 	stw	r2,0(r3)
	if (home_dir_cluster == 0) {
 10119f4:	e0bff617 	ldw	r2,-40(fp)
 10119f8:	1004c03a 	cmpne	r2,r2,zero
 10119fc:	1000041e 	bne	r2,zero,1011a10 <get_home_directory_cluster_for_file+0x4f4>
		file_record->file_record_cluster = 0; // Home directory is the root directory.
 1011a00:	e0bffe17 	ldw	r2,-8(fp)
 1011a04:	10000a15 	stw	zero,40(r2)
		result = true;
 1011a08:	00800044 	movi	r2,1
 1011a0c:	e0bff715 	stw	r2,-36(fp)
	}
	return result;
 1011a10:	e0bff717 	ldw	r2,-36(fp)
 1011a14:	e0bfff15 	stw	r2,-4(fp)
 1011a18:	e0bfff17 	ldw	r2,-4(fp)
}
 1011a1c:	e037883a 	mov	sp,fp
 1011a20:	dfc00117 	ldw	ra,4(sp)
 1011a24:	df000017 	ldw	fp,0(sp)
 1011a28:	dec00204 	addi	sp,sp,8
 1011a2c:	f800283a 	ret

01011a30 <find_file_in_directory>:

bool find_file_in_directory(int directory_start_cluster, char *file_name,
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
 1011a30:	deffe704 	addi	sp,sp,-100
 1011a34:	dfc01815 	stw	ra,96(sp)
 1011a38:	df001715 	stw	fp,92(sp)
 1011a3c:	df001704 	addi	fp,sp,92
 1011a40:	e13ffc15 	stw	r4,-16(fp)
 1011a44:	e17ffd15 	stw	r5,-12(fp)
 1011a48:	e1bffe15 	stw	r6,-8(fp)
	int location = get_dir_divider_location(file_name);
 1011a4c:	e13ffd17 	ldw	r4,-12(fp)
 1011a50:	10111700 	call	1011170 <get_dir_divider_location>
 1011a54:	e0bff715 	stw	r2,-36(fp)
	int last_dir_separator = 0;
 1011a58:	e03ff615 	stw	zero,-40(fp)
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 1011a5c:	00800804 	movi	r2,32
 1011a60:	e0bff805 	stb	r2,-32(fp)
 1011a64:	00800804 	movi	r2,32
 1011a68:	e0bff845 	stb	r2,-31(fp)
 1011a6c:	00800804 	movi	r2,32
 1011a70:	e0bff885 	stb	r2,-30(fp)
 1011a74:	00800804 	movi	r2,32
 1011a78:	e0bff8c5 	stb	r2,-29(fp)
 1011a7c:	00800804 	movi	r2,32
 1011a80:	e0bff905 	stb	r2,-28(fp)
 1011a84:	00800804 	movi	r2,32
 1011a88:	e0bff945 	stb	r2,-27(fp)
 1011a8c:	00800804 	movi	r2,32
 1011a90:	e0bff985 	stb	r2,-26(fp)
 1011a94:	00800804 	movi	r2,32
 1011a98:	e0bff9c5 	stb	r2,-25(fp)
	char extension[3] = { ' ', ' ', ' ' };
 1011a9c:	00800804 	movi	r2,32
 1011aa0:	e0bffa05 	stb	r2,-24(fp)
 1011aa4:	00800804 	movi	r2,32
 1011aa8:	e0bffa45 	stb	r2,-23(fp)
 1011aac:	00800804 	movi	r2,32
 1011ab0:	e0bffa85 	stb	r2,-22(fp)
	int ext_index = -1;
 1011ab4:	00bfffc4 	movi	r2,-1
 1011ab8:	e0bff515 	stw	r2,-44(fp)
	int cluster = directory_start_cluster;
 1011abc:	e0bffc17 	ldw	r2,-16(fp)
 1011ac0:	e0bff415 	stw	r2,-48(fp)
	int index;
	int length = strlen(file_name);
 1011ac4:	e13ffd17 	ldw	r4,-12(fp)
 1011ac8:	10006900 	call	1000690 <strlen>
 1011acc:	e0bff215 	stw	r2,-56(fp)
	bool result = false;
 1011ad0:	e03ff115 	stw	zero,-60(fp)

	// Skip through all directory separators.
	while (location > 0) {
 1011ad4:	00000b06 	br	1011b04 <find_file_in_directory+0xd4>
		last_dir_separator = last_dir_separator + location + 1;
 1011ad8:	e0fff617 	ldw	r3,-40(fp)
 1011adc:	e0bff717 	ldw	r2,-36(fp)
 1011ae0:	1885883a 	add	r2,r3,r2
 1011ae4:	10800044 	addi	r2,r2,1
 1011ae8:	e0bff615 	stw	r2,-40(fp)
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
 1011aec:	e0bff617 	ldw	r2,-40(fp)
 1011af0:	1007883a 	mov	r3,r2
 1011af4:	e0bffd17 	ldw	r2,-12(fp)
 1011af8:	1889883a 	add	r4,r3,r2
 1011afc:	10111700 	call	1011170 <get_dir_divider_location>
 1011b00:	e0bff715 	stw	r2,-36(fp)
	int index;
	int length = strlen(file_name);
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
 1011b04:	e0bff717 	ldw	r2,-36(fp)
 1011b08:	10800048 	cmpgei	r2,r2,1
 1011b0c:	103ff21e 	bne	r2,zero,1011ad8 <find_file_in_directory+0xa8>
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
 1011b10:	e0bff617 	ldw	r2,-40(fp)
 1011b14:	e0bff315 	stw	r2,-52(fp)
 1011b18:	00002b06 	br	1011bc8 <find_file_in_directory+0x198>
		if (file_name[index] == '.') {
 1011b1c:	e0bff317 	ldw	r2,-52(fp)
 1011b20:	1007883a 	mov	r3,r2
 1011b24:	e0bffd17 	ldw	r2,-12(fp)
 1011b28:	1885883a 	add	r2,r3,r2
 1011b2c:	10800003 	ldbu	r2,0(r2)
 1011b30:	10803fcc 	andi	r2,r2,255
 1011b34:	1080201c 	xori	r2,r2,128
 1011b38:	10bfe004 	addi	r2,r2,-128
 1011b3c:	10800b98 	cmpnei	r2,r2,46
 1011b40:	1000031e 	bne	r2,zero,1011b50 <find_file_in_directory+0x120>
			ext_index = index;
 1011b44:	e0bff317 	ldw	r2,-52(fp)
 1011b48:	e0bff515 	stw	r2,-44(fp)
 1011b4c:	00001b06 	br	1011bbc <find_file_in_directory+0x18c>
		} else if (ext_index < 0) {
 1011b50:	e0bff517 	ldw	r2,-44(fp)
 1011b54:	1004403a 	cmpge	r2,r2,zero
 1011b58:	10000c1e 	bne	r2,zero,1011b8c <find_file_in_directory+0x15c>
			name[index - last_dir_separator] = file_name[index];
 1011b5c:	e0fff317 	ldw	r3,-52(fp)
 1011b60:	e0bff617 	ldw	r2,-40(fp)
 1011b64:	1889c83a 	sub	r4,r3,r2
 1011b68:	e0bff317 	ldw	r2,-52(fp)
 1011b6c:	1007883a 	mov	r3,r2
 1011b70:	e0bffd17 	ldw	r2,-12(fp)
 1011b74:	1885883a 	add	r2,r3,r2
 1011b78:	10c00003 	ldbu	r3,0(r2)
 1011b7c:	e0bff804 	addi	r2,fp,-32
 1011b80:	1105883a 	add	r2,r2,r4
 1011b84:	10c00005 	stb	r3,0(r2)
 1011b88:	00000c06 	br	1011bbc <find_file_in_directory+0x18c>
		} else {
			extension[index - ext_index - 1] = file_name[index];
 1011b8c:	e0fff317 	ldw	r3,-52(fp)
 1011b90:	e0bff517 	ldw	r2,-44(fp)
 1011b94:	1885c83a 	sub	r2,r3,r2
 1011b98:	113fffc4 	addi	r4,r2,-1
 1011b9c:	e0bff317 	ldw	r2,-52(fp)
 1011ba0:	1007883a 	mov	r3,r2
 1011ba4:	e0bffd17 	ldw	r2,-12(fp)
 1011ba8:	1885883a 	add	r2,r3,r2
 1011bac:	10c00003 	ldbu	r3,0(r2)
 1011bb0:	e0bffa04 	addi	r2,fp,-24
 1011bb4:	1105883a 	add	r2,r2,r4
 1011bb8:	10c00005 	stb	r3,0(r2)
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
 1011bbc:	e0bff317 	ldw	r2,-52(fp)
 1011bc0:	10800044 	addi	r2,r2,1
 1011bc4:	e0bff315 	stw	r2,-52(fp)
 1011bc8:	e0fff317 	ldw	r3,-52(fp)
 1011bcc:	e0bff217 	ldw	r2,-56(fp)
 1011bd0:	18bfd216 	blt	r3,r2,1011b1c <find_file_in_directory+0xec>
			extension[index - ext_index - 1] = file_name[index];
		}
	}

	// Look for the file.
	if (directory_start_cluster == 0) {
 1011bd4:	e0bffc17 	ldw	r2,-16(fp)
 1011bd8:	1004c03a 	cmpne	r2,r2,zero
 1011bdc:	1000441e 	bne	r2,zero,1011cf0 <find_file_in_directory+0x2c0>
		/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
 1011be0:	008040b4 	movhi	r2,258
 1011be4:	10b03404 	addi	r2,r2,-16176
 1011be8:	1080050b 	ldhu	r2,20(r2)
 1011bec:	10bfffcc 	andi	r2,r2,65535
 1011bf0:	1006917a 	slli	r3,r2,5
 1011bf4:	008040b4 	movhi	r2,258
 1011bf8:	10b03404 	addi	r2,r2,-16176
 1011bfc:	1080030b 	ldhu	r2,12(r2)
 1011c00:	10bfffcc 	andi	r2,r2,65535
 1011c04:	1885283a 	div	r2,r3,r2
 1011c08:	e0bff015 	stw	r2,-64(fp)
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
 1011c0c:	e03fef15 	stw	zero,-68(fp)
 1011c10:	00003306 	br	1011ce0 <find_file_in_directory+0x2b0>
				sector_index++) {
			if (Read_Sector_Data(
 1011c14:	008040b4 	movhi	r2,258
 1011c18:	10b03404 	addi	r2,r2,-16176
 1011c1c:	10c01317 	ldw	r3,76(r2)
 1011c20:	e0bfef17 	ldw	r2,-68(fp)
 1011c24:	1885883a 	add	r2,r3,r2
 1011c28:	1009883a 	mov	r4,r2
 1011c2c:	d166e617 	ldw	r5,-25704(gp)
 1011c30:	100fd480 	call	100fd48 <Read_Sector_Data>
 1011c34:	1005003a 	cmpeq	r2,r2,zero
 1011c38:	10008e1e 	bne	r2,zero,1011e74 <find_file_in_directory+0x444>
					sector_index
							+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 1011c3c:	e03fee15 	stw	zero,-72(fp)
 1011c40:	00001e06 	br	1011cbc <find_file_in_directory+0x28c>
					// Read file record.
					Read_File_Record_At_Offset(file_counter * 32, file_record,
 1011c44:	e0bfee17 	ldw	r2,-72(fp)
 1011c48:	1008917a 	slli	r4,r2,5
 1011c4c:	e1ffef17 	ldw	r7,-68(fp)
 1011c50:	e17ffe17 	ldw	r5,-8(fp)
 1011c54:	000d883a 	mov	r6,zero
 1011c58:	10101900 	call	1010190 <Read_File_Record_At_Offset>
							0, sector_index);
					if ((file_record->name[0] != 0xe5)
 1011c5c:	e0bffe17 	ldw	r2,-8(fp)
 1011c60:	10800003 	ldbu	r2,0(r2)
 1011c64:	10803fcc 	andi	r2,r2,255
 1011c68:	10803960 	cmpeqi	r2,r2,229
 1011c6c:	1000101e 	bne	r2,zero,1011cb0 <find_file_in_directory+0x280>
 1011c70:	e0bffe17 	ldw	r2,-8(fp)
 1011c74:	10800003 	ldbu	r2,0(r2)
 1011c78:	10803fcc 	andi	r2,r2,255
 1011c7c:	1005003a 	cmpeq	r2,r2,zero
 1011c80:	10000b1e 	bne	r2,zero,1011cb0 <find_file_in_directory+0x280>
							&& (file_record->name[0] != 0x00)) {
						bool match = match_file_record_to_name_ext(file_record,
								name, extension);
 1011c84:	e17ff804 	addi	r5,fp,-32
 1011c88:	e1bffa04 	addi	r6,fp,-24
 1011c8c:	e13ffe17 	ldw	r4,-8(fp)
 1011c90:	10112300 	call	1011230 <match_file_record_to_name_ext>
 1011c94:	e0bfed15 	stw	r2,-76(fp)

						if (match) {
 1011c98:	e0bfed17 	ldw	r2,-76(fp)
 1011c9c:	1005003a 	cmpeq	r2,r2,zero
 1011ca0:	1000031e 	bne	r2,zero,1011cb0 <find_file_in_directory+0x280>
							result = true;
 1011ca4:	00800044 	movi	r2,1
 1011ca8:	e0bff115 	stw	r2,-60(fp)
							break;
 1011cac:	00000606 	br	1011cc8 <find_file_in_directory+0x298>
					sector_index
							+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 1011cb0:	e0bfee17 	ldw	r2,-72(fp)
 1011cb4:	10800044 	addi	r2,r2,1
 1011cb8:	e0bfee15 	stw	r2,-72(fp)
 1011cbc:	e0bfee17 	ldw	r2,-72(fp)
 1011cc0:	10800410 	cmplti	r2,r2,16
 1011cc4:	103fdf1e 	bne	r2,zero,1011c44 <find_file_in_directory+0x214>
					}
				}
			} else {
				break;
			}
			if (result) {
 1011cc8:	e0bff117 	ldw	r2,-60(fp)
 1011ccc:	1004c03a 	cmpne	r2,r2,zero
 1011cd0:	1000681e 	bne	r2,zero,1011e74 <find_file_in_directory+0x444>
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
				sector_index++) {
 1011cd4:	e0bfef17 	ldw	r2,-68(fp)
 1011cd8:	10800044 	addi	r2,r2,1
 1011cdc:	e0bfef15 	stw	r2,-68(fp)
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
 1011ce0:	e0ffef17 	ldw	r3,-68(fp)
 1011ce4:	e0bff017 	ldw	r2,-64(fp)
 1011ce8:	18bfca16 	blt	r3,r2,1011c14 <find_file_in_directory+0x1e4>
 1011cec:	00006106 	br	1011e74 <find_file_in_directory+0x444>
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
 1011cf0:	e0bff417 	ldw	r2,-48(fp)
 1011cf4:	10ffff84 	addi	r3,r2,-2
 1011cf8:	008040b4 	movhi	r2,258
 1011cfc:	10b03404 	addi	r2,r2,-16176
 1011d00:	10800383 	ldbu	r2,14(r2)
 1011d04:	10803fcc 	andi	r2,r2,255
 1011d08:	1885383a 	mul	r2,r3,r2
 1011d0c:	1007883a 	mov	r3,r2
 1011d10:	008040b4 	movhi	r2,258
 1011d14:	10b03404 	addi	r2,r2,-16176
 1011d18:	10801417 	ldw	r2,80(r2)
 1011d1c:	1885883a 	add	r2,r3,r2
 1011d20:	e0bfec15 	stw	r2,-80(fp)
			int sector_index;

			for (sector_index = 0;
 1011d24:	e03feb15 	stw	zero,-84(fp)
					sector_index < boot_sector_data.sectors_per_cluster;
 1011d28:	00003006 	br	1011dec <find_file_in_directory+0x3bc>
					sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
 1011d2c:	e0ffeb17 	ldw	r3,-84(fp)
 1011d30:	e0bfec17 	ldw	r2,-80(fp)
 1011d34:	1889883a 	add	r4,r3,r2
 1011d38:	d166e617 	ldw	r5,-25704(gp)
 1011d3c:	100fd480 	call	100fd48 <Read_Sector_Data>
 1011d40:	1005003a 	cmpeq	r2,r2,zero
 1011d44:	10002f1e 	bne	r2,zero,1011e04 <find_file_in_directory+0x3d4>
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 1011d48:	e03fea15 	stw	zero,-88(fp)
 1011d4c:	00001e06 	br	1011dc8 <find_file_in_directory+0x398>
						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
 1011d50:	e0bfea17 	ldw	r2,-88(fp)
 1011d54:	1008917a 	slli	r4,r2,5
 1011d58:	e1bff417 	ldw	r6,-48(fp)
 1011d5c:	e1ffeb17 	ldw	r7,-84(fp)
 1011d60:	e17ffe17 	ldw	r5,-8(fp)
 1011d64:	10101900 	call	1010190 <Read_File_Record_At_Offset>
								file_record, cluster, sector_index);
						if ((file_record->name[0] != 0xe5)
 1011d68:	e0bffe17 	ldw	r2,-8(fp)
 1011d6c:	10800003 	ldbu	r2,0(r2)
 1011d70:	10803fcc 	andi	r2,r2,255
 1011d74:	10803960 	cmpeqi	r2,r2,229
 1011d78:	1000101e 	bne	r2,zero,1011dbc <find_file_in_directory+0x38c>
 1011d7c:	e0bffe17 	ldw	r2,-8(fp)
 1011d80:	10800003 	ldbu	r2,0(r2)
 1011d84:	10803fcc 	andi	r2,r2,255
 1011d88:	1005003a 	cmpeq	r2,r2,zero
 1011d8c:	10000b1e 	bne	r2,zero,1011dbc <find_file_in_directory+0x38c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
 1011d90:	e17ff804 	addi	r5,fp,-32
 1011d94:	e1bffa04 	addi	r6,fp,-24
 1011d98:	e13ffe17 	ldw	r4,-8(fp)
 1011d9c:	10112300 	call	1011230 <match_file_record_to_name_ext>
 1011da0:	e0bfe915 	stw	r2,-92(fp)

							if (match) {
 1011da4:	e0bfe917 	ldw	r2,-92(fp)
 1011da8:	1005003a 	cmpeq	r2,r2,zero
 1011dac:	1000031e 	bne	r2,zero,1011dbc <find_file_in_directory+0x38c>
								result = true;
 1011db0:	00800044 	movi	r2,1
 1011db4:	e0bff115 	stw	r2,-60(fp)
								break;
 1011db8:	00000606 	br	1011dd4 <find_file_in_directory+0x3a4>
					sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 1011dbc:	e0bfea17 	ldw	r2,-88(fp)
 1011dc0:	10800044 	addi	r2,r2,1
 1011dc4:	e0bfea15 	stw	r2,-88(fp)
 1011dc8:	e0bfea17 	ldw	r2,-88(fp)
 1011dcc:	10800410 	cmplti	r2,r2,16
 1011dd0:	103fdf1e 	bne	r2,zero,1011d50 <find_file_in_directory+0x320>
						}
					}
				} else {
					break;
				}
				if (result) {
 1011dd4:	e0bff117 	ldw	r2,-60(fp)
 1011dd8:	1004c03a 	cmpne	r2,r2,zero
 1011ddc:	1000091e 	bne	r2,zero,1011e04 <find_file_in_directory+0x3d4>
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0;
					sector_index < boot_sector_data.sectors_per_cluster;
					sector_index++) {
 1011de0:	e0bfeb17 	ldw	r2,-84(fp)
 1011de4:	10800044 	addi	r2,r2,1
 1011de8:	e0bfeb15 	stw	r2,-84(fp)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0;
					sector_index < boot_sector_data.sectors_per_cluster;
 1011dec:	008040b4 	movhi	r2,258
 1011df0:	10b03404 	addi	r2,r2,-16176
 1011df4:	10800383 	ldbu	r2,14(r2)
 1011df8:	10c03fcc 	andi	r3,r2,255
 1011dfc:	e0bfeb17 	ldw	r2,-84(fp)
 1011e00:	10ffca16 	blt	r2,r3,1011d2c <find_file_in_directory+0x2fc>
					break;
				}
			}
			// If this is the end of the cluster and the file has not been found, then see if there is another cluster
			// that holds data for the current directory.
			if (result == false) {
 1011e04:	e0bff117 	ldw	r2,-60(fp)
 1011e08:	1004c03a 	cmpne	r2,r2,zero
 1011e0c:	1000131e 	bne	r2,zero,1011e5c <find_file_in_directory+0x42c>
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster)) {
 1011e10:	e13ff417 	ldw	r4,-48(fp)
 1011e14:	e17ffb04 	addi	r5,fp,-20
 1011e18:	100fe440 	call	100fe44 <get_cluster_flag>
 1011e1c:	1005003a 	cmpeq	r2,r2,zero
 1011e20:	10000c1e 	bne	r2,zero,1011e54 <find_file_in_directory+0x424>
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 1011e24:	e0bffb0b 	ldhu	r2,-20(fp)
 1011e28:	10bfffcc 	andi	r2,r2,65535
 1011e2c:	10fffe0c 	andi	r3,r2,65528
 1011e30:	00bffe14 	movui	r2,65528
 1011e34:	1880021e 	bne	r3,r2,1011e40 <find_file_in_directory+0x410>
						return false;
 1011e38:	e03fff15 	stw	zero,-4(fp)
 1011e3c:	00000f06 	br	1011e7c <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
 1011e40:	e0bffb0b 	ldhu	r2,-20(fp)
 1011e44:	10bfffcc 	andi	r2,r2,65535
 1011e48:	10bffe0c 	andi	r2,r2,65528
 1011e4c:	e0bff415 	stw	r2,-48(fp)
 1011e50:	00000206 	br	1011e5c <find_file_in_directory+0x42c>
				} else {
					// Directory path is invalid.
					return false;
 1011e54:	e03fff15 	stw	zero,-4(fp)
 1011e58:	00000806 	br	1011e7c <find_file_in_directory+0x44c>
				}
			}
		} while ((cluster < 0x0000fff8) && (result == false));
 1011e5c:	e0fff417 	ldw	r3,-48(fp)
 1011e60:	00bffdd4 	movui	r2,65527
 1011e64:	10c00316 	blt	r2,r3,1011e74 <find_file_in_directory+0x444>
 1011e68:	e0bff117 	ldw	r2,-60(fp)
 1011e6c:	1005003a 	cmpeq	r2,r2,zero
 1011e70:	103f9f1e 	bne	r2,zero,1011cf0 <find_file_in_directory+0x2c0>
	}

	return result;
 1011e74:	e0bff117 	ldw	r2,-60(fp)
 1011e78:	e0bfff15 	stw	r2,-4(fp)
 1011e7c:	e0bfff17 	ldw	r2,-4(fp)
}
 1011e80:	e037883a 	mov	sp,fp
 1011e84:	dfc00117 	ldw	ra,4(sp)
 1011e88:	df000017 	ldw	fp,0(sp)
 1011e8c:	dec00204 	addi	sp,sp,8
 1011e90:	f800283a 	ret

01011e94 <find_first_empty_cluster>:

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
 1011e94:	defff504 	addi	sp,sp,-44
 1011e98:	dfc00a15 	stw	ra,40(sp)
 1011e9c:	df000915 	stw	fp,36(sp)
 1011ea0:	df000904 	addi	fp,sp,36
 1011ea4:	e13fff15 	stw	r4,-4(fp)
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
 1011ea8:	008040b4 	movhi	r2,258
 1011eac:	10b03404 	addi	r2,r2,-16176
 1011eb0:	10801117 	ldw	r2,68(r2)
 1011eb4:	e0bffe15 	stw	r2,-8(fp)
	unsigned int cluster_index = 2;
 1011eb8:	00800084 	movi	r2,2
 1011ebc:	e0bffd15 	stw	r2,-12(fp)
	short int cluster = -1;
 1011ec0:	00bfffc4 	movi	r2,-1
 1011ec4:	e0bffc0d 	sth	r2,-16(fp)
	bool result = false;
 1011ec8:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
 1011ecc:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
 1011ed0:	008040b4 	movhi	r2,258
 1011ed4:	10b03404 	addi	r2,r2,-16176
 1011ed8:	10801417 	ldw	r2,80(r2)
 1011edc:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
 1011ee0:	008040b4 	movhi	r2,258
 1011ee4:	10b03404 	addi	r2,r2,-16176
 1011ee8:	1080058b 	ldhu	r2,22(r2)
 1011eec:	10bfffcc 	andi	r2,r2,65535
 1011ef0:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 =
			boot_sector_data.total_sector_count_if_above_32MB;
 1011ef4:	008040b4 	movhi	r2,258
 1011ef8:	10b03404 	addi	r2,r2,-16176
 1011efc:	10800917 	ldw	r2,36(r2)
 1011f00:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32) {
 1011f04:	e0fff817 	ldw	r3,-32(fp)
 1011f08:	e0bff717 	ldw	r2,-36(fp)
 1011f0c:	10c00b2e 	bgeu	r2,r3,1011f3c <find_first_empty_cluster+0xa8>
		max_cluster_index = ((less_than_32 - non_data_sectors)
 1011f10:	e0fff817 	ldw	r3,-32(fp)
 1011f14:	e0bff917 	ldw	r2,-28(fp)
 1011f18:	1887c83a 	sub	r3,r3,r2
 1011f1c:	008040b4 	movhi	r2,258
 1011f20:	10b03404 	addi	r2,r2,-16176
 1011f24:	10800383 	ldbu	r2,14(r2)
 1011f28:	10803fcc 	andi	r2,r2,255
 1011f2c:	1885203a 	divu	r2,r3,r2
 1011f30:	10800044 	addi	r2,r2,1
 1011f34:	e0bffa15 	stw	r2,-24(fp)
 1011f38:	00002906 	br	1011fe0 <find_first_empty_cluster+0x14c>
				/ boot_sector_data.sectors_per_cluster) + 1;
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
 1011f3c:	e0fff717 	ldw	r3,-36(fp)
 1011f40:	e0bff917 	ldw	r2,-28(fp)
 1011f44:	1887c83a 	sub	r3,r3,r2
 1011f48:	008040b4 	movhi	r2,258
 1011f4c:	10b03404 	addi	r2,r2,-16176
 1011f50:	10800383 	ldbu	r2,14(r2)
 1011f54:	10803fcc 	andi	r2,r2,255
 1011f58:	1885203a 	divu	r2,r3,r2
 1011f5c:	10800044 	addi	r2,r2,1
 1011f60:	e0bffa15 	stw	r2,-24(fp)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
 1011f64:	00001e06 	br	1011fe0 <find_first_empty_cluster+0x14c>
		if (Read_Sector_Data(sector,
 1011f68:	e13ffe17 	ldw	r4,-8(fp)
 1011f6c:	d166e617 	ldw	r5,-25704(gp)
 1011f70:	100fd480 	call	100fd48 <Read_Sector_Data>
 1011f74:	1005003a 	cmpeq	r2,r2,zero
 1011f78:	1000131e 	bne	r2,zero,1011fc8 <find_first_empty_cluster+0x134>
				fat_partition_offset_in_512_byte_sectors)) {
			do {
				cluster =
 1011f7c:	d0a6e817 	ldw	r2,-25696(gp)
 1011f80:	10800a17 	ldw	r2,40(r2)
 1011f84:	1007883a 	mov	r3,r2
 1011f88:	e0bffd17 	ldw	r2,-12(fp)
 1011f8c:	10803fcc 	andi	r2,r2,255
 1011f90:	1085883a 	add	r2,r2,r2
 1011f94:	1885883a 	add	r2,r3,r2
 1011f98:	1080002b 	ldhuio	r2,0(r2)
 1011f9c:	e0bffc0d 	sth	r2,-16(fp)
						((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
 1011fa0:	e0bffc0f 	ldh	r2,-16(fp)
 1011fa4:	1005003a 	cmpeq	r2,r2,zero
 1011fa8:	1000071e 	bne	r2,zero,1011fc8 <find_first_empty_cluster+0x134>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
 1011fac:	e0bffd17 	ldw	r2,-12(fp)
 1011fb0:	10800044 	addi	r2,r2,1
 1011fb4:	e0bffd15 	stw	r2,-12(fp)
				}
			} while ((cluster_index % 256) != 0);
 1011fb8:	e0bffd17 	ldw	r2,-12(fp)
 1011fbc:	10803fcc 	andi	r2,r2,255
 1011fc0:	1004c03a 	cmpne	r2,r2,zero
 1011fc4:	103fed1e 	bne	r2,zero,1011f7c <find_first_empty_cluster+0xe8>
		}
		if (cluster == 0) {
 1011fc8:	e0bffc0f 	ldh	r2,-16(fp)
 1011fcc:	1005003a 	cmpeq	r2,r2,zero
 1011fd0:	1000081e 	bne	r2,zero,1011ff4 <find_first_empty_cluster+0x160>
			break;
		}
		sector++;
 1011fd4:	e0bffe17 	ldw	r2,-8(fp)
 1011fd8:	10800044 	addi	r2,r2,1
 1011fdc:	e0bffe15 	stw	r2,-8(fp)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
 1011fe0:	008040b4 	movhi	r2,258
 1011fe4:	10b03404 	addi	r2,r2,-16176
 1011fe8:	10c01217 	ldw	r3,72(r2)
 1011fec:	e0bffe17 	ldw	r2,-8(fp)
 1011ff0:	18bfdd1e 	bne	r3,r2,1011f68 <find_first_empty_cluster+0xd4>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
 1011ff4:	e0bffc0f 	ldh	r2,-16(fp)
 1011ff8:	1004c03a 	cmpne	r2,r2,zero
 1011ffc:	1000081e 	bne	r2,zero,1012020 <find_first_empty_cluster+0x18c>
 1012000:	e0fffc0f 	ldh	r3,-16(fp)
 1012004:	e0bffa17 	ldw	r2,-24(fp)
 1012008:	10c00536 	bltu	r2,r3,1012020 <find_first_empty_cluster+0x18c>
		*cluster_number = cluster_index;
 101200c:	e0bfff17 	ldw	r2,-4(fp)
 1012010:	e0fffd17 	ldw	r3,-12(fp)
 1012014:	10c00015 	stw	r3,0(r2)
		result = true;
 1012018:	00800044 	movi	r2,1
 101201c:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 1012020:	e0bffb17 	ldw	r2,-20(fp)
}
 1012024:	e037883a 	mov	sp,fp
 1012028:	dfc00117 	ldw	ra,4(sp)
 101202c:	df000017 	ldw	fp,0(sp)
 1012030:	dec00204 	addi	sp,sp,8
 1012034:	f800283a 	ret

01012038 <find_first_empty_record_in_a_subdirectory>:

int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
 1012038:	defff404 	addi	sp,sp,-48
 101203c:	dfc00b15 	stw	ra,44(sp)
 1012040:	df000a15 	stw	fp,40(sp)
 1012044:	df000a04 	addi	fp,sp,40
 1012048:	e13ffe15 	stw	r4,-8(fp)
	int result = -1;
 101204c:	00bfffc4 	movi	r2,-1
 1012050:	e0bffb15 	stw	r2,-20(fp)
	int cluster = start_cluster_index;
 1012054:	e0bffe17 	ldw	r2,-8(fp)
 1012058:	e0bffa15 	stw	r2,-24(fp)
	do {
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
 101205c:	e0bffa17 	ldw	r2,-24(fp)
 1012060:	10ffff84 	addi	r3,r2,-2
 1012064:	008040b4 	movhi	r2,258
 1012068:	10b03404 	addi	r2,r2,-16176
 101206c:	10800383 	ldbu	r2,14(r2)
 1012070:	10803fcc 	andi	r2,r2,255
 1012074:	1885383a 	mul	r2,r3,r2
 1012078:	1007883a 	mov	r3,r2
 101207c:	008040b4 	movhi	r2,258
 1012080:	10b03404 	addi	r2,r2,-16176
 1012084:	10801417 	ldw	r2,80(r2)
 1012088:	1885883a 	add	r2,r3,r2
 101208c:	e0bff915 	stw	r2,-28(fp)
		int sector_index;

		for (sector_index = 0;
 1012090:	e03ff815 	stw	zero,-32(fp)
				sector_index < boot_sector_data.sectors_per_cluster;
 1012094:	00002c06 	br	1012148 <find_first_empty_record_in_a_subdirectory+0x110>
				sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
 1012098:	e0fff817 	ldw	r3,-32(fp)
 101209c:	e0bff917 	ldw	r2,-28(fp)
 10120a0:	1889883a 	add	r4,r3,r2
 10120a4:	d166e617 	ldw	r5,-25704(gp)
 10120a8:	100fd480 	call	100fd48 <Read_Sector_Data>
 10120ac:	1005003a 	cmpeq	r2,r2,zero
 10120b0:	10002b1e 	bne	r2,zero,1012160 <find_first_empty_record_in_a_subdirectory+0x128>
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 10120b4:	e03ff715 	stw	zero,-36(fp)
 10120b8:	00001d06 	br	1012130 <find_first_empty_record_in_a_subdirectory+0xf8>
					unsigned short int leading_char;

					// Read file record.
					leading_char =
 10120bc:	d0a6e817 	ldw	r2,-25696(gp)
 10120c0:	10800a17 	ldw	r2,40(r2)
 10120c4:	1007883a 	mov	r3,r2
 10120c8:	e0bff717 	ldw	r2,-36(fp)
 10120cc:	1004917a 	slli	r2,r2,5
 10120d0:	1885883a 	add	r2,r3,r2
 10120d4:	10800023 	ldbuio	r2,0(r2)
 10120d8:	10803fcc 	andi	r2,r2,255
 10120dc:	e0bff60d 	sth	r2,-40(fp)
							((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
 10120e0:	e0bff60b 	ldhu	r2,-40(fp)
 10120e4:	10803960 	cmpeqi	r2,r2,229
 10120e8:	1000031e 	bne	r2,zero,10120f8 <find_first_empty_record_in_a_subdirectory+0xc0>
 10120ec:	e0bff60b 	ldhu	r2,-40(fp)
 10120f0:	1004c03a 	cmpne	r2,r2,zero
 10120f4:	10000b1e 	bne	r2,zero,1012124 <find_first_empty_record_in_a_subdirectory+0xec>
						result = (cluster)
 10120f8:	e0bff817 	ldw	r2,-32(fp)
 10120fc:	1006913a 	slli	r3,r2,4
 1012100:	e0bff717 	ldw	r2,-36(fp)
 1012104:	1885883a 	add	r2,r3,r2
 1012108:	1006943a 	slli	r3,r2,16
 101210c:	e0bffa17 	ldw	r2,-24(fp)
 1012110:	1884b03a 	or	r2,r3,r2
 1012114:	e0bffb15 	stw	r2,-20(fp)
								| ((sector_index * 16 + file_counter) << 16);
						return result;
 1012118:	e0bffb17 	ldw	r2,-20(fp)
 101211c:	e0bfff15 	stw	r2,-4(fp)
 1012120:	00005206 	br	101226c <find_first_empty_record_in_a_subdirectory+0x234>
				sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 1012124:	e0bff717 	ldw	r2,-36(fp)
 1012128:	10800044 	addi	r2,r2,1
 101212c:	e0bff715 	stw	r2,-36(fp)
 1012130:	e0bff717 	ldw	r2,-36(fp)
 1012134:	10800410 	cmplti	r2,r2,16
 1012138:	103fe01e 	bne	r2,zero,10120bc <find_first_empty_record_in_a_subdirectory+0x84>
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0;
				sector_index < boot_sector_data.sectors_per_cluster;
				sector_index++) {
 101213c:	e0bff817 	ldw	r2,-32(fp)
 1012140:	10800044 	addi	r2,r2,1
 1012144:	e0bff815 	stw	r2,-32(fp)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0;
				sector_index < boot_sector_data.sectors_per_cluster;
 1012148:	008040b4 	movhi	r2,258
 101214c:	10b03404 	addi	r2,r2,-16176
 1012150:	10800383 	ldbu	r2,14(r2)
 1012154:	10c03fcc 	andi	r3,r2,255
 1012158:	e0bff817 	ldw	r2,-32(fp)
 101215c:	10ffce16 	blt	r2,r3,1012098 <find_first_empty_record_in_a_subdirectory+0x60>
				break;
			}
		}
		// If this is the end of the cluster and the file has not been found, then see if there is another cluster
		// that holds data for the current directory.
		if (result < 0) {
 1012160:	e0bffb17 	ldw	r2,-20(fp)
 1012164:	1004403a 	cmpge	r2,r2,zero
 1012168:	1000381e 	bne	r2,zero,101224c <find_first_empty_record_in_a_subdirectory+0x214>
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster)) {
 101216c:	e13ffa17 	ldw	r4,-24(fp)
 1012170:	e17ffc04 	addi	r5,fp,-16
 1012174:	100fe440 	call	100fe44 <get_cluster_flag>
 1012178:	1005003a 	cmpeq	r2,r2,zero
 101217c:	1000311e 	bne	r2,zero,1012244 <find_first_empty_record_in_a_subdirectory+0x20c>
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 1012180:	e0bffc0b 	ldhu	r2,-16(fp)
 1012184:	10bfffcc 	andi	r2,r2,65535
 1012188:	10fffe0c 	andi	r3,r2,65528
 101218c:	00bffe14 	movui	r2,65528
 1012190:	18802e1e 	bne	r3,r2,101224c <find_first_empty_record_in_a_subdirectory+0x214>
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
 1012194:	e13ffd04 	addi	r4,fp,-12
 1012198:	1011e940 	call	1011e94 <find_first_empty_cluster>
 101219c:	1005003a 	cmpeq	r2,r2,zero
 10121a0:	1000231e 	bne	r2,zero,1012230 <find_first_empty_record_in_a_subdirectory+0x1f8>
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
 10121a4:	e13ffa17 	ldw	r4,-24(fp)
 10121a8:	e0bffd17 	ldw	r2,-12(fp)
 10121ac:	117fffcc 	andi	r5,r2,65535
 10121b0:	2960001c 	xori	r5,r5,32768
 10121b4:	29600004 	addi	r5,r5,-32768
 10121b8:	01800044 	movi	r6,1
 10121bc:	100fefc0 	call	100fefc <mark_cluster>
 10121c0:	1005003a 	cmpeq	r2,r2,zero
 10121c4:	10001a1e 	bne	r2,zero,1012230 <find_first_empty_record_in_a_subdirectory+0x1f8>
 10121c8:	e0bffd17 	ldw	r2,-12(fp)
 10121cc:	1009883a 	mov	r4,r2
 10121d0:	017fffc4 	movi	r5,-1
 10121d4:	01800044 	movi	r6,1
 10121d8:	100fefc0 	call	100fefc <mark_cluster>
 10121dc:	1005003a 	cmpeq	r2,r2,zero
 10121e0:	1000131e 	bne	r2,zero,1012230 <find_first_empty_record_in_a_subdirectory+0x1f8>
 10121e4:	e13ffa17 	ldw	r4,-24(fp)
 10121e8:	e0bffd17 	ldw	r2,-12(fp)
 10121ec:	117fffcc 	andi	r5,r2,65535
 10121f0:	2960001c 	xori	r5,r5,32768
 10121f4:	29600004 	addi	r5,r5,-32768
 10121f8:	000d883a 	mov	r6,zero
 10121fc:	100fefc0 	call	100fefc <mark_cluster>
 1012200:	1005003a 	cmpeq	r2,r2,zero
 1012204:	10000a1e 	bne	r2,zero,1012230 <find_first_empty_record_in_a_subdirectory+0x1f8>
 1012208:	e0bffd17 	ldw	r2,-12(fp)
 101220c:	1009883a 	mov	r4,r2
 1012210:	017fffc4 	movi	r5,-1
 1012214:	000d883a 	mov	r6,zero
 1012218:	100fefc0 	call	100fefc <mark_cluster>
 101221c:	1005003a 	cmpeq	r2,r2,zero
 1012220:	1000031e 	bne	r2,zero,1012230 <find_first_empty_record_in_a_subdirectory+0x1f8>
										((short int) (0xffff)), true)
								&& mark_cluster(cluster,
										((short int) (new_dir_cluster)), false)
								&& mark_cluster(new_dir_cluster,
										((short int) (0xffff)), false)) {
							Save_Modified_Sector();
 1012224:	100fcf80 	call	100fcf8 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;
 1012228:	e0bffd17 	ldw	r2,-12(fp)
 101222c:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
 1012230:	e0bffc0b 	ldhu	r2,-16(fp)
 1012234:	10bfffcc 	andi	r2,r2,65535
 1012238:	10bffe0c 	andi	r2,r2,65528
 101223c:	e0bffa15 	stw	r2,-24(fp)
 1012240:	00000206 	br	101224c <find_first_empty_record_in_a_subdirectory+0x214>
				}
			} else {
				// Error encountered.                 
				result = -1;
 1012244:	00bfffc4 	movi	r2,-1
 1012248:	e0bffb15 	stw	r2,-20(fp)
			}
		}
	} while ((cluster < 0x0000fff8) && (result == -1));
 101224c:	e0fffa17 	ldw	r3,-24(fp)
 1012250:	00bffdd4 	movui	r2,65527
 1012254:	10c00316 	blt	r2,r3,1012264 <find_first_empty_record_in_a_subdirectory+0x22c>
 1012258:	e0bffb17 	ldw	r2,-20(fp)
 101225c:	10bfffe0 	cmpeqi	r2,r2,-1
 1012260:	103f7e1e 	bne	r2,zero,101205c <find_first_empty_record_in_a_subdirectory+0x24>
	return result;
 1012264:	e0bffb17 	ldw	r2,-20(fp)
 1012268:	e0bfff15 	stw	r2,-4(fp)
 101226c:	e0bfff17 	ldw	r2,-4(fp)
}
 1012270:	e037883a 	mov	sp,fp
 1012274:	dfc00117 	ldw	ra,4(sp)
 1012278:	df000017 	ldw	fp,0(sp)
 101227c:	dec00204 	addi	sp,sp,8
 1012280:	f800283a 	ret

01012284 <find_first_empty_record_in_root_directory>:

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
 1012284:	defff804 	addi	sp,sp,-32
 1012288:	dfc00715 	stw	ra,28(sp)
 101228c:	df000615 	stw	fp,24(sp)
 1012290:	df000604 	addi	fp,sp,24
	int max_root_dir_sectors =
			((32 * boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
 1012294:	008040b4 	movhi	r2,258
 1012298:	10b03404 	addi	r2,r2,-16176
 101229c:	1080050b 	ldhu	r2,20(r2)
 10122a0:	10bfffcc 	andi	r2,r2,65535
 10122a4:	1006917a 	slli	r3,r2,5
 10122a8:	008040b4 	movhi	r2,258
 10122ac:	10b03404 	addi	r2,r2,-16176
 10122b0:	1080030b 	ldhu	r2,12(r2)
 10122b4:	10bfffcc 	andi	r2,r2,65535
 10122b8:	1885283a 	div	r2,r3,r2
 10122bc:	e0bffe15 	stw	r2,-8(fp)
	int sector_index;
	int result = -1;
 10122c0:	00bfffc4 	movi	r2,-1
 10122c4:	e0bffc15 	stw	r2,-16(fp)

	for (sector_index = 0; sector_index < max_root_dir_sectors;
 10122c8:	e03ffd15 	stw	zero,-12(fp)
 10122cc:	00002d06 	br	1012384 <find_first_empty_record_in_root_directory+0x100>
			sector_index++) {
		if (Read_Sector_Data(
 10122d0:	008040b4 	movhi	r2,258
 10122d4:	10b03404 	addi	r2,r2,-16176
 10122d8:	10c01317 	ldw	r3,76(r2)
 10122dc:	e0bffd17 	ldw	r2,-12(fp)
 10122e0:	1885883a 	add	r2,r3,r2
 10122e4:	1009883a 	mov	r4,r2
 10122e8:	d166e617 	ldw	r5,-25704(gp)
 10122ec:	100fd480 	call	100fd48 <Read_Sector_Data>
 10122f0:	1005003a 	cmpeq	r2,r2,zero
 10122f4:	1000261e 	bne	r2,zero,1012390 <find_first_empty_record_in_root_directory+0x10c>
				sector_index + boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
 10122f8:	e03ffb15 	stw	zero,-20(fp)
 10122fc:	00001b06 	br	101236c <find_first_empty_record_in_root_directory+0xe8>
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char =
 1012300:	d0a6e817 	ldw	r2,-25696(gp)
 1012304:	10800a17 	ldw	r2,40(r2)
 1012308:	1007883a 	mov	r3,r2
 101230c:	e0bffb17 	ldw	r2,-20(fp)
 1012310:	1004917a 	slli	r2,r2,5
 1012314:	1885883a 	add	r2,r3,r2
 1012318:	10800023 	ldbuio	r2,0(r2)
 101231c:	10803fcc 	andi	r2,r2,255
 1012320:	e0bffa0d 	sth	r2,-24(fp)
						((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
 1012324:	e0bffa0b 	ldhu	r2,-24(fp)
 1012328:	10803960 	cmpeqi	r2,r2,229
 101232c:	1000031e 	bne	r2,zero,101233c <find_first_empty_record_in_root_directory+0xb8>
 1012330:	e0bffa0b 	ldhu	r2,-24(fp)
 1012334:	1004c03a 	cmpne	r2,r2,zero
 1012338:	1000091e 	bne	r2,zero,1012360 <find_first_empty_record_in_root_directory+0xdc>
					result = (sector_index * 16 + file_counter) << 16;
 101233c:	e0bffd17 	ldw	r2,-12(fp)
 1012340:	1006913a 	slli	r3,r2,4
 1012344:	e0bffb17 	ldw	r2,-20(fp)
 1012348:	1885883a 	add	r2,r3,r2
 101234c:	1004943a 	slli	r2,r2,16
 1012350:	e0bffc15 	stw	r2,-16(fp)
					return result;
 1012354:	e0bffc17 	ldw	r2,-16(fp)
 1012358:	e0bfff15 	stw	r2,-4(fp)
 101235c:	00000e06 	br	1012398 <find_first_empty_record_in_root_directory+0x114>
		if (Read_Sector_Data(
				sector_index + boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
 1012360:	e0bffb17 	ldw	r2,-20(fp)
 1012364:	10800044 	addi	r2,r2,1
 1012368:	e0bffb15 	stw	r2,-20(fp)
 101236c:	e0bffb17 	ldw	r2,-20(fp)
 1012370:	10800410 	cmplti	r2,r2,16
 1012374:	103fe21e 	bne	r2,zero,1012300 <find_first_empty_record_in_root_directory+0x7c>
					/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors;
			sector_index++) {
 1012378:	e0bffd17 	ldw	r2,-12(fp)
 101237c:	10800044 	addi	r2,r2,1
 1012380:	e0bffd15 	stw	r2,-12(fp)
			((32 * boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors;
 1012384:	e0fffd17 	ldw	r3,-12(fp)
 1012388:	e0bffe17 	ldw	r2,-8(fp)
 101238c:	18bfd016 	blt	r3,r2,10122d0 <find_first_empty_record_in_root_directory+0x4c>
			}
		} else {
			break;
		}
	}
	return result;
 1012390:	e0bffc17 	ldw	r2,-16(fp)
 1012394:	e0bfff15 	stw	r2,-4(fp)
 1012398:	e0bfff17 	ldw	r2,-4(fp)
}
 101239c:	e037883a 	mov	sp,fp
 10123a0:	dfc00117 	ldw	ra,4(sp)
 10123a4:	df000017 	ldw	fp,0(sp)
 10123a8:	dec00204 	addi	sp,sp,8
 10123ac:	f800283a 	ret

010123b0 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name,
		char *extension)
// This function converts the file name into a name . extension format.
{
 10123b0:	defffa04 	addi	sp,sp,-24
 10123b4:	df000515 	stw	fp,20(sp)
 10123b8:	df000504 	addi	fp,sp,20
 10123bc:	e13ffd15 	stw	r4,-12(fp)
 10123c0:	e17ffe15 	stw	r5,-8(fp)
 10123c4:	e1bfff15 	stw	r6,-4(fp)
	int counter;
	int local = 0;
 10123c8:	e03ffb15 	stw	zero,-20(fp)

	for (counter = 0; counter < 8; counter++) {
 10123cc:	e03ffc15 	stw	zero,-16(fp)
 10123d0:	00002b06 	br	1012480 <convert_filename_to_name_extension+0xd0>
		if (filename[local] != '.') {
 10123d4:	e0bffb17 	ldw	r2,-20(fp)
 10123d8:	1007883a 	mov	r3,r2
 10123dc:	e0bffd17 	ldw	r2,-12(fp)
 10123e0:	1885883a 	add	r2,r3,r2
 10123e4:	10800003 	ldbu	r2,0(r2)
 10123e8:	10803fcc 	andi	r2,r2,255
 10123ec:	1080201c 	xori	r2,r2,128
 10123f0:	10bfe004 	addi	r2,r2,-128
 10123f4:	10800ba0 	cmpeqi	r2,r2,46
 10123f8:	1000181e 	bne	r2,zero,101245c <convert_filename_to_name_extension+0xac>
			name[counter] = filename[local];
 10123fc:	e0bffc17 	ldw	r2,-16(fp)
 1012400:	1007883a 	mov	r3,r2
 1012404:	e0bffe17 	ldw	r2,-8(fp)
 1012408:	1889883a 	add	r4,r3,r2
 101240c:	e0bffb17 	ldw	r2,-20(fp)
 1012410:	1007883a 	mov	r3,r2
 1012414:	e0bffd17 	ldw	r2,-12(fp)
 1012418:	1885883a 	add	r2,r3,r2
 101241c:	10800003 	ldbu	r2,0(r2)
 1012420:	20800005 	stb	r2,0(r4)
			if (filename[local] != 0)
 1012424:	e0bffb17 	ldw	r2,-20(fp)
 1012428:	1007883a 	mov	r3,r2
 101242c:	e0bffd17 	ldw	r2,-12(fp)
 1012430:	1885883a 	add	r2,r3,r2
 1012434:	10800003 	ldbu	r2,0(r2)
 1012438:	10803fcc 	andi	r2,r2,255
 101243c:	1080201c 	xori	r2,r2,128
 1012440:	10bfe004 	addi	r2,r2,-128
 1012444:	1005003a 	cmpeq	r2,r2,zero
 1012448:	10000a1e 	bne	r2,zero,1012474 <convert_filename_to_name_extension+0xc4>
				local++;
 101244c:	e0bffb17 	ldw	r2,-20(fp)
 1012450:	10800044 	addi	r2,r2,1
 1012454:	e0bffb15 	stw	r2,-20(fp)
 1012458:	00000606 	br	1012474 <convert_filename_to_name_extension+0xc4>
		} else {
			name[counter] = ' ';
 101245c:	e0bffc17 	ldw	r2,-16(fp)
 1012460:	1007883a 	mov	r3,r2
 1012464:	e0bffe17 	ldw	r2,-8(fp)
 1012468:	1887883a 	add	r3,r3,r2
 101246c:	00800804 	movi	r2,32
 1012470:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
 1012474:	e0bffc17 	ldw	r2,-16(fp)
 1012478:	10800044 	addi	r2,r2,1
 101247c:	e0bffc15 	stw	r2,-16(fp)
 1012480:	e0bffc17 	ldw	r2,-16(fp)
 1012484:	10800210 	cmplti	r2,r2,8
 1012488:	103fd21e 	bne	r2,zero,10123d4 <convert_filename_to_name_extension+0x24>
				local++;
		} else {
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
 101248c:	e0bffb17 	ldw	r2,-20(fp)
 1012490:	1007883a 	mov	r3,r2
 1012494:	e0bffd17 	ldw	r2,-12(fp)
 1012498:	1885883a 	add	r2,r3,r2
 101249c:	10800003 	ldbu	r2,0(r2)
 10124a0:	10803fcc 	andi	r2,r2,255
 10124a4:	1080201c 	xori	r2,r2,128
 10124a8:	10bfe004 	addi	r2,r2,-128
 10124ac:	10800b98 	cmpnei	r2,r2,46
 10124b0:	1000031e 	bne	r2,zero,10124c0 <convert_filename_to_name_extension+0x110>
		local++;
 10124b4:	e0bffb17 	ldw	r2,-20(fp)
 10124b8:	10800044 	addi	r2,r2,1
 10124bc:	e0bffb15 	stw	r2,-20(fp)
	for (counter = 0; counter < 3; counter++) {
 10124c0:	e03ffc15 	stw	zero,-16(fp)
 10124c4:	00002106 	br	101254c <convert_filename_to_name_extension+0x19c>
		if (filename[local] != 0) {
 10124c8:	e0bffb17 	ldw	r2,-20(fp)
 10124cc:	1007883a 	mov	r3,r2
 10124d0:	e0bffd17 	ldw	r2,-12(fp)
 10124d4:	1885883a 	add	r2,r3,r2
 10124d8:	10800003 	ldbu	r2,0(r2)
 10124dc:	10803fcc 	andi	r2,r2,255
 10124e0:	1080201c 	xori	r2,r2,128
 10124e4:	10bfe004 	addi	r2,r2,-128
 10124e8:	1005003a 	cmpeq	r2,r2,zero
 10124ec:	10000e1e 	bne	r2,zero,1012528 <convert_filename_to_name_extension+0x178>
			extension[counter] = filename[local];
 10124f0:	e0bffc17 	ldw	r2,-16(fp)
 10124f4:	1007883a 	mov	r3,r2
 10124f8:	e0bfff17 	ldw	r2,-4(fp)
 10124fc:	1889883a 	add	r4,r3,r2
 1012500:	e0bffb17 	ldw	r2,-20(fp)
 1012504:	1007883a 	mov	r3,r2
 1012508:	e0bffd17 	ldw	r2,-12(fp)
 101250c:	1885883a 	add	r2,r3,r2
 1012510:	10800003 	ldbu	r2,0(r2)
 1012514:	20800005 	stb	r2,0(r4)
			local++;
 1012518:	e0bffb17 	ldw	r2,-20(fp)
 101251c:	10800044 	addi	r2,r2,1
 1012520:	e0bffb15 	stw	r2,-20(fp)
 1012524:	00000606 	br	1012540 <convert_filename_to_name_extension+0x190>
		} else {
			extension[counter] = ' ';
 1012528:	e0bffc17 	ldw	r2,-16(fp)
 101252c:	1007883a 	mov	r3,r2
 1012530:	e0bfff17 	ldw	r2,-4(fp)
 1012534:	1887883a 	add	r3,r3,r2
 1012538:	00800804 	movi	r2,32
 101253c:	18800005 	stb	r2,0(r3)
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
 1012540:	e0bffc17 	ldw	r2,-16(fp)
 1012544:	10800044 	addi	r2,r2,1
 1012548:	e0bffc15 	stw	r2,-16(fp)
 101254c:	e0bffc17 	ldw	r2,-16(fp)
 1012550:	108000d0 	cmplti	r2,r2,3
 1012554:	103fdc1e 	bne	r2,zero,10124c8 <convert_filename_to_name_extension+0x118>
		} else {
			extension[counter] = ' ';
		}
	}

}
 1012558:	e037883a 	mov	sp,fp
 101255c:	df000017 	ldw	fp,0(sp)
 1012560:	dec00104 	addi	sp,sp,4
 1012564:	f800283a 	ret

01012568 <create_file>:

bool create_file(char *name, t_file_record *file_record,
		t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
 1012568:	defff304 	addi	sp,sp,-52
 101256c:	dfc00c15 	stw	ra,48(sp)
 1012570:	df000b15 	stw	fp,44(sp)
 1012574:	df000b04 	addi	fp,sp,44
 1012578:	e13ffb15 	stw	r4,-20(fp)
 101257c:	e17ffc15 	stw	r5,-16(fp)
 1012580:	e1bffd15 	stw	r6,-12(fp)
	unsigned int cluster_number;
	bool result = false;
 1012584:	e03ff915 	stw	zero,-28(fp)

	if (find_first_empty_cluster(&cluster_number)) {
 1012588:	e13ffa04 	addi	r4,fp,-24
 101258c:	1011e940 	call	1011e94 <find_first_empty_cluster>
 1012590:	1005003a 	cmpeq	r2,r2,zero
 1012594:	1000a31e 	bne	r2,zero,1012824 <create_file+0x2bc>
		int record_index;

		if (home_dir->file_record_cluster == 0) {
 1012598:	e0bffd17 	ldw	r2,-12(fp)
 101259c:	10800a17 	ldw	r2,40(r2)
 10125a0:	1004c03a 	cmpne	r2,r2,zero
 10125a4:	1000031e 	bne	r2,zero,10125b4 <create_file+0x4c>
			// Put a file in the root directory.
			record_index = find_first_empty_record_in_root_directory();
 10125a8:	10122840 	call	1012284 <find_first_empty_record_in_root_directory>
 10125ac:	e0bff815 	stw	r2,-32(fp)
 10125b0:	00000506 	br	10125c8 <create_file+0x60>
		} else {
			// Put a file in a subdirectory.
			record_index = find_first_empty_record_in_a_subdirectory(
 10125b4:	e0bffd17 	ldw	r2,-12(fp)
 10125b8:	1080058b 	ldhu	r2,22(r2)
 10125bc:	113fffcc 	andi	r4,r2,65535
 10125c0:	10120380 	call	1012038 <find_first_empty_record_in_a_subdirectory>
 10125c4:	e0bff815 	stw	r2,-32(fp)
					home_dir->start_cluster_index);
		}
		if (record_index >= 0) {
 10125c8:	e0bff817 	ldw	r2,-32(fp)
 10125cc:	1004803a 	cmplt	r2,r2,zero
 10125d0:	1000941e 	bne	r2,zero,1012824 <create_file+0x2bc>
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
 10125d4:	e13ffb17 	ldw	r4,-20(fp)
 10125d8:	10111700 	call	1011170 <get_dir_divider_location>
 10125dc:	e0bff615 	stw	r2,-40(fp)
			int last_dir_separator = 0;
 10125e0:	e03ff515 	stw	zero,-44(fp)

			// Skip through all directory separators.
			while (location > 0) {
 10125e4:	00000b06 	br	1012614 <create_file+0xac>
				last_dir_separator = last_dir_separator + location + 1;
 10125e8:	e0fff517 	ldw	r3,-44(fp)
 10125ec:	e0bff617 	ldw	r2,-40(fp)
 10125f0:	1885883a 	add	r2,r3,r2
 10125f4:	10800044 	addi	r2,r2,1
 10125f8:	e0bff515 	stw	r2,-44(fp)
				location = get_dir_divider_location(
 10125fc:	e0bff517 	ldw	r2,-44(fp)
 1012600:	1007883a 	mov	r3,r2
 1012604:	e0bffb17 	ldw	r2,-20(fp)
 1012608:	1889883a 	add	r4,r3,r2
 101260c:	10111700 	call	1011170 <get_dir_divider_location>
 1012610:	e0bff615 	stw	r2,-40(fp)
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
 1012614:	e0bff617 	ldw	r2,-40(fp)
 1012618:	10800048 	cmpgei	r2,r2,1
 101261c:	103ff21e 	bne	r2,zero,10125e8 <create_file+0x80>
				last_dir_separator = last_dir_separator + location + 1;
				location = get_dir_divider_location(
						&(name[last_dir_separator]));
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
 1012620:	e0bff517 	ldw	r2,-44(fp)
 1012624:	1007883a 	mov	r3,r2
 1012628:	e0bffb17 	ldw	r2,-20(fp)
 101262c:	1889883a 	add	r4,r3,r2
 1012630:	e0bffc17 	ldw	r2,-16(fp)
 1012634:	100b883a 	mov	r5,r2
 1012638:	e0bffc17 	ldw	r2,-16(fp)
 101263c:	10800204 	addi	r2,r2,8
 1012640:	100d883a 	mov	r6,r2
 1012644:	10123b00 	call	10123b0 <convert_filename_to_name_extension>
					file_record->name, file_record->extension);

			file_record->attributes = 0;
 1012648:	e0bffc17 	ldw	r2,-16(fp)
 101264c:	100002c5 	stb	zero,11(r2)
			file_record->create_time = 0;
 1012650:	e0bffc17 	ldw	r2,-16(fp)
 1012654:	1000030d 	sth	zero,12(r2)
			file_record->create_date = 0;
 1012658:	e0bffc17 	ldw	r2,-16(fp)
 101265c:	1000038d 	sth	zero,14(r2)
			file_record->last_access_date = 0;
 1012660:	e0bffc17 	ldw	r2,-16(fp)
 1012664:	1000040d 	sth	zero,16(r2)
			file_record->last_modified_time = 0;
 1012668:	e0bffc17 	ldw	r2,-16(fp)
 101266c:	1000048d 	sth	zero,18(r2)
			file_record->last_modified_date = 0;
 1012670:	e0bffc17 	ldw	r2,-16(fp)
 1012674:	1000050d 	sth	zero,20(r2)
			file_record->start_cluster_index = cluster_number;
 1012678:	e0bffa17 	ldw	r2,-24(fp)
 101267c:	1007883a 	mov	r3,r2
 1012680:	e0bffc17 	ldw	r2,-16(fp)
 1012684:	10c0058d 	sth	r3,22(r2)
			file_record->file_size_in_bytes = 0;
 1012688:	e0bffc17 	ldw	r2,-16(fp)
 101268c:	10000615 	stw	zero,24(r2)
			file_record->current_cluster_index = cluster_number;
 1012690:	e0fffa17 	ldw	r3,-24(fp)
 1012694:	e0bffc17 	ldw	r2,-16(fp)
 1012698:	10c00715 	stw	r3,28(r2)
			file_record->current_sector_in_cluster = 0;
 101269c:	e0bffc17 	ldw	r2,-16(fp)
 10126a0:	10000815 	stw	zero,32(r2)
			file_record->current_byte_position = 0;
 10126a4:	e0bffc17 	ldw	r2,-16(fp)
 10126a8:	10000915 	stw	zero,36(r2)
			file_record->file_record_cluster = record_index & 0x0000ffff;
 10126ac:	e0bff817 	ldw	r2,-32(fp)
 10126b0:	10ffffcc 	andi	r3,r2,65535
 10126b4:	e0bffc17 	ldw	r2,-16(fp)
 10126b8:	10c00a15 	stw	r3,40(r2)
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
 10126bc:	e0bff817 	ldw	r2,-32(fp)
 10126c0:	1005d43a 	srai	r2,r2,16
 10126c4:	10bfffcc 	andi	r2,r2,65535
 10126c8:	e0bfff15 	stw	r2,-4(fp)
 10126cc:	e0ffff17 	ldw	r3,-4(fp)
 10126d0:	1804403a 	cmpge	r2,r3,zero
 10126d4:	1000031e 	bne	r2,zero,10126e4 <create_file+0x17c>
 10126d8:	e0bfff17 	ldw	r2,-4(fp)
 10126dc:	108003c4 	addi	r2,r2,15
 10126e0:	e0bfff15 	stw	r2,-4(fp)
 10126e4:	e0ffff17 	ldw	r3,-4(fp)
 10126e8:	1805d13a 	srai	r2,r3,4
 10126ec:	1007883a 	mov	r3,r2
 10126f0:	e0bffc17 	ldw	r2,-16(fp)
 10126f4:	10c00b15 	stw	r3,44(r2)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
 10126f8:	e0bff817 	ldw	r2,-32(fp)
 10126fc:	1005d43a 	srai	r2,r2,16
 1012700:	108003cc 	andi	r2,r2,15
 1012704:	1004917a 	slli	r2,r2,5
 1012708:	1007883a 	mov	r3,r2
 101270c:	e0bffc17 	ldw	r2,-16(fp)
 1012710:	10c00c0d 	sth	r3,48(r2)
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
 1012714:	e0bffd17 	ldw	r2,-12(fp)
 1012718:	1080058b 	ldhu	r2,22(r2)
 101271c:	10ffffcc 	andi	r3,r2,65535
 1012720:	e0bffc17 	ldw	r2,-16(fp)
 1012724:	10c00d15 	stw	r3,52(r2)
			file_record->in_use = true;
 1012728:	e0fffc17 	ldw	r3,-16(fp)
 101272c:	00800044 	movi	r2,1
 1012730:	18800f15 	stw	r2,60(r3)
			file_record->modified = true;
 1012734:	e0fffc17 	ldw	r3,-16(fp)
 1012738:	00800044 	movi	r2,1
 101273c:	18800e15 	stw	r2,56(r3)
			// Now write the record at the specified location.
			file_record_sector =
 1012740:	e0bffc17 	ldw	r2,-16(fp)
 1012744:	10800a17 	ldw	r2,40(r2)
 1012748:	1004c03a 	cmpne	r2,r2,zero
 101274c:	1000081e 	bne	r2,zero,1012770 <create_file+0x208>
 1012750:	008040b4 	movhi	r2,258
 1012754:	10b03404 	addi	r2,r2,-16176
 1012758:	10c01317 	ldw	r3,76(r2)
 101275c:	e0bffc17 	ldw	r2,-16(fp)
 1012760:	10800b17 	ldw	r2,44(r2)
 1012764:	1887883a 	add	r3,r3,r2
 1012768:	e0fffe15 	stw	r3,-8(fp)
 101276c:	00001006 	br	10127b0 <create_file+0x248>
 1012770:	008040b4 	movhi	r2,258
 1012774:	10b03404 	addi	r2,r2,-16176
 1012778:	11001417 	ldw	r4,80(r2)
 101277c:	e0bffc17 	ldw	r2,-16(fp)
 1012780:	10800a17 	ldw	r2,40(r2)
 1012784:	10ffff84 	addi	r3,r2,-2
 1012788:	008040b4 	movhi	r2,258
 101278c:	10b03404 	addi	r2,r2,-16176
 1012790:	10800383 	ldbu	r2,14(r2)
 1012794:	10803fcc 	andi	r2,r2,255
 1012798:	1885383a 	mul	r2,r3,r2
 101279c:	2087883a 	add	r3,r4,r2
 10127a0:	e0bffc17 	ldw	r2,-16(fp)
 10127a4:	10800b17 	ldw	r2,44(r2)
 10127a8:	1887883a 	add	r3,r3,r2
 10127ac:	e0fffe15 	stw	r3,-8(fp)
 10127b0:	e0bffe17 	ldw	r2,-8(fp)
 10127b4:	e0bff715 	stw	r2,-36(fp)
							(boot_sector_data.data_sector_offset
									+ (file_record->file_record_cluster - 2)
											* boot_sector_data.sectors_per_cluster
									+ file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector,
 10127b8:	e13ff717 	ldw	r4,-36(fp)
 10127bc:	d166e617 	ldw	r5,-25704(gp)
 10127c0:	100fd480 	call	100fd48 <Read_Sector_Data>
 10127c4:	1005003a 	cmpeq	r2,r2,zero
 10127c8:	1000161e 	bne	r2,zero,1012824 <create_file+0x2bc>
					fat_partition_offset_in_512_byte_sectors)) {
				if (Write_File_Record_At_Offset(file_record->file_record_offset,
 10127cc:	e0bffc17 	ldw	r2,-16(fp)
 10127d0:	10800c0b 	ldhu	r2,48(r2)
 10127d4:	113fffcc 	andi	r4,r2,65535
 10127d8:	2120001c 	xori	r4,r4,32768
 10127dc:	21200004 	addi	r4,r4,-32768
 10127e0:	e17ffc17 	ldw	r5,-16(fp)
 10127e4:	10104140 	call	1010414 <Write_File_Record_At_Offset>
 10127e8:	1005003a 	cmpeq	r2,r2,zero
 10127ec:	10000d1e 	bne	r2,zero,1012824 <create_file+0x2bc>
						file_record)) {
					Save_Modified_Sector();
 10127f0:	100fcf80 	call	100fcf8 <Save_Modified_Sector>
					// Mark the first cluster of the file as the last cluster at first.
					mark_cluster(cluster_number, ((short int) (0xffff)), true);
 10127f4:	e13ffa17 	ldw	r4,-24(fp)
 10127f8:	017fffc4 	movi	r5,-1
 10127fc:	01800044 	movi	r6,1
 1012800:	100fefc0 	call	100fefc <mark_cluster>
					if (mark_cluster(cluster_number, ((short int) (0xffff)),
 1012804:	e13ffa17 	ldw	r4,-24(fp)
 1012808:	017fffc4 	movi	r5,-1
 101280c:	000d883a 	mov	r6,zero
 1012810:	100fefc0 	call	100fefc <mark_cluster>
 1012814:	1005003a 	cmpeq	r2,r2,zero
 1012818:	1000021e 	bne	r2,zero,1012824 <create_file+0x2bc>
							false)) {
						result = true;
 101281c:	00800044 	movi	r2,1
 1012820:	e0bff915 	stw	r2,-28(fp)
				}
			}
		}

	}
	return result;
 1012824:	e0bff917 	ldw	r2,-28(fp)
}
 1012828:	e037883a 	mov	sp,fp
 101282c:	dfc00117 	ldw	ra,4(sp)
 1012830:	df000017 	ldw	fp,0(sp)
 1012834:	dec00204 	addi	sp,sp,8
 1012838:	f800283a 	ret

0101283c <copy_file_record_name_to_string>:

void copy_file_record_name_to_string(t_file_record *file_record,
		char *file_name)
/* Copy a file name from the file record to a given string */
{
 101283c:	defffb04 	addi	sp,sp,-20
 1012840:	df000415 	stw	fp,16(sp)
 1012844:	df000404 	addi	fp,sp,16
 1012848:	e13ffe15 	stw	r4,-8(fp)
 101284c:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
 1012850:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
 1012854:	e03ffd15 	stw	zero,-12(fp)
 1012858:	00001606 	br	10128b4 <copy_file_record_name_to_string+0x78>
		if (file_record->name[index] != ' ') {
 101285c:	e0fffd17 	ldw	r3,-12(fp)
 1012860:	e0bffe17 	ldw	r2,-8(fp)
 1012864:	10c5883a 	add	r2,r2,r3
 1012868:	10800003 	ldbu	r2,0(r2)
 101286c:	10803fcc 	andi	r2,r2,255
 1012870:	10800820 	cmpeqi	r2,r2,32
 1012874:	10000c1e 	bne	r2,zero,10128a8 <copy_file_record_name_to_string+0x6c>
			file_name[flength] = file_record->name[index];
 1012878:	e0bffc17 	ldw	r2,-16(fp)
 101287c:	1007883a 	mov	r3,r2
 1012880:	e0bfff17 	ldw	r2,-4(fp)
 1012884:	1889883a 	add	r4,r3,r2
 1012888:	e0fffd17 	ldw	r3,-12(fp)
 101288c:	e0bffe17 	ldw	r2,-8(fp)
 1012890:	10c5883a 	add	r2,r2,r3
 1012894:	10800003 	ldbu	r2,0(r2)
 1012898:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
 101289c:	e0bffc17 	ldw	r2,-16(fp)
 10128a0:	10800044 	addi	r2,r2,1
 10128a4:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
 10128a8:	e0bffd17 	ldw	r2,-12(fp)
 10128ac:	10800044 	addi	r2,r2,1
 10128b0:	e0bffd15 	stw	r2,-12(fp)
 10128b4:	e0bffd17 	ldw	r2,-12(fp)
 10128b8:	10800210 	cmplti	r2,r2,8
 10128bc:	103fe71e 	bne	r2,zero,101285c <copy_file_record_name_to_string+0x20>
		if (file_record->name[index] != ' ') {
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ') {
 10128c0:	e0bffe17 	ldw	r2,-8(fp)
 10128c4:	10800203 	ldbu	r2,8(r2)
 10128c8:	10803fcc 	andi	r2,r2,255
 10128cc:	10800820 	cmpeqi	r2,r2,32
 10128d0:	1000261e 	bne	r2,zero,101296c <copy_file_record_name_to_string+0x130>
		file_name[flength] = '.';
 10128d4:	e0bffc17 	ldw	r2,-16(fp)
 10128d8:	1007883a 	mov	r3,r2
 10128dc:	e0bfff17 	ldw	r2,-4(fp)
 10128e0:	1887883a 	add	r3,r3,r2
 10128e4:	00800b84 	movi	r2,46
 10128e8:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
 10128ec:	e0bffc17 	ldw	r2,-16(fp)
 10128f0:	10800044 	addi	r2,r2,1
 10128f4:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++) {
 10128f8:	e03ffd15 	stw	zero,-12(fp)
 10128fc:	00001806 	br	1012960 <copy_file_record_name_to_string+0x124>
			if (file_record->extension[index] != ' ') {
 1012900:	e0fffd17 	ldw	r3,-12(fp)
 1012904:	e0bffe17 	ldw	r2,-8(fp)
 1012908:	1885883a 	add	r2,r3,r2
 101290c:	10800204 	addi	r2,r2,8
 1012910:	10800003 	ldbu	r2,0(r2)
 1012914:	10803fcc 	andi	r2,r2,255
 1012918:	10800820 	cmpeqi	r2,r2,32
 101291c:	10000d1e 	bne	r2,zero,1012954 <copy_file_record_name_to_string+0x118>
				file_name[flength] = file_record->extension[index];
 1012920:	e0bffc17 	ldw	r2,-16(fp)
 1012924:	1007883a 	mov	r3,r2
 1012928:	e0bfff17 	ldw	r2,-4(fp)
 101292c:	1889883a 	add	r4,r3,r2
 1012930:	e0fffd17 	ldw	r3,-12(fp)
 1012934:	e0bffe17 	ldw	r2,-8(fp)
 1012938:	1885883a 	add	r2,r3,r2
 101293c:	10800204 	addi	r2,r2,8
 1012940:	10800003 	ldbu	r2,0(r2)
 1012944:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
 1012948:	e0bffc17 	ldw	r2,-16(fp)
 101294c:	10800044 	addi	r2,r2,1
 1012950:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
 1012954:	e0bffd17 	ldw	r2,-12(fp)
 1012958:	10800044 	addi	r2,r2,1
 101295c:	e0bffd15 	stw	r2,-12(fp)
 1012960:	e0bffd17 	ldw	r2,-12(fp)
 1012964:	108000d0 	cmplti	r2,r2,3
 1012968:	103fe51e 	bne	r2,zero,1012900 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
 101296c:	e0bffc17 	ldw	r2,-16(fp)
 1012970:	1007883a 	mov	r3,r2
 1012974:	e0bfff17 	ldw	r2,-4(fp)
 1012978:	1885883a 	add	r2,r3,r2
 101297c:	10000005 	stb	zero,0(r2)
}
 1012980:	e037883a 	mov	sp,fp
 1012984:	df000017 	ldw	fp,0(sp)
 1012988:	dec00104 	addi	sp,sp,4
 101298c:	f800283a 	ret

01012990 <alt_up_sd_card_open_dev>:

///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////

alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name) {
 1012990:	defffc04 	addi	sp,sp,-16
 1012994:	dfc00315 	stw	ra,12(sp)
 1012998:	df000215 	stw	fp,8(sp)
 101299c:	df000204 	addi	fp,sp,8
 10129a0:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);
 10129a4:	e13fff17 	ldw	r4,-4(fp)
 10129a8:	014040b4 	movhi	r5,258
 10129ac:	29690004 	addi	r5,r5,-23552
 10129b0:	1015a0c0 	call	1015a0c <alt_find_dev>
 10129b4:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL) {
 10129b8:	e0bffe17 	ldw	r2,-8(fp)
 10129bc:	1005003a 	cmpeq	r2,r2,zero
 10129c0:	10001e1e 	bne	r2,zero,1012a3c <alt_up_sd_card_open_dev+0xac>
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
 10129c4:	e0bffe17 	ldw	r2,-8(fp)
 10129c8:	10800a17 	ldw	r2,40(r2)
 10129cc:	10808d04 	addi	r2,r2,564
 10129d0:	d0a6e015 	stw	r2,-25728(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
 10129d4:	e0bffe17 	ldw	r2,-8(fp)
 10129d8:	10800a17 	ldw	r2,40(r2)
 10129dc:	10808904 	addi	r2,r2,548
 10129e0:	d0a6e115 	stw	r2,-25724(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
 10129e4:	e0bffe17 	ldw	r2,-8(fp)
 10129e8:	10800a17 	ldw	r2,40(r2)
 10129ec:	10808404 	addi	r2,r2,528
 10129f0:	d0a6e215 	stw	r2,-25720(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
 10129f4:	e0bffe17 	ldw	r2,-8(fp)
 10129f8:	10800a17 	ldw	r2,40(r2)
 10129fc:	10808c04 	addi	r2,r2,560
 1012a00:	d0a6e315 	stw	r2,-25716(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
 1012a04:	e0bffe17 	ldw	r2,-8(fp)
 1012a08:	10800a17 	ldw	r2,40(r2)
 1012a0c:	10808b04 	addi	r2,r2,556
 1012a10:	d0a6e415 	stw	r2,-25712(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
 1012a14:	e0bffe17 	ldw	r2,-8(fp)
 1012a18:	10800a17 	ldw	r2,40(r2)
 1012a1c:	d0a6e515 	stw	r2,-25708(gp)
		device_pointer = dev;
 1012a20:	e0bffe17 	ldw	r2,-8(fp)
 1012a24:	d0a6e815 	stw	r2,-25696(gp)
		initialized = false;
 1012a28:	d026de15 	stw	zero,-25736(gp)
		is_sd_card_formated_as_FAT16 = false;
 1012a2c:	d026df15 	stw	zero,-25732(gp)
		search_data.valid = false;
 1012a30:	008040b4 	movhi	r2,258
 1012a34:	10b02f04 	addi	r2,r2,-16196
 1012a38:	10000415 	stw	zero,16(r2)
	}
	return dev;
 1012a3c:	e0bffe17 	ldw	r2,-8(fp)
}
 1012a40:	e037883a 	mov	sp,fp
 1012a44:	dfc00117 	ldw	ra,4(sp)
 1012a48:	df000017 	ldw	fp,0(sp)
 1012a4c:	dec00204 	addi	sp,sp,8
 1012a50:	f800283a 	ret

01012a54 <alt_up_sd_card_is_Present>:

bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
 1012a54:	defffd04 	addi	sp,sp,-12
 1012a58:	df000215 	stw	fp,8(sp)
 1012a5c:	df000204 	addi	fp,sp,8
	bool result = false;
 1012a60:	e03fff15 	stw	zero,-4(fp)

	if ((device_pointer != NULL)
 1012a64:	d0a6e817 	ldw	r2,-25696(gp)
 1012a68:	1005003a 	cmpeq	r2,r2,zero
 1012a6c:	1000081e 	bne	r2,zero,1012a90 <alt_up_sd_card_is_Present+0x3c>
 1012a70:	d0a6e017 	ldw	r2,-25728(gp)
 1012a74:	1080002b 	ldhuio	r2,0(r2)
 1012a78:	1080008c 	andi	r2,r2,2
 1012a7c:	1005003a 	cmpeq	r2,r2,zero
 1012a80:	1000031e 	bne	r2,zero,1012a90 <alt_up_sd_card_is_Present+0x3c>
			&& ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0)) {
		result = true;
 1012a84:	00800044 	movi	r2,1
 1012a88:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL)
 1012a8c:	00001e06 	br	1012b08 <alt_up_sd_card_is_Present+0xb4>
			&& ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
 1012a90:	d0a6de17 	ldw	r2,-25736(gp)
 1012a94:	10800058 	cmpnei	r2,r2,1
 1012a98:	10001b1e 	bne	r2,zero,1012b08 <alt_up_sd_card_is_Present+0xb4>
		int index;

		initialized = false;
 1012a9c:	d026de15 	stw	zero,-25736(gp)
		search_data.valid = false;
 1012aa0:	008040b4 	movhi	r2,258
 1012aa4:	10b02f04 	addi	r2,r2,-16196
 1012aa8:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
 1012aac:	d026df15 	stw	zero,-25732(gp)

		for (index = 0; index < MAX_FILES_OPENED; index++) {
 1012ab0:	e03ffe15 	stw	zero,-8(fp)
 1012ab4:	00001106 	br	1012afc <alt_up_sd_card_is_Present+0xa8>
			active_files[index].in_use = false;
 1012ab8:	e0bffe17 	ldw	r2,-8(fp)
 1012abc:	00c040b4 	movhi	r3,258
 1012ac0:	18f04904 	addi	r3,r3,-16092
 1012ac4:	100491ba 	slli	r2,r2,6
 1012ac8:	10c5883a 	add	r2,r2,r3
 1012acc:	10800f04 	addi	r2,r2,60
 1012ad0:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
 1012ad4:	e0bffe17 	ldw	r2,-8(fp)
 1012ad8:	00c040b4 	movhi	r3,258
 1012adc:	18f04904 	addi	r3,r3,-16092
 1012ae0:	100491ba 	slli	r2,r2,6
 1012ae4:	10c5883a 	add	r2,r2,r3
 1012ae8:	10800e04 	addi	r2,r2,56
 1012aec:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
 1012af0:	e0bffe17 	ldw	r2,-8(fp)
 1012af4:	10800044 	addi	r2,r2,1
 1012af8:	e0bffe15 	stw	r2,-8(fp)
 1012afc:	e0bffe17 	ldw	r2,-8(fp)
 1012b00:	10800510 	cmplti	r2,r2,20
 1012b04:	103fec1e 	bne	r2,zero,1012ab8 <alt_up_sd_card_is_Present+0x64>
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
	return result;
 1012b08:	e0bfff17 	ldw	r2,-4(fp)
}
 1012b0c:	e037883a 	mov	sp,fp
 1012b10:	df000017 	ldw	fp,0(sp)
 1012b14:	dec00104 	addi	sp,sp,4
 1012b18:	f800283a 	ret

01012b1c <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
 1012b1c:	defffd04 	addi	sp,sp,-12
 1012b20:	dfc00215 	stw	ra,8(sp)
 1012b24:	df000115 	stw	fp,4(sp)
 1012b28:	df000104 	addi	fp,sp,4
	bool result = false;
 1012b2c:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
 1012b30:	1012a540 	call	1012a54 <alt_up_sd_card_is_Present>
 1012b34:	1005003a 	cmpeq	r2,r2,zero
 1012b38:	10000d1e 	bne	r2,zero,1012b70 <alt_up_sd_card_is_FAT16+0x54>
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
 1012b3c:	d0a6de17 	ldw	r2,-25736(gp)
 1012b40:	1004c03a 	cmpne	r2,r2,zero
 1012b44:	1000071e 	bne	r2,zero,1012b64 <alt_up_sd_card_is_FAT16+0x48>
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
 1012b48:	1010d0c0 	call	1010d0c <Look_for_FAT16>
 1012b4c:	d0a6df15 	stw	r2,-25732(gp)
			initialized = is_sd_card_formated_as_FAT16;
 1012b50:	d0a6df17 	ldw	r2,-25732(gp)
 1012b54:	d0a6de15 	stw	r2,-25736(gp)
			search_data.valid = false;
 1012b58:	008040b4 	movhi	r2,258
 1012b5c:	10b02f04 	addi	r2,r2,-16196
 1012b60:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
 1012b64:	d0a6df17 	ldw	r2,-25732(gp)
 1012b68:	e0bfff15 	stw	r2,-4(fp)
 1012b6c:	00000206 	br	1012b78 <alt_up_sd_card_is_FAT16+0x5c>
	} else {
		// If not then you may as well not open the device.
		initialized = false;
 1012b70:	d026de15 	stw	zero,-25736(gp)
		is_sd_card_formated_as_FAT16 = false;
 1012b74:	d026df15 	stw	zero,-25732(gp)
	}

	return result;
 1012b78:	e0bfff17 	ldw	r2,-4(fp)
}
 1012b7c:	e037883a 	mov	sp,fp
 1012b80:	dfc00117 	ldw	ra,4(sp)
 1012b84:	df000017 	ldw	fp,0(sp)
 1012b88:	dec00204 	addi	sp,sp,8
 1012b8c:	f800283a 	ret

01012b90 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
 1012b90:	deffea04 	addi	sp,sp,-88
 1012b94:	dfc01515 	stw	ra,84(sp)
 1012b98:	df001415 	stw	fp,80(sp)
 1012b9c:	df001404 	addi	fp,sp,80
 1012ba0:	e13ffe15 	stw	r4,-8(fp)
 1012ba4:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
 1012ba8:	00800084 	movi	r2,2
 1012bac:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 1012bb0:	1012a540 	call	1012a54 <alt_up_sd_card_is_Present>
 1012bb4:	1005003a 	cmpeq	r2,r2,zero
 1012bb8:	1000241e 	bne	r2,zero,1012c4c <alt_up_sd_card_find_first+0xbc>
 1012bbc:	d0a6df17 	ldw	r2,-25732(gp)
 1012bc0:	1005003a 	cmpeq	r2,r2,zero
 1012bc4:	1000211e 	bne	r2,zero,1012c4c <alt_up_sd_card_find_first+0xbc>
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
 1012bc8:	e17fed04 	addi	r5,fp,-76
 1012bcc:	e1bfee04 	addi	r6,fp,-72
 1012bd0:	e13ffe17 	ldw	r4,-8(fp)
 1012bd4:	101151c0 	call	101151c <get_home_directory_cluster_for_file>
 1012bd8:	1005003a 	cmpeq	r2,r2,zero
 1012bdc:	1000191e 	bne	r2,zero,1012c44 <alt_up_sd_card_find_first+0xb4>
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
 1012be0:	e0bfed17 	ldw	r2,-76(fp)
 1012be4:	1007883a 	mov	r3,r2
 1012be8:	008040b4 	movhi	r2,258
 1012bec:	10b02f04 	addi	r2,r2,-16196
 1012bf0:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
 1012bf4:	e0bfed17 	ldw	r2,-76(fp)
 1012bf8:	1007883a 	mov	r3,r2
 1012bfc:	008040b4 	movhi	r2,258
 1012c00:	10b02f04 	addi	r2,r2,-16196
 1012c04:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
 1012c08:	008040b4 	movhi	r2,258
 1012c0c:	10b02f04 	addi	r2,r2,-16196
 1012c10:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
 1012c14:	00c040b4 	movhi	r3,258
 1012c18:	18f02f04 	addi	r3,r3,-16196
 1012c1c:	00bfffc4 	movi	r2,-1
 1012c20:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
 1012c24:	00c040b4 	movhi	r3,258
 1012c28:	18f02f04 	addi	r3,r3,-16196
 1012c2c:	00800044 	movi	r2,1
 1012c30:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
 1012c34:	e13fff17 	ldw	r4,-4(fp)
 1012c38:	1012c640 	call	1012c64 <alt_up_sd_card_find_next>
 1012c3c:	e0bfec0d 	sth	r2,-80(fp)
 1012c40:	00000206 	br	1012c4c <alt_up_sd_card_find_first+0xbc>
		} else {
			result = 1;
 1012c44:	00800044 	movi	r2,1
 1012c48:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
 1012c4c:	e0bfec0f 	ldh	r2,-80(fp)
}
 1012c50:	e037883a 	mov	sp,fp
 1012c54:	dfc00117 	ldw	ra,4(sp)
 1012c58:	df000017 	ldw	fp,0(sp)
 1012c5c:	dec00204 	addi	sp,sp,8
 1012c60:	f800283a 	ret

01012c64 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
 1012c64:	deffe404 	addi	sp,sp,-112
 1012c68:	dfc01b15 	stw	ra,108(sp)
 1012c6c:	df001a15 	stw	fp,104(sp)
 1012c70:	df001a04 	addi	fp,sp,104
 1012c74:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
 1012c78:	00800084 	movi	r2,2
 1012c7c:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 1012c80:	1012a540 	call	1012a54 <alt_up_sd_card_is_Present>
 1012c84:	1005003a 	cmpeq	r2,r2,zero
 1012c88:	1000da1e 	bne	r2,zero,1012ff4 <alt_up_sd_card_find_next+0x390>
 1012c8c:	d0a6df17 	ldw	r2,-25732(gp)
 1012c90:	1005003a 	cmpeq	r2,r2,zero
 1012c94:	1000d71e 	bne	r2,zero,1012ff4 <alt_up_sd_card_find_next+0x390>
		if (search_data.valid) {
 1012c98:	008040b4 	movhi	r2,258
 1012c9c:	10b02f04 	addi	r2,r2,-16196
 1012ca0:	10800417 	ldw	r2,16(r2)
 1012ca4:	1005003a 	cmpeq	r2,r2,zero
 1012ca8:	1000d01e 	bne	r2,zero,1012fec <alt_up_sd_card_find_next+0x388>
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
 1012cac:	008040b4 	movhi	r2,258
 1012cb0:	10b02f04 	addi	r2,r2,-16196
 1012cb4:	10800117 	ldw	r2,4(r2)
 1012cb8:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0) {
 1012cbc:	e0bfec17 	ldw	r2,-80(fp)
 1012cc0:	1004c03a 	cmpne	r2,r2,zero
 1012cc4:	1000511e 	bne	r2,zero,1012e0c <alt_up_sd_card_find_next+0x1a8>
				// Searching through the root directory
				int max_root_dir_sectors = ((32
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
 1012cc8:	008040b4 	movhi	r2,258
 1012ccc:	10b03404 	addi	r2,r2,-16176
 1012cd0:	1080050b 	ldhu	r2,20(r2)
 1012cd4:	10bfffcc 	andi	r2,r2,65535
 1012cd8:	1006917a 	slli	r3,r2,5
 1012cdc:	008040b4 	movhi	r2,258
 1012ce0:	10b03404 	addi	r2,r2,-16176
 1012ce4:	1080030b 	ldhu	r2,12(r2)
 1012ce8:	10bfffcc 	andi	r2,r2,65535
 1012cec:	1885283a 	div	r2,r3,r2
 1012cf0:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
 1012cf4:	008040b4 	movhi	r2,258
 1012cf8:	10b02f04 	addi	r2,r2,-16196
 1012cfc:	10800217 	ldw	r2,8(r2)
 1012d00:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector + 1;
 1012d04:	008040b4 	movhi	r2,258
 1012d08:	10b02f04 	addi	r2,r2,-16196
 1012d0c:	1080030b 	ldhu	r2,12(r2)
 1012d10:	10bfffcc 	andi	r2,r2,65535
 1012d14:	10a0001c 	xori	r2,r2,32768
 1012d18:	10a00004 	addi	r2,r2,-32768
 1012d1c:	10800044 	addi	r2,r2,1
 1012d20:	e0bfe915 	stw	r2,-92(fp)

				for (; sector_index < max_root_dir_sectors; sector_index++) {
 1012d24:	00003306 	br	1012df4 <alt_up_sd_card_find_next+0x190>
					if (Read_Sector_Data(
 1012d28:	008040b4 	movhi	r2,258
 1012d2c:	10b03404 	addi	r2,r2,-16176
 1012d30:	10c01317 	ldw	r3,76(r2)
 1012d34:	e0bfea17 	ldw	r2,-88(fp)
 1012d38:	1885883a 	add	r2,r3,r2
 1012d3c:	1009883a 	mov	r4,r2
 1012d40:	d166e617 	ldw	r5,-25704(gp)
 1012d44:	100fd480 	call	100fd48 <Read_Sector_Data>
 1012d48:	1005003a 	cmpeq	r2,r2,zero
 1012d4c:	10002c1e 	bne	r2,zero,1012e00 <alt_up_sd_card_find_next+0x19c>
							sector_index
									+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
 1012d50:	00002106 	br	1012dd8 <alt_up_sd_card_find_next+0x174>
							if (Read_File_Record_At_Offset(file_counter * 32,
 1012d54:	e0bfe917 	ldw	r2,-92(fp)
 1012d58:	1008917a 	slli	r4,r2,5
 1012d5c:	e1ffea17 	ldw	r7,-88(fp)
 1012d60:	e17fee04 	addi	r5,fp,-72
 1012d64:	000d883a 	mov	r6,zero
 1012d68:	10101900 	call	1010190 <Read_File_Record_At_Offset>
 1012d6c:	1005003a 	cmpeq	r2,r2,zero
 1012d70:	1000161e 	bne	r2,zero,1012dcc <alt_up_sd_card_find_next+0x168>
									&file_record, 0, sector_index)) {
								if ((file_record.name[0] != 0)
 1012d74:	e0bfee03 	ldbu	r2,-72(fp)
 1012d78:	10803fcc 	andi	r2,r2,255
 1012d7c:	1005003a 	cmpeq	r2,r2,zero
 1012d80:	1000121e 	bne	r2,zero,1012dcc <alt_up_sd_card_find_next+0x168>
 1012d84:	e0bfee03 	ldbu	r2,-72(fp)
 1012d88:	10803fcc 	andi	r2,r2,255
 1012d8c:	10803960 	cmpeqi	r2,r2,229
 1012d90:	10000e1e 	bne	r2,zero,1012dcc <alt_up_sd_card_find_next+0x168>
										&& (file_record.name[0] != 0xe5)) {
									/* Update search structure. */
									search_data.file_index_in_sector =
 1012d94:	e0bfe917 	ldw	r2,-92(fp)
 1012d98:	1007883a 	mov	r3,r2
 1012d9c:	008040b4 	movhi	r2,258
 1012da0:	10b02f04 	addi	r2,r2,-16196
 1012da4:	10c0030d 	sth	r3,12(r2)
											file_counter;
									search_data.current_sector_in_cluster =
 1012da8:	e0ffea17 	ldw	r3,-88(fp)
 1012dac:	008040b4 	movhi	r2,258
 1012db0:	10b02f04 	addi	r2,r2,-16196
 1012db4:	10c00215 	stw	r3,8(r2)
											sector_index;

									/* Copy file name.*/
									copy_file_record_name_to_string(
 1012db8:	e13fee04 	addi	r4,fp,-72
 1012dbc:	e17ffe17 	ldw	r5,-8(fp)
 1012dc0:	101283c0 	call	101283c <copy_file_record_name_to_string>
											&file_record, file_name);
									return 0;
 1012dc4:	e03fff15 	stw	zero,-4(fp)
 1012dc8:	00008c06 	br	1012ffc <alt_up_sd_card_find_next+0x398>
				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(
							sector_index
									+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
 1012dcc:	e0bfe917 	ldw	r2,-92(fp)
 1012dd0:	10800044 	addi	r2,r2,1
 1012dd4:	e0bfe915 	stw	r2,-92(fp)
 1012dd8:	e0bfe917 	ldw	r2,-92(fp)
 1012ddc:	10800410 	cmplti	r2,r2,16
 1012de0:	103fdc1e 	bne	r2,zero,1012d54 <alt_up_sd_card_find_next+0xf0>
											&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
 1012de4:	e03fe915 	stw	zero,-92(fp)
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector + 1;

				for (; sector_index < max_root_dir_sectors; sector_index++) {
 1012de8:	e0bfea17 	ldw	r2,-88(fp)
 1012dec:	10800044 	addi	r2,r2,1
 1012df0:	e0bfea15 	stw	r2,-88(fp)
 1012df4:	e0ffea17 	ldw	r3,-88(fp)
 1012df8:	e0bfeb17 	ldw	r2,-84(fp)
 1012dfc:	18bfca16 	blt	r3,r2,1012d28 <alt_up_sd_card_find_next+0xc4>
						file_counter = 0;
					} else {
						break;
					}
				}
				result = -1;
 1012e00:	00bfffc4 	movi	r2,-1
 1012e04:	e0bfed0d 	sth	r2,-76(fp)
 1012e08:	00007a06 	br	1012ff4 <alt_up_sd_card_find_next+0x390>
			} else {
				int file_counter = search_data.file_index_in_sector + 1;
 1012e0c:	008040b4 	movhi	r2,258
 1012e10:	10b02f04 	addi	r2,r2,-16196
 1012e14:	1080030b 	ldhu	r2,12(r2)
 1012e18:	10bfffcc 	andi	r2,r2,65535
 1012e1c:	10a0001c 	xori	r2,r2,32768
 1012e20:	10a00004 	addi	r2,r2,-32768
 1012e24:	10800044 	addi	r2,r2,1
 1012e28:	e0bfe815 	stw	r2,-96(fp)
				do {
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
 1012e2c:	e0bfec17 	ldw	r2,-80(fp)
 1012e30:	10ffff84 	addi	r3,r2,-2
 1012e34:	008040b4 	movhi	r2,258
 1012e38:	10b03404 	addi	r2,r2,-16176
 1012e3c:	10800383 	ldbu	r2,14(r2)
 1012e40:	10803fcc 	andi	r2,r2,255
 1012e44:	1885383a 	mul	r2,r3,r2
 1012e48:	1007883a 	mov	r3,r2
 1012e4c:	008040b4 	movhi	r2,258
 1012e50:	10b03404 	addi	r2,r2,-16176
 1012e54:	10801417 	ldw	r2,80(r2)
 1012e58:	1885883a 	add	r2,r3,r2
 1012e5c:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
 1012e60:	008040b4 	movhi	r2,258
 1012e64:	10b02f04 	addi	r2,r2,-16196
 1012e68:	10800217 	ldw	r2,8(r2)
 1012e6c:	e0bfe615 	stw	r2,-104(fp)

					for (; sector_index < boot_sector_data.sectors_per_cluster;
 1012e70:	00003406 	br	1012f44 <alt_up_sd_card_find_next+0x2e0>
							sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
 1012e74:	e0ffe617 	ldw	r3,-104(fp)
 1012e78:	e0bfe717 	ldw	r2,-100(fp)
 1012e7c:	1889883a 	add	r4,r3,r2
 1012e80:	d166e617 	ldw	r5,-25704(gp)
 1012e84:	100fd480 	call	100fd48 <Read_Sector_Data>
 1012e88:	1005003a 	cmpeq	r2,r2,zero
 1012e8c:	1000331e 	bne	r2,zero,1012f5c <alt_up_sd_card_find_next+0x2f8>
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
 1012e90:	00002506 	br	1012f28 <alt_up_sd_card_find_next+0x2c4>
								if (Read_File_Record_At_Offset(
 1012e94:	e0bfe817 	ldw	r2,-96(fp)
 1012e98:	1008917a 	slli	r4,r2,5
 1012e9c:	e1bfec17 	ldw	r6,-80(fp)
 1012ea0:	e1ffe617 	ldw	r7,-104(fp)
 1012ea4:	e17fee04 	addi	r5,fp,-72
 1012ea8:	10101900 	call	1010190 <Read_File_Record_At_Offset>
 1012eac:	1005003a 	cmpeq	r2,r2,zero
 1012eb0:	10001a1e 	bne	r2,zero,1012f1c <alt_up_sd_card_find_next+0x2b8>
										file_counter * 32, &file_record,
										cluster, sector_index)) {
									if ((file_record.name[0] != 0)
 1012eb4:	e0bfee03 	ldbu	r2,-72(fp)
 1012eb8:	10803fcc 	andi	r2,r2,255
 1012ebc:	1005003a 	cmpeq	r2,r2,zero
 1012ec0:	1000161e 	bne	r2,zero,1012f1c <alt_up_sd_card_find_next+0x2b8>
 1012ec4:	e0bfee03 	ldbu	r2,-72(fp)
 1012ec8:	10803fcc 	andi	r2,r2,255
 1012ecc:	10803960 	cmpeqi	r2,r2,229
 1012ed0:	1000121e 	bne	r2,zero,1012f1c <alt_up_sd_card_find_next+0x2b8>
											&& (file_record.name[0] != 0xe5)) {
										/* Update search structure. */
										search_data.current_cluster_index =
 1012ed4:	e0ffec17 	ldw	r3,-80(fp)
 1012ed8:	008040b4 	movhi	r2,258
 1012edc:	10b02f04 	addi	r2,r2,-16196
 1012ee0:	10c00115 	stw	r3,4(r2)
												cluster;
										search_data.file_index_in_sector =
 1012ee4:	e0bfe817 	ldw	r2,-96(fp)
 1012ee8:	1007883a 	mov	r3,r2
 1012eec:	008040b4 	movhi	r2,258
 1012ef0:	10b02f04 	addi	r2,r2,-16196
 1012ef4:	10c0030d 	sth	r3,12(r2)
												file_counter;
										search_data.current_sector_in_cluster =
 1012ef8:	e0ffe617 	ldw	r3,-104(fp)
 1012efc:	008040b4 	movhi	r2,258
 1012f00:	10b02f04 	addi	r2,r2,-16196
 1012f04:	10c00215 	stw	r3,8(r2)
												sector_index;

										/* Copy file name.*/
										copy_file_record_name_to_string(
 1012f08:	e13fee04 	addi	r4,fp,-72
 1012f0c:	e17ffe17 	ldw	r5,-8(fp)
 1012f10:	101283c0 	call	101283c <copy_file_record_name_to_string>
												&file_record, file_name);
										return 0;
 1012f14:	e03fff15 	stw	zero,-4(fp)
 1012f18:	00003806 	br	1012ffc <alt_up_sd_card_find_next+0x398>

					for (; sector_index < boot_sector_data.sectors_per_cluster;
							sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
 1012f1c:	e0bfe817 	ldw	r2,-96(fp)
 1012f20:	10800044 	addi	r2,r2,1
 1012f24:	e0bfe815 	stw	r2,-96(fp)
 1012f28:	e0bfe817 	ldw	r2,-96(fp)
 1012f2c:	10800410 	cmplti	r2,r2,16
 1012f30:	103fd81e 	bne	r2,zero,1012e94 <alt_up_sd_card_find_next+0x230>
												&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
 1012f34:	e03fe815 	stw	zero,-96(fp)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster;
							sector_index++) {
 1012f38:	e0bfe617 	ldw	r2,-104(fp)
 1012f3c:	10800044 	addi	r2,r2,1
 1012f40:	e0bfe615 	stw	r2,-104(fp)
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster;
 1012f44:	008040b4 	movhi	r2,258
 1012f48:	10b03404 	addi	r2,r2,-16176
 1012f4c:	10800383 	ldbu	r2,14(r2)
 1012f50:	10c03fcc 	andi	r3,r2,255
 1012f54:	e0bfe617 	ldw	r2,-104(fp)
 1012f58:	10ffc616 	blt	r2,r3,1012e74 <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster) {
 1012f5c:	008040b4 	movhi	r2,258
 1012f60:	10b03404 	addi	r2,r2,-16176
 1012f64:	10800383 	ldbu	r2,14(r2)
 1012f68:	10c03fcc 	andi	r3,r2,255
 1012f6c:	e0bfe617 	ldw	r2,-104(fp)
 1012f70:	10c01a16 	blt	r2,r3,1012fdc <alt_up_sd_card_find_next+0x378>
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster)) {
 1012f74:	e13fec17 	ldw	r4,-80(fp)
 1012f78:	e17fed84 	addi	r5,fp,-74
 1012f7c:	100fe440 	call	100fe44 <get_cluster_flag>
 1012f80:	1005003a 	cmpeq	r2,r2,zero
 1012f84:	1000131e 	bne	r2,zero,1012fd4 <alt_up_sd_card_find_next+0x370>
							if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 1012f88:	e0bfed8b 	ldhu	r2,-74(fp)
 1012f8c:	10bfffcc 	andi	r2,r2,65535
 1012f90:	10a0001c 	xori	r2,r2,32768
 1012f94:	10a00004 	addi	r2,r2,-32768
 1012f98:	10fffe0c 	andi	r3,r2,65528
 1012f9c:	00bffe14 	movui	r2,65528
 1012fa0:	1880051e 	bne	r3,r2,1012fb8 <alt_up_sd_card_find_next+0x354>
								result = -1;
 1012fa4:	00bfffc4 	movi	r2,-1
 1012fa8:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
 1012fac:	008040b4 	movhi	r2,258
 1012fb0:	10b02f04 	addi	r2,r2,-16196
 1012fb4:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
 1012fb8:	e0bfed8b 	ldhu	r2,-74(fp)
 1012fbc:	10bfffcc 	andi	r2,r2,65535
 1012fc0:	10a0001c 	xori	r2,r2,32768
 1012fc4:	10a00004 	addi	r2,r2,-32768
 1012fc8:	10bffe0c 	andi	r2,r2,65528
 1012fcc:	e0bfec15 	stw	r2,-80(fp)
 1012fd0:	00000206 	br	1012fdc <alt_up_sd_card_find_next+0x378>
						} else {
							// Error encountered.                 
							result = -1;
 1012fd4:	00bfffc4 	movi	r2,-1
 1012fd8:	e0bfed0d 	sth	r2,-76(fp)
						}
					}
				} while (cluster < 0x0000fff8);
 1012fdc:	e0ffec17 	ldw	r3,-80(fp)
 1012fe0:	00bffdd4 	movui	r2,65527
 1012fe4:	10ff910e 	bge	r2,r3,1012e2c <alt_up_sd_card_find_next+0x1c8>
 1012fe8:	00000206 	br	1012ff4 <alt_up_sd_card_find_next+0x390>
			}
		} else {
			// Call Find_First first.
			result = 3;
 1012fec:	008000c4 	movi	r2,3
 1012ff0:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
 1012ff4:	e0bfed0f 	ldh	r2,-76(fp)
 1012ff8:	e0bfff15 	stw	r2,-4(fp)
 1012ffc:	e0bfff17 	ldw	r2,-4(fp)
}
 1013000:	e037883a 	mov	sp,fp
 1013004:	dfc00117 	ldw	ra,4(sp)
 1013008:	df000017 	ldw	fp,0(sp)
 101300c:	dec00204 	addi	sp,sp,8
 1013010:	f800283a 	ret

01013014 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
 1013014:	deffe804 	addi	sp,sp,-96
 1013018:	dfc01715 	stw	ra,92(sp)
 101301c:	df001615 	stw	fp,88(sp)
 1013020:	df001604 	addi	fp,sp,88
 1013024:	e13ffd15 	stw	r4,-12(fp)
 1013028:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
 101302c:	00bfffc4 	movi	r2,-1
 1013030:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 1013034:	1012a540 	call	1012a54 <alt_up_sd_card_is_Present>
 1013038:	1005003a 	cmpeq	r2,r2,zero
 101303c:	1000d71e 	bne	r2,zero,101339c <alt_up_sd_card_fopen+0x388>
 1013040:	d0a6df17 	ldw	r2,-25732(gp)
 1013044:	1005003a 	cmpeq	r2,r2,zero
 1013048:	1000d41e 	bne	r2,zero,101339c <alt_up_sd_card_fopen+0x388>
		unsigned int home_directory_cluster = 0;
 101304c:	e03fec15 	stw	zero,-80(fp)
		 * Rules:
		 *  - no spaces
		 *  - at most 12 chatacters per name, with a period in 9th position.
		 *  - a / or a \ every at most 12 characters.
		 */
		filename_to_upper_case(name);
 1013050:	e13ffd17 	ldw	r4,-12(fp)
 1013054:	1010e100 	call	1010e10 <filename_to_upper_case>
		if (check_file_name_for_FAT16_compliance(name)) {
 1013058:	e13ffd17 	ldw	r4,-12(fp)
 101305c:	1010ee00 	call	1010ee0 <check_file_name_for_FAT16_compliance>
 1013060:	1005003a 	cmpeq	r2,r2,zero
 1013064:	1000cd1e 	bne	r2,zero,101339c <alt_up_sd_card_fopen+0x388>
			int index;

			/* Get home directory cluster location for the specified file. 0 means root directory. */
			if (!get_home_directory_cluster_for_file(name,
 1013068:	e17fec04 	addi	r5,fp,-80
 101306c:	e1bfed04 	addi	r6,fp,-76
 1013070:	e13ffd17 	ldw	r4,-12(fp)
 1013074:	101151c0 	call	101151c <get_home_directory_cluster_for_file>
 1013078:	1004c03a 	cmpne	r2,r2,zero
 101307c:	1000031e 	bne	r2,zero,101308c <alt_up_sd_card_fopen+0x78>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
 1013080:	e0bfeb0f 	ldh	r2,-84(fp)
 1013084:	e0bfff15 	stw	r2,-4(fp)
 1013088:	0000c606 	br	10133a4 <alt_up_sd_card_fopen+0x390>
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
 101308c:	e03fea15 	stw	zero,-88(fp)
 1013090:	00000f06 	br	10130d0 <alt_up_sd_card_fopen+0xbc>
				if (active_files[index].in_use == false) {
 1013094:	e0bfea17 	ldw	r2,-88(fp)
 1013098:	00c040b4 	movhi	r3,258
 101309c:	18f04904 	addi	r3,r3,-16092
 10130a0:	100491ba 	slli	r2,r2,6
 10130a4:	10c5883a 	add	r2,r2,r3
 10130a8:	10800f04 	addi	r2,r2,60
 10130ac:	10800017 	ldw	r2,0(r2)
 10130b0:	1004c03a 	cmpne	r2,r2,zero
 10130b4:	1000031e 	bne	r2,zero,10130c4 <alt_up_sd_card_fopen+0xb0>
					file_record_index = index;
 10130b8:	e0bfea17 	ldw	r2,-88(fp)
 10130bc:	e0bfeb0d 	sth	r2,-84(fp)
					break;
 10130c0:	00000606 	br	10130dc <alt_up_sd_card_fopen+0xc8>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
 10130c4:	e0bfea17 	ldw	r2,-88(fp)
 10130c8:	10800044 	addi	r2,r2,1
 10130cc:	e0bfea15 	stw	r2,-88(fp)
 10130d0:	e0bfea17 	ldw	r2,-88(fp)
 10130d4:	10800510 	cmplti	r2,r2,20
 10130d8:	103fee1e 	bne	r2,zero,1013094 <alt_up_sd_card_fopen+0x80>
				if (active_files[index].in_use == false) {
					file_record_index = index;
					break;
				}
			}
			if (file_record_index >= 0) {
 10130dc:	e0bfeb0f 	ldh	r2,-84(fp)
 10130e0:	1004803a 	cmplt	r2,r2,zero
 10130e4:	1000ad1e 	bne	r2,zero,101339c <alt_up_sd_card_fopen+0x388>
				/* If file record is found, then look for the specified file. If the create flag is set to true
				 * and the file is not found, then it should be created in the current directory.
				 */

				if (find_file_in_directory(home_directory_cluster, name,
 10130e8:	e0bfec17 	ldw	r2,-80(fp)
 10130ec:	1009883a 	mov	r4,r2
 10130f0:	e0bfeb0f 	ldh	r2,-84(fp)
 10130f4:	100491ba 	slli	r2,r2,6
 10130f8:	1007883a 	mov	r3,r2
 10130fc:	008040b4 	movhi	r2,258
 1013100:	10b04904 	addi	r2,r2,-16092
 1013104:	188d883a 	add	r6,r3,r2
 1013108:	e17ffd17 	ldw	r5,-12(fp)
 101310c:	1011a300 	call	1011a30 <find_file_in_directory>
 1013110:	1005003a 	cmpeq	r2,r2,zero
 1013114:	10007d1e 	bne	r2,zero,101330c <alt_up_sd_card_fopen+0x2f8>
						&(active_files[file_record_index]))) {
					if (create) {
 1013118:	e0bffe17 	ldw	r2,-8(fp)
 101311c:	1005003a 	cmpeq	r2,r2,zero
 1013120:	1000031e 	bne	r2,zero,1013130 <alt_up_sd_card_fopen+0x11c>
						/* Do not allow overwriting existing files for now. */
						return -1;
 1013124:	00bfffc4 	movi	r2,-1
 1013128:	e0bfff15 	stw	r2,-4(fp)
 101312c:	00009d06 	br	10133a4 <alt_up_sd_card_fopen+0x390>
					}
					active_files[file_record_index].current_cluster_index =
 1013130:	e17feb0f 	ldh	r5,-84(fp)
 1013134:	e0bfeb0f 	ldh	r2,-84(fp)
 1013138:	00c040b4 	movhi	r3,258
 101313c:	18f04904 	addi	r3,r3,-16092
 1013140:	100491ba 	slli	r2,r2,6
 1013144:	10c5883a 	add	r2,r2,r3
 1013148:	10800504 	addi	r2,r2,20
 101314c:	1080008b 	ldhu	r2,2(r2)
 1013150:	113fffcc 	andi	r4,r2,65535
 1013154:	00c040b4 	movhi	r3,258
 1013158:	18f04904 	addi	r3,r3,-16092
 101315c:	280491ba 	slli	r2,r5,6
 1013160:	10c5883a 	add	r2,r2,r3
 1013164:	10800704 	addi	r2,r2,28
 1013168:	11000015 	stw	r4,0(r2)
							active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster =
 101316c:	e0bfeb0f 	ldh	r2,-84(fp)
 1013170:	00c040b4 	movhi	r3,258
 1013174:	18f04904 	addi	r3,r3,-16092
 1013178:	100491ba 	slli	r2,r2,6
 101317c:	10c5883a 	add	r2,r2,r3
 1013180:	10800804 	addi	r2,r2,32
 1013184:	10000015 	stw	zero,0(r2)
							0;
					active_files[file_record_index].current_byte_position = 0;
 1013188:	e0bfeb0f 	ldh	r2,-84(fp)
 101318c:	00c040b4 	movhi	r3,258
 1013190:	18f04904 	addi	r3,r3,-16092
 1013194:	100491ba 	slli	r2,r2,6
 1013198:	10c5883a 	add	r2,r2,r3
 101319c:	10800904 	addi	r2,r2,36
 10131a0:	10000015 	stw	zero,0(r2)
					active_files[file_record_index].in_use = true;
 10131a4:	e0bfeb0f 	ldh	r2,-84(fp)
 10131a8:	00c040b4 	movhi	r3,258
 10131ac:	18f04904 	addi	r3,r3,-16092
 10131b0:	100491ba 	slli	r2,r2,6
 10131b4:	10c5883a 	add	r2,r2,r3
 10131b8:	10c00f04 	addi	r3,r2,60
 10131bc:	00800044 	movi	r2,1
 10131c0:	18800015 	stw	r2,0(r3)
					active_files[file_record_index].modified = false;
 10131c4:	e0bfeb0f 	ldh	r2,-84(fp)
 10131c8:	00c040b4 	movhi	r3,258
 10131cc:	18f04904 	addi	r3,r3,-16092
 10131d0:	100491ba 	slli	r2,r2,6
 10131d4:	10c5883a 	add	r2,r2,r3
 10131d8:	10800e04 	addi	r2,r2,56
 10131dc:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
 10131e0:	e03fea15 	stw	zero,-88(fp)
 10131e4:	00004506 	br	10132fc <alt_up_sd_card_fopen+0x2e8>
						if ((file_record_index != index)
 10131e8:	e0ffeb0f 	ldh	r3,-84(fp)
 10131ec:	e0bfea17 	ldw	r2,-88(fp)
 10131f0:	18803f26 	beq	r3,r2,10132f0 <alt_up_sd_card_fopen+0x2dc>
 10131f4:	e0bfea17 	ldw	r2,-88(fp)
 10131f8:	00c040b4 	movhi	r3,258
 10131fc:	18f04904 	addi	r3,r3,-16092
 1013200:	100491ba 	slli	r2,r2,6
 1013204:	10c5883a 	add	r2,r2,r3
 1013208:	10800f04 	addi	r2,r2,60
 101320c:	10800017 	ldw	r2,0(r2)
 1013210:	10800058 	cmpnei	r2,r2,1
 1013214:	1000361e 	bne	r2,zero,10132f0 <alt_up_sd_card_fopen+0x2dc>
								&& (active_files[index].in_use == true)) {
							if ((active_files[file_record_index].file_record_cluster
 1013218:	e0bfeb0f 	ldh	r2,-84(fp)
 101321c:	00c040b4 	movhi	r3,258
 1013220:	18f04904 	addi	r3,r3,-16092
 1013224:	100491ba 	slli	r2,r2,6
 1013228:	10c5883a 	add	r2,r2,r3
 101322c:	10800a04 	addi	r2,r2,40
 1013230:	11000017 	ldw	r4,0(r2)
 1013234:	e0bfea17 	ldw	r2,-88(fp)
 1013238:	00c040b4 	movhi	r3,258
 101323c:	18f04904 	addi	r3,r3,-16092
 1013240:	100491ba 	slli	r2,r2,6
 1013244:	10c5883a 	add	r2,r2,r3
 1013248:	10800a04 	addi	r2,r2,40
 101324c:	10800017 	ldw	r2,0(r2)
 1013250:	2080271e 	bne	r4,r2,10132f0 <alt_up_sd_card_fopen+0x2dc>
 1013254:	e0bfeb0f 	ldh	r2,-84(fp)
 1013258:	00c040b4 	movhi	r3,258
 101325c:	18f04904 	addi	r3,r3,-16092
 1013260:	100491ba 	slli	r2,r2,6
 1013264:	10c5883a 	add	r2,r2,r3
 1013268:	10800b04 	addi	r2,r2,44
 101326c:	11000017 	ldw	r4,0(r2)
 1013270:	e0bfea17 	ldw	r2,-88(fp)
 1013274:	00c040b4 	movhi	r3,258
 1013278:	18f04904 	addi	r3,r3,-16092
 101327c:	100491ba 	slli	r2,r2,6
 1013280:	10c5883a 	add	r2,r2,r3
 1013284:	10800b04 	addi	r2,r2,44
 1013288:	10800017 	ldw	r2,0(r2)
 101328c:	2080181e 	bne	r4,r2,10132f0 <alt_up_sd_card_fopen+0x2dc>
 1013290:	e0bfeb0f 	ldh	r2,-84(fp)
 1013294:	00c040b4 	movhi	r3,258
 1013298:	18f04904 	addi	r3,r3,-16092
 101329c:	100491ba 	slli	r2,r2,6
 10132a0:	10c5883a 	add	r2,r2,r3
 10132a4:	10800c04 	addi	r2,r2,48
 10132a8:	1100000b 	ldhu	r4,0(r2)
 10132ac:	e0bfea17 	ldw	r2,-88(fp)
 10132b0:	00c040b4 	movhi	r3,258
 10132b4:	18f04904 	addi	r3,r3,-16092
 10132b8:	100491ba 	slli	r2,r2,6
 10132bc:	10c5883a 	add	r2,r2,r3
 10132c0:	10800c04 	addi	r2,r2,48
 10132c4:	1080000b 	ldhu	r2,0(r2)
 10132c8:	20ffffcc 	andi	r3,r4,65535
 10132cc:	18e0001c 	xori	r3,r3,32768
 10132d0:	18e00004 	addi	r3,r3,-32768
 10132d4:	10bfffcc 	andi	r2,r2,65535
 10132d8:	10a0001c 	xori	r2,r2,32768
 10132dc:	10a00004 	addi	r2,r2,-32768
 10132e0:	1880031e 	bne	r3,r2,10132f0 <alt_up_sd_card_fopen+0x2dc>
									&& (active_files[file_record_index].file_record_sector_in_cluster
											== active_files[index].file_record_sector_in_cluster)
									&& (active_files[file_record_index].file_record_offset
											== active_files[index].file_record_offset)) {
								// file already in use.
								file_record_index = -2;
 10132e4:	00bfff84 	movi	r2,-2
 10132e8:	e0bfeb0d 	sth	r2,-84(fp)
								break;
 10132ec:	00002b06 	br	101339c <alt_up_sd_card_fopen+0x388>
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
					active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
 10132f0:	e0bfea17 	ldw	r2,-88(fp)
 10132f4:	10800044 	addi	r2,r2,1
 10132f8:	e0bfea15 	stw	r2,-88(fp)
 10132fc:	e0bfea17 	ldw	r2,-88(fp)
 1013300:	10800510 	cmplti	r2,r2,20
 1013304:	103fb81e 	bne	r2,zero,10131e8 <alt_up_sd_card_fopen+0x1d4>
 1013308:	00002406 	br	101339c <alt_up_sd_card_fopen+0x388>
								break;
							}
						}
					}

				} else if (create) {
 101330c:	e0bffe17 	ldw	r2,-8(fp)
 1013310:	1005003a 	cmpeq	r2,r2,zero
 1013314:	10001f1e 	bne	r2,zero,1013394 <alt_up_sd_card_fopen+0x380>
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
 1013318:	e0bfeb0f 	ldh	r2,-84(fp)
 101331c:	100491ba 	slli	r2,r2,6
 1013320:	1007883a 	mov	r3,r2
 1013324:	008040b4 	movhi	r2,258
 1013328:	10b04904 	addi	r2,r2,-16092
 101332c:	188b883a 	add	r5,r3,r2
 1013330:	e1bfed04 	addi	r6,fp,-76
 1013334:	e13ffd17 	ldw	r4,-12(fp)
 1013338:	10125680 	call	1012568 <create_file>
 101333c:	1005003a 	cmpeq	r2,r2,zero
 1013340:	1000111e 	bne	r2,zero,1013388 <alt_up_sd_card_fopen+0x374>
							&home_dir)) {
						active_files[file_record_index].in_use = true;
 1013344:	e0bfeb0f 	ldh	r2,-84(fp)
 1013348:	00c040b4 	movhi	r3,258
 101334c:	18f04904 	addi	r3,r3,-16092
 1013350:	100491ba 	slli	r2,r2,6
 1013354:	10c5883a 	add	r2,r2,r3
 1013358:	10c00f04 	addi	r3,r2,60
 101335c:	00800044 	movi	r2,1
 1013360:	18800015 	stw	r2,0(r3)
						active_files[file_record_index].modified = true;
 1013364:	e0bfeb0f 	ldh	r2,-84(fp)
 1013368:	00c040b4 	movhi	r3,258
 101336c:	18f04904 	addi	r3,r3,-16092
 1013370:	100491ba 	slli	r2,r2,6
 1013374:	10c5883a 	add	r2,r2,r3
 1013378:	10c00e04 	addi	r3,r2,56
 101337c:	00800044 	movi	r2,1
 1013380:	18800015 	stw	r2,0(r3)
 1013384:	00000506 	br	101339c <alt_up_sd_card_fopen+0x388>
					} else {
						/* If file creation fails then return an invalid file handle. */
						file_record_index = -1;
 1013388:	00bfffc4 	movi	r2,-1
 101338c:	e0bfeb0d 	sth	r2,-84(fp)
 1013390:	00000206 	br	101339c <alt_up_sd_card_fopen+0x388>
					}
				} else {
					/* Otherwise the file could not be opened.*/
					file_record_index = -1;
 1013394:	00bfffc4 	movi	r2,-1
 1013398:	e0bfeb0d 	sth	r2,-84(fp)
				}
			}
		}
	}

	return file_record_index;
 101339c:	e0bfeb0f 	ldh	r2,-84(fp)
 10133a0:	e0bfff15 	stw	r2,-4(fp)
 10133a4:	e0bfff17 	ldw	r2,-4(fp)
}
 10133a8:	e037883a 	mov	sp,fp
 10133ac:	dfc00117 	ldw	ra,4(sp)
 10133b0:	df000017 	ldw	fp,0(sp)
 10133b4:	dec00204 	addi	sp,sp,8
 10133b8:	f800283a 	ret

010133bc <alt_up_sd_card_set_attributes>:

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 10133bc:	defffd04 	addi	sp,sp,-12
 10133c0:	df000215 	stw	fp,8(sp)
 10133c4:	df000204 	addi	fp,sp,8
 10133c8:	e13ffe0d 	sth	r4,-8(fp)
 10133cc:	e17fff0d 	sth	r5,-4(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 10133d0:	e0bffe0f 	ldh	r2,-8(fp)
 10133d4:	1004803a 	cmplt	r2,r2,zero
 10133d8:	1000181e 	bne	r2,zero,101343c <alt_up_sd_card_set_attributes+0x80>
 10133dc:	e0bffe0f 	ldh	r2,-8(fp)
 10133e0:	10800508 	cmpgei	r2,r2,20
 10133e4:	1000151e 	bne	r2,zero,101343c <alt_up_sd_card_set_attributes+0x80>
		if (active_files[file_handle].in_use) {
 10133e8:	e0bffe0f 	ldh	r2,-8(fp)
 10133ec:	00c040b4 	movhi	r3,258
 10133f0:	18f04904 	addi	r3,r3,-16092
 10133f4:	100491ba 	slli	r2,r2,6
 10133f8:	10c5883a 	add	r2,r2,r3
 10133fc:	10800f04 	addi	r2,r2,60
 1013400:	10800017 	ldw	r2,0(r2)
 1013404:	1005003a 	cmpeq	r2,r2,zero
 1013408:	10000c1e 	bne	r2,zero,101343c <alt_up_sd_card_set_attributes+0x80>
			active_files[file_handle].attributes =
 101340c:	e17ffe0f 	ldh	r5,-8(fp)
 1013410:	e0bfff0b 	ldhu	r2,-4(fp)
 1013414:	1007883a 	mov	r3,r2
 1013418:	00bfffc4 	movi	r2,-1
 101341c:	1884703a 	and	r2,r3,r2
 1013420:	1009883a 	mov	r4,r2
 1013424:	00c040b4 	movhi	r3,258
 1013428:	18f04904 	addi	r3,r3,-16092
 101342c:	280491ba 	slli	r2,r5,6
 1013430:	10c5883a 	add	r2,r2,r3
 1013434:	10800204 	addi	r2,r2,8
 1013438:	110000c5 	stb	r4,3(r2)
					((char) (attributes & 0x00ff));
		}
	}
}
 101343c:	e037883a 	mov	sp,fp
 1013440:	df000017 	ldw	fp,0(sp)
 1013444:	dec00104 	addi	sp,sp,4
 1013448:	f800283a 	ret

0101344c <alt_up_sd_card_get_attributes>:

short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 101344c:	defffd04 	addi	sp,sp,-12
 1013450:	df000215 	stw	fp,8(sp)
 1013454:	df000204 	addi	fp,sp,8
 1013458:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
 101345c:	00bfffc4 	movi	r2,-1
 1013460:	e0bffe0d 	sth	r2,-8(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 1013464:	e0bfff0f 	ldh	r2,-4(fp)
 1013468:	1004803a 	cmplt	r2,r2,zero
 101346c:	1000151e 	bne	r2,zero,10134c4 <alt_up_sd_card_get_attributes+0x78>
 1013470:	e0bfff0f 	ldh	r2,-4(fp)
 1013474:	10800508 	cmpgei	r2,r2,20
 1013478:	1000121e 	bne	r2,zero,10134c4 <alt_up_sd_card_get_attributes+0x78>
		if (active_files[file_handle].in_use) {
 101347c:	e0bfff0f 	ldh	r2,-4(fp)
 1013480:	00c040b4 	movhi	r3,258
 1013484:	18f04904 	addi	r3,r3,-16092
 1013488:	100491ba 	slli	r2,r2,6
 101348c:	10c5883a 	add	r2,r2,r3
 1013490:	10800f04 	addi	r2,r2,60
 1013494:	10800017 	ldw	r2,0(r2)
 1013498:	1005003a 	cmpeq	r2,r2,zero
 101349c:	1000091e 	bne	r2,zero,10134c4 <alt_up_sd_card_get_attributes+0x78>
			result = ((active_files[file_handle].attributes) & 0x00ff);
 10134a0:	e0bfff0f 	ldh	r2,-4(fp)
 10134a4:	00c040b4 	movhi	r3,258
 10134a8:	18f04904 	addi	r3,r3,-16092
 10134ac:	100491ba 	slli	r2,r2,6
 10134b0:	10c5883a 	add	r2,r2,r3
 10134b4:	10800204 	addi	r2,r2,8
 10134b8:	108000c3 	ldbu	r2,3(r2)
 10134bc:	10803fcc 	andi	r2,r2,255
 10134c0:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
 10134c4:	e0bffe0f 	ldh	r2,-8(fp)
}
 10134c8:	e037883a 	mov	sp,fp
 10134cc:	df000017 	ldw	fp,0(sp)
 10134d0:	dec00104 	addi	sp,sp,4
 10134d4:	f800283a 	ret

010134d8 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
 10134d8:	defffa04 	addi	sp,sp,-24
 10134dc:	dfc00515 	stw	ra,20(sp)
 10134e0:	df000415 	stw	fp,16(sp)
 10134e4:	df000404 	addi	fp,sp,16
 10134e8:	e13ffe0d 	sth	r4,-8(fp)
	short int ch = -1;
 10134ec:	00bfffc4 	movi	r2,-1
 10134f0:	e0bffd0d 	sth	r2,-12(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 10134f4:	e0bffe0f 	ldh	r2,-8(fp)
 10134f8:	1004803a 	cmplt	r2,r2,zero
 10134fc:	1000d31e 	bne	r2,zero,101384c <alt_up_sd_card_read+0x374>
 1013500:	e0bffe0f 	ldh	r2,-8(fp)
 1013504:	10800508 	cmpgei	r2,r2,20
 1013508:	1000d01e 	bne	r2,zero,101384c <alt_up_sd_card_read+0x374>
		if (active_files[file_handle].in_use) {
 101350c:	e0bffe0f 	ldh	r2,-8(fp)
 1013510:	00c040b4 	movhi	r3,258
 1013514:	18f04904 	addi	r3,r3,-16092
 1013518:	100491ba 	slli	r2,r2,6
 101351c:	10c5883a 	add	r2,r2,r3
 1013520:	10800f04 	addi	r2,r2,60
 1013524:	10800017 	ldw	r2,0(r2)
 1013528:	1005003a 	cmpeq	r2,r2,zero
 101352c:	1000c71e 	bne	r2,zero,101384c <alt_up_sd_card_read+0x374>
			if (active_files[file_handle].current_byte_position
 1013530:	e0bffe0f 	ldh	r2,-8(fp)
 1013534:	00c040b4 	movhi	r3,258
 1013538:	18f04904 	addi	r3,r3,-16092
 101353c:	100491ba 	slli	r2,r2,6
 1013540:	10c5883a 	add	r2,r2,r3
 1013544:	10800904 	addi	r2,r2,36
 1013548:	11000017 	ldw	r4,0(r2)
 101354c:	e0bffe0f 	ldh	r2,-8(fp)
 1013550:	00c040b4 	movhi	r3,258
 1013554:	18f04904 	addi	r3,r3,-16092
 1013558:	100491ba 	slli	r2,r2,6
 101355c:	10c5883a 	add	r2,r2,r3
 1013560:	10800604 	addi	r2,r2,24
 1013564:	10800017 	ldw	r2,0(r2)
 1013568:	2080b82e 	bgeu	r4,r2,101384c <alt_up_sd_card_read+0x374>
					< active_files[file_handle].file_size_in_bytes) {
				int data_sector = boot_sector_data.data_sector_offset
						+ (active_files[file_handle].current_cluster_index - 2)
								* boot_sector_data.sectors_per_cluster
						+ active_files[file_handle].current_sector_in_cluster;
 101356c:	008040b4 	movhi	r2,258
 1013570:	10b03404 	addi	r2,r2,-16176
 1013574:	11001417 	ldw	r4,80(r2)
 1013578:	e0bffe0f 	ldh	r2,-8(fp)
 101357c:	00c040b4 	movhi	r3,258
 1013580:	18f04904 	addi	r3,r3,-16092
 1013584:	100491ba 	slli	r2,r2,6
 1013588:	10c5883a 	add	r2,r2,r3
 101358c:	10800704 	addi	r2,r2,28
 1013590:	10800017 	ldw	r2,0(r2)
 1013594:	10ffff84 	addi	r3,r2,-2
 1013598:	008040b4 	movhi	r2,258
 101359c:	10b03404 	addi	r2,r2,-16176
 10135a0:	10800383 	ldbu	r2,14(r2)
 10135a4:	10803fcc 	andi	r2,r2,255
 10135a8:	1885383a 	mul	r2,r3,r2
 10135ac:	2089883a 	add	r4,r4,r2
 10135b0:	e0bffe0f 	ldh	r2,-8(fp)
 10135b4:	00c040b4 	movhi	r3,258
 10135b8:	18f04904 	addi	r3,r3,-16092
 10135bc:	100491ba 	slli	r2,r2,6
 10135c0:	10c5883a 	add	r2,r2,r3
 10135c4:	10800804 	addi	r2,r2,32
 10135c8:	10800017 	ldw	r2,0(r2)
 10135cc:	2085883a 	add	r2,r4,r2
 10135d0:	e0bffc15 	stw	r2,-16(fp)

				if ((active_files[file_handle].current_byte_position > 0)
 10135d4:	e0bffe0f 	ldh	r2,-8(fp)
 10135d8:	00c040b4 	movhi	r3,258
 10135dc:	18f04904 	addi	r3,r3,-16092
 10135e0:	100491ba 	slli	r2,r2,6
 10135e4:	10c5883a 	add	r2,r2,r3
 10135e8:	10800904 	addi	r2,r2,36
 10135ec:	10800017 	ldw	r2,0(r2)
 10135f0:	1005003a 	cmpeq	r2,r2,zero
 10135f4:	10006a1e 	bne	r2,zero,10137a0 <alt_up_sd_card_read+0x2c8>
 10135f8:	e0bffe0f 	ldh	r2,-8(fp)
 10135fc:	00c040b4 	movhi	r3,258
 1013600:	18f04904 	addi	r3,r3,-16092
 1013604:	100491ba 	slli	r2,r2,6
 1013608:	10c5883a 	add	r2,r2,r3
 101360c:	10800904 	addi	r2,r2,36
 1013610:	10800017 	ldw	r2,0(r2)
 1013614:	10807fcc 	andi	r2,r2,511
 1013618:	1004c03a 	cmpne	r2,r2,zero
 101361c:	1000601e 	bne	r2,zero,10137a0 <alt_up_sd_card_read+0x2c8>
						&& ((active_files[file_handle].current_byte_position
								% 512) == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
 1013620:	e0bffe0f 	ldh	r2,-8(fp)
 1013624:	00c040b4 	movhi	r3,258
 1013628:	18f04904 	addi	r3,r3,-16092
 101362c:	100491ba 	slli	r2,r2,6
 1013630:	10c5883a 	add	r2,r2,r3
 1013634:	10800804 	addi	r2,r2,32
 1013638:	10c00017 	ldw	r3,0(r2)
 101363c:	008040b4 	movhi	r2,258
 1013640:	10b03404 	addi	r2,r2,-16176
 1013644:	10800383 	ldbu	r2,14(r2)
 1013648:	10803fcc 	andi	r2,r2,255
 101364c:	10bfffc4 	addi	r2,r2,-1
 1013650:	1880411e 	bne	r3,r2,1013758 <alt_up_sd_card_read+0x280>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
 1013654:	e0bffe0f 	ldh	r2,-8(fp)
 1013658:	00c040b4 	movhi	r3,258
 101365c:	18f04904 	addi	r3,r3,-16092
 1013660:	100491ba 	slli	r2,r2,6
 1013664:	10c5883a 	add	r2,r2,r3
 1013668:	10800704 	addi	r2,r2,28
 101366c:	11000017 	ldw	r4,0(r2)
 1013670:	e17ffd84 	addi	r5,fp,-10
 1013674:	100fe440 	call	100fe44 <get_cluster_flag>
 1013678:	1005003a 	cmpeq	r2,r2,zero
 101367c:	1000331e 	bne	r2,zero,101374c <alt_up_sd_card_read+0x274>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
 1013680:	e0bffd8b 	ldhu	r2,-10(fp)
 1013684:	10bfffcc 	andi	r2,r2,65535
 1013688:	10fffe0c 	andi	r3,r2,65528
 101368c:	00bffe14 	movui	r2,65528
 1013690:	1880031e 	bne	r3,r2,10136a0 <alt_up_sd_card_read+0x1c8>
								/* End of file */
								return -1;
 1013694:	00bfffc4 	movi	r2,-1
 1013698:	e0bfff15 	stw	r2,-4(fp)
 101369c:	00006d06 	br	1013854 <alt_up_sd_card_read+0x37c>
							} else {
								active_files[file_handle].current_cluster_index =
 10136a0:	e13ffe0f 	ldh	r4,-8(fp)
 10136a4:	e0bffd8b 	ldhu	r2,-10(fp)
 10136a8:	117fffcc 	andi	r5,r2,65535
 10136ac:	00c040b4 	movhi	r3,258
 10136b0:	18f04904 	addi	r3,r3,-16092
 10136b4:	200491ba 	slli	r2,r4,6
 10136b8:	10c5883a 	add	r2,r2,r3
 10136bc:	10800704 	addi	r2,r2,28
 10136c0:	11400015 	stw	r5,0(r2)
										next_cluster;
								active_files[file_handle].current_sector_in_cluster =
 10136c4:	e0bffe0f 	ldh	r2,-8(fp)
 10136c8:	00c040b4 	movhi	r3,258
 10136cc:	18f04904 	addi	r3,r3,-16092
 10136d0:	100491ba 	slli	r2,r2,6
 10136d4:	10c5883a 	add	r2,r2,r3
 10136d8:	10800804 	addi	r2,r2,32
 10136dc:	10000015 	stw	zero,0(r2)
										0;
								data_sector =
 10136e0:	008040b4 	movhi	r2,258
 10136e4:	10b03404 	addi	r2,r2,-16176
 10136e8:	11001417 	ldw	r4,80(r2)
 10136ec:	e0bffe0f 	ldh	r2,-8(fp)
 10136f0:	00c040b4 	movhi	r3,258
 10136f4:	18f04904 	addi	r3,r3,-16092
 10136f8:	100491ba 	slli	r2,r2,6
 10136fc:	10c5883a 	add	r2,r2,r3
 1013700:	10800704 	addi	r2,r2,28
 1013704:	10800017 	ldw	r2,0(r2)
 1013708:	10ffff84 	addi	r3,r2,-2
 101370c:	008040b4 	movhi	r2,258
 1013710:	10b03404 	addi	r2,r2,-16176
 1013714:	10800383 	ldbu	r2,14(r2)
 1013718:	10803fcc 	andi	r2,r2,255
 101371c:	1885383a 	mul	r2,r3,r2
 1013720:	2089883a 	add	r4,r4,r2
 1013724:	e0bffe0f 	ldh	r2,-8(fp)
 1013728:	00c040b4 	movhi	r3,258
 101372c:	18f04904 	addi	r3,r3,-16092
 1013730:	100491ba 	slli	r2,r2,6
 1013734:	10c5883a 	add	r2,r2,r3
 1013738:	10800804 	addi	r2,r2,32
 101373c:	10800017 	ldw	r2,0(r2)
 1013740:	2085883a 	add	r2,r4,r2
 1013744:	e0bffc15 	stw	r2,-16(fp)
 1013748:	00001506 	br	10137a0 <alt_up_sd_card_read+0x2c8>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return -2;
 101374c:	00bfff84 	movi	r2,-2
 1013750:	e0bfff15 	stw	r2,-4(fp)
 1013754:	00003f06 	br	1013854 <alt_up_sd_card_read+0x37c>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster =
 1013758:	e17ffe0f 	ldh	r5,-8(fp)
 101375c:	e0bffe0f 	ldh	r2,-8(fp)
 1013760:	00c040b4 	movhi	r3,258
 1013764:	18f04904 	addi	r3,r3,-16092
 1013768:	100491ba 	slli	r2,r2,6
 101376c:	10c5883a 	add	r2,r2,r3
 1013770:	10800804 	addi	r2,r2,32
 1013774:	10800017 	ldw	r2,0(r2)
 1013778:	11000044 	addi	r4,r2,1
 101377c:	00c040b4 	movhi	r3,258
 1013780:	18f04904 	addi	r3,r3,-16092
 1013784:	280491ba 	slli	r2,r5,6
 1013788:	10c5883a 	add	r2,r2,r3
 101378c:	10800804 	addi	r2,r2,32
 1013790:	11000015 	stw	r4,0(r2)
								active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
 1013794:	e0bffc17 	ldw	r2,-16(fp)
 1013798:	10800044 	addi	r2,r2,1
 101379c:	e0bffc15 	stw	r2,-16(fp)
					}
				}
				// Reading te first byte of the file.
				if (current_sector_index
 10137a0:	d0e6e617 	ldw	r3,-25704(gp)
 10137a4:	e0bffc17 	ldw	r2,-16(fp)
 10137a8:	1885883a 	add	r2,r3,r2
 10137ac:	1007883a 	mov	r3,r2
 10137b0:	d0a6ea17 	ldw	r2,-25688(gp)
 10137b4:	18800826 	beq	r3,r2,10137d8 <alt_up_sd_card_read+0x300>
						!= (data_sector
								+ fat_partition_offset_in_512_byte_sectors)) {
					if (!Read_Sector_Data(data_sector,
 10137b8:	d166e617 	ldw	r5,-25704(gp)
 10137bc:	e13ffc17 	ldw	r4,-16(fp)
 10137c0:	100fd480 	call	100fd48 <Read_Sector_Data>
 10137c4:	1004c03a 	cmpne	r2,r2,zero
 10137c8:	1000031e 	bne	r2,zero,10137d8 <alt_up_sd_card_read+0x300>
							fat_partition_offset_in_512_byte_sectors)) {
						return -2;
 10137cc:	00bfff84 	movi	r2,-2
 10137d0:	e0bfff15 	stw	r2,-4(fp)
 10137d4:	00001f06 	br	1013854 <alt_up_sd_card_read+0x37c>
					}
				}

				ch =
 10137d8:	e0bffe0f 	ldh	r2,-8(fp)
 10137dc:	00c040b4 	movhi	r3,258
 10137e0:	18f04904 	addi	r3,r3,-16092
 10137e4:	100491ba 	slli	r2,r2,6
 10137e8:	10c5883a 	add	r2,r2,r3
 10137ec:	10800904 	addi	r2,r2,36
 10137f0:	10800017 	ldw	r2,0(r2)
 10137f4:	10807fcc 	andi	r2,r2,511
 10137f8:	1007883a 	mov	r3,r2
 10137fc:	d0a6e517 	ldw	r2,-25708(gp)
 1013800:	1885883a 	add	r2,r3,r2
 1013804:	10800023 	ldbuio	r2,0(r2)
 1013808:	10803fcc 	andi	r2,r2,255
 101380c:	e0bffd0d 	sth	r2,-12(fp)
						(unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position =
 1013810:	e17ffe0f 	ldh	r5,-8(fp)
 1013814:	e0bffe0f 	ldh	r2,-8(fp)
 1013818:	00c040b4 	movhi	r3,258
 101381c:	18f04904 	addi	r3,r3,-16092
 1013820:	100491ba 	slli	r2,r2,6
 1013824:	10c5883a 	add	r2,r2,r3
 1013828:	10800904 	addi	r2,r2,36
 101382c:	10800017 	ldw	r2,0(r2)
 1013830:	11000044 	addi	r4,r2,1
 1013834:	00c040b4 	movhi	r3,258
 1013838:	18f04904 	addi	r3,r3,-16092
 101383c:	280491ba 	slli	r2,r5,6
 1013840:	10c5883a 	add	r2,r2,r3
 1013844:	10800904 	addi	r2,r2,36
 1013848:	11000015 	stw	r4,0(r2)
						active_files[file_handle].current_byte_position + 1;
			}
		}
	}

	return ch;
 101384c:	e0bffd0f 	ldh	r2,-12(fp)
 1013850:	e0bfff15 	stw	r2,-4(fp)
 1013854:	e0bfff17 	ldw	r2,-4(fp)
}
 1013858:	e037883a 	mov	sp,fp
 101385c:	dfc00117 	ldw	ra,4(sp)
 1013860:	df000017 	ldw	fp,0(sp)
 1013864:	dec00204 	addi	sp,sp,8
 1013868:	f800283a 	ret

0101386c <alt_up_sd_card_write>:

bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
 101386c:	defff604 	addi	sp,sp,-40
 1013870:	dfc00915 	stw	ra,36(sp)
 1013874:	df000815 	stw	fp,32(sp)
 1013878:	df000804 	addi	fp,sp,32
 101387c:	e13ffd0d 	sth	r4,-12(fp)
 1013880:	e17ffe05 	stb	r5,-8(fp)
	bool result = false;
 1013884:	e03ffa15 	stw	zero,-24(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 1013888:	e0bffd0f 	ldh	r2,-12(fp)
 101388c:	1004803a 	cmplt	r2,r2,zero
 1013890:	10017d1e 	bne	r2,zero,1013e88 <alt_up_sd_card_write+0x61c>
 1013894:	e0bffd0f 	ldh	r2,-12(fp)
 1013898:	10800508 	cmpgei	r2,r2,20
 101389c:	10017a1e 	bne	r2,zero,1013e88 <alt_up_sd_card_write+0x61c>
		if (active_files[file_handle].in_use) {
 10138a0:	e0bffd0f 	ldh	r2,-12(fp)
 10138a4:	00c040b4 	movhi	r3,258
 10138a8:	18f04904 	addi	r3,r3,-16092
 10138ac:	100491ba 	slli	r2,r2,6
 10138b0:	10c5883a 	add	r2,r2,r3
 10138b4:	10800f04 	addi	r2,r2,60
 10138b8:	10800017 	ldw	r2,0(r2)
 10138bc:	1005003a 	cmpeq	r2,r2,zero
 10138c0:	1001711e 	bne	r2,zero,1013e88 <alt_up_sd_card_write+0x61c>
			int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
							* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
 10138c4:	008040b4 	movhi	r2,258
 10138c8:	10b03404 	addi	r2,r2,-16176
 10138cc:	11001417 	ldw	r4,80(r2)
 10138d0:	e0bffd0f 	ldh	r2,-12(fp)
 10138d4:	00c040b4 	movhi	r3,258
 10138d8:	18f04904 	addi	r3,r3,-16092
 10138dc:	100491ba 	slli	r2,r2,6
 10138e0:	10c5883a 	add	r2,r2,r3
 10138e4:	10800704 	addi	r2,r2,28
 10138e8:	10800017 	ldw	r2,0(r2)
 10138ec:	10ffff84 	addi	r3,r2,-2
 10138f0:	008040b4 	movhi	r2,258
 10138f4:	10b03404 	addi	r2,r2,-16176
 10138f8:	10800383 	ldbu	r2,14(r2)
 10138fc:	10803fcc 	andi	r2,r2,255
 1013900:	1885383a 	mul	r2,r3,r2
 1013904:	2089883a 	add	r4,r4,r2
 1013908:	e0bffd0f 	ldh	r2,-12(fp)
 101390c:	00c040b4 	movhi	r3,258
 1013910:	18f04904 	addi	r3,r3,-16092
 1013914:	100491ba 	slli	r2,r2,6
 1013918:	10c5883a 	add	r2,r2,r3
 101391c:	10800804 	addi	r2,r2,32
 1013920:	10800017 	ldw	r2,0(r2)
 1013924:	2085883a 	add	r2,r4,r2
 1013928:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset =
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;
 101392c:	e0bffd0f 	ldh	r2,-12(fp)
 1013930:	00c040b4 	movhi	r3,258
 1013934:	18f04904 	addi	r3,r3,-16092
 1013938:	100491ba 	slli	r2,r2,6
 101393c:	10c5883a 	add	r2,r2,r3
 1013940:	10800904 	addi	r2,r2,36
 1013944:	11000017 	ldw	r4,0(r2)
 1013948:	008040b4 	movhi	r2,258
 101394c:	10b03404 	addi	r2,r2,-16176
 1013950:	1080030b 	ldhu	r2,12(r2)
 1013954:	10ffffcc 	andi	r3,r2,65535
 1013958:	20c5203a 	divu	r2,r4,r3
 101395c:	10c5383a 	mul	r2,r2,r3
 1013960:	2085c83a 	sub	r2,r4,r2
 1013964:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position
 1013968:	e0bffd0f 	ldh	r2,-12(fp)
 101396c:	00c040b4 	movhi	r3,258
 1013970:	18f04904 	addi	r3,r3,-16092
 1013974:	100491ba 	slli	r2,r2,6
 1013978:	10c5883a 	add	r2,r2,r3
 101397c:	10800904 	addi	r2,r2,36
 1013980:	11000017 	ldw	r4,0(r2)
 1013984:	e0bffd0f 	ldh	r2,-12(fp)
 1013988:	00c040b4 	movhi	r3,258
 101398c:	18f04904 	addi	r3,r3,-16092
 1013990:	100491ba 	slli	r2,r2,6
 1013994:	10c5883a 	add	r2,r2,r3
 1013998:	10800604 	addi	r2,r2,24
 101399c:	10800017 	ldw	r2,0(r2)
 10139a0:	2080682e 	bgeu	r4,r2,1013b44 <alt_up_sd_card_write+0x2d8>
					< active_files[file_handle].file_size_in_bytes) {
				if ((active_files[file_handle].current_byte_position > 0)
 10139a4:	e0bffd0f 	ldh	r2,-12(fp)
 10139a8:	00c040b4 	movhi	r3,258
 10139ac:	18f04904 	addi	r3,r3,-16092
 10139b0:	100491ba 	slli	r2,r2,6
 10139b4:	10c5883a 	add	r2,r2,r3
 10139b8:	10800904 	addi	r2,r2,36
 10139bc:	10800017 	ldw	r2,0(r2)
 10139c0:	1005003a 	cmpeq	r2,r2,zero
 10139c4:	1000e41e 	bne	r2,zero,1013d58 <alt_up_sd_card_write+0x4ec>
 10139c8:	e0bff80f 	ldh	r2,-32(fp)
 10139cc:	1004c03a 	cmpne	r2,r2,zero
 10139d0:	1000e11e 	bne	r2,zero,1013d58 <alt_up_sd_card_write+0x4ec>
						&& (buffer_offset == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
 10139d4:	e0bffd0f 	ldh	r2,-12(fp)
 10139d8:	00c040b4 	movhi	r3,258
 10139dc:	18f04904 	addi	r3,r3,-16092
 10139e0:	100491ba 	slli	r2,r2,6
 10139e4:	10c5883a 	add	r2,r2,r3
 10139e8:	10800804 	addi	r2,r2,32
 10139ec:	10c00017 	ldw	r3,0(r2)
 10139f0:	008040b4 	movhi	r2,258
 10139f4:	10b03404 	addi	r2,r2,-16176
 10139f8:	10800383 	ldbu	r2,14(r2)
 10139fc:	10803fcc 	andi	r2,r2,255
 1013a00:	10bfffc4 	addi	r2,r2,-1
 1013a04:	18803c1e 	bne	r3,r2,1013af8 <alt_up_sd_card_write+0x28c>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
 1013a08:	e0bffd0f 	ldh	r2,-12(fp)
 1013a0c:	00c040b4 	movhi	r3,258
 1013a10:	18f04904 	addi	r3,r3,-16092
 1013a14:	100491ba 	slli	r2,r2,6
 1013a18:	10c5883a 	add	r2,r2,r3
 1013a1c:	10800704 	addi	r2,r2,28
 1013a20:	11000017 	ldw	r4,0(r2)
 1013a24:	e17ffb04 	addi	r5,fp,-20
 1013a28:	100fe440 	call	100fe44 <get_cluster_flag>
 1013a2c:	1005003a 	cmpeq	r2,r2,zero
 1013a30:	10002f1e 	bne	r2,zero,1013af0 <alt_up_sd_card_write+0x284>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
 1013a34:	e0bffb0b 	ldhu	r2,-20(fp)
 1013a38:	10ffffcc 	andi	r3,r2,65535
 1013a3c:	00bffdd4 	movui	r2,65527
 1013a40:	10c0c536 	bltu	r2,r3,1013d58 <alt_up_sd_card_write+0x4ec>
								active_files[file_handle].current_cluster_index =
 1013a44:	e13ffd0f 	ldh	r4,-12(fp)
 1013a48:	e0bffb0b 	ldhu	r2,-20(fp)
 1013a4c:	117fffcc 	andi	r5,r2,65535
 1013a50:	00c040b4 	movhi	r3,258
 1013a54:	18f04904 	addi	r3,r3,-16092
 1013a58:	200491ba 	slli	r2,r4,6
 1013a5c:	10c5883a 	add	r2,r2,r3
 1013a60:	10800704 	addi	r2,r2,28
 1013a64:	11400015 	stw	r5,0(r2)
										next_cluster;
								active_files[file_handle].current_sector_in_cluster =
 1013a68:	e0bffd0f 	ldh	r2,-12(fp)
 1013a6c:	00c040b4 	movhi	r3,258
 1013a70:	18f04904 	addi	r3,r3,-16092
 1013a74:	100491ba 	slli	r2,r2,6
 1013a78:	10c5883a 	add	r2,r2,r3
 1013a7c:	10800804 	addi	r2,r2,32
 1013a80:	10000015 	stw	zero,0(r2)
										0;
								data_sector =
 1013a84:	008040b4 	movhi	r2,258
 1013a88:	10b03404 	addi	r2,r2,-16176
 1013a8c:	11001417 	ldw	r4,80(r2)
 1013a90:	e0bffd0f 	ldh	r2,-12(fp)
 1013a94:	00c040b4 	movhi	r3,258
 1013a98:	18f04904 	addi	r3,r3,-16092
 1013a9c:	100491ba 	slli	r2,r2,6
 1013aa0:	10c5883a 	add	r2,r2,r3
 1013aa4:	10800704 	addi	r2,r2,28
 1013aa8:	10800017 	ldw	r2,0(r2)
 1013aac:	10ffff84 	addi	r3,r2,-2
 1013ab0:	008040b4 	movhi	r2,258
 1013ab4:	10b03404 	addi	r2,r2,-16176
 1013ab8:	10800383 	ldbu	r2,14(r2)
 1013abc:	10803fcc 	andi	r2,r2,255
 1013ac0:	1885383a 	mul	r2,r3,r2
 1013ac4:	2089883a 	add	r4,r4,r2
 1013ac8:	e0bffd0f 	ldh	r2,-12(fp)
 1013acc:	00c040b4 	movhi	r3,258
 1013ad0:	18f04904 	addi	r3,r3,-16092
 1013ad4:	100491ba 	slli	r2,r2,6
 1013ad8:	10c5883a 	add	r2,r2,r3
 1013adc:	10800804 	addi	r2,r2,32
 1013ae0:	10800017 	ldw	r2,0(r2)
 1013ae4:	2085883a 	add	r2,r4,r2
 1013ae8:	e0bff915 	stw	r2,-28(fp)
 1013aec:	00009a06 	br	1013d58 <alt_up_sd_card_write+0x4ec>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return false;
 1013af0:	e03fff15 	stw	zero,-4(fp)
 1013af4:	0000e606 	br	1013e90 <alt_up_sd_card_write+0x624>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
 1013af8:	e17ffd0f 	ldh	r5,-12(fp)
 1013afc:	e0bffd0f 	ldh	r2,-12(fp)
 1013b00:	00c040b4 	movhi	r3,258
 1013b04:	18f04904 	addi	r3,r3,-16092
 1013b08:	100491ba 	slli	r2,r2,6
 1013b0c:	10c5883a 	add	r2,r2,r3
 1013b10:	10800804 	addi	r2,r2,32
 1013b14:	10800017 	ldw	r2,0(r2)
 1013b18:	11000044 	addi	r4,r2,1
 1013b1c:	00c040b4 	movhi	r3,258
 1013b20:	18f04904 	addi	r3,r3,-16092
 1013b24:	280491ba 	slli	r2,r5,6
 1013b28:	10c5883a 	add	r2,r2,r3
 1013b2c:	10800804 	addi	r2,r2,32
 1013b30:	11000015 	stw	r4,0(r2)
										+ 1;
//						active_files[file_handle].current_sector_in_cluster =
//								(active_files[file_handle].current_byte_position
//										/ boot_sector_data.sector_size_in_bytes)
//										% boot_sector_data.sectors_per_cluster;
						data_sector = data_sector + 1;
 1013b34:	e0bff917 	ldw	r2,-28(fp)
 1013b38:	10800044 	addi	r2,r2,1
 1013b3c:	e0bff915 	stw	r2,-28(fp)
 1013b40:	00008506 	br	1013d58 <alt_up_sd_card_write+0x4ec>
					}
				}
			} else {
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0)
 1013b44:	e0bffd0f 	ldh	r2,-12(fp)
 1013b48:	00c040b4 	movhi	r3,258
 1013b4c:	18f04904 	addi	r3,r3,-16092
 1013b50:	100491ba 	slli	r2,r2,6
 1013b54:	10c5883a 	add	r2,r2,r3
 1013b58:	10800904 	addi	r2,r2,36
 1013b5c:	10800017 	ldw	r2,0(r2)
 1013b60:	1005003a 	cmpeq	r2,r2,zero
 1013b64:	10007c1e 	bne	r2,zero,1013d58 <alt_up_sd_card_write+0x4ec>
 1013b68:	e0bff80f 	ldh	r2,-32(fp)
 1013b6c:	1004c03a 	cmpne	r2,r2,zero
 1013b70:	1000791e 	bne	r2,zero,1013d58 <alt_up_sd_card_write+0x4ec>
						&& (buffer_offset == 0)) {
					if (active_files[file_handle].current_sector_in_cluster
 1013b74:	e0bffd0f 	ldh	r2,-12(fp)
 1013b78:	00c040b4 	movhi	r3,258
 1013b7c:	18f04904 	addi	r3,r3,-16092
 1013b80:	100491ba 	slli	r2,r2,6
 1013b84:	10c5883a 	add	r2,r2,r3
 1013b88:	10800804 	addi	r2,r2,32
 1013b8c:	10c00017 	ldw	r3,0(r2)
 1013b90:	008040b4 	movhi	r2,258
 1013b94:	10b03404 	addi	r2,r2,-16176
 1013b98:	10800383 	ldbu	r2,14(r2)
 1013b9c:	10803fcc 	andi	r2,r2,255
 1013ba0:	10bfffc4 	addi	r2,r2,-1
 1013ba4:	1880381e 	bne	r3,r2,1013c88 <alt_up_sd_card_write+0x41c>
							== boot_sector_data.sectors_per_cluster - 1) {
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number)) {
 1013ba8:	e13ffc04 	addi	r4,fp,-16
 1013bac:	1011e940 	call	1011e94 <find_first_empty_cluster>
 1013bb0:	1005003a 	cmpeq	r2,r2,zero
 1013bb4:	1000321e 	bne	r2,zero,1013c80 <alt_up_sd_card_write+0x414>
							// mark clusters in both File Allocation Tables.
							mark_cluster(
 1013bb8:	e0bffd0f 	ldh	r2,-12(fp)
 1013bbc:	00c040b4 	movhi	r3,258
 1013bc0:	18f04904 	addi	r3,r3,-16092
 1013bc4:	100491ba 	slli	r2,r2,6
 1013bc8:	10c5883a 	add	r2,r2,r3
 1013bcc:	10800704 	addi	r2,r2,28
 1013bd0:	11000017 	ldw	r4,0(r2)
 1013bd4:	e0bffc17 	ldw	r2,-16(fp)
 1013bd8:	117fffcc 	andi	r5,r2,65535
 1013bdc:	2960001c 	xori	r5,r5,32768
 1013be0:	29600004 	addi	r5,r5,-32768
 1013be4:	01800044 	movi	r6,1
 1013be8:	100fefc0 	call	100fefc <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
 1013bec:	e13ffc17 	ldw	r4,-16(fp)
 1013bf0:	017fffc4 	movi	r5,-1
 1013bf4:	01800044 	movi	r6,1
 1013bf8:	100fefc0 	call	100fefc <mark_cluster>
							mark_cluster(
 1013bfc:	e0bffd0f 	ldh	r2,-12(fp)
 1013c00:	00c040b4 	movhi	r3,258
 1013c04:	18f04904 	addi	r3,r3,-16092
 1013c08:	100491ba 	slli	r2,r2,6
 1013c0c:	10c5883a 	add	r2,r2,r3
 1013c10:	10800704 	addi	r2,r2,28
 1013c14:	11000017 	ldw	r4,0(r2)
 1013c18:	e0bffc17 	ldw	r2,-16(fp)
 1013c1c:	117fffcc 	andi	r5,r2,65535
 1013c20:	2960001c 	xori	r5,r5,32768
 1013c24:	29600004 	addi	r5,r5,-32768
 1013c28:	000d883a 	mov	r6,zero
 1013c2c:	100fefc0 	call	100fefc <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
 1013c30:	e13ffc17 	ldw	r4,-16(fp)
 1013c34:	017fffc4 	movi	r5,-1
 1013c38:	000d883a 	mov	r6,zero
 1013c3c:	100fefc0 	call	100fefc <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index =
 1013c40:	e0bffd0f 	ldh	r2,-12(fp)
 1013c44:	e13ffc17 	ldw	r4,-16(fp)
 1013c48:	00c040b4 	movhi	r3,258
 1013c4c:	18f04904 	addi	r3,r3,-16092
 1013c50:	100491ba 	slli	r2,r2,6
 1013c54:	10c5883a 	add	r2,r2,r3
 1013c58:	10800704 	addi	r2,r2,28
 1013c5c:	11000015 	stw	r4,0(r2)
									cluster_number;
							active_files[file_handle].current_sector_in_cluster =
 1013c60:	e0bffd0f 	ldh	r2,-12(fp)
 1013c64:	00c040b4 	movhi	r3,258
 1013c68:	18f04904 	addi	r3,r3,-16092
 1013c6c:	100491ba 	slli	r2,r2,6
 1013c70:	10c5883a 	add	r2,r2,r3
 1013c74:	10800804 	addi	r2,r2,32
 1013c78:	10000015 	stw	zero,0(r2)
 1013c7c:	00001c06 	br	1013cf0 <alt_up_sd_card_write+0x484>
									0;
						} else {
							return false;
 1013c80:	e03fff15 	stw	zero,-4(fp)
 1013c84:	00008206 	br	1013e90 <alt_up_sd_card_write+0x624>
						}
					} else {
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster =
 1013c88:	e17ffd0f 	ldh	r5,-12(fp)
 1013c8c:	e0bffd0f 	ldh	r2,-12(fp)
 1013c90:	00c040b4 	movhi	r3,258
 1013c94:	18f04904 	addi	r3,r3,-16092
 1013c98:	100491ba 	slli	r2,r2,6
 1013c9c:	10c5883a 	add	r2,r2,r3
 1013ca0:	10800904 	addi	r2,r2,36
 1013ca4:	10c00017 	ldw	r3,0(r2)
 1013ca8:	008040b4 	movhi	r2,258
 1013cac:	10b03404 	addi	r2,r2,-16176
 1013cb0:	1080030b 	ldhu	r2,12(r2)
 1013cb4:	10bfffcc 	andi	r2,r2,65535
 1013cb8:	1889203a 	divu	r4,r3,r2
 1013cbc:	008040b4 	movhi	r2,258
 1013cc0:	10b03404 	addi	r2,r2,-16176
 1013cc4:	10800383 	ldbu	r2,14(r2)
 1013cc8:	10c03fcc 	andi	r3,r2,255
 1013ccc:	20c5203a 	divu	r2,r4,r3
 1013cd0:	10c5383a 	mul	r2,r2,r3
 1013cd4:	2089c83a 	sub	r4,r4,r2
 1013cd8:	00c040b4 	movhi	r3,258
 1013cdc:	18f04904 	addi	r3,r3,-16092
 1013ce0:	280491ba 	slli	r2,r5,6
 1013ce4:	10c5883a 	add	r2,r2,r3
 1013ce8:	10800804 	addi	r2,r2,32
 1013cec:	11000015 	stw	r4,0(r2)
								(active_files[file_handle].current_byte_position
										/ boot_sector_data.sector_size_in_bytes) % boot_sector_data.sectors_per_cluster;
					}
					data_sector =
 1013cf0:	008040b4 	movhi	r2,258
 1013cf4:	10b03404 	addi	r2,r2,-16176
 1013cf8:	11001417 	ldw	r4,80(r2)
 1013cfc:	e0bffd0f 	ldh	r2,-12(fp)
 1013d00:	00c040b4 	movhi	r3,258
 1013d04:	18f04904 	addi	r3,r3,-16092
 1013d08:	100491ba 	slli	r2,r2,6
 1013d0c:	10c5883a 	add	r2,r2,r3
 1013d10:	10800704 	addi	r2,r2,28
 1013d14:	10800017 	ldw	r2,0(r2)
 1013d18:	10ffff84 	addi	r3,r2,-2
 1013d1c:	008040b4 	movhi	r2,258
 1013d20:	10b03404 	addi	r2,r2,-16176
 1013d24:	10800383 	ldbu	r2,14(r2)
 1013d28:	10803fcc 	andi	r2,r2,255
 1013d2c:	1885383a 	mul	r2,r3,r2
 1013d30:	2089883a 	add	r4,r4,r2
 1013d34:	e0bffd0f 	ldh	r2,-12(fp)
 1013d38:	00c040b4 	movhi	r3,258
 1013d3c:	18f04904 	addi	r3,r3,-16092
 1013d40:	100491ba 	slli	r2,r2,6
 1013d44:	10c5883a 	add	r2,r2,r3
 1013d48:	10800804 	addi	r2,r2,32
 1013d4c:	10800017 	ldw	r2,0(r2)
 1013d50:	2085883a 	add	r2,r4,r2
 1013d54:	e0bff915 	stw	r2,-28(fp)
									+ active_files[file_handle].current_sector_in_cluster;
				}
			}
			// Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
			if (current_sector_index
 1013d58:	d0e6e617 	ldw	r3,-25704(gp)
 1013d5c:	e0bff917 	ldw	r2,-28(fp)
 1013d60:	1885883a 	add	r2,r3,r2
 1013d64:	1007883a 	mov	r3,r2
 1013d68:	d0a6ea17 	ldw	r2,-25688(gp)
 1013d6c:	18800726 	beq	r3,r2,1013d8c <alt_up_sd_card_write+0x520>
					!= data_sector + fat_partition_offset_in_512_byte_sectors) {
				if (!Read_Sector_Data_Attempt_CRC(data_sector,
 1013d70:	d166e617 	ldw	r5,-25704(gp)
 1013d74:	e13ff917 	ldw	r4,-28(fp)
 1013d78:	101419c0 	call	101419c <Read_Sector_Data_Attempt_CRC>
 1013d7c:	1004c03a 	cmpne	r2,r2,zero
 1013d80:	1000021e 	bne	r2,zero,1013d8c <alt_up_sd_card_write+0x520>
						fat_partition_offset_in_512_byte_sectors)) {
					return false;
 1013d84:	e03fff15 	stw	zero,-4(fp)
 1013d88:	00004106 	br	1013e90 <alt_up_sd_card_write+0x624>
				}
			}
			// Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
 1013d8c:	e0bff80f 	ldh	r2,-32(fp)
 1013d90:	1007883a 	mov	r3,r2
 1013d94:	d0a6e517 	ldw	r2,-25708(gp)
 1013d98:	1885883a 	add	r2,r3,r2
 1013d9c:	e0fffe07 	ldb	r3,-8(fp)
 1013da0:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position =
 1013da4:	e17ffd0f 	ldh	r5,-12(fp)
 1013da8:	e0bffd0f 	ldh	r2,-12(fp)
 1013dac:	00c040b4 	movhi	r3,258
 1013db0:	18f04904 	addi	r3,r3,-16092
 1013db4:	100491ba 	slli	r2,r2,6
 1013db8:	10c5883a 	add	r2,r2,r3
 1013dbc:	10800904 	addi	r2,r2,36
 1013dc0:	10800017 	ldw	r2,0(r2)
 1013dc4:	11000044 	addi	r4,r2,1
 1013dc8:	00c040b4 	movhi	r3,258
 1013dcc:	18f04904 	addi	r3,r3,-16092
 1013dd0:	280491ba 	slli	r2,r5,6
 1013dd4:	10c5883a 	add	r2,r2,r3
 1013dd8:	10800904 	addi	r2,r2,36
 1013ddc:	11000015 	stw	r4,0(r2)
					active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
 1013de0:	e0bffd0f 	ldh	r2,-12(fp)
 1013de4:	00c040b4 	movhi	r3,258
 1013de8:	18f04904 	addi	r3,r3,-16092
 1013dec:	100491ba 	slli	r2,r2,6
 1013df0:	10c5883a 	add	r2,r2,r3
 1013df4:	10800904 	addi	r2,r2,36
 1013df8:	11000017 	ldw	r4,0(r2)
 1013dfc:	e0bffd0f 	ldh	r2,-12(fp)
 1013e00:	00c040b4 	movhi	r3,258
 1013e04:	18f04904 	addi	r3,r3,-16092
 1013e08:	100491ba 	slli	r2,r2,6
 1013e0c:	10c5883a 	add	r2,r2,r3
 1013e10:	10800604 	addi	r2,r2,24
 1013e14:	10800017 	ldw	r2,0(r2)
 1013e18:	1100172e 	bgeu	r2,r4,1013e78 <alt_up_sd_card_write+0x60c>
					> active_files[file_handle].file_size_in_bytes) {
				active_files[file_handle].file_size_in_bytes =
 1013e1c:	e17ffd0f 	ldh	r5,-12(fp)
 1013e20:	e0bffd0f 	ldh	r2,-12(fp)
 1013e24:	00c040b4 	movhi	r3,258
 1013e28:	18f04904 	addi	r3,r3,-16092
 1013e2c:	100491ba 	slli	r2,r2,6
 1013e30:	10c5883a 	add	r2,r2,r3
 1013e34:	10800604 	addi	r2,r2,24
 1013e38:	10800017 	ldw	r2,0(r2)
 1013e3c:	11000044 	addi	r4,r2,1
 1013e40:	00c040b4 	movhi	r3,258
 1013e44:	18f04904 	addi	r3,r3,-16092
 1013e48:	280491ba 	slli	r2,r5,6
 1013e4c:	10c5883a 	add	r2,r2,r3
 1013e50:	10800604 	addi	r2,r2,24
 1013e54:	11000015 	stw	r4,0(r2)
						active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
 1013e58:	e0bffd0f 	ldh	r2,-12(fp)
 1013e5c:	00c040b4 	movhi	r3,258
 1013e60:	18f04904 	addi	r3,r3,-16092
 1013e64:	100491ba 	slli	r2,r2,6
 1013e68:	10c5883a 	add	r2,r2,r3
 1013e6c:	10c00e04 	addi	r3,r2,56
 1013e70:	00800044 	movi	r2,1
 1013e74:	18800015 	stw	r2,0(r3)
			}
			// Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
			current_sector_modified = true;
 1013e78:	00800044 	movi	r2,1
 1013e7c:	d0a6e915 	stw	r2,-25692(gp)
			result = true;
 1013e80:	00800044 	movi	r2,1
 1013e84:	e0bffa15 	stw	r2,-24(fp)
		}
	}

	return result;
 1013e88:	e0bffa17 	ldw	r2,-24(fp)
 1013e8c:	e0bfff15 	stw	r2,-4(fp)
 1013e90:	e0bfff17 	ldw	r2,-4(fp)
}
 1013e94:	e037883a 	mov	sp,fp
 1013e98:	dfc00117 	ldw	ra,4(sp)
 1013e9c:	df000017 	ldw	fp,0(sp)
 1013ea0:	dec00204 	addi	sp,sp,8
 1013ea4:	f800283a 	ret

01013ea8 <alt_up_sd_card_fclose>:

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
 1013ea8:	defffb04 	addi	sp,sp,-20
 1013eac:	dfc00415 	stw	ra,16(sp)
 1013eb0:	df000315 	stw	fp,12(sp)
 1013eb4:	df000304 	addi	fp,sp,12
 1013eb8:	e13fff0d 	sth	r4,-4(fp)
	assert(file_handle >= 0);
 1013ebc:	e0bfff0f 	ldh	r2,-4(fp)
 1013ec0:	1004403a 	cmpge	r2,r2,zero
 1013ec4:	1000081e 	bne	r2,zero,1013ee8 <alt_up_sd_card_fclose+0x40>
 1013ec8:	010040b4 	movhi	r4,258
 1013ecc:	21221b04 	addi	r4,r4,-30612
 1013ed0:	0141bf04 	movi	r5,1788
 1013ed4:	018040b4 	movhi	r6,258
 1013ed8:	31a21504 	addi	r6,r6,-30636
 1013edc:	01c040b4 	movhi	r7,258
 1013ee0:	39e22804 	addi	r7,r7,-30560
 1013ee4:	10164bc0 	call	10164bc <__assert_func>

	bool result = false;
 1013ee8:	e03ffe15 	stw	zero,-8(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 1013eec:	1012a540 	call	1012a54 <alt_up_sd_card_is_Present>
 1013ef0:	1005003a 	cmpeq	r2,r2,zero
 1013ef4:	1000641e 	bne	r2,zero,1014088 <alt_up_sd_card_fclose+0x1e0>
 1013ef8:	d0a6df17 	ldw	r2,-25732(gp)
 1013efc:	1005003a 	cmpeq	r2,r2,zero
 1013f00:	1000611e 	bne	r2,zero,1014088 <alt_up_sd_card_fclose+0x1e0>
		if (active_files[file_handle].in_use) {
 1013f04:	e0bfff0f 	ldh	r2,-4(fp)
 1013f08:	00c040b4 	movhi	r3,258
 1013f0c:	18f04904 	addi	r3,r3,-16092
 1013f10:	100491ba 	slli	r2,r2,6
 1013f14:	10c5883a 	add	r2,r2,r3
 1013f18:	10800f04 	addi	r2,r2,60
 1013f1c:	10800017 	ldw	r2,0(r2)
 1013f20:	1005003a 	cmpeq	r2,r2,zero
 1013f24:	1000581e 	bne	r2,zero,1014088 <alt_up_sd_card_fclose+0x1e0>
			if (active_files[file_handle].modified) {
 1013f28:	e0bfff0f 	ldh	r2,-4(fp)
 1013f2c:	00c040b4 	movhi	r3,258
 1013f30:	18f04904 	addi	r3,r3,-16092
 1013f34:	100491ba 	slli	r2,r2,6
 1013f38:	10c5883a 	add	r2,r2,r3
 1013f3c:	10800e04 	addi	r2,r2,56
 1013f40:	10800017 	ldw	r2,0(r2)
 1013f44:	1005003a 	cmpeq	r2,r2,zero
 1013f48:	1000461e 	bne	r2,zero,1014064 <alt_up_sd_card_fclose+0x1bc>
				unsigned int record_sector =
						active_files[file_handle].file_record_sector_in_cluster;
 1013f4c:	e0bfff0f 	ldh	r2,-4(fp)
 1013f50:	00c040b4 	movhi	r3,258
 1013f54:	18f04904 	addi	r3,r3,-16092
 1013f58:	100491ba 	slli	r2,r2,6
 1013f5c:	10c5883a 	add	r2,r2,r3
 1013f60:	10800b04 	addi	r2,r2,44
 1013f64:	10800017 	ldw	r2,0(r2)
 1013f68:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0) {
 1013f6c:	e0bfff0f 	ldh	r2,-4(fp)
 1013f70:	00c040b4 	movhi	r3,258
 1013f74:	18f04904 	addi	r3,r3,-16092
 1013f78:	100491ba 	slli	r2,r2,6
 1013f7c:	10c5883a 	add	r2,r2,r3
 1013f80:	10800a04 	addi	r2,r2,40
 1013f84:	10800017 	ldw	r2,0(r2)
 1013f88:	1004c03a 	cmpne	r2,r2,zero
 1013f8c:	1000071e 	bne	r2,zero,1013fac <alt_up_sd_card_fclose+0x104>
					record_sector = record_sector
 1013f90:	008040b4 	movhi	r2,258
 1013f94:	10b03404 	addi	r2,r2,-16176
 1013f98:	10c01317 	ldw	r3,76(r2)
 1013f9c:	e0bffd17 	ldw	r2,-12(fp)
 1013fa0:	10c5883a 	add	r2,r2,r3
 1013fa4:	e0bffd15 	stw	r2,-12(fp)
 1013fa8:	00001406 	br	1013ffc <alt_up_sd_card_fclose+0x154>
							+ boot_sector_data.root_directory_sector_offset;
				} else {
					record_sector =
 1013fac:	008040b4 	movhi	r2,258
 1013fb0:	10b03404 	addi	r2,r2,-16176
 1013fb4:	10c01417 	ldw	r3,80(r2)
 1013fb8:	e0bffd17 	ldw	r2,-12(fp)
 1013fbc:	1889883a 	add	r4,r3,r2
 1013fc0:	e0bfff0f 	ldh	r2,-4(fp)
 1013fc4:	00c040b4 	movhi	r3,258
 1013fc8:	18f04904 	addi	r3,r3,-16092
 1013fcc:	100491ba 	slli	r2,r2,6
 1013fd0:	10c5883a 	add	r2,r2,r3
 1013fd4:	10800a04 	addi	r2,r2,40
 1013fd8:	10800017 	ldw	r2,0(r2)
 1013fdc:	10ffff84 	addi	r3,r2,-2
 1013fe0:	008040b4 	movhi	r2,258
 1013fe4:	10b03404 	addi	r2,r2,-16176
 1013fe8:	10800383 	ldbu	r2,14(r2)
 1013fec:	10803fcc 	andi	r2,r2,255
 1013ff0:	1885383a 	mul	r2,r3,r2
 1013ff4:	2085883a 	add	r2,r4,r2
 1013ff8:	e0bffd15 	stw	r2,-12(fp)
							record_sector + boot_sector_data.data_sector_offset
									+ (active_files[file_handle].file_record_cluster
											- 2)
											* boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector,
 1013ffc:	e13ffd17 	ldw	r4,-12(fp)
 1014000:	d166e617 	ldw	r5,-25704(gp)
 1014004:	100fd480 	call	100fd48 <Read_Sector_Data>
 1014008:	1005003a 	cmpeq	r2,r2,zero
 101400c:	1000151e 	bne	r2,zero,1014064 <alt_up_sd_card_fclose+0x1bc>
						fat_partition_offset_in_512_byte_sectors)) {
					if (Write_File_Record_At_Offset(
 1014010:	e0bfff0f 	ldh	r2,-4(fp)
 1014014:	00c040b4 	movhi	r3,258
 1014018:	18f04904 	addi	r3,r3,-16092
 101401c:	100491ba 	slli	r2,r2,6
 1014020:	10c5883a 	add	r2,r2,r3
 1014024:	10800c04 	addi	r2,r2,48
 1014028:	1080000b 	ldhu	r2,0(r2)
 101402c:	113fffcc 	andi	r4,r2,65535
 1014030:	2120001c 	xori	r4,r4,32768
 1014034:	21200004 	addi	r4,r4,-32768
 1014038:	e0bfff0f 	ldh	r2,-4(fp)
 101403c:	100491ba 	slli	r2,r2,6
 1014040:	1007883a 	mov	r3,r2
 1014044:	008040b4 	movhi	r2,258
 1014048:	10b04904 	addi	r2,r2,-16092
 101404c:	188b883a 	add	r5,r3,r2
 1014050:	10104140 	call	1010414 <Write_File_Record_At_Offset>
 1014054:	1005003a 	cmpeq	r2,r2,zero
 1014058:	1000021e 	bne	r2,zero,1014064 <alt_up_sd_card_fclose+0x1bc>
							active_files[file_handle].file_record_offset,
							&(active_files[file_handle]))) {
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
 101405c:	100fcf80 	call	100fcf8 <Save_Modified_Sector>
 1014060:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
 1014064:	e0bfff0f 	ldh	r2,-4(fp)
 1014068:	00c040b4 	movhi	r3,258
 101406c:	18f04904 	addi	r3,r3,-16092
 1014070:	100491ba 	slli	r2,r2,6
 1014074:	10c5883a 	add	r2,r2,r3
 1014078:	10800f04 	addi	r2,r2,60
 101407c:	10000015 	stw	zero,0(r2)
			result = true;
 1014080:	00800044 	movi	r2,1
 1014084:	e0bffe15 	stw	r2,-8(fp)
		}
	}

	return result;
 1014088:	e0bffe17 	ldw	r2,-8(fp)
}
 101408c:	e037883a 	mov	sp,fp
 1014090:	dfc00117 	ldw	ra,4(sp)
 1014094:	df000017 	ldw	fp,0(sp)
 1014098:	dec00204 	addi	sp,sp,8
 101409c:	f800283a 	ret

010140a0 <Read_Sector_Data_CRC>:

bool Read_Sector_Data_CRC(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 10140a0:	defff904 	addi	sp,sp,-28
 10140a4:	dfc00615 	stw	ra,24(sp)
 10140a8:	df000515 	stw	fp,20(sp)
 10140ac:	df000504 	addi	fp,sp,20
 10140b0:	e13ffd15 	stw	r4,-12(fp)
 10140b4:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 10140b8:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
 10140bc:	1012a540 	call	1012a54 <alt_up_sd_card_is_Present>
 10140c0:	1005003a 	cmpeq	r2,r2,zero
 10140c4:	10002d1e 	bne	r2,zero,101417c <Read_Sector_Data_CRC+0xdc>
		short int reg_state = 0xff;
 10140c8:	00803fc4 	movi	r2,255
 10140cc:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
 10140d0:	d0a6e917 	ldw	r2,-25692(gp)
 10140d4:	1005003a 	cmpeq	r2,r2,zero
 10140d8:	1000081e 	bne	r2,zero,10140fc <Read_Sector_Data_CRC+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
 10140dc:	d0a6ea17 	ldw	r2,-25688(gp)
 10140e0:	1009883a 	mov	r4,r2
 10140e4:	000b883a 	mov	r5,zero
 10140e8:	100fc300 	call	100fc30 <Write_Sector_Data>
 10140ec:	1004c03a 	cmpne	r2,r2,zero
 10140f0:	1000021e 	bne	r2,zero,10140fc <Read_Sector_Data_CRC+0x5c>
				return false;
 10140f4:	e03fff15 	stw	zero,-4(fp)
 10140f8:	00002206 	br	1014184 <Read_Sector_Data_CRC+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 10140fc:	d0a6e417 	ldw	r2,-25712(gp)
 1014100:	1009883a 	mov	r4,r2
 1014104:	e0fffd17 	ldw	r3,-12(fp)
 1014108:	e0bffe17 	ldw	r2,-8(fp)
 101410c:	1885883a 	add	r2,r3,r2
 1014110:	1006927a 	slli	r3,r2,9
 1014114:	2005883a 	mov	r2,r4
 1014118:	10c00035 	stwio	r3,0(r2)
				(sector_index + partition_offset)*512);
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 101411c:	d0a6e317 	ldw	r2,-25716(gp)
 1014120:	1007883a 	mov	r3,r2
 1014124:	00800444 	movi	r2,17
 1014128:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 101412c:	d0a6e017 	ldw	r2,-25728(gp)
 1014130:	1080002b 	ldhuio	r2,0(r2)
 1014134:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
 1014138:	e0bffb0b 	ldhu	r2,-20(fp)
 101413c:	10bfffcc 	andi	r2,r2,65535
 1014140:	1080010c 	andi	r2,r2,4
 1014144:	1004c03a 	cmpne	r2,r2,zero
 1014148:	103ff81e 	bne	r2,zero,101412c <Read_Sector_Data_CRC+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
 101414c:	e0bffb0b 	ldhu	r2,-20(fp)
 1014150:	10bfffcc 	andi	r2,r2,65535
 1014154:	10800c0c 	andi	r2,r2,48
 1014158:	1004c03a 	cmpne	r2,r2,zero
 101415c:	1000071e 	bne	r2,zero,101417c <Read_Sector_Data_CRC+0xdc>
			result = true;
 1014160:	00800044 	movi	r2,1
 1014164:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
 1014168:	d026e915 	stw	zero,-25692(gp)
			current_sector_index = sector_index + partition_offset;
 101416c:	e0fffd17 	ldw	r3,-12(fp)
 1014170:	e0bffe17 	ldw	r2,-8(fp)
 1014174:	1885883a 	add	r2,r3,r2
 1014178:	d0a6ea15 	stw	r2,-25688(gp)
		}
	}
	return result;
 101417c:	e0bffc17 	ldw	r2,-16(fp)
 1014180:	e0bfff15 	stw	r2,-4(fp)
 1014184:	e0bfff17 	ldw	r2,-4(fp)
}
 1014188:	e037883a 	mov	sp,fp
 101418c:	dfc00117 	ldw	ra,4(sp)
 1014190:	df000017 	ldw	fp,0(sp)
 1014194:	dec00204 	addi	sp,sp,8
 1014198:	f800283a 	ret

0101419c <Read_Sector_Data_Attempt_CRC>:

bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
 101419c:	defff804 	addi	sp,sp,-32
 10141a0:	dfc00715 	stw	ra,28(sp)
 10141a4:	df000615 	stw	fp,24(sp)
 10141a8:	df000604 	addi	fp,sp,24
 10141ac:	e13ffd15 	stw	r4,-12(fp)
 10141b0:	e17ffe15 	stw	r5,-8(fp)
	int i;
	bool correct;
	const int attempts = 100;
 10141b4:	00801904 	movi	r2,100
 10141b8:	e0bffa15 	stw	r2,-24(fp)

	for (i = 0; i < attempts; i++) {
 10141bc:	e03ffc15 	stw	zero,-16(fp)
 10141c0:	00000d06 	br	10141f8 <Read_Sector_Data_Attempt_CRC+0x5c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
 10141c4:	e13ffd17 	ldw	r4,-12(fp)
 10141c8:	e17ffe17 	ldw	r5,-8(fp)
 10141cc:	10140a00 	call	10140a0 <Read_Sector_Data_CRC>
 10141d0:	e0bffb15 	stw	r2,-20(fp)
		if (correct) {
 10141d4:	e0bffb17 	ldw	r2,-20(fp)
 10141d8:	1005003a 	cmpeq	r2,r2,zero
 10141dc:	1000031e 	bne	r2,zero,10141ec <Read_Sector_Data_Attempt_CRC+0x50>
			return true;
 10141e0:	00800044 	movi	r2,1
 10141e4:	e0bfff15 	stw	r2,-4(fp)
 10141e8:	00000a06 	br	1014214 <Read_Sector_Data_Attempt_CRC+0x78>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
 10141ec:	e0bffc17 	ldw	r2,-16(fp)
 10141f0:	10800044 	addi	r2,r2,1
 10141f4:	e0bffc15 	stw	r2,-16(fp)
 10141f8:	e0fffc17 	ldw	r3,-16(fp)
 10141fc:	e0bffa17 	ldw	r2,-24(fp)
 1014200:	18bff016 	blt	r3,r2,10141c4 <Read_Sector_Data_Attempt_CRC+0x28>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
 1014204:	e13ffd17 	ldw	r4,-12(fp)
 1014208:	e17ffe17 	ldw	r5,-8(fp)
 101420c:	100fd480 	call	100fd48 <Read_Sector_Data>
 1014210:	e0bfff15 	stw	r2,-4(fp)
 1014214:	e0bfff17 	ldw	r2,-4(fp)
}
 1014218:	e037883a 	mov	sp,fp
 101421c:	dfc00117 	ldw	ra,4(sp)
 1014220:	df000017 	ldw	fp,0(sp)
 1014224:	dec00204 	addi	sp,sp,8
 1014228:	f800283a 	ret

0101422c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 101422c:	defffa04 	addi	sp,sp,-24
 1014230:	dfc00515 	stw	ra,20(sp)
 1014234:	df000415 	stw	fp,16(sp)
 1014238:	df000404 	addi	fp,sp,16
 101423c:	e13ffd15 	stw	r4,-12(fp)
 1014240:	e17ffe15 	stw	r5,-8(fp)
 1014244:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1014248:	e0bffd17 	ldw	r2,-12(fp)
 101424c:	10800017 	ldw	r2,0(r2)
 1014250:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1014254:	e0bffc17 	ldw	r2,-16(fp)
 1014258:	11000a04 	addi	r4,r2,40
 101425c:	e0bffd17 	ldw	r2,-12(fp)
 1014260:	11c00217 	ldw	r7,8(r2)
 1014264:	e17ffe17 	ldw	r5,-8(fp)
 1014268:	e1bfff17 	ldw	r6,-4(fp)
 101426c:	10148700 	call	1014870 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1014270:	e037883a 	mov	sp,fp
 1014274:	dfc00117 	ldw	ra,4(sp)
 1014278:	df000017 	ldw	fp,0(sp)
 101427c:	dec00204 	addi	sp,sp,8
 1014280:	f800283a 	ret

01014284 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1014284:	defffa04 	addi	sp,sp,-24
 1014288:	dfc00515 	stw	ra,20(sp)
 101428c:	df000415 	stw	fp,16(sp)
 1014290:	df000404 	addi	fp,sp,16
 1014294:	e13ffd15 	stw	r4,-12(fp)
 1014298:	e17ffe15 	stw	r5,-8(fp)
 101429c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10142a0:	e0bffd17 	ldw	r2,-12(fp)
 10142a4:	10800017 	ldw	r2,0(r2)
 10142a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 10142ac:	e0bffc17 	ldw	r2,-16(fp)
 10142b0:	11000a04 	addi	r4,r2,40
 10142b4:	e0bffd17 	ldw	r2,-12(fp)
 10142b8:	11c00217 	ldw	r7,8(r2)
 10142bc:	e17ffe17 	ldw	r5,-8(fp)
 10142c0:	e1bfff17 	ldw	r6,-4(fp)
 10142c4:	1014a940 	call	1014a94 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 10142c8:	e037883a 	mov	sp,fp
 10142cc:	dfc00117 	ldw	ra,4(sp)
 10142d0:	df000017 	ldw	fp,0(sp)
 10142d4:	dec00204 	addi	sp,sp,8
 10142d8:	f800283a 	ret

010142dc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 10142dc:	defffc04 	addi	sp,sp,-16
 10142e0:	dfc00315 	stw	ra,12(sp)
 10142e4:	df000215 	stw	fp,8(sp)
 10142e8:	df000204 	addi	fp,sp,8
 10142ec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10142f0:	e0bfff17 	ldw	r2,-4(fp)
 10142f4:	10800017 	ldw	r2,0(r2)
 10142f8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 10142fc:	e0bffe17 	ldw	r2,-8(fp)
 1014300:	11000a04 	addi	r4,r2,40
 1014304:	e0bfff17 	ldw	r2,-4(fp)
 1014308:	11400217 	ldw	r5,8(r2)
 101430c:	10147080 	call	1014708 <altera_avalon_jtag_uart_close>
}
 1014310:	e037883a 	mov	sp,fp
 1014314:	dfc00117 	ldw	ra,4(sp)
 1014318:	df000017 	ldw	fp,0(sp)
 101431c:	dec00204 	addi	sp,sp,8
 1014320:	f800283a 	ret

01014324 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1014324:	defffa04 	addi	sp,sp,-24
 1014328:	dfc00515 	stw	ra,20(sp)
 101432c:	df000415 	stw	fp,16(sp)
 1014330:	df000404 	addi	fp,sp,16
 1014334:	e13ffd15 	stw	r4,-12(fp)
 1014338:	e17ffe15 	stw	r5,-8(fp)
 101433c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1014340:	e0bffd17 	ldw	r2,-12(fp)
 1014344:	10800017 	ldw	r2,0(r2)
 1014348:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 101434c:	e0bffc17 	ldw	r2,-16(fp)
 1014350:	11000a04 	addi	r4,r2,40
 1014354:	e17ffe17 	ldw	r5,-8(fp)
 1014358:	e1bfff17 	ldw	r6,-4(fp)
 101435c:	101477c0 	call	101477c <altera_avalon_jtag_uart_ioctl>
}
 1014360:	e037883a 	mov	sp,fp
 1014364:	dfc00117 	ldw	ra,4(sp)
 1014368:	df000017 	ldw	fp,0(sp)
 101436c:	dec00204 	addi	sp,sp,8
 1014370:	f800283a 	ret

01014374 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1014374:	defffb04 	addi	sp,sp,-20
 1014378:	dfc00415 	stw	ra,16(sp)
 101437c:	df000315 	stw	fp,12(sp)
 1014380:	df000304 	addi	fp,sp,12
 1014384:	e13ffd15 	stw	r4,-12(fp)
 1014388:	e17ffe15 	stw	r5,-8(fp)
 101438c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1014390:	e0fffd17 	ldw	r3,-12(fp)
 1014394:	00800044 	movi	r2,1
 1014398:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 101439c:	e0bffd17 	ldw	r2,-12(fp)
 10143a0:	10800017 	ldw	r2,0(r2)
 10143a4:	11000104 	addi	r4,r2,4
 10143a8:	e0bffd17 	ldw	r2,-12(fp)
 10143ac:	10800817 	ldw	r2,32(r2)
 10143b0:	1007883a 	mov	r3,r2
 10143b4:	2005883a 	mov	r2,r4
 10143b8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 10143bc:	e13fff17 	ldw	r4,-4(fp)
 10143c0:	e17ffd17 	ldw	r5,-12(fp)
 10143c4:	01804074 	movhi	r6,257
 10143c8:	31910b04 	addi	r6,r6,17452
 10143cc:	1015c0c0 	call	1015c0c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 10143d0:	e0bffd17 	ldw	r2,-12(fp)
 10143d4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 10143d8:	e0bffd17 	ldw	r2,-12(fp)
 10143dc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 10143e0:	008040b4 	movhi	r2,258
 10143e4:	10afe304 	addi	r2,r2,-16500
 10143e8:	10800017 	ldw	r2,0(r2)
 10143ec:	100b883a 	mov	r5,r2
 10143f0:	01804074 	movhi	r6,257
 10143f4:	31919604 	addi	r6,r6,18008
 10143f8:	e1fffd17 	ldw	r7,-12(fp)
 10143fc:	10156980 	call	1015698 <alt_alarm_start>
 1014400:	1004403a 	cmpge	r2,r2,zero
 1014404:	1000041e 	bne	r2,zero,1014418 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1014408:	e0fffd17 	ldw	r3,-12(fp)
 101440c:	00a00034 	movhi	r2,32768
 1014410:	10bfffc4 	addi	r2,r2,-1
 1014414:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1014418:	e037883a 	mov	sp,fp
 101441c:	dfc00117 	ldw	ra,4(sp)
 1014420:	df000017 	ldw	fp,0(sp)
 1014424:	dec00204 	addi	sp,sp,8
 1014428:	f800283a 	ret

0101442c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 101442c:	defff704 	addi	sp,sp,-36
 1014430:	df000815 	stw	fp,32(sp)
 1014434:	df000804 	addi	fp,sp,32
 1014438:	e13ffe15 	stw	r4,-8(fp)
 101443c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1014440:	e0bffe17 	ldw	r2,-8(fp)
 1014444:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 1014448:	e0bffd17 	ldw	r2,-12(fp)
 101444c:	10800017 	ldw	r2,0(r2)
 1014450:	e0bffc15 	stw	r2,-16(fp)
 1014454:	00000006 	br	1014458 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1014458:	e0bffc17 	ldw	r2,-16(fp)
 101445c:	10800104 	addi	r2,r2,4
 1014460:	10800037 	ldwio	r2,0(r2)
 1014464:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1014468:	e0bffb17 	ldw	r2,-20(fp)
 101446c:	1080c00c 	andi	r2,r2,768
 1014470:	1005003a 	cmpeq	r2,r2,zero
 1014474:	1000741e 	bne	r2,zero,1014648 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1014478:	e0bffb17 	ldw	r2,-20(fp)
 101447c:	1080400c 	andi	r2,r2,256
 1014480:	1005003a 	cmpeq	r2,r2,zero
 1014484:	1000351e 	bne	r2,zero,101455c <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1014488:	00800074 	movhi	r2,1
 101448c:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1014490:	e0bffd17 	ldw	r2,-12(fp)
 1014494:	10800a17 	ldw	r2,40(r2)
 1014498:	10800044 	addi	r2,r2,1
 101449c:	1081ffcc 	andi	r2,r2,2047
 10144a0:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 10144a4:	e0bffd17 	ldw	r2,-12(fp)
 10144a8:	10c00b17 	ldw	r3,44(r2)
 10144ac:	e0bff917 	ldw	r2,-28(fp)
 10144b0:	18801626 	beq	r3,r2,101450c <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 10144b4:	e0bffc17 	ldw	r2,-16(fp)
 10144b8:	10800037 	ldwio	r2,0(r2)
 10144bc:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 10144c0:	e0bffa17 	ldw	r2,-24(fp)
 10144c4:	10a0000c 	andi	r2,r2,32768
 10144c8:	1005003a 	cmpeq	r2,r2,zero
 10144cc:	10000f1e 	bne	r2,zero,101450c <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 10144d0:	e0bffd17 	ldw	r2,-12(fp)
 10144d4:	10c00a17 	ldw	r3,40(r2)
 10144d8:	e0bffa17 	ldw	r2,-24(fp)
 10144dc:	1009883a 	mov	r4,r2
 10144e0:	e0bffd17 	ldw	r2,-12(fp)
 10144e4:	1885883a 	add	r2,r3,r2
 10144e8:	10800e04 	addi	r2,r2,56
 10144ec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10144f0:	e0bffd17 	ldw	r2,-12(fp)
 10144f4:	10800a17 	ldw	r2,40(r2)
 10144f8:	10800044 	addi	r2,r2,1
 10144fc:	10c1ffcc 	andi	r3,r2,2047
 1014500:	e0bffd17 	ldw	r2,-12(fp)
 1014504:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1014508:	003fe106 	br	1014490 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 101450c:	e0bffa17 	ldw	r2,-24(fp)
 1014510:	10bfffec 	andhi	r2,r2,65535
 1014514:	1005003a 	cmpeq	r2,r2,zero
 1014518:	1000101e 	bne	r2,zero,101455c <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 101451c:	e0bffd17 	ldw	r2,-12(fp)
 1014520:	10c00817 	ldw	r3,32(r2)
 1014524:	00bfff84 	movi	r2,-2
 1014528:	1886703a 	and	r3,r3,r2
 101452c:	e0bffd17 	ldw	r2,-12(fp)
 1014530:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1014534:	e0bffc17 	ldw	r2,-16(fp)
 1014538:	11000104 	addi	r4,r2,4
 101453c:	e0bffd17 	ldw	r2,-12(fp)
 1014540:	10800817 	ldw	r2,32(r2)
 1014544:	1007883a 	mov	r3,r2
 1014548:	2005883a 	mov	r2,r4
 101454c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1014550:	e0bffc17 	ldw	r2,-16(fp)
 1014554:	10800104 	addi	r2,r2,4
 1014558:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 101455c:	e0bffb17 	ldw	r2,-20(fp)
 1014560:	1080800c 	andi	r2,r2,512
 1014564:	1005003a 	cmpeq	r2,r2,zero
 1014568:	103fbb1e 	bne	r2,zero,1014458 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 101456c:	e0bffb17 	ldw	r2,-20(fp)
 1014570:	10bfffec 	andhi	r2,r2,65535
 1014574:	1004d43a 	srli	r2,r2,16
 1014578:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 101457c:	00001506 	br	10145d4 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1014580:	e13ffc17 	ldw	r4,-16(fp)
 1014584:	e0bffd17 	ldw	r2,-12(fp)
 1014588:	10c00d17 	ldw	r3,52(r2)
 101458c:	e0bffd17 	ldw	r2,-12(fp)
 1014590:	1885883a 	add	r2,r3,r2
 1014594:	10820e04 	addi	r2,r2,2104
 1014598:	10800003 	ldbu	r2,0(r2)
 101459c:	10c03fcc 	andi	r3,r2,255
 10145a0:	18c0201c 	xori	r3,r3,128
 10145a4:	18ffe004 	addi	r3,r3,-128
 10145a8:	2005883a 	mov	r2,r4
 10145ac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10145b0:	e0bffd17 	ldw	r2,-12(fp)
 10145b4:	10800d17 	ldw	r2,52(r2)
 10145b8:	10800044 	addi	r2,r2,1
 10145bc:	10c1ffcc 	andi	r3,r2,2047
 10145c0:	e0bffd17 	ldw	r2,-12(fp)
 10145c4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 10145c8:	e0bff817 	ldw	r2,-32(fp)
 10145cc:	10bfffc4 	addi	r2,r2,-1
 10145d0:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 10145d4:	e0bff817 	ldw	r2,-32(fp)
 10145d8:	1005003a 	cmpeq	r2,r2,zero
 10145dc:	1000051e 	bne	r2,zero,10145f4 <altera_avalon_jtag_uart_irq+0x1c8>
 10145e0:	e0bffd17 	ldw	r2,-12(fp)
 10145e4:	10c00d17 	ldw	r3,52(r2)
 10145e8:	e0bffd17 	ldw	r2,-12(fp)
 10145ec:	10800c17 	ldw	r2,48(r2)
 10145f0:	18bfe31e 	bne	r3,r2,1014580 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 10145f4:	e0bff817 	ldw	r2,-32(fp)
 10145f8:	1005003a 	cmpeq	r2,r2,zero
 10145fc:	103f961e 	bne	r2,zero,1014458 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1014600:	e0bffd17 	ldw	r2,-12(fp)
 1014604:	10c00817 	ldw	r3,32(r2)
 1014608:	00bfff44 	movi	r2,-3
 101460c:	1886703a 	and	r3,r3,r2
 1014610:	e0bffd17 	ldw	r2,-12(fp)
 1014614:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1014618:	e0bffd17 	ldw	r2,-12(fp)
 101461c:	10800017 	ldw	r2,0(r2)
 1014620:	11000104 	addi	r4,r2,4
 1014624:	e0bffd17 	ldw	r2,-12(fp)
 1014628:	10800817 	ldw	r2,32(r2)
 101462c:	1007883a 	mov	r3,r2
 1014630:	2005883a 	mov	r2,r4
 1014634:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1014638:	e0bffc17 	ldw	r2,-16(fp)
 101463c:	10800104 	addi	r2,r2,4
 1014640:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1014644:	003f8406 	br	1014458 <altera_avalon_jtag_uart_irq+0x2c>
}
 1014648:	e037883a 	mov	sp,fp
 101464c:	df000017 	ldw	fp,0(sp)
 1014650:	dec00104 	addi	sp,sp,4
 1014654:	f800283a 	ret

01014658 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1014658:	defffc04 	addi	sp,sp,-16
 101465c:	df000315 	stw	fp,12(sp)
 1014660:	df000304 	addi	fp,sp,12
 1014664:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1014668:	e0bfff17 	ldw	r2,-4(fp)
 101466c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1014670:	e0bffe17 	ldw	r2,-8(fp)
 1014674:	10800017 	ldw	r2,0(r2)
 1014678:	10800104 	addi	r2,r2,4
 101467c:	10800037 	ldwio	r2,0(r2)
 1014680:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1014684:	e0bffd17 	ldw	r2,-12(fp)
 1014688:	1081000c 	andi	r2,r2,1024
 101468c:	1005003a 	cmpeq	r2,r2,zero
 1014690:	10000c1e 	bne	r2,zero,10146c4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1014694:	e0bffe17 	ldw	r2,-8(fp)
 1014698:	10800017 	ldw	r2,0(r2)
 101469c:	11000104 	addi	r4,r2,4
 10146a0:	e0bffe17 	ldw	r2,-8(fp)
 10146a4:	10800817 	ldw	r2,32(r2)
 10146a8:	10810014 	ori	r2,r2,1024
 10146ac:	1007883a 	mov	r3,r2
 10146b0:	2005883a 	mov	r2,r4
 10146b4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 10146b8:	e0bffe17 	ldw	r2,-8(fp)
 10146bc:	10000915 	stw	zero,36(r2)
 10146c0:	00000a06 	br	10146ec <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 10146c4:	e0bffe17 	ldw	r2,-8(fp)
 10146c8:	10c00917 	ldw	r3,36(r2)
 10146cc:	00a00034 	movhi	r2,32768
 10146d0:	10bfff04 	addi	r2,r2,-4
 10146d4:	10c00536 	bltu	r2,r3,10146ec <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 10146d8:	e0bffe17 	ldw	r2,-8(fp)
 10146dc:	10800917 	ldw	r2,36(r2)
 10146e0:	10c00044 	addi	r3,r2,1
 10146e4:	e0bffe17 	ldw	r2,-8(fp)
 10146e8:	10c00915 	stw	r3,36(r2)
 10146ec:	008040b4 	movhi	r2,258
 10146f0:	10afe304 	addi	r2,r2,-16500
 10146f4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 10146f8:	e037883a 	mov	sp,fp
 10146fc:	df000017 	ldw	fp,0(sp)
 1014700:	dec00104 	addi	sp,sp,4
 1014704:	f800283a 	ret

01014708 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1014708:	defffc04 	addi	sp,sp,-16
 101470c:	df000315 	stw	fp,12(sp)
 1014710:	df000304 	addi	fp,sp,12
 1014714:	e13ffd15 	stw	r4,-12(fp)
 1014718:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 101471c:	00000706 	br	101473c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 1014720:	e0bffe17 	ldw	r2,-8(fp)
 1014724:	1090000c 	andi	r2,r2,16384
 1014728:	1005003a 	cmpeq	r2,r2,zero
 101472c:	1000031e 	bne	r2,zero,101473c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 1014730:	00bffd44 	movi	r2,-11
 1014734:	e0bfff15 	stw	r2,-4(fp)
 1014738:	00000b06 	br	1014768 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 101473c:	e0bffd17 	ldw	r2,-12(fp)
 1014740:	10c00d17 	ldw	r3,52(r2)
 1014744:	e0bffd17 	ldw	r2,-12(fp)
 1014748:	10800c17 	ldw	r2,48(r2)
 101474c:	18800526 	beq	r3,r2,1014764 <altera_avalon_jtag_uart_close+0x5c>
 1014750:	e0bffd17 	ldw	r2,-12(fp)
 1014754:	10c00917 	ldw	r3,36(r2)
 1014758:	e0bffd17 	ldw	r2,-12(fp)
 101475c:	10800117 	ldw	r2,4(r2)
 1014760:	18bfef36 	bltu	r3,r2,1014720 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1014764:	e03fff15 	stw	zero,-4(fp)
 1014768:	e0bfff17 	ldw	r2,-4(fp)
}
 101476c:	e037883a 	mov	sp,fp
 1014770:	df000017 	ldw	fp,0(sp)
 1014774:	dec00104 	addi	sp,sp,4
 1014778:	f800283a 	ret

0101477c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 101477c:	defff804 	addi	sp,sp,-32
 1014780:	df000715 	stw	fp,28(sp)
 1014784:	df000704 	addi	fp,sp,28
 1014788:	e13ffb15 	stw	r4,-20(fp)
 101478c:	e17ffc15 	stw	r5,-16(fp)
 1014790:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1014794:	00bff9c4 	movi	r2,-25
 1014798:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 101479c:	e0bffc17 	ldw	r2,-16(fp)
 10147a0:	e0bfff15 	stw	r2,-4(fp)
 10147a4:	e0ffff17 	ldw	r3,-4(fp)
 10147a8:	189a8060 	cmpeqi	r2,r3,27137
 10147ac:	1000041e 	bne	r2,zero,10147c0 <altera_avalon_jtag_uart_ioctl+0x44>
 10147b0:	e0ffff17 	ldw	r3,-4(fp)
 10147b4:	189a80a0 	cmpeqi	r2,r3,27138
 10147b8:	10001b1e 	bne	r2,zero,1014828 <altera_avalon_jtag_uart_ioctl+0xac>
 10147bc:	00002706 	br	101485c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 10147c0:	e0bffb17 	ldw	r2,-20(fp)
 10147c4:	10c00117 	ldw	r3,4(r2)
 10147c8:	00a00034 	movhi	r2,32768
 10147cc:	10bfffc4 	addi	r2,r2,-1
 10147d0:	18802226 	beq	r3,r2,101485c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 10147d4:	e0bffd17 	ldw	r2,-12(fp)
 10147d8:	10800017 	ldw	r2,0(r2)
 10147dc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 10147e0:	e0bff917 	ldw	r2,-28(fp)
 10147e4:	10800090 	cmplti	r2,r2,2
 10147e8:	1000071e 	bne	r2,zero,1014808 <altera_avalon_jtag_uart_ioctl+0x8c>
 10147ec:	e0fff917 	ldw	r3,-28(fp)
 10147f0:	00a00034 	movhi	r2,32768
 10147f4:	10bfffc4 	addi	r2,r2,-1
 10147f8:	18800326 	beq	r3,r2,1014808 <altera_avalon_jtag_uart_ioctl+0x8c>
 10147fc:	e0bff917 	ldw	r2,-28(fp)
 1014800:	e0bffe15 	stw	r2,-8(fp)
 1014804:	00000306 	br	1014814 <altera_avalon_jtag_uart_ioctl+0x98>
 1014808:	00e00034 	movhi	r3,32768
 101480c:	18ffff84 	addi	r3,r3,-2
 1014810:	e0fffe15 	stw	r3,-8(fp)
 1014814:	e0bffb17 	ldw	r2,-20(fp)
 1014818:	e0fffe17 	ldw	r3,-8(fp)
 101481c:	10c00115 	stw	r3,4(r2)
      rc = 0;
 1014820:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 1014824:	00000d06 	br	101485c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1014828:	e0bffb17 	ldw	r2,-20(fp)
 101482c:	10c00117 	ldw	r3,4(r2)
 1014830:	00a00034 	movhi	r2,32768
 1014834:	10bfffc4 	addi	r2,r2,-1
 1014838:	18800826 	beq	r3,r2,101485c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 101483c:	e13ffd17 	ldw	r4,-12(fp)
 1014840:	e0bffb17 	ldw	r2,-20(fp)
 1014844:	10c00917 	ldw	r3,36(r2)
 1014848:	e0bffb17 	ldw	r2,-20(fp)
 101484c:	10800117 	ldw	r2,4(r2)
 1014850:	1885803a 	cmpltu	r2,r3,r2
 1014854:	20800015 	stw	r2,0(r4)
      rc = 0;
 1014858:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 101485c:	e0bffa17 	ldw	r2,-24(fp)
}
 1014860:	e037883a 	mov	sp,fp
 1014864:	df000017 	ldw	fp,0(sp)
 1014868:	dec00104 	addi	sp,sp,4
 101486c:	f800283a 	ret

01014870 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1014870:	defff204 	addi	sp,sp,-56
 1014874:	dfc00d15 	stw	ra,52(sp)
 1014878:	df000c15 	stw	fp,48(sp)
 101487c:	df000c04 	addi	fp,sp,48
 1014880:	e13ffb15 	stw	r4,-20(fp)
 1014884:	e17ffc15 	stw	r5,-16(fp)
 1014888:	e1bffd15 	stw	r6,-12(fp)
 101488c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1014890:	e0bffc17 	ldw	r2,-16(fp)
 1014894:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1014898:	00004806 	br	10149bc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 101489c:	e0bffb17 	ldw	r2,-20(fp)
 10148a0:	10800a17 	ldw	r2,40(r2)
 10148a4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 10148a8:	e0bffb17 	ldw	r2,-20(fp)
 10148ac:	10800b17 	ldw	r2,44(r2)
 10148b0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 10148b4:	e0fff717 	ldw	r3,-36(fp)
 10148b8:	e0bff617 	ldw	r2,-40(fp)
 10148bc:	18800536 	bltu	r3,r2,10148d4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 10148c0:	e0bff717 	ldw	r2,-36(fp)
 10148c4:	e0fff617 	ldw	r3,-40(fp)
 10148c8:	10c5c83a 	sub	r2,r2,r3
 10148cc:	e0bff815 	stw	r2,-32(fp)
 10148d0:	00000406 	br	10148e4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 10148d4:	00820004 	movi	r2,2048
 10148d8:	e0fff617 	ldw	r3,-40(fp)
 10148dc:	10c5c83a 	sub	r2,r2,r3
 10148e0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 10148e4:	e0bff817 	ldw	r2,-32(fp)
 10148e8:	1005003a 	cmpeq	r2,r2,zero
 10148ec:	10001f1e 	bne	r2,zero,101496c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 10148f0:	e0fffd17 	ldw	r3,-12(fp)
 10148f4:	e0bff817 	ldw	r2,-32(fp)
 10148f8:	1880022e 	bgeu	r3,r2,1014904 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 10148fc:	e0bffd17 	ldw	r2,-12(fp)
 1014900:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1014904:	e0bffb17 	ldw	r2,-20(fp)
 1014908:	10c00e04 	addi	r3,r2,56
 101490c:	e0bff617 	ldw	r2,-40(fp)
 1014910:	1887883a 	add	r3,r3,r2
 1014914:	e0bffa17 	ldw	r2,-24(fp)
 1014918:	1009883a 	mov	r4,r2
 101491c:	180b883a 	mov	r5,r3
 1014920:	e1bff817 	ldw	r6,-32(fp)
 1014924:	10073e40 	call	10073e4 <memcpy>
      ptr   += n;
 1014928:	e0fff817 	ldw	r3,-32(fp)
 101492c:	e0bffa17 	ldw	r2,-24(fp)
 1014930:	10c5883a 	add	r2,r2,r3
 1014934:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 1014938:	e0fffd17 	ldw	r3,-12(fp)
 101493c:	e0bff817 	ldw	r2,-32(fp)
 1014940:	1885c83a 	sub	r2,r3,r2
 1014944:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1014948:	e0fff617 	ldw	r3,-40(fp)
 101494c:	e0bff817 	ldw	r2,-32(fp)
 1014950:	1885883a 	add	r2,r3,r2
 1014954:	10c1ffcc 	andi	r3,r2,2047
 1014958:	e0bffb17 	ldw	r2,-20(fp)
 101495c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1014960:	e0bffd17 	ldw	r2,-12(fp)
 1014964:	10800048 	cmpgei	r2,r2,1
 1014968:	103fcc1e 	bne	r2,zero,101489c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 101496c:	e0fffa17 	ldw	r3,-24(fp)
 1014970:	e0bffc17 	ldw	r2,-16(fp)
 1014974:	1880141e 	bne	r3,r2,10149c8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1014978:	e0bffe17 	ldw	r2,-8(fp)
 101497c:	1090000c 	andi	r2,r2,16384
 1014980:	1004c03a 	cmpne	r2,r2,zero
 1014984:	1000101e 	bne	r2,zero,10149c8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1014988:	e0bffb17 	ldw	r2,-20(fp)
 101498c:	10c00a17 	ldw	r3,40(r2)
 1014990:	e0bff717 	ldw	r2,-36(fp)
 1014994:	1880051e 	bne	r3,r2,10149ac <altera_avalon_jtag_uart_read+0x13c>
 1014998:	e0bffb17 	ldw	r2,-20(fp)
 101499c:	10c00917 	ldw	r3,36(r2)
 10149a0:	e0bffb17 	ldw	r2,-20(fp)
 10149a4:	10800117 	ldw	r2,4(r2)
 10149a8:	18bff736 	bltu	r3,r2,1014988 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 10149ac:	e0bffb17 	ldw	r2,-20(fp)
 10149b0:	10c00a17 	ldw	r3,40(r2)
 10149b4:	e0bff717 	ldw	r2,-36(fp)
 10149b8:	18800326 	beq	r3,r2,10149c8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10149bc:	e0bffd17 	ldw	r2,-12(fp)
 10149c0:	10800048 	cmpgei	r2,r2,1
 10149c4:	103fb51e 	bne	r2,zero,101489c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 10149c8:	e0fffa17 	ldw	r3,-24(fp)
 10149cc:	e0bffc17 	ldw	r2,-16(fp)
 10149d0:	18801926 	beq	r3,r2,1014a38 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10149d4:	0005303a 	rdctl	r2,status
 10149d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10149dc:	e0fff517 	ldw	r3,-44(fp)
 10149e0:	00bfff84 	movi	r2,-2
 10149e4:	1884703a 	and	r2,r3,r2
 10149e8:	1001703a 	wrctl	status,r2
  
  return context;
 10149ec:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 10149f0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10149f4:	e0bffb17 	ldw	r2,-20(fp)
 10149f8:	10800817 	ldw	r2,32(r2)
 10149fc:	10c00054 	ori	r3,r2,1
 1014a00:	e0bffb17 	ldw	r2,-20(fp)
 1014a04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1014a08:	e0bffb17 	ldw	r2,-20(fp)
 1014a0c:	10800017 	ldw	r2,0(r2)
 1014a10:	11000104 	addi	r4,r2,4
 1014a14:	e0bffb17 	ldw	r2,-20(fp)
 1014a18:	10800817 	ldw	r2,32(r2)
 1014a1c:	1007883a 	mov	r3,r2
 1014a20:	2005883a 	mov	r2,r4
 1014a24:	10c00035 	stwio	r3,0(r2)
 1014a28:	e0bff917 	ldw	r2,-28(fp)
 1014a2c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014a30:	e0bff417 	ldw	r2,-48(fp)
 1014a34:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1014a38:	e0fffa17 	ldw	r3,-24(fp)
 1014a3c:	e0bffc17 	ldw	r2,-16(fp)
 1014a40:	18800526 	beq	r3,r2,1014a58 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 1014a44:	e0fffa17 	ldw	r3,-24(fp)
 1014a48:	e0bffc17 	ldw	r2,-16(fp)
 1014a4c:	1887c83a 	sub	r3,r3,r2
 1014a50:	e0ffff15 	stw	r3,-4(fp)
 1014a54:	00000906 	br	1014a7c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 1014a58:	e0bffe17 	ldw	r2,-8(fp)
 1014a5c:	1090000c 	andi	r2,r2,16384
 1014a60:	1005003a 	cmpeq	r2,r2,zero
 1014a64:	1000031e 	bne	r2,zero,1014a74 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1014a68:	00bffd44 	movi	r2,-11
 1014a6c:	e0bfff15 	stw	r2,-4(fp)
 1014a70:	00000206 	br	1014a7c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 1014a74:	00bffec4 	movi	r2,-5
 1014a78:	e0bfff15 	stw	r2,-4(fp)
 1014a7c:	e0bfff17 	ldw	r2,-4(fp)
}
 1014a80:	e037883a 	mov	sp,fp
 1014a84:	dfc00117 	ldw	ra,4(sp)
 1014a88:	df000017 	ldw	fp,0(sp)
 1014a8c:	dec00204 	addi	sp,sp,8
 1014a90:	f800283a 	ret

01014a94 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1014a94:	defff204 	addi	sp,sp,-56
 1014a98:	dfc00d15 	stw	ra,52(sp)
 1014a9c:	df000c15 	stw	fp,48(sp)
 1014aa0:	df000c04 	addi	fp,sp,48
 1014aa4:	e13ffb15 	stw	r4,-20(fp)
 1014aa8:	e17ffc15 	stw	r5,-16(fp)
 1014aac:	e1bffd15 	stw	r6,-12(fp)
 1014ab0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1014ab4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1014ab8:	e0bffc17 	ldw	r2,-16(fp)
 1014abc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1014ac0:	00003a06 	br	1014bac <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1014ac4:	e0bffb17 	ldw	r2,-20(fp)
 1014ac8:	10800c17 	ldw	r2,48(r2)
 1014acc:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 1014ad0:	e0bffb17 	ldw	r2,-20(fp)
 1014ad4:	10800d17 	ldw	r2,52(r2)
 1014ad8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 1014adc:	e0fffa17 	ldw	r3,-24(fp)
 1014ae0:	e0bff917 	ldw	r2,-28(fp)
 1014ae4:	1880062e 	bgeu	r3,r2,1014b00 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1014ae8:	e0fff917 	ldw	r3,-28(fp)
 1014aec:	e0bffa17 	ldw	r2,-24(fp)
 1014af0:	1885c83a 	sub	r2,r3,r2
 1014af4:	10bfffc4 	addi	r2,r2,-1
 1014af8:	e0bff815 	stw	r2,-32(fp)
 1014afc:	00000c06 	br	1014b30 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 1014b00:	e0bff917 	ldw	r2,-28(fp)
 1014b04:	1005003a 	cmpeq	r2,r2,zero
 1014b08:	1000051e 	bne	r2,zero,1014b20 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1014b0c:	00820004 	movi	r2,2048
 1014b10:	e0fffa17 	ldw	r3,-24(fp)
 1014b14:	10c5c83a 	sub	r2,r2,r3
 1014b18:	e0bff815 	stw	r2,-32(fp)
 1014b1c:	00000406 	br	1014b30 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1014b20:	0081ffc4 	movi	r2,2047
 1014b24:	e0fffa17 	ldw	r3,-24(fp)
 1014b28:	10c5c83a 	sub	r2,r2,r3
 1014b2c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1014b30:	e0bff817 	ldw	r2,-32(fp)
 1014b34:	1005003a 	cmpeq	r2,r2,zero
 1014b38:	10001f1e 	bne	r2,zero,1014bb8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 1014b3c:	e0fffd17 	ldw	r3,-12(fp)
 1014b40:	e0bff817 	ldw	r2,-32(fp)
 1014b44:	1880022e 	bgeu	r3,r2,1014b50 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 1014b48:	e0bffd17 	ldw	r2,-12(fp)
 1014b4c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1014b50:	e0bffb17 	ldw	r2,-20(fp)
 1014b54:	10c20e04 	addi	r3,r2,2104
 1014b58:	e0bffa17 	ldw	r2,-24(fp)
 1014b5c:	1885883a 	add	r2,r3,r2
 1014b60:	e0fffc17 	ldw	r3,-16(fp)
 1014b64:	1009883a 	mov	r4,r2
 1014b68:	180b883a 	mov	r5,r3
 1014b6c:	e1bff817 	ldw	r6,-32(fp)
 1014b70:	10073e40 	call	10073e4 <memcpy>
      ptr   += n;
 1014b74:	e0fff817 	ldw	r3,-32(fp)
 1014b78:	e0bffc17 	ldw	r2,-16(fp)
 1014b7c:	10c5883a 	add	r2,r2,r3
 1014b80:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1014b84:	e0fffd17 	ldw	r3,-12(fp)
 1014b88:	e0bff817 	ldw	r2,-32(fp)
 1014b8c:	1885c83a 	sub	r2,r3,r2
 1014b90:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1014b94:	e0fffa17 	ldw	r3,-24(fp)
 1014b98:	e0bff817 	ldw	r2,-32(fp)
 1014b9c:	1885883a 	add	r2,r3,r2
 1014ba0:	10c1ffcc 	andi	r3,r2,2047
 1014ba4:	e0bffb17 	ldw	r2,-20(fp)
 1014ba8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1014bac:	e0bffd17 	ldw	r2,-12(fp)
 1014bb0:	10800048 	cmpgei	r2,r2,1
 1014bb4:	103fc31e 	bne	r2,zero,1014ac4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014bb8:	0005303a 	rdctl	r2,status
 1014bbc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014bc0:	e0fff517 	ldw	r3,-44(fp)
 1014bc4:	00bfff84 	movi	r2,-2
 1014bc8:	1884703a 	and	r2,r3,r2
 1014bcc:	1001703a 	wrctl	status,r2
  
  return context;
 1014bd0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1014bd4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1014bd8:	e0bffb17 	ldw	r2,-20(fp)
 1014bdc:	10800817 	ldw	r2,32(r2)
 1014be0:	10c00094 	ori	r3,r2,2
 1014be4:	e0bffb17 	ldw	r2,-20(fp)
 1014be8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1014bec:	e0bffb17 	ldw	r2,-20(fp)
 1014bf0:	10800017 	ldw	r2,0(r2)
 1014bf4:	11000104 	addi	r4,r2,4
 1014bf8:	e0bffb17 	ldw	r2,-20(fp)
 1014bfc:	10800817 	ldw	r2,32(r2)
 1014c00:	1007883a 	mov	r3,r2
 1014c04:	2005883a 	mov	r2,r4
 1014c08:	10c00035 	stwio	r3,0(r2)
 1014c0c:	e0bff717 	ldw	r2,-36(fp)
 1014c10:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014c14:	e0bff417 	ldw	r2,-48(fp)
 1014c18:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1014c1c:	e0bffd17 	ldw	r2,-12(fp)
 1014c20:	10800050 	cmplti	r2,r2,1
 1014c24:	1000111e 	bne	r2,zero,1014c6c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 1014c28:	e0bffe17 	ldw	r2,-8(fp)
 1014c2c:	1090000c 	andi	r2,r2,16384
 1014c30:	1004c03a 	cmpne	r2,r2,zero
 1014c34:	1000101e 	bne	r2,zero,1014c78 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1014c38:	e0bffb17 	ldw	r2,-20(fp)
 1014c3c:	10c00d17 	ldw	r3,52(r2)
 1014c40:	e0bff917 	ldw	r2,-28(fp)
 1014c44:	1880051e 	bne	r3,r2,1014c5c <altera_avalon_jtag_uart_write+0x1c8>
 1014c48:	e0bffb17 	ldw	r2,-20(fp)
 1014c4c:	10c00917 	ldw	r3,36(r2)
 1014c50:	e0bffb17 	ldw	r2,-20(fp)
 1014c54:	10800117 	ldw	r2,4(r2)
 1014c58:	18bff736 	bltu	r3,r2,1014c38 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 1014c5c:	e0bffb17 	ldw	r2,-20(fp)
 1014c60:	10c00d17 	ldw	r3,52(r2)
 1014c64:	e0bff917 	ldw	r2,-28(fp)
 1014c68:	18800326 	beq	r3,r2,1014c78 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 1014c6c:	e0bffd17 	ldw	r2,-12(fp)
 1014c70:	10800048 	cmpgei	r2,r2,1
 1014c74:	103fcd1e 	bne	r2,zero,1014bac <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1014c78:	e0fffc17 	ldw	r3,-16(fp)
 1014c7c:	e0bff617 	ldw	r2,-40(fp)
 1014c80:	18800526 	beq	r3,r2,1014c98 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 1014c84:	e0fffc17 	ldw	r3,-16(fp)
 1014c88:	e0bff617 	ldw	r2,-40(fp)
 1014c8c:	1887c83a 	sub	r3,r3,r2
 1014c90:	e0ffff15 	stw	r3,-4(fp)
 1014c94:	00000906 	br	1014cbc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 1014c98:	e0bffe17 	ldw	r2,-8(fp)
 1014c9c:	1090000c 	andi	r2,r2,16384
 1014ca0:	1005003a 	cmpeq	r2,r2,zero
 1014ca4:	1000031e 	bne	r2,zero,1014cb4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 1014ca8:	00bffd44 	movi	r2,-11
 1014cac:	e0bfff15 	stw	r2,-4(fp)
 1014cb0:	00000206 	br	1014cbc <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1014cb4:	00bffec4 	movi	r2,-5
 1014cb8:	e0bfff15 	stw	r2,-4(fp)
 1014cbc:	e0bfff17 	ldw	r2,-4(fp)
}
 1014cc0:	e037883a 	mov	sp,fp
 1014cc4:	dfc00117 	ldw	ra,4(sp)
 1014cc8:	df000017 	ldw	fp,0(sp)
 1014ccc:	dec00204 	addi	sp,sp,8
 1014cd0:	f800283a 	ret

01014cd4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1014cd4:	defff904 	addi	sp,sp,-28
 1014cd8:	dfc00615 	stw	ra,24(sp)
 1014cdc:	df000515 	stw	fp,20(sp)
 1014ce0:	df000504 	addi	fp,sp,20
 1014ce4:	e13ffe15 	stw	r4,-8(fp)
 1014ce8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1014cec:	e0bffe17 	ldw	r2,-8(fp)
 1014cf0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1014cf4:	e0bffe17 	ldw	r2,-8(fp)
 1014cf8:	10800104 	addi	r2,r2,4
 1014cfc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014d00:	0005303a 	rdctl	r2,status
 1014d04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014d08:	e0fffc17 	ldw	r3,-16(fp)
 1014d0c:	00bfff84 	movi	r2,-2
 1014d10:	1884703a 	and	r2,r3,r2
 1014d14:	1001703a 	wrctl	status,r2
  
  return context;
 1014d18:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 1014d1c:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 1014d20:	10161280 	call	1016128 <alt_tick>
 1014d24:	e0bffd17 	ldw	r2,-12(fp)
 1014d28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014d2c:	e0bffb17 	ldw	r2,-20(fp)
 1014d30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1014d34:	e037883a 	mov	sp,fp
 1014d38:	dfc00117 	ldw	ra,4(sp)
 1014d3c:	df000017 	ldw	fp,0(sp)
 1014d40:	dec00204 	addi	sp,sp,8
 1014d44:	f800283a 	ret

01014d48 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1014d48:	defff904 	addi	sp,sp,-28
 1014d4c:	dfc00615 	stw	ra,24(sp)
 1014d50:	df000515 	stw	fp,20(sp)
 1014d54:	df000504 	addi	fp,sp,20
 1014d58:	e13ffc15 	stw	r4,-16(fp)
 1014d5c:	e17ffd15 	stw	r5,-12(fp)
 1014d60:	e1bffe15 	stw	r6,-8(fp)
 1014d64:	e1ffff15 	stw	r7,-4(fp)
 1014d68:	e0bfff17 	ldw	r2,-4(fp)
 1014d6c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1014d70:	008040b4 	movhi	r2,258
 1014d74:	10afe304 	addi	r2,r2,-16500
 1014d78:	10800017 	ldw	r2,0(r2)
 1014d7c:	1004c03a 	cmpne	r2,r2,zero
 1014d80:	1000041e 	bne	r2,zero,1014d94 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 1014d84:	00c040b4 	movhi	r3,258
 1014d88:	18efe304 	addi	r3,r3,-16500
 1014d8c:	e0bffb17 	ldw	r2,-20(fp)
 1014d90:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1014d94:	e0bffc17 	ldw	r2,-16(fp)
 1014d98:	10800104 	addi	r2,r2,4
 1014d9c:	1007883a 	mov	r3,r2
 1014da0:	008001c4 	movi	r2,7
 1014da4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 1014da8:	e13ffe17 	ldw	r4,-8(fp)
 1014dac:	e17ffc17 	ldw	r5,-16(fp)
 1014db0:	01804074 	movhi	r6,257
 1014db4:	31933504 	addi	r6,r6,19668
 1014db8:	1015c0c0 	call	1015c0c <alt_irq_register>
#endif  
}
 1014dbc:	e037883a 	mov	sp,fp
 1014dc0:	dfc00117 	ldw	ra,4(sp)
 1014dc4:	df000017 	ldw	fp,0(sp)
 1014dc8:	dec00204 	addi	sp,sp,8
 1014dcc:	f800283a 	ret

01014dd0 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 1014dd0:	defffc04 	addi	sp,sp,-16
 1014dd4:	df000315 	stw	fp,12(sp)
 1014dd8:	df000304 	addi	fp,sp,12
 1014ddc:	e13ffe15 	stw	r4,-8(fp)
 1014de0:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 1014de4:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 1014de8:	e0bfff17 	ldw	r2,-4(fp)
 1014dec:	1004c03a 	cmpne	r2,r2,zero
 1014df0:	1000061e 	bne	r2,zero,1014e0c <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 1014df4:	e0bffe17 	ldw	r2,-8(fp)
 1014df8:	1007883a 	mov	r3,r2
 1014dfc:	e0bffd03 	ldbu	r2,-12(fp)
 1014e00:	10c4b03a 	or	r2,r2,r3
 1014e04:	e0bffd05 	stb	r2,-12(fp)
 1014e08:	00000806 	br	1014e2c <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 1014e0c:	e0bffe17 	ldw	r2,-8(fp)
 1014e10:	1007883a 	mov	r3,r2
 1014e14:	e0bffd03 	ldbu	r2,-12(fp)
 1014e18:	10c4b03a 	or	r2,r2,r3
 1014e1c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 1014e20:	e0bffd03 	ldbu	r2,-12(fp)
 1014e24:	10801014 	ori	r2,r2,64
 1014e28:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 1014e2c:	e0fffd03 	ldbu	r3,-12(fp)
 1014e30:	00bfe004 	movi	r2,-128
 1014e34:	1884b03a 	or	r2,r3,r2
 1014e38:	10803fcc 	andi	r2,r2,255
}
 1014e3c:	e037883a 	mov	sp,fp
 1014e40:	df000017 	ldw	fp,0(sp)
 1014e44:	dec00104 	addi	sp,sp,4
 1014e48:	f800283a 	ret

01014e4c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 1014e4c:	defffd04 	addi	sp,sp,-12
 1014e50:	df000215 	stw	fp,8(sp)
 1014e54:	df000204 	addi	fp,sp,8
 1014e58:	e13ffe15 	stw	r4,-8(fp)
 1014e5c:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 1014e60:	e0bffe17 	ldw	r2,-8(fp)
 1014e64:	10800a17 	ldw	r2,40(r2)
 1014e68:	e0ffff03 	ldbu	r3,-4(fp)
 1014e6c:	10c00025 	stbio	r3,0(r2)
}
 1014e70:	e037883a 	mov	sp,fp
 1014e74:	df000017 	ldw	fp,0(sp)
 1014e78:	dec00104 	addi	sp,sp,4
 1014e7c:	f800283a 	ret

01014e80 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 1014e80:	defffe04 	addi	sp,sp,-8
 1014e84:	df000115 	stw	fp,4(sp)
 1014e88:	df000104 	addi	fp,sp,4
 1014e8c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 1014e90:	e0bfff17 	ldw	r2,-4(fp)
 1014e94:	10800a17 	ldw	r2,40(r2)
 1014e98:	1007883a 	mov	r3,r2
 1014e9c:	00800044 	movi	r2,1
 1014ea0:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 1014ea4:	e037883a 	mov	sp,fp
 1014ea8:	df000017 	ldw	fp,0(sp)
 1014eac:	dec00104 	addi	sp,sp,4
 1014eb0:	f800283a 	ret

01014eb4 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 1014eb4:	defffc04 	addi	sp,sp,-16
 1014eb8:	dfc00315 	stw	ra,12(sp)
 1014ebc:	df000215 	stw	fp,8(sp)
 1014ec0:	df000204 	addi	fp,sp,8
 1014ec4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 1014ec8:	e13fff17 	ldw	r4,-4(fp)
 1014ecc:	014040b4 	movhi	r5,258
 1014ed0:	29690004 	addi	r5,r5,-23552
 1014ed4:	1015a0c0 	call	1015a0c <alt_find_dev>
 1014ed8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1014edc:	e0bffe17 	ldw	r2,-8(fp)
}
 1014ee0:	e037883a 	mov	sp,fp
 1014ee4:	dfc00117 	ldw	ra,4(sp)
 1014ee8:	df000017 	ldw	fp,0(sp)
 1014eec:	dec00204 	addi	sp,sp,8
 1014ef0:	f800283a 	ret

01014ef4 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 1014ef4:	defffb04 	addi	sp,sp,-20
 1014ef8:	df000415 	stw	fp,16(sp)
 1014efc:	df000404 	addi	fp,sp,16
 1014f00:	e13ffd15 	stw	r4,-12(fp)
 1014f04:	e17ffe15 	stw	r5,-8(fp)
 1014f08:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 1014f0c:	e03ffc15 	stw	zero,-16(fp)
 1014f10:	00000f06 	br	1014f50 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 1014f14:	e0bffd17 	ldw	r2,-12(fp)
 1014f18:	10800a17 	ldw	r2,40(r2)
 1014f1c:	11000044 	addi	r4,r2,1
 1014f20:	e0fffc17 	ldw	r3,-16(fp)
 1014f24:	e0bffe17 	ldw	r2,-8(fp)
 1014f28:	1885883a 	add	r2,r3,r2
 1014f2c:	10800003 	ldbu	r2,0(r2)
 1014f30:	10c03fcc 	andi	r3,r2,255
 1014f34:	18c0201c 	xori	r3,r3,128
 1014f38:	18ffe004 	addi	r3,r3,-128
 1014f3c:	2005883a 	mov	r2,r4
 1014f40:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 1014f44:	e0bffc17 	ldw	r2,-16(fp)
 1014f48:	10800044 	addi	r2,r2,1
 1014f4c:	e0bffc15 	stw	r2,-16(fp)
 1014f50:	e0fffc17 	ldw	r3,-16(fp)
 1014f54:	e0bfff17 	ldw	r2,-4(fp)
 1014f58:	18bfee36 	bltu	r3,r2,1014f14 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 1014f5c:	e037883a 	mov	sp,fp
 1014f60:	df000017 	ldw	fp,0(sp)
 1014f64:	dec00104 	addi	sp,sp,4
 1014f68:	f800283a 	ret

01014f6c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 1014f6c:	defffd04 	addi	sp,sp,-12
 1014f70:	df000215 	stw	fp,8(sp)
 1014f74:	df000204 	addi	fp,sp,8
 1014f78:	e13ffe15 	stw	r4,-8(fp)
 1014f7c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 1014f80:	00000d06 	br	1014fb8 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 1014f84:	e0bffe17 	ldw	r2,-8(fp)
 1014f88:	10800a17 	ldw	r2,40(r2)
 1014f8c:	11000044 	addi	r4,r2,1
 1014f90:	e0bfff17 	ldw	r2,-4(fp)
 1014f94:	10800003 	ldbu	r2,0(r2)
 1014f98:	10c03fcc 	andi	r3,r2,255
 1014f9c:	18c0201c 	xori	r3,r3,128
 1014fa0:	18ffe004 	addi	r3,r3,-128
 1014fa4:	2005883a 	mov	r2,r4
 1014fa8:	10c00025 	stbio	r3,0(r2)
		++ptr;
 1014fac:	e0bfff17 	ldw	r2,-4(fp)
 1014fb0:	10800044 	addi	r2,r2,1
 1014fb4:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 1014fb8:	e0bfff17 	ldw	r2,-4(fp)
 1014fbc:	10800003 	ldbu	r2,0(r2)
 1014fc0:	10803fcc 	andi	r2,r2,255
 1014fc4:	1080201c 	xori	r2,r2,128
 1014fc8:	10bfe004 	addi	r2,r2,-128
 1014fcc:	1004c03a 	cmpne	r2,r2,zero
 1014fd0:	103fec1e 	bne	r2,zero,1014f84 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 1014fd4:	e037883a 	mov	sp,fp
 1014fd8:	df000017 	ldw	fp,0(sp)
 1014fdc:	dec00104 	addi	sp,sp,4
 1014fe0:	f800283a 	ret

01014fe4 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 1014fe4:	defffb04 	addi	sp,sp,-20
 1014fe8:	dfc00415 	stw	ra,16(sp)
 1014fec:	df000315 	stw	fp,12(sp)
 1014ff0:	df000304 	addi	fp,sp,12
 1014ff4:	e13ffd15 	stw	r4,-12(fp)
 1014ff8:	e17ffe15 	stw	r5,-8(fp)
 1014ffc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 1015000:	e0bffd17 	ldw	r2,-12(fp)
 1015004:	10800017 	ldw	r2,0(r2)
 1015008:	1009883a 	mov	r4,r2
 101500c:	e1bfff17 	ldw	r6,-4(fp)
 1015010:	e17ffe17 	ldw	r5,-8(fp)
 1015014:	1014ef40 	call	1014ef4 <alt_up_character_lcd_write>
	return 0;
 1015018:	0005883a 	mov	r2,zero
}
 101501c:	e037883a 	mov	sp,fp
 1015020:	dfc00117 	ldw	ra,4(sp)
 1015024:	df000017 	ldw	fp,0(sp)
 1015028:	dec00204 	addi	sp,sp,8
 101502c:	f800283a 	ret

01015030 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 1015030:	defff904 	addi	sp,sp,-28
 1015034:	dfc00615 	stw	ra,24(sp)
 1015038:	df000515 	stw	fp,20(sp)
 101503c:	df000504 	addi	fp,sp,20
 1015040:	e13ffc15 	stw	r4,-16(fp)
 1015044:	e17ffd15 	stw	r5,-12(fp)
 1015048:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 101504c:	e0bffd17 	ldw	r2,-12(fp)
 1015050:	10800a28 	cmpgeui	r2,r2,40
 1015054:	1000031e 	bne	r2,zero,1015064 <alt_up_character_lcd_set_cursor_pos+0x34>
 1015058:	e0bffe17 	ldw	r2,-8(fp)
 101505c:	108000b0 	cmpltui	r2,r2,2
 1015060:	1000031e 	bne	r2,zero,1015070 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 1015064:	00bfffc4 	movi	r2,-1
 1015068:	e0bfff15 	stw	r2,-4(fp)
 101506c:	00000806 	br	1015090 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1015070:	e13ffd17 	ldw	r4,-12(fp)
 1015074:	e17ffe17 	ldw	r5,-8(fp)
 1015078:	1014dd00 	call	1014dd0 <get_DDRAM_addr>
 101507c:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 1015080:	e17ffb03 	ldbu	r5,-20(fp)
 1015084:	e13ffc17 	ldw	r4,-16(fp)
 1015088:	1014e4c0 	call	1014e4c <alt_up_character_lcd_send_cmd>
	return 0;
 101508c:	e03fff15 	stw	zero,-4(fp)
 1015090:	e0bfff17 	ldw	r2,-4(fp)
}
 1015094:	e037883a 	mov	sp,fp
 1015098:	dfc00117 	ldw	ra,4(sp)
 101509c:	df000017 	ldw	fp,0(sp)
 10150a0:	dec00204 	addi	sp,sp,8
 10150a4:	f800283a 	ret

010150a8 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 10150a8:	defff904 	addi	sp,sp,-28
 10150ac:	dfc00615 	stw	ra,24(sp)
 10150b0:	df000515 	stw	fp,20(sp)
 10150b4:	df000504 	addi	fp,sp,20
 10150b8:	e13ffc15 	stw	r4,-16(fp)
 10150bc:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 10150c0:	e0bffd17 	ldw	r2,-12(fp)
 10150c4:	1005003a 	cmpeq	r2,r2,zero
 10150c8:	10001e1e 	bne	r2,zero,1015144 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 10150cc:	e0bffd17 	ldw	r2,-12(fp)
 10150d0:	10800050 	cmplti	r2,r2,1
 10150d4:	1000031e 	bne	r2,zero,10150e4 <alt_up_character_lcd_shift_cursor+0x3c>
 10150d8:	00800504 	movi	r2,20
 10150dc:	e0bfff05 	stb	r2,-4(fp)
 10150e0:	00000206 	br	10150ec <alt_up_character_lcd_shift_cursor+0x44>
 10150e4:	00c00404 	movi	r3,16
 10150e8:	e0ffff05 	stb	r3,-4(fp)
 10150ec:	e0bfff03 	ldbu	r2,-4(fp)
 10150f0:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 10150f4:	e0fffd17 	ldw	r3,-12(fp)
 10150f8:	e0fffe15 	stw	r3,-8(fp)
 10150fc:	e0fffe17 	ldw	r3,-8(fp)
 1015100:	1804403a 	cmpge	r2,r3,zero
 1015104:	1000031e 	bne	r2,zero,1015114 <alt_up_character_lcd_shift_cursor+0x6c>
 1015108:	e0bffe17 	ldw	r2,-8(fp)
 101510c:	0085c83a 	sub	r2,zero,r2
 1015110:	e0bffe15 	stw	r2,-8(fp)
 1015114:	e0fffe17 	ldw	r3,-8(fp)
 1015118:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 101511c:	00000306 	br	101512c <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1015120:	e17ffb43 	ldbu	r5,-19(fp)
 1015124:	e13ffc17 	ldw	r4,-16(fp)
 1015128:	1014e4c0 	call	1014e4c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 101512c:	e0bffb03 	ldbu	r2,-20(fp)
 1015130:	10bfffc4 	addi	r2,r2,-1
 1015134:	e0bffb05 	stb	r2,-20(fp)
 1015138:	e0bffb03 	ldbu	r2,-20(fp)
 101513c:	10803fd8 	cmpnei	r2,r2,255
 1015140:	103ff71e 	bne	r2,zero,1015120 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1015144:	e037883a 	mov	sp,fp
 1015148:	dfc00117 	ldw	ra,4(sp)
 101514c:	df000017 	ldw	fp,0(sp)
 1015150:	dec00204 	addi	sp,sp,8
 1015154:	f800283a 	ret

01015158 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1015158:	defff904 	addi	sp,sp,-28
 101515c:	dfc00615 	stw	ra,24(sp)
 1015160:	df000515 	stw	fp,20(sp)
 1015164:	df000504 	addi	fp,sp,20
 1015168:	e13ffc15 	stw	r4,-16(fp)
 101516c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1015170:	e0bffd17 	ldw	r2,-12(fp)
 1015174:	1005003a 	cmpeq	r2,r2,zero
 1015178:	10001e1e 	bne	r2,zero,10151f4 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 101517c:	e0bffd17 	ldw	r2,-12(fp)
 1015180:	10800050 	cmplti	r2,r2,1
 1015184:	1000031e 	bne	r2,zero,1015194 <alt_up_character_lcd_shift_display+0x3c>
 1015188:	00800704 	movi	r2,28
 101518c:	e0bfff05 	stb	r2,-4(fp)
 1015190:	00000206 	br	101519c <alt_up_character_lcd_shift_display+0x44>
 1015194:	00c00604 	movi	r3,24
 1015198:	e0ffff05 	stb	r3,-4(fp)
 101519c:	e0bfff03 	ldbu	r2,-4(fp)
 10151a0:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 10151a4:	e0fffd17 	ldw	r3,-12(fp)
 10151a8:	e0fffe15 	stw	r3,-8(fp)
 10151ac:	e0fffe17 	ldw	r3,-8(fp)
 10151b0:	1804403a 	cmpge	r2,r3,zero
 10151b4:	1000031e 	bne	r2,zero,10151c4 <alt_up_character_lcd_shift_display+0x6c>
 10151b8:	e0bffe17 	ldw	r2,-8(fp)
 10151bc:	0085c83a 	sub	r2,zero,r2
 10151c0:	e0bffe15 	stw	r2,-8(fp)
 10151c4:	e0fffe17 	ldw	r3,-8(fp)
 10151c8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 10151cc:	00000306 	br	10151dc <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 10151d0:	e17ffb43 	ldbu	r5,-19(fp)
 10151d4:	e13ffc17 	ldw	r4,-16(fp)
 10151d8:	1014e4c0 	call	1014e4c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 10151dc:	e0bffb03 	ldbu	r2,-20(fp)
 10151e0:	10bfffc4 	addi	r2,r2,-1
 10151e4:	e0bffb05 	stb	r2,-20(fp)
 10151e8:	e0bffb03 	ldbu	r2,-20(fp)
 10151ec:	10803fd8 	cmpnei	r2,r2,255
 10151f0:	103ff71e 	bne	r2,zero,10151d0 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 10151f4:	e037883a 	mov	sp,fp
 10151f8:	dfc00117 	ldw	ra,4(sp)
 10151fc:	df000017 	ldw	fp,0(sp)
 1015200:	dec00204 	addi	sp,sp,8
 1015204:	f800283a 	ret

01015208 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 1015208:	defff904 	addi	sp,sp,-28
 101520c:	dfc00615 	stw	ra,24(sp)
 1015210:	df000515 	stw	fp,20(sp)
 1015214:	df000504 	addi	fp,sp,20
 1015218:	e13ffc15 	stw	r4,-16(fp)
 101521c:	e17ffd15 	stw	r5,-12(fp)
 1015220:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 1015224:	e0bffd17 	ldw	r2,-12(fp)
 1015228:	10800a28 	cmpgeui	r2,r2,40
 101522c:	1000031e 	bne	r2,zero,101523c <alt_up_character_lcd_erase_pos+0x34>
 1015230:	e0bffe17 	ldw	r2,-8(fp)
 1015234:	108000b0 	cmpltui	r2,r2,2
 1015238:	1000031e 	bne	r2,zero,1015248 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 101523c:	00bfffc4 	movi	r2,-1
 1015240:	e0bfff15 	stw	r2,-4(fp)
 1015244:	00000e06 	br	1015280 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1015248:	e13ffd17 	ldw	r4,-12(fp)
 101524c:	e17ffe17 	ldw	r5,-8(fp)
 1015250:	1014dd00 	call	1014dd0 <get_DDRAM_addr>
 1015254:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 1015258:	e17ffb03 	ldbu	r5,-20(fp)
 101525c:	e13ffc17 	ldw	r4,-16(fp)
 1015260:	1014e4c0 	call	1014e4c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 1015264:	e0bffc17 	ldw	r2,-16(fp)
 1015268:	10800a17 	ldw	r2,40(r2)
 101526c:	10800044 	addi	r2,r2,1
 1015270:	1007883a 	mov	r3,r2
 1015274:	00800084 	movi	r2,2
 1015278:	18800025 	stbio	r2,0(r3)
	return 0;
 101527c:	e03fff15 	stw	zero,-4(fp)
 1015280:	e0bfff17 	ldw	r2,-4(fp)
}
 1015284:	e037883a 	mov	sp,fp
 1015288:	dfc00117 	ldw	ra,4(sp)
 101528c:	df000017 	ldw	fp,0(sp)
 1015290:	dec00204 	addi	sp,sp,8
 1015294:	f800283a 	ret

01015298 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 1015298:	defffd04 	addi	sp,sp,-12
 101529c:	dfc00215 	stw	ra,8(sp)
 10152a0:	df000115 	stw	fp,4(sp)
 10152a4:	df000104 	addi	fp,sp,4
 10152a8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 10152ac:	e13fff17 	ldw	r4,-4(fp)
 10152b0:	01400304 	movi	r5,12
 10152b4:	1014e4c0 	call	1014e4c <alt_up_character_lcd_send_cmd>
}
 10152b8:	e037883a 	mov	sp,fp
 10152bc:	dfc00117 	ldw	ra,4(sp)
 10152c0:	df000017 	ldw	fp,0(sp)
 10152c4:	dec00204 	addi	sp,sp,8
 10152c8:	f800283a 	ret

010152cc <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 10152cc:	defffd04 	addi	sp,sp,-12
 10152d0:	dfc00215 	stw	ra,8(sp)
 10152d4:	df000115 	stw	fp,4(sp)
 10152d8:	df000104 	addi	fp,sp,4
 10152dc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 10152e0:	e13fff17 	ldw	r4,-4(fp)
 10152e4:	014003c4 	movi	r5,15
 10152e8:	1014e4c0 	call	1014e4c <alt_up_character_lcd_send_cmd>
}
 10152ec:	e037883a 	mov	sp,fp
 10152f0:	dfc00117 	ldw	ra,4(sp)
 10152f4:	df000017 	ldw	fp,0(sp)
 10152f8:	dec00204 	addi	sp,sp,8
 10152fc:	f800283a 	ret

01015300 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 1015300:	defffd04 	addi	sp,sp,-12
 1015304:	df000215 	stw	fp,8(sp)
 1015308:	df000204 	addi	fp,sp,8
 101530c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1015310:	e0bfff17 	ldw	r2,-4(fp)
 1015314:	10800a17 	ldw	r2,40(r2)
 1015318:	10800104 	addi	r2,r2,4
 101531c:	10800037 	ldwio	r2,0(r2)
 1015320:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 1015324:	e0bffe17 	ldw	r2,-8(fp)
 1015328:	10800054 	ori	r2,r2,1
 101532c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1015330:	e0bfff17 	ldw	r2,-4(fp)
 1015334:	10800a17 	ldw	r2,40(r2)
 1015338:	10800104 	addi	r2,r2,4
 101533c:	e0fffe17 	ldw	r3,-8(fp)
 1015340:	10c00035 	stwio	r3,0(r2)
}
 1015344:	e037883a 	mov	sp,fp
 1015348:	df000017 	ldw	fp,0(sp)
 101534c:	dec00104 	addi	sp,sp,4
 1015350:	f800283a 	ret

01015354 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 1015354:	defffd04 	addi	sp,sp,-12
 1015358:	df000215 	stw	fp,8(sp)
 101535c:	df000204 	addi	fp,sp,8
 1015360:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1015364:	e0bfff17 	ldw	r2,-4(fp)
 1015368:	10800a17 	ldw	r2,40(r2)
 101536c:	10800104 	addi	r2,r2,4
 1015370:	10800037 	ldwio	r2,0(r2)
 1015374:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 1015378:	e0fffe17 	ldw	r3,-8(fp)
 101537c:	00bfff84 	movi	r2,-2
 1015380:	1884703a 	and	r2,r3,r2
 1015384:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1015388:	e0bfff17 	ldw	r2,-4(fp)
 101538c:	10800a17 	ldw	r2,40(r2)
 1015390:	10800104 	addi	r2,r2,4
 1015394:	e0fffe17 	ldw	r3,-8(fp)
 1015398:	10c00035 	stwio	r3,0(r2)
}
 101539c:	e037883a 	mov	sp,fp
 10153a0:	df000017 	ldw	fp,0(sp)
 10153a4:	dec00104 	addi	sp,sp,4
 10153a8:	f800283a 	ret

010153ac <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 10153ac:	defffd04 	addi	sp,sp,-12
 10153b0:	df000215 	stw	fp,8(sp)
 10153b4:	df000204 	addi	fp,sp,8
 10153b8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 10153bc:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 10153c0:	e0bfff17 	ldw	r2,-4(fp)
 10153c4:	10800a17 	ldw	r2,40(r2)
 10153c8:	10800084 	addi	r2,r2,2
 10153cc:	1080002b 	ldhuio	r2,0(r2)
 10153d0:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 10153d4:	e0bffe0b 	ldhu	r2,-8(fp)
}
 10153d8:	e037883a 	mov	sp,fp
 10153dc:	df000017 	ldw	fp,0(sp)
 10153e0:	dec00104 	addi	sp,sp,4
 10153e4:	f800283a 	ret

010153e8 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 10153e8:	defffd04 	addi	sp,sp,-12
 10153ec:	df000215 	stw	fp,8(sp)
 10153f0:	df000204 	addi	fp,sp,8
 10153f4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 10153f8:	e0bfff17 	ldw	r2,-4(fp)
 10153fc:	10800a17 	ldw	r2,40(r2)
 1015400:	10800104 	addi	r2,r2,4
 1015404:	10800037 	ldwio	r2,0(r2)
 1015408:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 101540c:	e0bffe17 	ldw	r2,-8(fp)
 1015410:	10bfffec 	andhi	r2,r2,65535
 1015414:	1004d43a 	srli	r2,r2,16
}
 1015418:	e037883a 	mov	sp,fp
 101541c:	df000017 	ldw	fp,0(sp)
 1015420:	dec00104 	addi	sp,sp,4
 1015424:	f800283a 	ret

01015428 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 1015428:	defffc04 	addi	sp,sp,-16
 101542c:	df000315 	stw	fp,12(sp)
 1015430:	df000304 	addi	fp,sp,12
 1015434:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 1015438:	e0bffe17 	ldw	r2,-8(fp)
 101543c:	1080800c 	andi	r2,r2,512
 1015440:	1004d27a 	srli	r2,r2,9
 1015444:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
 1015448:	e0bffd17 	ldw	r2,-12(fp)
 101544c:	1005003a 	cmpeq	r2,r2,zero
 1015450:	1000031e 	bne	r2,zero,1015460 <alt_up_rs232_check_parity+0x38>
 1015454:	00bfffc4 	movi	r2,-1
 1015458:	e0bfff15 	stw	r2,-4(fp)
 101545c:	00000106 	br	1015464 <alt_up_rs232_check_parity+0x3c>
 1015460:	e03fff15 	stw	zero,-4(fp)
 1015464:	e0bfff17 	ldw	r2,-4(fp)
}
 1015468:	e037883a 	mov	sp,fp
 101546c:	df000017 	ldw	fp,0(sp)
 1015470:	dec00104 	addi	sp,sp,4
 1015474:	f800283a 	ret

01015478 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 1015478:	defffc04 	addi	sp,sp,-16
 101547c:	df000315 	stw	fp,12(sp)
 1015480:	df000304 	addi	fp,sp,12
 1015484:	e13ffe15 	stw	r4,-8(fp)
 1015488:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 101548c:	e0bffe17 	ldw	r2,-8(fp)
 1015490:	10800a17 	ldw	r2,40(r2)
 1015494:	10800037 	ldwio	r2,0(r2)
 1015498:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 101549c:	e0bffe17 	ldw	r2,-8(fp)
 10154a0:	10800a17 	ldw	r2,40(r2)
 10154a4:	e0ffff03 	ldbu	r3,-4(fp)
 10154a8:	10c00035 	stwio	r3,0(r2)
	return 0;
 10154ac:	0005883a 	mov	r2,zero
}
 10154b0:	e037883a 	mov	sp,fp
 10154b4:	df000017 	ldw	fp,0(sp)
 10154b8:	dec00104 	addi	sp,sp,4
 10154bc:	f800283a 	ret

010154c0 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 10154c0:	defffa04 	addi	sp,sp,-24
 10154c4:	dfc00515 	stw	ra,20(sp)
 10154c8:	df000415 	stw	fp,16(sp)
 10154cc:	df000404 	addi	fp,sp,16
 10154d0:	e13ffd15 	stw	r4,-12(fp)
 10154d4:	e17ffe15 	stw	r5,-8(fp)
 10154d8:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 10154dc:	e0bffd17 	ldw	r2,-12(fp)
 10154e0:	10800a17 	ldw	r2,40(r2)
 10154e4:	10800037 	ldwio	r2,0(r2)
 10154e8:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 10154ec:	e0bffc17 	ldw	r2,-16(fp)
 10154f0:	1007883a 	mov	r3,r2
 10154f4:	e0bffe17 	ldw	r2,-8(fp)
 10154f8:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 10154fc:	e13ffc17 	ldw	r4,-16(fp)
 1015500:	10154280 	call	1015428 <alt_up_rs232_check_parity>
 1015504:	1007883a 	mov	r3,r2
 1015508:	e0bfff17 	ldw	r2,-4(fp)
 101550c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 1015510:	e0bffc17 	ldw	r2,-16(fp)
 1015514:	10a0000c 	andi	r2,r2,32768
 1015518:	1004d3fa 	srli	r2,r2,15
 101551c:	10bfffc4 	addi	r2,r2,-1
}
 1015520:	e037883a 	mov	sp,fp
 1015524:	dfc00117 	ldw	ra,4(sp)
 1015528:	df000017 	ldw	fp,0(sp)
 101552c:	dec00204 	addi	sp,sp,8
 1015530:	f800283a 	ret

01015534 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 1015534:	defff804 	addi	sp,sp,-32
 1015538:	dfc00715 	stw	ra,28(sp)
 101553c:	df000615 	stw	fp,24(sp)
 1015540:	df000604 	addi	fp,sp,24
 1015544:	e13ffd15 	stw	r4,-12(fp)
 1015548:	e17ffe15 	stw	r5,-8(fp)
 101554c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 1015550:	e0bffd17 	ldw	r2,-12(fp)
 1015554:	10800017 	ldw	r2,0(r2)
 1015558:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 101555c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 1015560:	00000c06 	br	1015594 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
 1015564:	e17ffe17 	ldw	r5,-8(fp)
 1015568:	e0bffe17 	ldw	r2,-8(fp)
 101556c:	10800044 	addi	r2,r2,1
 1015570:	e0bffe15 	stw	r2,-8(fp)
 1015574:	e1bffc04 	addi	r6,fp,-16
 1015578:	e13ffb17 	ldw	r4,-20(fp)
 101557c:	10154c00 	call	10154c0 <alt_up_rs232_read_data>
 1015580:	1004c03a 	cmpne	r2,r2,zero
 1015584:	1000091e 	bne	r2,zero,10155ac <alt_up_rs232_read_fd+0x78>
			count++;
 1015588:	e0bffa17 	ldw	r2,-24(fp)
 101558c:	10800044 	addi	r2,r2,1
 1015590:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 1015594:	e0bfff17 	ldw	r2,-4(fp)
 1015598:	10bfffc4 	addi	r2,r2,-1
 101559c:	e0bfff15 	stw	r2,-4(fp)
 10155a0:	e0bfff17 	ldw	r2,-4(fp)
 10155a4:	10bfffd8 	cmpnei	r2,r2,-1
 10155a8:	103fee1e 	bne	r2,zero,1015564 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 10155ac:	e0bffa17 	ldw	r2,-24(fp)
}
 10155b0:	e037883a 	mov	sp,fp
 10155b4:	dfc00117 	ldw	ra,4(sp)
 10155b8:	df000017 	ldw	fp,0(sp)
 10155bc:	dec00204 	addi	sp,sp,8
 10155c0:	f800283a 	ret

010155c4 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 10155c4:	defff904 	addi	sp,sp,-28
 10155c8:	dfc00615 	stw	ra,24(sp)
 10155cc:	df000515 	stw	fp,20(sp)
 10155d0:	df000504 	addi	fp,sp,20
 10155d4:	e13ffd15 	stw	r4,-12(fp)
 10155d8:	e17ffe15 	stw	r5,-8(fp)
 10155dc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 10155e0:	e0bffd17 	ldw	r2,-12(fp)
 10155e4:	10800017 	ldw	r2,0(r2)
 10155e8:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 10155ec:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 10155f0:	00000d06 	br	1015628 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 10155f4:	e0bffe17 	ldw	r2,-8(fp)
 10155f8:	10800003 	ldbu	r2,0(r2)
 10155fc:	11403fcc 	andi	r5,r2,255
 1015600:	e13ffc17 	ldw	r4,-16(fp)
 1015604:	10154780 	call	1015478 <alt_up_rs232_write_data>
 1015608:	1004c03a 	cmpne	r2,r2,zero
 101560c:	10000c1e 	bne	r2,zero,1015640 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
 1015610:	e0bffb17 	ldw	r2,-20(fp)
 1015614:	10800044 	addi	r2,r2,1
 1015618:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 101561c:	e0bffe17 	ldw	r2,-8(fp)
 1015620:	10800044 	addi	r2,r2,1
 1015624:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 1015628:	e0bfff17 	ldw	r2,-4(fp)
 101562c:	10bfffc4 	addi	r2,r2,-1
 1015630:	e0bfff15 	stw	r2,-4(fp)
 1015634:	e0bfff17 	ldw	r2,-4(fp)
 1015638:	10bfffd8 	cmpnei	r2,r2,-1
 101563c:	103fed1e 	bne	r2,zero,10155f4 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
 1015640:	e0bffb17 	ldw	r2,-20(fp)
}
 1015644:	e037883a 	mov	sp,fp
 1015648:	dfc00117 	ldw	ra,4(sp)
 101564c:	df000017 	ldw	fp,0(sp)
 1015650:	dec00204 	addi	sp,sp,8
 1015654:	f800283a 	ret

01015658 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 1015658:	defffc04 	addi	sp,sp,-16
 101565c:	dfc00315 	stw	ra,12(sp)
 1015660:	df000215 	stw	fp,8(sp)
 1015664:	df000204 	addi	fp,sp,8
 1015668:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 101566c:	e13fff17 	ldw	r4,-4(fp)
 1015670:	014040b4 	movhi	r5,258
 1015674:	29690004 	addi	r5,r5,-23552
 1015678:	1015a0c0 	call	1015a0c <alt_find_dev>
 101567c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1015680:	e0bffe17 	ldw	r2,-8(fp)
}
 1015684:	e037883a 	mov	sp,fp
 1015688:	dfc00117 	ldw	ra,4(sp)
 101568c:	df000017 	ldw	fp,0(sp)
 1015690:	dec00204 	addi	sp,sp,8
 1015694:	f800283a 	ret

01015698 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1015698:	defff404 	addi	sp,sp,-48
 101569c:	df000b15 	stw	fp,44(sp)
 10156a0:	df000b04 	addi	fp,sp,44
 10156a4:	e13ffb15 	stw	r4,-20(fp)
 10156a8:	e17ffc15 	stw	r5,-16(fp)
 10156ac:	e1bffd15 	stw	r6,-12(fp)
 10156b0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 10156b4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 10156b8:	008040b4 	movhi	r2,258
 10156bc:	10afe304 	addi	r2,r2,-16500
 10156c0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 10156c4:	1005003a 	cmpeq	r2,r2,zero
 10156c8:	1000411e 	bne	r2,zero,10157d0 <alt_alarm_start+0x138>
  {
    if (alarm)
 10156cc:	e0bffb17 	ldw	r2,-20(fp)
 10156d0:	1005003a 	cmpeq	r2,r2,zero
 10156d4:	10003b1e 	bne	r2,zero,10157c4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 10156d8:	e0fffb17 	ldw	r3,-20(fp)
 10156dc:	e0bffd17 	ldw	r2,-12(fp)
 10156e0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 10156e4:	e0fffb17 	ldw	r3,-20(fp)
 10156e8:	e0bffe17 	ldw	r2,-8(fp)
 10156ec:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10156f0:	0005303a 	rdctl	r2,status
 10156f4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10156f8:	e0fff817 	ldw	r3,-32(fp)
 10156fc:	00bfff84 	movi	r2,-2
 1015700:	1884703a 	and	r2,r3,r2
 1015704:	1001703a 	wrctl	status,r2
  
  return context;
 1015708:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 101570c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1015710:	008040b4 	movhi	r2,258
 1015714:	10afe404 	addi	r2,r2,-16496
 1015718:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 101571c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1015720:	e0fffc17 	ldw	r3,-16(fp)
 1015724:	e0bff917 	ldw	r2,-28(fp)
 1015728:	1885883a 	add	r2,r3,r2
 101572c:	10c00044 	addi	r3,r2,1
 1015730:	e0bffb17 	ldw	r2,-20(fp)
 1015734:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1015738:	e0bffb17 	ldw	r2,-20(fp)
 101573c:	10c00217 	ldw	r3,8(r2)
 1015740:	e0bff917 	ldw	r2,-28(fp)
 1015744:	1880042e 	bgeu	r3,r2,1015758 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 1015748:	e0fffb17 	ldw	r3,-20(fp)
 101574c:	00800044 	movi	r2,1
 1015750:	18800405 	stb	r2,16(r3)
 1015754:	00000206 	br	1015760 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 1015758:	e0bffb17 	ldw	r2,-20(fp)
 101575c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1015760:	e0fffb17 	ldw	r3,-20(fp)
 1015764:	008040b4 	movhi	r2,258
 1015768:	10a90604 	addi	r2,r2,-23528
 101576c:	e0bff615 	stw	r2,-40(fp)
 1015770:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1015774:	e0fff717 	ldw	r3,-36(fp)
 1015778:	e0bff617 	ldw	r2,-40(fp)
 101577c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1015780:	e0bff617 	ldw	r2,-40(fp)
 1015784:	10c00017 	ldw	r3,0(r2)
 1015788:	e0bff717 	ldw	r2,-36(fp)
 101578c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1015790:	e0bff617 	ldw	r2,-40(fp)
 1015794:	10c00017 	ldw	r3,0(r2)
 1015798:	e0bff717 	ldw	r2,-36(fp)
 101579c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 10157a0:	e0fff617 	ldw	r3,-40(fp)
 10157a4:	e0bff717 	ldw	r2,-36(fp)
 10157a8:	18800015 	stw	r2,0(r3)
 10157ac:	e0bffa17 	ldw	r2,-24(fp)
 10157b0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10157b4:	e0bff517 	ldw	r2,-44(fp)
 10157b8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 10157bc:	e03fff15 	stw	zero,-4(fp)
 10157c0:	00000506 	br	10157d8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 10157c4:	00bffa84 	movi	r2,-22
 10157c8:	e0bfff15 	stw	r2,-4(fp)
 10157cc:	00000206 	br	10157d8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 10157d0:	00bfde84 	movi	r2,-134
 10157d4:	e0bfff15 	stw	r2,-4(fp)
 10157d8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 10157dc:	e037883a 	mov	sp,fp
 10157e0:	df000017 	ldw	fp,0(sp)
 10157e4:	dec00104 	addi	sp,sp,4
 10157e8:	f800283a 	ret

010157ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 10157ec:	defffe04 	addi	sp,sp,-8
 10157f0:	df000115 	stw	fp,4(sp)
 10157f4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 10157f8:	e03fff15 	stw	zero,-4(fp)
 10157fc:	00000506 	br	1015814 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 1015800:	e0bfff17 	ldw	r2,-4(fp)
 1015804:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1015808:	e0bfff17 	ldw	r2,-4(fp)
 101580c:	10800804 	addi	r2,r2,32
 1015810:	e0bfff15 	stw	r2,-4(fp)
 1015814:	e0bfff17 	ldw	r2,-4(fp)
 1015818:	10820030 	cmpltui	r2,r2,2048
 101581c:	103ff81e 	bne	r2,zero,1015800 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1015820:	e037883a 	mov	sp,fp
 1015824:	df000017 	ldw	fp,0(sp)
 1015828:	dec00104 	addi	sp,sp,4
 101582c:	f800283a 	ret

01015830 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1015830:	defff904 	addi	sp,sp,-28
 1015834:	dfc00615 	stw	ra,24(sp)
 1015838:	df000515 	stw	fp,20(sp)
 101583c:	df000504 	addi	fp,sp,20
 1015840:	e13ffd15 	stw	r4,-12(fp)
 1015844:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1015848:	e0bffd17 	ldw	r2,-12(fp)
 101584c:	1005003a 	cmpeq	r2,r2,zero
 1015850:	1000041e 	bne	r2,zero,1015864 <alt_dev_llist_insert+0x34>
 1015854:	e0bffd17 	ldw	r2,-12(fp)
 1015858:	10800217 	ldw	r2,8(r2)
 101585c:	1004c03a 	cmpne	r2,r2,zero
 1015860:	1000071e 	bne	r2,zero,1015880 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1015864:	10158e40 	call	10158e4 <alt_get_errno>
 1015868:	1007883a 	mov	r3,r2
 101586c:	00800584 	movi	r2,22
 1015870:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1015874:	00bffa84 	movi	r2,-22
 1015878:	e0bfff15 	stw	r2,-4(fp)
 101587c:	00001306 	br	10158cc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1015880:	e0fffd17 	ldw	r3,-12(fp)
 1015884:	e0bffe17 	ldw	r2,-8(fp)
 1015888:	e0bffb15 	stw	r2,-20(fp)
 101588c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1015890:	e0fffc17 	ldw	r3,-16(fp)
 1015894:	e0bffb17 	ldw	r2,-20(fp)
 1015898:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 101589c:	e0bffb17 	ldw	r2,-20(fp)
 10158a0:	10c00017 	ldw	r3,0(r2)
 10158a4:	e0bffc17 	ldw	r2,-16(fp)
 10158a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10158ac:	e0bffb17 	ldw	r2,-20(fp)
 10158b0:	10c00017 	ldw	r3,0(r2)
 10158b4:	e0bffc17 	ldw	r2,-16(fp)
 10158b8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 10158bc:	e0fffb17 	ldw	r3,-20(fp)
 10158c0:	e0bffc17 	ldw	r2,-16(fp)
 10158c4:	18800015 	stw	r2,0(r3)

  return 0;  
 10158c8:	e03fff15 	stw	zero,-4(fp)
 10158cc:	e0bfff17 	ldw	r2,-4(fp)
}
 10158d0:	e037883a 	mov	sp,fp
 10158d4:	dfc00117 	ldw	ra,4(sp)
 10158d8:	df000017 	ldw	fp,0(sp)
 10158dc:	dec00204 	addi	sp,sp,8
 10158e0:	f800283a 	ret

010158e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10158e4:	defffd04 	addi	sp,sp,-12
 10158e8:	dfc00215 	stw	ra,8(sp)
 10158ec:	df000115 	stw	fp,4(sp)
 10158f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10158f4:	008040b4 	movhi	r2,258
 10158f8:	10a90304 	addi	r2,r2,-23540
 10158fc:	10800017 	ldw	r2,0(r2)
 1015900:	1005003a 	cmpeq	r2,r2,zero
 1015904:	1000061e 	bne	r2,zero,1015920 <alt_get_errno+0x3c>
 1015908:	008040b4 	movhi	r2,258
 101590c:	10a90304 	addi	r2,r2,-23540
 1015910:	10800017 	ldw	r2,0(r2)
 1015914:	103ee83a 	callr	r2
 1015918:	e0bfff15 	stw	r2,-4(fp)
 101591c:	00000306 	br	101592c <alt_get_errno+0x48>
 1015920:	008040b4 	movhi	r2,258
 1015924:	10afd104 	addi	r2,r2,-16572
 1015928:	e0bfff15 	stw	r2,-4(fp)
 101592c:	e0bfff17 	ldw	r2,-4(fp)
}
 1015930:	e037883a 	mov	sp,fp
 1015934:	dfc00117 	ldw	ra,4(sp)
 1015938:	df000017 	ldw	fp,0(sp)
 101593c:	dec00204 	addi	sp,sp,8
 1015940:	f800283a 	ret

01015944 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1015944:	defffd04 	addi	sp,sp,-12
 1015948:	dfc00215 	stw	ra,8(sp)
 101594c:	df000115 	stw	fp,4(sp)
 1015950:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1015954:	00bfff04 	movi	r2,-4
 1015958:	00c040b4 	movhi	r3,258
 101595c:	18e00404 	addi	r3,r3,-32752
 1015960:	1885883a 	add	r2,r3,r2
 1015964:	e0bfff15 	stw	r2,-4(fp)
 1015968:	00000606 	br	1015984 <_do_ctors+0x40>
        (*ctor) (); 
 101596c:	e0bfff17 	ldw	r2,-4(fp)
 1015970:	10800017 	ldw	r2,0(r2)
 1015974:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1015978:	e0bfff17 	ldw	r2,-4(fp)
 101597c:	10bfff04 	addi	r2,r2,-4
 1015980:	e0bfff15 	stw	r2,-4(fp)
 1015984:	e0ffff17 	ldw	r3,-4(fp)
 1015988:	008040b4 	movhi	r2,258
 101598c:	10a00304 	addi	r2,r2,-32756
 1015990:	18bff62e 	bgeu	r3,r2,101596c <_do_ctors+0x28>
        (*ctor) (); 
}
 1015994:	e037883a 	mov	sp,fp
 1015998:	dfc00117 	ldw	ra,4(sp)
 101599c:	df000017 	ldw	fp,0(sp)
 10159a0:	dec00204 	addi	sp,sp,8
 10159a4:	f800283a 	ret

010159a8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 10159a8:	defffd04 	addi	sp,sp,-12
 10159ac:	dfc00215 	stw	ra,8(sp)
 10159b0:	df000115 	stw	fp,4(sp)
 10159b4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 10159b8:	00bfff04 	movi	r2,-4
 10159bc:	00c040b4 	movhi	r3,258
 10159c0:	18e00404 	addi	r3,r3,-32752
 10159c4:	1885883a 	add	r2,r3,r2
 10159c8:	e0bfff15 	stw	r2,-4(fp)
 10159cc:	00000606 	br	10159e8 <_do_dtors+0x40>
        (*dtor) (); 
 10159d0:	e0bfff17 	ldw	r2,-4(fp)
 10159d4:	10800017 	ldw	r2,0(r2)
 10159d8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 10159dc:	e0bfff17 	ldw	r2,-4(fp)
 10159e0:	10bfff04 	addi	r2,r2,-4
 10159e4:	e0bfff15 	stw	r2,-4(fp)
 10159e8:	e0ffff17 	ldw	r3,-4(fp)
 10159ec:	008040b4 	movhi	r2,258
 10159f0:	10a00404 	addi	r2,r2,-32752
 10159f4:	18bff62e 	bgeu	r3,r2,10159d0 <_do_dtors+0x28>
        (*dtor) (); 
}
 10159f8:	e037883a 	mov	sp,fp
 10159fc:	dfc00117 	ldw	ra,4(sp)
 1015a00:	df000017 	ldw	fp,0(sp)
 1015a04:	dec00204 	addi	sp,sp,8
 1015a08:	f800283a 	ret

01015a0c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1015a0c:	defff904 	addi	sp,sp,-28
 1015a10:	dfc00615 	stw	ra,24(sp)
 1015a14:	df000515 	stw	fp,20(sp)
 1015a18:	df000504 	addi	fp,sp,20
 1015a1c:	e13ffd15 	stw	r4,-12(fp)
 1015a20:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1015a24:	e0bffe17 	ldw	r2,-8(fp)
 1015a28:	10800017 	ldw	r2,0(r2)
 1015a2c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1015a30:	e13ffd17 	ldw	r4,-12(fp)
 1015a34:	10006900 	call	1000690 <strlen>
 1015a38:	10800044 	addi	r2,r2,1
 1015a3c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1015a40:	00000d06 	br	1015a78 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1015a44:	e0bffc17 	ldw	r2,-16(fp)
 1015a48:	11000217 	ldw	r4,8(r2)
 1015a4c:	e1bffb17 	ldw	r6,-20(fp)
 1015a50:	e17ffd17 	ldw	r5,-12(fp)
 1015a54:	10165ec0 	call	10165ec <memcmp>
 1015a58:	1004c03a 	cmpne	r2,r2,zero
 1015a5c:	1000031e 	bne	r2,zero,1015a6c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1015a60:	e0bffc17 	ldw	r2,-16(fp)
 1015a64:	e0bfff15 	stw	r2,-4(fp)
 1015a68:	00000706 	br	1015a88 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1015a6c:	e0bffc17 	ldw	r2,-16(fp)
 1015a70:	10800017 	ldw	r2,0(r2)
 1015a74:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1015a78:	e0fffe17 	ldw	r3,-8(fp)
 1015a7c:	e0bffc17 	ldw	r2,-16(fp)
 1015a80:	10fff01e 	bne	r2,r3,1015a44 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1015a84:	e03fff15 	stw	zero,-4(fp)
 1015a88:	e0bfff17 	ldw	r2,-4(fp)
}
 1015a8c:	e037883a 	mov	sp,fp
 1015a90:	dfc00117 	ldw	ra,4(sp)
 1015a94:	df000017 	ldw	fp,0(sp)
 1015a98:	dec00204 	addi	sp,sp,8
 1015a9c:	f800283a 	ret

01015aa0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1015aa0:	defffe04 	addi	sp,sp,-8
 1015aa4:	dfc00115 	stw	ra,4(sp)
 1015aa8:	df000015 	stw	fp,0(sp)
 1015aac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1015ab0:	0009883a 	mov	r4,zero
 1015ab4:	01500004 	movi	r5,16384
 1015ab8:	101642c0 	call	101642c <alt_icache_flush>
#endif
}
 1015abc:	e037883a 	mov	sp,fp
 1015ac0:	dfc00117 	ldw	ra,4(sp)
 1015ac4:	df000017 	ldw	fp,0(sp)
 1015ac8:	dec00204 	addi	sp,sp,8
 1015acc:	f800283a 	ret

01015ad0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1015ad0:	defff904 	addi	sp,sp,-28
 1015ad4:	dfc00615 	stw	ra,24(sp)
 1015ad8:	df000515 	stw	fp,20(sp)
 1015adc:	df000504 	addi	fp,sp,20
 1015ae0:	e13ffc15 	stw	r4,-16(fp)
 1015ae4:	e17ffd15 	stw	r5,-12(fp)
 1015ae8:	e1bffe15 	stw	r6,-8(fp)
 1015aec:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1015af0:	e13ffd17 	ldw	r4,-12(fp)
 1015af4:	e17ffe17 	ldw	r5,-8(fp)
 1015af8:	e1bfff17 	ldw	r6,-4(fp)
 1015afc:	1015ea80 	call	1015ea8 <open>
 1015b00:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1015b04:	e0bffb17 	ldw	r2,-20(fp)
 1015b08:	1004803a 	cmplt	r2,r2,zero
 1015b0c:	10001c1e 	bne	r2,zero,1015b80 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 1015b10:	e0bffb17 	ldw	r2,-20(fp)
 1015b14:	00c040b4 	movhi	r3,258
 1015b18:	18e45e04 	addi	r3,r3,-28296
 1015b1c:	10800324 	muli	r2,r2,12
 1015b20:	10c5883a 	add	r2,r2,r3
 1015b24:	10c00017 	ldw	r3,0(r2)
 1015b28:	e0bffc17 	ldw	r2,-16(fp)
 1015b2c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1015b30:	e0bffb17 	ldw	r2,-20(fp)
 1015b34:	00c040b4 	movhi	r3,258
 1015b38:	18e45e04 	addi	r3,r3,-28296
 1015b3c:	10800324 	muli	r2,r2,12
 1015b40:	10c5883a 	add	r2,r2,r3
 1015b44:	10800104 	addi	r2,r2,4
 1015b48:	10c00017 	ldw	r3,0(r2)
 1015b4c:	e0bffc17 	ldw	r2,-16(fp)
 1015b50:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1015b54:	e0bffb17 	ldw	r2,-20(fp)
 1015b58:	00c040b4 	movhi	r3,258
 1015b5c:	18e45e04 	addi	r3,r3,-28296
 1015b60:	10800324 	muli	r2,r2,12
 1015b64:	10c5883a 	add	r2,r2,r3
 1015b68:	10800204 	addi	r2,r2,8
 1015b6c:	10c00017 	ldw	r3,0(r2)
 1015b70:	e0bffc17 	ldw	r2,-16(fp)
 1015b74:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1015b78:	e13ffb17 	ldw	r4,-20(fp)
 1015b7c:	100f8a00 	call	100f8a0 <alt_release_fd>
  }
} 
 1015b80:	e037883a 	mov	sp,fp
 1015b84:	dfc00117 	ldw	ra,4(sp)
 1015b88:	df000017 	ldw	fp,0(sp)
 1015b8c:	dec00204 	addi	sp,sp,8
 1015b90:	f800283a 	ret

01015b94 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1015b94:	defffb04 	addi	sp,sp,-20
 1015b98:	dfc00415 	stw	ra,16(sp)
 1015b9c:	df000315 	stw	fp,12(sp)
 1015ba0:	df000304 	addi	fp,sp,12
 1015ba4:	e13ffd15 	stw	r4,-12(fp)
 1015ba8:	e17ffe15 	stw	r5,-8(fp)
 1015bac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1015bb0:	010040b4 	movhi	r4,258
 1015bb4:	21246104 	addi	r4,r4,-28284
 1015bb8:	e17ffd17 	ldw	r5,-12(fp)
 1015bbc:	01800044 	movi	r6,1
 1015bc0:	01c07fc4 	movi	r7,511
 1015bc4:	1015ad00 	call	1015ad0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1015bc8:	010040b4 	movhi	r4,258
 1015bcc:	21245e04 	addi	r4,r4,-28296
 1015bd0:	e17ffe17 	ldw	r5,-8(fp)
 1015bd4:	000d883a 	mov	r6,zero
 1015bd8:	01c07fc4 	movi	r7,511
 1015bdc:	1015ad00 	call	1015ad0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1015be0:	010040b4 	movhi	r4,258
 1015be4:	21246404 	addi	r4,r4,-28272
 1015be8:	e17fff17 	ldw	r5,-4(fp)
 1015bec:	01800044 	movi	r6,1
 1015bf0:	01c07fc4 	movi	r7,511
 1015bf4:	1015ad00 	call	1015ad0 <alt_open_fd>
}  
 1015bf8:	e037883a 	mov	sp,fp
 1015bfc:	dfc00117 	ldw	ra,4(sp)
 1015c00:	df000017 	ldw	fp,0(sp)
 1015c04:	dec00204 	addi	sp,sp,8
 1015c08:	f800283a 	ret

01015c0c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 1015c0c:	deffef04 	addi	sp,sp,-68
 1015c10:	df001015 	stw	fp,64(sp)
 1015c14:	df001004 	addi	fp,sp,64
 1015c18:	e13ffc15 	stw	r4,-16(fp)
 1015c1c:	e17ffd15 	stw	r5,-12(fp)
 1015c20:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 1015c24:	00bffa84 	movi	r2,-22
 1015c28:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1015c2c:	e0bffc17 	ldw	r2,-16(fp)
 1015c30:	10800828 	cmpgeui	r2,r2,32
 1015c34:	1000601e 	bne	r2,zero,1015db8 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1015c38:	0005303a 	rdctl	r2,status
 1015c3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1015c40:	e0fff917 	ldw	r3,-28(fp)
 1015c44:	00bfff84 	movi	r2,-2
 1015c48:	1884703a 	and	r2,r3,r2
 1015c4c:	1001703a 	wrctl	status,r2
  
  return context;
 1015c50:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 1015c54:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 1015c58:	e0bffc17 	ldw	r2,-16(fp)
 1015c5c:	00c040b4 	movhi	r3,258
 1015c60:	18f18904 	addi	r3,r3,-14812
 1015c64:	100490fa 	slli	r2,r2,3
 1015c68:	10c7883a 	add	r3,r2,r3
 1015c6c:	e0bffe17 	ldw	r2,-8(fp)
 1015c70:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 1015c74:	e0bffc17 	ldw	r2,-16(fp)
 1015c78:	00c040b4 	movhi	r3,258
 1015c7c:	18f18904 	addi	r3,r3,-14812
 1015c80:	100490fa 	slli	r2,r2,3
 1015c84:	10c5883a 	add	r2,r2,r3
 1015c88:	10c00104 	addi	r3,r2,4
 1015c8c:	e0bffd17 	ldw	r2,-12(fp)
 1015c90:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1015c94:	e0bffe17 	ldw	r2,-8(fp)
 1015c98:	1005003a 	cmpeq	r2,r2,zero
 1015c9c:	1000201e 	bne	r2,zero,1015d20 <alt_irq_register+0x114>
 1015ca0:	e0bffc17 	ldw	r2,-16(fp)
 1015ca4:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1015ca8:	0005303a 	rdctl	r2,status
 1015cac:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1015cb0:	e0fff617 	ldw	r3,-40(fp)
 1015cb4:	00bfff84 	movi	r2,-2
 1015cb8:	1884703a 	and	r2,r3,r2
 1015cbc:	1001703a 	wrctl	status,r2
  
  return context;
 1015cc0:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1015cc4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 1015cc8:	e0fff717 	ldw	r3,-36(fp)
 1015ccc:	00800044 	movi	r2,1
 1015cd0:	10c4983a 	sll	r2,r2,r3
 1015cd4:	1007883a 	mov	r3,r2
 1015cd8:	008040b4 	movhi	r2,258
 1015cdc:	10afe204 	addi	r2,r2,-16504
 1015ce0:	10800017 	ldw	r2,0(r2)
 1015ce4:	1886b03a 	or	r3,r3,r2
 1015ce8:	008040b4 	movhi	r2,258
 1015cec:	10afe204 	addi	r2,r2,-16504
 1015cf0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1015cf4:	008040b4 	movhi	r2,258
 1015cf8:	10afe204 	addi	r2,r2,-16504
 1015cfc:	10800017 	ldw	r2,0(r2)
 1015d00:	100170fa 	wrctl	ienable,r2
 1015d04:	e0bff817 	ldw	r2,-32(fp)
 1015d08:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1015d0c:	e0bff517 	ldw	r2,-44(fp)
 1015d10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1015d14:	0005883a 	mov	r2,zero
 1015d18:	e0bfff15 	stw	r2,-4(fp)
 1015d1c:	00002006 	br	1015da0 <alt_irq_register+0x194>
 1015d20:	e0bffc17 	ldw	r2,-16(fp)
 1015d24:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1015d28:	0005303a 	rdctl	r2,status
 1015d2c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1015d30:	e0fff217 	ldw	r3,-56(fp)
 1015d34:	00bfff84 	movi	r2,-2
 1015d38:	1884703a 	and	r2,r3,r2
 1015d3c:	1001703a 	wrctl	status,r2
  
  return context;
 1015d40:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1015d44:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 1015d48:	e0fff317 	ldw	r3,-52(fp)
 1015d4c:	00800044 	movi	r2,1
 1015d50:	10c4983a 	sll	r2,r2,r3
 1015d54:	0084303a 	nor	r2,zero,r2
 1015d58:	1007883a 	mov	r3,r2
 1015d5c:	008040b4 	movhi	r2,258
 1015d60:	10afe204 	addi	r2,r2,-16504
 1015d64:	10800017 	ldw	r2,0(r2)
 1015d68:	1886703a 	and	r3,r3,r2
 1015d6c:	008040b4 	movhi	r2,258
 1015d70:	10afe204 	addi	r2,r2,-16504
 1015d74:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1015d78:	008040b4 	movhi	r2,258
 1015d7c:	10afe204 	addi	r2,r2,-16504
 1015d80:	10800017 	ldw	r2,0(r2)
 1015d84:	100170fa 	wrctl	ienable,r2
 1015d88:	e0bff417 	ldw	r2,-48(fp)
 1015d8c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1015d90:	e0bff117 	ldw	r2,-60(fp)
 1015d94:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1015d98:	0005883a 	mov	r2,zero
 1015d9c:	e0bfff15 	stw	r2,-4(fp)
 1015da0:	e0bfff17 	ldw	r2,-4(fp)
 1015da4:	e0bffb15 	stw	r2,-20(fp)
 1015da8:	e0bffa17 	ldw	r2,-24(fp)
 1015dac:	e0bff015 	stw	r2,-64(fp)
 1015db0:	e0bff017 	ldw	r2,-64(fp)
 1015db4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 1015db8:	e0bffb17 	ldw	r2,-20(fp)
}
 1015dbc:	e037883a 	mov	sp,fp
 1015dc0:	df000017 	ldw	fp,0(sp)
 1015dc4:	dec00104 	addi	sp,sp,4
 1015dc8:	f800283a 	ret

01015dcc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1015dcc:	defffc04 	addi	sp,sp,-16
 1015dd0:	df000315 	stw	fp,12(sp)
 1015dd4:	df000304 	addi	fp,sp,12
 1015dd8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1015ddc:	e0bffe17 	ldw	r2,-8(fp)
 1015de0:	10800217 	ldw	r2,8(r2)
 1015de4:	10d00034 	orhi	r3,r2,16384
 1015de8:	e0bffe17 	ldw	r2,-8(fp)
 1015dec:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1015df0:	e03ffd15 	stw	zero,-12(fp)
 1015df4:	00002006 	br	1015e78 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1015df8:	e0bffd17 	ldw	r2,-12(fp)
 1015dfc:	00c040b4 	movhi	r3,258
 1015e00:	18e45e04 	addi	r3,r3,-28296
 1015e04:	10800324 	muli	r2,r2,12
 1015e08:	10c5883a 	add	r2,r2,r3
 1015e0c:	10c00017 	ldw	r3,0(r2)
 1015e10:	e0bffe17 	ldw	r2,-8(fp)
 1015e14:	10800017 	ldw	r2,0(r2)
 1015e18:	1880141e 	bne	r3,r2,1015e6c <alt_file_locked+0xa0>
 1015e1c:	e0bffd17 	ldw	r2,-12(fp)
 1015e20:	00c040b4 	movhi	r3,258
 1015e24:	18e45e04 	addi	r3,r3,-28296
 1015e28:	10800324 	muli	r2,r2,12
 1015e2c:	10c5883a 	add	r2,r2,r3
 1015e30:	10800204 	addi	r2,r2,8
 1015e34:	10800017 	ldw	r2,0(r2)
 1015e38:	1004403a 	cmpge	r2,r2,zero
 1015e3c:	10000b1e 	bne	r2,zero,1015e6c <alt_file_locked+0xa0>
 1015e40:	e0bffd17 	ldw	r2,-12(fp)
 1015e44:	10800324 	muli	r2,r2,12
 1015e48:	1007883a 	mov	r3,r2
 1015e4c:	008040b4 	movhi	r2,258
 1015e50:	10a45e04 	addi	r2,r2,-28296
 1015e54:	1887883a 	add	r3,r3,r2
 1015e58:	e0bffe17 	ldw	r2,-8(fp)
 1015e5c:	18800326 	beq	r3,r2,1015e6c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1015e60:	00bffcc4 	movi	r2,-13
 1015e64:	e0bfff15 	stw	r2,-4(fp)
 1015e68:	00000a06 	br	1015e94 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1015e6c:	e0bffd17 	ldw	r2,-12(fp)
 1015e70:	10800044 	addi	r2,r2,1
 1015e74:	e0bffd15 	stw	r2,-12(fp)
 1015e78:	008040b4 	movhi	r2,258
 1015e7c:	10a90204 	addi	r2,r2,-23544
 1015e80:	10800017 	ldw	r2,0(r2)
 1015e84:	1007883a 	mov	r3,r2
 1015e88:	e0bffd17 	ldw	r2,-12(fp)
 1015e8c:	18bfda2e 	bgeu	r3,r2,1015df8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1015e90:	e03fff15 	stw	zero,-4(fp)
 1015e94:	e0bfff17 	ldw	r2,-4(fp)
}
 1015e98:	e037883a 	mov	sp,fp
 1015e9c:	df000017 	ldw	fp,0(sp)
 1015ea0:	dec00104 	addi	sp,sp,4
 1015ea4:	f800283a 	ret

01015ea8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1015ea8:	defff404 	addi	sp,sp,-48
 1015eac:	dfc00b15 	stw	ra,44(sp)
 1015eb0:	df000a15 	stw	fp,40(sp)
 1015eb4:	df000a04 	addi	fp,sp,40
 1015eb8:	e13ffb15 	stw	r4,-20(fp)
 1015ebc:	e17ffc15 	stw	r5,-16(fp)
 1015ec0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1015ec4:	00bfffc4 	movi	r2,-1
 1015ec8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1015ecc:	00bffb44 	movi	r2,-19
 1015ed0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 1015ed4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1015ed8:	e13ffb17 	ldw	r4,-20(fp)
 1015edc:	014040b4 	movhi	r5,258
 1015ee0:	29690004 	addi	r5,r5,-23552
 1015ee4:	1015a0c0 	call	1015a0c <alt_find_dev>
 1015ee8:	e0bffa15 	stw	r2,-24(fp)
 1015eec:	e0bffa17 	ldw	r2,-24(fp)
 1015ef0:	1004c03a 	cmpne	r2,r2,zero
 1015ef4:	1000051e 	bne	r2,zero,1015f0c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1015ef8:	e13ffb17 	ldw	r4,-20(fp)
 1015efc:	10162540 	call	1016254 <alt_find_file>
 1015f00:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 1015f04:	00800044 	movi	r2,1
 1015f08:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1015f0c:	e0bffa17 	ldw	r2,-24(fp)
 1015f10:	1005003a 	cmpeq	r2,r2,zero
 1015f14:	1000301e 	bne	r2,zero,1015fd8 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1015f18:	e13ffa17 	ldw	r4,-24(fp)
 1015f1c:	10163740 	call	1016374 <alt_get_fd>
 1015f20:	e0bff815 	stw	r2,-32(fp)
 1015f24:	e0bff817 	ldw	r2,-32(fp)
 1015f28:	1004403a 	cmpge	r2,r2,zero
 1015f2c:	1000031e 	bne	r2,zero,1015f3c <open+0x94>
    {
      status = index;
 1015f30:	e0bff817 	ldw	r2,-32(fp)
 1015f34:	e0bff715 	stw	r2,-36(fp)
 1015f38:	00002906 	br	1015fe0 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 1015f3c:	e0bff817 	ldw	r2,-32(fp)
 1015f40:	10800324 	muli	r2,r2,12
 1015f44:	1007883a 	mov	r3,r2
 1015f48:	008040b4 	movhi	r2,258
 1015f4c:	10a45e04 	addi	r2,r2,-28296
 1015f50:	1885883a 	add	r2,r3,r2
 1015f54:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1015f58:	e0fffc17 	ldw	r3,-16(fp)
 1015f5c:	00900034 	movhi	r2,16384
 1015f60:	10bfffc4 	addi	r2,r2,-1
 1015f64:	1886703a 	and	r3,r3,r2
 1015f68:	e0bff917 	ldw	r2,-28(fp)
 1015f6c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1015f70:	e0bff617 	ldw	r2,-40(fp)
 1015f74:	1004c03a 	cmpne	r2,r2,zero
 1015f78:	1000061e 	bne	r2,zero,1015f94 <open+0xec>
 1015f7c:	e13ff917 	ldw	r4,-28(fp)
 1015f80:	1015dcc0 	call	1015dcc <alt_file_locked>
 1015f84:	e0bff715 	stw	r2,-36(fp)
 1015f88:	e0bff717 	ldw	r2,-36(fp)
 1015f8c:	1004803a 	cmplt	r2,r2,zero
 1015f90:	1000131e 	bne	r2,zero,1015fe0 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1015f94:	e0bffa17 	ldw	r2,-24(fp)
 1015f98:	10800317 	ldw	r2,12(r2)
 1015f9c:	1005003a 	cmpeq	r2,r2,zero
 1015fa0:	1000091e 	bne	r2,zero,1015fc8 <open+0x120>
 1015fa4:	e0bffa17 	ldw	r2,-24(fp)
 1015fa8:	10800317 	ldw	r2,12(r2)
 1015fac:	e13ff917 	ldw	r4,-28(fp)
 1015fb0:	e17ffb17 	ldw	r5,-20(fp)
 1015fb4:	e1bffc17 	ldw	r6,-16(fp)
 1015fb8:	e1fffd17 	ldw	r7,-12(fp)
 1015fbc:	103ee83a 	callr	r2
 1015fc0:	e0bfff15 	stw	r2,-4(fp)
 1015fc4:	00000106 	br	1015fcc <open+0x124>
 1015fc8:	e03fff15 	stw	zero,-4(fp)
 1015fcc:	e0bfff17 	ldw	r2,-4(fp)
 1015fd0:	e0bff715 	stw	r2,-36(fp)
 1015fd4:	00000206 	br	1015fe0 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1015fd8:	00bffb44 	movi	r2,-19
 1015fdc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1015fe0:	e0bff717 	ldw	r2,-36(fp)
 1015fe4:	1004403a 	cmpge	r2,r2,zero
 1015fe8:	1000091e 	bne	r2,zero,1016010 <open+0x168>
  {
    alt_release_fd (index);  
 1015fec:	e13ff817 	ldw	r4,-32(fp)
 1015ff0:	100f8a00 	call	100f8a0 <alt_release_fd>
    ALT_ERRNO = -status;
 1015ff4:	10160300 	call	1016030 <alt_get_errno>
 1015ff8:	e0fff717 	ldw	r3,-36(fp)
 1015ffc:	00c7c83a 	sub	r3,zero,r3
 1016000:	10c00015 	stw	r3,0(r2)
    return -1;
 1016004:	00bfffc4 	movi	r2,-1
 1016008:	e0bffe15 	stw	r2,-8(fp)
 101600c:	00000206 	br	1016018 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 1016010:	e0bff817 	ldw	r2,-32(fp)
 1016014:	e0bffe15 	stw	r2,-8(fp)
 1016018:	e0bffe17 	ldw	r2,-8(fp)
}
 101601c:	e037883a 	mov	sp,fp
 1016020:	dfc00117 	ldw	ra,4(sp)
 1016024:	df000017 	ldw	fp,0(sp)
 1016028:	dec00204 	addi	sp,sp,8
 101602c:	f800283a 	ret

01016030 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1016030:	defffd04 	addi	sp,sp,-12
 1016034:	dfc00215 	stw	ra,8(sp)
 1016038:	df000115 	stw	fp,4(sp)
 101603c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1016040:	008040b4 	movhi	r2,258
 1016044:	10a90304 	addi	r2,r2,-23540
 1016048:	10800017 	ldw	r2,0(r2)
 101604c:	1005003a 	cmpeq	r2,r2,zero
 1016050:	1000061e 	bne	r2,zero,101606c <alt_get_errno+0x3c>
 1016054:	008040b4 	movhi	r2,258
 1016058:	10a90304 	addi	r2,r2,-23540
 101605c:	10800017 	ldw	r2,0(r2)
 1016060:	103ee83a 	callr	r2
 1016064:	e0bfff15 	stw	r2,-4(fp)
 1016068:	00000306 	br	1016078 <alt_get_errno+0x48>
 101606c:	008040b4 	movhi	r2,258
 1016070:	10afd104 	addi	r2,r2,-16572
 1016074:	e0bfff15 	stw	r2,-4(fp)
 1016078:	e0bfff17 	ldw	r2,-4(fp)
}
 101607c:	e037883a 	mov	sp,fp
 1016080:	dfc00117 	ldw	ra,4(sp)
 1016084:	df000017 	ldw	fp,0(sp)
 1016088:	dec00204 	addi	sp,sp,8
 101608c:	f800283a 	ret

01016090 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1016090:	defffa04 	addi	sp,sp,-24
 1016094:	df000515 	stw	fp,20(sp)
 1016098:	df000504 	addi	fp,sp,20
 101609c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10160a0:	0005303a 	rdctl	r2,status
 10160a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10160a8:	e0fffd17 	ldw	r3,-12(fp)
 10160ac:	00bfff84 	movi	r2,-2
 10160b0:	1884703a 	and	r2,r3,r2
 10160b4:	1001703a 	wrctl	status,r2
  
  return context;
 10160b8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 10160bc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 10160c0:	e0bfff17 	ldw	r2,-4(fp)
 10160c4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 10160c8:	e0bffc17 	ldw	r2,-16(fp)
 10160cc:	10c00017 	ldw	r3,0(r2)
 10160d0:	e0bffc17 	ldw	r2,-16(fp)
 10160d4:	10800117 	ldw	r2,4(r2)
 10160d8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 10160dc:	e0bffc17 	ldw	r2,-16(fp)
 10160e0:	10c00117 	ldw	r3,4(r2)
 10160e4:	e0bffc17 	ldw	r2,-16(fp)
 10160e8:	10800017 	ldw	r2,0(r2)
 10160ec:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 10160f0:	e0fffc17 	ldw	r3,-16(fp)
 10160f4:	e0bffc17 	ldw	r2,-16(fp)
 10160f8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 10160fc:	e0fffc17 	ldw	r3,-16(fp)
 1016100:	e0bffc17 	ldw	r2,-16(fp)
 1016104:	18800015 	stw	r2,0(r3)
 1016108:	e0bffe17 	ldw	r2,-8(fp)
 101610c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1016110:	e0bffb17 	ldw	r2,-20(fp)
 1016114:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1016118:	e037883a 	mov	sp,fp
 101611c:	df000017 	ldw	fp,0(sp)
 1016120:	dec00104 	addi	sp,sp,4
 1016124:	f800283a 	ret

01016128 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1016128:	defffb04 	addi	sp,sp,-20
 101612c:	dfc00415 	stw	ra,16(sp)
 1016130:	df000315 	stw	fp,12(sp)
 1016134:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1016138:	d0a00f17 	ldw	r2,-32708(gp)
 101613c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1016140:	d0a6ed17 	ldw	r2,-25676(gp)
 1016144:	10800044 	addi	r2,r2,1
 1016148:	d0a6ed15 	stw	r2,-25676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 101614c:	00003106 	br	1016214 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 1016150:	e0bffe17 	ldw	r2,-8(fp)
 1016154:	10800017 	ldw	r2,0(r2)
 1016158:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 101615c:	e0bffe17 	ldw	r2,-8(fp)
 1016160:	10800403 	ldbu	r2,16(r2)
 1016164:	10803fcc 	andi	r2,r2,255
 1016168:	1005003a 	cmpeq	r2,r2,zero
 101616c:	1000051e 	bne	r2,zero,1016184 <alt_tick+0x5c>
 1016170:	d0a6ed17 	ldw	r2,-25676(gp)
 1016174:	1004c03a 	cmpne	r2,r2,zero
 1016178:	1000021e 	bne	r2,zero,1016184 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 101617c:	e0bffe17 	ldw	r2,-8(fp)
 1016180:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1016184:	e0bffe17 	ldw	r2,-8(fp)
 1016188:	10c00217 	ldw	r3,8(r2)
 101618c:	d0a6ed17 	ldw	r2,-25676(gp)
 1016190:	10c01e36 	bltu	r2,r3,101620c <alt_tick+0xe4>
 1016194:	e0bffe17 	ldw	r2,-8(fp)
 1016198:	10800403 	ldbu	r2,16(r2)
 101619c:	10803fcc 	andi	r2,r2,255
 10161a0:	1004c03a 	cmpne	r2,r2,zero
 10161a4:	1000191e 	bne	r2,zero,101620c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 10161a8:	e0bffe17 	ldw	r2,-8(fp)
 10161ac:	10c00317 	ldw	r3,12(r2)
 10161b0:	e0bffe17 	ldw	r2,-8(fp)
 10161b4:	11000517 	ldw	r4,20(r2)
 10161b8:	183ee83a 	callr	r3
 10161bc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 10161c0:	e0bffd17 	ldw	r2,-12(fp)
 10161c4:	1004c03a 	cmpne	r2,r2,zero
 10161c8:	1000031e 	bne	r2,zero,10161d8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 10161cc:	e13ffe17 	ldw	r4,-8(fp)
 10161d0:	10160900 	call	1016090 <alt_alarm_stop>
 10161d4:	00000d06 	br	101620c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 10161d8:	e0bffe17 	ldw	r2,-8(fp)
 10161dc:	10c00217 	ldw	r3,8(r2)
 10161e0:	e0bffd17 	ldw	r2,-12(fp)
 10161e4:	1887883a 	add	r3,r3,r2
 10161e8:	e0bffe17 	ldw	r2,-8(fp)
 10161ec:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 10161f0:	e0bffe17 	ldw	r2,-8(fp)
 10161f4:	10c00217 	ldw	r3,8(r2)
 10161f8:	d0a6ed17 	ldw	r2,-25676(gp)
 10161fc:	1880032e 	bgeu	r3,r2,101620c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 1016200:	e0fffe17 	ldw	r3,-8(fp)
 1016204:	00800044 	movi	r2,1
 1016208:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 101620c:	e0bfff17 	ldw	r2,-4(fp)
 1016210:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1016214:	d0e00f04 	addi	r3,gp,-32708
 1016218:	e0bffe17 	ldw	r2,-8(fp)
 101621c:	10ffcc1e 	bne	r2,r3,1016150 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 1016220:	e037883a 	mov	sp,fp
 1016224:	dfc00117 	ldw	ra,4(sp)
 1016228:	df000017 	ldw	fp,0(sp)
 101622c:	dec00204 	addi	sp,sp,8
 1016230:	f800283a 	ret

01016234 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1016234:	deffff04 	addi	sp,sp,-4
 1016238:	df000015 	stw	fp,0(sp)
 101623c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1016240:	000170fa 	wrctl	ienable,zero
}
 1016244:	e037883a 	mov	sp,fp
 1016248:	df000017 	ldw	fp,0(sp)
 101624c:	dec00104 	addi	sp,sp,4
 1016250:	f800283a 	ret

01016254 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1016254:	defffa04 	addi	sp,sp,-24
 1016258:	dfc00515 	stw	ra,20(sp)
 101625c:	df000415 	stw	fp,16(sp)
 1016260:	df000404 	addi	fp,sp,16
 1016264:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1016268:	008040b4 	movhi	r2,258
 101626c:	10a8fe04 	addi	r2,r2,-23560
 1016270:	10800017 	ldw	r2,0(r2)
 1016274:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1016278:	00003306 	br	1016348 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 101627c:	e0bffd17 	ldw	r2,-12(fp)
 1016280:	11000217 	ldw	r4,8(r2)
 1016284:	10006900 	call	1000690 <strlen>
 1016288:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 101628c:	e0bffd17 	ldw	r2,-12(fp)
 1016290:	10c00217 	ldw	r3,8(r2)
 1016294:	e0bffc17 	ldw	r2,-16(fp)
 1016298:	1885883a 	add	r2,r3,r2
 101629c:	10bfffc4 	addi	r2,r2,-1
 10162a0:	10800003 	ldbu	r2,0(r2)
 10162a4:	10803fcc 	andi	r2,r2,255
 10162a8:	1080201c 	xori	r2,r2,128
 10162ac:	10bfe004 	addi	r2,r2,-128
 10162b0:	10800bd8 	cmpnei	r2,r2,47
 10162b4:	1000031e 	bne	r2,zero,10162c4 <alt_find_file+0x70>
    {
      len -= 1;
 10162b8:	e0bffc17 	ldw	r2,-16(fp)
 10162bc:	10bfffc4 	addi	r2,r2,-1
 10162c0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10162c4:	e0bffc17 	ldw	r2,-16(fp)
 10162c8:	1007883a 	mov	r3,r2
 10162cc:	e0bffe17 	ldw	r2,-8(fp)
 10162d0:	1885883a 	add	r2,r3,r2
 10162d4:	10800003 	ldbu	r2,0(r2)
 10162d8:	10803fcc 	andi	r2,r2,255
 10162dc:	1080201c 	xori	r2,r2,128
 10162e0:	10bfe004 	addi	r2,r2,-128
 10162e4:	10800be0 	cmpeqi	r2,r2,47
 10162e8:	10000a1e 	bne	r2,zero,1016314 <alt_find_file+0xc0>
 10162ec:	e0bffc17 	ldw	r2,-16(fp)
 10162f0:	1007883a 	mov	r3,r2
 10162f4:	e0bffe17 	ldw	r2,-8(fp)
 10162f8:	1885883a 	add	r2,r3,r2
 10162fc:	10800003 	ldbu	r2,0(r2)
 1016300:	10803fcc 	andi	r2,r2,255
 1016304:	1080201c 	xori	r2,r2,128
 1016308:	10bfe004 	addi	r2,r2,-128
 101630c:	1004c03a 	cmpne	r2,r2,zero
 1016310:	10000a1e 	bne	r2,zero,101633c <alt_find_file+0xe8>
 1016314:	e0bffd17 	ldw	r2,-12(fp)
 1016318:	11000217 	ldw	r4,8(r2)
 101631c:	e1bffc17 	ldw	r6,-16(fp)
 1016320:	e17ffe17 	ldw	r5,-8(fp)
 1016324:	10165ec0 	call	10165ec <memcmp>
 1016328:	1004c03a 	cmpne	r2,r2,zero
 101632c:	1000031e 	bne	r2,zero,101633c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1016330:	e0bffd17 	ldw	r2,-12(fp)
 1016334:	e0bfff15 	stw	r2,-4(fp)
 1016338:	00000806 	br	101635c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 101633c:	e0bffd17 	ldw	r2,-12(fp)
 1016340:	10800017 	ldw	r2,0(r2)
 1016344:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1016348:	00c040b4 	movhi	r3,258
 101634c:	18e8fe04 	addi	r3,r3,-23560
 1016350:	e0bffd17 	ldw	r2,-12(fp)
 1016354:	10ffc91e 	bne	r2,r3,101627c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1016358:	e03fff15 	stw	zero,-4(fp)
 101635c:	e0bfff17 	ldw	r2,-4(fp)
}
 1016360:	e037883a 	mov	sp,fp
 1016364:	dfc00117 	ldw	ra,4(sp)
 1016368:	df000017 	ldw	fp,0(sp)
 101636c:	dec00204 	addi	sp,sp,8
 1016370:	f800283a 	ret

01016374 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1016374:	defffc04 	addi	sp,sp,-16
 1016378:	df000315 	stw	fp,12(sp)
 101637c:	df000304 	addi	fp,sp,12
 1016380:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1016384:	00bffa04 	movi	r2,-24
 1016388:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 101638c:	e03ffe15 	stw	zero,-8(fp)
 1016390:	00001e06 	br	101640c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 1016394:	e0bffe17 	ldw	r2,-8(fp)
 1016398:	00c040b4 	movhi	r3,258
 101639c:	18e45e04 	addi	r3,r3,-28296
 10163a0:	10800324 	muli	r2,r2,12
 10163a4:	10c5883a 	add	r2,r2,r3
 10163a8:	10800017 	ldw	r2,0(r2)
 10163ac:	1004c03a 	cmpne	r2,r2,zero
 10163b0:	1000131e 	bne	r2,zero,1016400 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 10163b4:	e0bffe17 	ldw	r2,-8(fp)
 10163b8:	00c040b4 	movhi	r3,258
 10163bc:	18e45e04 	addi	r3,r3,-28296
 10163c0:	10800324 	muli	r2,r2,12
 10163c4:	10c7883a 	add	r3,r2,r3
 10163c8:	e0bfff17 	ldw	r2,-4(fp)
 10163cc:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 10163d0:	008040b4 	movhi	r2,258
 10163d4:	10a90204 	addi	r2,r2,-23544
 10163d8:	10c00017 	ldw	r3,0(r2)
 10163dc:	e0bffe17 	ldw	r2,-8(fp)
 10163e0:	1880040e 	bge	r3,r2,10163f4 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 10163e4:	00c040b4 	movhi	r3,258
 10163e8:	18e90204 	addi	r3,r3,-23544
 10163ec:	e0bffe17 	ldw	r2,-8(fp)
 10163f0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 10163f4:	e0bffe17 	ldw	r2,-8(fp)
 10163f8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 10163fc:	00000606 	br	1016418 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1016400:	e0bffe17 	ldw	r2,-8(fp)
 1016404:	10800044 	addi	r2,r2,1
 1016408:	e0bffe15 	stw	r2,-8(fp)
 101640c:	e0bffe17 	ldw	r2,-8(fp)
 1016410:	10800810 	cmplti	r2,r2,32
 1016414:	103fdf1e 	bne	r2,zero,1016394 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1016418:	e0bffd17 	ldw	r2,-12(fp)
}
 101641c:	e037883a 	mov	sp,fp
 1016420:	df000017 	ldw	fp,0(sp)
 1016424:	dec00104 	addi	sp,sp,4
 1016428:	f800283a 	ret

0101642c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 101642c:	defffb04 	addi	sp,sp,-20
 1016430:	df000415 	stw	fp,16(sp)
 1016434:	df000404 	addi	fp,sp,16
 1016438:	e13ffe15 	stw	r4,-8(fp)
 101643c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1016440:	e0bfff17 	ldw	r2,-4(fp)
 1016444:	10900070 	cmpltui	r2,r2,16385
 1016448:	1000021e 	bne	r2,zero,1016454 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 101644c:	00900004 	movi	r2,16384
 1016450:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1016454:	e0fffe17 	ldw	r3,-8(fp)
 1016458:	e0bfff17 	ldw	r2,-4(fp)
 101645c:	1885883a 	add	r2,r3,r2
 1016460:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1016464:	e0bffe17 	ldw	r2,-8(fp)
 1016468:	e0bffd15 	stw	r2,-12(fp)
 101646c:	00000506 	br	1016484 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1016470:	e0bffd17 	ldw	r2,-12(fp)
 1016474:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1016478:	e0bffd17 	ldw	r2,-12(fp)
 101647c:	10800804 	addi	r2,r2,32
 1016480:	e0bffd15 	stw	r2,-12(fp)
 1016484:	e0fffd17 	ldw	r3,-12(fp)
 1016488:	e0bffc17 	ldw	r2,-16(fp)
 101648c:	18bff836 	bltu	r3,r2,1016470 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1016490:	e0bffe17 	ldw	r2,-8(fp)
 1016494:	108007cc 	andi	r2,r2,31
 1016498:	1005003a 	cmpeq	r2,r2,zero
 101649c:	1000021e 	bne	r2,zero,10164a8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 10164a0:	e0bffd17 	ldw	r2,-12(fp)
 10164a4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 10164a8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 10164ac:	e037883a 	mov	sp,fp
 10164b0:	df000017 	ldw	fp,0(sp)
 10164b4:	dec00104 	addi	sp,sp,4
 10164b8:	f800283a 	ret

010164bc <__assert_func>:
 10164bc:	008040b4 	movhi	r2,258
 10164c0:	10a8f804 	addi	r2,r2,-23584
 10164c4:	10c00017 	ldw	r3,0(r2)
 10164c8:	defffc04 	addi	sp,sp,-16
 10164cc:	2011883a 	mov	r8,r4
 10164d0:	dfc00315 	stw	ra,12(sp)
 10164d4:	3005883a 	mov	r2,r6
 10164d8:	2813883a 	mov	r9,r5
 10164dc:	19000317 	ldw	r4,12(r3)
 10164e0:	30000b26 	beq	r6,zero,1016510 <__assert_func+0x54>
 10164e4:	00c040b4 	movhi	r3,258
 10164e8:	18e23904 	addi	r3,r3,-30492
 10164ec:	380d883a 	mov	r6,r7
 10164f0:	014040b4 	movhi	r5,258
 10164f4:	29622d04 	addi	r5,r5,-30540
 10164f8:	400f883a 	mov	r7,r8
 10164fc:	da400015 	stw	r9,0(sp)
 1016500:	d8c00115 	stw	r3,4(sp)
 1016504:	d8800215 	stw	r2,8(sp)
 1016508:	10165800 	call	1016580 <fiprintf>
 101650c:	10169640 	call	1016964 <abort>
 1016510:	008040b4 	movhi	r2,258
 1016514:	10a23c04 	addi	r2,r2,-30480
 1016518:	1007883a 	mov	r3,r2
 101651c:	003ff306 	br	10164ec <__assert_func+0x30>

01016520 <__assert>:
 1016520:	deffff04 	addi	sp,sp,-4
 1016524:	300f883a 	mov	r7,r6
 1016528:	000d883a 	mov	r6,zero
 101652c:	dfc00015 	stw	ra,0(sp)
 1016530:	10164bc0 	call	10164bc <__assert_func>

01016534 <atexit>:
 1016534:	200b883a 	mov	r5,r4
 1016538:	000d883a 	mov	r6,zero
 101653c:	0009883a 	mov	r4,zero
 1016540:	000f883a 	mov	r7,zero
 1016544:	101667c1 	jmpi	101667c <__register_exitproc>

01016548 <exit>:
 1016548:	defffe04 	addi	sp,sp,-8
 101654c:	000b883a 	mov	r5,zero
 1016550:	dc000015 	stw	r16,0(sp)
 1016554:	dfc00115 	stw	ra,4(sp)
 1016558:	2021883a 	mov	r16,r4
 101655c:	10167b40 	call	10167b4 <__call_exitprocs>
 1016560:	008040b4 	movhi	r2,258
 1016564:	10a8f904 	addi	r2,r2,-23580
 1016568:	11000017 	ldw	r4,0(r2)
 101656c:	20800f17 	ldw	r2,60(r4)
 1016570:	10000126 	beq	r2,zero,1016578 <exit+0x30>
 1016574:	103ee83a 	callr	r2
 1016578:	8009883a 	mov	r4,r16
 101657c:	1017e2c0 	call	1017e2c <_exit>

01016580 <fiprintf>:
 1016580:	defffc04 	addi	sp,sp,-16
 1016584:	2007883a 	mov	r3,r4
 1016588:	dfc00115 	stw	ra,4(sp)
 101658c:	d9800215 	stw	r6,8(sp)
 1016590:	d9c00315 	stw	r7,12(sp)
 1016594:	018040b4 	movhi	r6,258
 1016598:	31a8f804 	addi	r6,r6,-23584
 101659c:	31000017 	ldw	r4,0(r6)
 10165a0:	d8800204 	addi	r2,sp,8
 10165a4:	280d883a 	mov	r6,r5
 10165a8:	100f883a 	mov	r7,r2
 10165ac:	180b883a 	mov	r5,r3
 10165b0:	d8800015 	stw	r2,0(sp)
 10165b4:	10166600 	call	1016660 <_vfiprintf_r>
 10165b8:	dfc00117 	ldw	ra,4(sp)
 10165bc:	dec00404 	addi	sp,sp,16
 10165c0:	f800283a 	ret

010165c4 <_fiprintf_r>:
 10165c4:	defffd04 	addi	sp,sp,-12
 10165c8:	dfc00115 	stw	ra,4(sp)
 10165cc:	d9c00215 	stw	r7,8(sp)
 10165d0:	d8800204 	addi	r2,sp,8
 10165d4:	100f883a 	mov	r7,r2
 10165d8:	d8800015 	stw	r2,0(sp)
 10165dc:	10166600 	call	1016660 <_vfiprintf_r>
 10165e0:	dfc00117 	ldw	ra,4(sp)
 10165e4:	dec00304 	addi	sp,sp,12
 10165e8:	f800283a 	ret

010165ec <memcmp>:
 10165ec:	00c000c4 	movi	r3,3
 10165f0:	1980032e 	bgeu	r3,r6,1016600 <memcmp+0x14>
 10165f4:	2144b03a 	or	r2,r4,r5
 10165f8:	10c4703a 	and	r2,r2,r3
 10165fc:	10000f26 	beq	r2,zero,101663c <memcmp+0x50>
 1016600:	31ffffc4 	addi	r7,r6,-1
 1016604:	3000061e 	bne	r6,zero,1016620 <memcmp+0x34>
 1016608:	00000a06 	br	1016634 <memcmp+0x48>
 101660c:	39ffffc4 	addi	r7,r7,-1
 1016610:	00bfffc4 	movi	r2,-1
 1016614:	21000044 	addi	r4,r4,1
 1016618:	29400044 	addi	r5,r5,1
 101661c:	38800526 	beq	r7,r2,1016634 <memcmp+0x48>
 1016620:	20c00003 	ldbu	r3,0(r4)
 1016624:	28800003 	ldbu	r2,0(r5)
 1016628:	18bff826 	beq	r3,r2,101660c <memcmp+0x20>
 101662c:	1885c83a 	sub	r2,r3,r2
 1016630:	f800283a 	ret
 1016634:	0005883a 	mov	r2,zero
 1016638:	f800283a 	ret
 101663c:	180f883a 	mov	r7,r3
 1016640:	20c00017 	ldw	r3,0(r4)
 1016644:	28800017 	ldw	r2,0(r5)
 1016648:	18bfed1e 	bne	r3,r2,1016600 <memcmp+0x14>
 101664c:	31bfff04 	addi	r6,r6,-4
 1016650:	21000104 	addi	r4,r4,4
 1016654:	29400104 	addi	r5,r5,4
 1016658:	39bff936 	bltu	r7,r6,1016640 <memcmp+0x54>
 101665c:	003fe806 	br	1016600 <memcmp+0x14>

01016660 <_vfiprintf_r>:
 1016660:	defffe04 	addi	sp,sp,-8
 1016664:	dfc00115 	stw	ra,4(sp)
 1016668:	d9c00015 	stw	r7,0(sp)
 101666c:	1016d240 	call	1016d24 <___vfiprintf_internal_r>
 1016670:	dfc00117 	ldw	ra,4(sp)
 1016674:	dec00204 	addi	sp,sp,8
 1016678:	f800283a 	ret

0101667c <__register_exitproc>:
 101667c:	defffa04 	addi	sp,sp,-24
 1016680:	008040b4 	movhi	r2,258
 1016684:	10a8f904 	addi	r2,r2,-23580
 1016688:	dc000015 	stw	r16,0(sp)
 101668c:	14000017 	ldw	r16,0(r2)
 1016690:	dd000415 	stw	r20,16(sp)
 1016694:	2829883a 	mov	r20,r5
 1016698:	81405217 	ldw	r5,328(r16)
 101669c:	dcc00315 	stw	r19,12(sp)
 10166a0:	dc800215 	stw	r18,8(sp)
 10166a4:	dc400115 	stw	r17,4(sp)
 10166a8:	dfc00515 	stw	ra,20(sp)
 10166ac:	2023883a 	mov	r17,r4
 10166b0:	3027883a 	mov	r19,r6
 10166b4:	3825883a 	mov	r18,r7
 10166b8:	28002526 	beq	r5,zero,1016750 <__register_exitproc+0xd4>
 10166bc:	29000117 	ldw	r4,4(r5)
 10166c0:	008007c4 	movi	r2,31
 10166c4:	11002716 	blt	r2,r4,1016764 <__register_exitproc+0xe8>
 10166c8:	8800101e 	bne	r17,zero,101670c <__register_exitproc+0x90>
 10166cc:	2105883a 	add	r2,r4,r4
 10166d0:	1085883a 	add	r2,r2,r2
 10166d4:	20c00044 	addi	r3,r4,1
 10166d8:	1145883a 	add	r2,r2,r5
 10166dc:	0009883a 	mov	r4,zero
 10166e0:	15000215 	stw	r20,8(r2)
 10166e4:	28c00115 	stw	r3,4(r5)
 10166e8:	2005883a 	mov	r2,r4
 10166ec:	dfc00517 	ldw	ra,20(sp)
 10166f0:	dd000417 	ldw	r20,16(sp)
 10166f4:	dcc00317 	ldw	r19,12(sp)
 10166f8:	dc800217 	ldw	r18,8(sp)
 10166fc:	dc400117 	ldw	r17,4(sp)
 1016700:	dc000017 	ldw	r16,0(sp)
 1016704:	dec00604 	addi	sp,sp,24
 1016708:	f800283a 	ret
 101670c:	29802204 	addi	r6,r5,136
 1016710:	00800044 	movi	r2,1
 1016714:	110e983a 	sll	r7,r2,r4
 1016718:	30c04017 	ldw	r3,256(r6)
 101671c:	2105883a 	add	r2,r4,r4
 1016720:	1085883a 	add	r2,r2,r2
 1016724:	1185883a 	add	r2,r2,r6
 1016728:	19c6b03a 	or	r3,r3,r7
 101672c:	14802015 	stw	r18,128(r2)
 1016730:	14c00015 	stw	r19,0(r2)
 1016734:	00800084 	movi	r2,2
 1016738:	30c04015 	stw	r3,256(r6)
 101673c:	88bfe31e 	bne	r17,r2,10166cc <__register_exitproc+0x50>
 1016740:	30804117 	ldw	r2,260(r6)
 1016744:	11c4b03a 	or	r2,r2,r7
 1016748:	30804115 	stw	r2,260(r6)
 101674c:	003fdf06 	br	10166cc <__register_exitproc+0x50>
 1016750:	008040b4 	movhi	r2,258
 1016754:	10b1c904 	addi	r2,r2,-14556
 1016758:	100b883a 	mov	r5,r2
 101675c:	80805215 	stw	r2,328(r16)
 1016760:	003fd606 	br	10166bc <__register_exitproc+0x40>
 1016764:	00800034 	movhi	r2,0
 1016768:	10800004 	addi	r2,r2,0
 101676c:	1000021e 	bne	r2,zero,1016778 <__register_exitproc+0xfc>
 1016770:	013fffc4 	movi	r4,-1
 1016774:	003fdc06 	br	10166e8 <__register_exitproc+0x6c>
 1016778:	01006404 	movi	r4,400
 101677c:	103ee83a 	callr	r2
 1016780:	1007883a 	mov	r3,r2
 1016784:	103ffa26 	beq	r2,zero,1016770 <__register_exitproc+0xf4>
 1016788:	80805217 	ldw	r2,328(r16)
 101678c:	180b883a 	mov	r5,r3
 1016790:	18000115 	stw	zero,4(r3)
 1016794:	18800015 	stw	r2,0(r3)
 1016798:	80c05215 	stw	r3,328(r16)
 101679c:	18006215 	stw	zero,392(r3)
 10167a0:	18006315 	stw	zero,396(r3)
 10167a4:	0009883a 	mov	r4,zero
 10167a8:	883fc826 	beq	r17,zero,10166cc <__register_exitproc+0x50>
 10167ac:	003fd706 	br	101670c <__register_exitproc+0x90>

010167b0 <register_fini>:
 10167b0:	f800283a 	ret

010167b4 <__call_exitprocs>:
 10167b4:	008040b4 	movhi	r2,258
 10167b8:	10a8f904 	addi	r2,r2,-23580
 10167bc:	10800017 	ldw	r2,0(r2)
 10167c0:	defff304 	addi	sp,sp,-52
 10167c4:	df000b15 	stw	fp,44(sp)
 10167c8:	d8800115 	stw	r2,4(sp)
 10167cc:	00800034 	movhi	r2,0
 10167d0:	10800004 	addi	r2,r2,0
 10167d4:	1005003a 	cmpeq	r2,r2,zero
 10167d8:	d8800215 	stw	r2,8(sp)
 10167dc:	d8800117 	ldw	r2,4(sp)
 10167e0:	dd400815 	stw	r21,32(sp)
 10167e4:	dd000715 	stw	r20,28(sp)
 10167e8:	10805204 	addi	r2,r2,328
 10167ec:	dfc00c15 	stw	ra,48(sp)
 10167f0:	ddc00a15 	stw	r23,40(sp)
 10167f4:	dd800915 	stw	r22,36(sp)
 10167f8:	dcc00615 	stw	r19,24(sp)
 10167fc:	dc800515 	stw	r18,20(sp)
 1016800:	dc400415 	stw	r17,16(sp)
 1016804:	dc000315 	stw	r16,12(sp)
 1016808:	282b883a 	mov	r21,r5
 101680c:	2039883a 	mov	fp,r4
 1016810:	d8800015 	stw	r2,0(sp)
 1016814:	2829003a 	cmpeq	r20,r5,zero
 1016818:	d8800117 	ldw	r2,4(sp)
 101681c:	14405217 	ldw	r17,328(r2)
 1016820:	88001026 	beq	r17,zero,1016864 <__call_exitprocs+0xb0>
 1016824:	ddc00017 	ldw	r23,0(sp)
 1016828:	88800117 	ldw	r2,4(r17)
 101682c:	8c802204 	addi	r18,r17,136
 1016830:	143fffc4 	addi	r16,r2,-1
 1016834:	80000916 	blt	r16,zero,101685c <__call_exitprocs+0xa8>
 1016838:	05bfffc4 	movi	r22,-1
 101683c:	a000151e 	bne	r20,zero,1016894 <__call_exitprocs+0xe0>
 1016840:	8409883a 	add	r4,r16,r16
 1016844:	2105883a 	add	r2,r4,r4
 1016848:	1485883a 	add	r2,r2,r18
 101684c:	10c02017 	ldw	r3,128(r2)
 1016850:	a8c01126 	beq	r21,r3,1016898 <__call_exitprocs+0xe4>
 1016854:	843fffc4 	addi	r16,r16,-1
 1016858:	85bff81e 	bne	r16,r22,101683c <__call_exitprocs+0x88>
 101685c:	d8800217 	ldw	r2,8(sp)
 1016860:	10003126 	beq	r2,zero,1016928 <__call_exitprocs+0x174>
 1016864:	dfc00c17 	ldw	ra,48(sp)
 1016868:	df000b17 	ldw	fp,44(sp)
 101686c:	ddc00a17 	ldw	r23,40(sp)
 1016870:	dd800917 	ldw	r22,36(sp)
 1016874:	dd400817 	ldw	r21,32(sp)
 1016878:	dd000717 	ldw	r20,28(sp)
 101687c:	dcc00617 	ldw	r19,24(sp)
 1016880:	dc800517 	ldw	r18,20(sp)
 1016884:	dc400417 	ldw	r17,16(sp)
 1016888:	dc000317 	ldw	r16,12(sp)
 101688c:	dec00d04 	addi	sp,sp,52
 1016890:	f800283a 	ret
 1016894:	8409883a 	add	r4,r16,r16
 1016898:	88c00117 	ldw	r3,4(r17)
 101689c:	2105883a 	add	r2,r4,r4
 10168a0:	1445883a 	add	r2,r2,r17
 10168a4:	18ffffc4 	addi	r3,r3,-1
 10168a8:	11800217 	ldw	r6,8(r2)
 10168ac:	1c001526 	beq	r3,r16,1016904 <__call_exitprocs+0x150>
 10168b0:	10000215 	stw	zero,8(r2)
 10168b4:	303fe726 	beq	r6,zero,1016854 <__call_exitprocs+0xa0>
 10168b8:	00c00044 	movi	r3,1
 10168bc:	1c06983a 	sll	r3,r3,r16
 10168c0:	90804017 	ldw	r2,256(r18)
 10168c4:	8cc00117 	ldw	r19,4(r17)
 10168c8:	1884703a 	and	r2,r3,r2
 10168cc:	10001426 	beq	r2,zero,1016920 <__call_exitprocs+0x16c>
 10168d0:	90804117 	ldw	r2,260(r18)
 10168d4:	1884703a 	and	r2,r3,r2
 10168d8:	10000c1e 	bne	r2,zero,101690c <__call_exitprocs+0x158>
 10168dc:	2105883a 	add	r2,r4,r4
 10168e0:	1485883a 	add	r2,r2,r18
 10168e4:	11400017 	ldw	r5,0(r2)
 10168e8:	e009883a 	mov	r4,fp
 10168ec:	303ee83a 	callr	r6
 10168f0:	88800117 	ldw	r2,4(r17)
 10168f4:	98bfc81e 	bne	r19,r2,1016818 <__call_exitprocs+0x64>
 10168f8:	b8800017 	ldw	r2,0(r23)
 10168fc:	147fd526 	beq	r2,r17,1016854 <__call_exitprocs+0xa0>
 1016900:	003fc506 	br	1016818 <__call_exitprocs+0x64>
 1016904:	8c000115 	stw	r16,4(r17)
 1016908:	003fea06 	br	10168b4 <__call_exitprocs+0x100>
 101690c:	2105883a 	add	r2,r4,r4
 1016910:	1485883a 	add	r2,r2,r18
 1016914:	11000017 	ldw	r4,0(r2)
 1016918:	303ee83a 	callr	r6
 101691c:	003ff406 	br	10168f0 <__call_exitprocs+0x13c>
 1016920:	303ee83a 	callr	r6
 1016924:	003ff206 	br	10168f0 <__call_exitprocs+0x13c>
 1016928:	88800117 	ldw	r2,4(r17)
 101692c:	1000081e 	bne	r2,zero,1016950 <__call_exitprocs+0x19c>
 1016930:	89000017 	ldw	r4,0(r17)
 1016934:	20000726 	beq	r4,zero,1016954 <__call_exitprocs+0x1a0>
 1016938:	b9000015 	stw	r4,0(r23)
 101693c:	8809883a 	mov	r4,r17
 1016940:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 1016944:	bc400017 	ldw	r17,0(r23)
 1016948:	883fb71e 	bne	r17,zero,1016828 <__call_exitprocs+0x74>
 101694c:	003fc506 	br	1016864 <__call_exitprocs+0xb0>
 1016950:	89000017 	ldw	r4,0(r17)
 1016954:	882f883a 	mov	r23,r17
 1016958:	2023883a 	mov	r17,r4
 101695c:	883fb21e 	bne	r17,zero,1016828 <__call_exitprocs+0x74>
 1016960:	003fc006 	br	1016864 <__call_exitprocs+0xb0>

01016964 <abort>:
 1016964:	deffff04 	addi	sp,sp,-4
 1016968:	01000184 	movi	r4,6
 101696c:	dfc00015 	stw	ra,0(sp)
 1016970:	1016a480 	call	1016a48 <raise>
 1016974:	01000044 	movi	r4,1
 1016978:	1017e2c0 	call	1017e2c <_exit>

0101697c <_raise_r>:
 101697c:	defffd04 	addi	sp,sp,-12
 1016980:	008007c4 	movi	r2,31
 1016984:	dc400115 	stw	r17,4(sp)
 1016988:	dc000015 	stw	r16,0(sp)
 101698c:	dfc00215 	stw	ra,8(sp)
 1016990:	2821883a 	mov	r16,r5
 1016994:	2023883a 	mov	r17,r4
 1016998:	11402736 	bltu	r2,r5,1016a38 <_raise_r+0xbc>
 101699c:	20c0b717 	ldw	r3,732(r4)
 10169a0:	18001326 	beq	r3,zero,10169f0 <_raise_r+0x74>
 10169a4:	2945883a 	add	r2,r5,r5
 10169a8:	1085883a 	add	r2,r2,r2
 10169ac:	188b883a 	add	r5,r3,r2
 10169b0:	28c00017 	ldw	r3,0(r5)
 10169b4:	18000e26 	beq	r3,zero,10169f0 <_raise_r+0x74>
 10169b8:	01000044 	movi	r4,1
 10169bc:	19000526 	beq	r3,r4,10169d4 <_raise_r+0x58>
 10169c0:	00bfffc4 	movi	r2,-1
 10169c4:	18801326 	beq	r3,r2,1016a14 <_raise_r+0x98>
 10169c8:	28000015 	stw	zero,0(r5)
 10169cc:	8009883a 	mov	r4,r16
 10169d0:	183ee83a 	callr	r3
 10169d4:	0007883a 	mov	r3,zero
 10169d8:	1805883a 	mov	r2,r3
 10169dc:	dfc00217 	ldw	ra,8(sp)
 10169e0:	dc400117 	ldw	r17,4(sp)
 10169e4:	dc000017 	ldw	r16,0(sp)
 10169e8:	dec00304 	addi	sp,sp,12
 10169ec:	f800283a 	ret
 10169f0:	1016c540 	call	1016c54 <_getpid_r>
 10169f4:	100b883a 	mov	r5,r2
 10169f8:	8809883a 	mov	r4,r17
 10169fc:	800d883a 	mov	r6,r16
 1016a00:	dfc00217 	ldw	ra,8(sp)
 1016a04:	dc400117 	ldw	r17,4(sp)
 1016a08:	dc000017 	ldw	r16,0(sp)
 1016a0c:	dec00304 	addi	sp,sp,12
 1016a10:	1016c581 	jmpi	1016c58 <_kill_r>
 1016a14:	2007883a 	mov	r3,r4
 1016a18:	00800584 	movi	r2,22
 1016a1c:	88800015 	stw	r2,0(r17)
 1016a20:	1805883a 	mov	r2,r3
 1016a24:	dfc00217 	ldw	ra,8(sp)
 1016a28:	dc400117 	ldw	r17,4(sp)
 1016a2c:	dc000017 	ldw	r16,0(sp)
 1016a30:	dec00304 	addi	sp,sp,12
 1016a34:	f800283a 	ret
 1016a38:	00800584 	movi	r2,22
 1016a3c:	00ffffc4 	movi	r3,-1
 1016a40:	20800015 	stw	r2,0(r4)
 1016a44:	003fe406 	br	10169d8 <_raise_r+0x5c>

01016a48 <raise>:
 1016a48:	008040b4 	movhi	r2,258
 1016a4c:	10a8f804 	addi	r2,r2,-23584
 1016a50:	200b883a 	mov	r5,r4
 1016a54:	11000017 	ldw	r4,0(r2)
 1016a58:	101697c1 	jmpi	101697c <_raise_r>

01016a5c <_init_signal_r>:
 1016a5c:	2080b717 	ldw	r2,732(r4)
 1016a60:	defffe04 	addi	sp,sp,-8
 1016a64:	dc000015 	stw	r16,0(sp)
 1016a68:	dfc00115 	stw	ra,4(sp)
 1016a6c:	2021883a 	mov	r16,r4
 1016a70:	10000526 	beq	r2,zero,1016a88 <_init_signal_r+0x2c>
 1016a74:	0005883a 	mov	r2,zero
 1016a78:	dfc00117 	ldw	ra,4(sp)
 1016a7c:	dc000017 	ldw	r16,0(sp)
 1016a80:	dec00204 	addi	sp,sp,8
 1016a84:	f800283a 	ret
 1016a88:	01402004 	movi	r5,128
 1016a8c:	1006ac00 	call	1006ac0 <_malloc_r>
 1016a90:	1009883a 	mov	r4,r2
 1016a94:	8080b715 	stw	r2,732(r16)
 1016a98:	10000726 	beq	r2,zero,1016ab8 <_init_signal_r+0x5c>
 1016a9c:	0007883a 	mov	r3,zero
 1016aa0:	01402004 	movi	r5,128
 1016aa4:	20c5883a 	add	r2,r4,r3
 1016aa8:	18c00104 	addi	r3,r3,4
 1016aac:	10000015 	stw	zero,0(r2)
 1016ab0:	197ffc1e 	bne	r3,r5,1016aa4 <_init_signal_r+0x48>
 1016ab4:	003fef06 	br	1016a74 <_init_signal_r+0x18>
 1016ab8:	00bfffc4 	movi	r2,-1
 1016abc:	003fee06 	br	1016a78 <_init_signal_r+0x1c>

01016ac0 <_init_signal>:
 1016ac0:	008040b4 	movhi	r2,258
 1016ac4:	10a8f804 	addi	r2,r2,-23584
 1016ac8:	11000017 	ldw	r4,0(r2)
 1016acc:	1016a5c1 	jmpi	1016a5c <_init_signal_r>

01016ad0 <__sigtramp_r>:
 1016ad0:	defffd04 	addi	sp,sp,-12
 1016ad4:	008007c4 	movi	r2,31
 1016ad8:	dc000115 	stw	r16,4(sp)
 1016adc:	dfc00215 	stw	ra,8(sp)
 1016ae0:	2021883a 	mov	r16,r4
 1016ae4:	11401336 	bltu	r2,r5,1016b34 <__sigtramp_r+0x64>
 1016ae8:	20c0b717 	ldw	r3,732(r4)
 1016aec:	18001f26 	beq	r3,zero,1016b6c <__sigtramp_r+0x9c>
 1016af0:	2945883a 	add	r2,r5,r5
 1016af4:	1085883a 	add	r2,r2,r2
 1016af8:	10c9883a 	add	r4,r2,r3
 1016afc:	20c00017 	ldw	r3,0(r4)
 1016b00:	18001626 	beq	r3,zero,1016b5c <__sigtramp_r+0x8c>
 1016b04:	00bfffc4 	movi	r2,-1
 1016b08:	18801626 	beq	r3,r2,1016b64 <__sigtramp_r+0x94>
 1016b0c:	00800044 	movi	r2,1
 1016b10:	18800d26 	beq	r3,r2,1016b48 <__sigtramp_r+0x78>
 1016b14:	20000015 	stw	zero,0(r4)
 1016b18:	2809883a 	mov	r4,r5
 1016b1c:	183ee83a 	callr	r3
 1016b20:	0005883a 	mov	r2,zero
 1016b24:	dfc00217 	ldw	ra,8(sp)
 1016b28:	dc000117 	ldw	r16,4(sp)
 1016b2c:	dec00304 	addi	sp,sp,12
 1016b30:	f800283a 	ret
 1016b34:	00bfffc4 	movi	r2,-1
 1016b38:	dfc00217 	ldw	ra,8(sp)
 1016b3c:	dc000117 	ldw	r16,4(sp)
 1016b40:	dec00304 	addi	sp,sp,12
 1016b44:	f800283a 	ret
 1016b48:	008000c4 	movi	r2,3
 1016b4c:	dfc00217 	ldw	ra,8(sp)
 1016b50:	dc000117 	ldw	r16,4(sp)
 1016b54:	dec00304 	addi	sp,sp,12
 1016b58:	f800283a 	ret
 1016b5c:	00800044 	movi	r2,1
 1016b60:	003ff006 	br	1016b24 <__sigtramp_r+0x54>
 1016b64:	00800084 	movi	r2,2
 1016b68:	003fee06 	br	1016b24 <__sigtramp_r+0x54>
 1016b6c:	d9400015 	stw	r5,0(sp)
 1016b70:	1016a5c0 	call	1016a5c <_init_signal_r>
 1016b74:	d9400017 	ldw	r5,0(sp)
 1016b78:	103fee1e 	bne	r2,zero,1016b34 <__sigtramp_r+0x64>
 1016b7c:	80c0b717 	ldw	r3,732(r16)
 1016b80:	003fdb06 	br	1016af0 <__sigtramp_r+0x20>

01016b84 <__sigtramp>:
 1016b84:	008040b4 	movhi	r2,258
 1016b88:	10a8f804 	addi	r2,r2,-23584
 1016b8c:	200b883a 	mov	r5,r4
 1016b90:	11000017 	ldw	r4,0(r2)
 1016b94:	1016ad01 	jmpi	1016ad0 <__sigtramp_r>

01016b98 <_signal_r>:
 1016b98:	defffc04 	addi	sp,sp,-16
 1016b9c:	008007c4 	movi	r2,31
 1016ba0:	dc800215 	stw	r18,8(sp)
 1016ba4:	dc400115 	stw	r17,4(sp)
 1016ba8:	dc000015 	stw	r16,0(sp)
 1016bac:	dfc00315 	stw	ra,12(sp)
 1016bb0:	2823883a 	mov	r17,r5
 1016bb4:	00ffffc4 	movi	r3,-1
 1016bb8:	3025883a 	mov	r18,r6
 1016bbc:	2021883a 	mov	r16,r4
 1016bc0:	1140092e 	bgeu	r2,r5,1016be8 <_signal_r+0x50>
 1016bc4:	00800584 	movi	r2,22
 1016bc8:	20800015 	stw	r2,0(r4)
 1016bcc:	1805883a 	mov	r2,r3
 1016bd0:	dfc00317 	ldw	ra,12(sp)
 1016bd4:	dc800217 	ldw	r18,8(sp)
 1016bd8:	dc400117 	ldw	r17,4(sp)
 1016bdc:	dc000017 	ldw	r16,0(sp)
 1016be0:	dec00404 	addi	sp,sp,16
 1016be4:	f800283a 	ret
 1016be8:	2140b717 	ldw	r5,732(r4)
 1016bec:	28000c26 	beq	r5,zero,1016c20 <_signal_r+0x88>
 1016bf0:	8c45883a 	add	r2,r17,r17
 1016bf4:	1085883a 	add	r2,r2,r2
 1016bf8:	1145883a 	add	r2,r2,r5
 1016bfc:	10c00017 	ldw	r3,0(r2)
 1016c00:	14800015 	stw	r18,0(r2)
 1016c04:	1805883a 	mov	r2,r3
 1016c08:	dfc00317 	ldw	ra,12(sp)
 1016c0c:	dc800217 	ldw	r18,8(sp)
 1016c10:	dc400117 	ldw	r17,4(sp)
 1016c14:	dc000017 	ldw	r16,0(sp)
 1016c18:	dec00404 	addi	sp,sp,16
 1016c1c:	f800283a 	ret
 1016c20:	1016a5c0 	call	1016a5c <_init_signal_r>
 1016c24:	1000021e 	bne	r2,zero,1016c30 <_signal_r+0x98>
 1016c28:	8140b717 	ldw	r5,732(r16)
 1016c2c:	003ff006 	br	1016bf0 <_signal_r+0x58>
 1016c30:	00ffffc4 	movi	r3,-1
 1016c34:	003fe506 	br	1016bcc <_signal_r+0x34>

01016c38 <signal>:
 1016c38:	018040b4 	movhi	r6,258
 1016c3c:	31a8f804 	addi	r6,r6,-23584
 1016c40:	2007883a 	mov	r3,r4
 1016c44:	31000017 	ldw	r4,0(r6)
 1016c48:	280d883a 	mov	r6,r5
 1016c4c:	180b883a 	mov	r5,r3
 1016c50:	1016b981 	jmpi	1016b98 <_signal_r>

01016c54 <_getpid_r>:
 1016c54:	1017e4c1 	jmpi	1017e4c <getpid>

01016c58 <_kill_r>:
 1016c58:	defffd04 	addi	sp,sp,-12
 1016c5c:	dc000015 	stw	r16,0(sp)
 1016c60:	040040b4 	movhi	r16,258
 1016c64:	842fd104 	addi	r16,r16,-16572
 1016c68:	dc400115 	stw	r17,4(sp)
 1016c6c:	80000015 	stw	zero,0(r16)
 1016c70:	2023883a 	mov	r17,r4
 1016c74:	2809883a 	mov	r4,r5
 1016c78:	300b883a 	mov	r5,r6
 1016c7c:	dfc00215 	stw	ra,8(sp)
 1016c80:	1017e6c0 	call	1017e6c <kill>
 1016c84:	1007883a 	mov	r3,r2
 1016c88:	00bfffc4 	movi	r2,-1
 1016c8c:	18800626 	beq	r3,r2,1016ca8 <_kill_r+0x50>
 1016c90:	1805883a 	mov	r2,r3
 1016c94:	dfc00217 	ldw	ra,8(sp)
 1016c98:	dc400117 	ldw	r17,4(sp)
 1016c9c:	dc000017 	ldw	r16,0(sp)
 1016ca0:	dec00304 	addi	sp,sp,12
 1016ca4:	f800283a 	ret
 1016ca8:	80800017 	ldw	r2,0(r16)
 1016cac:	103ff826 	beq	r2,zero,1016c90 <_kill_r+0x38>
 1016cb0:	88800015 	stw	r2,0(r17)
 1016cb4:	1805883a 	mov	r2,r3
 1016cb8:	dfc00217 	ldw	ra,8(sp)
 1016cbc:	dc400117 	ldw	r17,4(sp)
 1016cc0:	dc000017 	ldw	r16,0(sp)
 1016cc4:	dec00304 	addi	sp,sp,12
 1016cc8:	f800283a 	ret

01016ccc <__sprint_r>:
 1016ccc:	30800217 	ldw	r2,8(r6)
 1016cd0:	defffe04 	addi	sp,sp,-8
 1016cd4:	dc000015 	stw	r16,0(sp)
 1016cd8:	dfc00115 	stw	ra,4(sp)
 1016cdc:	3021883a 	mov	r16,r6
 1016ce0:	0007883a 	mov	r3,zero
 1016ce4:	1000061e 	bne	r2,zero,1016d00 <__sprint_r+0x34>
 1016ce8:	1805883a 	mov	r2,r3
 1016cec:	30000115 	stw	zero,4(r6)
 1016cf0:	dfc00117 	ldw	ra,4(sp)
 1016cf4:	dc000017 	ldw	r16,0(sp)
 1016cf8:	dec00204 	addi	sp,sp,8
 1016cfc:	f800283a 	ret
 1016d00:	10062200 	call	1006220 <__sfvwrite_r>
 1016d04:	1007883a 	mov	r3,r2
 1016d08:	1805883a 	mov	r2,r3
 1016d0c:	80000115 	stw	zero,4(r16)
 1016d10:	80000215 	stw	zero,8(r16)
 1016d14:	dfc00117 	ldw	ra,4(sp)
 1016d18:	dc000017 	ldw	r16,0(sp)
 1016d1c:	dec00204 	addi	sp,sp,8
 1016d20:	f800283a 	ret

01016d24 <___vfiprintf_internal_r>:
 1016d24:	defeb604 	addi	sp,sp,-1320
 1016d28:	dd814615 	stw	r22,1304(sp)
 1016d2c:	dd414515 	stw	r21,1300(sp)
 1016d30:	dc014015 	stw	r16,1280(sp)
 1016d34:	dfc14915 	stw	ra,1316(sp)
 1016d38:	df014815 	stw	fp,1312(sp)
 1016d3c:	ddc14715 	stw	r23,1308(sp)
 1016d40:	dd014415 	stw	r20,1296(sp)
 1016d44:	dcc14315 	stw	r19,1292(sp)
 1016d48:	dc814215 	stw	r18,1288(sp)
 1016d4c:	dc414115 	stw	r17,1284(sp)
 1016d50:	202d883a 	mov	r22,r4
 1016d54:	282b883a 	mov	r21,r5
 1016d58:	3021883a 	mov	r16,r6
 1016d5c:	20000226 	beq	r4,zero,1016d68 <___vfiprintf_internal_r+0x44>
 1016d60:	20800e17 	ldw	r2,56(r4)
 1016d64:	1001bc26 	beq	r2,zero,1017458 <___vfiprintf_internal_r+0x734>
 1016d68:	a880030b 	ldhu	r2,12(r21)
 1016d6c:	1080020c 	andi	r2,r2,8
 1016d70:	1001cb26 	beq	r2,zero,10174a0 <___vfiprintf_internal_r+0x77c>
 1016d74:	a8800417 	ldw	r2,16(r21)
 1016d78:	1001c926 	beq	r2,zero,10174a0 <___vfiprintf_internal_r+0x77c>
 1016d7c:	aa00030b 	ldhu	r8,12(r21)
 1016d80:	00800284 	movi	r2,10
 1016d84:	40c0068c 	andi	r3,r8,26
 1016d88:	18802f1e 	bne	r3,r2,1016e48 <___vfiprintf_internal_r+0x124>
 1016d8c:	a880038f 	ldh	r2,14(r21)
 1016d90:	10002d16 	blt	r2,zero,1016e48 <___vfiprintf_internal_r+0x124>
 1016d94:	aa40038b 	ldhu	r9,14(r21)
 1016d98:	aa800717 	ldw	r10,28(r21)
 1016d9c:	aac00917 	ldw	r11,36(r21)
 1016da0:	dc401e04 	addi	r17,sp,120
 1016da4:	d8803504 	addi	r2,sp,212
 1016da8:	00c10004 	movi	r3,1024
 1016dac:	423fff4c 	andi	r8,r8,65533
 1016db0:	800d883a 	mov	r6,r16
 1016db4:	b009883a 	mov	r4,r22
 1016db8:	880b883a 	mov	r5,r17
 1016dbc:	da00210d 	sth	r8,132(sp)
 1016dc0:	da40218d 	sth	r9,134(sp)
 1016dc4:	da802515 	stw	r10,148(sp)
 1016dc8:	dac02715 	stw	r11,156(sp)
 1016dcc:	d8802215 	stw	r2,136(sp)
 1016dd0:	d8c02315 	stw	r3,140(sp)
 1016dd4:	d8801e15 	stw	r2,120(sp)
 1016dd8:	d8c02015 	stw	r3,128(sp)
 1016ddc:	d8002415 	stw	zero,144(sp)
 1016de0:	1016d240 	call	1016d24 <___vfiprintf_internal_r>
 1016de4:	d8813a15 	stw	r2,1256(sp)
 1016de8:	10000416 	blt	r2,zero,1016dfc <___vfiprintf_internal_r+0xd8>
 1016dec:	b009883a 	mov	r4,r22
 1016df0:	880b883a 	mov	r5,r17
 1016df4:	10056b40 	call	10056b4 <_fflush_r>
 1016df8:	1001b01e 	bne	r2,zero,10174bc <___vfiprintf_internal_r+0x798>
 1016dfc:	d880210b 	ldhu	r2,132(sp)
 1016e00:	1080100c 	andi	r2,r2,64
 1016e04:	10000326 	beq	r2,zero,1016e14 <___vfiprintf_internal_r+0xf0>
 1016e08:	a880030b 	ldhu	r2,12(r21)
 1016e0c:	10801014 	ori	r2,r2,64
 1016e10:	a880030d 	sth	r2,12(r21)
 1016e14:	d8813a17 	ldw	r2,1256(sp)
 1016e18:	dfc14917 	ldw	ra,1316(sp)
 1016e1c:	df014817 	ldw	fp,1312(sp)
 1016e20:	ddc14717 	ldw	r23,1308(sp)
 1016e24:	dd814617 	ldw	r22,1304(sp)
 1016e28:	dd414517 	ldw	r21,1300(sp)
 1016e2c:	dd014417 	ldw	r20,1296(sp)
 1016e30:	dcc14317 	ldw	r19,1292(sp)
 1016e34:	dc814217 	ldw	r18,1288(sp)
 1016e38:	dc414117 	ldw	r17,1284(sp)
 1016e3c:	dc014017 	ldw	r16,1280(sp)
 1016e40:	dec14a04 	addi	sp,sp,1320
 1016e44:	f800283a 	ret
 1016e48:	d8c00e04 	addi	r3,sp,56
 1016e4c:	8029883a 	mov	r20,r16
 1016e50:	d8c00115 	stw	r3,4(sp)
 1016e54:	d8000315 	stw	zero,12(sp)
 1016e58:	d8000215 	stw	zero,8(sp)
 1016e5c:	1825883a 	mov	r18,r3
 1016e60:	d8013a15 	stw	zero,1256(sp)
 1016e64:	d8013615 	stw	zero,1240(sp)
 1016e68:	a0800007 	ldb	r2,0(r20)
 1016e6c:	10001926 	beq	r2,zero,1016ed4 <___vfiprintf_internal_r+0x1b0>
 1016e70:	00c00944 	movi	r3,37
 1016e74:	10c01726 	beq	r2,r3,1016ed4 <___vfiprintf_internal_r+0x1b0>
 1016e78:	a021883a 	mov	r16,r20
 1016e7c:	00000106 	br	1016e84 <___vfiprintf_internal_r+0x160>
 1016e80:	10c00326 	beq	r2,r3,1016e90 <___vfiprintf_internal_r+0x16c>
 1016e84:	84000044 	addi	r16,r16,1
 1016e88:	80800007 	ldb	r2,0(r16)
 1016e8c:	103ffc1e 	bne	r2,zero,1016e80 <___vfiprintf_internal_r+0x15c>
 1016e90:	8523c83a 	sub	r17,r16,r20
 1016e94:	88000e26 	beq	r17,zero,1016ed0 <___vfiprintf_internal_r+0x1ac>
 1016e98:	d9400317 	ldw	r5,12(sp)
 1016e9c:	d9000217 	ldw	r4,8(sp)
 1016ea0:	008001c4 	movi	r2,7
 1016ea4:	2c4b883a 	add	r5,r5,r17
 1016ea8:	21000044 	addi	r4,r4,1
 1016eac:	95000015 	stw	r20,0(r18)
 1016eb0:	d9400315 	stw	r5,12(sp)
 1016eb4:	94400115 	stw	r17,4(r18)
 1016eb8:	d9000215 	stw	r4,8(sp)
 1016ebc:	1101e816 	blt	r2,r4,1017660 <___vfiprintf_internal_r+0x93c>
 1016ec0:	94800204 	addi	r18,r18,8
 1016ec4:	d9013a17 	ldw	r4,1256(sp)
 1016ec8:	2449883a 	add	r4,r4,r17
 1016ecc:	d9013a15 	stw	r4,1256(sp)
 1016ed0:	8029883a 	mov	r20,r16
 1016ed4:	a0800007 	ldb	r2,0(r20)
 1016ed8:	10012e26 	beq	r2,zero,1017394 <___vfiprintf_internal_r+0x670>
 1016edc:	a5000044 	addi	r20,r20,1
 1016ee0:	d8000005 	stb	zero,0(sp)
 1016ee4:	a0c00007 	ldb	r3,0(r20)
 1016ee8:	05ffffc4 	movi	r23,-1
 1016eec:	d8013915 	stw	zero,1252(sp)
 1016ef0:	d8013b15 	stw	zero,1260(sp)
 1016ef4:	180b883a 	mov	r5,r3
 1016ef8:	a5000044 	addi	r20,r20,1
 1016efc:	28fff804 	addi	r3,r5,-32
 1016f00:	00801604 	movi	r2,88
 1016f04:	10c06036 	bltu	r2,r3,1017088 <___vfiprintf_internal_r+0x364>
 1016f08:	18c5883a 	add	r2,r3,r3
 1016f0c:	1085883a 	add	r2,r2,r2
 1016f10:	00c04074 	movhi	r3,257
 1016f14:	18dbc904 	addi	r3,r3,28452
 1016f18:	10c5883a 	add	r2,r2,r3
 1016f1c:	11000017 	ldw	r4,0(r2)
 1016f20:	2000683a 	jmp	r4
 1016f24:	0101778c 	andi	r4,zero,1502
 1016f28:	01017088 	cmpgei	r4,zero,1474
 1016f2c:	01017088 	cmpgei	r4,zero,1474
 1016f30:	01017834 	movhi	r4,1504
 1016f34:	01017088 	cmpgei	r4,zero,1474
 1016f38:	01017088 	cmpgei	r4,zero,1474
 1016f3c:	01017088 	cmpgei	r4,zero,1474
 1016f40:	01017088 	cmpgei	r4,zero,1474
 1016f44:	01017088 	cmpgei	r4,zero,1474
 1016f48:	01017088 	cmpgei	r4,zero,1474
 1016f4c:	01017714 	movui	r4,1500
 1016f50:	01017848 	cmpgei	r4,zero,1505
 1016f54:	01017088 	cmpgei	r4,zero,1474
 1016f58:	0101772c 	andhi	r4,zero,1500
 1016f5c:	010177e4 	muli	r4,zero,1503
 1016f60:	01017088 	cmpgei	r4,zero,1474
 1016f64:	010177d0 	cmplti	r4,zero,1503
 1016f68:	010177a4 	muli	r4,zero,1502
 1016f6c:	010177a4 	muli	r4,zero,1502
 1016f70:	010177a4 	muli	r4,zero,1502
 1016f74:	010177a4 	muli	r4,zero,1502
 1016f78:	010177a4 	muli	r4,zero,1502
 1016f7c:	010177a4 	muli	r4,zero,1502
 1016f80:	010177a4 	muli	r4,zero,1502
 1016f84:	010177a4 	muli	r4,zero,1502
 1016f88:	010177a4 	muli	r4,zero,1502
 1016f8c:	01017088 	cmpgei	r4,zero,1474
 1016f90:	01017088 	cmpgei	r4,zero,1474
 1016f94:	01017088 	cmpgei	r4,zero,1474
 1016f98:	01017088 	cmpgei	r4,zero,1474
 1016f9c:	01017088 	cmpgei	r4,zero,1474
 1016fa0:	01017088 	cmpgei	r4,zero,1474
 1016fa4:	01017088 	cmpgei	r4,zero,1474
 1016fa8:	01017088 	cmpgei	r4,zero,1474
 1016fac:	01017088 	cmpgei	r4,zero,1474
 1016fb0:	01017088 	cmpgei	r4,zero,1474
 1016fb4:	010174f0 	cmpltui	r4,zero,1491
 1016fb8:	01017088 	cmpgei	r4,zero,1474
 1016fbc:	01017088 	cmpgei	r4,zero,1474
 1016fc0:	01017088 	cmpgei	r4,zero,1474
 1016fc4:	01017088 	cmpgei	r4,zero,1474
 1016fc8:	01017088 	cmpgei	r4,zero,1474
 1016fcc:	01017088 	cmpgei	r4,zero,1474
 1016fd0:	01017088 	cmpgei	r4,zero,1474
 1016fd4:	01017088 	cmpgei	r4,zero,1474
 1016fd8:	01017088 	cmpgei	r4,zero,1474
 1016fdc:	01017088 	cmpgei	r4,zero,1474
 1016fe0:	010175a4 	muli	r4,zero,1494
 1016fe4:	01017088 	cmpgei	r4,zero,1474
 1016fe8:	01017088 	cmpgei	r4,zero,1474
 1016fec:	01017088 	cmpgei	r4,zero,1474
 1016ff0:	01017088 	cmpgei	r4,zero,1474
 1016ff4:	01017088 	cmpgei	r4,zero,1474
 1016ff8:	010175f0 	cmpltui	r4,zero,1495
 1016ffc:	01017088 	cmpgei	r4,zero,1474
 1017000:	01017088 	cmpgei	r4,zero,1474
 1017004:	010178e0 	cmpeqi	r4,zero,1507
 1017008:	01017088 	cmpgei	r4,zero,1474
 101700c:	01017088 	cmpgei	r4,zero,1474
 1017010:	01017088 	cmpgei	r4,zero,1474
 1017014:	01017088 	cmpgei	r4,zero,1474
 1017018:	01017088 	cmpgei	r4,zero,1474
 101701c:	01017088 	cmpgei	r4,zero,1474
 1017020:	01017088 	cmpgei	r4,zero,1474
 1017024:	01017088 	cmpgei	r4,zero,1474
 1017028:	01017088 	cmpgei	r4,zero,1474
 101702c:	01017088 	cmpgei	r4,zero,1474
 1017030:	010178b8 	rdprs	r4,zero,1506
 1017034:	010174fc 	xorhi	r4,zero,1491
 1017038:	01017088 	cmpgei	r4,zero,1474
 101703c:	01017088 	cmpgei	r4,zero,1474
 1017040:	01017088 	cmpgei	r4,zero,1474
 1017044:	010179c4 	movi	r4,1511
 1017048:	010174fc 	xorhi	r4,zero,1491
 101704c:	01017088 	cmpgei	r4,zero,1474
 1017050:	01017088 	cmpgei	r4,zero,1474
 1017054:	01017918 	cmpnei	r4,zero,1508
 1017058:	01017088 	cmpgei	r4,zero,1474
 101705c:	010178f0 	cmpltui	r4,zero,1507
 1017060:	010175b0 	cmpltui	r4,zero,1494
 1017064:	01017980 	call	101798 <__alt_mem_onchip_memory2_0+0x101798>
 1017068:	010179d8 	cmpnei	r4,zero,1511
 101706c:	01017088 	cmpgei	r4,zero,1474
 1017070:	01017934 	movhi	r4,1508
 1017074:	01017088 	cmpgei	r4,zero,1474
 1017078:	010175fc 	xorhi	r4,zero,1495
 101707c:	01017088 	cmpgei	r4,zero,1474
 1017080:	01017088 	cmpgei	r4,zero,1474
 1017084:	01017858 	cmpnei	r4,zero,1505
 1017088:	2800c226 	beq	r5,zero,1017394 <___vfiprintf_internal_r+0x670>
 101708c:	07000044 	movi	fp,1
 1017090:	d9000404 	addi	r4,sp,16
 1017094:	d9c13515 	stw	r7,1236(sp)
 1017098:	d9013c15 	stw	r4,1264(sp)
 101709c:	df013715 	stw	fp,1244(sp)
 10170a0:	d9400405 	stb	r5,16(sp)
 10170a4:	d8000005 	stb	zero,0(sp)
 10170a8:	d8013815 	stw	zero,1248(sp)
 10170ac:	d9813b17 	ldw	r6,1260(sp)
 10170b0:	3080008c 	andi	r2,r6,2
 10170b4:	1005003a 	cmpeq	r2,r2,zero
 10170b8:	d8813e15 	stw	r2,1272(sp)
 10170bc:	1000011e 	bne	r2,zero,10170c4 <___vfiprintf_internal_r+0x3a0>
 10170c0:	e7000084 	addi	fp,fp,2
 10170c4:	d8813b17 	ldw	r2,1260(sp)
 10170c8:	1080210c 	andi	r2,r2,132
 10170cc:	d8813d15 	stw	r2,1268(sp)
 10170d0:	10002a1e 	bne	r2,zero,101717c <___vfiprintf_internal_r+0x458>
 10170d4:	d8c13917 	ldw	r3,1252(sp)
 10170d8:	1f21c83a 	sub	r16,r3,fp
 10170dc:	0400270e 	bge	zero,r16,101717c <___vfiprintf_internal_r+0x458>
 10170e0:	00800404 	movi	r2,16
 10170e4:	1402c80e 	bge	r2,r16,1017c08 <___vfiprintf_internal_r+0xee4>
 10170e8:	d9400317 	ldw	r5,12(sp)
 10170ec:	d9000217 	ldw	r4,8(sp)
 10170f0:	1023883a 	mov	r17,r2
 10170f4:	05c040b4 	movhi	r23,258
 10170f8:	bde24104 	addi	r23,r23,-30460
 10170fc:	04c001c4 	movi	r19,7
 1017100:	00000306 	br	1017110 <___vfiprintf_internal_r+0x3ec>
 1017104:	843ffc04 	addi	r16,r16,-16
 1017108:	94800204 	addi	r18,r18,8
 101710c:	8c00110e 	bge	r17,r16,1017154 <___vfiprintf_internal_r+0x430>
 1017110:	29400404 	addi	r5,r5,16
 1017114:	21000044 	addi	r4,r4,1
 1017118:	95c00015 	stw	r23,0(r18)
 101711c:	94400115 	stw	r17,4(r18)
 1017120:	d9400315 	stw	r5,12(sp)
 1017124:	d9000215 	stw	r4,8(sp)
 1017128:	993ff60e 	bge	r19,r4,1017104 <___vfiprintf_internal_r+0x3e0>
 101712c:	b009883a 	mov	r4,r22
 1017130:	a80b883a 	mov	r5,r21
 1017134:	d9800104 	addi	r6,sp,4
 1017138:	1016ccc0 	call	1016ccc <__sprint_r>
 101713c:	1000981e 	bne	r2,zero,10173a0 <___vfiprintf_internal_r+0x67c>
 1017140:	843ffc04 	addi	r16,r16,-16
 1017144:	d9400317 	ldw	r5,12(sp)
 1017148:	d9000217 	ldw	r4,8(sp)
 101714c:	dc800e04 	addi	r18,sp,56
 1017150:	8c3fef16 	blt	r17,r16,1017110 <___vfiprintf_internal_r+0x3ec>
 1017154:	2c0b883a 	add	r5,r5,r16
 1017158:	21000044 	addi	r4,r4,1
 101715c:	008001c4 	movi	r2,7
 1017160:	95c00015 	stw	r23,0(r18)
 1017164:	94000115 	stw	r16,4(r18)
 1017168:	d9400315 	stw	r5,12(sp)
 101716c:	d9000215 	stw	r4,8(sp)
 1017170:	11015616 	blt	r2,r4,10176cc <___vfiprintf_internal_r+0x9a8>
 1017174:	94800204 	addi	r18,r18,8
 1017178:	00000206 	br	1017184 <___vfiprintf_internal_r+0x460>
 101717c:	d9400317 	ldw	r5,12(sp)
 1017180:	d9000217 	ldw	r4,8(sp)
 1017184:	d8800007 	ldb	r2,0(sp)
 1017188:	10000a26 	beq	r2,zero,10171b4 <___vfiprintf_internal_r+0x490>
 101718c:	00800044 	movi	r2,1
 1017190:	29400044 	addi	r5,r5,1
 1017194:	21000044 	addi	r4,r4,1
 1017198:	90800115 	stw	r2,4(r18)
 101719c:	008001c4 	movi	r2,7
 10171a0:	96c00015 	stw	sp,0(r18)
 10171a4:	d9400315 	stw	r5,12(sp)
 10171a8:	d9000215 	stw	r4,8(sp)
 10171ac:	11013516 	blt	r2,r4,1017684 <___vfiprintf_internal_r+0x960>
 10171b0:	94800204 	addi	r18,r18,8
 10171b4:	d9813e17 	ldw	r6,1272(sp)
 10171b8:	30000b1e 	bne	r6,zero,10171e8 <___vfiprintf_internal_r+0x4c4>
 10171bc:	d8800044 	addi	r2,sp,1
 10171c0:	29400084 	addi	r5,r5,2
 10171c4:	21000044 	addi	r4,r4,1
 10171c8:	90800015 	stw	r2,0(r18)
 10171cc:	00c00084 	movi	r3,2
 10171d0:	008001c4 	movi	r2,7
 10171d4:	90c00115 	stw	r3,4(r18)
 10171d8:	d9400315 	stw	r5,12(sp)
 10171dc:	d9000215 	stw	r4,8(sp)
 10171e0:	11013116 	blt	r2,r4,10176a8 <___vfiprintf_internal_r+0x984>
 10171e4:	94800204 	addi	r18,r18,8
 10171e8:	d8c13d17 	ldw	r3,1268(sp)
 10171ec:	00802004 	movi	r2,128
 10171f0:	18807126 	beq	r3,r2,10173b8 <___vfiprintf_internal_r+0x694>
 10171f4:	d8813817 	ldw	r2,1248(sp)
 10171f8:	d8c13717 	ldw	r3,1244(sp)
 10171fc:	10e1c83a 	sub	r16,r2,r3
 1017200:	0400240e 	bge	zero,r16,1017294 <___vfiprintf_internal_r+0x570>
 1017204:	00800404 	movi	r2,16
 1017208:	1402510e 	bge	r2,r16,1017b50 <___vfiprintf_internal_r+0xe2c>
 101720c:	1023883a 	mov	r17,r2
 1017210:	05c040b4 	movhi	r23,258
 1017214:	bde23d04 	addi	r23,r23,-30476
 1017218:	04c001c4 	movi	r19,7
 101721c:	00000306 	br	101722c <___vfiprintf_internal_r+0x508>
 1017220:	843ffc04 	addi	r16,r16,-16
 1017224:	94800204 	addi	r18,r18,8
 1017228:	8c00110e 	bge	r17,r16,1017270 <___vfiprintf_internal_r+0x54c>
 101722c:	29400404 	addi	r5,r5,16
 1017230:	21000044 	addi	r4,r4,1
 1017234:	95c00015 	stw	r23,0(r18)
 1017238:	94400115 	stw	r17,4(r18)
 101723c:	d9400315 	stw	r5,12(sp)
 1017240:	d9000215 	stw	r4,8(sp)
 1017244:	993ff60e 	bge	r19,r4,1017220 <___vfiprintf_internal_r+0x4fc>
 1017248:	b009883a 	mov	r4,r22
 101724c:	a80b883a 	mov	r5,r21
 1017250:	d9800104 	addi	r6,sp,4
 1017254:	1016ccc0 	call	1016ccc <__sprint_r>
 1017258:	1000511e 	bne	r2,zero,10173a0 <___vfiprintf_internal_r+0x67c>
 101725c:	843ffc04 	addi	r16,r16,-16
 1017260:	d9400317 	ldw	r5,12(sp)
 1017264:	d9000217 	ldw	r4,8(sp)
 1017268:	dc800e04 	addi	r18,sp,56
 101726c:	8c3fef16 	blt	r17,r16,101722c <___vfiprintf_internal_r+0x508>
 1017270:	2c0b883a 	add	r5,r5,r16
 1017274:	21000044 	addi	r4,r4,1
 1017278:	008001c4 	movi	r2,7
 101727c:	95c00015 	stw	r23,0(r18)
 1017280:	94000115 	stw	r16,4(r18)
 1017284:	d9400315 	stw	r5,12(sp)
 1017288:	d9000215 	stw	r4,8(sp)
 101728c:	1100eb16 	blt	r2,r4,101763c <___vfiprintf_internal_r+0x918>
 1017290:	94800204 	addi	r18,r18,8
 1017294:	d9813717 	ldw	r6,1244(sp)
 1017298:	d8813c17 	ldw	r2,1264(sp)
 101729c:	21000044 	addi	r4,r4,1
 10172a0:	298b883a 	add	r5,r5,r6
 10172a4:	90800015 	stw	r2,0(r18)
 10172a8:	008001c4 	movi	r2,7
 10172ac:	91800115 	stw	r6,4(r18)
 10172b0:	d9400315 	stw	r5,12(sp)
 10172b4:	d9000215 	stw	r4,8(sp)
 10172b8:	11006b16 	blt	r2,r4,1017468 <___vfiprintf_internal_r+0x744>
 10172bc:	90c00204 	addi	r3,r18,8
 10172c0:	d9013b17 	ldw	r4,1260(sp)
 10172c4:	2080010c 	andi	r2,r4,4
 10172c8:	10002726 	beq	r2,zero,1017368 <___vfiprintf_internal_r+0x644>
 10172cc:	d9813917 	ldw	r6,1252(sp)
 10172d0:	3721c83a 	sub	r16,r6,fp
 10172d4:	0400240e 	bge	zero,r16,1017368 <___vfiprintf_internal_r+0x644>
 10172d8:	00800404 	movi	r2,16
 10172dc:	1402720e 	bge	r2,r16,1017ca8 <___vfiprintf_internal_r+0xf84>
 10172e0:	d9000217 	ldw	r4,8(sp)
 10172e4:	1023883a 	mov	r17,r2
 10172e8:	05c040b4 	movhi	r23,258
 10172ec:	bde24104 	addi	r23,r23,-30460
 10172f0:	048001c4 	movi	r18,7
 10172f4:	00000306 	br	1017304 <___vfiprintf_internal_r+0x5e0>
 10172f8:	843ffc04 	addi	r16,r16,-16
 10172fc:	18c00204 	addi	r3,r3,8
 1017300:	8c00110e 	bge	r17,r16,1017348 <___vfiprintf_internal_r+0x624>
 1017304:	29400404 	addi	r5,r5,16
 1017308:	21000044 	addi	r4,r4,1
 101730c:	1dc00015 	stw	r23,0(r3)
 1017310:	1c400115 	stw	r17,4(r3)
 1017314:	d9400315 	stw	r5,12(sp)
 1017318:	d9000215 	stw	r4,8(sp)
 101731c:	913ff60e 	bge	r18,r4,10172f8 <___vfiprintf_internal_r+0x5d4>
 1017320:	b009883a 	mov	r4,r22
 1017324:	a80b883a 	mov	r5,r21
 1017328:	d9800104 	addi	r6,sp,4
 101732c:	1016ccc0 	call	1016ccc <__sprint_r>
 1017330:	10001b1e 	bne	r2,zero,10173a0 <___vfiprintf_internal_r+0x67c>
 1017334:	843ffc04 	addi	r16,r16,-16
 1017338:	d9400317 	ldw	r5,12(sp)
 101733c:	d9000217 	ldw	r4,8(sp)
 1017340:	d8c00e04 	addi	r3,sp,56
 1017344:	8c3fef16 	blt	r17,r16,1017304 <___vfiprintf_internal_r+0x5e0>
 1017348:	2c0b883a 	add	r5,r5,r16
 101734c:	21000044 	addi	r4,r4,1
 1017350:	008001c4 	movi	r2,7
 1017354:	1dc00015 	stw	r23,0(r3)
 1017358:	1c000115 	stw	r16,4(r3)
 101735c:	d9400315 	stw	r5,12(sp)
 1017360:	d9000215 	stw	r4,8(sp)
 1017364:	11005b16 	blt	r2,r4,10174d4 <___vfiprintf_internal_r+0x7b0>
 1017368:	d8813917 	ldw	r2,1252(sp)
 101736c:	1700010e 	bge	r2,fp,1017374 <___vfiprintf_internal_r+0x650>
 1017370:	e005883a 	mov	r2,fp
 1017374:	d8c13a17 	ldw	r3,1256(sp)
 1017378:	1887883a 	add	r3,r3,r2
 101737c:	d8c13a15 	stw	r3,1256(sp)
 1017380:	2800411e 	bne	r5,zero,1017488 <___vfiprintf_internal_r+0x764>
 1017384:	d9c13517 	ldw	r7,1236(sp)
 1017388:	dc800e04 	addi	r18,sp,56
 101738c:	d8000215 	stw	zero,8(sp)
 1017390:	003eb506 	br	1016e68 <___vfiprintf_internal_r+0x144>
 1017394:	d8800317 	ldw	r2,12(sp)
 1017398:	1002521e 	bne	r2,zero,1017ce4 <___vfiprintf_internal_r+0xfc0>
 101739c:	d8000215 	stw	zero,8(sp)
 10173a0:	a880030b 	ldhu	r2,12(r21)
 10173a4:	1080100c 	andi	r2,r2,64
 10173a8:	103e9a26 	beq	r2,zero,1016e14 <___vfiprintf_internal_r+0xf0>
 10173ac:	013fffc4 	movi	r4,-1
 10173b0:	d9013a15 	stw	r4,1256(sp)
 10173b4:	003e9706 	br	1016e14 <___vfiprintf_internal_r+0xf0>
 10173b8:	d9813917 	ldw	r6,1252(sp)
 10173bc:	3721c83a 	sub	r16,r6,fp
 10173c0:	043f8c0e 	bge	zero,r16,10171f4 <___vfiprintf_internal_r+0x4d0>
 10173c4:	00800404 	movi	r2,16
 10173c8:	14024c0e 	bge	r2,r16,1017cfc <___vfiprintf_internal_r+0xfd8>
 10173cc:	1023883a 	mov	r17,r2
 10173d0:	05c040b4 	movhi	r23,258
 10173d4:	bde23d04 	addi	r23,r23,-30476
 10173d8:	04c001c4 	movi	r19,7
 10173dc:	00000306 	br	10173ec <___vfiprintf_internal_r+0x6c8>
 10173e0:	843ffc04 	addi	r16,r16,-16
 10173e4:	94800204 	addi	r18,r18,8
 10173e8:	8c00110e 	bge	r17,r16,1017430 <___vfiprintf_internal_r+0x70c>
 10173ec:	29400404 	addi	r5,r5,16
 10173f0:	21000044 	addi	r4,r4,1
 10173f4:	95c00015 	stw	r23,0(r18)
 10173f8:	94400115 	stw	r17,4(r18)
 10173fc:	d9400315 	stw	r5,12(sp)
 1017400:	d9000215 	stw	r4,8(sp)
 1017404:	993ff60e 	bge	r19,r4,10173e0 <___vfiprintf_internal_r+0x6bc>
 1017408:	b009883a 	mov	r4,r22
 101740c:	a80b883a 	mov	r5,r21
 1017410:	d9800104 	addi	r6,sp,4
 1017414:	1016ccc0 	call	1016ccc <__sprint_r>
 1017418:	103fe11e 	bne	r2,zero,10173a0 <___vfiprintf_internal_r+0x67c>
 101741c:	843ffc04 	addi	r16,r16,-16
 1017420:	d9400317 	ldw	r5,12(sp)
 1017424:	d9000217 	ldw	r4,8(sp)
 1017428:	dc800e04 	addi	r18,sp,56
 101742c:	8c3fef16 	blt	r17,r16,10173ec <___vfiprintf_internal_r+0x6c8>
 1017430:	2c0b883a 	add	r5,r5,r16
 1017434:	21000044 	addi	r4,r4,1
 1017438:	008001c4 	movi	r2,7
 101743c:	95c00015 	stw	r23,0(r18)
 1017440:	94000115 	stw	r16,4(r18)
 1017444:	d9400315 	stw	r5,12(sp)
 1017448:	d9000215 	stw	r4,8(sp)
 101744c:	1100a816 	blt	r2,r4,10176f0 <___vfiprintf_internal_r+0x9cc>
 1017450:	94800204 	addi	r18,r18,8
 1017454:	003f6706 	br	10171f4 <___vfiprintf_internal_r+0x4d0>
 1017458:	d9c13f15 	stw	r7,1276(sp)
 101745c:	100594c0 	call	100594c <__sinit>
 1017460:	d9c13f17 	ldw	r7,1276(sp)
 1017464:	003e4006 	br	1016d68 <___vfiprintf_internal_r+0x44>
 1017468:	b009883a 	mov	r4,r22
 101746c:	a80b883a 	mov	r5,r21
 1017470:	d9800104 	addi	r6,sp,4
 1017474:	1016ccc0 	call	1016ccc <__sprint_r>
 1017478:	103fc91e 	bne	r2,zero,10173a0 <___vfiprintf_internal_r+0x67c>
 101747c:	d9400317 	ldw	r5,12(sp)
 1017480:	d8c00e04 	addi	r3,sp,56
 1017484:	003f8e06 	br	10172c0 <___vfiprintf_internal_r+0x59c>
 1017488:	b009883a 	mov	r4,r22
 101748c:	a80b883a 	mov	r5,r21
 1017490:	d9800104 	addi	r6,sp,4
 1017494:	1016ccc0 	call	1016ccc <__sprint_r>
 1017498:	103fba26 	beq	r2,zero,1017384 <___vfiprintf_internal_r+0x660>
 101749c:	003fc006 	br	10173a0 <___vfiprintf_internal_r+0x67c>
 10174a0:	b009883a 	mov	r4,r22
 10174a4:	a80b883a 	mov	r5,r21
 10174a8:	d9c13f15 	stw	r7,1276(sp)
 10174ac:	1003dac0 	call	1003dac <__swsetup_r>
 10174b0:	d9c13f17 	ldw	r7,1276(sp)
 10174b4:	103e3126 	beq	r2,zero,1016d7c <___vfiprintf_internal_r+0x58>
 10174b8:	003fbc06 	br	10173ac <___vfiprintf_internal_r+0x688>
 10174bc:	00bfffc4 	movi	r2,-1
 10174c0:	d8813a15 	stw	r2,1256(sp)
 10174c4:	d880210b 	ldhu	r2,132(sp)
 10174c8:	1080100c 	andi	r2,r2,64
 10174cc:	103e4e1e 	bne	r2,zero,1016e08 <___vfiprintf_internal_r+0xe4>
 10174d0:	003e5006 	br	1016e14 <___vfiprintf_internal_r+0xf0>
 10174d4:	b009883a 	mov	r4,r22
 10174d8:	a80b883a 	mov	r5,r21
 10174dc:	d9800104 	addi	r6,sp,4
 10174e0:	1016ccc0 	call	1016ccc <__sprint_r>
 10174e4:	103fae1e 	bne	r2,zero,10173a0 <___vfiprintf_internal_r+0x67c>
 10174e8:	d9400317 	ldw	r5,12(sp)
 10174ec:	003f9e06 	br	1017368 <___vfiprintf_internal_r+0x644>
 10174f0:	d8813b17 	ldw	r2,1260(sp)
 10174f4:	10800414 	ori	r2,r2,16
 10174f8:	d8813b15 	stw	r2,1260(sp)
 10174fc:	d8c13b17 	ldw	r3,1260(sp)
 1017500:	1880080c 	andi	r2,r3,32
 1017504:	10009c1e 	bne	r2,zero,1017778 <___vfiprintf_internal_r+0xa54>
 1017508:	d9413b17 	ldw	r5,1260(sp)
 101750c:	2880040c 	andi	r2,r5,16
 1017510:	1001b21e 	bne	r2,zero,1017bdc <___vfiprintf_internal_r+0xeb8>
 1017514:	d9813b17 	ldw	r6,1260(sp)
 1017518:	3080100c 	andi	r2,r6,64
 101751c:	1001af26 	beq	r2,zero,1017bdc <___vfiprintf_internal_r+0xeb8>
 1017520:	3880000f 	ldh	r2,0(r7)
 1017524:	39c00104 	addi	r7,r7,4
 1017528:	d9c13515 	stw	r7,1236(sp)
 101752c:	1023d7fa 	srai	r17,r2,31
 1017530:	1021883a 	mov	r16,r2
 1017534:	8801e016 	blt	r17,zero,1017cb8 <___vfiprintf_internal_r+0xf94>
 1017538:	01000044 	movi	r4,1
 101753c:	b8000416 	blt	r23,zero,1017550 <___vfiprintf_internal_r+0x82c>
 1017540:	d9413b17 	ldw	r5,1260(sp)
 1017544:	00bfdfc4 	movi	r2,-129
 1017548:	288a703a 	and	r5,r5,r2
 101754c:	d9413b15 	stw	r5,1260(sp)
 1017550:	8444b03a 	or	r2,r16,r17
 1017554:	1001271e 	bne	r2,zero,10179f4 <___vfiprintf_internal_r+0xcd0>
 1017558:	b801261e 	bne	r23,zero,10179f4 <___vfiprintf_internal_r+0xcd0>
 101755c:	20803fcc 	andi	r2,r4,255
 1017560:	10017e26 	beq	r2,zero,1017b5c <___vfiprintf_internal_r+0xe38>
 1017564:	d8c00e04 	addi	r3,sp,56
 1017568:	df000404 	addi	fp,sp,16
 101756c:	d8c13c15 	stw	r3,1264(sp)
 1017570:	d8c13c17 	ldw	r3,1264(sp)
 1017574:	ddc13815 	stw	r23,1248(sp)
 1017578:	e0c5c83a 	sub	r2,fp,r3
 101757c:	10800a04 	addi	r2,r2,40
 1017580:	d8813715 	stw	r2,1244(sp)
 1017584:	df013817 	ldw	fp,1248(sp)
 1017588:	d9413717 	ldw	r5,1244(sp)
 101758c:	e140010e 	bge	fp,r5,1017594 <___vfiprintf_internal_r+0x870>
 1017590:	2839883a 	mov	fp,r5
 1017594:	d8800007 	ldb	r2,0(sp)
 1017598:	103ec426 	beq	r2,zero,10170ac <___vfiprintf_internal_r+0x388>
 101759c:	e7000044 	addi	fp,fp,1
 10175a0:	003ec206 	br	10170ac <___vfiprintf_internal_r+0x388>
 10175a4:	d9813b17 	ldw	r6,1260(sp)
 10175a8:	31800414 	ori	r6,r6,16
 10175ac:	d9813b15 	stw	r6,1260(sp)
 10175b0:	d8c13b17 	ldw	r3,1260(sp)
 10175b4:	1880080c 	andi	r2,r3,32
 10175b8:	1000681e 	bne	r2,zero,101775c <___vfiprintf_internal_r+0xa38>
 10175bc:	d9413b17 	ldw	r5,1260(sp)
 10175c0:	2880040c 	andi	r2,r5,16
 10175c4:	1001771e 	bne	r2,zero,1017ba4 <___vfiprintf_internal_r+0xe80>
 10175c8:	d9813b17 	ldw	r6,1260(sp)
 10175cc:	3080100c 	andi	r2,r6,64
 10175d0:	10017426 	beq	r2,zero,1017ba4 <___vfiprintf_internal_r+0xe80>
 10175d4:	3c00000b 	ldhu	r16,0(r7)
 10175d8:	0009883a 	mov	r4,zero
 10175dc:	39c00104 	addi	r7,r7,4
 10175e0:	0023883a 	mov	r17,zero
 10175e4:	d9c13515 	stw	r7,1236(sp)
 10175e8:	d8000005 	stb	zero,0(sp)
 10175ec:	003fd306 	br	101753c <___vfiprintf_internal_r+0x818>
 10175f0:	d8813b17 	ldw	r2,1260(sp)
 10175f4:	10800414 	ori	r2,r2,16
 10175f8:	d8813b15 	stw	r2,1260(sp)
 10175fc:	d8c13b17 	ldw	r3,1260(sp)
 1017600:	1880080c 	andi	r2,r3,32
 1017604:	10004e1e 	bne	r2,zero,1017740 <___vfiprintf_internal_r+0xa1c>
 1017608:	d9413b17 	ldw	r5,1260(sp)
 101760c:	2880040c 	andi	r2,r5,16
 1017610:	10016b1e 	bne	r2,zero,1017bc0 <___vfiprintf_internal_r+0xe9c>
 1017614:	d9813b17 	ldw	r6,1260(sp)
 1017618:	3080100c 	andi	r2,r6,64
 101761c:	10016826 	beq	r2,zero,1017bc0 <___vfiprintf_internal_r+0xe9c>
 1017620:	3c00000b 	ldhu	r16,0(r7)
 1017624:	01000044 	movi	r4,1
 1017628:	39c00104 	addi	r7,r7,4
 101762c:	0023883a 	mov	r17,zero
 1017630:	d9c13515 	stw	r7,1236(sp)
 1017634:	d8000005 	stb	zero,0(sp)
 1017638:	003fc006 	br	101753c <___vfiprintf_internal_r+0x818>
 101763c:	b009883a 	mov	r4,r22
 1017640:	a80b883a 	mov	r5,r21
 1017644:	d9800104 	addi	r6,sp,4
 1017648:	1016ccc0 	call	1016ccc <__sprint_r>
 101764c:	103f541e 	bne	r2,zero,10173a0 <___vfiprintf_internal_r+0x67c>
 1017650:	d9400317 	ldw	r5,12(sp)
 1017654:	d9000217 	ldw	r4,8(sp)
 1017658:	dc800e04 	addi	r18,sp,56
 101765c:	003f0d06 	br	1017294 <___vfiprintf_internal_r+0x570>
 1017660:	b009883a 	mov	r4,r22
 1017664:	a80b883a 	mov	r5,r21
 1017668:	d9800104 	addi	r6,sp,4
 101766c:	d9c13f15 	stw	r7,1276(sp)
 1017670:	1016ccc0 	call	1016ccc <__sprint_r>
 1017674:	d9c13f17 	ldw	r7,1276(sp)
 1017678:	103f491e 	bne	r2,zero,10173a0 <___vfiprintf_internal_r+0x67c>
 101767c:	dc800e04 	addi	r18,sp,56
 1017680:	003e1006 	br	1016ec4 <___vfiprintf_internal_r+0x1a0>
 1017684:	b009883a 	mov	r4,r22
 1017688:	a80b883a 	mov	r5,r21
 101768c:	d9800104 	addi	r6,sp,4
 1017690:	1016ccc0 	call	1016ccc <__sprint_r>
 1017694:	103f421e 	bne	r2,zero,10173a0 <___vfiprintf_internal_r+0x67c>
 1017698:	d9400317 	ldw	r5,12(sp)
 101769c:	d9000217 	ldw	r4,8(sp)
 10176a0:	dc800e04 	addi	r18,sp,56
 10176a4:	003ec306 	br	10171b4 <___vfiprintf_internal_r+0x490>
 10176a8:	b009883a 	mov	r4,r22
 10176ac:	a80b883a 	mov	r5,r21
 10176b0:	d9800104 	addi	r6,sp,4
 10176b4:	1016ccc0 	call	1016ccc <__sprint_r>
 10176b8:	103f391e 	bne	r2,zero,10173a0 <___vfiprintf_internal_r+0x67c>
 10176bc:	d9400317 	ldw	r5,12(sp)
 10176c0:	d9000217 	ldw	r4,8(sp)
 10176c4:	dc800e04 	addi	r18,sp,56
 10176c8:	003ec706 	br	10171e8 <___vfiprintf_internal_r+0x4c4>
 10176cc:	b009883a 	mov	r4,r22
 10176d0:	a80b883a 	mov	r5,r21
 10176d4:	d9800104 	addi	r6,sp,4
 10176d8:	1016ccc0 	call	1016ccc <__sprint_r>
 10176dc:	103f301e 	bne	r2,zero,10173a0 <___vfiprintf_internal_r+0x67c>
 10176e0:	d9400317 	ldw	r5,12(sp)
 10176e4:	d9000217 	ldw	r4,8(sp)
 10176e8:	dc800e04 	addi	r18,sp,56
 10176ec:	003ea506 	br	1017184 <___vfiprintf_internal_r+0x460>
 10176f0:	b009883a 	mov	r4,r22
 10176f4:	a80b883a 	mov	r5,r21
 10176f8:	d9800104 	addi	r6,sp,4
 10176fc:	1016ccc0 	call	1016ccc <__sprint_r>
 1017700:	103f271e 	bne	r2,zero,10173a0 <___vfiprintf_internal_r+0x67c>
 1017704:	d9400317 	ldw	r5,12(sp)
 1017708:	d9000217 	ldw	r4,8(sp)
 101770c:	dc800e04 	addi	r18,sp,56
 1017710:	003eb806 	br	10171f4 <___vfiprintf_internal_r+0x4d0>
 1017714:	38c00017 	ldw	r3,0(r7)
 1017718:	39c00104 	addi	r7,r7,4
 101771c:	d8c13915 	stw	r3,1252(sp)
 1017720:	1800b20e 	bge	r3,zero,10179ec <___vfiprintf_internal_r+0xcc8>
 1017724:	00c7c83a 	sub	r3,zero,r3
 1017728:	d8c13915 	stw	r3,1252(sp)
 101772c:	d9013b17 	ldw	r4,1260(sp)
 1017730:	a0c00007 	ldb	r3,0(r20)
 1017734:	21000114 	ori	r4,r4,4
 1017738:	d9013b15 	stw	r4,1260(sp)
 101773c:	003ded06 	br	1016ef4 <___vfiprintf_internal_r+0x1d0>
 1017740:	3c000017 	ldw	r16,0(r7)
 1017744:	3c400117 	ldw	r17,4(r7)
 1017748:	39000204 	addi	r4,r7,8
 101774c:	d9013515 	stw	r4,1236(sp)
 1017750:	01000044 	movi	r4,1
 1017754:	d8000005 	stb	zero,0(sp)
 1017758:	003f7806 	br	101753c <___vfiprintf_internal_r+0x818>
 101775c:	3c000017 	ldw	r16,0(r7)
 1017760:	3c400117 	ldw	r17,4(r7)
 1017764:	39000204 	addi	r4,r7,8
 1017768:	d9013515 	stw	r4,1236(sp)
 101776c:	0009883a 	mov	r4,zero
 1017770:	d8000005 	stb	zero,0(sp)
 1017774:	003f7106 	br	101753c <___vfiprintf_internal_r+0x818>
 1017778:	3c000017 	ldw	r16,0(r7)
 101777c:	3c400117 	ldw	r17,4(r7)
 1017780:	39000204 	addi	r4,r7,8
 1017784:	d9013515 	stw	r4,1236(sp)
 1017788:	003f6a06 	br	1017534 <___vfiprintf_internal_r+0x810>
 101778c:	d8800007 	ldb	r2,0(sp)
 1017790:	1000961e 	bne	r2,zero,10179ec <___vfiprintf_internal_r+0xcc8>
 1017794:	00800804 	movi	r2,32
 1017798:	d8800005 	stb	r2,0(sp)
 101779c:	a0c00007 	ldb	r3,0(r20)
 10177a0:	003dd406 	br	1016ef4 <___vfiprintf_internal_r+0x1d0>
 10177a4:	0007883a 	mov	r3,zero
 10177a8:	01000244 	movi	r4,9
 10177ac:	188002a4 	muli	r2,r3,10
 10177b0:	2885883a 	add	r2,r5,r2
 10177b4:	a1400007 	ldb	r5,0(r20)
 10177b8:	10fff404 	addi	r3,r2,-48
 10177bc:	a5000044 	addi	r20,r20,1
 10177c0:	28bff404 	addi	r2,r5,-48
 10177c4:	20bff92e 	bgeu	r4,r2,10177ac <___vfiprintf_internal_r+0xa88>
 10177c8:	d8c13915 	stw	r3,1252(sp)
 10177cc:	003dcb06 	br	1016efc <___vfiprintf_internal_r+0x1d8>
 10177d0:	d9413b17 	ldw	r5,1260(sp)
 10177d4:	a0c00007 	ldb	r3,0(r20)
 10177d8:	29402014 	ori	r5,r5,128
 10177dc:	d9413b15 	stw	r5,1260(sp)
 10177e0:	003dc406 	br	1016ef4 <___vfiprintf_internal_r+0x1d0>
 10177e4:	a0c00007 	ldb	r3,0(r20)
 10177e8:	00800a84 	movi	r2,42
 10177ec:	a5000044 	addi	r20,r20,1
 10177f0:	18816f26 	beq	r3,r2,1017db0 <___vfiprintf_internal_r+0x108c>
 10177f4:	180b883a 	mov	r5,r3
 10177f8:	18bff404 	addi	r2,r3,-48
 10177fc:	00c00244 	movi	r3,9
 1017800:	18816936 	bltu	r3,r2,1017da8 <___vfiprintf_internal_r+0x1084>
 1017804:	000d883a 	mov	r6,zero
 1017808:	308002a4 	muli	r2,r6,10
 101780c:	1145883a 	add	r2,r2,r5
 1017810:	a1400007 	ldb	r5,0(r20)
 1017814:	11bff404 	addi	r6,r2,-48
 1017818:	a5000044 	addi	r20,r20,1
 101781c:	28bff404 	addi	r2,r5,-48
 1017820:	18bff92e 	bgeu	r3,r2,1017808 <___vfiprintf_internal_r+0xae4>
 1017824:	302f883a 	mov	r23,r6
 1017828:	303db40e 	bge	r6,zero,1016efc <___vfiprintf_internal_r+0x1d8>
 101782c:	05ffffc4 	movi	r23,-1
 1017830:	003db206 	br	1016efc <___vfiprintf_internal_r+0x1d8>
 1017834:	d8813b17 	ldw	r2,1260(sp)
 1017838:	a0c00007 	ldb	r3,0(r20)
 101783c:	10800054 	ori	r2,r2,1
 1017840:	d8813b15 	stw	r2,1260(sp)
 1017844:	003dab06 	br	1016ef4 <___vfiprintf_internal_r+0x1d0>
 1017848:	00800ac4 	movi	r2,43
 101784c:	d8800005 	stb	r2,0(sp)
 1017850:	a0c00007 	ldb	r3,0(r20)
 1017854:	003da706 	br	1016ef4 <___vfiprintf_internal_r+0x1d0>
 1017858:	018040b4 	movhi	r6,258
 101785c:	31a07004 	addi	r6,r6,-32320
 1017860:	d9813615 	stw	r6,1240(sp)
 1017864:	d8c13b17 	ldw	r3,1260(sp)
 1017868:	1880080c 	andi	r2,r3,32
 101786c:	1000c226 	beq	r2,zero,1017b78 <___vfiprintf_internal_r+0xe54>
 1017870:	3c000017 	ldw	r16,0(r7)
 1017874:	3c400117 	ldw	r17,4(r7)
 1017878:	39000204 	addi	r4,r7,8
 101787c:	d9013515 	stw	r4,1236(sp)
 1017880:	d9013b17 	ldw	r4,1260(sp)
 1017884:	2080004c 	andi	r2,r4,1
 1017888:	1005003a 	cmpeq	r2,r2,zero
 101788c:	1000931e 	bne	r2,zero,1017adc <___vfiprintf_internal_r+0xdb8>
 1017890:	8444b03a 	or	r2,r16,r17
 1017894:	10009126 	beq	r2,zero,1017adc <___vfiprintf_internal_r+0xdb8>
 1017898:	21000094 	ori	r4,r4,2
 101789c:	d9013b15 	stw	r4,1260(sp)
 10178a0:	00800c04 	movi	r2,48
 10178a4:	01000084 	movi	r4,2
 10178a8:	d8800045 	stb	r2,1(sp)
 10178ac:	d9400085 	stb	r5,2(sp)
 10178b0:	d8000005 	stb	zero,0(sp)
 10178b4:	003f2106 	br	101753c <___vfiprintf_internal_r+0x818>
 10178b8:	38800017 	ldw	r2,0(r7)
 10178bc:	07000044 	movi	fp,1
 10178c0:	39c00104 	addi	r7,r7,4
 10178c4:	d9800404 	addi	r6,sp,16
 10178c8:	d9c13515 	stw	r7,1236(sp)
 10178cc:	d9813c15 	stw	r6,1264(sp)
 10178d0:	df013715 	stw	fp,1244(sp)
 10178d4:	d8800405 	stb	r2,16(sp)
 10178d8:	d8000005 	stb	zero,0(sp)
 10178dc:	003df206 	br	10170a8 <___vfiprintf_internal_r+0x384>
 10178e0:	008040b4 	movhi	r2,258
 10178e4:	10a07b04 	addi	r2,r2,-32276
 10178e8:	d8813615 	stw	r2,1240(sp)
 10178ec:	003fdd06 	br	1017864 <___vfiprintf_internal_r+0xb40>
 10178f0:	d8c13b17 	ldw	r3,1260(sp)
 10178f4:	1880080c 	andi	r2,r3,32
 10178f8:	1000e326 	beq	r2,zero,1017c88 <___vfiprintf_internal_r+0xf64>
 10178fc:	d9013a17 	ldw	r4,1256(sp)
 1017900:	38800017 	ldw	r2,0(r7)
 1017904:	39c00104 	addi	r7,r7,4
 1017908:	2007d7fa 	srai	r3,r4,31
 101790c:	11000015 	stw	r4,0(r2)
 1017910:	10c00115 	stw	r3,4(r2)
 1017914:	003d5406 	br	1016e68 <___vfiprintf_internal_r+0x144>
 1017918:	a0c00007 	ldb	r3,0(r20)
 101791c:	00801b04 	movi	r2,108
 1017920:	1880f926 	beq	r3,r2,1017d08 <___vfiprintf_internal_r+0xfe4>
 1017924:	d9013b17 	ldw	r4,1260(sp)
 1017928:	21000414 	ori	r4,r4,16
 101792c:	d9013b15 	stw	r4,1260(sp)
 1017930:	003d7006 	br	1016ef4 <___vfiprintf_internal_r+0x1d0>
 1017934:	d8000005 	stb	zero,0(sp)
 1017938:	39000017 	ldw	r4,0(r7)
 101793c:	39c00104 	addi	r7,r7,4
 1017940:	d9c13515 	stw	r7,1236(sp)
 1017944:	d9013c15 	stw	r4,1264(sp)
 1017948:	20010226 	beq	r4,zero,1017d54 <___vfiprintf_internal_r+0x1030>
 101794c:	b800fc16 	blt	r23,zero,1017d40 <___vfiprintf_internal_r+0x101c>
 1017950:	d9013c17 	ldw	r4,1264(sp)
 1017954:	000b883a 	mov	r5,zero
 1017958:	b80d883a 	mov	r6,r23
 101795c:	10073000 	call	1007300 <memchr>
 1017960:	10000426 	beq	r2,zero,1017974 <___vfiprintf_internal_r+0xc50>
 1017964:	d9813c17 	ldw	r6,1264(sp)
 1017968:	1185c83a 	sub	r2,r2,r6
 101796c:	d8813715 	stw	r2,1244(sp)
 1017970:	b880010e 	bge	r23,r2,1017978 <___vfiprintf_internal_r+0xc54>
 1017974:	ddc13715 	stw	r23,1244(sp)
 1017978:	d8013815 	stw	zero,1248(sp)
 101797c:	003f0106 	br	1017584 <___vfiprintf_internal_r+0x860>
 1017980:	d8813b17 	ldw	r2,1260(sp)
 1017984:	3c000017 	ldw	r16,0(r7)
 1017988:	00c040b4 	movhi	r3,258
 101798c:	18e07004 	addi	r3,r3,-32320
 1017990:	10800094 	ori	r2,r2,2
 1017994:	d8813b15 	stw	r2,1260(sp)
 1017998:	39c00104 	addi	r7,r7,4
 101799c:	d8c13615 	stw	r3,1240(sp)
 10179a0:	00800c04 	movi	r2,48
 10179a4:	00c01e04 	movi	r3,120
 10179a8:	0023883a 	mov	r17,zero
 10179ac:	01000084 	movi	r4,2
 10179b0:	d9c13515 	stw	r7,1236(sp)
 10179b4:	d8800045 	stb	r2,1(sp)
 10179b8:	d8c00085 	stb	r3,2(sp)
 10179bc:	d8000005 	stb	zero,0(sp)
 10179c0:	003ede06 	br	101753c <___vfiprintf_internal_r+0x818>
 10179c4:	d9813b17 	ldw	r6,1260(sp)
 10179c8:	a0c00007 	ldb	r3,0(r20)
 10179cc:	31801014 	ori	r6,r6,64
 10179d0:	d9813b15 	stw	r6,1260(sp)
 10179d4:	003d4706 	br	1016ef4 <___vfiprintf_internal_r+0x1d0>
 10179d8:	d9413b17 	ldw	r5,1260(sp)
 10179dc:	a0c00007 	ldb	r3,0(r20)
 10179e0:	29400814 	ori	r5,r5,32
 10179e4:	d9413b15 	stw	r5,1260(sp)
 10179e8:	003d4206 	br	1016ef4 <___vfiprintf_internal_r+0x1d0>
 10179ec:	a0c00007 	ldb	r3,0(r20)
 10179f0:	003d4006 	br	1016ef4 <___vfiprintf_internal_r+0x1d0>
 10179f4:	20c03fcc 	andi	r3,r4,255
 10179f8:	00800044 	movi	r2,1
 10179fc:	18802b26 	beq	r3,r2,1017aac <___vfiprintf_internal_r+0xd88>
 1017a00:	18800b36 	bltu	r3,r2,1017a30 <___vfiprintf_internal_r+0xd0c>
 1017a04:	00800084 	movi	r2,2
 1017a08:	18808426 	beq	r3,r2,1017c1c <___vfiprintf_internal_r+0xef8>
 1017a0c:	010040b4 	movhi	r4,258
 1017a10:	21208004 	addi	r4,r4,-32256
 1017a14:	ddc13815 	stw	r23,1248(sp)
 1017a18:	10006900 	call	1000690 <strlen>
 1017a1c:	d8813715 	stw	r2,1244(sp)
 1017a20:	008040b4 	movhi	r2,258
 1017a24:	10a08004 	addi	r2,r2,-32256
 1017a28:	d8813c15 	stw	r2,1264(sp)
 1017a2c:	003ed506 	br	1017584 <___vfiprintf_internal_r+0x860>
 1017a30:	d8800e04 	addi	r2,sp,56
 1017a34:	df000404 	addi	fp,sp,16
 1017a38:	d8813c15 	stw	r2,1264(sp)
 1017a3c:	880a977a 	slli	r5,r17,29
 1017a40:	8004d0fa 	srli	r2,r16,3
 1017a44:	8806d0fa 	srli	r3,r17,3
 1017a48:	810001cc 	andi	r4,r16,7
 1017a4c:	2884b03a 	or	r2,r5,r2
 1017a50:	d9413c17 	ldw	r5,1264(sp)
 1017a54:	21000c04 	addi	r4,r4,48
 1017a58:	1021883a 	mov	r16,r2
 1017a5c:	297fffc4 	addi	r5,r5,-1
 1017a60:	d9413c15 	stw	r5,1264(sp)
 1017a64:	29000005 	stb	r4,0(r5)
 1017a68:	10cab03a 	or	r5,r2,r3
 1017a6c:	1823883a 	mov	r17,r3
 1017a70:	283ff21e 	bne	r5,zero,1017a3c <___vfiprintf_internal_r+0xd18>
 1017a74:	d9813b17 	ldw	r6,1260(sp)
 1017a78:	3080004c 	andi	r2,r6,1
 1017a7c:	1005003a 	cmpeq	r2,r2,zero
 1017a80:	103ebb1e 	bne	r2,zero,1017570 <___vfiprintf_internal_r+0x84c>
 1017a84:	20803fcc 	andi	r2,r4,255
 1017a88:	1080201c 	xori	r2,r2,128
 1017a8c:	10bfe004 	addi	r2,r2,-128
 1017a90:	00c00c04 	movi	r3,48
 1017a94:	10feb626 	beq	r2,r3,1017570 <___vfiprintf_internal_r+0x84c>
 1017a98:	d8813c17 	ldw	r2,1264(sp)
 1017a9c:	10bfffc4 	addi	r2,r2,-1
 1017aa0:	d8813c15 	stw	r2,1264(sp)
 1017aa4:	10c00005 	stb	r3,0(r2)
 1017aa8:	003eb106 	br	1017570 <___vfiprintf_internal_r+0x84c>
 1017aac:	88800068 	cmpgeui	r2,r17,1
 1017ab0:	10000d1e 	bne	r2,zero,1017ae8 <___vfiprintf_internal_r+0xdc4>
 1017ab4:	8800021e 	bne	r17,zero,1017ac0 <___vfiprintf_internal_r+0xd9c>
 1017ab8:	00800244 	movi	r2,9
 1017abc:	14000a36 	bltu	r2,r16,1017ae8 <___vfiprintf_internal_r+0xdc4>
 1017ac0:	d9800dc4 	addi	r6,sp,55
 1017ac4:	df000404 	addi	fp,sp,16
 1017ac8:	d9813c15 	stw	r6,1264(sp)
 1017acc:	d8c13c17 	ldw	r3,1264(sp)
 1017ad0:	80800c04 	addi	r2,r16,48
 1017ad4:	18800005 	stb	r2,0(r3)
 1017ad8:	003ea506 	br	1017570 <___vfiprintf_internal_r+0x84c>
 1017adc:	01000084 	movi	r4,2
 1017ae0:	d8000005 	stb	zero,0(sp)
 1017ae4:	003e9506 	br	101753c <___vfiprintf_internal_r+0x818>
 1017ae8:	df000404 	addi	fp,sp,16
 1017aec:	dcc00e04 	addi	r19,sp,56
 1017af0:	8009883a 	mov	r4,r16
 1017af4:	880b883a 	mov	r5,r17
 1017af8:	01800284 	movi	r6,10
 1017afc:	000f883a 	mov	r7,zero
 1017b00:	100cd400 	call	100cd40 <__umoddi3>
 1017b04:	12000c04 	addi	r8,r2,48
 1017b08:	9cffffc4 	addi	r19,r19,-1
 1017b0c:	8009883a 	mov	r4,r16
 1017b10:	880b883a 	mov	r5,r17
 1017b14:	01800284 	movi	r6,10
 1017b18:	000f883a 	mov	r7,zero
 1017b1c:	9a000005 	stb	r8,0(r19)
 1017b20:	100c7640 	call	100c764 <__udivdi3>
 1017b24:	1009883a 	mov	r4,r2
 1017b28:	1021883a 	mov	r16,r2
 1017b2c:	18800068 	cmpgeui	r2,r3,1
 1017b30:	1823883a 	mov	r17,r3
 1017b34:	103fee1e 	bne	r2,zero,1017af0 <___vfiprintf_internal_r+0xdcc>
 1017b38:	1800021e 	bne	r3,zero,1017b44 <___vfiprintf_internal_r+0xe20>
 1017b3c:	00800244 	movi	r2,9
 1017b40:	113feb36 	bltu	r2,r4,1017af0 <___vfiprintf_internal_r+0xdcc>
 1017b44:	9cffffc4 	addi	r19,r19,-1
 1017b48:	dcc13c15 	stw	r19,1264(sp)
 1017b4c:	003fdf06 	br	1017acc <___vfiprintf_internal_r+0xda8>
 1017b50:	05c040b4 	movhi	r23,258
 1017b54:	bde23d04 	addi	r23,r23,-30476
 1017b58:	003dc506 	br	1017270 <___vfiprintf_internal_r+0x54c>
 1017b5c:	d9013b17 	ldw	r4,1260(sp)
 1017b60:	2080004c 	andi	r2,r4,1
 1017b64:	1000421e 	bne	r2,zero,1017c70 <___vfiprintf_internal_r+0xf4c>
 1017b68:	d9400e04 	addi	r5,sp,56
 1017b6c:	df000404 	addi	fp,sp,16
 1017b70:	d9413c15 	stw	r5,1264(sp)
 1017b74:	003e7e06 	br	1017570 <___vfiprintf_internal_r+0x84c>
 1017b78:	d9813b17 	ldw	r6,1260(sp)
 1017b7c:	3080040c 	andi	r2,r6,16
 1017b80:	10001c1e 	bne	r2,zero,1017bf4 <___vfiprintf_internal_r+0xed0>
 1017b84:	d8c13b17 	ldw	r3,1260(sp)
 1017b88:	1880100c 	andi	r2,r3,64
 1017b8c:	10001926 	beq	r2,zero,1017bf4 <___vfiprintf_internal_r+0xed0>
 1017b90:	3c00000b 	ldhu	r16,0(r7)
 1017b94:	0023883a 	mov	r17,zero
 1017b98:	39c00104 	addi	r7,r7,4
 1017b9c:	d9c13515 	stw	r7,1236(sp)
 1017ba0:	003f3706 	br	1017880 <___vfiprintf_internal_r+0xb5c>
 1017ba4:	3c000017 	ldw	r16,0(r7)
 1017ba8:	0009883a 	mov	r4,zero
 1017bac:	39c00104 	addi	r7,r7,4
 1017bb0:	0023883a 	mov	r17,zero
 1017bb4:	d9c13515 	stw	r7,1236(sp)
 1017bb8:	d8000005 	stb	zero,0(sp)
 1017bbc:	003e5f06 	br	101753c <___vfiprintf_internal_r+0x818>
 1017bc0:	3c000017 	ldw	r16,0(r7)
 1017bc4:	01000044 	movi	r4,1
 1017bc8:	39c00104 	addi	r7,r7,4
 1017bcc:	0023883a 	mov	r17,zero
 1017bd0:	d9c13515 	stw	r7,1236(sp)
 1017bd4:	d8000005 	stb	zero,0(sp)
 1017bd8:	003e5806 	br	101753c <___vfiprintf_internal_r+0x818>
 1017bdc:	38800017 	ldw	r2,0(r7)
 1017be0:	39c00104 	addi	r7,r7,4
 1017be4:	d9c13515 	stw	r7,1236(sp)
 1017be8:	1023d7fa 	srai	r17,r2,31
 1017bec:	1021883a 	mov	r16,r2
 1017bf0:	003e5006 	br	1017534 <___vfiprintf_internal_r+0x810>
 1017bf4:	3c000017 	ldw	r16,0(r7)
 1017bf8:	0023883a 	mov	r17,zero
 1017bfc:	39c00104 	addi	r7,r7,4
 1017c00:	d9c13515 	stw	r7,1236(sp)
 1017c04:	003f1e06 	br	1017880 <___vfiprintf_internal_r+0xb5c>
 1017c08:	d9400317 	ldw	r5,12(sp)
 1017c0c:	d9000217 	ldw	r4,8(sp)
 1017c10:	05c040b4 	movhi	r23,258
 1017c14:	bde24104 	addi	r23,r23,-30460
 1017c18:	003d4e06 	br	1017154 <___vfiprintf_internal_r+0x430>
 1017c1c:	d9000e04 	addi	r4,sp,56
 1017c20:	df000404 	addi	fp,sp,16
 1017c24:	d9013c15 	stw	r4,1264(sp)
 1017c28:	d9813617 	ldw	r6,1240(sp)
 1017c2c:	880a973a 	slli	r5,r17,28
 1017c30:	8004d13a 	srli	r2,r16,4
 1017c34:	810003cc 	andi	r4,r16,15
 1017c38:	3109883a 	add	r4,r6,r4
 1017c3c:	2884b03a 	or	r2,r5,r2
 1017c40:	21400003 	ldbu	r5,0(r4)
 1017c44:	d9013c17 	ldw	r4,1264(sp)
 1017c48:	8806d13a 	srli	r3,r17,4
 1017c4c:	1021883a 	mov	r16,r2
 1017c50:	213fffc4 	addi	r4,r4,-1
 1017c54:	d9013c15 	stw	r4,1264(sp)
 1017c58:	d9813c17 	ldw	r6,1264(sp)
 1017c5c:	10c8b03a 	or	r4,r2,r3
 1017c60:	1823883a 	mov	r17,r3
 1017c64:	31400005 	stb	r5,0(r6)
 1017c68:	203fef1e 	bne	r4,zero,1017c28 <___vfiprintf_internal_r+0xf04>
 1017c6c:	003e4006 	br	1017570 <___vfiprintf_internal_r+0x84c>
 1017c70:	00800c04 	movi	r2,48
 1017c74:	d9800dc4 	addi	r6,sp,55
 1017c78:	df000404 	addi	fp,sp,16
 1017c7c:	d8800dc5 	stb	r2,55(sp)
 1017c80:	d9813c15 	stw	r6,1264(sp)
 1017c84:	003e3a06 	br	1017570 <___vfiprintf_internal_r+0x84c>
 1017c88:	d9413b17 	ldw	r5,1260(sp)
 1017c8c:	2880040c 	andi	r2,r5,16
 1017c90:	10002326 	beq	r2,zero,1017d20 <___vfiprintf_internal_r+0xffc>
 1017c94:	38800017 	ldw	r2,0(r7)
 1017c98:	d9813a17 	ldw	r6,1256(sp)
 1017c9c:	39c00104 	addi	r7,r7,4
 1017ca0:	11800015 	stw	r6,0(r2)
 1017ca4:	003c7006 	br	1016e68 <___vfiprintf_internal_r+0x144>
 1017ca8:	d9000217 	ldw	r4,8(sp)
 1017cac:	05c040b4 	movhi	r23,258
 1017cb0:	bde24104 	addi	r23,r23,-30460
 1017cb4:	003da406 	br	1017348 <___vfiprintf_internal_r+0x624>
 1017cb8:	0005883a 	mov	r2,zero
 1017cbc:	1409c83a 	sub	r4,r2,r16
 1017cc0:	1105803a 	cmpltu	r2,r2,r4
 1017cc4:	044bc83a 	sub	r5,zero,r17
 1017cc8:	2885c83a 	sub	r2,r5,r2
 1017ccc:	2021883a 	mov	r16,r4
 1017cd0:	1023883a 	mov	r17,r2
 1017cd4:	01000044 	movi	r4,1
 1017cd8:	00800b44 	movi	r2,45
 1017cdc:	d8800005 	stb	r2,0(sp)
 1017ce0:	003e1606 	br	101753c <___vfiprintf_internal_r+0x818>
 1017ce4:	b009883a 	mov	r4,r22
 1017ce8:	a80b883a 	mov	r5,r21
 1017cec:	d9800104 	addi	r6,sp,4
 1017cf0:	1016ccc0 	call	1016ccc <__sprint_r>
 1017cf4:	103daa1e 	bne	r2,zero,10173a0 <___vfiprintf_internal_r+0x67c>
 1017cf8:	003da806 	br	101739c <___vfiprintf_internal_r+0x678>
 1017cfc:	05c040b4 	movhi	r23,258
 1017d00:	bde23d04 	addi	r23,r23,-30476
 1017d04:	003dca06 	br	1017430 <___vfiprintf_internal_r+0x70c>
 1017d08:	d8813b17 	ldw	r2,1260(sp)
 1017d0c:	a5000044 	addi	r20,r20,1
 1017d10:	a0c00007 	ldb	r3,0(r20)
 1017d14:	10800814 	ori	r2,r2,32
 1017d18:	d8813b15 	stw	r2,1260(sp)
 1017d1c:	003c7506 	br	1016ef4 <___vfiprintf_internal_r+0x1d0>
 1017d20:	d8c13b17 	ldw	r3,1260(sp)
 1017d24:	1880100c 	andi	r2,r3,64
 1017d28:	10001a26 	beq	r2,zero,1017d94 <___vfiprintf_internal_r+0x1070>
 1017d2c:	38800017 	ldw	r2,0(r7)
 1017d30:	d9013a17 	ldw	r4,1256(sp)
 1017d34:	39c00104 	addi	r7,r7,4
 1017d38:	1100000d 	sth	r4,0(r2)
 1017d3c:	003c4a06 	br	1016e68 <___vfiprintf_internal_r+0x144>
 1017d40:	d9013c17 	ldw	r4,1264(sp)
 1017d44:	10006900 	call	1000690 <strlen>
 1017d48:	d8813715 	stw	r2,1244(sp)
 1017d4c:	d8013815 	stw	zero,1248(sp)
 1017d50:	003e0c06 	br	1017584 <___vfiprintf_internal_r+0x860>
 1017d54:	00800184 	movi	r2,6
 1017d58:	15c00836 	bltu	r2,r23,1017d7c <___vfiprintf_internal_r+0x1058>
 1017d5c:	b839883a 	mov	fp,r23
 1017d60:	b800010e 	bge	r23,zero,1017d68 <___vfiprintf_internal_r+0x1044>
 1017d64:	0039883a 	mov	fp,zero
 1017d68:	014040b4 	movhi	r5,258
 1017d6c:	29607904 	addi	r5,r5,-32284
 1017d70:	ddc13715 	stw	r23,1244(sp)
 1017d74:	d9413c15 	stw	r5,1264(sp)
 1017d78:	003ccb06 	br	10170a8 <___vfiprintf_internal_r+0x384>
 1017d7c:	014040b4 	movhi	r5,258
 1017d80:	29607904 	addi	r5,r5,-32284
 1017d84:	1039883a 	mov	fp,r2
 1017d88:	d9413c15 	stw	r5,1264(sp)
 1017d8c:	d8813715 	stw	r2,1244(sp)
 1017d90:	003cc506 	br	10170a8 <___vfiprintf_internal_r+0x384>
 1017d94:	38800017 	ldw	r2,0(r7)
 1017d98:	d9413a17 	ldw	r5,1256(sp)
 1017d9c:	39c00104 	addi	r7,r7,4
 1017da0:	11400015 	stw	r5,0(r2)
 1017da4:	003c3006 	br	1016e68 <___vfiprintf_internal_r+0x144>
 1017da8:	002f883a 	mov	r23,zero
 1017dac:	003c5306 	br	1016efc <___vfiprintf_internal_r+0x1d8>
 1017db0:	3dc00017 	ldw	r23,0(r7)
 1017db4:	39c00104 	addi	r7,r7,4
 1017db8:	b83f0c0e 	bge	r23,zero,10179ec <___vfiprintf_internal_r+0xcc8>
 1017dbc:	a0c00007 	ldb	r3,0(r20)
 1017dc0:	05ffffc4 	movi	r23,-1
 1017dc4:	003c4b06 	br	1016ef4 <___vfiprintf_internal_r+0x1d0>

01017dc8 <__vfiprintf_internal>:
 1017dc8:	008040b4 	movhi	r2,258
 1017dcc:	10a8f804 	addi	r2,r2,-23584
 1017dd0:	2013883a 	mov	r9,r4
 1017dd4:	11000017 	ldw	r4,0(r2)
 1017dd8:	2805883a 	mov	r2,r5
 1017ddc:	300f883a 	mov	r7,r6
 1017de0:	480b883a 	mov	r5,r9
 1017de4:	100d883a 	mov	r6,r2
 1017de8:	1016d241 	jmpi	1016d24 <___vfiprintf_internal_r>

01017dec <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1017dec:	defffd04 	addi	sp,sp,-12
 1017df0:	df000215 	stw	fp,8(sp)
 1017df4:	df000204 	addi	fp,sp,8
 1017df8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1017dfc:	e0bfff17 	ldw	r2,-4(fp)
 1017e00:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1017e04:	e0bffe17 	ldw	r2,-8(fp)
 1017e08:	1005003a 	cmpeq	r2,r2,zero
 1017e0c:	1000021e 	bne	r2,zero,1017e18 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1017e10:	002af070 	cmpltui	zero,zero,43969
 1017e14:	00000106 	br	1017e1c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1017e18:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1017e1c:	e037883a 	mov	sp,fp
 1017e20:	df000017 	ldw	fp,0(sp)
 1017e24:	dec00104 	addi	sp,sp,4
 1017e28:	f800283a 	ret

01017e2c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1017e2c:	defffd04 	addi	sp,sp,-12
 1017e30:	dfc00215 	stw	ra,8(sp)
 1017e34:	df000115 	stw	fp,4(sp)
 1017e38:	df000104 	addi	fp,sp,4
 1017e3c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 1017e40:	e13fff17 	ldw	r4,-4(fp)
 1017e44:	1017dec0 	call	1017dec <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1017e48:	003fff06 	br	1017e48 <_exit+0x1c>

01017e4c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 1017e4c:	deffff04 	addi	sp,sp,-4
 1017e50:	df000015 	stw	fp,0(sp)
 1017e54:	d839883a 	mov	fp,sp
  return 0;
 1017e58:	0005883a 	mov	r2,zero
}
 1017e5c:	e037883a 	mov	sp,fp
 1017e60:	df000017 	ldw	fp,0(sp)
 1017e64:	dec00104 	addi	sp,sp,4
 1017e68:	f800283a 	ret

01017e6c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 1017e6c:	defffa04 	addi	sp,sp,-24
 1017e70:	dfc00515 	stw	ra,20(sp)
 1017e74:	df000415 	stw	fp,16(sp)
 1017e78:	df000404 	addi	fp,sp,16
 1017e7c:	e13ffd15 	stw	r4,-12(fp)
 1017e80:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
 1017e84:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
 1017e88:	e0bffd17 	ldw	r2,-12(fp)
 1017e8c:	10800048 	cmpgei	r2,r2,1
 1017e90:	1000301e 	bne	r2,zero,1017f54 <kill+0xe8>
  {
    switch (sig)
 1017e94:	e0bffe17 	ldw	r2,-8(fp)
 1017e98:	10800828 	cmpgeui	r2,r2,32
 1017e9c:	10002a1e 	bne	r2,zero,1017f48 <kill+0xdc>
 1017ea0:	e0bffe17 	ldw	r2,-8(fp)
 1017ea4:	1085883a 	add	r2,r2,r2
 1017ea8:	1087883a 	add	r3,r2,r2
 1017eac:	00804074 	movhi	r2,257
 1017eb0:	109fb004 	addi	r2,r2,32448
 1017eb4:	1885883a 	add	r2,r3,r2
 1017eb8:	10800017 	ldw	r2,0(r2)
 1017ebc:	1000683a 	jmp	r2
 1017ec0:	01017f68 	cmpgeui	r4,zero,1533
 1017ec4:	01017f48 	cmpgei	r4,zero,1533
 1017ec8:	01017f48 	cmpgei	r4,zero,1533
 1017ecc:	01017f40 	call	1017f4 <__alt_mem_onchip_memory2_0+0x1017f4>
 1017ed0:	01017f40 	call	1017f4 <__alt_mem_onchip_memory2_0+0x1017f4>
 1017ed4:	01017f40 	call	1017f4 <__alt_mem_onchip_memory2_0+0x1017f4>
 1017ed8:	01017f40 	call	1017f4 <__alt_mem_onchip_memory2_0+0x1017f4>
 1017edc:	01017f48 	cmpgei	r4,zero,1533
 1017ee0:	01017f40 	call	1017f4 <__alt_mem_onchip_memory2_0+0x1017f4>
 1017ee4:	01017f40 	call	1017f4 <__alt_mem_onchip_memory2_0+0x1017f4>
 1017ee8:	01017f40 	call	1017f4 <__alt_mem_onchip_memory2_0+0x1017f4>
 1017eec:	01017f40 	call	1017f4 <__alt_mem_onchip_memory2_0+0x1017f4>
 1017ef0:	01017f40 	call	1017f4 <__alt_mem_onchip_memory2_0+0x1017f4>
 1017ef4:	01017f40 	call	1017f4 <__alt_mem_onchip_memory2_0+0x1017f4>
 1017ef8:	01017f40 	call	1017f4 <__alt_mem_onchip_memory2_0+0x1017f4>
 1017efc:	01017f40 	call	1017f4 <__alt_mem_onchip_memory2_0+0x1017f4>
 1017f00:	01017f68 	cmpgeui	r4,zero,1533
 1017f04:	01017f48 	cmpgei	r4,zero,1533
 1017f08:	01017f48 	cmpgei	r4,zero,1533
 1017f0c:	01017f48 	cmpgei	r4,zero,1533
 1017f10:	01017f68 	cmpgeui	r4,zero,1533
 1017f14:	01017f48 	cmpgei	r4,zero,1533
 1017f18:	01017f48 	cmpgei	r4,zero,1533
 1017f1c:	01017f40 	call	1017f4 <__alt_mem_onchip_memory2_0+0x1017f4>
 1017f20:	01017f40 	call	1017f4 <__alt_mem_onchip_memory2_0+0x1017f4>
 1017f24:	01017f40 	call	1017f4 <__alt_mem_onchip_memory2_0+0x1017f4>
 1017f28:	01017f40 	call	1017f4 <__alt_mem_onchip_memory2_0+0x1017f4>
 1017f2c:	01017f40 	call	1017f4 <__alt_mem_onchip_memory2_0+0x1017f4>
 1017f30:	01017f48 	cmpgei	r4,zero,1533
 1017f34:	01017f48 	cmpgei	r4,zero,1533
 1017f38:	01017f40 	call	1017f4 <__alt_mem_onchip_memory2_0+0x1017f4>
 1017f3c:	01017f40 	call	1017f4 <__alt_mem_onchip_memory2_0+0x1017f4>
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 1017f40:	0009883a 	mov	r4,zero
 1017f44:	1017e2c0 	call	1017e2c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 1017f48:	00800584 	movi	r2,22
 1017f4c:	e0bffc15 	stw	r2,-16(fp)
 1017f50:	00000506 	br	1017f68 <kill+0xfc>
    }
  }

  else if (pid > 0)
 1017f54:	e0bffd17 	ldw	r2,-12(fp)
 1017f58:	10800050 	cmplti	r2,r2,1
 1017f5c:	1000021e 	bne	r2,zero,1017f68 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 1017f60:	008000c4 	movi	r2,3
 1017f64:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
 1017f68:	e0bffc17 	ldw	r2,-16(fp)
 1017f6c:	1005003a 	cmpeq	r2,r2,zero
 1017f70:	1000071e 	bne	r2,zero,1017f90 <kill+0x124>
  {
    ALT_ERRNO = status;
 1017f74:	1017fac0 	call	1017fac <alt_get_errno>
 1017f78:	1007883a 	mov	r3,r2
 1017f7c:	e0bffc17 	ldw	r2,-16(fp)
 1017f80:	18800015 	stw	r2,0(r3)
    return -1;
 1017f84:	00bfffc4 	movi	r2,-1
 1017f88:	e0bfff15 	stw	r2,-4(fp)
 1017f8c:	00000106 	br	1017f94 <kill+0x128>
  }

  return 0;
 1017f90:	e03fff15 	stw	zero,-4(fp)
 1017f94:	e0bfff17 	ldw	r2,-4(fp)
}
 1017f98:	e037883a 	mov	sp,fp
 1017f9c:	dfc00117 	ldw	ra,4(sp)
 1017fa0:	df000017 	ldw	fp,0(sp)
 1017fa4:	dec00204 	addi	sp,sp,8
 1017fa8:	f800283a 	ret

01017fac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1017fac:	defffd04 	addi	sp,sp,-12
 1017fb0:	dfc00215 	stw	ra,8(sp)
 1017fb4:	df000115 	stw	fp,4(sp)
 1017fb8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1017fbc:	008040b4 	movhi	r2,258
 1017fc0:	10a90304 	addi	r2,r2,-23540
 1017fc4:	10800017 	ldw	r2,0(r2)
 1017fc8:	1005003a 	cmpeq	r2,r2,zero
 1017fcc:	1000061e 	bne	r2,zero,1017fe8 <alt_get_errno+0x3c>
 1017fd0:	008040b4 	movhi	r2,258
 1017fd4:	10a90304 	addi	r2,r2,-23540
 1017fd8:	10800017 	ldw	r2,0(r2)
 1017fdc:	103ee83a 	callr	r2
 1017fe0:	e0bfff15 	stw	r2,-4(fp)
 1017fe4:	00000306 	br	1017ff4 <alt_get_errno+0x48>
 1017fe8:	008040b4 	movhi	r2,258
 1017fec:	10afd104 	addi	r2,r2,-16572
 1017ff0:	e0bfff15 	stw	r2,-4(fp)
 1017ff4:	e0bfff17 	ldw	r2,-4(fp)
}
 1017ff8:	e037883a 	mov	sp,fp
 1017ffc:	dfc00117 	ldw	ra,4(sp)
 1018000:	df000017 	ldw	fp,0(sp)
 1018004:	dec00204 	addi	sp,sp,8
 1018008:	f800283a 	ret
 101800c:	010167b0 	cmpltui	r4,zero,1438
