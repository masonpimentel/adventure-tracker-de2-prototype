
bluetooth.elf:     file format elf32-littlenios2
bluetooth.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00013380 memsz 0x00013380 flags r-x
    LOAD off    0x000143a0 vaddr 0x010133a0 paddr 0x01014e80 align 2**12
         filesz 0x00001ae0 memsz 0x00001ae0 flags rw-
    LOAD off    0x00016960 vaddr 0x01016960 paddr 0x01016960 align 2**12
         filesz 0x00000000 memsz 0x000003ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000129b0  010001b8  010001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000838  01012b68  01012b68  00013b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ae0  010133a0  01014e80  000143a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003ec  01016960  01016960  00016960  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00015e80  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001078  00000000  00000000  00015ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001bd0  00000000  00000000  00016f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000315a5  00000000  00000000  00018af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a940  00000000  00000000  0004a095  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001b234  00000000  00000000  000549d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002310  00000000  00000000  0006fc0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002bd9  00000000  00000000  00071f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012545  00000000  00000000  00074af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0008703c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b30  00000000  00000000  00087070  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008b854  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0008b857  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008b863  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008b864  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0008b865  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0008b870  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0008b87b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0008b886  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000004e  00000000  00000000  0008b891  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000815be  00000000  00000000  0008b8df  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b8 l    d  .text	00000000 .text
01012b68 l    d  .rodata	00000000 .rodata
010133a0 l    d  .rwdata	00000000 .rwdata
01016960 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 bluetooth.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01000c74 l     F .text	00000058 __sprint_r
01012da6 l     O .rodata	00000010 blanks.3452
01012d96 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
01012dbe l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
01012ee1 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
01004458 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01005e54 l     F .text	00000058 std
01005f60 l     F .text	00000008 __fp_lock
01005f68 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
010133a0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
01014e4c l     O .rwdata	00000004 charset
01013088 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
010131d0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
01009504 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
010099a4 l     F .text	00000048 match
01013bc8 l     O .rwdata	00000014 fpi.1950
010131ec l     O .rodata	00000028 tinytens
01013bb4 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0100c1e8 l     F .text	00000024 htinit
0100c274 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0100cadc l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0100dd00 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0100ef28 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0100fa00 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100fa60 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100fb60 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0100fc80 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100fd60 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100febc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
010100e8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01014e70 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
01010384 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01013d84 l     O .rwdata	00001060 jtag_uart_0
01014de4 l     O .rwdata	0000002c character_lcd_0
01014e10 l     O .rwdata	0000002c rs232_0
01010494 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
010106cc l     F .text	0000022c altera_avalon_jtag_uart_irq
010108f8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01010f74 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01011b84 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01011d70 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0101206c l     F .text	000000dc alt_file_locked
010122d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01012950 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
01012b04 l     F .text	00000040 alt_sim_halt
01000244 g     F .text	00000040 longerDelay
01000aac g     F .text	0000001c putchar
01000480 g     F .text	00000130 changeName
01007f78 g     F .text	00000094 _mprec_log10
01008064 g     F .text	00000088 __any_on
0100cd70 g     F .text	00000070 _isatty_r
010131a8 g     O .rodata	00000028 __mprec_tinytens
0100ff1c g     F .text	0000006c alt_main
01000ad0 g     F .text	000000a0 _puts_r
01016abc g     O .bss	00000100 alt_irq
0100cde0 g     F .text	00000078 _lseek_r
01014e80 g       *ABS*	00000000 __flash_rwdata_start
010110ec g     F .text	00000034 alt_up_character_lcd_send_cmd
0100e820 g     F .text	00000088 __eqdf2
01016d4c g       *ABS*	00000000 __alt_heap_start
01000a34 g     F .text	00000044 printf
010097a4 g     F .text	00000068 __sseek
01005ebc g     F .text	000000a4 __sinit
0100bd68 g     F .text	00000130 __swbuf_r
01006dfc g     F .text	00000084 _setlocale_r
01005fbc g     F .text	00000068 __sfmoreglue
0100bd4c g     F .text	0000001c ungetc
0100ffa8 g     F .text	00000020 __malloc_unlock
010117d4 g     F .text	00000090 alt_up_rs232_read_fd
010099ec g     F .text	000014e4 _strtod_r
01000378 g     F .text	0000003c transmit_bit
010079f4 g     F .text	000000e0 memmove
01005fac g     F .text	00000010 _cleanup
010080ec g     F .text	000000bc _Balloc
01000348 g     F .text	00000030 BluetoothTestForReceivedData
0100e930 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
01011070 g     F .text	0000007c get_DDRAM_addr
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
0100c174 g     F .text	00000074 _fstat_r
01016978 g     O .bss	00000004 errno
0100421c g     F .text	00000024 __svfscanf
0100f264 g     F .text	0000002c __make_fp
01016980 g     O .bss	00000004 alt_argv
0101ce3c g       *ABS*	00000000 _gp
01013c04 g     O .rwdata	00000180 alt_fd_list
01000ac8 g     F .text	00000008 _putchar_r
01011cac g     F .text	00000094 alt_find_dev
01007954 g     F .text	000000a0 memcpy
0100cb28 g     F .text	00000248 __hexnan
01011284 g     F .text	0000004c alt_up_character_lcd_write_fd
01005fa0 g     F .text	0000000c _cleanup_r
0100eb50 g     F .text	000000f8 __floatsidf
01011e34 g     F .text	00000078 alt_io_redirect
0100ea40 g     F .text	00000088 __ltdf2
01012b68 g       *ABS*	00000000 __DTOR_END__
01011760 g     F .text	00000074 alt_up_rs232_read_data
01000b70 g     F .text	00000014 puts
010077f0 g     F .text	00000040 mbrtowc
01004240 g     F .text	00000068 _vfscanf_r
01007ec8 g     F .text	000000b0 __ratio
01010b10 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01000a78 g     F .text	00000034 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0100f064 g     F .text	00000008 __udivsi3
0100fbc0 g     F .text	000000c0 isatty
01006dac g     F .text	0000002c iswspace
010130b8 g     O .rodata	000000c8 __mprec_tens
01006dd8 g     F .text	00000008 __locale_charset
0100cf68 g     F .text	000000a4 __fixunsdfsi
010126cc g     F .text	00000090 alt_icache_flush
0101696c g     O .bss	00000004 __malloc_top_pad
0100b7c0 g     F .text	00000024 strtoul
01014e48 g     O .rwdata	00000004 __mb_cur_max
01006de0 g     F .text	0000000c _localeconv_r
0100b7e4 g     F .text	000002f0 _strtoull_r
010087e4 g     F .text	0000003c __i2b
01006790 g     F .text	0000049c __sfvwrite_r
01009590 g     F .text	00000070 _sbrk_r
010007ac g     F .text	000000f0 putcharBluetooth
010003f0 g     F .text	00000090 pollTxandWrite
0100ce58 g     F .text	00000078 _read_r
010137a0 g     O .rwdata	0000000c __lc_ctype
01014e68 g     O .rwdata	00000004 alt_max_fd
010116c8 g     F .text	00000050 alt_up_rs232_check_parity
0100f5a4 g     F .text	00000138 __unpack_d
0100c050 g     F .text	00000110 _fclose_r
01005e20 g     F .text	00000034 fflush
01016970 g     O .bss	00000004 __malloc_max_sbrked_mem
01011eac g     F .text	000001c0 alt_irq_register
0100e190 g     F .text	00000074 __adddf3
0100db98 g     F .text	00000078 __nesf2
01007da8 g     F .text	00000120 __b2d
0100d5e8 g     F .text	000005b0 __umoddi3
0100fdcc g     F .text	000000f0 lseek
01014e44 g     O .rwdata	00000004 _global_impure_ptr
01008d4c g     F .text	000005f4 _realloc_r
01016d4c g       *ABS*	00000000 __bss_end
010123c8 g     F .text	0000010c alt_tick
010169bc g     O .bss	00000100 __hexdig
0100d00c g     F .text	000005dc __udivdi3
01013180 g     O .rodata	00000028 __mprec_bigtens
01008a40 g     F .text	00000120 __s2b
0100ed94 g     F .text	00000194 __floatunsidf
01007cc8 g     F .text	00000060 __mcmp
01014e3c g     O .rwdata	00000004 __ctype_ptr
01005f88 g     F .text	00000018 __fp_lock_all
01012330 g     F .text	00000098 alt_alarm_stop
0100b254 g     F .text	00000024 strtol
01016988 g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000cc alt_irq_handler
01013bdc g     O .rwdata	00000028 alt_dev_null
0100f0f4 g     F .text	000000c8 __unpack_f
0101156c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
01011a8c g     F .text	00000044 alt_dcache_flush_all
01007b94 g     F .text	00000070 __hi0bits
0100ec48 g     F .text	000000d8 __fixdfsi
0100aff4 g     F .text	0000001c strtod
01014e80 g       *ABS*	00000000 __ram_rwdata_end
01014e60 g     O .rwdata	00000008 alt_dev_list
01010264 g     F .text	00000120 write
01008c64 g     F .text	000000e8 _putc_r
0100dc10 g     F .text	00000078 __gtsf2
010133a0 g       *ABS*	00000000 __ram_rodata_end
0100fa8c g     F .text	000000d4 fstat
01011864 g     F .text	00000094 alt_up_rs232_write_fd
0100eac8 g     F .text	00000088 __ledf2
01008920 g     F .text	00000120 __pow5mult
01016960 g     O .bss	00000004 __nlocale_changed
0100f06c g     F .text	00000008 __umodsi3
01000b84 g     F .text	00000034 _scanf_r
01016d4c g       *ABS*	00000000 end
0100f7a4 g     F .text	00000160 __pack_f
01010614 g     F .text	000000b8 altera_avalon_jtag_uart_init
01012b64 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
01010fe8 g     F .text	00000088 alt_avalon_timer_sc_init
0100f074 g     F .text	00000080 __clzsi2
01010d34 g     F .text	00000240 altera_avalon_jtag_uart_write
01005eac g     F .text	00000004 __sfp_lock_acquire
01007870 g     F .text	000000e4 memchr
01011194 g     F .text	00000078 alt_up_character_lcd_write
01000ccc g     F .text	00001eac ___vfprintf_internal_r
0100973c g     F .text	00000060 _sprintf_r
0100647c g     F .text	00000314 _free_r
010003b4 g     F .text	0000003c Init_Bluetooth
01012954 g     F .text	000001b0 __call_exitprocs
01016964 g     O .bss	00000004 __mlocale_changed
01014e54 g     O .rwdata	00000004 __malloc_sbrk_base
010001b8 g     F .text	0000004c _start
0101698c g     O .bss	00000004 _alt_tick_rate
0100b278 g     F .text	00000318 _strtoll_r
010084b0 g     F .text	0000014c __lshift
01016990 g     O .bss	00000004 _alt_nticks
0100ffc8 g     F .text	00000120 read
01010418 g     F .text	0000007c alt_sys_init
010113f8 g     F .text	000000b0 alt_up_character_lcd_shift_display
0101281c g     F .text	00000134 __register_exitproc
01011688 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
010085fc g     F .text	000001e8 __multiply
010114a8 g     F .text	00000090 alt_up_character_lcd_erase_pos
010002c4 g     F .text	00000084 print_binary
010109a8 g     F .text	00000074 altera_avalon_jtag_uart_close
010133a0 g       *ABS*	00000000 __ram_rwdata_start
01012b68 g       *ABS*	00000000 __ram_rodata_start
01016994 g     O .bss	00000028 __malloc_current_mallinfo
010081a8 g     F .text	0000017c __d2b
010104cc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0100b590 g     F .text	00000230 _strtoul_r
01012614 g     F .text	000000b8 alt_get_fd
0100074c g     F .text	00000060 exitCMD
0100f6dc g     F .text	000000c8 __fpcmp_parts_d
0100bfe0 g     F .text	00000070 _close_r
010127a8 g     F .text	00000074 memcmp
0101057c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
01016d4c g       *ABS*	00000000 __alt_stack_base
010105c4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0100431c g     F .text	0000013c __swsetup_r
0100e5c8 g     F .text	00000258 __divdf3
01006024 g     F .text	000000f0 __sfp
0100800c g     F .text	00000058 __copybits
010137ac g     O .rwdata	00000408 __malloc_av_
01005eb8 g     F .text	00000004 __sinit_lock_release
0100e204 g     F .text	000003c4 __muldf3
01009888 g     F .text	00000060 __sread
01006310 g     F .text	00000040 fread
010115f4 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
010124f4 g     F .text	00000120 alt_find_file
01011ad0 g     F .text	000000b4 alt_dev_llist_insert
0100ff88 g     F .text	00000020 __malloc_lock
010101a8 g     F .text	000000bc sbrk
01005c24 g     F .text	000001fc _fflush_r
0100bf2c g     F .text	000000b4 _calloc_r
01016960 g       *ABS*	00000000 __bss_start
01007ad4 g     F .text	00000098 memset
010009d4 g     F .text	00000060 main
01016984 g     O .bss	00000004 alt_envp
01016974 g     O .bss	00000004 __malloc_max_total_mem
01010524 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0100be98 g     F .text	0000001c __swbuf
0100dc88 g     F .text	00000078 __ltsf2
01006114 g     F .text	000001fc _fread_r
01011348 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0100979c g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
0100c160 g     F .text	00000014 fclose
0100b010 g     F .text	00000244 _strtol_r
0100ed20 g     F .text	00000074 __truncdfsf2
01016bbc g     O .bss	00000190 _atexit0
01004670 g     F .text	000015b4 _dtoa_r
01007030 g     F .text	00000740 _malloc_r
01014e6c g     O .rwdata	00000004 alt_errno
0100bad4 g     F .text	000000dc __submore
01006cf4 g     F .text	000000b8 _fwalk
01007830 g     F .text	00000040 _mbtowc_r
01008b60 g     F .text	00000104 putc
0100efa4 g     F .text	00000060 __divsi3
01013230 g     O .rodata	00000014 __thenan_df
01011154 g     F .text	00000040 alt_up_character_lcd_open_dev
01006350 g     F .text	0000012c _malloc_trim_r
01012b68 g       *ABS*	00000000 __CTOR_END__
01011120 g     F .text	00000034 alt_up_character_lcd_init
010098e8 g     F .text	000000bc strcmp
01012b68 g       *ABS*	00000000 __flash_rodata_start
01000284 g     F .text	00000040 evenLongerDelay
01012b68 g       *ABS*	00000000 __DTOR_LIST__
010006f8 g     F .text	00000054 enterCMD
010118f8 g     F .text	00000040 alt_up_rs232_open_dev
0100e8a8 g     F .text	00000088 __nedf2
010103e4 g     F .text	00000034 alt_irq_init
01010148 g     F .text	00000060 alt_release_fd
010096c8 g     F .text	00000074 sprintf
01011538 g     F .text	00000034 alt_up_character_lcd_cursor_off
01013244 g     O .rodata	00000100 __clz_tab
01016968 g     O .bss	00000004 _PathLocale
0100aed0 g     F .text	00000124 strtof
0101275c g     F .text	00000014 atexit
0100beb4 g     F .text	00000078 _write_r
01006e80 g     F .text	0000001c setlocale
0100089c g     F .text	00000138 getcharBluetooth
01000bb8 g     F .text	00000048 scanf
010096c0 g     F .text	00000008 nanf
01014e40 g     O .rwdata	00000004 _impure_ptr
0101697c g     O .bss	00000004 alt_argc
01007770 g     F .text	00000080 _mbrtowc_r
01011c48 g     F .text	00000064 _do_dtors
01009340 g     F .text	000001c4 __srefill_r
01000020 g       .exceptions	00000000 alt_irq_entry
01007d28 g     F .text	00000080 __ulp
01009520 g     F .text	00000040 __isinfd
01005f70 g     F .text	00000018 __fp_unlock_all
01014e58 g     O .rwdata	00000008 alt_fs_list
010115a0 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
01011718 g     F .text	00000048 alt_up_rs232_write_data
01000020 g       *ABS*	00000000 __ram_exceptions_start
01006dec g     F .text	00000010 localeconv
01000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
010005b0 g     F .text	00000148 changePIN
0100c20c g     F .text	00000068 __hexdig_init
01014e80 g       *ABS*	00000000 _edata
01016d4c g       *ABS*	00000000 _end
010001b8 g       *ABS*	00000000 __ram_exceptions_end
010042a8 g     F .text	00000074 vfscanf
01010a1c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0100980c g     F .text	0000007c __swrite
01014e50 g     O .rwdata	00000004 __malloc_trim_threshold
010124d4 g     F .text	00000020 altera_nios2_qsys_irq_init
01012770 g     F .text	00000038 exit
01006c2c g     F .text	000000c8 _fwalk_reent
01008324 g     F .text	0000018c __mdiff
0100f004 g     F .text	00000060 __modsi3
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01005eb0 g     F .text	00000004 __sfp_lock_release
0101120c g     F .text	00000078 alt_up_character_lcd_string
01009600 g     F .text	000000c0 __sccl
01012de0 g     O .rodata	00000101 _ctype_
0100f1bc g     F .text	000000a8 __fpcmp_parts_f
01012b44 g     F .text	00000020 _exit
01009560 g     F .text	00000030 __isnand
01011938 g     F .text	00000154 alt_alarm_start
0100ced0 g     F .text	00000098 __muldi3
01006e9c g     F .text	00000194 __smakebuf_r
01000c00 g     F .text	00000074 strlen
01012148 g     F .text	00000188 open
0100e9b8 g     F .text	00000088 __gedf2
0100c324 g     F .text	000007b8 __gethex
01011d40 g     F .text	00000030 alt_icache_flush_all
010112d0 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
01014e74 g     O .rwdata	00000004 alt_priority_mask
01002b78 g     F .text	00000024 __vfprintf_internal
0100e110 g     F .text	00000080 __subdf3
01007c04 g     F .text	000000c4 __lo0bits
01002b9c g     F .text	00001680 __svfscanf_r
01014e78 g     O .rwdata	00000008 alt_alarm_list
0100bbb0 g     F .text	0000019c _ungetc_r
01011be4 g     F .text	00000064 _do_ctors
0101164c g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
0100f904 g     F .text	000000fc close
0100fce0 g     F .text	00000080 alt_load
0100f290 g     F .text	00000314 __pack_d
01000204 g     F .text	00000040 smallDelay
00000000  w      *UND*	00000000 free
01005eb4 g     F .text	00000004 __sinit_lock_acquire
01008820 g     F .text	00000100 __multadd
01007b6c g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00900014 	movui	r2,16384
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406e14 	ori	at,at,440
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000171e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18daaf04 	addi	r3,r3,27324
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11800017 	ldw	r6,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18daaf04 	addi	r3,r3,27324
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	e17ffd17 	ldw	r5,-12(fp)
 1000164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe21e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fdd06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a4:	e037883a 	mov	sp,fp
 10001a8:	dfc00117 	ldw	ra,4(sp)
 10001ac:	df000017 	ldw	fp,0(sp)
 10001b0:	dec00204 	addi	sp,sp,8
 10001b4:	f800283a 	ret

Disassembly of section .text:

010001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c4:	00bffd16 	blt	zero,r2,10001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c8:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001d0:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001d4:	d6b38f14 	ori	gp,gp,52796
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d8:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001dc:	109a5814 	ori	r2,r2,26976

    movhi r3, %hi(__bss_end)
 10001e0:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001e4:	18db5314 	ori	r3,r3,27980

    beq r2, r3, 1f
 10001e8:	10c00326 	beq	r2,r3,10001f8 <_start+0x40>

0:
    stw zero, (r2)
 10001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f4:	10fffd36 	bltu	r2,r3,10001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f8:	100fce00 	call	100fce0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001fc:	100ff1c0 	call	100ff1c <alt_main>

01000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000200:	003fff06 	br	1000200 <alt_after_alt_main>

01000204 <smallDelay>:
#define Bluetooth_RxData (*(volatile unsigned char *)(0x84000222))
#define Bluetooth_Baud (*(volatile unsigned char *)(0x84000224))

/* Delay loops
 */
void smallDelay() {
 1000204:	defffe04 	addi	sp,sp,-8
 1000208:	df000115 	stw	fp,4(sp)
 100020c:	df000104 	addi	fp,sp,4
	int delay = 0;
 1000210:	e03fff15 	stw	zero,-4(fp)
	while (delay < 2000000)
 1000214:	00000306 	br	1000224 <smallDelay+0x20>
	{
		delay++;
 1000218:	e0bfff17 	ldw	r2,-4(fp)
 100021c:	10800044 	addi	r2,r2,1
 1000220:	e0bfff15 	stw	r2,-4(fp)

/* Delay loops
 */
void smallDelay() {
	int delay = 0;
	while (delay < 2000000)
 1000224:	e0ffff17 	ldw	r3,-4(fp)
 1000228:	008007f4 	movhi	r2,31
 100022c:	10a11fc4 	addi	r2,r2,-31617
 1000230:	10fff90e 	bge	r2,r3,1000218 <smallDelay+0x14>
	{
		delay++;
	}
}
 1000234:	e037883a 	mov	sp,fp
 1000238:	df000017 	ldw	fp,0(sp)
 100023c:	dec00104 	addi	sp,sp,4
 1000240:	f800283a 	ret

01000244 <longerDelay>:

void longerDelay() {
 1000244:	defffe04 	addi	sp,sp,-8
 1000248:	df000115 	stw	fp,4(sp)
 100024c:	df000104 	addi	fp,sp,4
	int delay = 0;
 1000250:	e03fff15 	stw	zero,-4(fp)
	while (delay < 10000000)
 1000254:	00000306 	br	1000264 <longerDelay+0x20>
	{
		delay++;
 1000258:	e0bfff17 	ldw	r2,-4(fp)
 100025c:	10800044 	addi	r2,r2,1
 1000260:	e0bfff15 	stw	r2,-4(fp)
	}
}

void longerDelay() {
	int delay = 0;
	while (delay < 10000000)
 1000264:	e0ffff17 	ldw	r3,-4(fp)
 1000268:	00802674 	movhi	r2,153
 100026c:	10a59fc4 	addi	r2,r2,-27009
 1000270:	10fff90e 	bge	r2,r3,1000258 <longerDelay+0x14>
	{
		delay++;
	}
}
 1000274:	e037883a 	mov	sp,fp
 1000278:	df000017 	ldw	fp,0(sp)
 100027c:	dec00104 	addi	sp,sp,4
 1000280:	f800283a 	ret

01000284 <evenLongerDelay>:

void evenLongerDelay() {
 1000284:	defffe04 	addi	sp,sp,-8
 1000288:	df000115 	stw	fp,4(sp)
 100028c:	df000104 	addi	fp,sp,4
	int delay = 0;
 1000290:	e03fff15 	stw	zero,-4(fp)
	while (delay < 20000000)
 1000294:	00000306 	br	10002a4 <evenLongerDelay+0x20>
	{
		delay++;
 1000298:	e0bfff17 	ldw	r2,-4(fp)
 100029c:	10800044 	addi	r2,r2,1
 10002a0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void evenLongerDelay() {
	int delay = 0;
	while (delay < 20000000)
 10002a4:	e0ffff17 	ldw	r3,-4(fp)
 10002a8:	00804c74 	movhi	r2,305
 10002ac:	108b3fc4 	addi	r2,r2,11519
 10002b0:	10fff90e 	bge	r2,r3,1000298 <evenLongerDelay+0x14>
	{
		delay++;
	}
}
 10002b4:	e037883a 	mov	sp,fp
 10002b8:	df000017 	ldw	fp,0(sp)
 10002bc:	dec00104 	addi	sp,sp,4
 10002c0:	f800283a 	ret

010002c4 <print_binary>:
 *
 * @param: int dec - the decimal to display in binary
 * @return: none
 */
void print_binary(int dec)
{
 10002c4:	defffb04 	addi	sp,sp,-20
 10002c8:	dfc00415 	stw	ra,16(sp)
 10002cc:	df000315 	stw	fp,12(sp)
 10002d0:	df000304 	addi	fp,sp,12
 10002d4:	e13fff15 	stw	r4,-4(fp)
	int i; //number of bits to display (minus 1)
	int k;

	for (i = 7; i >= 0; i--)
 10002d8:	008001c4 	movi	r2,7
 10002dc:	e0bffe15 	stw	r2,-8(fp)
 10002e0:	00001106 	br	1000328 <print_binary+0x64>
	{
		k = dec >> i;
 10002e4:	e0ffff17 	ldw	r3,-4(fp)
 10002e8:	e0bffe17 	ldw	r2,-8(fp)
 10002ec:	1885d83a 	sra	r2,r3,r2
 10002f0:	e0bffd15 	stw	r2,-12(fp)

		if (k & 1)
 10002f4:	e0bffd17 	ldw	r2,-12(fp)
 10002f8:	1080004c 	andi	r2,r2,1
 10002fc:	10803fcc 	andi	r2,r2,255
 1000300:	1005003a 	cmpeq	r2,r2,zero
 1000304:	1000031e 	bne	r2,zero,1000314 <print_binary+0x50>
			printf("1");
 1000308:	01000c44 	movi	r4,49
 100030c:	1000aac0 	call	1000aac <putchar>
 1000310:	00000206 	br	100031c <print_binary+0x58>
		else
			printf("0");
 1000314:	01000c04 	movi	r4,48
 1000318:	1000aac0 	call	1000aac <putchar>
void print_binary(int dec)
{
	int i; //number of bits to display (minus 1)
	int k;

	for (i = 7; i >= 0; i--)
 100031c:	e0bffe17 	ldw	r2,-8(fp)
 1000320:	10bfffc4 	addi	r2,r2,-1
 1000324:	e0bffe15 	stw	r2,-8(fp)
 1000328:	e0bffe17 	ldw	r2,-8(fp)
 100032c:	1004403a 	cmpge	r2,r2,zero
 1000330:	103fec1e 	bne	r2,zero,10002e4 <print_binary+0x20>
		if (k & 1)
			printf("1");
		else
			printf("0");
	}
}
 1000334:	e037883a 	mov	sp,fp
 1000338:	dfc00117 	ldw	ra,4(sp)
 100033c:	df000017 	ldw	fp,0(sp)
 1000340:	dec00204 	addi	sp,sp,8
 1000344:	f800283a 	ret

01000348 <BluetoothTestForReceivedData>:
 *
 * @param: int reg - the value of the status register
 * @return: int bit - the first bit of the status register
 */
int BluetoothTestForReceivedData(int reg)
{
 1000348:	defffd04 	addi	sp,sp,-12
 100034c:	df000215 	stw	fp,8(sp)
 1000350:	df000204 	addi	fp,sp,8
 1000354:	e13fff15 	stw	r4,-4(fp)
	int bit = reg & 1;
 1000358:	e0bfff17 	ldw	r2,-4(fp)
 100035c:	1080004c 	andi	r2,r2,1
 1000360:	e0bffe15 	stw	r2,-8(fp)
	return bit;
 1000364:	e0bffe17 	ldw	r2,-8(fp)
}
 1000368:	e037883a 	mov	sp,fp
 100036c:	df000017 	ldw	fp,0(sp)
 1000370:	dec00104 	addi	sp,sp,4
 1000374:	f800283a 	ret

01000378 <transmit_bit>:
 *
 * @param: int reg - the value of the status register
 * @return: int bit - the second bit of the status register
 */
int transmit_bit(int reg)
{
 1000378:	defffd04 	addi	sp,sp,-12
 100037c:	df000215 	stw	fp,8(sp)
 1000380:	df000204 	addi	fp,sp,8
 1000384:	e13fff15 	stw	r4,-4(fp)
	int bit;
	// shift over 1
	bit = reg >> 1;
 1000388:	e0bfff17 	ldw	r2,-4(fp)
 100038c:	1005d07a 	srai	r2,r2,1
 1000390:	e0bffe15 	stw	r2,-8(fp)
	// bitwise and
	bit = bit & 1;
 1000394:	e0bffe17 	ldw	r2,-8(fp)
 1000398:	1080004c 	andi	r2,r2,1
 100039c:	e0bffe15 	stw	r2,-8(fp)
	return bit;
 10003a0:	e0bffe17 	ldw	r2,-8(fp)
}
 10003a4:	e037883a 	mov	sp,fp
 10003a8:	df000017 	ldw	fp,0(sp)
 10003ac:	dec00104 	addi	sp,sp,4
 10003b0:	f800283a 	ret

010003b4 <Init_Bluetooth>:
 *
 * @param: none
 * @return: none
 */
void Init_Bluetooth(void)
{
 10003b4:	deffff04 	addi	sp,sp,-4
 10003b8:	df000015 	stw	fp,0(sp)
 10003bc:	d839883a 	mov	fp,sp
	Bluetooth_Control = 0x15;
 10003c0:	00e10034 	movhi	r3,33792
 10003c4:	18c08804 	addi	r3,r3,544
 10003c8:	00800544 	movi	r2,21
 10003cc:	18800005 	stb	r2,0(r3)
	Bluetooth_Baud = 0x01;
 10003d0:	00e10034 	movhi	r3,33792
 10003d4:	18c08904 	addi	r3,r3,548
 10003d8:	00800044 	movi	r2,1
 10003dc:	18800005 	stb	r2,0(r3)
}
 10003e0:	e037883a 	mov	sp,fp
 10003e4:	df000017 	ldw	fp,0(sp)
 10003e8:	dec00104 	addi	sp,sp,4
 10003ec:	f800283a 	ret

010003f0 <pollTxandWrite>:
 * Writes "character" to the 6850 TxData register.
 *
 * @param: int character - integer to transmit
 * @return: none
 */
void pollTxandWrite(int character) {
 10003f0:	defffb04 	addi	sp,sp,-20
 10003f4:	dfc00415 	stw	ra,16(sp)
 10003f8:	df000315 	stw	fp,12(sp)
 10003fc:	df000304 	addi	fp,sp,12
 1000400:	e13fff15 	stw	r4,-4(fp)

	int tx_bit = 0;
 1000404:	e03ffe15 	stw	zero,-8(fp)
	int status = Bluetooth_Status;
 1000408:	00a10034 	movhi	r2,33792
 100040c:	10808804 	addi	r2,r2,544
 1000410:	10800003 	ldbu	r2,0(r2)
 1000414:	10803fcc 	andi	r2,r2,255
 1000418:	e0bffd15 	stw	r2,-12(fp)

	//printf("Bluetooth status = %d = ", status);
	print_binary(status);
 100041c:	e13ffd17 	ldw	r4,-12(fp)
 1000420:	10002c40 	call	10002c4 <print_binary>
	printf("\n");
 1000424:	01000284 	movi	r4,10
 1000428:	1000aac0 	call	1000aac <putchar>

	// poll transmit bit in 6850 status register. Wait for it to become '1'
	tx_bit = transmit_bit(status);
 100042c:	e13ffd17 	ldw	r4,-12(fp)
 1000430:	10003780 	call	1000378 <transmit_bit>
 1000434:	e0bffe15 	stw	r2,-8(fp)
	//printf("\nTx_bit = %d\n", tx_bit);
	while(tx_bit == 0)
 1000438:	00000106 	br	1000440 <pollTxandWrite+0x50>
	{
		smallDelay();
 100043c:	10002040 	call	1000204 <smallDelay>
	printf("\n");

	// poll transmit bit in 6850 status register. Wait for it to become '1'
	tx_bit = transmit_bit(status);
	//printf("\nTx_bit = %d\n", tx_bit);
	while(tx_bit == 0)
 1000440:	e0bffe17 	ldw	r2,-8(fp)
 1000444:	1005003a 	cmpeq	r2,r2,zero
 1000448:	103ffc1e 	bne	r2,zero,100043c <pollTxandWrite+0x4c>
	{
		smallDelay();
		//tx_bit = transmit_bit(Bluetooth_Status);
		//printf("Tx_bit = %d\n", tx_bit);
	}
	printf("Writing %d to TxData register.\n", character);
 100044c:	01004074 	movhi	r4,257
 1000450:	210ada04 	addi	r4,r4,11112
 1000454:	e17fff17 	ldw	r5,-4(fp)
 1000458:	1000a340 	call	1000a34 <printf>
	Bluetooth_TxData =  character;
 100045c:	00a10034 	movhi	r2,33792
 1000460:	10808884 	addi	r2,r2,546
 1000464:	e0ffff17 	ldw	r3,-4(fp)
 1000468:	10c00005 	stb	r3,0(r2)
}
 100046c:	e037883a 	mov	sp,fp
 1000470:	dfc00117 	ldw	ra,4(sp)
 1000474:	df000017 	ldw	fp,0(sp)
 1000478:	dec00204 	addi	sp,sp,8
 100047c:	f800283a 	ret

01000480 <changeName>:
 *
 * @param: none
 * @return: none
 */
void changeName(void)
{
 1000480:	defffb04 	addi	sp,sp,-20
 1000484:	dfc00415 	stw	ra,16(sp)
 1000488:	df000315 	stw	fp,12(sp)
 100048c:	df000304 	addi	fp,sp,12
	int status = Bluetooth_Status;
 1000490:	00a10034 	movhi	r2,33792
 1000494:	10808804 	addi	r2,r2,544
 1000498:	10800003 	ldbu	r2,0(r2)
 100049c:	10803fcc 	andi	r2,r2,255
 10004a0:	e0bffe15 	stw	r2,-8(fp)
	int res;
	int character;

	printf("\nChanging name now\n\n");
 10004a4:	01004074 	movhi	r4,257
 10004a8:	210ae204 	addi	r4,r4,11144
 10004ac:	1000b700 	call	1000b70 <puts>

	printf("Enter 0 to change name to LOL or 1 to change to LEL:  ");
 10004b0:	01004074 	movhi	r4,257
 10004b4:	210ae704 	addi	r4,r4,11164
 10004b8:	1000a340 	call	1000a34 <printf>
	scanf("%i", &res);
 10004bc:	e17fff04 	addi	r5,fp,-4
 10004c0:	01004074 	movhi	r4,257
 10004c4:	210af504 	addi	r4,r4,11220
 10004c8:	1000bb80 	call	1000bb8 <scanf>
	printf("Entered: %i\n", res);
 10004cc:	e17fff17 	ldw	r5,-4(fp)
 10004d0:	01004074 	movhi	r4,257
 10004d4:	210af604 	addi	r4,r4,11224
 10004d8:	1000a340 	call	1000a34 <printf>
	if (res == 0) {
 10004dc:	e0bfff17 	ldw	r2,-4(fp)
 10004e0:	1004c03a 	cmpne	r2,r2,zero
 10004e4:	1000151e 	bne	r2,zero,100053c <changeName+0xbc>
		// write S
		pollTxandWrite(83);
 10004e8:	010014c4 	movi	r4,83
 10004ec:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 10004f0:	10002040 	call	1000204 <smallDelay>
		// write N
		pollTxandWrite(78);
 10004f4:	01001384 	movi	r4,78
 10004f8:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 10004fc:	10002040 	call	1000204 <smallDelay>
		// write ,
		pollTxandWrite(44);
 1000500:	01000b04 	movi	r4,44
 1000504:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 1000508:	10002040 	call	1000204 <smallDelay>
		// write L
		pollTxandWrite(76);
 100050c:	01001304 	movi	r4,76
 1000510:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 1000514:	10002040 	call	1000204 <smallDelay>
		// write O
		pollTxandWrite(79);
 1000518:	010013c4 	movi	r4,79
 100051c:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 1000520:	10002040 	call	1000204 <smallDelay>
		// write L
		pollTxandWrite(76);
 1000524:	01001304 	movi	r4,76
 1000528:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 100052c:	10002040 	call	1000204 <smallDelay>
		// write CR
		pollTxandWrite(13);
 1000530:	01000344 	movi	r4,13
 1000534:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 1000538:	10002040 	call	1000204 <smallDelay>
	}

	if (res == 1) {
 100053c:	e0bfff17 	ldw	r2,-4(fp)
 1000540:	10800058 	cmpnei	r2,r2,1
 1000544:	1000151e 	bne	r2,zero,100059c <changeName+0x11c>
		// write S
		pollTxandWrite(83);
 1000548:	010014c4 	movi	r4,83
 100054c:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 1000550:	10002040 	call	1000204 <smallDelay>
		// write N
		pollTxandWrite(78);
 1000554:	01001384 	movi	r4,78
 1000558:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 100055c:	10002040 	call	1000204 <smallDelay>
		// write ,
		pollTxandWrite(44);
 1000560:	01000b04 	movi	r4,44
 1000564:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 1000568:	10002040 	call	1000204 <smallDelay>
		// write L
		pollTxandWrite(76);
 100056c:	01001304 	movi	r4,76
 1000570:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 1000574:	10002040 	call	1000204 <smallDelay>
		// write E
		pollTxandWrite(69);
 1000578:	01001144 	movi	r4,69
 100057c:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 1000580:	10002040 	call	1000204 <smallDelay>
		// write L
		pollTxandWrite(76);
 1000584:	01001304 	movi	r4,76
 1000588:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 100058c:	10002040 	call	1000204 <smallDelay>
		// write CR
		pollTxandWrite(13);
 1000590:	01000344 	movi	r4,13
 1000594:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 1000598:	10002040 	call	1000204 <smallDelay>
	}

	return;
}
 100059c:	e037883a 	mov	sp,fp
 10005a0:	dfc00117 	ldw	ra,4(sp)
 10005a4:	df000017 	ldw	fp,0(sp)
 10005a8:	dec00204 	addi	sp,sp,8
 10005ac:	f800283a 	ret

010005b0 <changePIN>:
 *
 * @param: none
 * @return: none
 */
void changePIN(void)
{
 10005b0:	defffb04 	addi	sp,sp,-20
 10005b4:	dfc00415 	stw	ra,16(sp)
 10005b8:	df000315 	stw	fp,12(sp)
 10005bc:	df000304 	addi	fp,sp,12
	int status = Bluetooth_Status;
 10005c0:	00a10034 	movhi	r2,33792
 10005c4:	10808804 	addi	r2,r2,544
 10005c8:	10800003 	ldbu	r2,0(r2)
 10005cc:	10803fcc 	andi	r2,r2,255
 10005d0:	e0bffe15 	stw	r2,-8(fp)
	int res;
	int character;

	printf("\nChanging PIN now\n\n");
 10005d4:	01004074 	movhi	r4,257
 10005d8:	210afa04 	addi	r4,r4,11240
 10005dc:	1000b700 	call	1000b70 <puts>

	printf("Enter 0 to change PIN to 4321 or 1 to change to 1234:  ");
 10005e0:	01004074 	movhi	r4,257
 10005e4:	210aff04 	addi	r4,r4,11260
 10005e8:	1000a340 	call	1000a34 <printf>
	scanf("%i", &res);
 10005ec:	e17fff04 	addi	r5,fp,-4
 10005f0:	01004074 	movhi	r4,257
 10005f4:	210af504 	addi	r4,r4,11220
 10005f8:	1000bb80 	call	1000bb8 <scanf>
	printf("Entered: %i\n", res);
 10005fc:	e17fff17 	ldw	r5,-4(fp)
 1000600:	01004074 	movhi	r4,257
 1000604:	210af604 	addi	r4,r4,11224
 1000608:	1000a340 	call	1000a34 <printf>
	if (res == 0) {
 100060c:	e0bfff17 	ldw	r2,-4(fp)
 1000610:	1004c03a 	cmpne	r2,r2,zero
 1000614:	1000181e 	bne	r2,zero,1000678 <changePIN+0xc8>
		// write S
		pollTxandWrite(83);
 1000618:	010014c4 	movi	r4,83
 100061c:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 1000620:	10002040 	call	1000204 <smallDelay>
		// write P
		pollTxandWrite(80);
 1000624:	01001404 	movi	r4,80
 1000628:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 100062c:	10002040 	call	1000204 <smallDelay>
		// write ,
		pollTxandWrite(44);
 1000630:	01000b04 	movi	r4,44
 1000634:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 1000638:	10002040 	call	1000204 <smallDelay>
		// write 4
		pollTxandWrite(52);
 100063c:	01000d04 	movi	r4,52
 1000640:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 1000644:	10002040 	call	1000204 <smallDelay>
		// write 3
		pollTxandWrite(51);
 1000648:	01000cc4 	movi	r4,51
 100064c:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 1000650:	10002040 	call	1000204 <smallDelay>
		// write 2
		pollTxandWrite(50);
 1000654:	01000c84 	movi	r4,50
 1000658:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 100065c:	10002040 	call	1000204 <smallDelay>
		// write 1
		pollTxandWrite(49);
 1000660:	01000c44 	movi	r4,49
 1000664:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 1000668:	10002040 	call	1000204 <smallDelay>
		// write CR
		pollTxandWrite(13);
 100066c:	01000344 	movi	r4,13
 1000670:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 1000674:	10002040 	call	1000204 <smallDelay>
	}

	if (res == 1) {
 1000678:	e0bfff17 	ldw	r2,-4(fp)
 100067c:	10800058 	cmpnei	r2,r2,1
 1000680:	1000181e 	bne	r2,zero,10006e4 <changePIN+0x134>
		// write S
		pollTxandWrite(83);
 1000684:	010014c4 	movi	r4,83
 1000688:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 100068c:	10002040 	call	1000204 <smallDelay>
		// write P
		pollTxandWrite(80);
 1000690:	01001404 	movi	r4,80
 1000694:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 1000698:	10002040 	call	1000204 <smallDelay>
		// write ,
		pollTxandWrite(44);
 100069c:	01000b04 	movi	r4,44
 10006a0:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 10006a4:	10002040 	call	1000204 <smallDelay>
		// write 1
		pollTxandWrite(49);
 10006a8:	01000c44 	movi	r4,49
 10006ac:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 10006b0:	10002040 	call	1000204 <smallDelay>
		// write 2
		pollTxandWrite(50);
 10006b4:	01000c84 	movi	r4,50
 10006b8:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 10006bc:	10002040 	call	1000204 <smallDelay>
		// write 3
		pollTxandWrite(51);
 10006c0:	01000cc4 	movi	r4,51
 10006c4:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 10006c8:	10002040 	call	1000204 <smallDelay>
		// write 4
		pollTxandWrite(52);
 10006cc:	01000d04 	movi	r4,52
 10006d0:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 10006d4:	10002040 	call	1000204 <smallDelay>
		// write CR
		pollTxandWrite(13);
 10006d8:	01000344 	movi	r4,13
 10006dc:	10003f00 	call	10003f0 <pollTxandWrite>
		smallDelay();
 10006e0:	10002040 	call	1000204 <smallDelay>
	}

	return;
}
 10006e4:	e037883a 	mov	sp,fp
 10006e8:	dfc00117 	ldw	ra,4(sp)
 10006ec:	df000017 	ldw	fp,0(sp)
 10006f0:	dec00204 	addi	sp,sp,8
 10006f4:	f800283a 	ret

010006f8 <enterCMD>:
 *
 * @param: none
 * @return: none
 */
void enterCMD(void)
{
 10006f8:	defffe04 	addi	sp,sp,-8
 10006fc:	dfc00115 	stw	ra,4(sp)
 1000700:	df000015 	stw	fp,0(sp)
 1000704:	d839883a 	mov	fp,sp
	printf("Entering CMD mode now\n\n");
 1000708:	01004074 	movhi	r4,257
 100070c:	210b0d04 	addi	r4,r4,11316
 1000710:	1000b700 	call	1000b70 <puts>
	// write -
	pollTxandWrite(36);
 1000714:	01000904 	movi	r4,36
 1000718:	10003f00 	call	10003f0 <pollTxandWrite>
	smallDelay();
 100071c:	10002040 	call	1000204 <smallDelay>
	// write -
	pollTxandWrite(36);
 1000720:	01000904 	movi	r4,36
 1000724:	10003f00 	call	10003f0 <pollTxandWrite>
	smallDelay();
 1000728:	10002040 	call	1000204 <smallDelay>
	// write -
	pollTxandWrite(36);
 100072c:	01000904 	movi	r4,36
 1000730:	10003f00 	call	10003f0 <pollTxandWrite>
	smallDelay();
 1000734:	10002040 	call	1000204 <smallDelay>
	return;
}
 1000738:	e037883a 	mov	sp,fp
 100073c:	dfc00117 	ldw	ra,4(sp)
 1000740:	df000017 	ldw	fp,0(sp)
 1000744:	dec00204 	addi	sp,sp,8
 1000748:	f800283a 	ret

0100074c <exitCMD>:
 *
 * @param: none
 * @return: none
 */
void exitCMD(void)
{
 100074c:	defffe04 	addi	sp,sp,-8
 1000750:	dfc00115 	stw	ra,4(sp)
 1000754:	df000015 	stw	fp,0(sp)
 1000758:	d839883a 	mov	fp,sp
	printf("\nExiting CMD mode now\n\n");
 100075c:	01004074 	movhi	r4,257
 1000760:	210b1304 	addi	r4,r4,11340
 1000764:	1000b700 	call	1000b70 <puts>
	// write -
	pollTxandWrite(45);
 1000768:	01000b44 	movi	r4,45
 100076c:	10003f00 	call	10003f0 <pollTxandWrite>
	smallDelay();
 1000770:	10002040 	call	1000204 <smallDelay>
	// write -
	pollTxandWrite(45);
 1000774:	01000b44 	movi	r4,45
 1000778:	10003f00 	call	10003f0 <pollTxandWrite>
	smallDelay();
 100077c:	10002040 	call	1000204 <smallDelay>
	// write -
	pollTxandWrite(45);
 1000780:	01000b44 	movi	r4,45
 1000784:	10003f00 	call	10003f0 <pollTxandWrite>
	smallDelay();
 1000788:	10002040 	call	1000204 <smallDelay>
	// write CR
	pollTxandWrite(13);
 100078c:	01000344 	movi	r4,13
 1000790:	10003f00 	call	10003f0 <pollTxandWrite>
	smallDelay();
 1000794:	10002040 	call	1000204 <smallDelay>
	return;
}
 1000798:	e037883a 	mov	sp,fp
 100079c:	dfc00117 	ldw	ra,4(sp)
 10007a0:	df000017 	ldw	fp,0(sp)
 10007a4:	dec00204 	addi	sp,sp,8
 10007a8:	f800283a 	ret

010007ac <putcharBluetooth>:
 *
 * @param: int character - integer to transmit
 * @return: none
 */
void putcharBluetooth(int character)
{
 10007ac:	defffa04 	addi	sp,sp,-24
 10007b0:	dfc00515 	stw	ra,20(sp)
 10007b4:	df000415 	stw	fp,16(sp)
 10007b8:	df000404 	addi	fp,sp,16
 10007bc:	e13fff15 	stw	r4,-4(fp)
	int tx_bit = 0;
 10007c0:	e03ffe15 	stw	zero,-8(fp)
	int status = Bluetooth_Status;
 10007c4:	00a10034 	movhi	r2,33792
 10007c8:	10808804 	addi	r2,r2,544
 10007cc:	10800003 	ldbu	r2,0(r2)
 10007d0:	10803fcc 	andi	r2,r2,255
 10007d4:	e0bffd15 	stw	r2,-12(fp)

	printf("Bluetooth status = %d = ", status);
 10007d8:	01004074 	movhi	r4,257
 10007dc:	210b1904 	addi	r4,r4,11364
 10007e0:	e17ffd17 	ldw	r5,-12(fp)
 10007e4:	1000a340 	call	1000a34 <printf>
	print_binary(status);
 10007e8:	e13ffd17 	ldw	r4,-12(fp)
 10007ec:	10002c40 	call	10002c4 <print_binary>

	// poll transmit bit in 6850 status register. Wait for it to become '1'
	tx_bit = transmit_bit(status);
 10007f0:	e13ffd17 	ldw	r4,-12(fp)
 10007f4:	10003780 	call	1000378 <transmit_bit>
 10007f8:	e0bffe15 	stw	r2,-8(fp)
	printf("\nTx_bit = %d\n", tx_bit);
 10007fc:	01004074 	movhi	r4,257
 1000800:	210b2004 	addi	r4,r4,11392
 1000804:	e17ffe17 	ldw	r5,-8(fp)
 1000808:	1000a340 	call	1000a34 <printf>
	while(tx_bit == 0)
 100080c:	00001306 	br	100085c <putcharBluetooth+0xb0>
	{
		// sleep(500); // for some reason can't link unistd.h
		int delay = 0;
 1000810:	e03ffc15 	stw	zero,-16(fp)
		while (delay < 200000)
 1000814:	00000306 	br	1000824 <putcharBluetooth+0x78>
		{
			delay++;
 1000818:	e0bffc17 	ldw	r2,-16(fp)
 100081c:	10800044 	addi	r2,r2,1
 1000820:	e0bffc15 	stw	r2,-16(fp)
	printf("\nTx_bit = %d\n", tx_bit);
	while(tx_bit == 0)
	{
		// sleep(500); // for some reason can't link unistd.h
		int delay = 0;
		while (delay < 200000)
 1000824:	e0fffc17 	ldw	r3,-16(fp)
 1000828:	008000f4 	movhi	r2,3
 100082c:	10834fc4 	addi	r2,r2,3391
 1000830:	10fff90e 	bge	r2,r3,1000818 <putcharBluetooth+0x6c>
		{
			delay++;
		}
		tx_bit = transmit_bit(Bluetooth_Status);
 1000834:	00a10034 	movhi	r2,33792
 1000838:	10808804 	addi	r2,r2,544
 100083c:	10800003 	ldbu	r2,0(r2)
 1000840:	11003fcc 	andi	r4,r2,255
 1000844:	10003780 	call	1000378 <transmit_bit>
 1000848:	e0bffe15 	stw	r2,-8(fp)
		printf("\nTx_bit = %d\n", tx_bit);
 100084c:	01004074 	movhi	r4,257
 1000850:	210b2004 	addi	r4,r4,11392
 1000854:	e17ffe17 	ldw	r5,-8(fp)
 1000858:	1000a340 	call	1000a34 <printf>
	print_binary(status);

	// poll transmit bit in 6850 status register. Wait for it to become '1'
	tx_bit = transmit_bit(status);
	printf("\nTx_bit = %d\n", tx_bit);
	while(tx_bit == 0)
 100085c:	e0bffe17 	ldw	r2,-8(fp)
 1000860:	1005003a 	cmpeq	r2,r2,zero
 1000864:	103fea1e 	bne	r2,zero,1000810 <putcharBluetooth+0x64>
		tx_bit = transmit_bit(Bluetooth_Status);
		printf("\nTx_bit = %d\n", tx_bit);
	}

	// write character to the 6850 TxData register to output the character
	printf("Writing %d to TxData register.\n", character);
 1000868:	01004074 	movhi	r4,257
 100086c:	210ada04 	addi	r4,r4,11112
 1000870:	e17fff17 	ldw	r5,-4(fp)
 1000874:	1000a340 	call	1000a34 <printf>
	Bluetooth_TxData =  character;
 1000878:	00a10034 	movhi	r2,33792
 100087c:	10808884 	addi	r2,r2,546
 1000880:	e0ffff17 	ldw	r3,-4(fp)
 1000884:	10c00005 	stb	r3,0(r2)

	return;
}
 1000888:	e037883a 	mov	sp,fp
 100088c:	dfc00117 	ldw	ra,4(sp)
 1000890:	df000017 	ldw	fp,0(sp)
 1000894:	dec00204 	addi	sp,sp,8
 1000898:	f800283a 	ret

0100089c <getcharBluetooth>:
 *
 * @param: none
 * @return: character
 */
char getcharBluetooth(void)
{
 100089c:	defff904 	addi	sp,sp,-28
 10008a0:	dfc00615 	stw	ra,24(sp)
 10008a4:	df000515 	stw	fp,20(sp)
 10008a8:	df000504 	addi	fp,sp,20
	int rx_bit = 0;
 10008ac:	e03ffe15 	stw	zero,-8(fp)
	int character;
	int status = Bluetooth_Status;
 10008b0:	00a10034 	movhi	r2,33792
 10008b4:	10808804 	addi	r2,r2,544
 10008b8:	10800003 	ldbu	r2,0(r2)
 10008bc:	10803fcc 	andi	r2,r2,255
 10008c0:	e0bffc15 	stw	r2,-16(fp)
	int i = 0;
 10008c4:	e03ffb15 	stw	zero,-20(fp)
	int res;

	printf("\nPolling for characters now\n\n");
 10008c8:	01004074 	movhi	r4,257
 10008cc:	210b2404 	addi	r4,r4,11408
 10008d0:	1000b700 	call	1000b70 <puts>
	printf("Bluetooth status = %d = ", status);
 10008d4:	01004074 	movhi	r4,257
 10008d8:	210b1904 	addi	r4,r4,11364
 10008dc:	e17ffc17 	ldw	r5,-16(fp)
 10008e0:	1000a340 	call	1000a34 <printf>
	print_binary(status);
 10008e4:	e13ffc17 	ldw	r4,-16(fp)
 10008e8:	10002c40 	call	10002c4 <print_binary>

	// poll recieve bit in 6850 status register. Wait for it to become '1'
	rx_bit = BluetoothTestForReceivedData(status);
 10008ec:	e13ffc17 	ldw	r4,-16(fp)
 10008f0:	10003480 	call	1000348 <BluetoothTestForReceivedData>
 10008f4:	e0bffe15 	stw	r2,-8(fp)
	printf("\nRx_bit before polling = %d\n", rx_bit);
 10008f8:	01004074 	movhi	r4,257
 10008fc:	210b2c04 	addi	r4,r4,11440
 1000900:	e17ffe17 	ldw	r5,-8(fp)
 1000904:	1000a340 	call	1000a34 <printf>
	while(rx_bit == 0 && i<100)
 1000908:	00000b06 	br	1000938 <getcharBluetooth+0x9c>
	{
		status = Bluetooth_Status;
 100090c:	00a10034 	movhi	r2,33792
 1000910:	10808804 	addi	r2,r2,544
 1000914:	10800003 	ldbu	r2,0(r2)
 1000918:	10803fcc 	andi	r2,r2,255
 100091c:	e0bffc15 	stw	r2,-16(fp)
		rx_bit = BluetoothTestForReceivedData(status);
 1000920:	e13ffc17 	ldw	r4,-16(fp)
 1000924:	10003480 	call	1000348 <BluetoothTestForReceivedData>
 1000928:	e0bffe15 	stw	r2,-8(fp)
		i++;
 100092c:	e0bffb17 	ldw	r2,-20(fp)
 1000930:	10800044 	addi	r2,r2,1
 1000934:	e0bffb15 	stw	r2,-20(fp)
	print_binary(status);

	// poll recieve bit in 6850 status register. Wait for it to become '1'
	rx_bit = BluetoothTestForReceivedData(status);
	printf("\nRx_bit before polling = %d\n", rx_bit);
	while(rx_bit == 0 && i<100)
 1000938:	e0bffe17 	ldw	r2,-8(fp)
 100093c:	1004c03a 	cmpne	r2,r2,zero
 1000940:	1000031e 	bne	r2,zero,1000950 <getcharBluetooth+0xb4>
 1000944:	e0bffb17 	ldw	r2,-20(fp)
 1000948:	10801910 	cmplti	r2,r2,100
 100094c:	103fef1e 	bne	r2,zero,100090c <getcharBluetooth+0x70>
	{
		status = Bluetooth_Status;
		rx_bit = BluetoothTestForReceivedData(status);
		i++;
	}
	printf("Keep checking for character? 1 for yes, 0 for no: ");
 1000950:	01004074 	movhi	r4,257
 1000954:	210b3404 	addi	r4,r4,11472
 1000958:	1000a340 	call	1000a34 <printf>
	scanf("%i", &res);
 100095c:	e17fff04 	addi	r5,fp,-4
 1000960:	01004074 	movhi	r4,257
 1000964:	210af504 	addi	r4,r4,11220
 1000968:	1000bb80 	call	1000bb8 <scanf>
	printf("Entered: %i\n", res);
 100096c:	e17fff17 	ldw	r5,-4(fp)
 1000970:	01004074 	movhi	r4,257
 1000974:	210af604 	addi	r4,r4,11224
 1000978:	1000a340 	call	1000a34 <printf>
	if (res == 1) {
 100097c:	e0bfff17 	ldw	r2,-4(fp)
 1000980:	10800058 	cmpnei	r2,r2,1
 1000984:	1000011e 	bne	r2,zero,100098c <getcharBluetooth+0xf0>
		getcharBluetooth();
 1000988:	100089c0 	call	100089c <getcharBluetooth>
	}
	// read character from the 6850 RxData register
	character =  Bluetooth_RxData;
 100098c:	00a10034 	movhi	r2,33792
 1000990:	10808884 	addi	r2,r2,546
 1000994:	10800003 	ldbu	r2,0(r2)
 1000998:	10803fcc 	andi	r2,r2,255
 100099c:	e0bffd15 	stw	r2,-12(fp)
	printf("Recieved '%x' from RxData register.\n", character);
 10009a0:	01004074 	movhi	r4,257
 10009a4:	210b4104 	addi	r4,r4,11524
 10009a8:	e17ffd17 	ldw	r5,-12(fp)
 10009ac:	1000a340 	call	1000a34 <printf>

	return character;
 10009b0:	e0bffd17 	ldw	r2,-12(fp)
 10009b4:	10803fcc 	andi	r2,r2,255
 10009b8:	1080201c 	xori	r2,r2,128
 10009bc:	10bfe004 	addi	r2,r2,-128
}
 10009c0:	e037883a 	mov	sp,fp
 10009c4:	dfc00117 	ldw	ra,4(sp)
 10009c8:	df000017 	ldw	fp,0(sp)
 10009cc:	dec00204 	addi	sp,sp,8
 10009d0:	f800283a 	ret

010009d4 <main>:

int main()
{
 10009d4:	defffe04 	addi	sp,sp,-8
 10009d8:	dfc00115 	stw	ra,4(sp)
 10009dc:	df000015 	stw	fp,0(sp)
 10009e0:	d839883a 	mov	fp,sp
	Init_Bluetooth();
 10009e4:	10003b40 	call	10003b4 <Init_Bluetooth>
	evenLongerDelay();
 10009e8:	10002840 	call	1000284 <evenLongerDelay>

	enterCMD();
 10009ec:	10006f80 	call	10006f8 <enterCMD>
	evenLongerDelay();
 10009f0:	10002840 	call	1000284 <evenLongerDelay>

	getcharBluetooth();
 10009f4:	100089c0 	call	100089c <getcharBluetooth>
	evenLongerDelay();
 10009f8:	10002840 	call	1000284 <evenLongerDelay>

	changeName();
 10009fc:	10004800 	call	1000480 <changeName>
	evenLongerDelay();
 1000a00:	10002840 	call	1000284 <evenLongerDelay>

	changePIN();
 1000a04:	10005b00 	call	10005b0 <changePIN>
	evenLongerDelay();
 1000a08:	10002840 	call	1000284 <evenLongerDelay>

	exitCMD();
 1000a0c:	100074c0 	call	100074c <exitCMD>
	printf("\nDone");
 1000a10:	01004074 	movhi	r4,257
 1000a14:	210b4b04 	addi	r4,r4,11564
 1000a18:	1000a340 	call	1000a34 <printf>
	return 0;
 1000a1c:	0005883a 	mov	r2,zero
}
 1000a20:	e037883a 	mov	sp,fp
 1000a24:	dfc00117 	ldw	ra,4(sp)
 1000a28:	df000017 	ldw	fp,0(sp)
 1000a2c:	dec00204 	addi	sp,sp,8
 1000a30:	f800283a 	ret

01000a34 <printf>:
 1000a34:	defffb04 	addi	sp,sp,-20
 1000a38:	dfc00115 	stw	ra,4(sp)
 1000a3c:	d9400215 	stw	r5,8(sp)
 1000a40:	d9800315 	stw	r6,12(sp)
 1000a44:	d9c00415 	stw	r7,16(sp)
 1000a48:	00804074 	movhi	r2,257
 1000a4c:	10939004 	addi	r2,r2,20032
 1000a50:	10c00017 	ldw	r3,0(r2)
 1000a54:	200b883a 	mov	r5,r4
 1000a58:	d8800204 	addi	r2,sp,8
 1000a5c:	19000217 	ldw	r4,8(r3)
 1000a60:	100d883a 	mov	r6,r2
 1000a64:	d8800015 	stw	r2,0(sp)
 1000a68:	1002b780 	call	1002b78 <__vfprintf_internal>
 1000a6c:	dfc00117 	ldw	ra,4(sp)
 1000a70:	dec00504 	addi	sp,sp,20
 1000a74:	f800283a 	ret

01000a78 <_printf_r>:
 1000a78:	defffc04 	addi	sp,sp,-16
 1000a7c:	dfc00115 	stw	ra,4(sp)
 1000a80:	d9800215 	stw	r6,8(sp)
 1000a84:	d9c00315 	stw	r7,12(sp)
 1000a88:	280d883a 	mov	r6,r5
 1000a8c:	21400217 	ldw	r5,8(r4)
 1000a90:	d8c00204 	addi	r3,sp,8
 1000a94:	180f883a 	mov	r7,r3
 1000a98:	d8c00015 	stw	r3,0(sp)
 1000a9c:	1000ccc0 	call	1000ccc <___vfprintf_internal_r>
 1000aa0:	dfc00117 	ldw	ra,4(sp)
 1000aa4:	dec00404 	addi	sp,sp,16
 1000aa8:	f800283a 	ret

01000aac <putchar>:
 1000aac:	00804074 	movhi	r2,257
 1000ab0:	10939004 	addi	r2,r2,20032
 1000ab4:	11800017 	ldw	r6,0(r2)
 1000ab8:	200b883a 	mov	r5,r4
 1000abc:	3009883a 	mov	r4,r6
 1000ac0:	31800217 	ldw	r6,8(r6)
 1000ac4:	1008c641 	jmpi	1008c64 <_putc_r>

01000ac8 <_putchar_r>:
 1000ac8:	21800217 	ldw	r6,8(r4)
 1000acc:	1008c641 	jmpi	1008c64 <_putc_r>

01000ad0 <_puts_r>:
 1000ad0:	defff604 	addi	sp,sp,-40
 1000ad4:	dc400715 	stw	r17,28(sp)
 1000ad8:	2023883a 	mov	r17,r4
 1000adc:	2809883a 	mov	r4,r5
 1000ae0:	dfc00915 	stw	ra,36(sp)
 1000ae4:	dcc00815 	stw	r19,32(sp)
 1000ae8:	2827883a 	mov	r19,r5
 1000aec:	1000c000 	call	1000c00 <strlen>
 1000af0:	89400217 	ldw	r5,8(r17)
 1000af4:	00c04074 	movhi	r3,257
 1000af8:	18cb4d04 	addi	r3,r3,11572
 1000afc:	01c00044 	movi	r7,1
 1000b00:	12000044 	addi	r8,r2,1
 1000b04:	d8c00515 	stw	r3,20(sp)
 1000b08:	d9c00615 	stw	r7,24(sp)
 1000b0c:	d8c00304 	addi	r3,sp,12
 1000b10:	01c00084 	movi	r7,2
 1000b14:	8809883a 	mov	r4,r17
 1000b18:	d80d883a 	mov	r6,sp
 1000b1c:	d8c00015 	stw	r3,0(sp)
 1000b20:	dcc00315 	stw	r19,12(sp)
 1000b24:	da000215 	stw	r8,8(sp)
 1000b28:	d9c00115 	stw	r7,4(sp)
 1000b2c:	d8800415 	stw	r2,16(sp)
 1000b30:	10067900 	call	1006790 <__sfvwrite_r>
 1000b34:	00ffffc4 	movi	r3,-1
 1000b38:	10000626 	beq	r2,zero,1000b54 <_puts_r+0x84>
 1000b3c:	1805883a 	mov	r2,r3
 1000b40:	dfc00917 	ldw	ra,36(sp)
 1000b44:	dcc00817 	ldw	r19,32(sp)
 1000b48:	dc400717 	ldw	r17,28(sp)
 1000b4c:	dec00a04 	addi	sp,sp,40
 1000b50:	f800283a 	ret
 1000b54:	00c00284 	movi	r3,10
 1000b58:	1805883a 	mov	r2,r3
 1000b5c:	dfc00917 	ldw	ra,36(sp)
 1000b60:	dcc00817 	ldw	r19,32(sp)
 1000b64:	dc400717 	ldw	r17,28(sp)
 1000b68:	dec00a04 	addi	sp,sp,40
 1000b6c:	f800283a 	ret

01000b70 <puts>:
 1000b70:	00804074 	movhi	r2,257
 1000b74:	10939004 	addi	r2,r2,20032
 1000b78:	200b883a 	mov	r5,r4
 1000b7c:	11000017 	ldw	r4,0(r2)
 1000b80:	1000ad01 	jmpi	1000ad0 <_puts_r>

01000b84 <_scanf_r>:
 1000b84:	defffc04 	addi	sp,sp,-16
 1000b88:	dfc00115 	stw	ra,4(sp)
 1000b8c:	d9800215 	stw	r6,8(sp)
 1000b90:	d9c00315 	stw	r7,12(sp)
 1000b94:	280d883a 	mov	r6,r5
 1000b98:	21400117 	ldw	r5,4(r4)
 1000b9c:	d8c00204 	addi	r3,sp,8
 1000ba0:	180f883a 	mov	r7,r3
 1000ba4:	d8c00015 	stw	r3,0(sp)
 1000ba8:	1002b9c0 	call	1002b9c <__svfscanf_r>
 1000bac:	dfc00117 	ldw	ra,4(sp)
 1000bb0:	dec00404 	addi	sp,sp,16
 1000bb4:	f800283a 	ret

01000bb8 <scanf>:
 1000bb8:	defffb04 	addi	sp,sp,-20
 1000bbc:	dfc00115 	stw	ra,4(sp)
 1000bc0:	d9400215 	stw	r5,8(sp)
 1000bc4:	d9800315 	stw	r6,12(sp)
 1000bc8:	d9c00415 	stw	r7,16(sp)
 1000bcc:	00804074 	movhi	r2,257
 1000bd0:	10939004 	addi	r2,r2,20032
 1000bd4:	11400017 	ldw	r5,0(r2)
 1000bd8:	200d883a 	mov	r6,r4
 1000bdc:	d8800204 	addi	r2,sp,8
 1000be0:	2809883a 	mov	r4,r5
 1000be4:	29400117 	ldw	r5,4(r5)
 1000be8:	100f883a 	mov	r7,r2
 1000bec:	d8800015 	stw	r2,0(sp)
 1000bf0:	1002b9c0 	call	1002b9c <__svfscanf_r>
 1000bf4:	dfc00117 	ldw	ra,4(sp)
 1000bf8:	dec00504 	addi	sp,sp,20
 1000bfc:	f800283a 	ret

01000c00 <strlen>:
 1000c00:	208000cc 	andi	r2,r4,3
 1000c04:	2011883a 	mov	r8,r4
 1000c08:	1000161e 	bne	r2,zero,1000c64 <strlen+0x64>
 1000c0c:	20c00017 	ldw	r3,0(r4)
 1000c10:	017fbff4 	movhi	r5,65279
 1000c14:	297fbfc4 	addi	r5,r5,-257
 1000c18:	01e02074 	movhi	r7,32897
 1000c1c:	39e02004 	addi	r7,r7,-32640
 1000c20:	1945883a 	add	r2,r3,r5
 1000c24:	11c4703a 	and	r2,r2,r7
 1000c28:	00c6303a 	nor	r3,zero,r3
 1000c2c:	1886703a 	and	r3,r3,r2
 1000c30:	18000c1e 	bne	r3,zero,1000c64 <strlen+0x64>
 1000c34:	280d883a 	mov	r6,r5
 1000c38:	380b883a 	mov	r5,r7
 1000c3c:	21000104 	addi	r4,r4,4
 1000c40:	20800017 	ldw	r2,0(r4)
 1000c44:	1187883a 	add	r3,r2,r6
 1000c48:	1946703a 	and	r3,r3,r5
 1000c4c:	0084303a 	nor	r2,zero,r2
 1000c50:	10c4703a 	and	r2,r2,r3
 1000c54:	103ff926 	beq	r2,zero,1000c3c <strlen+0x3c>
 1000c58:	20800007 	ldb	r2,0(r4)
 1000c5c:	10000326 	beq	r2,zero,1000c6c <strlen+0x6c>
 1000c60:	21000044 	addi	r4,r4,1
 1000c64:	20800007 	ldb	r2,0(r4)
 1000c68:	103ffd1e 	bne	r2,zero,1000c60 <strlen+0x60>
 1000c6c:	2205c83a 	sub	r2,r4,r8
 1000c70:	f800283a 	ret

01000c74 <__sprint_r>:
 1000c74:	30800217 	ldw	r2,8(r6)
 1000c78:	defffe04 	addi	sp,sp,-8
 1000c7c:	dc000015 	stw	r16,0(sp)
 1000c80:	dfc00115 	stw	ra,4(sp)
 1000c84:	3021883a 	mov	r16,r6
 1000c88:	0007883a 	mov	r3,zero
 1000c8c:	1000061e 	bne	r2,zero,1000ca8 <__sprint_r+0x34>
 1000c90:	1805883a 	mov	r2,r3
 1000c94:	30000115 	stw	zero,4(r6)
 1000c98:	dfc00117 	ldw	ra,4(sp)
 1000c9c:	dc000017 	ldw	r16,0(sp)
 1000ca0:	dec00204 	addi	sp,sp,8
 1000ca4:	f800283a 	ret
 1000ca8:	10067900 	call	1006790 <__sfvwrite_r>
 1000cac:	1007883a 	mov	r3,r2
 1000cb0:	1805883a 	mov	r2,r3
 1000cb4:	80000115 	stw	zero,4(r16)
 1000cb8:	80000215 	stw	zero,8(r16)
 1000cbc:	dfc00117 	ldw	ra,4(sp)
 1000cc0:	dc000017 	ldw	r16,0(sp)
 1000cc4:	dec00204 	addi	sp,sp,8
 1000cc8:	f800283a 	ret

01000ccc <___vfprintf_internal_r>:
 1000ccc:	defea404 	addi	sp,sp,-1392
 1000cd0:	dd815815 	stw	r22,1376(sp)
 1000cd4:	dc015215 	stw	r16,1352(sp)
 1000cd8:	d9c15115 	stw	r7,1348(sp)
 1000cdc:	dfc15b15 	stw	ra,1388(sp)
 1000ce0:	df015a15 	stw	fp,1384(sp)
 1000ce4:	ddc15915 	stw	r23,1380(sp)
 1000ce8:	dd415715 	stw	r21,1372(sp)
 1000cec:	dd015615 	stw	r20,1368(sp)
 1000cf0:	dcc15515 	stw	r19,1364(sp)
 1000cf4:	dc815415 	stw	r18,1360(sp)
 1000cf8:	dc415315 	stw	r17,1356(sp)
 1000cfc:	282d883a 	mov	r22,r5
 1000d00:	3021883a 	mov	r16,r6
 1000d04:	d9014f15 	stw	r4,1340(sp)
 1000d08:	1006de00 	call	1006de0 <_localeconv_r>
 1000d0c:	10800017 	ldw	r2,0(r2)
 1000d10:	d9c15117 	ldw	r7,1348(sp)
 1000d14:	d8814915 	stw	r2,1316(sp)
 1000d18:	d8814f17 	ldw	r2,1340(sp)
 1000d1c:	10000226 	beq	r2,zero,1000d28 <___vfprintf_internal_r+0x5c>
 1000d20:	10800e17 	ldw	r2,56(r2)
 1000d24:	10020d26 	beq	r2,zero,100155c <___vfprintf_internal_r+0x890>
 1000d28:	b080030b 	ldhu	r2,12(r22)
 1000d2c:	1080020c 	andi	r2,r2,8
 1000d30:	10020e26 	beq	r2,zero,100156c <___vfprintf_internal_r+0x8a0>
 1000d34:	b0800417 	ldw	r2,16(r22)
 1000d38:	10020c26 	beq	r2,zero,100156c <___vfprintf_internal_r+0x8a0>
 1000d3c:	b200030b 	ldhu	r8,12(r22)
 1000d40:	00800284 	movi	r2,10
 1000d44:	40c0068c 	andi	r3,r8,26
 1000d48:	18802f1e 	bne	r3,r2,1000e08 <___vfprintf_internal_r+0x13c>
 1000d4c:	b080038f 	ldh	r2,14(r22)
 1000d50:	10002d16 	blt	r2,zero,1000e08 <___vfprintf_internal_r+0x13c>
 1000d54:	b240038b 	ldhu	r9,14(r22)
 1000d58:	b2800717 	ldw	r10,28(r22)
 1000d5c:	b2c00917 	ldw	r11,36(r22)
 1000d60:	d9014f17 	ldw	r4,1340(sp)
 1000d64:	dc402904 	addi	r17,sp,164
 1000d68:	d8804004 	addi	r2,sp,256
 1000d6c:	00c10004 	movi	r3,1024
 1000d70:	423fff4c 	andi	r8,r8,65533
 1000d74:	800d883a 	mov	r6,r16
 1000d78:	880b883a 	mov	r5,r17
 1000d7c:	da002c0d 	sth	r8,176(sp)
 1000d80:	da402c8d 	sth	r9,178(sp)
 1000d84:	da803015 	stw	r10,192(sp)
 1000d88:	dac03215 	stw	r11,200(sp)
 1000d8c:	d8802d15 	stw	r2,180(sp)
 1000d90:	d8c02e15 	stw	r3,184(sp)
 1000d94:	d8802915 	stw	r2,164(sp)
 1000d98:	d8c02b15 	stw	r3,172(sp)
 1000d9c:	d8002f15 	stw	zero,188(sp)
 1000da0:	1000ccc0 	call	1000ccc <___vfprintf_internal_r>
 1000da4:	d8814b15 	stw	r2,1324(sp)
 1000da8:	10000416 	blt	r2,zero,1000dbc <___vfprintf_internal_r+0xf0>
 1000dac:	d9014f17 	ldw	r4,1340(sp)
 1000db0:	880b883a 	mov	r5,r17
 1000db4:	1005c240 	call	1005c24 <_fflush_r>
 1000db8:	1002321e 	bne	r2,zero,1001684 <___vfprintf_internal_r+0x9b8>
 1000dbc:	d8802c0b 	ldhu	r2,176(sp)
 1000dc0:	1080100c 	andi	r2,r2,64
 1000dc4:	10000326 	beq	r2,zero,1000dd4 <___vfprintf_internal_r+0x108>
 1000dc8:	b080030b 	ldhu	r2,12(r22)
 1000dcc:	10801014 	ori	r2,r2,64
 1000dd0:	b080030d 	sth	r2,12(r22)
 1000dd4:	d8814b17 	ldw	r2,1324(sp)
 1000dd8:	dfc15b17 	ldw	ra,1388(sp)
 1000ddc:	df015a17 	ldw	fp,1384(sp)
 1000de0:	ddc15917 	ldw	r23,1380(sp)
 1000de4:	dd815817 	ldw	r22,1376(sp)
 1000de8:	dd415717 	ldw	r21,1372(sp)
 1000dec:	dd015617 	ldw	r20,1368(sp)
 1000df0:	dcc15517 	ldw	r19,1364(sp)
 1000df4:	dc815417 	ldw	r18,1360(sp)
 1000df8:	dc415317 	ldw	r17,1356(sp)
 1000dfc:	dc015217 	ldw	r16,1352(sp)
 1000e00:	dec15c04 	addi	sp,sp,1392
 1000e04:	f800283a 	ret
 1000e08:	0005883a 	mov	r2,zero
 1000e0c:	0007883a 	mov	r3,zero
 1000e10:	dd401904 	addi	r21,sp,100
 1000e14:	d8814215 	stw	r2,1288(sp)
 1000e18:	802f883a 	mov	r23,r16
 1000e1c:	d8c14315 	stw	r3,1292(sp)
 1000e20:	d8014b15 	stw	zero,1324(sp)
 1000e24:	d8014815 	stw	zero,1312(sp)
 1000e28:	d8014415 	stw	zero,1296(sp)
 1000e2c:	d8014715 	stw	zero,1308(sp)
 1000e30:	dd400c15 	stw	r21,48(sp)
 1000e34:	d8000e15 	stw	zero,56(sp)
 1000e38:	d8000d15 	stw	zero,52(sp)
 1000e3c:	b8800007 	ldb	r2,0(r23)
 1000e40:	10001926 	beq	r2,zero,1000ea8 <___vfprintf_internal_r+0x1dc>
 1000e44:	00c00944 	movi	r3,37
 1000e48:	10c01726 	beq	r2,r3,1000ea8 <___vfprintf_internal_r+0x1dc>
 1000e4c:	b821883a 	mov	r16,r23
 1000e50:	00000106 	br	1000e58 <___vfprintf_internal_r+0x18c>
 1000e54:	10c00326 	beq	r2,r3,1000e64 <___vfprintf_internal_r+0x198>
 1000e58:	84000044 	addi	r16,r16,1
 1000e5c:	80800007 	ldb	r2,0(r16)
 1000e60:	103ffc1e 	bne	r2,zero,1000e54 <___vfprintf_internal_r+0x188>
 1000e64:	85e7c83a 	sub	r19,r16,r23
 1000e68:	98000e26 	beq	r19,zero,1000ea4 <___vfprintf_internal_r+0x1d8>
 1000e6c:	dc800e17 	ldw	r18,56(sp)
 1000e70:	dc400d17 	ldw	r17,52(sp)
 1000e74:	008001c4 	movi	r2,7
 1000e78:	94e5883a 	add	r18,r18,r19
 1000e7c:	8c400044 	addi	r17,r17,1
 1000e80:	adc00015 	stw	r23,0(r21)
 1000e84:	dc800e15 	stw	r18,56(sp)
 1000e88:	acc00115 	stw	r19,4(r21)
 1000e8c:	dc400d15 	stw	r17,52(sp)
 1000e90:	14428b16 	blt	r2,r17,10018c0 <___vfprintf_internal_r+0xbf4>
 1000e94:	ad400204 	addi	r21,r21,8
 1000e98:	d9014b17 	ldw	r4,1324(sp)
 1000e9c:	24c9883a 	add	r4,r4,r19
 1000ea0:	d9014b15 	stw	r4,1324(sp)
 1000ea4:	802f883a 	mov	r23,r16
 1000ea8:	b8800007 	ldb	r2,0(r23)
 1000eac:	10013c26 	beq	r2,zero,10013a0 <___vfprintf_internal_r+0x6d4>
 1000eb0:	bdc00044 	addi	r23,r23,1
 1000eb4:	d8000405 	stb	zero,16(sp)
 1000eb8:	b8c00007 	ldb	r3,0(r23)
 1000ebc:	04ffffc4 	movi	r19,-1
 1000ec0:	d8014c15 	stw	zero,1328(sp)
 1000ec4:	d8014a15 	stw	zero,1320(sp)
 1000ec8:	d8c14d15 	stw	r3,1332(sp)
 1000ecc:	bdc00044 	addi	r23,r23,1
 1000ed0:	d9414d17 	ldw	r5,1332(sp)
 1000ed4:	00801604 	movi	r2,88
 1000ed8:	28fff804 	addi	r3,r5,-32
 1000edc:	10c06036 	bltu	r2,r3,1001060 <___vfprintf_internal_r+0x394>
 1000ee0:	18c5883a 	add	r2,r3,r3
 1000ee4:	1085883a 	add	r2,r2,r2
 1000ee8:	00c04034 	movhi	r3,256
 1000eec:	18c3bf04 	addi	r3,r3,3836
 1000ef0:	10c5883a 	add	r2,r2,r3
 1000ef4:	11000017 	ldw	r4,0(r2)
 1000ef8:	2000683a 	jmp	r4
 1000efc:	01001e70 	cmpltui	r4,zero,121
 1000f00:	01001060 	cmpeqi	r4,zero,65
 1000f04:	01001060 	cmpeqi	r4,zero,65
 1000f08:	01001e5c 	xori	r4,zero,121
 1000f0c:	01001060 	cmpeqi	r4,zero,65
 1000f10:	01001060 	cmpeqi	r4,zero,65
 1000f14:	01001060 	cmpeqi	r4,zero,65
 1000f18:	01001060 	cmpeqi	r4,zero,65
 1000f1c:	01001060 	cmpeqi	r4,zero,65
 1000f20:	01001060 	cmpeqi	r4,zero,65
 1000f24:	01001c3c 	xorhi	r4,zero,112
 1000f28:	01001e4c 	andi	r4,zero,121
 1000f2c:	01001060 	cmpeqi	r4,zero,65
 1000f30:	01001c54 	movui	r4,113
 1000f34:	01001ee8 	cmpgeui	r4,zero,123
 1000f38:	01001060 	cmpeqi	r4,zero,65
 1000f3c:	01001ed4 	movui	r4,123
 1000f40:	01001e9c 	xori	r4,zero,122
 1000f44:	01001e9c 	xori	r4,zero,122
 1000f48:	01001e9c 	xori	r4,zero,122
 1000f4c:	01001e9c 	xori	r4,zero,122
 1000f50:	01001e9c 	xori	r4,zero,122
 1000f54:	01001e9c 	xori	r4,zero,122
 1000f58:	01001e9c 	xori	r4,zero,122
 1000f5c:	01001e9c 	xori	r4,zero,122
 1000f60:	01001e9c 	xori	r4,zero,122
 1000f64:	01001060 	cmpeqi	r4,zero,65
 1000f68:	01001060 	cmpeqi	r4,zero,65
 1000f6c:	01001060 	cmpeqi	r4,zero,65
 1000f70:	01001060 	cmpeqi	r4,zero,65
 1000f74:	01001060 	cmpeqi	r4,zero,65
 1000f78:	01001060 	cmpeqi	r4,zero,65
 1000f7c:	01001060 	cmpeqi	r4,zero,65
 1000f80:	01001060 	cmpeqi	r4,zero,65
 1000f84:	01001060 	cmpeqi	r4,zero,65
 1000f88:	01001060 	cmpeqi	r4,zero,65
 1000f8c:	010016b8 	rdprs	r4,zero,90
 1000f90:	01001d24 	muli	r4,zero,116
 1000f94:	01001060 	cmpeqi	r4,zero,65
 1000f98:	01001d24 	muli	r4,zero,116
 1000f9c:	01001060 	cmpeqi	r4,zero,65
 1000fa0:	01001060 	cmpeqi	r4,zero,65
 1000fa4:	01001060 	cmpeqi	r4,zero,65
 1000fa8:	01001060 	cmpeqi	r4,zero,65
 1000fac:	01001e88 	cmpgei	r4,zero,122
 1000fb0:	01001060 	cmpeqi	r4,zero,65
 1000fb4:	01001060 	cmpeqi	r4,zero,65
 1000fb8:	0100176c 	andhi	r4,zero,93
 1000fbc:	01001060 	cmpeqi	r4,zero,65
 1000fc0:	01001060 	cmpeqi	r4,zero,65
 1000fc4:	01001060 	cmpeqi	r4,zero,65
 1000fc8:	01001060 	cmpeqi	r4,zero,65
 1000fcc:	01001060 	cmpeqi	r4,zero,65
 1000fd0:	010017b8 	rdprs	r4,zero,94
 1000fd4:	01001060 	cmpeqi	r4,zero,65
 1000fd8:	01001060 	cmpeqi	r4,zero,65
 1000fdc:	01001dd8 	cmpnei	r4,zero,119
 1000fe0:	01001060 	cmpeqi	r4,zero,65
 1000fe4:	01001060 	cmpeqi	r4,zero,65
 1000fe8:	01001060 	cmpeqi	r4,zero,65
 1000fec:	01001060 	cmpeqi	r4,zero,65
 1000ff0:	01001060 	cmpeqi	r4,zero,65
 1000ff4:	01001060 	cmpeqi	r4,zero,65
 1000ff8:	01001060 	cmpeqi	r4,zero,65
 1000ffc:	01001060 	cmpeqi	r4,zero,65
 1001000:	01001060 	cmpeqi	r4,zero,65
 1001004:	01001060 	cmpeqi	r4,zero,65
 1001008:	01001dac 	andhi	r4,zero,118
 100100c:	010016c4 	movi	r4,91
 1001010:	01001d24 	muli	r4,zero,116
 1001014:	01001d24 	muli	r4,zero,116
 1001018:	01001d24 	muli	r4,zero,116
 100101c:	01001d10 	cmplti	r4,zero,116
 1001020:	010016c4 	movi	r4,91
 1001024:	01001060 	cmpeqi	r4,zero,65
 1001028:	01001060 	cmpeqi	r4,zero,65
 100102c:	01001c98 	cmpnei	r4,zero,114
 1001030:	01001060 	cmpeqi	r4,zero,65
 1001034:	01001c68 	cmpgeui	r4,zero,113
 1001038:	01001778 	rdprs	r4,zero,93
 100103c:	01001cc8 	cmpgei	r4,zero,115
 1001040:	01001cb4 	movhi	r4,114
 1001044:	01001060 	cmpeqi	r4,zero,65
 1001048:	01001f44 	movi	r4,125
 100104c:	01001060 	cmpeqi	r4,zero,65
 1001050:	010017c4 	movi	r4,95
 1001054:	01001060 	cmpeqi	r4,zero,65
 1001058:	01001060 	cmpeqi	r4,zero,65
 100105c:	01001e3c 	xorhi	r4,zero,120
 1001060:	d9014d17 	ldw	r4,1332(sp)
 1001064:	2000ce26 	beq	r4,zero,10013a0 <___vfprintf_internal_r+0x6d4>
 1001068:	01400044 	movi	r5,1
 100106c:	d9800f04 	addi	r6,sp,60
 1001070:	d9c14015 	stw	r7,1280(sp)
 1001074:	d9414515 	stw	r5,1300(sp)
 1001078:	d9814115 	stw	r6,1284(sp)
 100107c:	280f883a 	mov	r7,r5
 1001080:	d9000f05 	stb	r4,60(sp)
 1001084:	d8000405 	stb	zero,16(sp)
 1001088:	d8014615 	stw	zero,1304(sp)
 100108c:	d8c14c17 	ldw	r3,1328(sp)
 1001090:	1880008c 	andi	r2,r3,2
 1001094:	1005003a 	cmpeq	r2,r2,zero
 1001098:	d8815015 	stw	r2,1344(sp)
 100109c:	1000031e 	bne	r2,zero,10010ac <___vfprintf_internal_r+0x3e0>
 10010a0:	d9014517 	ldw	r4,1300(sp)
 10010a4:	21000084 	addi	r4,r4,2
 10010a8:	d9014515 	stw	r4,1300(sp)
 10010ac:	d9414c17 	ldw	r5,1328(sp)
 10010b0:	2940210c 	andi	r5,r5,132
 10010b4:	d9414e15 	stw	r5,1336(sp)
 10010b8:	28002d1e 	bne	r5,zero,1001170 <___vfprintf_internal_r+0x4a4>
 10010bc:	d9814a17 	ldw	r6,1320(sp)
 10010c0:	d8814517 	ldw	r2,1300(sp)
 10010c4:	30a1c83a 	sub	r16,r6,r2
 10010c8:	0400290e 	bge	zero,r16,1001170 <___vfprintf_internal_r+0x4a4>
 10010cc:	00800404 	movi	r2,16
 10010d0:	1404580e 	bge	r2,r16,1002234 <___vfprintf_internal_r+0x1568>
 10010d4:	dc800e17 	ldw	r18,56(sp)
 10010d8:	dc400d17 	ldw	r17,52(sp)
 10010dc:	1027883a 	mov	r19,r2
 10010e0:	07004074 	movhi	fp,257
 10010e4:	e70b6984 	addi	fp,fp,11686
 10010e8:	050001c4 	movi	r20,7
 10010ec:	00000306 	br	10010fc <___vfprintf_internal_r+0x430>
 10010f0:	843ffc04 	addi	r16,r16,-16
 10010f4:	ad400204 	addi	r21,r21,8
 10010f8:	9c00130e 	bge	r19,r16,1001148 <___vfprintf_internal_r+0x47c>
 10010fc:	94800404 	addi	r18,r18,16
 1001100:	8c400044 	addi	r17,r17,1
 1001104:	af000015 	stw	fp,0(r21)
 1001108:	acc00115 	stw	r19,4(r21)
 100110c:	dc800e15 	stw	r18,56(sp)
 1001110:	dc400d15 	stw	r17,52(sp)
 1001114:	a47ff60e 	bge	r20,r17,10010f0 <___vfprintf_internal_r+0x424>
 1001118:	d9014f17 	ldw	r4,1340(sp)
 100111c:	b00b883a 	mov	r5,r22
 1001120:	d9800c04 	addi	r6,sp,48
 1001124:	d9c15115 	stw	r7,1348(sp)
 1001128:	1000c740 	call	1000c74 <__sprint_r>
 100112c:	d9c15117 	ldw	r7,1348(sp)
 1001130:	10009e1e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1001134:	843ffc04 	addi	r16,r16,-16
 1001138:	dc800e17 	ldw	r18,56(sp)
 100113c:	dc400d17 	ldw	r17,52(sp)
 1001140:	dd401904 	addi	r21,sp,100
 1001144:	9c3fed16 	blt	r19,r16,10010fc <___vfprintf_internal_r+0x430>
 1001148:	9425883a 	add	r18,r18,r16
 100114c:	8c400044 	addi	r17,r17,1
 1001150:	008001c4 	movi	r2,7
 1001154:	af000015 	stw	fp,0(r21)
 1001158:	ac000115 	stw	r16,4(r21)
 100115c:	dc800e15 	stw	r18,56(sp)
 1001160:	dc400d15 	stw	r17,52(sp)
 1001164:	1441f516 	blt	r2,r17,100193c <___vfprintf_internal_r+0xc70>
 1001168:	ad400204 	addi	r21,r21,8
 100116c:	00000206 	br	1001178 <___vfprintf_internal_r+0x4ac>
 1001170:	dc800e17 	ldw	r18,56(sp)
 1001174:	dc400d17 	ldw	r17,52(sp)
 1001178:	d8800407 	ldb	r2,16(sp)
 100117c:	10000b26 	beq	r2,zero,10011ac <___vfprintf_internal_r+0x4e0>
 1001180:	00800044 	movi	r2,1
 1001184:	94800044 	addi	r18,r18,1
 1001188:	8c400044 	addi	r17,r17,1
 100118c:	a8800115 	stw	r2,4(r21)
 1001190:	d8c00404 	addi	r3,sp,16
 1001194:	008001c4 	movi	r2,7
 1001198:	a8c00015 	stw	r3,0(r21)
 100119c:	dc800e15 	stw	r18,56(sp)
 10011a0:	dc400d15 	stw	r17,52(sp)
 10011a4:	1441da16 	blt	r2,r17,1001910 <___vfprintf_internal_r+0xc44>
 10011a8:	ad400204 	addi	r21,r21,8
 10011ac:	d9015017 	ldw	r4,1344(sp)
 10011b0:	20000b1e 	bne	r4,zero,10011e0 <___vfprintf_internal_r+0x514>
 10011b4:	d8800444 	addi	r2,sp,17
 10011b8:	94800084 	addi	r18,r18,2
 10011bc:	8c400044 	addi	r17,r17,1
 10011c0:	a8800015 	stw	r2,0(r21)
 10011c4:	00c00084 	movi	r3,2
 10011c8:	008001c4 	movi	r2,7
 10011cc:	a8c00115 	stw	r3,4(r21)
 10011d0:	dc800e15 	stw	r18,56(sp)
 10011d4:	dc400d15 	stw	r17,52(sp)
 10011d8:	1441c216 	blt	r2,r17,10018e4 <___vfprintf_internal_r+0xc18>
 10011dc:	ad400204 	addi	r21,r21,8
 10011e0:	d9414e17 	ldw	r5,1336(sp)
 10011e4:	00802004 	movi	r2,128
 10011e8:	2880b126 	beq	r5,r2,10014b0 <___vfprintf_internal_r+0x7e4>
 10011ec:	d8c14617 	ldw	r3,1304(sp)
 10011f0:	19e1c83a 	sub	r16,r3,r7
 10011f4:	0400260e 	bge	zero,r16,1001290 <___vfprintf_internal_r+0x5c4>
 10011f8:	00800404 	movi	r2,16
 10011fc:	1403c90e 	bge	r2,r16,1002124 <___vfprintf_internal_r+0x1458>
 1001200:	1027883a 	mov	r19,r2
 1001204:	07004074 	movhi	fp,257
 1001208:	e70b6584 	addi	fp,fp,11670
 100120c:	050001c4 	movi	r20,7
 1001210:	00000306 	br	1001220 <___vfprintf_internal_r+0x554>
 1001214:	843ffc04 	addi	r16,r16,-16
 1001218:	ad400204 	addi	r21,r21,8
 100121c:	9c00130e 	bge	r19,r16,100126c <___vfprintf_internal_r+0x5a0>
 1001220:	94800404 	addi	r18,r18,16
 1001224:	8c400044 	addi	r17,r17,1
 1001228:	af000015 	stw	fp,0(r21)
 100122c:	acc00115 	stw	r19,4(r21)
 1001230:	dc800e15 	stw	r18,56(sp)
 1001234:	dc400d15 	stw	r17,52(sp)
 1001238:	a47ff60e 	bge	r20,r17,1001214 <___vfprintf_internal_r+0x548>
 100123c:	d9014f17 	ldw	r4,1340(sp)
 1001240:	b00b883a 	mov	r5,r22
 1001244:	d9800c04 	addi	r6,sp,48
 1001248:	d9c15115 	stw	r7,1348(sp)
 100124c:	1000c740 	call	1000c74 <__sprint_r>
 1001250:	d9c15117 	ldw	r7,1348(sp)
 1001254:	1000551e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1001258:	843ffc04 	addi	r16,r16,-16
 100125c:	dc800e17 	ldw	r18,56(sp)
 1001260:	dc400d17 	ldw	r17,52(sp)
 1001264:	dd401904 	addi	r21,sp,100
 1001268:	9c3fed16 	blt	r19,r16,1001220 <___vfprintf_internal_r+0x554>
 100126c:	9425883a 	add	r18,r18,r16
 1001270:	8c400044 	addi	r17,r17,1
 1001274:	008001c4 	movi	r2,7
 1001278:	af000015 	stw	fp,0(r21)
 100127c:	ac000115 	stw	r16,4(r21)
 1001280:	dc800e15 	stw	r18,56(sp)
 1001284:	dc400d15 	stw	r17,52(sp)
 1001288:	14418216 	blt	r2,r17,1001894 <___vfprintf_internal_r+0xbc8>
 100128c:	ad400204 	addi	r21,r21,8
 1001290:	d9014c17 	ldw	r4,1328(sp)
 1001294:	2080400c 	andi	r2,r4,256
 1001298:	10004a1e 	bne	r2,zero,10013c4 <___vfprintf_internal_r+0x6f8>
 100129c:	d9414117 	ldw	r5,1284(sp)
 10012a0:	91e5883a 	add	r18,r18,r7
 10012a4:	8c400044 	addi	r17,r17,1
 10012a8:	008001c4 	movi	r2,7
 10012ac:	a9400015 	stw	r5,0(r21)
 10012b0:	a9c00115 	stw	r7,4(r21)
 10012b4:	dc800e15 	stw	r18,56(sp)
 10012b8:	dc400d15 	stw	r17,52(sp)
 10012bc:	14416716 	blt	r2,r17,100185c <___vfprintf_internal_r+0xb90>
 10012c0:	a8c00204 	addi	r3,r21,8
 10012c4:	d9814c17 	ldw	r6,1328(sp)
 10012c8:	3080010c 	andi	r2,r6,4
 10012cc:	10002826 	beq	r2,zero,1001370 <___vfprintf_internal_r+0x6a4>
 10012d0:	d8814a17 	ldw	r2,1320(sp)
 10012d4:	d9014517 	ldw	r4,1300(sp)
 10012d8:	1121c83a 	sub	r16,r2,r4
 10012dc:	0400240e 	bge	zero,r16,1001370 <___vfprintf_internal_r+0x6a4>
 10012e0:	00800404 	movi	r2,16
 10012e4:	14044f0e 	bge	r2,r16,1002424 <___vfprintf_internal_r+0x1758>
 10012e8:	dc400d17 	ldw	r17,52(sp)
 10012ec:	1027883a 	mov	r19,r2
 10012f0:	07004074 	movhi	fp,257
 10012f4:	e70b6984 	addi	fp,fp,11686
 10012f8:	050001c4 	movi	r20,7
 10012fc:	00000306 	br	100130c <___vfprintf_internal_r+0x640>
 1001300:	843ffc04 	addi	r16,r16,-16
 1001304:	18c00204 	addi	r3,r3,8
 1001308:	9c00110e 	bge	r19,r16,1001350 <___vfprintf_internal_r+0x684>
 100130c:	94800404 	addi	r18,r18,16
 1001310:	8c400044 	addi	r17,r17,1
 1001314:	1f000015 	stw	fp,0(r3)
 1001318:	1cc00115 	stw	r19,4(r3)
 100131c:	dc800e15 	stw	r18,56(sp)
 1001320:	dc400d15 	stw	r17,52(sp)
 1001324:	a47ff60e 	bge	r20,r17,1001300 <___vfprintf_internal_r+0x634>
 1001328:	d9014f17 	ldw	r4,1340(sp)
 100132c:	b00b883a 	mov	r5,r22
 1001330:	d9800c04 	addi	r6,sp,48
 1001334:	1000c740 	call	1000c74 <__sprint_r>
 1001338:	10001c1e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 100133c:	843ffc04 	addi	r16,r16,-16
 1001340:	dc800e17 	ldw	r18,56(sp)
 1001344:	dc400d17 	ldw	r17,52(sp)
 1001348:	d8c01904 	addi	r3,sp,100
 100134c:	9c3fef16 	blt	r19,r16,100130c <___vfprintf_internal_r+0x640>
 1001350:	9425883a 	add	r18,r18,r16
 1001354:	8c400044 	addi	r17,r17,1
 1001358:	008001c4 	movi	r2,7
 100135c:	1f000015 	stw	fp,0(r3)
 1001360:	1c000115 	stw	r16,4(r3)
 1001364:	dc800e15 	stw	r18,56(sp)
 1001368:	dc400d15 	stw	r17,52(sp)
 100136c:	1440cb16 	blt	r2,r17,100169c <___vfprintf_internal_r+0x9d0>
 1001370:	d8814a17 	ldw	r2,1320(sp)
 1001374:	d9414517 	ldw	r5,1300(sp)
 1001378:	1140010e 	bge	r2,r5,1001380 <___vfprintf_internal_r+0x6b4>
 100137c:	2805883a 	mov	r2,r5
 1001380:	d9814b17 	ldw	r6,1324(sp)
 1001384:	308d883a 	add	r6,r6,r2
 1001388:	d9814b15 	stw	r6,1324(sp)
 100138c:	90013b1e 	bne	r18,zero,100187c <___vfprintf_internal_r+0xbb0>
 1001390:	d9c14017 	ldw	r7,1280(sp)
 1001394:	dd401904 	addi	r21,sp,100
 1001398:	d8000d15 	stw	zero,52(sp)
 100139c:	003ea706 	br	1000e3c <___vfprintf_internal_r+0x170>
 10013a0:	d8800e17 	ldw	r2,56(sp)
 10013a4:	10053f1e 	bne	r2,zero,10028a4 <___vfprintf_internal_r+0x1bd8>
 10013a8:	d8000d15 	stw	zero,52(sp)
 10013ac:	b080030b 	ldhu	r2,12(r22)
 10013b0:	1080100c 	andi	r2,r2,64
 10013b4:	103e8726 	beq	r2,zero,1000dd4 <___vfprintf_internal_r+0x108>
 10013b8:	00bfffc4 	movi	r2,-1
 10013bc:	d8814b15 	stw	r2,1324(sp)
 10013c0:	003e8406 	br	1000dd4 <___vfprintf_internal_r+0x108>
 10013c4:	d9814d17 	ldw	r6,1332(sp)
 10013c8:	00801944 	movi	r2,101
 10013cc:	11806e16 	blt	r2,r6,1001588 <___vfprintf_internal_r+0x8bc>
 10013d0:	d9414717 	ldw	r5,1308(sp)
 10013d4:	00c00044 	movi	r3,1
 10013d8:	1943430e 	bge	r3,r5,10020e8 <___vfprintf_internal_r+0x141c>
 10013dc:	d8814117 	ldw	r2,1284(sp)
 10013e0:	94800044 	addi	r18,r18,1
 10013e4:	8c400044 	addi	r17,r17,1
 10013e8:	a8800015 	stw	r2,0(r21)
 10013ec:	008001c4 	movi	r2,7
 10013f0:	a8c00115 	stw	r3,4(r21)
 10013f4:	dc800e15 	stw	r18,56(sp)
 10013f8:	dc400d15 	stw	r17,52(sp)
 10013fc:	1441ca16 	blt	r2,r17,1001b28 <___vfprintf_internal_r+0xe5c>
 1001400:	a8c00204 	addi	r3,r21,8
 1001404:	d9014917 	ldw	r4,1316(sp)
 1001408:	00800044 	movi	r2,1
 100140c:	94800044 	addi	r18,r18,1
 1001410:	8c400044 	addi	r17,r17,1
 1001414:	18800115 	stw	r2,4(r3)
 1001418:	008001c4 	movi	r2,7
 100141c:	19000015 	stw	r4,0(r3)
 1001420:	dc800e15 	stw	r18,56(sp)
 1001424:	dc400d15 	stw	r17,52(sp)
 1001428:	1441b616 	blt	r2,r17,1001b04 <___vfprintf_internal_r+0xe38>
 100142c:	1cc00204 	addi	r19,r3,8
 1001430:	d9014217 	ldw	r4,1288(sp)
 1001434:	d9414317 	ldw	r5,1292(sp)
 1001438:	000d883a 	mov	r6,zero
 100143c:	000f883a 	mov	r7,zero
 1001440:	100e8a80 	call	100e8a8 <__nedf2>
 1001444:	10017426 	beq	r2,zero,1001a18 <___vfprintf_internal_r+0xd4c>
 1001448:	d9414717 	ldw	r5,1308(sp)
 100144c:	d9814117 	ldw	r6,1284(sp)
 1001450:	8c400044 	addi	r17,r17,1
 1001454:	2c85883a 	add	r2,r5,r18
 1001458:	14bfffc4 	addi	r18,r2,-1
 100145c:	28bfffc4 	addi	r2,r5,-1
 1001460:	30c00044 	addi	r3,r6,1
 1001464:	98800115 	stw	r2,4(r19)
 1001468:	008001c4 	movi	r2,7
 100146c:	98c00015 	stw	r3,0(r19)
 1001470:	dc800e15 	stw	r18,56(sp)
 1001474:	dc400d15 	stw	r17,52(sp)
 1001478:	14418e16 	blt	r2,r17,1001ab4 <___vfprintf_internal_r+0xde8>
 100147c:	9cc00204 	addi	r19,r19,8
 1001480:	d9414817 	ldw	r5,1312(sp)
 1001484:	d8800804 	addi	r2,sp,32
 1001488:	8c400044 	addi	r17,r17,1
 100148c:	9165883a 	add	r18,r18,r5
 1001490:	98800015 	stw	r2,0(r19)
 1001494:	008001c4 	movi	r2,7
 1001498:	99400115 	stw	r5,4(r19)
 100149c:	dc800e15 	stw	r18,56(sp)
 10014a0:	dc400d15 	stw	r17,52(sp)
 10014a4:	1440ed16 	blt	r2,r17,100185c <___vfprintf_internal_r+0xb90>
 10014a8:	98c00204 	addi	r3,r19,8
 10014ac:	003f8506 	br	10012c4 <___vfprintf_internal_r+0x5f8>
 10014b0:	d9814a17 	ldw	r6,1320(sp)
 10014b4:	d8814517 	ldw	r2,1300(sp)
 10014b8:	30a1c83a 	sub	r16,r6,r2
 10014bc:	043f4b0e 	bge	zero,r16,10011ec <___vfprintf_internal_r+0x520>
 10014c0:	00800404 	movi	r2,16
 10014c4:	1404340e 	bge	r2,r16,1002598 <___vfprintf_internal_r+0x18cc>
 10014c8:	1027883a 	mov	r19,r2
 10014cc:	07004074 	movhi	fp,257
 10014d0:	e70b6584 	addi	fp,fp,11670
 10014d4:	050001c4 	movi	r20,7
 10014d8:	00000306 	br	10014e8 <___vfprintf_internal_r+0x81c>
 10014dc:	843ffc04 	addi	r16,r16,-16
 10014e0:	ad400204 	addi	r21,r21,8
 10014e4:	9c00130e 	bge	r19,r16,1001534 <___vfprintf_internal_r+0x868>
 10014e8:	94800404 	addi	r18,r18,16
 10014ec:	8c400044 	addi	r17,r17,1
 10014f0:	af000015 	stw	fp,0(r21)
 10014f4:	acc00115 	stw	r19,4(r21)
 10014f8:	dc800e15 	stw	r18,56(sp)
 10014fc:	dc400d15 	stw	r17,52(sp)
 1001500:	a47ff60e 	bge	r20,r17,10014dc <___vfprintf_internal_r+0x810>
 1001504:	d9014f17 	ldw	r4,1340(sp)
 1001508:	b00b883a 	mov	r5,r22
 100150c:	d9800c04 	addi	r6,sp,48
 1001510:	d9c15115 	stw	r7,1348(sp)
 1001514:	1000c740 	call	1000c74 <__sprint_r>
 1001518:	d9c15117 	ldw	r7,1348(sp)
 100151c:	103fa31e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1001520:	843ffc04 	addi	r16,r16,-16
 1001524:	dc800e17 	ldw	r18,56(sp)
 1001528:	dc400d17 	ldw	r17,52(sp)
 100152c:	dd401904 	addi	r21,sp,100
 1001530:	9c3fed16 	blt	r19,r16,10014e8 <___vfprintf_internal_r+0x81c>
 1001534:	9425883a 	add	r18,r18,r16
 1001538:	8c400044 	addi	r17,r17,1
 100153c:	008001c4 	movi	r2,7
 1001540:	af000015 	stw	fp,0(r21)
 1001544:	ac000115 	stw	r16,4(r21)
 1001548:	dc800e15 	stw	r18,56(sp)
 100154c:	dc400d15 	stw	r17,52(sp)
 1001550:	14416116 	blt	r2,r17,1001ad8 <___vfprintf_internal_r+0xe0c>
 1001554:	ad400204 	addi	r21,r21,8
 1001558:	003f2406 	br	10011ec <___vfprintf_internal_r+0x520>
 100155c:	d9014f17 	ldw	r4,1340(sp)
 1001560:	1005ebc0 	call	1005ebc <__sinit>
 1001564:	d9c15117 	ldw	r7,1348(sp)
 1001568:	003def06 	br	1000d28 <___vfprintf_internal_r+0x5c>
 100156c:	d9014f17 	ldw	r4,1340(sp)
 1001570:	b00b883a 	mov	r5,r22
 1001574:	d9c15115 	stw	r7,1348(sp)
 1001578:	100431c0 	call	100431c <__swsetup_r>
 100157c:	d9c15117 	ldw	r7,1348(sp)
 1001580:	103dee26 	beq	r2,zero,1000d3c <___vfprintf_internal_r+0x70>
 1001584:	003f8c06 	br	10013b8 <___vfprintf_internal_r+0x6ec>
 1001588:	d9014217 	ldw	r4,1288(sp)
 100158c:	d9414317 	ldw	r5,1292(sp)
 1001590:	000d883a 	mov	r6,zero
 1001594:	000f883a 	mov	r7,zero
 1001598:	100e8200 	call	100e820 <__eqdf2>
 100159c:	1000f21e 	bne	r2,zero,1001968 <___vfprintf_internal_r+0xc9c>
 10015a0:	00804074 	movhi	r2,257
 10015a4:	108b6504 	addi	r2,r2,11668
 10015a8:	94800044 	addi	r18,r18,1
 10015ac:	8c400044 	addi	r17,r17,1
 10015b0:	a8800015 	stw	r2,0(r21)
 10015b4:	00c00044 	movi	r3,1
 10015b8:	008001c4 	movi	r2,7
 10015bc:	a8c00115 	stw	r3,4(r21)
 10015c0:	dc800e15 	stw	r18,56(sp)
 10015c4:	dc400d15 	stw	r17,52(sp)
 10015c8:	1442fa16 	blt	r2,r17,10021b4 <___vfprintf_internal_r+0x14e8>
 10015cc:	a8c00204 	addi	r3,r21,8
 10015d0:	d8800517 	ldw	r2,20(sp)
 10015d4:	d9014717 	ldw	r4,1308(sp)
 10015d8:	11015c0e 	bge	r2,r4,1001b4c <___vfprintf_internal_r+0xe80>
 10015dc:	dc400d17 	ldw	r17,52(sp)
 10015e0:	d9814917 	ldw	r6,1316(sp)
 10015e4:	00800044 	movi	r2,1
 10015e8:	94800044 	addi	r18,r18,1
 10015ec:	8c400044 	addi	r17,r17,1
 10015f0:	18800115 	stw	r2,4(r3)
 10015f4:	008001c4 	movi	r2,7
 10015f8:	19800015 	stw	r6,0(r3)
 10015fc:	dc800e15 	stw	r18,56(sp)
 1001600:	dc400d15 	stw	r17,52(sp)
 1001604:	14431016 	blt	r2,r17,1002248 <___vfprintf_internal_r+0x157c>
 1001608:	18c00204 	addi	r3,r3,8
 100160c:	d8814717 	ldw	r2,1308(sp)
 1001610:	143fffc4 	addi	r16,r2,-1
 1001614:	043f2b0e 	bge	zero,r16,10012c4 <___vfprintf_internal_r+0x5f8>
 1001618:	00800404 	movi	r2,16
 100161c:	1402a20e 	bge	r2,r16,10020a8 <___vfprintf_internal_r+0x13dc>
 1001620:	dc400d17 	ldw	r17,52(sp)
 1001624:	1027883a 	mov	r19,r2
 1001628:	07004074 	movhi	fp,257
 100162c:	e70b6584 	addi	fp,fp,11670
 1001630:	050001c4 	movi	r20,7
 1001634:	00000306 	br	1001644 <___vfprintf_internal_r+0x978>
 1001638:	18c00204 	addi	r3,r3,8
 100163c:	843ffc04 	addi	r16,r16,-16
 1001640:	9c029c0e 	bge	r19,r16,10020b4 <___vfprintf_internal_r+0x13e8>
 1001644:	94800404 	addi	r18,r18,16
 1001648:	8c400044 	addi	r17,r17,1
 100164c:	1f000015 	stw	fp,0(r3)
 1001650:	1cc00115 	stw	r19,4(r3)
 1001654:	dc800e15 	stw	r18,56(sp)
 1001658:	dc400d15 	stw	r17,52(sp)
 100165c:	a47ff60e 	bge	r20,r17,1001638 <___vfprintf_internal_r+0x96c>
 1001660:	d9014f17 	ldw	r4,1340(sp)
 1001664:	b00b883a 	mov	r5,r22
 1001668:	d9800c04 	addi	r6,sp,48
 100166c:	1000c740 	call	1000c74 <__sprint_r>
 1001670:	103f4e1e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1001674:	dc800e17 	ldw	r18,56(sp)
 1001678:	dc400d17 	ldw	r17,52(sp)
 100167c:	d8c01904 	addi	r3,sp,100
 1001680:	003fee06 	br	100163c <___vfprintf_internal_r+0x970>
 1001684:	d8802c0b 	ldhu	r2,176(sp)
 1001688:	00ffffc4 	movi	r3,-1
 100168c:	d8c14b15 	stw	r3,1324(sp)
 1001690:	1080100c 	andi	r2,r2,64
 1001694:	103dcc1e 	bne	r2,zero,1000dc8 <___vfprintf_internal_r+0xfc>
 1001698:	003dce06 	br	1000dd4 <___vfprintf_internal_r+0x108>
 100169c:	d9014f17 	ldw	r4,1340(sp)
 10016a0:	b00b883a 	mov	r5,r22
 10016a4:	d9800c04 	addi	r6,sp,48
 10016a8:	1000c740 	call	1000c74 <__sprint_r>
 10016ac:	103f3f1e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 10016b0:	dc800e17 	ldw	r18,56(sp)
 10016b4:	003f2e06 	br	1001370 <___vfprintf_internal_r+0x6a4>
 10016b8:	d9414c17 	ldw	r5,1328(sp)
 10016bc:	29400414 	ori	r5,r5,16
 10016c0:	d9414c15 	stw	r5,1328(sp)
 10016c4:	d9814c17 	ldw	r6,1328(sp)
 10016c8:	3080080c 	andi	r2,r6,32
 10016cc:	10014f1e 	bne	r2,zero,1001c0c <___vfprintf_internal_r+0xf40>
 10016d0:	d8c14c17 	ldw	r3,1328(sp)
 10016d4:	1880040c 	andi	r2,r3,16
 10016d8:	1002ea1e 	bne	r2,zero,1002284 <___vfprintf_internal_r+0x15b8>
 10016dc:	d9014c17 	ldw	r4,1328(sp)
 10016e0:	2080100c 	andi	r2,r4,64
 10016e4:	1002e726 	beq	r2,zero,1002284 <___vfprintf_internal_r+0x15b8>
 10016e8:	3880000f 	ldh	r2,0(r7)
 10016ec:	39c00104 	addi	r7,r7,4
 10016f0:	d9c14015 	stw	r7,1280(sp)
 10016f4:	1023d7fa 	srai	r17,r2,31
 10016f8:	1021883a 	mov	r16,r2
 10016fc:	88037216 	blt	r17,zero,10024c8 <___vfprintf_internal_r+0x17fc>
 1001700:	01000044 	movi	r4,1
 1001704:	98000416 	blt	r19,zero,1001718 <___vfprintf_internal_r+0xa4c>
 1001708:	d8c14c17 	ldw	r3,1328(sp)
 100170c:	00bfdfc4 	movi	r2,-129
 1001710:	1886703a 	and	r3,r3,r2
 1001714:	d8c14c15 	stw	r3,1328(sp)
 1001718:	8444b03a 	or	r2,r16,r17
 100171c:	1002261e 	bne	r2,zero,1001fb8 <___vfprintf_internal_r+0x12ec>
 1001720:	9802251e 	bne	r19,zero,1001fb8 <___vfprintf_internal_r+0x12ec>
 1001724:	20803fcc 	andi	r2,r4,255
 1001728:	10029b26 	beq	r2,zero,1002198 <___vfprintf_internal_r+0x14cc>
 100172c:	d8c01904 	addi	r3,sp,100
 1001730:	dd000f04 	addi	r20,sp,60
 1001734:	d8c14115 	stw	r3,1284(sp)
 1001738:	d8c14117 	ldw	r3,1284(sp)
 100173c:	dcc14515 	stw	r19,1300(sp)
 1001740:	a0c5c83a 	sub	r2,r20,r3
 1001744:	11c00a04 	addi	r7,r2,40
 1001748:	99c0010e 	bge	r19,r7,1001750 <___vfprintf_internal_r+0xa84>
 100174c:	d9c14515 	stw	r7,1300(sp)
 1001750:	dcc14615 	stw	r19,1304(sp)
 1001754:	d8800407 	ldb	r2,16(sp)
 1001758:	103e4c26 	beq	r2,zero,100108c <___vfprintf_internal_r+0x3c0>
 100175c:	d8814517 	ldw	r2,1300(sp)
 1001760:	10800044 	addi	r2,r2,1
 1001764:	d8814515 	stw	r2,1300(sp)
 1001768:	003e4806 	br	100108c <___vfprintf_internal_r+0x3c0>
 100176c:	d9814c17 	ldw	r6,1328(sp)
 1001770:	31800414 	ori	r6,r6,16
 1001774:	d9814c15 	stw	r6,1328(sp)
 1001778:	d8c14c17 	ldw	r3,1328(sp)
 100177c:	1880080c 	andi	r2,r3,32
 1001780:	1001271e 	bne	r2,zero,1001c20 <___vfprintf_internal_r+0xf54>
 1001784:	d9414c17 	ldw	r5,1328(sp)
 1001788:	2880040c 	andi	r2,r5,16
 100178c:	1002b61e 	bne	r2,zero,1002268 <___vfprintf_internal_r+0x159c>
 1001790:	d9814c17 	ldw	r6,1328(sp)
 1001794:	3080100c 	andi	r2,r6,64
 1001798:	1002b326 	beq	r2,zero,1002268 <___vfprintf_internal_r+0x159c>
 100179c:	3c00000b 	ldhu	r16,0(r7)
 10017a0:	0009883a 	mov	r4,zero
 10017a4:	39c00104 	addi	r7,r7,4
 10017a8:	0023883a 	mov	r17,zero
 10017ac:	d9c14015 	stw	r7,1280(sp)
 10017b0:	d8000405 	stb	zero,16(sp)
 10017b4:	003fd306 	br	1001704 <___vfprintf_internal_r+0xa38>
 10017b8:	d9014c17 	ldw	r4,1328(sp)
 10017bc:	21000414 	ori	r4,r4,16
 10017c0:	d9014c15 	stw	r4,1328(sp)
 10017c4:	d9414c17 	ldw	r5,1328(sp)
 10017c8:	2880080c 	andi	r2,r5,32
 10017cc:	1001081e 	bne	r2,zero,1001bf0 <___vfprintf_internal_r+0xf24>
 10017d0:	d8c14c17 	ldw	r3,1328(sp)
 10017d4:	1880040c 	andi	r2,r3,16
 10017d8:	1002b01e 	bne	r2,zero,100229c <___vfprintf_internal_r+0x15d0>
 10017dc:	d9014c17 	ldw	r4,1328(sp)
 10017e0:	2080100c 	andi	r2,r4,64
 10017e4:	1002ad26 	beq	r2,zero,100229c <___vfprintf_internal_r+0x15d0>
 10017e8:	3c00000b 	ldhu	r16,0(r7)
 10017ec:	01000044 	movi	r4,1
 10017f0:	39c00104 	addi	r7,r7,4
 10017f4:	0023883a 	mov	r17,zero
 10017f8:	d9c14015 	stw	r7,1280(sp)
 10017fc:	d8000405 	stb	zero,16(sp)
 1001800:	003fc006 	br	1001704 <___vfprintf_internal_r+0xa38>
 1001804:	d9014f17 	ldw	r4,1340(sp)
 1001808:	b00b883a 	mov	r5,r22
 100180c:	d9800c04 	addi	r6,sp,48
 1001810:	1000c740 	call	1000c74 <__sprint_r>
 1001814:	103ee51e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1001818:	dc800e17 	ldw	r18,56(sp)
 100181c:	d8c01904 	addi	r3,sp,100
 1001820:	d9814c17 	ldw	r6,1328(sp)
 1001824:	3080004c 	andi	r2,r6,1
 1001828:	1005003a 	cmpeq	r2,r2,zero
 100182c:	103ea51e 	bne	r2,zero,10012c4 <___vfprintf_internal_r+0x5f8>
 1001830:	00800044 	movi	r2,1
 1001834:	dc400d17 	ldw	r17,52(sp)
 1001838:	18800115 	stw	r2,4(r3)
 100183c:	d8814917 	ldw	r2,1316(sp)
 1001840:	94800044 	addi	r18,r18,1
 1001844:	8c400044 	addi	r17,r17,1
 1001848:	18800015 	stw	r2,0(r3)
 100184c:	008001c4 	movi	r2,7
 1001850:	dc800e15 	stw	r18,56(sp)
 1001854:	dc400d15 	stw	r17,52(sp)
 1001858:	14421e0e 	bge	r2,r17,10020d4 <___vfprintf_internal_r+0x1408>
 100185c:	d9014f17 	ldw	r4,1340(sp)
 1001860:	b00b883a 	mov	r5,r22
 1001864:	d9800c04 	addi	r6,sp,48
 1001868:	1000c740 	call	1000c74 <__sprint_r>
 100186c:	103ecf1e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1001870:	dc800e17 	ldw	r18,56(sp)
 1001874:	d8c01904 	addi	r3,sp,100
 1001878:	003e9206 	br	10012c4 <___vfprintf_internal_r+0x5f8>
 100187c:	d9014f17 	ldw	r4,1340(sp)
 1001880:	b00b883a 	mov	r5,r22
 1001884:	d9800c04 	addi	r6,sp,48
 1001888:	1000c740 	call	1000c74 <__sprint_r>
 100188c:	103ec026 	beq	r2,zero,1001390 <___vfprintf_internal_r+0x6c4>
 1001890:	003ec606 	br	10013ac <___vfprintf_internal_r+0x6e0>
 1001894:	d9014f17 	ldw	r4,1340(sp)
 1001898:	b00b883a 	mov	r5,r22
 100189c:	d9800c04 	addi	r6,sp,48
 10018a0:	d9c15115 	stw	r7,1348(sp)
 10018a4:	1000c740 	call	1000c74 <__sprint_r>
 10018a8:	d9c15117 	ldw	r7,1348(sp)
 10018ac:	103ebf1e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 10018b0:	dc800e17 	ldw	r18,56(sp)
 10018b4:	dc400d17 	ldw	r17,52(sp)
 10018b8:	dd401904 	addi	r21,sp,100
 10018bc:	003e7406 	br	1001290 <___vfprintf_internal_r+0x5c4>
 10018c0:	d9014f17 	ldw	r4,1340(sp)
 10018c4:	b00b883a 	mov	r5,r22
 10018c8:	d9800c04 	addi	r6,sp,48
 10018cc:	d9c15115 	stw	r7,1348(sp)
 10018d0:	1000c740 	call	1000c74 <__sprint_r>
 10018d4:	d9c15117 	ldw	r7,1348(sp)
 10018d8:	103eb41e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 10018dc:	dd401904 	addi	r21,sp,100
 10018e0:	003d6d06 	br	1000e98 <___vfprintf_internal_r+0x1cc>
 10018e4:	d9014f17 	ldw	r4,1340(sp)
 10018e8:	b00b883a 	mov	r5,r22
 10018ec:	d9800c04 	addi	r6,sp,48
 10018f0:	d9c15115 	stw	r7,1348(sp)
 10018f4:	1000c740 	call	1000c74 <__sprint_r>
 10018f8:	d9c15117 	ldw	r7,1348(sp)
 10018fc:	103eab1e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1001900:	dc800e17 	ldw	r18,56(sp)
 1001904:	dc400d17 	ldw	r17,52(sp)
 1001908:	dd401904 	addi	r21,sp,100
 100190c:	003e3406 	br	10011e0 <___vfprintf_internal_r+0x514>
 1001910:	d9014f17 	ldw	r4,1340(sp)
 1001914:	b00b883a 	mov	r5,r22
 1001918:	d9800c04 	addi	r6,sp,48
 100191c:	d9c15115 	stw	r7,1348(sp)
 1001920:	1000c740 	call	1000c74 <__sprint_r>
 1001924:	d9c15117 	ldw	r7,1348(sp)
 1001928:	103ea01e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 100192c:	dc800e17 	ldw	r18,56(sp)
 1001930:	dc400d17 	ldw	r17,52(sp)
 1001934:	dd401904 	addi	r21,sp,100
 1001938:	003e1c06 	br	10011ac <___vfprintf_internal_r+0x4e0>
 100193c:	d9014f17 	ldw	r4,1340(sp)
 1001940:	b00b883a 	mov	r5,r22
 1001944:	d9800c04 	addi	r6,sp,48
 1001948:	d9c15115 	stw	r7,1348(sp)
 100194c:	1000c740 	call	1000c74 <__sprint_r>
 1001950:	d9c15117 	ldw	r7,1348(sp)
 1001954:	103e951e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1001958:	dc800e17 	ldw	r18,56(sp)
 100195c:	dc400d17 	ldw	r17,52(sp)
 1001960:	dd401904 	addi	r21,sp,100
 1001964:	003e0406 	br	1001178 <___vfprintf_internal_r+0x4ac>
 1001968:	d9000517 	ldw	r4,20(sp)
 100196c:	0102520e 	bge	zero,r4,10022b8 <___vfprintf_internal_r+0x15ec>
 1001970:	d9814717 	ldw	r6,1308(sp)
 1001974:	21807a16 	blt	r4,r6,1001b60 <___vfprintf_internal_r+0xe94>
 1001978:	d8814117 	ldw	r2,1284(sp)
 100197c:	91a5883a 	add	r18,r18,r6
 1001980:	8c400044 	addi	r17,r17,1
 1001984:	a8800015 	stw	r2,0(r21)
 1001988:	008001c4 	movi	r2,7
 100198c:	a9800115 	stw	r6,4(r21)
 1001990:	dc800e15 	stw	r18,56(sp)
 1001994:	dc400d15 	stw	r17,52(sp)
 1001998:	1442f616 	blt	r2,r17,1002574 <___vfprintf_internal_r+0x18a8>
 100199c:	a8c00204 	addi	r3,r21,8
 10019a0:	d9414717 	ldw	r5,1308(sp)
 10019a4:	2161c83a 	sub	r16,r4,r5
 10019a8:	043f9d0e 	bge	zero,r16,1001820 <___vfprintf_internal_r+0xb54>
 10019ac:	00800404 	movi	r2,16
 10019b0:	1402130e 	bge	r2,r16,1002200 <___vfprintf_internal_r+0x1534>
 10019b4:	dc400d17 	ldw	r17,52(sp)
 10019b8:	1027883a 	mov	r19,r2
 10019bc:	07004074 	movhi	fp,257
 10019c0:	e70b6584 	addi	fp,fp,11670
 10019c4:	050001c4 	movi	r20,7
 10019c8:	00000306 	br	10019d8 <___vfprintf_internal_r+0xd0c>
 10019cc:	18c00204 	addi	r3,r3,8
 10019d0:	843ffc04 	addi	r16,r16,-16
 10019d4:	9c020d0e 	bge	r19,r16,100220c <___vfprintf_internal_r+0x1540>
 10019d8:	94800404 	addi	r18,r18,16
 10019dc:	8c400044 	addi	r17,r17,1
 10019e0:	1f000015 	stw	fp,0(r3)
 10019e4:	1cc00115 	stw	r19,4(r3)
 10019e8:	dc800e15 	stw	r18,56(sp)
 10019ec:	dc400d15 	stw	r17,52(sp)
 10019f0:	a47ff60e 	bge	r20,r17,10019cc <___vfprintf_internal_r+0xd00>
 10019f4:	d9014f17 	ldw	r4,1340(sp)
 10019f8:	b00b883a 	mov	r5,r22
 10019fc:	d9800c04 	addi	r6,sp,48
 1001a00:	1000c740 	call	1000c74 <__sprint_r>
 1001a04:	103e691e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1001a08:	dc800e17 	ldw	r18,56(sp)
 1001a0c:	dc400d17 	ldw	r17,52(sp)
 1001a10:	d8c01904 	addi	r3,sp,100
 1001a14:	003fee06 	br	10019d0 <___vfprintf_internal_r+0xd04>
 1001a18:	d8814717 	ldw	r2,1308(sp)
 1001a1c:	143fffc4 	addi	r16,r2,-1
 1001a20:	043e970e 	bge	zero,r16,1001480 <___vfprintf_internal_r+0x7b4>
 1001a24:	00800404 	movi	r2,16
 1001a28:	1400180e 	bge	r2,r16,1001a8c <___vfprintf_internal_r+0xdc0>
 1001a2c:	1029883a 	mov	r20,r2
 1001a30:	07004074 	movhi	fp,257
 1001a34:	e70b6584 	addi	fp,fp,11670
 1001a38:	054001c4 	movi	r21,7
 1001a3c:	00000306 	br	1001a4c <___vfprintf_internal_r+0xd80>
 1001a40:	9cc00204 	addi	r19,r19,8
 1001a44:	843ffc04 	addi	r16,r16,-16
 1001a48:	a400120e 	bge	r20,r16,1001a94 <___vfprintf_internal_r+0xdc8>
 1001a4c:	94800404 	addi	r18,r18,16
 1001a50:	8c400044 	addi	r17,r17,1
 1001a54:	9f000015 	stw	fp,0(r19)
 1001a58:	9d000115 	stw	r20,4(r19)
 1001a5c:	dc800e15 	stw	r18,56(sp)
 1001a60:	dc400d15 	stw	r17,52(sp)
 1001a64:	ac7ff60e 	bge	r21,r17,1001a40 <___vfprintf_internal_r+0xd74>
 1001a68:	d9014f17 	ldw	r4,1340(sp)
 1001a6c:	b00b883a 	mov	r5,r22
 1001a70:	d9800c04 	addi	r6,sp,48
 1001a74:	1000c740 	call	1000c74 <__sprint_r>
 1001a78:	103e4c1e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1001a7c:	dc800e17 	ldw	r18,56(sp)
 1001a80:	dc400d17 	ldw	r17,52(sp)
 1001a84:	dcc01904 	addi	r19,sp,100
 1001a88:	003fee06 	br	1001a44 <___vfprintf_internal_r+0xd78>
 1001a8c:	07004074 	movhi	fp,257
 1001a90:	e70b6584 	addi	fp,fp,11670
 1001a94:	9425883a 	add	r18,r18,r16
 1001a98:	8c400044 	addi	r17,r17,1
 1001a9c:	008001c4 	movi	r2,7
 1001aa0:	9f000015 	stw	fp,0(r19)
 1001aa4:	9c000115 	stw	r16,4(r19)
 1001aa8:	dc800e15 	stw	r18,56(sp)
 1001aac:	dc400d15 	stw	r17,52(sp)
 1001ab0:	147e720e 	bge	r2,r17,100147c <___vfprintf_internal_r+0x7b0>
 1001ab4:	d9014f17 	ldw	r4,1340(sp)
 1001ab8:	b00b883a 	mov	r5,r22
 1001abc:	d9800c04 	addi	r6,sp,48
 1001ac0:	1000c740 	call	1000c74 <__sprint_r>
 1001ac4:	103e391e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1001ac8:	dc800e17 	ldw	r18,56(sp)
 1001acc:	dc400d17 	ldw	r17,52(sp)
 1001ad0:	dcc01904 	addi	r19,sp,100
 1001ad4:	003e6a06 	br	1001480 <___vfprintf_internal_r+0x7b4>
 1001ad8:	d9014f17 	ldw	r4,1340(sp)
 1001adc:	b00b883a 	mov	r5,r22
 1001ae0:	d9800c04 	addi	r6,sp,48
 1001ae4:	d9c15115 	stw	r7,1348(sp)
 1001ae8:	1000c740 	call	1000c74 <__sprint_r>
 1001aec:	d9c15117 	ldw	r7,1348(sp)
 1001af0:	103e2e1e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1001af4:	dc800e17 	ldw	r18,56(sp)
 1001af8:	dc400d17 	ldw	r17,52(sp)
 1001afc:	dd401904 	addi	r21,sp,100
 1001b00:	003dba06 	br	10011ec <___vfprintf_internal_r+0x520>
 1001b04:	d9014f17 	ldw	r4,1340(sp)
 1001b08:	b00b883a 	mov	r5,r22
 1001b0c:	d9800c04 	addi	r6,sp,48
 1001b10:	1000c740 	call	1000c74 <__sprint_r>
 1001b14:	103e251e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1001b18:	dc800e17 	ldw	r18,56(sp)
 1001b1c:	dc400d17 	ldw	r17,52(sp)
 1001b20:	dcc01904 	addi	r19,sp,100
 1001b24:	003e4206 	br	1001430 <___vfprintf_internal_r+0x764>
 1001b28:	d9014f17 	ldw	r4,1340(sp)
 1001b2c:	b00b883a 	mov	r5,r22
 1001b30:	d9800c04 	addi	r6,sp,48
 1001b34:	1000c740 	call	1000c74 <__sprint_r>
 1001b38:	103e1c1e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1001b3c:	dc800e17 	ldw	r18,56(sp)
 1001b40:	dc400d17 	ldw	r17,52(sp)
 1001b44:	d8c01904 	addi	r3,sp,100
 1001b48:	003e2e06 	br	1001404 <___vfprintf_internal_r+0x738>
 1001b4c:	d9414c17 	ldw	r5,1328(sp)
 1001b50:	2880004c 	andi	r2,r5,1
 1001b54:	1005003a 	cmpeq	r2,r2,zero
 1001b58:	103dda1e 	bne	r2,zero,10012c4 <___vfprintf_internal_r+0x5f8>
 1001b5c:	003e9f06 	br	10015dc <___vfprintf_internal_r+0x910>
 1001b60:	d8c14117 	ldw	r3,1284(sp)
 1001b64:	9125883a 	add	r18,r18,r4
 1001b68:	8c400044 	addi	r17,r17,1
 1001b6c:	008001c4 	movi	r2,7
 1001b70:	a8c00015 	stw	r3,0(r21)
 1001b74:	a9000115 	stw	r4,4(r21)
 1001b78:	dc800e15 	stw	r18,56(sp)
 1001b7c:	dc400d15 	stw	r17,52(sp)
 1001b80:	14426616 	blt	r2,r17,100251c <___vfprintf_internal_r+0x1850>
 1001b84:	a8c00204 	addi	r3,r21,8
 1001b88:	d9414917 	ldw	r5,1316(sp)
 1001b8c:	00800044 	movi	r2,1
 1001b90:	94800044 	addi	r18,r18,1
 1001b94:	8c400044 	addi	r17,r17,1
 1001b98:	18800115 	stw	r2,4(r3)
 1001b9c:	008001c4 	movi	r2,7
 1001ba0:	19400015 	stw	r5,0(r3)
 1001ba4:	dc800e15 	stw	r18,56(sp)
 1001ba8:	dc400d15 	stw	r17,52(sp)
 1001bac:	2021883a 	mov	r16,r4
 1001bb0:	14425016 	blt	r2,r17,10024f4 <___vfprintf_internal_r+0x1828>
 1001bb4:	19400204 	addi	r5,r3,8
 1001bb8:	d9814717 	ldw	r6,1308(sp)
 1001bbc:	8c400044 	addi	r17,r17,1
 1001bc0:	dc400d15 	stw	r17,52(sp)
 1001bc4:	3107c83a 	sub	r3,r6,r4
 1001bc8:	d9014117 	ldw	r4,1284(sp)
 1001bcc:	90e5883a 	add	r18,r18,r3
 1001bd0:	28c00115 	stw	r3,4(r5)
 1001bd4:	8105883a 	add	r2,r16,r4
 1001bd8:	28800015 	stw	r2,0(r5)
 1001bdc:	008001c4 	movi	r2,7
 1001be0:	dc800e15 	stw	r18,56(sp)
 1001be4:	147f1d16 	blt	r2,r17,100185c <___vfprintf_internal_r+0xb90>
 1001be8:	28c00204 	addi	r3,r5,8
 1001bec:	003db506 	br	10012c4 <___vfprintf_internal_r+0x5f8>
 1001bf0:	3c000017 	ldw	r16,0(r7)
 1001bf4:	3c400117 	ldw	r17,4(r7)
 1001bf8:	39800204 	addi	r6,r7,8
 1001bfc:	01000044 	movi	r4,1
 1001c00:	d9814015 	stw	r6,1280(sp)
 1001c04:	d8000405 	stb	zero,16(sp)
 1001c08:	003ebe06 	br	1001704 <___vfprintf_internal_r+0xa38>
 1001c0c:	3c000017 	ldw	r16,0(r7)
 1001c10:	3c400117 	ldw	r17,4(r7)
 1001c14:	38800204 	addi	r2,r7,8
 1001c18:	d8814015 	stw	r2,1280(sp)
 1001c1c:	003eb706 	br	10016fc <___vfprintf_internal_r+0xa30>
 1001c20:	3c000017 	ldw	r16,0(r7)
 1001c24:	3c400117 	ldw	r17,4(r7)
 1001c28:	39000204 	addi	r4,r7,8
 1001c2c:	d9014015 	stw	r4,1280(sp)
 1001c30:	0009883a 	mov	r4,zero
 1001c34:	d8000405 	stb	zero,16(sp)
 1001c38:	003eb206 	br	1001704 <___vfprintf_internal_r+0xa38>
 1001c3c:	38c00017 	ldw	r3,0(r7)
 1001c40:	39c00104 	addi	r7,r7,4
 1001c44:	d8c14a15 	stw	r3,1320(sp)
 1001c48:	1800d10e 	bge	r3,zero,1001f90 <___vfprintf_internal_r+0x12c4>
 1001c4c:	00c7c83a 	sub	r3,zero,r3
 1001c50:	d8c14a15 	stw	r3,1320(sp)
 1001c54:	d9014c17 	ldw	r4,1328(sp)
 1001c58:	b8c00007 	ldb	r3,0(r23)
 1001c5c:	21000114 	ori	r4,r4,4
 1001c60:	d9014c15 	stw	r4,1328(sp)
 1001c64:	003c9806 	br	1000ec8 <___vfprintf_internal_r+0x1fc>
 1001c68:	d9814c17 	ldw	r6,1328(sp)
 1001c6c:	3080080c 	andi	r2,r6,32
 1001c70:	1001f026 	beq	r2,zero,1002434 <___vfprintf_internal_r+0x1768>
 1001c74:	d9014b17 	ldw	r4,1324(sp)
 1001c78:	38800017 	ldw	r2,0(r7)
 1001c7c:	39c00104 	addi	r7,r7,4
 1001c80:	d9c14015 	stw	r7,1280(sp)
 1001c84:	2007d7fa 	srai	r3,r4,31
 1001c88:	d9c14017 	ldw	r7,1280(sp)
 1001c8c:	11000015 	stw	r4,0(r2)
 1001c90:	10c00115 	stw	r3,4(r2)
 1001c94:	003c6906 	br	1000e3c <___vfprintf_internal_r+0x170>
 1001c98:	b8c00007 	ldb	r3,0(r23)
 1001c9c:	00801b04 	movi	r2,108
 1001ca0:	18824f26 	beq	r3,r2,10025e0 <___vfprintf_internal_r+0x1914>
 1001ca4:	d9414c17 	ldw	r5,1328(sp)
 1001ca8:	29400414 	ori	r5,r5,16
 1001cac:	d9414c15 	stw	r5,1328(sp)
 1001cb0:	003c8506 	br	1000ec8 <___vfprintf_internal_r+0x1fc>
 1001cb4:	d9814c17 	ldw	r6,1328(sp)
 1001cb8:	b8c00007 	ldb	r3,0(r23)
 1001cbc:	31800814 	ori	r6,r6,32
 1001cc0:	d9814c15 	stw	r6,1328(sp)
 1001cc4:	003c8006 	br	1000ec8 <___vfprintf_internal_r+0x1fc>
 1001cc8:	d8814c17 	ldw	r2,1328(sp)
 1001ccc:	3c000017 	ldw	r16,0(r7)
 1001cd0:	00c01e04 	movi	r3,120
 1001cd4:	10800094 	ori	r2,r2,2
 1001cd8:	d8814c15 	stw	r2,1328(sp)
 1001cdc:	39c00104 	addi	r7,r7,4
 1001ce0:	01404074 	movhi	r5,257
 1001ce4:	294b4e04 	addi	r5,r5,11576
 1001ce8:	00800c04 	movi	r2,48
 1001cec:	0023883a 	mov	r17,zero
 1001cf0:	01000084 	movi	r4,2
 1001cf4:	d9c14015 	stw	r7,1280(sp)
 1001cf8:	d8c14d15 	stw	r3,1332(sp)
 1001cfc:	d9414415 	stw	r5,1296(sp)
 1001d00:	d8800445 	stb	r2,17(sp)
 1001d04:	d8c00485 	stb	r3,18(sp)
 1001d08:	d8000405 	stb	zero,16(sp)
 1001d0c:	003e7d06 	br	1001704 <___vfprintf_internal_r+0xa38>
 1001d10:	d8814c17 	ldw	r2,1328(sp)
 1001d14:	b8c00007 	ldb	r3,0(r23)
 1001d18:	10801014 	ori	r2,r2,64
 1001d1c:	d8814c15 	stw	r2,1328(sp)
 1001d20:	003c6906 	br	1000ec8 <___vfprintf_internal_r+0x1fc>
 1001d24:	d9414c17 	ldw	r5,1328(sp)
 1001d28:	2880020c 	andi	r2,r5,8
 1001d2c:	1001df26 	beq	r2,zero,10024ac <___vfprintf_internal_r+0x17e0>
 1001d30:	39800017 	ldw	r6,0(r7)
 1001d34:	38800204 	addi	r2,r7,8
 1001d38:	d8814015 	stw	r2,1280(sp)
 1001d3c:	d9814215 	stw	r6,1288(sp)
 1001d40:	39c00117 	ldw	r7,4(r7)
 1001d44:	d9c14315 	stw	r7,1292(sp)
 1001d48:	d9014217 	ldw	r4,1288(sp)
 1001d4c:	d9414317 	ldw	r5,1292(sp)
 1001d50:	10095200 	call	1009520 <__isinfd>
 1001d54:	10021726 	beq	r2,zero,10025b4 <___vfprintf_internal_r+0x18e8>
 1001d58:	d9014217 	ldw	r4,1288(sp)
 1001d5c:	d9414317 	ldw	r5,1292(sp)
 1001d60:	000d883a 	mov	r6,zero
 1001d64:	000f883a 	mov	r7,zero
 1001d68:	100ea400 	call	100ea40 <__ltdf2>
 1001d6c:	1002ca16 	blt	r2,zero,1002898 <___vfprintf_internal_r+0x1bcc>
 1001d70:	d9414d17 	ldw	r5,1332(sp)
 1001d74:	008011c4 	movi	r2,71
 1001d78:	11420a16 	blt	r2,r5,10025a4 <___vfprintf_internal_r+0x18d8>
 1001d7c:	01804074 	movhi	r6,257
 1001d80:	318b5304 	addi	r6,r6,11596
 1001d84:	d9814115 	stw	r6,1284(sp)
 1001d88:	d9014c17 	ldw	r4,1328(sp)
 1001d8c:	00c000c4 	movi	r3,3
 1001d90:	00bfdfc4 	movi	r2,-129
 1001d94:	2088703a 	and	r4,r4,r2
 1001d98:	180f883a 	mov	r7,r3
 1001d9c:	d8c14515 	stw	r3,1300(sp)
 1001da0:	d9014c15 	stw	r4,1328(sp)
 1001da4:	d8014615 	stw	zero,1304(sp)
 1001da8:	003e6a06 	br	1001754 <___vfprintf_internal_r+0xa88>
 1001dac:	38800017 	ldw	r2,0(r7)
 1001db0:	00c00044 	movi	r3,1
 1001db4:	39c00104 	addi	r7,r7,4
 1001db8:	d9c14015 	stw	r7,1280(sp)
 1001dbc:	d9000f04 	addi	r4,sp,60
 1001dc0:	180f883a 	mov	r7,r3
 1001dc4:	d8c14515 	stw	r3,1300(sp)
 1001dc8:	d9014115 	stw	r4,1284(sp)
 1001dcc:	d8800f05 	stb	r2,60(sp)
 1001dd0:	d8000405 	stb	zero,16(sp)
 1001dd4:	003cac06 	br	1001088 <___vfprintf_internal_r+0x3bc>
 1001dd8:	01404074 	movhi	r5,257
 1001ddc:	294b5904 	addi	r5,r5,11620
 1001de0:	d9414415 	stw	r5,1296(sp)
 1001de4:	d9814c17 	ldw	r6,1328(sp)
 1001de8:	3080080c 	andi	r2,r6,32
 1001dec:	1000f926 	beq	r2,zero,10021d4 <___vfprintf_internal_r+0x1508>
 1001df0:	3c000017 	ldw	r16,0(r7)
 1001df4:	3c400117 	ldw	r17,4(r7)
 1001df8:	38800204 	addi	r2,r7,8
 1001dfc:	d8814015 	stw	r2,1280(sp)
 1001e00:	d9414c17 	ldw	r5,1328(sp)
 1001e04:	2880004c 	andi	r2,r5,1
 1001e08:	1005003a 	cmpeq	r2,r2,zero
 1001e0c:	1000b31e 	bne	r2,zero,10020dc <___vfprintf_internal_r+0x1410>
 1001e10:	8444b03a 	or	r2,r16,r17
 1001e14:	1000b126 	beq	r2,zero,10020dc <___vfprintf_internal_r+0x1410>
 1001e18:	d9814d17 	ldw	r6,1332(sp)
 1001e1c:	29400094 	ori	r5,r5,2
 1001e20:	00800c04 	movi	r2,48
 1001e24:	01000084 	movi	r4,2
 1001e28:	d9414c15 	stw	r5,1328(sp)
 1001e2c:	d8800445 	stb	r2,17(sp)
 1001e30:	d9800485 	stb	r6,18(sp)
 1001e34:	d8000405 	stb	zero,16(sp)
 1001e38:	003e3206 	br	1001704 <___vfprintf_internal_r+0xa38>
 1001e3c:	01804074 	movhi	r6,257
 1001e40:	318b4e04 	addi	r6,r6,11576
 1001e44:	d9814415 	stw	r6,1296(sp)
 1001e48:	003fe606 	br	1001de4 <___vfprintf_internal_r+0x1118>
 1001e4c:	00800ac4 	movi	r2,43
 1001e50:	d8800405 	stb	r2,16(sp)
 1001e54:	b8c00007 	ldb	r3,0(r23)
 1001e58:	003c1b06 	br	1000ec8 <___vfprintf_internal_r+0x1fc>
 1001e5c:	d8814c17 	ldw	r2,1328(sp)
 1001e60:	b8c00007 	ldb	r3,0(r23)
 1001e64:	10800054 	ori	r2,r2,1
 1001e68:	d8814c15 	stw	r2,1328(sp)
 1001e6c:	003c1606 	br	1000ec8 <___vfprintf_internal_r+0x1fc>
 1001e70:	d8800407 	ldb	r2,16(sp)
 1001e74:	1000461e 	bne	r2,zero,1001f90 <___vfprintf_internal_r+0x12c4>
 1001e78:	00800804 	movi	r2,32
 1001e7c:	d8800405 	stb	r2,16(sp)
 1001e80:	b8c00007 	ldb	r3,0(r23)
 1001e84:	003c1006 	br	1000ec8 <___vfprintf_internal_r+0x1fc>
 1001e88:	d9814c17 	ldw	r6,1328(sp)
 1001e8c:	b8c00007 	ldb	r3,0(r23)
 1001e90:	31800214 	ori	r6,r6,8
 1001e94:	d9814c15 	stw	r6,1328(sp)
 1001e98:	003c0b06 	br	1000ec8 <___vfprintf_internal_r+0x1fc>
 1001e9c:	0007883a 	mov	r3,zero
 1001ea0:	01000244 	movi	r4,9
 1001ea4:	188002a4 	muli	r2,r3,10
 1001ea8:	b8c00007 	ldb	r3,0(r23)
 1001eac:	d9814d17 	ldw	r6,1332(sp)
 1001eb0:	bdc00044 	addi	r23,r23,1
 1001eb4:	d8c14d15 	stw	r3,1332(sp)
 1001eb8:	d9414d17 	ldw	r5,1332(sp)
 1001ebc:	3085883a 	add	r2,r6,r2
 1001ec0:	10fff404 	addi	r3,r2,-48
 1001ec4:	28bff404 	addi	r2,r5,-48
 1001ec8:	20bff62e 	bgeu	r4,r2,1001ea4 <___vfprintf_internal_r+0x11d8>
 1001ecc:	d8c14a15 	stw	r3,1320(sp)
 1001ed0:	003bff06 	br	1000ed0 <___vfprintf_internal_r+0x204>
 1001ed4:	d9414c17 	ldw	r5,1328(sp)
 1001ed8:	b8c00007 	ldb	r3,0(r23)
 1001edc:	29402014 	ori	r5,r5,128
 1001ee0:	d9414c15 	stw	r5,1328(sp)
 1001ee4:	003bf806 	br	1000ec8 <___vfprintf_internal_r+0x1fc>
 1001ee8:	b8c00007 	ldb	r3,0(r23)
 1001eec:	00800a84 	movi	r2,42
 1001ef0:	bdc00044 	addi	r23,r23,1
 1001ef4:	18831526 	beq	r3,r2,1002b4c <___vfprintf_internal_r+0x1e80>
 1001ef8:	d8c14d15 	stw	r3,1332(sp)
 1001efc:	18bff404 	addi	r2,r3,-48
 1001f00:	00c00244 	movi	r3,9
 1001f04:	18827836 	bltu	r3,r2,10028e8 <___vfprintf_internal_r+0x1c1c>
 1001f08:	000d883a 	mov	r6,zero
 1001f0c:	308002a4 	muli	r2,r6,10
 1001f10:	b9800007 	ldb	r6,0(r23)
 1001f14:	d9414d17 	ldw	r5,1332(sp)
 1001f18:	bdc00044 	addi	r23,r23,1
 1001f1c:	d9814d15 	stw	r6,1332(sp)
 1001f20:	d9014d17 	ldw	r4,1332(sp)
 1001f24:	1145883a 	add	r2,r2,r5
 1001f28:	11bff404 	addi	r6,r2,-48
 1001f2c:	20bff404 	addi	r2,r4,-48
 1001f30:	18bff62e 	bgeu	r3,r2,1001f0c <___vfprintf_internal_r+0x1240>
 1001f34:	3027883a 	mov	r19,r6
 1001f38:	303be50e 	bge	r6,zero,1000ed0 <___vfprintf_internal_r+0x204>
 1001f3c:	04ffffc4 	movi	r19,-1
 1001f40:	003be306 	br	1000ed0 <___vfprintf_internal_r+0x204>
 1001f44:	d8000405 	stb	zero,16(sp)
 1001f48:	39800017 	ldw	r6,0(r7)
 1001f4c:	39c00104 	addi	r7,r7,4
 1001f50:	d9c14015 	stw	r7,1280(sp)
 1001f54:	d9814115 	stw	r6,1284(sp)
 1001f58:	3001c926 	beq	r6,zero,1002680 <___vfprintf_internal_r+0x19b4>
 1001f5c:	98000e16 	blt	r19,zero,1001f98 <___vfprintf_internal_r+0x12cc>
 1001f60:	d9014117 	ldw	r4,1284(sp)
 1001f64:	000b883a 	mov	r5,zero
 1001f68:	980d883a 	mov	r6,r19
 1001f6c:	10078700 	call	1007870 <memchr>
 1001f70:	10025926 	beq	r2,zero,10028d8 <___vfprintf_internal_r+0x1c0c>
 1001f74:	d8c14117 	ldw	r3,1284(sp)
 1001f78:	10cfc83a 	sub	r7,r2,r3
 1001f7c:	99c19e16 	blt	r19,r7,10025f8 <___vfprintf_internal_r+0x192c>
 1001f80:	d9c14515 	stw	r7,1300(sp)
 1001f84:	38000916 	blt	r7,zero,1001fac <___vfprintf_internal_r+0x12e0>
 1001f88:	d8014615 	stw	zero,1304(sp)
 1001f8c:	003df106 	br	1001754 <___vfprintf_internal_r+0xa88>
 1001f90:	b8c00007 	ldb	r3,0(r23)
 1001f94:	003bcc06 	br	1000ec8 <___vfprintf_internal_r+0x1fc>
 1001f98:	d9014117 	ldw	r4,1284(sp)
 1001f9c:	1000c000 	call	1000c00 <strlen>
 1001fa0:	d8814515 	stw	r2,1300(sp)
 1001fa4:	100f883a 	mov	r7,r2
 1001fa8:	103ff70e 	bge	r2,zero,1001f88 <___vfprintf_internal_r+0x12bc>
 1001fac:	d8014515 	stw	zero,1300(sp)
 1001fb0:	d8014615 	stw	zero,1304(sp)
 1001fb4:	003de706 	br	1001754 <___vfprintf_internal_r+0xa88>
 1001fb8:	20c03fcc 	andi	r3,r4,255
 1001fbc:	00800044 	movi	r2,1
 1001fc0:	18802d26 	beq	r3,r2,1002078 <___vfprintf_internal_r+0x13ac>
 1001fc4:	18800e36 	bltu	r3,r2,1002000 <___vfprintf_internal_r+0x1334>
 1001fc8:	00800084 	movi	r2,2
 1001fcc:	1880fa26 	beq	r3,r2,10023b8 <___vfprintf_internal_r+0x16ec>
 1001fd0:	01004074 	movhi	r4,257
 1001fd4:	210b5e04 	addi	r4,r4,11640
 1001fd8:	1000c000 	call	1000c00 <strlen>
 1001fdc:	100f883a 	mov	r7,r2
 1001fe0:	dcc14515 	stw	r19,1300(sp)
 1001fe4:	9880010e 	bge	r19,r2,1001fec <___vfprintf_internal_r+0x1320>
 1001fe8:	d8814515 	stw	r2,1300(sp)
 1001fec:	00804074 	movhi	r2,257
 1001ff0:	108b5e04 	addi	r2,r2,11640
 1001ff4:	dcc14615 	stw	r19,1304(sp)
 1001ff8:	d8814115 	stw	r2,1284(sp)
 1001ffc:	003dd506 	br	1001754 <___vfprintf_internal_r+0xa88>
 1002000:	d9401904 	addi	r5,sp,100
 1002004:	dd000f04 	addi	r20,sp,60
 1002008:	d9414115 	stw	r5,1284(sp)
 100200c:	880a977a 	slli	r5,r17,29
 1002010:	d9814117 	ldw	r6,1284(sp)
 1002014:	8004d0fa 	srli	r2,r16,3
 1002018:	8806d0fa 	srli	r3,r17,3
 100201c:	810001cc 	andi	r4,r16,7
 1002020:	2884b03a 	or	r2,r5,r2
 1002024:	31bfffc4 	addi	r6,r6,-1
 1002028:	21000c04 	addi	r4,r4,48
 100202c:	d9814115 	stw	r6,1284(sp)
 1002030:	10cab03a 	or	r5,r2,r3
 1002034:	31000005 	stb	r4,0(r6)
 1002038:	1021883a 	mov	r16,r2
 100203c:	1823883a 	mov	r17,r3
 1002040:	283ff21e 	bne	r5,zero,100200c <___vfprintf_internal_r+0x1340>
 1002044:	d8c14c17 	ldw	r3,1328(sp)
 1002048:	1880004c 	andi	r2,r3,1
 100204c:	1005003a 	cmpeq	r2,r2,zero
 1002050:	103db91e 	bne	r2,zero,1001738 <___vfprintf_internal_r+0xa6c>
 1002054:	20803fcc 	andi	r2,r4,255
 1002058:	1080201c 	xori	r2,r2,128
 100205c:	10bfe004 	addi	r2,r2,-128
 1002060:	00c00c04 	movi	r3,48
 1002064:	10fdb426 	beq	r2,r3,1001738 <___vfprintf_internal_r+0xa6c>
 1002068:	31bfffc4 	addi	r6,r6,-1
 100206c:	d9814115 	stw	r6,1284(sp)
 1002070:	30c00005 	stb	r3,0(r6)
 1002074:	003db006 	br	1001738 <___vfprintf_internal_r+0xa6c>
 1002078:	88800068 	cmpgeui	r2,r17,1
 100207c:	10002c1e 	bne	r2,zero,1002130 <___vfprintf_internal_r+0x1464>
 1002080:	8800021e 	bne	r17,zero,100208c <___vfprintf_internal_r+0x13c0>
 1002084:	00800244 	movi	r2,9
 1002088:	14002936 	bltu	r2,r16,1002130 <___vfprintf_internal_r+0x1464>
 100208c:	d90018c4 	addi	r4,sp,99
 1002090:	dd000f04 	addi	r20,sp,60
 1002094:	d9014115 	stw	r4,1284(sp)
 1002098:	d9014117 	ldw	r4,1284(sp)
 100209c:	80800c04 	addi	r2,r16,48
 10020a0:	20800005 	stb	r2,0(r4)
 10020a4:	003da406 	br	1001738 <___vfprintf_internal_r+0xa6c>
 10020a8:	dc400d17 	ldw	r17,52(sp)
 10020ac:	07004074 	movhi	fp,257
 10020b0:	e70b6584 	addi	fp,fp,11670
 10020b4:	9425883a 	add	r18,r18,r16
 10020b8:	8c400044 	addi	r17,r17,1
 10020bc:	008001c4 	movi	r2,7
 10020c0:	1f000015 	stw	fp,0(r3)
 10020c4:	1c000115 	stw	r16,4(r3)
 10020c8:	dc800e15 	stw	r18,56(sp)
 10020cc:	dc400d15 	stw	r17,52(sp)
 10020d0:	147de216 	blt	r2,r17,100185c <___vfprintf_internal_r+0xb90>
 10020d4:	18c00204 	addi	r3,r3,8
 10020d8:	003c7a06 	br	10012c4 <___vfprintf_internal_r+0x5f8>
 10020dc:	01000084 	movi	r4,2
 10020e0:	d8000405 	stb	zero,16(sp)
 10020e4:	003d8706 	br	1001704 <___vfprintf_internal_r+0xa38>
 10020e8:	d9814c17 	ldw	r6,1328(sp)
 10020ec:	30c4703a 	and	r2,r6,r3
 10020f0:	1005003a 	cmpeq	r2,r2,zero
 10020f4:	103cb926 	beq	r2,zero,10013dc <___vfprintf_internal_r+0x710>
 10020f8:	d9014117 	ldw	r4,1284(sp)
 10020fc:	94800044 	addi	r18,r18,1
 1002100:	8c400044 	addi	r17,r17,1
 1002104:	008001c4 	movi	r2,7
 1002108:	a9000015 	stw	r4,0(r21)
 100210c:	a8c00115 	stw	r3,4(r21)
 1002110:	dc800e15 	stw	r18,56(sp)
 1002114:	dc400d15 	stw	r17,52(sp)
 1002118:	147e6616 	blt	r2,r17,1001ab4 <___vfprintf_internal_r+0xde8>
 100211c:	acc00204 	addi	r19,r21,8
 1002120:	003cd706 	br	1001480 <___vfprintf_internal_r+0x7b4>
 1002124:	07004074 	movhi	fp,257
 1002128:	e70b6584 	addi	fp,fp,11670
 100212c:	003c4f06 	br	100126c <___vfprintf_internal_r+0x5a0>
 1002130:	dd000f04 	addi	r20,sp,60
 1002134:	dc801904 	addi	r18,sp,100
 1002138:	8009883a 	mov	r4,r16
 100213c:	880b883a 	mov	r5,r17
 1002140:	01800284 	movi	r6,10
 1002144:	000f883a 	mov	r7,zero
 1002148:	100d5e80 	call	100d5e8 <__umoddi3>
 100214c:	12000c04 	addi	r8,r2,48
 1002150:	94bfffc4 	addi	r18,r18,-1
 1002154:	8009883a 	mov	r4,r16
 1002158:	880b883a 	mov	r5,r17
 100215c:	01800284 	movi	r6,10
 1002160:	000f883a 	mov	r7,zero
 1002164:	92000005 	stb	r8,0(r18)
 1002168:	100d00c0 	call	100d00c <__udivdi3>
 100216c:	1009883a 	mov	r4,r2
 1002170:	1021883a 	mov	r16,r2
 1002174:	18800068 	cmpgeui	r2,r3,1
 1002178:	1823883a 	mov	r17,r3
 100217c:	103fee1e 	bne	r2,zero,1002138 <___vfprintf_internal_r+0x146c>
 1002180:	1800021e 	bne	r3,zero,100218c <___vfprintf_internal_r+0x14c0>
 1002184:	00800244 	movi	r2,9
 1002188:	113feb36 	bltu	r2,r4,1002138 <___vfprintf_internal_r+0x146c>
 100218c:	94bfffc4 	addi	r18,r18,-1
 1002190:	dc814115 	stw	r18,1284(sp)
 1002194:	003fc006 	br	1002098 <___vfprintf_internal_r+0x13cc>
 1002198:	d9014c17 	ldw	r4,1328(sp)
 100219c:	2080004c 	andi	r2,r4,1
 10021a0:	10009a1e 	bne	r2,zero,100240c <___vfprintf_internal_r+0x1740>
 10021a4:	d9401904 	addi	r5,sp,100
 10021a8:	dd000f04 	addi	r20,sp,60
 10021ac:	d9414115 	stw	r5,1284(sp)
 10021b0:	003d6106 	br	1001738 <___vfprintf_internal_r+0xa6c>
 10021b4:	d9014f17 	ldw	r4,1340(sp)
 10021b8:	b00b883a 	mov	r5,r22
 10021bc:	d9800c04 	addi	r6,sp,48
 10021c0:	1000c740 	call	1000c74 <__sprint_r>
 10021c4:	103c791e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 10021c8:	dc800e17 	ldw	r18,56(sp)
 10021cc:	d8c01904 	addi	r3,sp,100
 10021d0:	003cff06 	br	10015d0 <___vfprintf_internal_r+0x904>
 10021d4:	d8c14c17 	ldw	r3,1328(sp)
 10021d8:	1880040c 	andi	r2,r3,16
 10021dc:	1000711e 	bne	r2,zero,10023a4 <___vfprintf_internal_r+0x16d8>
 10021e0:	d9014c17 	ldw	r4,1328(sp)
 10021e4:	2080100c 	andi	r2,r4,64
 10021e8:	10006e26 	beq	r2,zero,10023a4 <___vfprintf_internal_r+0x16d8>
 10021ec:	3c00000b 	ldhu	r16,0(r7)
 10021f0:	0023883a 	mov	r17,zero
 10021f4:	39c00104 	addi	r7,r7,4
 10021f8:	d9c14015 	stw	r7,1280(sp)
 10021fc:	003f0006 	br	1001e00 <___vfprintf_internal_r+0x1134>
 1002200:	dc400d17 	ldw	r17,52(sp)
 1002204:	07004074 	movhi	fp,257
 1002208:	e70b6584 	addi	fp,fp,11670
 100220c:	9425883a 	add	r18,r18,r16
 1002210:	8c400044 	addi	r17,r17,1
 1002214:	008001c4 	movi	r2,7
 1002218:	1f000015 	stw	fp,0(r3)
 100221c:	1c000115 	stw	r16,4(r3)
 1002220:	dc800e15 	stw	r18,56(sp)
 1002224:	dc400d15 	stw	r17,52(sp)
 1002228:	147d7616 	blt	r2,r17,1001804 <___vfprintf_internal_r+0xb38>
 100222c:	18c00204 	addi	r3,r3,8
 1002230:	003d7b06 	br	1001820 <___vfprintf_internal_r+0xb54>
 1002234:	dc800e17 	ldw	r18,56(sp)
 1002238:	dc400d17 	ldw	r17,52(sp)
 100223c:	07004074 	movhi	fp,257
 1002240:	e70b6984 	addi	fp,fp,11686
 1002244:	003bc006 	br	1001148 <___vfprintf_internal_r+0x47c>
 1002248:	d9014f17 	ldw	r4,1340(sp)
 100224c:	b00b883a 	mov	r5,r22
 1002250:	d9800c04 	addi	r6,sp,48
 1002254:	1000c740 	call	1000c74 <__sprint_r>
 1002258:	103c541e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 100225c:	dc800e17 	ldw	r18,56(sp)
 1002260:	d8c01904 	addi	r3,sp,100
 1002264:	003ce906 	br	100160c <___vfprintf_internal_r+0x940>
 1002268:	3c000017 	ldw	r16,0(r7)
 100226c:	0009883a 	mov	r4,zero
 1002270:	39c00104 	addi	r7,r7,4
 1002274:	0023883a 	mov	r17,zero
 1002278:	d9c14015 	stw	r7,1280(sp)
 100227c:	d8000405 	stb	zero,16(sp)
 1002280:	003d2006 	br	1001704 <___vfprintf_internal_r+0xa38>
 1002284:	38800017 	ldw	r2,0(r7)
 1002288:	39c00104 	addi	r7,r7,4
 100228c:	d9c14015 	stw	r7,1280(sp)
 1002290:	1023d7fa 	srai	r17,r2,31
 1002294:	1021883a 	mov	r16,r2
 1002298:	003d1806 	br	10016fc <___vfprintf_internal_r+0xa30>
 100229c:	3c000017 	ldw	r16,0(r7)
 10022a0:	01000044 	movi	r4,1
 10022a4:	39c00104 	addi	r7,r7,4
 10022a8:	0023883a 	mov	r17,zero
 10022ac:	d9c14015 	stw	r7,1280(sp)
 10022b0:	d8000405 	stb	zero,16(sp)
 10022b4:	003d1306 	br	1001704 <___vfprintf_internal_r+0xa38>
 10022b8:	00804074 	movhi	r2,257
 10022bc:	108b6504 	addi	r2,r2,11668
 10022c0:	94800044 	addi	r18,r18,1
 10022c4:	8c400044 	addi	r17,r17,1
 10022c8:	a8800015 	stw	r2,0(r21)
 10022cc:	00c00044 	movi	r3,1
 10022d0:	008001c4 	movi	r2,7
 10022d4:	a8c00115 	stw	r3,4(r21)
 10022d8:	dc800e15 	stw	r18,56(sp)
 10022dc:	dc400d15 	stw	r17,52(sp)
 10022e0:	1440ca16 	blt	r2,r17,100260c <___vfprintf_internal_r+0x1940>
 10022e4:	a8c00204 	addi	r3,r21,8
 10022e8:	2000061e 	bne	r4,zero,1002304 <___vfprintf_internal_r+0x1638>
 10022ec:	d9414717 	ldw	r5,1308(sp)
 10022f0:	2800041e 	bne	r5,zero,1002304 <___vfprintf_internal_r+0x1638>
 10022f4:	d9814c17 	ldw	r6,1328(sp)
 10022f8:	3080004c 	andi	r2,r6,1
 10022fc:	1005003a 	cmpeq	r2,r2,zero
 1002300:	103bf01e 	bne	r2,zero,10012c4 <___vfprintf_internal_r+0x5f8>
 1002304:	00800044 	movi	r2,1
 1002308:	dc400d17 	ldw	r17,52(sp)
 100230c:	18800115 	stw	r2,4(r3)
 1002310:	d8814917 	ldw	r2,1316(sp)
 1002314:	94800044 	addi	r18,r18,1
 1002318:	8c400044 	addi	r17,r17,1
 100231c:	18800015 	stw	r2,0(r3)
 1002320:	008001c4 	movi	r2,7
 1002324:	dc800e15 	stw	r18,56(sp)
 1002328:	dc400d15 	stw	r17,52(sp)
 100232c:	1440ca16 	blt	r2,r17,1002658 <___vfprintf_internal_r+0x198c>
 1002330:	18c00204 	addi	r3,r3,8
 1002334:	0121c83a 	sub	r16,zero,r4
 1002338:	0400500e 	bge	zero,r16,100247c <___vfprintf_internal_r+0x17b0>
 100233c:	00800404 	movi	r2,16
 1002340:	1400800e 	bge	r2,r16,1002544 <___vfprintf_internal_r+0x1878>
 1002344:	1027883a 	mov	r19,r2
 1002348:	07004074 	movhi	fp,257
 100234c:	e70b6584 	addi	fp,fp,11670
 1002350:	050001c4 	movi	r20,7
 1002354:	00000306 	br	1002364 <___vfprintf_internal_r+0x1698>
 1002358:	18c00204 	addi	r3,r3,8
 100235c:	843ffc04 	addi	r16,r16,-16
 1002360:	9c007a0e 	bge	r19,r16,100254c <___vfprintf_internal_r+0x1880>
 1002364:	94800404 	addi	r18,r18,16
 1002368:	8c400044 	addi	r17,r17,1
 100236c:	1f000015 	stw	fp,0(r3)
 1002370:	1cc00115 	stw	r19,4(r3)
 1002374:	dc800e15 	stw	r18,56(sp)
 1002378:	dc400d15 	stw	r17,52(sp)
 100237c:	a47ff60e 	bge	r20,r17,1002358 <___vfprintf_internal_r+0x168c>
 1002380:	d9014f17 	ldw	r4,1340(sp)
 1002384:	b00b883a 	mov	r5,r22
 1002388:	d9800c04 	addi	r6,sp,48
 100238c:	1000c740 	call	1000c74 <__sprint_r>
 1002390:	103c061e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1002394:	dc800e17 	ldw	r18,56(sp)
 1002398:	dc400d17 	ldw	r17,52(sp)
 100239c:	d8c01904 	addi	r3,sp,100
 10023a0:	003fee06 	br	100235c <___vfprintf_internal_r+0x1690>
 10023a4:	3c000017 	ldw	r16,0(r7)
 10023a8:	0023883a 	mov	r17,zero
 10023ac:	39c00104 	addi	r7,r7,4
 10023b0:	d9c14015 	stw	r7,1280(sp)
 10023b4:	003e9206 	br	1001e00 <___vfprintf_internal_r+0x1134>
 10023b8:	d9401904 	addi	r5,sp,100
 10023bc:	dd000f04 	addi	r20,sp,60
 10023c0:	d9414115 	stw	r5,1284(sp)
 10023c4:	d9814417 	ldw	r6,1296(sp)
 10023c8:	880a973a 	slli	r5,r17,28
 10023cc:	8004d13a 	srli	r2,r16,4
 10023d0:	810003cc 	andi	r4,r16,15
 10023d4:	3109883a 	add	r4,r6,r4
 10023d8:	2884b03a 	or	r2,r5,r2
 10023dc:	21400003 	ldbu	r5,0(r4)
 10023e0:	d9014117 	ldw	r4,1284(sp)
 10023e4:	8806d13a 	srli	r3,r17,4
 10023e8:	1021883a 	mov	r16,r2
 10023ec:	213fffc4 	addi	r4,r4,-1
 10023f0:	d9014115 	stw	r4,1284(sp)
 10023f4:	d9814117 	ldw	r6,1284(sp)
 10023f8:	10c8b03a 	or	r4,r2,r3
 10023fc:	1823883a 	mov	r17,r3
 1002400:	31400005 	stb	r5,0(r6)
 1002404:	203fef1e 	bne	r4,zero,10023c4 <___vfprintf_internal_r+0x16f8>
 1002408:	003ccb06 	br	1001738 <___vfprintf_internal_r+0xa6c>
 100240c:	00800c04 	movi	r2,48
 1002410:	d98018c4 	addi	r6,sp,99
 1002414:	dd000f04 	addi	r20,sp,60
 1002418:	d88018c5 	stb	r2,99(sp)
 100241c:	d9814115 	stw	r6,1284(sp)
 1002420:	003cc506 	br	1001738 <___vfprintf_internal_r+0xa6c>
 1002424:	dc400d17 	ldw	r17,52(sp)
 1002428:	07004074 	movhi	fp,257
 100242c:	e70b6984 	addi	fp,fp,11686
 1002430:	003bc706 	br	1001350 <___vfprintf_internal_r+0x684>
 1002434:	d9414c17 	ldw	r5,1328(sp)
 1002438:	2880040c 	andi	r2,r5,16
 100243c:	10007c26 	beq	r2,zero,1002630 <___vfprintf_internal_r+0x1964>
 1002440:	38800017 	ldw	r2,0(r7)
 1002444:	39c00104 	addi	r7,r7,4
 1002448:	d9c14015 	stw	r7,1280(sp)
 100244c:	d9814b17 	ldw	r6,1324(sp)
 1002450:	d9c14017 	ldw	r7,1280(sp)
 1002454:	11800015 	stw	r6,0(r2)
 1002458:	003a7806 	br	1000e3c <___vfprintf_internal_r+0x170>
 100245c:	d9014f17 	ldw	r4,1340(sp)
 1002460:	b00b883a 	mov	r5,r22
 1002464:	d9800c04 	addi	r6,sp,48
 1002468:	1000c740 	call	1000c74 <__sprint_r>
 100246c:	103bcf1e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1002470:	dc800e17 	ldw	r18,56(sp)
 1002474:	dc400d17 	ldw	r17,52(sp)
 1002478:	d8c01904 	addi	r3,sp,100
 100247c:	d9014717 	ldw	r4,1308(sp)
 1002480:	d9414117 	ldw	r5,1284(sp)
 1002484:	8c400044 	addi	r17,r17,1
 1002488:	9125883a 	add	r18,r18,r4
 100248c:	008001c4 	movi	r2,7
 1002490:	19400015 	stw	r5,0(r3)
 1002494:	19000115 	stw	r4,4(r3)
 1002498:	dc800e15 	stw	r18,56(sp)
 100249c:	dc400d15 	stw	r17,52(sp)
 10024a0:	147cee16 	blt	r2,r17,100185c <___vfprintf_internal_r+0xb90>
 10024a4:	18c00204 	addi	r3,r3,8
 10024a8:	003b8606 	br	10012c4 <___vfprintf_internal_r+0x5f8>
 10024ac:	38c00017 	ldw	r3,0(r7)
 10024b0:	39000204 	addi	r4,r7,8
 10024b4:	d9014015 	stw	r4,1280(sp)
 10024b8:	d8c14215 	stw	r3,1288(sp)
 10024bc:	39c00117 	ldw	r7,4(r7)
 10024c0:	d9c14315 	stw	r7,1292(sp)
 10024c4:	003e2006 	br	1001d48 <___vfprintf_internal_r+0x107c>
 10024c8:	0005883a 	mov	r2,zero
 10024cc:	1409c83a 	sub	r4,r2,r16
 10024d0:	1105803a 	cmpltu	r2,r2,r4
 10024d4:	044bc83a 	sub	r5,zero,r17
 10024d8:	2885c83a 	sub	r2,r5,r2
 10024dc:	2021883a 	mov	r16,r4
 10024e0:	1023883a 	mov	r17,r2
 10024e4:	01000044 	movi	r4,1
 10024e8:	00800b44 	movi	r2,45
 10024ec:	d8800405 	stb	r2,16(sp)
 10024f0:	003c8406 	br	1001704 <___vfprintf_internal_r+0xa38>
 10024f4:	d9014f17 	ldw	r4,1340(sp)
 10024f8:	b00b883a 	mov	r5,r22
 10024fc:	d9800c04 	addi	r6,sp,48
 1002500:	1000c740 	call	1000c74 <__sprint_r>
 1002504:	103ba91e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1002508:	dc800e17 	ldw	r18,56(sp)
 100250c:	dc400d17 	ldw	r17,52(sp)
 1002510:	d9000517 	ldw	r4,20(sp)
 1002514:	d9401904 	addi	r5,sp,100
 1002518:	003da706 	br	1001bb8 <___vfprintf_internal_r+0xeec>
 100251c:	d9014f17 	ldw	r4,1340(sp)
 1002520:	b00b883a 	mov	r5,r22
 1002524:	d9800c04 	addi	r6,sp,48
 1002528:	1000c740 	call	1000c74 <__sprint_r>
 100252c:	103b9f1e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1002530:	dc800e17 	ldw	r18,56(sp)
 1002534:	dc400d17 	ldw	r17,52(sp)
 1002538:	d9000517 	ldw	r4,20(sp)
 100253c:	d8c01904 	addi	r3,sp,100
 1002540:	003d9106 	br	1001b88 <___vfprintf_internal_r+0xebc>
 1002544:	07004074 	movhi	fp,257
 1002548:	e70b6584 	addi	fp,fp,11670
 100254c:	9425883a 	add	r18,r18,r16
 1002550:	8c400044 	addi	r17,r17,1
 1002554:	008001c4 	movi	r2,7
 1002558:	1f000015 	stw	fp,0(r3)
 100255c:	1c000115 	stw	r16,4(r3)
 1002560:	dc800e15 	stw	r18,56(sp)
 1002564:	dc400d15 	stw	r17,52(sp)
 1002568:	147fbc16 	blt	r2,r17,100245c <___vfprintf_internal_r+0x1790>
 100256c:	18c00204 	addi	r3,r3,8
 1002570:	003fc206 	br	100247c <___vfprintf_internal_r+0x17b0>
 1002574:	d9014f17 	ldw	r4,1340(sp)
 1002578:	b00b883a 	mov	r5,r22
 100257c:	d9800c04 	addi	r6,sp,48
 1002580:	1000c740 	call	1000c74 <__sprint_r>
 1002584:	103b891e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1002588:	dc800e17 	ldw	r18,56(sp)
 100258c:	d9000517 	ldw	r4,20(sp)
 1002590:	d8c01904 	addi	r3,sp,100
 1002594:	003d0206 	br	10019a0 <___vfprintf_internal_r+0xcd4>
 1002598:	07004074 	movhi	fp,257
 100259c:	e70b6584 	addi	fp,fp,11670
 10025a0:	003be406 	br	1001534 <___vfprintf_internal_r+0x868>
 10025a4:	00804074 	movhi	r2,257
 10025a8:	108b5404 	addi	r2,r2,11600
 10025ac:	d8814115 	stw	r2,1284(sp)
 10025b0:	003df506 	br	1001d88 <___vfprintf_internal_r+0x10bc>
 10025b4:	d9014217 	ldw	r4,1288(sp)
 10025b8:	d9414317 	ldw	r5,1292(sp)
 10025bc:	10095600 	call	1009560 <__isnand>
 10025c0:	10003926 	beq	r2,zero,10026a8 <___vfprintf_internal_r+0x19dc>
 10025c4:	d9414d17 	ldw	r5,1332(sp)
 10025c8:	008011c4 	movi	r2,71
 10025cc:	1140ce16 	blt	r2,r5,1002908 <___vfprintf_internal_r+0x1c3c>
 10025d0:	01804074 	movhi	r6,257
 10025d4:	318b5504 	addi	r6,r6,11604
 10025d8:	d9814115 	stw	r6,1284(sp)
 10025dc:	003dea06 	br	1001d88 <___vfprintf_internal_r+0x10bc>
 10025e0:	d9014c17 	ldw	r4,1328(sp)
 10025e4:	bdc00044 	addi	r23,r23,1
 10025e8:	b8c00007 	ldb	r3,0(r23)
 10025ec:	21000814 	ori	r4,r4,32
 10025f0:	d9014c15 	stw	r4,1328(sp)
 10025f4:	003a3406 	br	1000ec8 <___vfprintf_internal_r+0x1fc>
 10025f8:	dcc14515 	stw	r19,1300(sp)
 10025fc:	98011016 	blt	r19,zero,1002a40 <___vfprintf_internal_r+0x1d74>
 1002600:	980f883a 	mov	r7,r19
 1002604:	d8014615 	stw	zero,1304(sp)
 1002608:	003c5206 	br	1001754 <___vfprintf_internal_r+0xa88>
 100260c:	d9014f17 	ldw	r4,1340(sp)
 1002610:	b00b883a 	mov	r5,r22
 1002614:	d9800c04 	addi	r6,sp,48
 1002618:	1000c740 	call	1000c74 <__sprint_r>
 100261c:	103b631e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 1002620:	dc800e17 	ldw	r18,56(sp)
 1002624:	d9000517 	ldw	r4,20(sp)
 1002628:	d8c01904 	addi	r3,sp,100
 100262c:	003f2e06 	br	10022e8 <___vfprintf_internal_r+0x161c>
 1002630:	d8c14c17 	ldw	r3,1328(sp)
 1002634:	1880100c 	andi	r2,r3,64
 1002638:	1000a026 	beq	r2,zero,10028bc <___vfprintf_internal_r+0x1bf0>
 100263c:	38800017 	ldw	r2,0(r7)
 1002640:	39c00104 	addi	r7,r7,4
 1002644:	d9c14015 	stw	r7,1280(sp)
 1002648:	d9014b17 	ldw	r4,1324(sp)
 100264c:	d9c14017 	ldw	r7,1280(sp)
 1002650:	1100000d 	sth	r4,0(r2)
 1002654:	0039f906 	br	1000e3c <___vfprintf_internal_r+0x170>
 1002658:	d9014f17 	ldw	r4,1340(sp)
 100265c:	b00b883a 	mov	r5,r22
 1002660:	d9800c04 	addi	r6,sp,48
 1002664:	1000c740 	call	1000c74 <__sprint_r>
 1002668:	103b501e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 100266c:	dc800e17 	ldw	r18,56(sp)
 1002670:	dc400d17 	ldw	r17,52(sp)
 1002674:	d9000517 	ldw	r4,20(sp)
 1002678:	d8c01904 	addi	r3,sp,100
 100267c:	003f2d06 	br	1002334 <___vfprintf_internal_r+0x1668>
 1002680:	00800184 	movi	r2,6
 1002684:	14c09a36 	bltu	r2,r19,10028f0 <___vfprintf_internal_r+0x1c24>
 1002688:	dcc14515 	stw	r19,1300(sp)
 100268c:	9800010e 	bge	r19,zero,1002694 <___vfprintf_internal_r+0x19c8>
 1002690:	d8014515 	stw	zero,1300(sp)
 1002694:	00804074 	movhi	r2,257
 1002698:	108b5704 	addi	r2,r2,11612
 100269c:	980f883a 	mov	r7,r19
 10026a0:	d8814115 	stw	r2,1284(sp)
 10026a4:	003a7806 	br	1001088 <___vfprintf_internal_r+0x3bc>
 10026a8:	00bfffc4 	movi	r2,-1
 10026ac:	9880e226 	beq	r19,r2,1002a38 <___vfprintf_internal_r+0x1d6c>
 10026b0:	d9414d17 	ldw	r5,1332(sp)
 10026b4:	008019c4 	movi	r2,103
 10026b8:	2880dc26 	beq	r5,r2,1002a2c <___vfprintf_internal_r+0x1d60>
 10026bc:	008011c4 	movi	r2,71
 10026c0:	2880da26 	beq	r5,r2,1002a2c <___vfprintf_internal_r+0x1d60>
 10026c4:	d9414c17 	ldw	r5,1328(sp)
 10026c8:	d9014317 	ldw	r4,1292(sp)
 10026cc:	d9814217 	ldw	r6,1288(sp)
 10026d0:	29404014 	ori	r5,r5,256
 10026d4:	d9414c15 	stw	r5,1328(sp)
 10026d8:	2000cc16 	blt	r4,zero,1002a0c <___vfprintf_internal_r+0x1d40>
 10026dc:	3021883a 	mov	r16,r6
 10026e0:	2023883a 	mov	r17,r4
 10026e4:	0039883a 	mov	fp,zero
 10026e8:	d9414d17 	ldw	r5,1332(sp)
 10026ec:	00801984 	movi	r2,102
 10026f0:	2880b726 	beq	r5,r2,10029d0 <___vfprintf_internal_r+0x1d04>
 10026f4:	00801184 	movi	r2,70
 10026f8:	2880b526 	beq	r5,r2,10029d0 <___vfprintf_internal_r+0x1d04>
 10026fc:	00801944 	movi	r2,101
 1002700:	2880c826 	beq	r5,r2,1002a24 <___vfprintf_internal_r+0x1d58>
 1002704:	00801144 	movi	r2,69
 1002708:	2880c626 	beq	r5,r2,1002a24 <___vfprintf_internal_r+0x1d58>
 100270c:	9829883a 	mov	r20,r19
 1002710:	d9014f17 	ldw	r4,1340(sp)
 1002714:	d8800504 	addi	r2,sp,20
 1002718:	880d883a 	mov	r6,r17
 100271c:	d8800115 	stw	r2,4(sp)
 1002720:	d8c00604 	addi	r3,sp,24
 1002724:	d8800704 	addi	r2,sp,28
 1002728:	800b883a 	mov	r5,r16
 100272c:	01c00084 	movi	r7,2
 1002730:	d8c00215 	stw	r3,8(sp)
 1002734:	d8800315 	stw	r2,12(sp)
 1002738:	dd000015 	stw	r20,0(sp)
 100273c:	10046700 	call	1004670 <_dtoa_r>
 1002740:	d9814d17 	ldw	r6,1332(sp)
 1002744:	d8814115 	stw	r2,1284(sp)
 1002748:	008019c4 	movi	r2,103
 100274c:	30809526 	beq	r6,r2,10029a4 <___vfprintf_internal_r+0x1cd8>
 1002750:	d8c14d17 	ldw	r3,1332(sp)
 1002754:	008011c4 	movi	r2,71
 1002758:	18809226 	beq	r3,r2,10029a4 <___vfprintf_internal_r+0x1cd8>
 100275c:	d9414117 	ldw	r5,1284(sp)
 1002760:	d9814d17 	ldw	r6,1332(sp)
 1002764:	00801984 	movi	r2,102
 1002768:	2d25883a 	add	r18,r5,r20
 100276c:	30808626 	beq	r6,r2,1002988 <___vfprintf_internal_r+0x1cbc>
 1002770:	00801184 	movi	r2,70
 1002774:	30808426 	beq	r6,r2,1002988 <___vfprintf_internal_r+0x1cbc>
 1002778:	000d883a 	mov	r6,zero
 100277c:	000f883a 	mov	r7,zero
 1002780:	880b883a 	mov	r5,r17
 1002784:	8009883a 	mov	r4,r16
 1002788:	100e8200 	call	100e820 <__eqdf2>
 100278c:	1000751e 	bne	r2,zero,1002964 <___vfprintf_internal_r+0x1c98>
 1002790:	9005883a 	mov	r2,r18
 1002794:	dc800715 	stw	r18,28(sp)
 1002798:	d9014117 	ldw	r4,1284(sp)
 100279c:	d9414d17 	ldw	r5,1332(sp)
 10027a0:	00c019c4 	movi	r3,103
 10027a4:	1125c83a 	sub	r18,r2,r4
 10027a8:	28c06826 	beq	r5,r3,100294c <___vfprintf_internal_r+0x1c80>
 10027ac:	008011c4 	movi	r2,71
 10027b0:	28806626 	beq	r5,r2,100294c <___vfprintf_internal_r+0x1c80>
 10027b4:	d9000517 	ldw	r4,20(sp)
 10027b8:	d8c14d17 	ldw	r3,1332(sp)
 10027bc:	00801944 	movi	r2,101
 10027c0:	10c05516 	blt	r2,r3,1002918 <___vfprintf_internal_r+0x1c4c>
 10027c4:	213fffc4 	addi	r4,r4,-1
 10027c8:	d9000515 	stw	r4,20(sp)
 10027cc:	d8c00805 	stb	r3,32(sp)
 10027d0:	2021883a 	mov	r16,r4
 10027d4:	2000c116 	blt	r4,zero,1002adc <___vfprintf_internal_r+0x1e10>
 10027d8:	00800ac4 	movi	r2,43
 10027dc:	d8800845 	stb	r2,33(sp)
 10027e0:	00800244 	movi	r2,9
 10027e4:	1400af0e 	bge	r2,r16,1002aa4 <___vfprintf_internal_r+0x1dd8>
 10027e8:	1027883a 	mov	r19,r2
 10027ec:	dc400b84 	addi	r17,sp,46
 10027f0:	8009883a 	mov	r4,r16
 10027f4:	01400284 	movi	r5,10
 10027f8:	100f0040 	call	100f004 <__modsi3>
 10027fc:	10800c04 	addi	r2,r2,48
 1002800:	8c7fffc4 	addi	r17,r17,-1
 1002804:	8009883a 	mov	r4,r16
 1002808:	01400284 	movi	r5,10
 100280c:	88800005 	stb	r2,0(r17)
 1002810:	100efa40 	call	100efa4 <__divsi3>
 1002814:	1021883a 	mov	r16,r2
 1002818:	98bff516 	blt	r19,r2,10027f0 <___vfprintf_internal_r+0x1b24>
 100281c:	10c00c04 	addi	r3,r2,48
 1002820:	d88009c4 	addi	r2,sp,39
 1002824:	108001c4 	addi	r2,r2,7
 1002828:	897fffc4 	addi	r5,r17,-1
 100282c:	88ffffc5 	stb	r3,-1(r17)
 1002830:	2880a72e 	bgeu	r5,r2,1002ad0 <___vfprintf_internal_r+0x1e04>
 1002834:	1009883a 	mov	r4,r2
 1002838:	d9800804 	addi	r6,sp,32
 100283c:	d8c00884 	addi	r3,sp,34
 1002840:	28800003 	ldbu	r2,0(r5)
 1002844:	29400044 	addi	r5,r5,1
 1002848:	18800005 	stb	r2,0(r3)
 100284c:	18c00044 	addi	r3,r3,1
 1002850:	293ffb36 	bltu	r5,r4,1002840 <___vfprintf_internal_r+0x1b74>
 1002854:	1987c83a 	sub	r3,r3,r6
 1002858:	00800044 	movi	r2,1
 100285c:	d8c14815 	stw	r3,1312(sp)
 1002860:	90cf883a 	add	r7,r18,r3
 1002864:	1480960e 	bge	r2,r18,1002ac0 <___vfprintf_internal_r+0x1df4>
 1002868:	39c00044 	addi	r7,r7,1
 100286c:	d9c14515 	stw	r7,1300(sp)
 1002870:	38003416 	blt	r7,zero,1002944 <___vfprintf_internal_r+0x1c78>
 1002874:	e0803fcc 	andi	r2,fp,255
 1002878:	1080201c 	xori	r2,r2,128
 100287c:	10bfe004 	addi	r2,r2,-128
 1002880:	10004e26 	beq	r2,zero,10029bc <___vfprintf_internal_r+0x1cf0>
 1002884:	00800b44 	movi	r2,45
 1002888:	dc814715 	stw	r18,1308(sp)
 100288c:	d8014615 	stw	zero,1304(sp)
 1002890:	d8800405 	stb	r2,16(sp)
 1002894:	003bb106 	br	100175c <___vfprintf_internal_r+0xa90>
 1002898:	00800b44 	movi	r2,45
 100289c:	d8800405 	stb	r2,16(sp)
 10028a0:	003d3306 	br	1001d70 <___vfprintf_internal_r+0x10a4>
 10028a4:	d9014f17 	ldw	r4,1340(sp)
 10028a8:	b00b883a 	mov	r5,r22
 10028ac:	d9800c04 	addi	r6,sp,48
 10028b0:	1000c740 	call	1000c74 <__sprint_r>
 10028b4:	103abd1e 	bne	r2,zero,10013ac <___vfprintf_internal_r+0x6e0>
 10028b8:	003abb06 	br	10013a8 <___vfprintf_internal_r+0x6dc>
 10028bc:	38800017 	ldw	r2,0(r7)
 10028c0:	39c00104 	addi	r7,r7,4
 10028c4:	d9c14015 	stw	r7,1280(sp)
 10028c8:	d9414b17 	ldw	r5,1324(sp)
 10028cc:	d9c14017 	ldw	r7,1280(sp)
 10028d0:	11400015 	stw	r5,0(r2)
 10028d4:	00395906 	br	1000e3c <___vfprintf_internal_r+0x170>
 10028d8:	980f883a 	mov	r7,r19
 10028dc:	dcc14515 	stw	r19,1300(sp)
 10028e0:	d8014615 	stw	zero,1304(sp)
 10028e4:	003b9b06 	br	1001754 <___vfprintf_internal_r+0xa88>
 10028e8:	0027883a 	mov	r19,zero
 10028ec:	00397806 	br	1000ed0 <___vfprintf_internal_r+0x204>
 10028f0:	00c04074 	movhi	r3,257
 10028f4:	18cb5704 	addi	r3,r3,11612
 10028f8:	100f883a 	mov	r7,r2
 10028fc:	d8814515 	stw	r2,1300(sp)
 1002900:	d8c14115 	stw	r3,1284(sp)
 1002904:	0039e006 	br	1001088 <___vfprintf_internal_r+0x3bc>
 1002908:	00804074 	movhi	r2,257
 100290c:	108b5604 	addi	r2,r2,11608
 1002910:	d8814115 	stw	r2,1284(sp)
 1002914:	003d1c06 	br	1001d88 <___vfprintf_internal_r+0x10bc>
 1002918:	d9414d17 	ldw	r5,1332(sp)
 100291c:	00801984 	movi	r2,102
 1002920:	28804926 	beq	r5,r2,1002a48 <___vfprintf_internal_r+0x1d7c>
 1002924:	200f883a 	mov	r7,r4
 1002928:	24805716 	blt	r4,r18,1002a88 <___vfprintf_internal_r+0x1dbc>
 100292c:	d9414c17 	ldw	r5,1328(sp)
 1002930:	2880004c 	andi	r2,r5,1
 1002934:	10000126 	beq	r2,zero,100293c <___vfprintf_internal_r+0x1c70>
 1002938:	21c00044 	addi	r7,r4,1
 100293c:	d9c14515 	stw	r7,1300(sp)
 1002940:	383fcc0e 	bge	r7,zero,1002874 <___vfprintf_internal_r+0x1ba8>
 1002944:	d8014515 	stw	zero,1300(sp)
 1002948:	003fca06 	br	1002874 <___vfprintf_internal_r+0x1ba8>
 100294c:	d9000517 	ldw	r4,20(sp)
 1002950:	00bfff04 	movi	r2,-4
 1002954:	1100480e 	bge	r2,r4,1002a78 <___vfprintf_internal_r+0x1dac>
 1002958:	99004716 	blt	r19,r4,1002a78 <___vfprintf_internal_r+0x1dac>
 100295c:	d8c14d15 	stw	r3,1332(sp)
 1002960:	003ff006 	br	1002924 <___vfprintf_internal_r+0x1c58>
 1002964:	d8800717 	ldw	r2,28(sp)
 1002968:	14bf8b2e 	bgeu	r2,r18,1002798 <___vfprintf_internal_r+0x1acc>
 100296c:	9007883a 	mov	r3,r18
 1002970:	01000c04 	movi	r4,48
 1002974:	11000005 	stb	r4,0(r2)
 1002978:	10800044 	addi	r2,r2,1
 100297c:	d8800715 	stw	r2,28(sp)
 1002980:	18bffc1e 	bne	r3,r2,1002974 <___vfprintf_internal_r+0x1ca8>
 1002984:	003f8406 	br	1002798 <___vfprintf_internal_r+0x1acc>
 1002988:	d8814117 	ldw	r2,1284(sp)
 100298c:	10c00007 	ldb	r3,0(r2)
 1002990:	00800c04 	movi	r2,48
 1002994:	18805b26 	beq	r3,r2,1002b04 <___vfprintf_internal_r+0x1e38>
 1002998:	d9000517 	ldw	r4,20(sp)
 100299c:	9125883a 	add	r18,r18,r4
 10029a0:	003f7506 	br	1002778 <___vfprintf_internal_r+0x1aac>
 10029a4:	d9014c17 	ldw	r4,1328(sp)
 10029a8:	2080004c 	andi	r2,r4,1
 10029ac:	1005003a 	cmpeq	r2,r2,zero
 10029b0:	103f6a26 	beq	r2,zero,100275c <___vfprintf_internal_r+0x1a90>
 10029b4:	d8800717 	ldw	r2,28(sp)
 10029b8:	003f7706 	br	1002798 <___vfprintf_internal_r+0x1acc>
 10029bc:	d9c14515 	stw	r7,1300(sp)
 10029c0:	38004d16 	blt	r7,zero,1002af8 <___vfprintf_internal_r+0x1e2c>
 10029c4:	dc814715 	stw	r18,1308(sp)
 10029c8:	d8014615 	stw	zero,1304(sp)
 10029cc:	003b6106 	br	1001754 <___vfprintf_internal_r+0xa88>
 10029d0:	d9014f17 	ldw	r4,1340(sp)
 10029d4:	d8800504 	addi	r2,sp,20
 10029d8:	d8800115 	stw	r2,4(sp)
 10029dc:	d8c00604 	addi	r3,sp,24
 10029e0:	d8800704 	addi	r2,sp,28
 10029e4:	800b883a 	mov	r5,r16
 10029e8:	880d883a 	mov	r6,r17
 10029ec:	01c000c4 	movi	r7,3
 10029f0:	d8c00215 	stw	r3,8(sp)
 10029f4:	d8800315 	stw	r2,12(sp)
 10029f8:	dcc00015 	stw	r19,0(sp)
 10029fc:	9829883a 	mov	r20,r19
 1002a00:	10046700 	call	1004670 <_dtoa_r>
 1002a04:	d8814115 	stw	r2,1284(sp)
 1002a08:	003f5106 	br	1002750 <___vfprintf_internal_r+0x1a84>
 1002a0c:	d8c14217 	ldw	r3,1288(sp)
 1002a10:	d9014317 	ldw	r4,1292(sp)
 1002a14:	07000b44 	movi	fp,45
 1002a18:	1821883a 	mov	r16,r3
 1002a1c:	2460003c 	xorhi	r17,r4,32768
 1002a20:	003f3106 	br	10026e8 <___vfprintf_internal_r+0x1a1c>
 1002a24:	9d000044 	addi	r20,r19,1
 1002a28:	003f3906 	br	1002710 <___vfprintf_internal_r+0x1a44>
 1002a2c:	983f251e 	bne	r19,zero,10026c4 <___vfprintf_internal_r+0x19f8>
 1002a30:	04c00044 	movi	r19,1
 1002a34:	003f2306 	br	10026c4 <___vfprintf_internal_r+0x19f8>
 1002a38:	04c00184 	movi	r19,6
 1002a3c:	003f2106 	br	10026c4 <___vfprintf_internal_r+0x19f8>
 1002a40:	d8014515 	stw	zero,1300(sp)
 1002a44:	003eee06 	br	1002600 <___vfprintf_internal_r+0x1934>
 1002a48:	200f883a 	mov	r7,r4
 1002a4c:	0100370e 	bge	zero,r4,1002b2c <___vfprintf_internal_r+0x1e60>
 1002a50:	9800031e 	bne	r19,zero,1002a60 <___vfprintf_internal_r+0x1d94>
 1002a54:	d9814c17 	ldw	r6,1328(sp)
 1002a58:	3080004c 	andi	r2,r6,1
 1002a5c:	103fb726 	beq	r2,zero,100293c <___vfprintf_internal_r+0x1c70>
 1002a60:	20800044 	addi	r2,r4,1
 1002a64:	98a7883a 	add	r19,r19,r2
 1002a68:	dcc14515 	stw	r19,1300(sp)
 1002a6c:	980f883a 	mov	r7,r19
 1002a70:	983f800e 	bge	r19,zero,1002874 <___vfprintf_internal_r+0x1ba8>
 1002a74:	003fb306 	br	1002944 <___vfprintf_internal_r+0x1c78>
 1002a78:	d9814d17 	ldw	r6,1332(sp)
 1002a7c:	31bfff84 	addi	r6,r6,-2
 1002a80:	d9814d15 	stw	r6,1332(sp)
 1002a84:	003f4c06 	br	10027b8 <___vfprintf_internal_r+0x1aec>
 1002a88:	0100180e 	bge	zero,r4,1002aec <___vfprintf_internal_r+0x1e20>
 1002a8c:	00800044 	movi	r2,1
 1002a90:	1485883a 	add	r2,r2,r18
 1002a94:	d8814515 	stw	r2,1300(sp)
 1002a98:	100f883a 	mov	r7,r2
 1002a9c:	103f750e 	bge	r2,zero,1002874 <___vfprintf_internal_r+0x1ba8>
 1002aa0:	003fa806 	br	1002944 <___vfprintf_internal_r+0x1c78>
 1002aa4:	80c00c04 	addi	r3,r16,48
 1002aa8:	00800c04 	movi	r2,48
 1002aac:	d8c008c5 	stb	r3,35(sp)
 1002ab0:	d9800804 	addi	r6,sp,32
 1002ab4:	d8c00904 	addi	r3,sp,36
 1002ab8:	d8800885 	stb	r2,34(sp)
 1002abc:	003f6506 	br	1002854 <___vfprintf_internal_r+0x1b88>
 1002ac0:	d9014c17 	ldw	r4,1328(sp)
 1002ac4:	2084703a 	and	r2,r4,r2
 1002ac8:	103f9c26 	beq	r2,zero,100293c <___vfprintf_internal_r+0x1c70>
 1002acc:	003f6606 	br	1002868 <___vfprintf_internal_r+0x1b9c>
 1002ad0:	d9800804 	addi	r6,sp,32
 1002ad4:	d8c00884 	addi	r3,sp,34
 1002ad8:	003f5e06 	br	1002854 <___vfprintf_internal_r+0x1b88>
 1002adc:	00800b44 	movi	r2,45
 1002ae0:	0121c83a 	sub	r16,zero,r4
 1002ae4:	d8800845 	stb	r2,33(sp)
 1002ae8:	003f3d06 	br	10027e0 <___vfprintf_internal_r+0x1b14>
 1002aec:	00800084 	movi	r2,2
 1002af0:	1105c83a 	sub	r2,r2,r4
 1002af4:	003fe606 	br	1002a90 <___vfprintf_internal_r+0x1dc4>
 1002af8:	d8014515 	stw	zero,1300(sp)
 1002afc:	dc814715 	stw	r18,1308(sp)
 1002b00:	003fb106 	br	10029c8 <___vfprintf_internal_r+0x1cfc>
 1002b04:	000d883a 	mov	r6,zero
 1002b08:	000f883a 	mov	r7,zero
 1002b0c:	8009883a 	mov	r4,r16
 1002b10:	880b883a 	mov	r5,r17
 1002b14:	100e8a80 	call	100e8a8 <__nedf2>
 1002b18:	103f9f26 	beq	r2,zero,1002998 <___vfprintf_internal_r+0x1ccc>
 1002b1c:	00800044 	movi	r2,1
 1002b20:	1509c83a 	sub	r4,r2,r20
 1002b24:	d9000515 	stw	r4,20(sp)
 1002b28:	003f9b06 	br	1002998 <___vfprintf_internal_r+0x1ccc>
 1002b2c:	98000d1e 	bne	r19,zero,1002b64 <___vfprintf_internal_r+0x1e98>
 1002b30:	d8c14c17 	ldw	r3,1328(sp)
 1002b34:	1880004c 	andi	r2,r3,1
 1002b38:	10000a1e 	bne	r2,zero,1002b64 <___vfprintf_internal_r+0x1e98>
 1002b3c:	01000044 	movi	r4,1
 1002b40:	200f883a 	mov	r7,r4
 1002b44:	d9014515 	stw	r4,1300(sp)
 1002b48:	003f4a06 	br	1002874 <___vfprintf_internal_r+0x1ba8>
 1002b4c:	3cc00017 	ldw	r19,0(r7)
 1002b50:	39c00104 	addi	r7,r7,4
 1002b54:	983d0e0e 	bge	r19,zero,1001f90 <___vfprintf_internal_r+0x12c4>
 1002b58:	b8c00007 	ldb	r3,0(r23)
 1002b5c:	04ffffc4 	movi	r19,-1
 1002b60:	0038d906 	br	1000ec8 <___vfprintf_internal_r+0x1fc>
 1002b64:	9cc00084 	addi	r19,r19,2
 1002b68:	dcc14515 	stw	r19,1300(sp)
 1002b6c:	980f883a 	mov	r7,r19
 1002b70:	983f400e 	bge	r19,zero,1002874 <___vfprintf_internal_r+0x1ba8>
 1002b74:	003f7306 	br	1002944 <___vfprintf_internal_r+0x1c78>

01002b78 <__vfprintf_internal>:
 1002b78:	00804074 	movhi	r2,257
 1002b7c:	10939004 	addi	r2,r2,20032
 1002b80:	2013883a 	mov	r9,r4
 1002b84:	11000017 	ldw	r4,0(r2)
 1002b88:	2805883a 	mov	r2,r5
 1002b8c:	300f883a 	mov	r7,r6
 1002b90:	480b883a 	mov	r5,r9
 1002b94:	100d883a 	mov	r6,r2
 1002b98:	1000ccc1 	jmpi	1000ccc <___vfprintf_internal_r>

01002b9c <__svfscanf_r>:
 1002b9c:	deff4e04 	addi	sp,sp,-712
 1002ba0:	dd80ae15 	stw	r22,696(sp)
 1002ba4:	dd00ac15 	stw	r20,688(sp)
 1002ba8:	dc40a915 	stw	r17,676(sp)
 1002bac:	dc00a815 	stw	r16,672(sp)
 1002bb0:	dfc0b115 	stw	ra,708(sp)
 1002bb4:	df00b015 	stw	fp,704(sp)
 1002bb8:	ddc0af15 	stw	r23,700(sp)
 1002bbc:	dd40ad15 	stw	r21,692(sp)
 1002bc0:	dcc0ab15 	stw	r19,684(sp)
 1002bc4:	dc80aa15 	stw	r18,680(sp)
 1002bc8:	202d883a 	mov	r22,r4
 1002bcc:	2821883a 	mov	r16,r5
 1002bd0:	d9c0a415 	stw	r7,656(sp)
 1002bd4:	3029883a 	mov	r20,r6
 1002bd8:	d800a215 	stw	zero,648(sp)
 1002bdc:	0023883a 	mov	r17,zero
 1002be0:	d800a115 	stw	zero,644(sp)
 1002be4:	d800a015 	stw	zero,640(sp)
 1002be8:	a1000007 	ldb	r4,0(r20)
 1002bec:	d9000115 	stw	r4,4(sp)
 1002bf0:	20001f26 	beq	r4,zero,1002c70 <__svfscanf_r+0xd4>
 1002bf4:	04804074 	movhi	r18,257
 1002bf8:	94938f04 	addi	r18,r18,20028
 1002bfc:	91800017 	ldw	r6,0(r18)
 1002c00:	a5000044 	addi	r20,r20,1
 1002c04:	3107883a 	add	r3,r6,r4
 1002c08:	18800003 	ldbu	r2,0(r3)
 1002c0c:	1080020c 	andi	r2,r2,8
 1002c10:	10002426 	beq	r2,zero,1002ca4 <__svfscanf_r+0x108>
 1002c14:	80c00117 	ldw	r3,4(r16)
 1002c18:	00c00e0e 	bge	zero,r3,1002c54 <__svfscanf_r+0xb8>
 1002c1c:	81400017 	ldw	r5,0(r16)
 1002c20:	90800017 	ldw	r2,0(r18)
 1002c24:	28c00003 	ldbu	r3,0(r5)
 1002c28:	1887883a 	add	r3,r3,r2
 1002c2c:	19000003 	ldbu	r4,0(r3)
 1002c30:	2100020c 	andi	r4,r4,8
 1002c34:	203fec26 	beq	r4,zero,1002be8 <__svfscanf_r+0x4c>
 1002c38:	80c00117 	ldw	r3,4(r16)
 1002c3c:	29800044 	addi	r6,r5,1
 1002c40:	8c400044 	addi	r17,r17,1
 1002c44:	18ffffc4 	addi	r3,r3,-1
 1002c48:	81800015 	stw	r6,0(r16)
 1002c4c:	80c00115 	stw	r3,4(r16)
 1002c50:	00fff216 	blt	zero,r3,1002c1c <__svfscanf_r+0x80>
 1002c54:	b009883a 	mov	r4,r22
 1002c58:	800b883a 	mov	r5,r16
 1002c5c:	10093400 	call	1009340 <__srefill_r>
 1002c60:	103fee26 	beq	r2,zero,1002c1c <__svfscanf_r+0x80>
 1002c64:	a1000007 	ldb	r4,0(r20)
 1002c68:	d9000115 	stw	r4,4(sp)
 1002c6c:	203fe11e 	bne	r4,zero,1002bf4 <__svfscanf_r+0x58>
 1002c70:	d880a217 	ldw	r2,648(sp)
 1002c74:	dfc0b117 	ldw	ra,708(sp)
 1002c78:	df00b017 	ldw	fp,704(sp)
 1002c7c:	ddc0af17 	ldw	r23,700(sp)
 1002c80:	dd80ae17 	ldw	r22,696(sp)
 1002c84:	dd40ad17 	ldw	r21,692(sp)
 1002c88:	dd00ac17 	ldw	r20,688(sp)
 1002c8c:	dcc0ab17 	ldw	r19,684(sp)
 1002c90:	dc80aa17 	ldw	r18,680(sp)
 1002c94:	dc40a917 	ldw	r17,676(sp)
 1002c98:	dc00a817 	ldw	r16,672(sp)
 1002c9c:	dec0b204 	addi	sp,sp,712
 1002ca0:	f800283a 	ret
 1002ca4:	00800944 	movi	r2,37
 1002ca8:	20801626 	beq	r4,r2,1002d04 <__svfscanf_r+0x168>
 1002cac:	80800117 	ldw	r2,4(r16)
 1002cb0:	00800b0e 	bge	zero,r2,1002ce0 <__svfscanf_r+0x144>
 1002cb4:	81000017 	ldw	r4,0(r16)
 1002cb8:	a0ffffc7 	ldb	r3,-1(r20)
 1002cbc:	20800003 	ldbu	r2,0(r4)
 1002cc0:	10ffeb1e 	bne	r2,r3,1002c70 <__svfscanf_r+0xd4>
 1002cc4:	80c00117 	ldw	r3,4(r16)
 1002cc8:	21800044 	addi	r6,r4,1
 1002ccc:	8c400044 	addi	r17,r17,1
 1002cd0:	18ffffc4 	addi	r3,r3,-1
 1002cd4:	80c00115 	stw	r3,4(r16)
 1002cd8:	81800015 	stw	r6,0(r16)
 1002cdc:	003fc206 	br	1002be8 <__svfscanf_r+0x4c>
 1002ce0:	b009883a 	mov	r4,r22
 1002ce4:	800b883a 	mov	r5,r16
 1002ce8:	10093400 	call	1009340 <__srefill_r>
 1002cec:	103ff126 	beq	r2,zero,1002cb4 <__svfscanf_r+0x118>
 1002cf0:	d900a217 	ldw	r4,648(sp)
 1002cf4:	2004c91e 	bne	r4,zero,100401c <__svfscanf_r+0x1480>
 1002cf8:	00bfffc4 	movi	r2,-1
 1002cfc:	d880a215 	stw	r2,648(sp)
 1002d00:	003fdb06 	br	1002c70 <__svfscanf_r+0xd4>
 1002d04:	d800a315 	stw	zero,652(sp)
 1002d08:	0027883a 	mov	r19,zero
 1002d0c:	a0c00003 	ldbu	r3,0(r20)
 1002d10:	00801e04 	movi	r2,120
 1002d14:	a5000044 	addi	r20,r20,1
 1002d18:	19403fcc 	andi	r5,r3,255
 1002d1c:	2940201c 	xori	r5,r5,128
 1002d20:	297fe004 	addi	r5,r5,-128
 1002d24:	10c08036 	bltu	r2,r3,1002f28 <__svfscanf_r+0x38c>
 1002d28:	18c5883a 	add	r2,r3,r3
 1002d2c:	1085883a 	add	r2,r2,r2
 1002d30:	00c04034 	movhi	r3,256
 1002d34:	18cb5104 	addi	r3,r3,11588
 1002d38:	10c5883a 	add	r2,r2,r3
 1002d3c:	11000017 	ldw	r4,0(r2)
 1002d40:	2000683a 	jmp	r4
 1002d44:	01002cf8 	rdprs	r4,zero,179
 1002d48:	01002f28 	cmpgeui	r4,zero,188
 1002d4c:	01002f28 	cmpgeui	r4,zero,188
 1002d50:	01002f28 	cmpgeui	r4,zero,188
 1002d54:	01002f28 	cmpgeui	r4,zero,188
 1002d58:	01002f28 	cmpgeui	r4,zero,188
 1002d5c:	01002f28 	cmpgeui	r4,zero,188
 1002d60:	01002f28 	cmpgeui	r4,zero,188
 1002d64:	01002f28 	cmpgeui	r4,zero,188
 1002d68:	01002f28 	cmpgeui	r4,zero,188
 1002d6c:	01002f28 	cmpgeui	r4,zero,188
 1002d70:	01002f28 	cmpgeui	r4,zero,188
 1002d74:	01002f28 	cmpgeui	r4,zero,188
 1002d78:	01002f28 	cmpgeui	r4,zero,188
 1002d7c:	01002f28 	cmpgeui	r4,zero,188
 1002d80:	01002f28 	cmpgeui	r4,zero,188
 1002d84:	01002f28 	cmpgeui	r4,zero,188
 1002d88:	01002f28 	cmpgeui	r4,zero,188
 1002d8c:	01002f28 	cmpgeui	r4,zero,188
 1002d90:	01002f28 	cmpgeui	r4,zero,188
 1002d94:	01002f28 	cmpgeui	r4,zero,188
 1002d98:	01002f28 	cmpgeui	r4,zero,188
 1002d9c:	01002f28 	cmpgeui	r4,zero,188
 1002da0:	01002f28 	cmpgeui	r4,zero,188
 1002da4:	01002f28 	cmpgeui	r4,zero,188
 1002da8:	01002f28 	cmpgeui	r4,zero,188
 1002dac:	01002f28 	cmpgeui	r4,zero,188
 1002db0:	01002f28 	cmpgeui	r4,zero,188
 1002db4:	01002f28 	cmpgeui	r4,zero,188
 1002db8:	01002f28 	cmpgeui	r4,zero,188
 1002dbc:	01002f28 	cmpgeui	r4,zero,188
 1002dc0:	01002f28 	cmpgeui	r4,zero,188
 1002dc4:	01002f28 	cmpgeui	r4,zero,188
 1002dc8:	01002f28 	cmpgeui	r4,zero,188
 1002dcc:	01002f28 	cmpgeui	r4,zero,188
 1002dd0:	01002f28 	cmpgeui	r4,zero,188
 1002dd4:	01002f28 	cmpgeui	r4,zero,188
 1002dd8:	01002cac 	andhi	r4,zero,178
 1002ddc:	01002f28 	cmpgeui	r4,zero,188
 1002de0:	01002f28 	cmpgeui	r4,zero,188
 1002de4:	01002f28 	cmpgeui	r4,zero,188
 1002de8:	01002f28 	cmpgeui	r4,zero,188
 1002dec:	01003f4c 	andi	r4,zero,253
 1002df0:	01002f28 	cmpgeui	r4,zero,188
 1002df4:	01002f28 	cmpgeui	r4,zero,188
 1002df8:	01002f28 	cmpgeui	r4,zero,188
 1002dfc:	01002f28 	cmpgeui	r4,zero,188
 1002e00:	01002f28 	cmpgeui	r4,zero,188
 1002e04:	01003948 	cmpgei	r4,zero,229
 1002e08:	01003948 	cmpgei	r4,zero,229
 1002e0c:	01003948 	cmpgei	r4,zero,229
 1002e10:	01003948 	cmpgei	r4,zero,229
 1002e14:	01003948 	cmpgei	r4,zero,229
 1002e18:	01003948 	cmpgei	r4,zero,229
 1002e1c:	01003948 	cmpgei	r4,zero,229
 1002e20:	01003948 	cmpgei	r4,zero,229
 1002e24:	01003948 	cmpgei	r4,zero,229
 1002e28:	01003948 	cmpgei	r4,zero,229
 1002e2c:	01002f28 	cmpgeui	r4,zero,188
 1002e30:	01002f28 	cmpgeui	r4,zero,188
 1002e34:	01002f28 	cmpgeui	r4,zero,188
 1002e38:	01002f28 	cmpgeui	r4,zero,188
 1002e3c:	01002f28 	cmpgeui	r4,zero,188
 1002e40:	01002f28 	cmpgeui	r4,zero,188
 1002e44:	01002f28 	cmpgeui	r4,zero,188
 1002e48:	01002f28 	cmpgeui	r4,zero,188
 1002e4c:	01002f28 	cmpgeui	r4,zero,188
 1002e50:	01002f28 	cmpgeui	r4,zero,188
 1002e54:	010040c8 	cmpgei	r4,zero,259
 1002e58:	010040c0 	call	10040c <__alt_mem_onchip_memory2_0+0x10040c>
 1002e5c:	01002f28 	cmpgeui	r4,zero,188
 1002e60:	010040c0 	call	10040c <__alt_mem_onchip_memory2_0+0x10040c>
 1002e64:	01002f28 	cmpgeui	r4,zero,188
 1002e68:	01002f28 	cmpgeui	r4,zero,188
 1002e6c:	01002f28 	cmpgeui	r4,zero,188
 1002e70:	01002f28 	cmpgeui	r4,zero,188
 1002e74:	01004158 	cmpnei	r4,zero,261
 1002e78:	01002f28 	cmpgeui	r4,zero,188
 1002e7c:	01002f28 	cmpgeui	r4,zero,188
 1002e80:	01004110 	cmplti	r4,zero,260
 1002e84:	01002f28 	cmpgeui	r4,zero,188
 1002e88:	01002f28 	cmpgeui	r4,zero,188
 1002e8c:	01002f28 	cmpgeui	r4,zero,188
 1002e90:	01002f28 	cmpgeui	r4,zero,188
 1002e94:	01002f28 	cmpgeui	r4,zero,188
 1002e98:	01002f28 	cmpgeui	r4,zero,188
 1002e9c:	01002f28 	cmpgeui	r4,zero,188
 1002ea0:	01002f28 	cmpgeui	r4,zero,188
 1002ea4:	01003f54 	movui	r4,253
 1002ea8:	01002f28 	cmpgeui	r4,zero,188
 1002eac:	01002f28 	cmpgeui	r4,zero,188
 1002eb0:	010040f4 	movhi	r4,259
 1002eb4:	01002f28 	cmpgeui	r4,zero,188
 1002eb8:	01002f28 	cmpgeui	r4,zero,188
 1002ebc:	01002f28 	cmpgeui	r4,zero,188
 1002ec0:	01002f28 	cmpgeui	r4,zero,188
 1002ec4:	01002f28 	cmpgeui	r4,zero,188
 1002ec8:	01002f28 	cmpgeui	r4,zero,188
 1002ecc:	01002f28 	cmpgeui	r4,zero,188
 1002ed0:	010040e8 	cmpgeui	r4,zero,259
 1002ed4:	010040cc 	andi	r4,zero,259
 1002ed8:	010040c0 	call	10040c <__alt_mem_onchip_memory2_0+0x10040c>
 1002edc:	010040c0 	call	10040c <__alt_mem_onchip_memory2_0+0x10040c>
 1002ee0:	010040c0 	call	10040c <__alt_mem_onchip_memory2_0+0x10040c>
 1002ee4:	010040b8 	rdprs	r4,zero,258
 1002ee8:	010041ac 	andhi	r4,zero,262
 1002eec:	01002f28 	cmpgeui	r4,zero,188
 1002ef0:	01002f28 	cmpgeui	r4,zero,188
 1002ef4:	01004198 	cmpnei	r4,zero,262
 1002ef8:	01002f28 	cmpgeui	r4,zero,188
 1002efc:	01004130 	cmpltui	r4,zero,260
 1002f00:	01004114 	movui	r4,260
 1002f04:	01004168 	cmpgeui	r4,zero,261
 1002f08:	01002f28 	cmpgeui	r4,zero,188
 1002f0c:	01002f28 	cmpgeui	r4,zero,188
 1002f10:	01004160 	cmpeqi	r4,zero,261
 1002f14:	01002f28 	cmpgeui	r4,zero,188
 1002f18:	01003498 	cmpnei	r4,zero,210
 1002f1c:	01002f28 	cmpgeui	r4,zero,188
 1002f20:	01002f28 	cmpgeui	r4,zero,188
 1002f24:	01003f54 	movui	r4,253
 1002f28:	2987883a 	add	r3,r5,r6
 1002f2c:	18800003 	ldbu	r2,0(r3)
 1002f30:	1080004c 	andi	r2,r2,1
 1002f34:	1005003a 	cmpeq	r2,r2,zero
 1002f38:	10002c26 	beq	r2,zero,1002fec <__svfscanf_r+0x450>
 1002f3c:	01004074 	movhi	r4,257
 1002f40:	212c0404 	addi	r4,r4,-20464
 1002f44:	00800284 	movi	r2,10
 1002f48:	d900a015 	stw	r4,640(sp)
 1002f4c:	054000c4 	movi	r21,3
 1002f50:	d880a115 	stw	r2,644(sp)
 1002f54:	80c00117 	ldw	r3,4(r16)
 1002f58:	00c14a0e 	bge	zero,r3,1003484 <__svfscanf_r+0x8e8>
 1002f5c:	9880100c 	andi	r2,r19,64
 1002f60:	10001326 	beq	r2,zero,1002fb0 <__svfscanf_r+0x414>
 1002f64:	00800104 	movi	r2,4
 1002f68:	157f1f36 	bltu	r2,r21,1002be8 <__svfscanf_r+0x4c>
 1002f6c:	ad45883a 	add	r2,r21,r21
 1002f70:	1085883a 	add	r2,r2,r2
 1002f74:	00c04034 	movhi	r3,256
 1002f78:	18cbe204 	addi	r3,r3,12168
 1002f7c:	10c5883a 	add	r2,r2,r3
 1002f80:	11000017 	ldw	r4,0(r2)
 1002f84:	2000683a 	jmp	r4
 1002f88:	01002ff4 	movhi	r4,191
 1002f8c:	01003100 	call	100310 <__alt_mem_onchip_memory2_0+0x100310>
 1002f90:	01003174 	movhi	r4,197
 1002f94:	01003460 	cmpeqi	r4,zero,209
 1002f98:	010032ac 	andhi	r4,zero,202
 1002f9c:	b009883a 	mov	r4,r22
 1002fa0:	800b883a 	mov	r5,r16
 1002fa4:	10093400 	call	1009340 <__srefill_r>
 1002fa8:	103f511e 	bne	r2,zero,1002cf0 <__svfscanf_r+0x154>
 1002fac:	8c400044 	addi	r17,r17,1
 1002fb0:	81400017 	ldw	r5,0(r16)
 1002fb4:	90800017 	ldw	r2,0(r18)
 1002fb8:	28c00003 	ldbu	r3,0(r5)
 1002fbc:	1887883a 	add	r3,r3,r2
 1002fc0:	19000003 	ldbu	r4,0(r3)
 1002fc4:	2100020c 	andi	r4,r4,8
 1002fc8:	203fe626 	beq	r4,zero,1002f64 <__svfscanf_r+0x3c8>
 1002fcc:	80c00117 	ldw	r3,4(r16)
 1002fd0:	18ffffc4 	addi	r3,r3,-1
 1002fd4:	80c00115 	stw	r3,4(r16)
 1002fd8:	00fff00e 	bge	zero,r3,1002f9c <__svfscanf_r+0x400>
 1002fdc:	29800044 	addi	r6,r5,1
 1002fe0:	8c400044 	addi	r17,r17,1
 1002fe4:	81800015 	stw	r6,0(r16)
 1002fe8:	003ff106 	br	1002fb0 <__svfscanf_r+0x414>
 1002fec:	9cc00054 	ori	r19,r19,1
 1002ff0:	003fd206 	br	1002f3c <__svfscanf_r+0x3a0>
 1002ff4:	d8c0a317 	ldw	r3,652(sp)
 1002ff8:	1800021e 	bne	r3,zero,1003004 <__svfscanf_r+0x468>
 1002ffc:	01000044 	movi	r4,1
 1003000:	d900a315 	stw	r4,652(sp)
 1003004:	9880004c 	andi	r2,r19,1
 1003008:	1005003a 	cmpeq	r2,r2,zero
 100300c:	1003d91e 	bne	r2,zero,1003f74 <__svfscanf_r+0x13d8>
 1003010:	9d40040c 	andi	r21,r19,16
 1003014:	a839003a 	cmpeq	fp,r21,zero
 1003018:	e0042526 	beq	fp,zero,10040b0 <__svfscanf_r+0x1514>
 100301c:	d880a417 	ldw	r2,656(sp)
 1003020:	14c00017 	ldw	r19,0(r2)
 1003024:	10800104 	addi	r2,r2,4
 1003028:	d880a415 	stw	r2,656(sp)
 100302c:	d8c0a317 	ldw	r3,652(sp)
 1003030:	18041a26 	beq	r3,zero,100409c <__svfscanf_r+0x1500>
 1003034:	01004074 	movhi	r4,257
 1003038:	21139204 	addi	r4,r4,20040
 100303c:	20800017 	ldw	r2,0(r4)
 1003040:	103f2b26 	beq	r2,zero,1002cf0 <__svfscanf_r+0x154>
 1003044:	d8804404 	addi	r2,sp,272
 1003048:	0025883a 	mov	r18,zero
 100304c:	d880a615 	stw	r2,664(sp)
 1003050:	05ffffc4 	movi	r23,-1
 1003054:	80800017 	ldw	r2,0(r16)
 1003058:	80c00117 	ldw	r3,4(r16)
 100305c:	d900a617 	ldw	r4,664(sp)
 1003060:	12000003 	ldbu	r8,0(r2)
 1003064:	18ffffc4 	addi	r3,r3,-1
 1003068:	11800044 	addi	r6,r2,1
 100306c:	248f883a 	add	r7,r4,r18
 1003070:	80c00115 	stw	r3,4(r16)
 1003074:	81800015 	stw	r6,0(r16)
 1003078:	3a000005 	stb	r8,0(r7)
 100307c:	d9000204 	addi	r4,sp,8
 1003080:	000b883a 	mov	r5,zero
 1003084:	01800204 	movi	r6,8
 1003088:	1007ad40 	call	1007ad4 <memset>
 100308c:	d980a617 	ldw	r6,664(sp)
 1003090:	94800044 	addi	r18,r18,1
 1003094:	d8800204 	addi	r2,sp,8
 1003098:	b009883a 	mov	r4,r22
 100309c:	980b883a 	mov	r5,r19
 10030a0:	900f883a 	mov	r7,r18
 10030a4:	d8800015 	stw	r2,0(sp)
 10030a8:	10077700 	call	1007770 <_mbrtowc_r>
 10030ac:	1007883a 	mov	r3,r2
 10030b0:	15ff0f26 	beq	r2,r23,1002cf0 <__svfscanf_r+0x154>
 10030b4:	1003f11e 	bne	r2,zero,100407c <__svfscanf_r+0x14e0>
 10030b8:	a800011e 	bne	r21,zero,10030c0 <__svfscanf_r+0x524>
 10030bc:	98000015 	stw	zero,0(r19)
 10030c0:	d8c0a317 	ldw	r3,652(sp)
 10030c4:	8ca3883a 	add	r17,r17,r18
 10030c8:	18ffffc4 	addi	r3,r3,-1
 10030cc:	d8c0a315 	stw	r3,652(sp)
 10030d0:	e0000126 	beq	fp,zero,10030d8 <__svfscanf_r+0x53c>
 10030d4:	9cc00104 	addi	r19,r19,4
 10030d8:	0025883a 	mov	r18,zero
 10030dc:	80c00117 	ldw	r3,4(r16)
 10030e0:	00c3e90e 	bge	zero,r3,1004088 <__svfscanf_r+0x14ec>
 10030e4:	d900a317 	ldw	r4,652(sp)
 10030e8:	2003ec26 	beq	r4,zero,100409c <__svfscanf_r+0x1500>
 10030ec:	00c04074 	movhi	r3,257
 10030f0:	18d39204 	addi	r3,r3,20040
 10030f4:	18800017 	ldw	r2,0(r3)
 10030f8:	90bfd61e 	bne	r18,r2,1003054 <__svfscanf_r+0x4b8>
 10030fc:	003efc06 	br	1002cf0 <__svfscanf_r+0x154>
 1003100:	d880a317 	ldw	r2,652(sp)
 1003104:	1000021e 	bne	r2,zero,1003110 <__svfscanf_r+0x574>
 1003108:	00ffffc4 	movi	r3,-1
 100310c:	d8c0a315 	stw	r3,652(sp)
 1003110:	9880040c 	andi	r2,r19,16
 1003114:	10036526 	beq	r2,zero,1003eac <__svfscanf_r+0x1310>
 1003118:	0027883a 	mov	r19,zero
 100311c:	dd400404 	addi	r21,sp,16
 1003120:	81000017 	ldw	r4,0(r16)
 1003124:	20800003 	ldbu	r2,0(r4)
 1003128:	a885883a 	add	r2,r21,r2
 100312c:	10c00007 	ldb	r3,0(r2)
 1003130:	1803be26 	beq	r3,zero,100402c <__svfscanf_r+0x1490>
 1003134:	80c00117 	ldw	r3,4(r16)
 1003138:	21800044 	addi	r6,r4,1
 100313c:	d900a317 	ldw	r4,652(sp)
 1003140:	18ffffc4 	addi	r3,r3,-1
 1003144:	9cc00044 	addi	r19,r19,1
 1003148:	81800015 	stw	r6,0(r16)
 100314c:	80c00115 	stw	r3,4(r16)
 1003150:	24c3b626 	beq	r4,r19,100402c <__svfscanf_r+0x1490>
 1003154:	00fff216 	blt	zero,r3,1003120 <__svfscanf_r+0x584>
 1003158:	b009883a 	mov	r4,r22
 100315c:	800b883a 	mov	r5,r16
 1003160:	10093400 	call	1009340 <__srefill_r>
 1003164:	103fee26 	beq	r2,zero,1003120 <__svfscanf_r+0x584>
 1003168:	983ee126 	beq	r19,zero,1002cf0 <__svfscanf_r+0x154>
 100316c:	8ce3883a 	add	r17,r17,r19
 1003170:	003e9d06 	br	1002be8 <__svfscanf_r+0x4c>
 1003174:	d900a317 	ldw	r4,652(sp)
 1003178:	2000021e 	bne	r4,zero,1003184 <__svfscanf_r+0x5e8>
 100317c:	00bfffc4 	movi	r2,-1
 1003180:	d880a315 	stw	r2,652(sp)
 1003184:	9880004c 	andi	r2,r19,1
 1003188:	1005003a 	cmpeq	r2,r2,zero
 100318c:	1001f41e 	bne	r2,zero,1003960 <__svfscanf_r+0xdc4>
 1003190:	9dc0040c 	andi	r23,r19,16
 1003194:	b807003a 	cmpeq	r3,r23,zero
 1003198:	d8c0a515 	stw	r3,660(sp)
 100319c:	1803b21e 	bne	r3,zero,1004068 <__svfscanf_r+0x14cc>
 10031a0:	dd400104 	addi	r21,sp,4
 10031a4:	0027883a 	mov	r19,zero
 10031a8:	073fffc4 	movi	fp,-1
 10031ac:	81400017 	ldw	r5,0(r16)
 10031b0:	90800017 	ldw	r2,0(r18)
 10031b4:	29c00003 	ldbu	r7,0(r5)
 10031b8:	38c03fcc 	andi	r3,r7,255
 10031bc:	1887883a 	add	r3,r3,r2
 10031c0:	19000003 	ldbu	r4,0(r3)
 10031c4:	2100020c 	andi	r4,r4,8
 10031c8:	2000321e 	bne	r4,zero,1003294 <__svfscanf_r+0x6f8>
 10031cc:	d8c0a317 	ldw	r3,652(sp)
 10031d0:	18003026 	beq	r3,zero,1003294 <__svfscanf_r+0x6f8>
 10031d4:	00804074 	movhi	r2,257
 10031d8:	10939204 	addi	r2,r2,20040
 10031dc:	10c00017 	ldw	r3,0(r2)
 10031e0:	98fec326 	beq	r19,r3,1002cf0 <__svfscanf_r+0x154>
 10031e4:	d8c04404 	addi	r3,sp,272
 10031e8:	80800117 	ldw	r2,4(r16)
 10031ec:	d8c0a615 	stw	r3,664(sp)
 10031f0:	d900a617 	ldw	r4,664(sp)
 10031f4:	10ffffc4 	addi	r3,r2,-1
 10031f8:	29800044 	addi	r6,r5,1
 10031fc:	80c00115 	stw	r3,4(r16)
 1003200:	24c5883a 	add	r2,r4,r19
 1003204:	81800015 	stw	r6,0(r16)
 1003208:	d9000204 	addi	r4,sp,8
 100320c:	000b883a 	mov	r5,zero
 1003210:	01800204 	movi	r6,8
 1003214:	11c00005 	stb	r7,0(r2)
 1003218:	1007ad40 	call	1007ad4 <memset>
 100321c:	d980a617 	ldw	r6,664(sp)
 1003220:	9cc00044 	addi	r19,r19,1
 1003224:	d8800204 	addi	r2,sp,8
 1003228:	b009883a 	mov	r4,r22
 100322c:	a80b883a 	mov	r5,r21
 1003230:	980f883a 	mov	r7,r19
 1003234:	d8800015 	stw	r2,0(sp)
 1003238:	10077700 	call	1007770 <_mbrtowc_r>
 100323c:	1007883a 	mov	r3,r2
 1003240:	173eab26 	beq	r2,fp,1002cf0 <__svfscanf_r+0x154>
 1003244:	1003851e 	bne	r2,zero,100405c <__svfscanf_r+0x14c0>
 1003248:	a8000015 	stw	zero,0(r21)
 100324c:	a9000017 	ldw	r4,0(r21)
 1003250:	1006dac0 	call	1006dac <iswspace>
 1003254:	1003781e 	bne	r2,zero,1004038 <__svfscanf_r+0x149c>
 1003258:	d900a317 	ldw	r4,652(sp)
 100325c:	d880a517 	ldw	r2,660(sp)
 1003260:	8ce3883a 	add	r17,r17,r19
 1003264:	213fffc4 	addi	r4,r4,-1
 1003268:	d900a315 	stw	r4,652(sp)
 100326c:	10000126 	beq	r2,zero,1003274 <__svfscanf_r+0x6d8>
 1003270:	ad400104 	addi	r21,r21,4
 1003274:	0027883a 	mov	r19,zero
 1003278:	80c00117 	ldw	r3,4(r16)
 100327c:	00ffcb16 	blt	zero,r3,10031ac <__svfscanf_r+0x610>
 1003280:	b009883a 	mov	r4,r22
 1003284:	800b883a 	mov	r5,r16
 1003288:	10093400 	call	1009340 <__srefill_r>
 100328c:	103fc726 	beq	r2,zero,10031ac <__svfscanf_r+0x610>
 1003290:	983e971e 	bne	r19,zero,1002cf0 <__svfscanf_r+0x154>
 1003294:	b83e541e 	bne	r23,zero,1002be8 <__svfscanf_r+0x4c>
 1003298:	d900a217 	ldw	r4,648(sp)
 100329c:	a8000015 	stw	zero,0(r21)
 10032a0:	21000044 	addi	r4,r4,1
 10032a4:	d900a215 	stw	r4,648(sp)
 10032a8:	003e4f06 	br	1002be8 <__svfscanf_r+0x4c>
 10032ac:	d900a317 	ldw	r4,652(sp)
 10032b0:	00805704 	movi	r2,348
 10032b4:	20ffffc4 	addi	r3,r4,-1
 10032b8:	10c1ed2e 	bgeu	r2,r3,1003a70 <__svfscanf_r+0xed4>
 10032bc:	00805744 	movi	r2,349
 10032c0:	21bfa8c4 	addi	r6,r4,-349
 10032c4:	9d41e014 	ori	r21,r19,1920
 10032c8:	d880a315 	stw	r2,652(sp)
 10032cc:	d8c04404 	addi	r3,sp,272
 10032d0:	d8c0a615 	stw	r3,664(sp)
 10032d4:	182f883a 	mov	r23,r3
 10032d8:	d8009f15 	stw	zero,636(sp)
 10032dc:	d8009e15 	stw	zero,632(sp)
 10032e0:	d8009d15 	stw	zero,628(sp)
 10032e4:	d8009c15 	stw	zero,624(sp)
 10032e8:	0039883a 	mov	fp,zero
 10032ec:	0025883a 	mov	r18,zero
 10032f0:	80800017 	ldw	r2,0(r16)
 10032f4:	11400003 	ldbu	r5,0(r2)
 10032f8:	00801384 	movi	r2,78
 10032fc:	28fff544 	addi	r3,r5,-43
 1003300:	18c03fcc 	andi	r3,r3,255
 1003304:	10c07d36 	bltu	r2,r3,10034fc <__svfscanf_r+0x960>
 1003308:	18c5883a 	add	r2,r3,r3
 100330c:	1085883a 	add	r2,r2,r2
 1003310:	00c04034 	movhi	r3,256
 1003314:	18ccc904 	addi	r3,r3,13092
 1003318:	10c5883a 	add	r2,r2,r3
 100331c:	11000017 	ldw	r4,0(r2)
 1003320:	2000683a 	jmp	r4
 1003324:	010034b4 	movhi	r4,210
 1003328:	010034fc 	xorhi	r4,zero,211
 100332c:	010034b4 	movhi	r4,210
 1003330:	01003648 	cmpgei	r4,zero,217
 1003334:	010034fc 	xorhi	r4,zero,211
 1003338:	01003680 	call	100368 <__alt_mem_onchip_memory2_0+0x100368>
 100333c:	010036b4 	movhi	r4,218
 1003340:	010036b4 	movhi	r4,218
 1003344:	010036b4 	movhi	r4,218
 1003348:	010036b4 	movhi	r4,218
 100334c:	010036b4 	movhi	r4,218
 1003350:	010036b4 	movhi	r4,218
 1003354:	010036b4 	movhi	r4,218
 1003358:	010036b4 	movhi	r4,218
 100335c:	010036b4 	movhi	r4,218
 1003360:	010034fc 	xorhi	r4,zero,211
 1003364:	010034fc 	xorhi	r4,zero,211
 1003368:	010034fc 	xorhi	r4,zero,211
 100336c:	010034fc 	xorhi	r4,zero,211
 1003370:	010034fc 	xorhi	r4,zero,211
 1003374:	010034fc 	xorhi	r4,zero,211
 1003378:	010034fc 	xorhi	r4,zero,211
 100337c:	010036d4 	movui	r4,219
 1003380:	010034fc 	xorhi	r4,zero,211
 1003384:	010034fc 	xorhi	r4,zero,211
 1003388:	010034fc 	xorhi	r4,zero,211
 100338c:	010036e4 	muli	r4,zero,219
 1003390:	01003780 	call	100378 <__alt_mem_onchip_memory2_0+0x100378>
 1003394:	010034fc 	xorhi	r4,zero,211
 1003398:	010034fc 	xorhi	r4,zero,211
 100339c:	0100379c 	xori	r4,zero,222
 10033a0:	010034fc 	xorhi	r4,zero,211
 10033a4:	010034fc 	xorhi	r4,zero,211
 10033a8:	010034fc 	xorhi	r4,zero,211
 10033ac:	010034fc 	xorhi	r4,zero,211
 10033b0:	010037c8 	cmpgei	r4,zero,223
 10033b4:	010034fc 	xorhi	r4,zero,211
 10033b8:	010034fc 	xorhi	r4,zero,211
 10033bc:	010034fc 	xorhi	r4,zero,211
 10033c0:	010034fc 	xorhi	r4,zero,211
 10033c4:	010034fc 	xorhi	r4,zero,211
 10033c8:	0100381c 	xori	r4,zero,224
 10033cc:	010034fc 	xorhi	r4,zero,211
 10033d0:	010034fc 	xorhi	r4,zero,211
 10033d4:	010034fc 	xorhi	r4,zero,211
 10033d8:	010034fc 	xorhi	r4,zero,211
 10033dc:	0100392c 	andhi	r4,zero,228
 10033e0:	010034fc 	xorhi	r4,zero,211
 10033e4:	010034fc 	xorhi	r4,zero,211
 10033e8:	010034fc 	xorhi	r4,zero,211
 10033ec:	010034fc 	xorhi	r4,zero,211
 10033f0:	010034fc 	xorhi	r4,zero,211
 10033f4:	010034fc 	xorhi	r4,zero,211
 10033f8:	010034fc 	xorhi	r4,zero,211
 10033fc:	010036d4 	movui	r4,219
 1003400:	010034fc 	xorhi	r4,zero,211
 1003404:	010034fc 	xorhi	r4,zero,211
 1003408:	010034fc 	xorhi	r4,zero,211
 100340c:	010036e4 	muli	r4,zero,219
 1003410:	01003780 	call	100378 <__alt_mem_onchip_memory2_0+0x100378>
 1003414:	010034fc 	xorhi	r4,zero,211
 1003418:	010034fc 	xorhi	r4,zero,211
 100341c:	0100379c 	xori	r4,zero,222
 1003420:	010034fc 	xorhi	r4,zero,211
 1003424:	010034fc 	xorhi	r4,zero,211
 1003428:	010034fc 	xorhi	r4,zero,211
 100342c:	010034fc 	xorhi	r4,zero,211
 1003430:	010037c8 	cmpgei	r4,zero,223
 1003434:	010034fc 	xorhi	r4,zero,211
 1003438:	010034fc 	xorhi	r4,zero,211
 100343c:	010034fc 	xorhi	r4,zero,211
 1003440:	010034fc 	xorhi	r4,zero,211
 1003444:	010034fc 	xorhi	r4,zero,211
 1003448:	0100381c 	xori	r4,zero,224
 100344c:	010034fc 	xorhi	r4,zero,211
 1003450:	010034fc 	xorhi	r4,zero,211
 1003454:	010034fc 	xorhi	r4,zero,211
 1003458:	010034fc 	xorhi	r4,zero,211
 100345c:	0100392c 	andhi	r4,zero,228
 1003460:	d900a317 	ldw	r4,652(sp)
 1003464:	00805704 	movi	r2,348
 1003468:	20ffffc4 	addi	r3,r4,-1
 100346c:	10c18c2e 	bgeu	r2,r3,1003aa0 <__svfscanf_r+0xf04>
 1003470:	00805744 	movi	r2,349
 1003474:	257fa8c4 	addi	r21,r4,-349
 1003478:	9c836014 	ori	r18,r19,3456
 100347c:	d880a315 	stw	r2,652(sp)
 1003480:	0001a106 	br	1003b08 <__svfscanf_r+0xf6c>
 1003484:	b009883a 	mov	r4,r22
 1003488:	800b883a 	mov	r5,r16
 100348c:	10093400 	call	1009340 <__srefill_r>
 1003490:	103eb226 	beq	r2,zero,1002f5c <__svfscanf_r+0x3c0>
 1003494:	003e1606 	br	1002cf0 <__svfscanf_r+0x154>
 1003498:	01000284 	movi	r4,10
 100349c:	00804074 	movhi	r2,257
 10034a0:	10ad6404 	addi	r2,r2,-19056
 10034a4:	054000c4 	movi	r21,3
 10034a8:	d900a115 	stw	r4,644(sp)
 10034ac:	d880a015 	stw	r2,640(sp)
 10034b0:	003ea806 	br	1002f54 <__svfscanf_r+0x3b8>
 10034b4:	a880200c 	andi	r2,r21,128
 10034b8:	10001026 	beq	r2,zero,10034fc <__svfscanf_r+0x960>
 10034bc:	00bfdfc4 	movi	r2,-129
 10034c0:	a8aa703a 	and	r21,r21,r2
 10034c4:	b9400005 	stb	r5,0(r23)
 10034c8:	bdc00044 	addi	r23,r23,1
 10034cc:	80c00117 	ldw	r3,4(r16)
 10034d0:	8c400044 	addi	r17,r17,1
 10034d4:	18bfffc4 	addi	r2,r3,-1
 10034d8:	80800115 	stw	r2,4(r16)
 10034dc:	0080610e 	bge	zero,r2,1003664 <__svfscanf_r+0xac8>
 10034e0:	80800017 	ldw	r2,0(r16)
 10034e4:	10800044 	addi	r2,r2,1
 10034e8:	80800015 	stw	r2,0(r16)
 10034ec:	d880a317 	ldw	r2,652(sp)
 10034f0:	10bfffc4 	addi	r2,r2,-1
 10034f4:	d880a315 	stw	r2,652(sp)
 10034f8:	103f7d1e 	bne	r2,zero,10032f0 <__svfscanf_r+0x754>
 10034fc:	d8c09e17 	ldw	r3,632(sp)
 1003500:	18000226 	beq	r3,zero,100350c <__svfscanf_r+0x970>
 1003504:	00bfbfc4 	movi	r2,-257
 1003508:	a8aa703a 	and	r21,r21,r2
 100350c:	90ffffc4 	addi	r3,r18,-1
 1003510:	00800044 	movi	r2,1
 1003514:	10c0cd2e 	bgeu	r2,r3,100384c <__svfscanf_r+0xcb0>
 1003518:	e1003fcc 	andi	r4,fp,255
 100351c:	2100201c 	xori	r4,r4,128
 1003520:	213fe004 	addi	r4,r4,-128
 1003524:	20ffffc4 	addi	r3,r4,-1
 1003528:	00800184 	movi	r2,6
 100352c:	10c01736 	bltu	r2,r3,100358c <__svfscanf_r+0x9f0>
 1003530:	00c00084 	movi	r3,2
 1003534:	1900880e 	bge	r3,r4,1003758 <__svfscanf_r+0xbbc>
 1003538:	008000c4 	movi	r2,3
 100353c:	1100130e 	bge	r2,r4,100358c <__svfscanf_r+0x9f0>
 1003540:	e4ffffc4 	addi	r19,fp,-1
 1003544:	b825883a 	mov	r18,r23
 1003548:	94bfffc4 	addi	r18,r18,-1
 100354c:	91400007 	ldb	r5,0(r18)
 1003550:	b009883a 	mov	r4,r22
 1003554:	800d883a 	mov	r6,r16
 1003558:	100bbb00 	call	100bbb0 <_ungetc_r>
 100355c:	9cffffc4 	addi	r19,r19,-1
 1003560:	98c03fcc 	andi	r3,r19,255
 1003564:	18c0201c 	xori	r3,r3,128
 1003568:	18ffe004 	addi	r3,r3,-128
 100356c:	00800084 	movi	r2,2
 1003570:	18bff51e 	bne	r3,r2,1003548 <__svfscanf_r+0x9ac>
 1003574:	e0bfff04 	addi	r2,fp,-4
 1003578:	10803fcc 	andi	r2,r2,255
 100357c:	b887c83a 	sub	r3,r23,r2
 1003580:	8885c83a 	sub	r2,r17,r2
 1003584:	147fffc4 	addi	r17,r2,-1
 1003588:	1dffffc4 	addi	r23,r3,-1
 100358c:	a880400c 	andi	r2,r21,256
 1003590:	10001226 	beq	r2,zero,10035dc <__svfscanf_r+0xa40>
 1003594:	a881000c 	andi	r2,r21,1024
 1003598:	1000651e 	bne	r2,zero,1003730 <__svfscanf_r+0xb94>
 100359c:	bdffffc4 	addi	r23,r23,-1
 10035a0:	b9400007 	ldb	r5,0(r23)
 10035a4:	00801944 	movi	r2,101
 10035a8:	8c7fffc4 	addi	r17,r17,-1
 10035ac:	28800826 	beq	r5,r2,10035d0 <__svfscanf_r+0xa34>
 10035b0:	00801144 	movi	r2,69
 10035b4:	28800626 	beq	r5,r2,10035d0 <__svfscanf_r+0xa34>
 10035b8:	bdffffc4 	addi	r23,r23,-1
 10035bc:	b009883a 	mov	r4,r22
 10035c0:	800d883a 	mov	r6,r16
 10035c4:	100bbb00 	call	100bbb0 <_ungetc_r>
 10035c8:	b9400007 	ldb	r5,0(r23)
 10035cc:	8c7fffc4 	addi	r17,r17,-1
 10035d0:	b009883a 	mov	r4,r22
 10035d4:	800d883a 	mov	r6,r16
 10035d8:	100bbb00 	call	100bbb0 <_ungetc_r>
 10035dc:	a880040c 	andi	r2,r21,16
 10035e0:	103d811e 	bne	r2,zero,1002be8 <__svfscanf_r+0x4c>
 10035e4:	a8c1800c 	andi	r3,r21,1536
 10035e8:	00810004 	movi	r2,1024
 10035ec:	b8000005 	stb	zero,0(r23)
 10035f0:	1880bb26 	beq	r3,r2,10038e0 <__svfscanf_r+0xd44>
 10035f4:	d8809d17 	ldw	r2,628(sp)
 10035f8:	1000a61e 	bne	r2,zero,1003894 <__svfscanf_r+0xcf8>
 10035fc:	d940a617 	ldw	r5,664(sp)
 1003600:	b009883a 	mov	r4,r22
 1003604:	000d883a 	mov	r6,zero
 1003608:	10099ec0 	call	10099ec <_strtod_r>
 100360c:	a900004c 	andi	r4,r21,1
 1003610:	2009003a 	cmpeq	r4,r4,zero
 1003614:	1025883a 	mov	r18,r2
 1003618:	1827883a 	mov	r19,r3
 100361c:	2000951e 	bne	r4,zero,1003874 <__svfscanf_r+0xcd8>
 1003620:	d8c0a417 	ldw	r3,656(sp)
 1003624:	18800017 	ldw	r2,0(r3)
 1003628:	1d400104 	addi	r21,r3,4
 100362c:	14c00115 	stw	r19,4(r2)
 1003630:	14800015 	stw	r18,0(r2)
 1003634:	d8c0a217 	ldw	r3,648(sp)
 1003638:	dd40a415 	stw	r21,656(sp)
 100363c:	18c00044 	addi	r3,r3,1
 1003640:	d8c0a215 	stw	r3,648(sp)
 1003644:	003d6806 	br	1002be8 <__svfscanf_r+0x4c>
 1003648:	a880800c 	andi	r2,r21,512
 100364c:	103fab26 	beq	r2,zero,10034fc <__svfscanf_r+0x960>
 1003650:	d9009e17 	ldw	r4,632(sp)
 1003654:	00bf5fc4 	movi	r2,-641
 1003658:	a8aa703a 	and	r21,r21,r2
 100365c:	d9009f15 	stw	r4,636(sp)
 1003660:	003f9806 	br	10034c4 <__svfscanf_r+0x928>
 1003664:	b009883a 	mov	r4,r22
 1003668:	800b883a 	mov	r5,r16
 100366c:	d980a715 	stw	r6,668(sp)
 1003670:	10093400 	call	1009340 <__srefill_r>
 1003674:	d980a717 	ldw	r6,668(sp)
 1003678:	103f9c26 	beq	r2,zero,10034ec <__svfscanf_r+0x950>
 100367c:	003f9f06 	br	10034fc <__svfscanf_r+0x960>
 1003680:	a880400c 	andi	r2,r21,256
 1003684:	10000b26 	beq	r2,zero,10036b4 <__svfscanf_r+0xb18>
 1003688:	00bfdfc4 	movi	r2,-129
 100368c:	a8aa703a 	and	r21,r21,r2
 1003690:	d8809e17 	ldw	r2,632(sp)
 1003694:	10800044 	addi	r2,r2,1
 1003698:	d8809e15 	stw	r2,632(sp)
 100369c:	303f8b26 	beq	r6,zero,10034cc <__svfscanf_r+0x930>
 10036a0:	d8c0a317 	ldw	r3,652(sp)
 10036a4:	31bfffc4 	addi	r6,r6,-1
 10036a8:	18c00044 	addi	r3,r3,1
 10036ac:	d8c0a315 	stw	r3,652(sp)
 10036b0:	003f8606 	br	10034cc <__svfscanf_r+0x930>
 10036b4:	e0803fcc 	andi	r2,fp,255
 10036b8:	1080201c 	xori	r2,r2,128
 10036bc:	10bfe004 	addi	r2,r2,-128
 10036c0:	9085883a 	add	r2,r18,r2
 10036c4:	103f8d1e 	bne	r2,zero,10034fc <__svfscanf_r+0x960>
 10036c8:	00bf9fc4 	movi	r2,-385
 10036cc:	a8aa703a 	and	r21,r21,r2
 10036d0:	003f7c06 	br	10034c4 <__svfscanf_r+0x928>
 10036d4:	00800044 	movi	r2,1
 10036d8:	90bf881e 	bne	r18,r2,10034fc <__svfscanf_r+0x960>
 10036dc:	04800084 	movi	r18,2
 10036e0:	003f7806 	br	10034c4 <__svfscanf_r+0x928>
 10036e4:	a8c1400c 	andi	r3,r21,1280
 10036e8:	00810004 	movi	r2,1024
 10036ec:	18800426 	beq	r3,r2,1003700 <__svfscanf_r+0xb64>
 10036f0:	a884703a 	and	r2,r21,r2
 10036f4:	103f8126 	beq	r2,zero,10034fc <__svfscanf_r+0x960>
 10036f8:	d8809e17 	ldw	r2,632(sp)
 10036fc:	103f8326 	beq	r2,zero,100350c <__svfscanf_r+0x970>
 1003700:	a880800c 	andi	r2,r21,512
 1003704:	1000051e 	bne	r2,zero,100371c <__svfscanf_r+0xb80>
 1003708:	d8c09e17 	ldw	r3,632(sp)
 100370c:	d9009f17 	ldw	r4,636(sp)
 1003710:	ddc09c15 	stw	r23,624(sp)
 1003714:	1907c83a 	sub	r3,r3,r4
 1003718:	d8c09d15 	stw	r3,628(sp)
 100371c:	00be7fc4 	movi	r2,-1537
 1003720:	a884703a 	and	r2,r21,r2
 1003724:	15406014 	ori	r21,r2,384
 1003728:	d8009e15 	stw	zero,632(sp)
 100372c:	003f6506 	br	10034c4 <__svfscanf_r+0x928>
 1003730:	d900a617 	ldw	r4,664(sp)
 1003734:	25fd4e2e 	bgeu	r4,r23,1002c70 <__svfscanf_r+0xd4>
 1003738:	bdffffc4 	addi	r23,r23,-1
 100373c:	b9400007 	ldb	r5,0(r23)
 1003740:	b009883a 	mov	r4,r22
 1003744:	800d883a 	mov	r6,r16
 1003748:	100bbb00 	call	100bbb0 <_ungetc_r>
 100374c:	d880a617 	ldw	r2,664(sp)
 1003750:	15fff936 	bltu	r2,r23,1003738 <__svfscanf_r+0xb9c>
 1003754:	003d4606 	br	1002c70 <__svfscanf_r+0xd4>
 1003758:	d900a617 	ldw	r4,664(sp)
 100375c:	25fd442e 	bgeu	r4,r23,1002c70 <__svfscanf_r+0xd4>
 1003760:	bdffffc4 	addi	r23,r23,-1
 1003764:	b9400007 	ldb	r5,0(r23)
 1003768:	b009883a 	mov	r4,r22
 100376c:	800d883a 	mov	r6,r16
 1003770:	100bbb00 	call	100bbb0 <_ungetc_r>
 1003774:	d8c0a617 	ldw	r3,664(sp)
 1003778:	1dfff936 	bltu	r3,r23,1003760 <__svfscanf_r+0xbc4>
 100377c:	003d3c06 	br	1002c70 <__svfscanf_r+0xd4>
 1003780:	e0c03fcc 	andi	r3,fp,255
 1003784:	18c0201c 	xori	r3,r3,128
 1003788:	18ffe004 	addi	r3,r3,-128
 100378c:	00800084 	movi	r2,2
 1003790:	18bf5a1e 	bne	r3,r2,10034fc <__svfscanf_r+0x960>
 1003794:	070000c4 	movi	fp,3
 1003798:	003f4a06 	br	10034c4 <__svfscanf_r+0x928>
 100379c:	e0c03fcc 	andi	r3,fp,255
 10037a0:	18c0201c 	xori	r3,r3,128
 10037a4:	18ffe004 	addi	r3,r3,-128
 10037a8:	1800231e 	bne	r3,zero,1003838 <__svfscanf_r+0xc9c>
 10037ac:	a8c1c00c 	andi	r3,r21,1792
 10037b0:	0081c004 	movi	r2,1792
 10037b4:	18bf511e 	bne	r3,r2,10034fc <__svfscanf_r+0x960>
 10037b8:	00be1fc4 	movi	r2,-1921
 10037bc:	a8aa703a 	and	r21,r21,r2
 10037c0:	07000044 	movi	fp,1
 10037c4:	003f3f06 	br	10034c4 <__svfscanf_r+0x928>
 10037c8:	9000101e 	bne	r18,zero,100380c <__svfscanf_r+0xc70>
 10037cc:	a8c1c00c 	andi	r3,r21,1792
 10037d0:	0081c004 	movi	r2,1792
 10037d4:	18800926 	beq	r3,r2,10037fc <__svfscanf_r+0xc60>
 10037d8:	e0c03fcc 	andi	r3,fp,255
 10037dc:	18c0201c 	xori	r3,r3,128
 10037e0:	18ffe004 	addi	r3,r3,-128
 10037e4:	00800044 	movi	r2,1
 10037e8:	18800226 	beq	r3,r2,10037f4 <__svfscanf_r+0xc58>
 10037ec:	00800104 	movi	r2,4
 10037f0:	18bf421e 	bne	r3,r2,10034fc <__svfscanf_r+0x960>
 10037f4:	e7000044 	addi	fp,fp,1
 10037f8:	003f3206 	br	10034c4 <__svfscanf_r+0x928>
 10037fc:	00be1fc4 	movi	r2,-1921
 1003800:	a8aa703a 	and	r21,r21,r2
 1003804:	04800044 	movi	r18,1
 1003808:	003f2e06 	br	10034c4 <__svfscanf_r+0x928>
 100380c:	00800084 	movi	r2,2
 1003810:	90bff11e 	bne	r18,r2,10037d8 <__svfscanf_r+0xc3c>
 1003814:	048000c4 	movi	r18,3
 1003818:	003f2a06 	br	10034c4 <__svfscanf_r+0x928>
 100381c:	e0c03fcc 	andi	r3,fp,255
 1003820:	18c0201c 	xori	r3,r3,128
 1003824:	18ffe004 	addi	r3,r3,-128
 1003828:	00800184 	movi	r2,6
 100382c:	18bf331e 	bne	r3,r2,10034fc <__svfscanf_r+0x960>
 1003830:	070001c4 	movi	fp,7
 1003834:	003f2306 	br	10034c4 <__svfscanf_r+0x928>
 1003838:	008000c4 	movi	r2,3
 100383c:	18bfed26 	beq	r3,r2,10037f4 <__svfscanf_r+0xc58>
 1003840:	00800144 	movi	r2,5
 1003844:	18bfeb26 	beq	r3,r2,10037f4 <__svfscanf_r+0xc58>
 1003848:	003f2c06 	br	10034fc <__svfscanf_r+0x960>
 100384c:	d900a617 	ldw	r4,664(sp)
 1003850:	25fd072e 	bgeu	r4,r23,1002c70 <__svfscanf_r+0xd4>
 1003854:	bdffffc4 	addi	r23,r23,-1
 1003858:	b9400007 	ldb	r5,0(r23)
 100385c:	b009883a 	mov	r4,r22
 1003860:	800d883a 	mov	r6,r16
 1003864:	100bbb00 	call	100bbb0 <_ungetc_r>
 1003868:	d880a617 	ldw	r2,664(sp)
 100386c:	15fff936 	bltu	r2,r23,1003854 <__svfscanf_r+0xcb8>
 1003870:	003cff06 	br	1002c70 <__svfscanf_r+0xd4>
 1003874:	a880008c 	andi	r2,r21,2
 1003878:	10002026 	beq	r2,zero,10038fc <__svfscanf_r+0xd60>
 100387c:	d900a417 	ldw	r4,656(sp)
 1003880:	20800017 	ldw	r2,0(r4)
 1003884:	25400104 	addi	r21,r4,4
 1003888:	10c00115 	stw	r3,4(r2)
 100388c:	14800015 	stw	r18,0(r2)
 1003890:	003f6806 	br	1003634 <__svfscanf_r+0xa98>
 1003894:	d8c09c17 	ldw	r3,624(sp)
 1003898:	b009883a 	mov	r4,r22
 100389c:	000d883a 	mov	r6,zero
 10038a0:	19400044 	addi	r5,r3,1
 10038a4:	01c00284 	movi	r7,10
 10038a8:	100b0100 	call	100b010 <_strtol_r>
 10038ac:	d9009d17 	ldw	r4,628(sp)
 10038b0:	110dc83a 	sub	r6,r2,r4
 10038b4:	d8c0a617 	ldw	r3,664(sp)
 10038b8:	d9009c17 	ldw	r4,624(sp)
 10038bc:	188054c4 	addi	r2,r3,339
 10038c0:	20800236 	bltu	r4,r2,10038cc <__svfscanf_r+0xd30>
 10038c4:	18805484 	addi	r2,r3,338
 10038c8:	d8809c15 	stw	r2,624(sp)
 10038cc:	d9009c17 	ldw	r4,624(sp)
 10038d0:	01404074 	movhi	r5,257
 10038d4:	294b6e04 	addi	r5,r5,11704
 10038d8:	10096c80 	call	10096c8 <sprintf>
 10038dc:	003f4706 	br	10035fc <__svfscanf_r+0xa60>
 10038e0:	d8c09e17 	ldw	r3,632(sp)
 10038e4:	d9009f17 	ldw	r4,636(sp)
 10038e8:	1905c83a 	sub	r2,r3,r4
 10038ec:	103f4326 	beq	r2,zero,10035fc <__svfscanf_r+0xa60>
 10038f0:	008dc83a 	sub	r6,zero,r2
 10038f4:	ddc09c15 	stw	r23,624(sp)
 10038f8:	003fee06 	br	10038b4 <__svfscanf_r+0xd18>
 10038fc:	d880a417 	ldw	r2,656(sp)
 1003900:	9009883a 	mov	r4,r18
 1003904:	180b883a 	mov	r5,r3
 1003908:	15c00017 	ldw	r23,0(r2)
 100390c:	15400104 	addi	r21,r2,4
 1003910:	10095600 	call	1009560 <__isnand>
 1003914:	10021c1e 	bne	r2,zero,1004188 <__svfscanf_r+0x15ec>
 1003918:	980b883a 	mov	r5,r19
 100391c:	9009883a 	mov	r4,r18
 1003920:	100ed200 	call	100ed20 <__truncdfsf2>
 1003924:	b8800015 	stw	r2,0(r23)
 1003928:	003f4206 	br	1003634 <__svfscanf_r+0xa98>
 100392c:	e0c03fcc 	andi	r3,fp,255
 1003930:	18c0201c 	xori	r3,r3,128
 1003934:	18ffe004 	addi	r3,r3,-128
 1003938:	008001c4 	movi	r2,7
 100393c:	18beef1e 	bne	r3,r2,10034fc <__svfscanf_r+0x960>
 1003940:	07000204 	movi	fp,8
 1003944:	003edf06 	br	10034c4 <__svfscanf_r+0x928>
 1003948:	d900a317 	ldw	r4,652(sp)
 100394c:	208002a4 	muli	r2,r4,10
 1003950:	1145883a 	add	r2,r2,r5
 1003954:	10bff404 	addi	r2,r2,-48
 1003958:	d880a315 	stw	r2,652(sp)
 100395c:	003ceb06 	br	1002d0c <__svfscanf_r+0x170>
 1003960:	9880040c 	andi	r2,r19,16
 1003964:	10001426 	beq	r2,zero,10039b8 <__svfscanf_r+0xe1c>
 1003968:	0027883a 	mov	r19,zero
 100396c:	00000906 	br	1003994 <__svfscanf_r+0xdf8>
 1003970:	80c00117 	ldw	r3,4(r16)
 1003974:	d880a317 	ldw	r2,652(sp)
 1003978:	29800044 	addi	r6,r5,1
 100397c:	18ffffc4 	addi	r3,r3,-1
 1003980:	9cc00044 	addi	r19,r19,1
 1003984:	81800015 	stw	r6,0(r16)
 1003988:	80c00115 	stw	r3,4(r16)
 100398c:	14fdf726 	beq	r2,r19,100316c <__svfscanf_r+0x5d0>
 1003990:	00c02c0e 	bge	zero,r3,1003a44 <__svfscanf_r+0xea8>
 1003994:	81400017 	ldw	r5,0(r16)
 1003998:	90800017 	ldw	r2,0(r18)
 100399c:	28c00003 	ldbu	r3,0(r5)
 10039a0:	1887883a 	add	r3,r3,r2
 10039a4:	19000003 	ldbu	r4,0(r3)
 10039a8:	2100020c 	andi	r4,r4,8
 10039ac:	203ff026 	beq	r4,zero,1003970 <__svfscanf_r+0xdd4>
 10039b0:	8ce3883a 	add	r17,r17,r19
 10039b4:	003c8c06 	br	1002be8 <__svfscanf_r+0x4c>
 10039b8:	d8c0a417 	ldw	r3,656(sp)
 10039bc:	1d400017 	ldw	r21,0(r3)
 10039c0:	a827883a 	mov	r19,r21
 10039c4:	00000e06 	br	1003a00 <__svfscanf_r+0xe64>
 10039c8:	80800117 	ldw	r2,4(r16)
 10039cc:	d900a317 	ldw	r4,652(sp)
 10039d0:	29800044 	addi	r6,r5,1
 10039d4:	10ffffc4 	addi	r3,r2,-1
 10039d8:	213fffc4 	addi	r4,r4,-1
 10039dc:	d900a315 	stw	r4,652(sp)
 10039e0:	80c00115 	stw	r3,4(r16)
 10039e4:	28800003 	ldbu	r2,0(r5)
 10039e8:	98800005 	stb	r2,0(r19)
 10039ec:	81800015 	stw	r6,0(r16)
 10039f0:	9cc00044 	addi	r19,r19,1
 10039f4:	20000926 	beq	r4,zero,1003a1c <__svfscanf_r+0xe80>
 10039f8:	80800117 	ldw	r2,4(r16)
 10039fc:	0080170e 	bge	zero,r2,1003a5c <__svfscanf_r+0xec0>
 1003a00:	81400017 	ldw	r5,0(r16)
 1003a04:	90800017 	ldw	r2,0(r18)
 1003a08:	28c00003 	ldbu	r3,0(r5)
 1003a0c:	1887883a 	add	r3,r3,r2
 1003a10:	19000003 	ldbu	r4,0(r3)
 1003a14:	2100020c 	andi	r4,r4,8
 1003a18:	203feb26 	beq	r4,zero,10039c8 <__svfscanf_r+0xe2c>
 1003a1c:	9d45c83a 	sub	r2,r19,r21
 1003a20:	d8c0a217 	ldw	r3,648(sp)
 1003a24:	88a3883a 	add	r17,r17,r2
 1003a28:	d880a417 	ldw	r2,656(sp)
 1003a2c:	18c00044 	addi	r3,r3,1
 1003a30:	d8c0a215 	stw	r3,648(sp)
 1003a34:	10800104 	addi	r2,r2,4
 1003a38:	d880a415 	stw	r2,656(sp)
 1003a3c:	98000005 	stb	zero,0(r19)
 1003a40:	003c6906 	br	1002be8 <__svfscanf_r+0x4c>
 1003a44:	b009883a 	mov	r4,r22
 1003a48:	800b883a 	mov	r5,r16
 1003a4c:	10093400 	call	1009340 <__srefill_r>
 1003a50:	103fd026 	beq	r2,zero,1003994 <__svfscanf_r+0xdf8>
 1003a54:	8ce3883a 	add	r17,r17,r19
 1003a58:	003c6306 	br	1002be8 <__svfscanf_r+0x4c>
 1003a5c:	b009883a 	mov	r4,r22
 1003a60:	800b883a 	mov	r5,r16
 1003a64:	10093400 	call	1009340 <__srefill_r>
 1003a68:	103fe526 	beq	r2,zero,1003a00 <__svfscanf_r+0xe64>
 1003a6c:	003feb06 	br	1003a1c <__svfscanf_r+0xe80>
 1003a70:	d900a317 	ldw	r4,652(sp)
 1003a74:	9d41e014 	ori	r21,r19,1920
 1003a78:	2000821e 	bne	r4,zero,1003c84 <__svfscanf_r+0x10e8>
 1003a7c:	d8c04404 	addi	r3,sp,272
 1003a80:	182f883a 	mov	r23,r3
 1003a84:	0039883a 	mov	fp,zero
 1003a88:	d8c0a615 	stw	r3,664(sp)
 1003a8c:	d8009c15 	stw	zero,624(sp)
 1003a90:	d8009d15 	stw	zero,628(sp)
 1003a94:	d8009f15 	stw	zero,636(sp)
 1003a98:	d8009e15 	stw	zero,632(sp)
 1003a9c:	003e9e06 	br	1003518 <__svfscanf_r+0x97c>
 1003aa0:	d900a317 	ldw	r4,652(sp)
 1003aa4:	9c836014 	ori	r18,r19,3456
 1003aa8:	2000161e 	bne	r4,zero,1003b04 <__svfscanf_r+0xf68>
 1003aac:	d8804404 	addi	r2,sp,272
 1003ab0:	d880a615 	stw	r2,664(sp)
 1003ab4:	002f883a 	mov	r23,zero
 1003ab8:	1027883a 	mov	r19,r2
 1003abc:	9080400c 	andi	r2,r18,256
 1003ac0:	10000926 	beq	r2,zero,1003ae8 <__svfscanf_r+0xf4c>
 1003ac4:	d8c0a617 	ldw	r3,664(sp)
 1003ac8:	1cc0052e 	bgeu	r3,r19,1003ae0 <__svfscanf_r+0xf44>
 1003acc:	9cffffc4 	addi	r19,r19,-1
 1003ad0:	99400007 	ldb	r5,0(r19)
 1003ad4:	b009883a 	mov	r4,r22
 1003ad8:	800d883a 	mov	r6,r16
 1003adc:	100bbb00 	call	100bbb0 <_ungetc_r>
 1003ae0:	d900a617 	ldw	r4,664(sp)
 1003ae4:	24fc6226 	beq	r4,r19,1002c70 <__svfscanf_r+0xd4>
 1003ae8:	9080040c 	andi	r2,r18,16
 1003aec:	10006726 	beq	r2,zero,1003c8c <__svfscanf_r+0x10f0>
 1003af0:	d8c0a617 	ldw	r3,664(sp)
 1003af4:	98c5c83a 	sub	r2,r19,r3
 1003af8:	b885883a 	add	r2,r23,r2
 1003afc:	88a3883a 	add	r17,r17,r2
 1003b00:	003c3906 	br	1002be8 <__svfscanf_r+0x4c>
 1003b04:	002b883a 	mov	r21,zero
 1003b08:	d8c04404 	addi	r3,sp,272
 1003b0c:	d8c0a615 	stw	r3,664(sp)
 1003b10:	002f883a 	mov	r23,zero
 1003b14:	1827883a 	mov	r19,r3
 1003b18:	81800017 	ldw	r6,0(r16)
 1003b1c:	00c01344 	movi	r3,77
 1003b20:	31400003 	ldbu	r5,0(r6)
 1003b24:	28bff544 	addi	r2,r5,-43
 1003b28:	10803fcc 	andi	r2,r2,255
 1003b2c:	18bfe336 	bltu	r3,r2,1003abc <__svfscanf_r+0xf20>
 1003b30:	1085883a 	add	r2,r2,r2
 1003b34:	1085883a 	add	r2,r2,r2
 1003b38:	00c04034 	movhi	r3,256
 1003b3c:	18ced304 	addi	r3,r3,15180
 1003b40:	10c5883a 	add	r2,r2,r3
 1003b44:	11000017 	ldw	r4,0(r2)
 1003b48:	2000683a 	jmp	r4
 1003b4c:	01003ce0 	cmpeqi	r4,zero,243
 1003b50:	01003abc 	xorhi	r4,zero,234
 1003b54:	01003ce0 	cmpeqi	r4,zero,243
 1003b58:	01003abc 	xorhi	r4,zero,234
 1003b5c:	01003abc 	xorhi	r4,zero,234
 1003b60:	01003d24 	muli	r4,zero,244
 1003b64:	01003e20 	cmpeqi	r4,zero,248
 1003b68:	01003e20 	cmpeqi	r4,zero,248
 1003b6c:	01003e20 	cmpeqi	r4,zero,248
 1003b70:	01003e20 	cmpeqi	r4,zero,248
 1003b74:	01003e20 	cmpeqi	r4,zero,248
 1003b78:	01003e20 	cmpeqi	r4,zero,248
 1003b7c:	01003e20 	cmpeqi	r4,zero,248
 1003b80:	01003e48 	cmpgei	r4,zero,249
 1003b84:	01003e48 	cmpgei	r4,zero,249
 1003b88:	01003abc 	xorhi	r4,zero,234
 1003b8c:	01003abc 	xorhi	r4,zero,234
 1003b90:	01003abc 	xorhi	r4,zero,234
 1003b94:	01003abc 	xorhi	r4,zero,234
 1003b98:	01003abc 	xorhi	r4,zero,234
 1003b9c:	01003abc 	xorhi	r4,zero,234
 1003ba0:	01003abc 	xorhi	r4,zero,234
 1003ba4:	01003e78 	rdprs	r4,zero,249
 1003ba8:	01003e78 	rdprs	r4,zero,249
 1003bac:	01003e78 	rdprs	r4,zero,249
 1003bb0:	01003e78 	rdprs	r4,zero,249
 1003bb4:	01003e78 	rdprs	r4,zero,249
 1003bb8:	01003e78 	rdprs	r4,zero,249
 1003bbc:	01003abc 	xorhi	r4,zero,234
 1003bc0:	01003abc 	xorhi	r4,zero,234
 1003bc4:	01003abc 	xorhi	r4,zero,234
 1003bc8:	01003abc 	xorhi	r4,zero,234
 1003bcc:	01003abc 	xorhi	r4,zero,234
 1003bd0:	01003abc 	xorhi	r4,zero,234
 1003bd4:	01003abc 	xorhi	r4,zero,234
 1003bd8:	01003abc 	xorhi	r4,zero,234
 1003bdc:	01003abc 	xorhi	r4,zero,234
 1003be0:	01003abc 	xorhi	r4,zero,234
 1003be4:	01003abc 	xorhi	r4,zero,234
 1003be8:	01003abc 	xorhi	r4,zero,234
 1003bec:	01003abc 	xorhi	r4,zero,234
 1003bf0:	01003abc 	xorhi	r4,zero,234
 1003bf4:	01003abc 	xorhi	r4,zero,234
 1003bf8:	01003abc 	xorhi	r4,zero,234
 1003bfc:	01003abc 	xorhi	r4,zero,234
 1003c00:	01003e88 	cmpgei	r4,zero,250
 1003c04:	01003abc 	xorhi	r4,zero,234
 1003c08:	01003abc 	xorhi	r4,zero,234
 1003c0c:	01003abc 	xorhi	r4,zero,234
 1003c10:	01003abc 	xorhi	r4,zero,234
 1003c14:	01003abc 	xorhi	r4,zero,234
 1003c18:	01003abc 	xorhi	r4,zero,234
 1003c1c:	01003abc 	xorhi	r4,zero,234
 1003c20:	01003abc 	xorhi	r4,zero,234
 1003c24:	01003e78 	rdprs	r4,zero,249
 1003c28:	01003e78 	rdprs	r4,zero,249
 1003c2c:	01003e78 	rdprs	r4,zero,249
 1003c30:	01003e78 	rdprs	r4,zero,249
 1003c34:	01003e78 	rdprs	r4,zero,249
 1003c38:	01003e78 	rdprs	r4,zero,249
 1003c3c:	01003abc 	xorhi	r4,zero,234
 1003c40:	01003abc 	xorhi	r4,zero,234
 1003c44:	01003abc 	xorhi	r4,zero,234
 1003c48:	01003abc 	xorhi	r4,zero,234
 1003c4c:	01003abc 	xorhi	r4,zero,234
 1003c50:	01003abc 	xorhi	r4,zero,234
 1003c54:	01003abc 	xorhi	r4,zero,234
 1003c58:	01003abc 	xorhi	r4,zero,234
 1003c5c:	01003abc 	xorhi	r4,zero,234
 1003c60:	01003abc 	xorhi	r4,zero,234
 1003c64:	01003abc 	xorhi	r4,zero,234
 1003c68:	01003abc 	xorhi	r4,zero,234
 1003c6c:	01003abc 	xorhi	r4,zero,234
 1003c70:	01003abc 	xorhi	r4,zero,234
 1003c74:	01003abc 	xorhi	r4,zero,234
 1003c78:	01003abc 	xorhi	r4,zero,234
 1003c7c:	01003abc 	xorhi	r4,zero,234
 1003c80:	01003e88 	cmpgei	r4,zero,250
 1003c84:	000d883a 	mov	r6,zero
 1003c88:	003d9006 	br	10032cc <__svfscanf_r+0x730>
 1003c8c:	98000005 	stb	zero,0(r19)
 1003c90:	d8c0a017 	ldw	r3,640(sp)
 1003c94:	d940a617 	ldw	r5,664(sp)
 1003c98:	d9c0a117 	ldw	r7,644(sp)
 1003c9c:	b009883a 	mov	r4,r22
 1003ca0:	000d883a 	mov	r6,zero
 1003ca4:	183ee83a 	callr	r3
 1003ca8:	1007883a 	mov	r3,r2
 1003cac:	9080080c 	andi	r2,r18,32
 1003cb0:	10004d1e 	bne	r2,zero,1003de8 <__svfscanf_r+0x124c>
 1003cb4:	9080010c 	andi	r2,r18,4
 1003cb8:	10003426 	beq	r2,zero,1003d8c <__svfscanf_r+0x11f0>
 1003cbc:	d900a417 	ldw	r4,656(sp)
 1003cc0:	20800017 	ldw	r2,0(r4)
 1003cc4:	21000104 	addi	r4,r4,4
 1003cc8:	d900a415 	stw	r4,656(sp)
 1003ccc:	10c0000d 	sth	r3,0(r2)
 1003cd0:	d880a217 	ldw	r2,648(sp)
 1003cd4:	10800044 	addi	r2,r2,1
 1003cd8:	d880a215 	stw	r2,648(sp)
 1003cdc:	003f8406 	br	1003af0 <__svfscanf_r+0xf54>
 1003ce0:	9080200c 	andi	r2,r18,128
 1003ce4:	103f7526 	beq	r2,zero,1003abc <__svfscanf_r+0xf20>
 1003ce8:	00bfdfc4 	movi	r2,-129
 1003cec:	90a4703a 	and	r18,r18,r2
 1003cf0:	99400005 	stb	r5,0(r19)
 1003cf4:	9cc00044 	addi	r19,r19,1
 1003cf8:	80c00117 	ldw	r3,4(r16)
 1003cfc:	18ffffc4 	addi	r3,r3,-1
 1003d00:	80c00115 	stw	r3,4(r16)
 1003d04:	00c0130e 	bge	zero,r3,1003d54 <__svfscanf_r+0x11b8>
 1003d08:	31800044 	addi	r6,r6,1
 1003d0c:	81800015 	stw	r6,0(r16)
 1003d10:	d880a317 	ldw	r2,652(sp)
 1003d14:	10bfffc4 	addi	r2,r2,-1
 1003d18:	d880a315 	stw	r2,652(sp)
 1003d1c:	103f7e1e 	bne	r2,zero,1003b18 <__svfscanf_r+0xf7c>
 1003d20:	003f6606 	br	1003abc <__svfscanf_r+0xf20>
 1003d24:	9082000c 	andi	r2,r18,2048
 1003d28:	103ff126 	beq	r2,zero,1003cf0 <__svfscanf_r+0x1154>
 1003d2c:	d8c0a117 	ldw	r3,644(sp)
 1003d30:	1800031e 	bne	r3,zero,1003d40 <__svfscanf_r+0x11a4>
 1003d34:	01000204 	movi	r4,8
 1003d38:	94808014 	ori	r18,r18,512
 1003d3c:	d900a115 	stw	r4,644(sp)
 1003d40:	9081000c 	andi	r2,r18,1024
 1003d44:	10000826 	beq	r2,zero,1003d68 <__svfscanf_r+0x11cc>
 1003d48:	00be9fc4 	movi	r2,-1409
 1003d4c:	90a4703a 	and	r18,r18,r2
 1003d50:	003fe706 	br	1003cf0 <__svfscanf_r+0x1154>
 1003d54:	b009883a 	mov	r4,r22
 1003d58:	800b883a 	mov	r5,r16
 1003d5c:	10093400 	call	1009340 <__srefill_r>
 1003d60:	103feb26 	beq	r2,zero,1003d10 <__svfscanf_r+0x1174>
 1003d64:	003f5506 	br	1003abc <__svfscanf_r+0xf20>
 1003d68:	a8000426 	beq	r21,zero,1003d7c <__svfscanf_r+0x11e0>
 1003d6c:	d880a317 	ldw	r2,652(sp)
 1003d70:	ad7fffc4 	addi	r21,r21,-1
 1003d74:	10800044 	addi	r2,r2,1
 1003d78:	d880a315 	stw	r2,652(sp)
 1003d7c:	00bf1fc4 	movi	r2,-897
 1003d80:	90a4703a 	and	r18,r18,r2
 1003d84:	bdc00044 	addi	r23,r23,1
 1003d88:	003fdb06 	br	1003cf8 <__svfscanf_r+0x115c>
 1003d8c:	9080004c 	andi	r2,r18,1
 1003d90:	1005003a 	cmpeq	r2,r2,zero
 1003d94:	10001426 	beq	r2,zero,1003de8 <__svfscanf_r+0x124c>
 1003d98:	9080008c 	andi	r2,r18,2
 1003d9c:	10001226 	beq	r2,zero,1003de8 <__svfscanf_r+0x124c>
 1003da0:	d8c0a017 	ldw	r3,640(sp)
 1003da4:	00804074 	movhi	r2,257
 1003da8:	10ad6404 	addi	r2,r2,-19056
 1003dac:	18801426 	beq	r3,r2,1003e00 <__svfscanf_r+0x1264>
 1003db0:	d9c0a117 	ldw	r7,644(sp)
 1003db4:	d940a617 	ldw	r5,664(sp)
 1003db8:	000d883a 	mov	r6,zero
 1003dbc:	b009883a 	mov	r4,r22
 1003dc0:	100b2780 	call	100b278 <_strtoll_r>
 1003dc4:	100d883a 	mov	r6,r2
 1003dc8:	180f883a 	mov	r7,r3
 1003dcc:	d900a417 	ldw	r4,656(sp)
 1003dd0:	20800017 	ldw	r2,0(r4)
 1003dd4:	21000104 	addi	r4,r4,4
 1003dd8:	d900a415 	stw	r4,656(sp)
 1003ddc:	11c00115 	stw	r7,4(r2)
 1003de0:	11800015 	stw	r6,0(r2)
 1003de4:	003fba06 	br	1003cd0 <__svfscanf_r+0x1134>
 1003de8:	d900a417 	ldw	r4,656(sp)
 1003dec:	20800017 	ldw	r2,0(r4)
 1003df0:	21000104 	addi	r4,r4,4
 1003df4:	d900a415 	stw	r4,656(sp)
 1003df8:	10c00015 	stw	r3,0(r2)
 1003dfc:	003fb406 	br	1003cd0 <__svfscanf_r+0x1134>
 1003e00:	d9c0a117 	ldw	r7,644(sp)
 1003e04:	d940a617 	ldw	r5,664(sp)
 1003e08:	000d883a 	mov	r6,zero
 1003e0c:	b009883a 	mov	r4,r22
 1003e10:	100b7e40 	call	100b7e4 <_strtoull_r>
 1003e14:	100d883a 	mov	r6,r2
 1003e18:	180f883a 	mov	r7,r3
 1003e1c:	003feb06 	br	1003dcc <__svfscanf_r+0x1230>
 1003e20:	d8c0a117 	ldw	r3,644(sp)
 1003e24:	18c5883a 	add	r2,r3,r3
 1003e28:	00c04074 	movhi	r3,257
 1003e2c:	18cb6f84 	addi	r3,r3,11710
 1003e30:	10c5883a 	add	r2,r2,r3
 1003e34:	1080000f 	ldh	r2,0(r2)
 1003e38:	00fd1fc4 	movi	r3,-2945
 1003e3c:	90e4703a 	and	r18,r18,r3
 1003e40:	d880a115 	stw	r2,644(sp)
 1003e44:	003faa06 	br	1003cf0 <__svfscanf_r+0x1154>
 1003e48:	d900a117 	ldw	r4,644(sp)
 1003e4c:	00c04074 	movhi	r3,257
 1003e50:	18cb6f84 	addi	r3,r3,11710
 1003e54:	2105883a 	add	r2,r4,r4
 1003e58:	10c5883a 	add	r2,r2,r3
 1003e5c:	1080000f 	ldh	r2,0(r2)
 1003e60:	00c00204 	movi	r3,8
 1003e64:	d880a115 	stw	r2,644(sp)
 1003e68:	18bf140e 	bge	r3,r2,1003abc <__svfscanf_r+0xf20>
 1003e6c:	00bd1fc4 	movi	r2,-2945
 1003e70:	90a4703a 	and	r18,r18,r2
 1003e74:	003f9e06 	br	1003cf0 <__svfscanf_r+0x1154>
 1003e78:	d8c0a117 	ldw	r3,644(sp)
 1003e7c:	00800284 	movi	r2,10
 1003e80:	10fffa16 	blt	r2,r3,1003e6c <__svfscanf_r+0x12d0>
 1003e84:	003f0d06 	br	1003abc <__svfscanf_r+0xf20>
 1003e88:	90c1800c 	andi	r3,r18,1536
 1003e8c:	00808004 	movi	r2,512
 1003e90:	18bf0a1e 	bne	r3,r2,1003abc <__svfscanf_r+0xf20>
 1003e94:	00bf7fc4 	movi	r2,-513
 1003e98:	9084703a 	and	r2,r18,r2
 1003e9c:	01000404 	movi	r4,16
 1003ea0:	14814014 	ori	r18,r2,1280
 1003ea4:	d900a115 	stw	r4,644(sp)
 1003ea8:	003f9106 	br	1003cf0 <__svfscanf_r+0x1154>
 1003eac:	d880a417 	ldw	r2,656(sp)
 1003eb0:	dd400404 	addi	r21,sp,16
 1003eb4:	14800017 	ldw	r18,0(r2)
 1003eb8:	9027883a 	mov	r19,r18
 1003ebc:	81000017 	ldw	r4,0(r16)
 1003ec0:	20800003 	ldbu	r2,0(r4)
 1003ec4:	a885883a 	add	r2,r21,r2
 1003ec8:	10c00007 	ldb	r3,0(r2)
 1003ecc:	18001426 	beq	r3,zero,1003f20 <__svfscanf_r+0x1384>
 1003ed0:	d8c0a317 	ldw	r3,652(sp)
 1003ed4:	80800117 	ldw	r2,4(r16)
 1003ed8:	21800044 	addi	r6,r4,1
 1003edc:	18ffffc4 	addi	r3,r3,-1
 1003ee0:	d8c0a315 	stw	r3,652(sp)
 1003ee4:	10ffffc4 	addi	r3,r2,-1
 1003ee8:	80c00115 	stw	r3,4(r16)
 1003eec:	20800003 	ldbu	r2,0(r4)
 1003ef0:	90800005 	stb	r2,0(r18)
 1003ef4:	d900a317 	ldw	r4,652(sp)
 1003ef8:	81800015 	stw	r6,0(r16)
 1003efc:	94800044 	addi	r18,r18,1
 1003f00:	20000726 	beq	r4,zero,1003f20 <__svfscanf_r+0x1384>
 1003f04:	80800117 	ldw	r2,4(r16)
 1003f08:	00bfec16 	blt	zero,r2,1003ebc <__svfscanf_r+0x1320>
 1003f0c:	b009883a 	mov	r4,r22
 1003f10:	800b883a 	mov	r5,r16
 1003f14:	10093400 	call	1009340 <__srefill_r>
 1003f18:	103fe826 	beq	r2,zero,1003ebc <__svfscanf_r+0x1320>
 1003f1c:	9cbb7426 	beq	r19,r18,1002cf0 <__svfscanf_r+0x154>
 1003f20:	94e7c83a 	sub	r19,r18,r19
 1003f24:	983b5226 	beq	r19,zero,1002c70 <__svfscanf_r+0xd4>
 1003f28:	90000005 	stb	zero,0(r18)
 1003f2c:	d880a417 	ldw	r2,656(sp)
 1003f30:	d8c0a217 	ldw	r3,648(sp)
 1003f34:	8ce3883a 	add	r17,r17,r19
 1003f38:	10800104 	addi	r2,r2,4
 1003f3c:	18c00044 	addi	r3,r3,1
 1003f40:	d880a415 	stw	r2,656(sp)
 1003f44:	d8c0a215 	stw	r3,648(sp)
 1003f48:	003b2706 	br	1002be8 <__svfscanf_r+0x4c>
 1003f4c:	9cc00414 	ori	r19,r19,16
 1003f50:	003b6e06 	br	1002d0c <__svfscanf_r+0x170>
 1003f54:	00c00404 	movi	r3,16
 1003f58:	01004074 	movhi	r4,257
 1003f5c:	212d6404 	addi	r4,r4,-19056
 1003f60:	9cc08014 	ori	r19,r19,512
 1003f64:	054000c4 	movi	r21,3
 1003f68:	d8c0a115 	stw	r3,644(sp)
 1003f6c:	d900a015 	stw	r4,640(sp)
 1003f70:	003bf806 	br	1002f54 <__svfscanf_r+0x3b8>
 1003f74:	9880040c 	andi	r2,r19,16
 1003f78:	10001926 	beq	r2,zero,1003fe0 <__svfscanf_r+0x1444>
 1003f7c:	0027883a 	mov	r19,zero
 1003f80:	00000b06 	br	1003fb0 <__svfscanf_r+0x1414>
 1003f84:	80800017 	ldw	r2,0(r16)
 1003f88:	b009883a 	mov	r4,r22
 1003f8c:	800b883a 	mov	r5,r16
 1003f90:	148d883a 	add	r6,r2,r18
 1003f94:	81800015 	stw	r6,0(r16)
 1003f98:	9ca7883a 	add	r19,r19,r18
 1003f9c:	10093400 	call	1009340 <__srefill_r>
 1003fa0:	103c711e 	bne	r2,zero,1003168 <__svfscanf_r+0x5cc>
 1003fa4:	d900a317 	ldw	r4,652(sp)
 1003fa8:	2489c83a 	sub	r4,r4,r18
 1003fac:	d900a315 	stw	r4,652(sp)
 1003fb0:	84800117 	ldw	r18,4(r16)
 1003fb4:	d8c0a317 	ldw	r3,652(sp)
 1003fb8:	90fff216 	blt	r18,r3,1003f84 <__svfscanf_r+0x13e8>
 1003fbc:	d900a317 	ldw	r4,652(sp)
 1003fc0:	80800017 	ldw	r2,0(r16)
 1003fc4:	9927883a 	add	r19,r19,r4
 1003fc8:	9107c83a 	sub	r3,r18,r4
 1003fcc:	110d883a 	add	r6,r2,r4
 1003fd0:	8ce3883a 	add	r17,r17,r19
 1003fd4:	80c00115 	stw	r3,4(r16)
 1003fd8:	81800015 	stw	r6,0(r16)
 1003fdc:	003b0206 	br	1002be8 <__svfscanf_r+0x4c>
 1003fe0:	d880a417 	ldw	r2,656(sp)
 1003fe4:	d980a317 	ldw	r6,652(sp)
 1003fe8:	01400044 	movi	r5,1
 1003fec:	11000017 	ldw	r4,0(r2)
 1003ff0:	800f883a 	mov	r7,r16
 1003ff4:	10063100 	call	1006310 <fread>
 1003ff8:	103b3d26 	beq	r2,zero,1002cf0 <__svfscanf_r+0x154>
 1003ffc:	d8c0a417 	ldw	r3,656(sp)
 1004000:	d900a217 	ldw	r4,648(sp)
 1004004:	88a3883a 	add	r17,r17,r2
 1004008:	18c00104 	addi	r3,r3,4
 100400c:	21000044 	addi	r4,r4,1
 1004010:	d8c0a415 	stw	r3,656(sp)
 1004014:	d900a215 	stw	r4,648(sp)
 1004018:	003af306 	br	1002be8 <__svfscanf_r+0x4c>
 100401c:	8080030b 	ldhu	r2,12(r16)
 1004020:	1080100c 	andi	r2,r2,64
 1004024:	103b1226 	beq	r2,zero,1002c70 <__svfscanf_r+0xd4>
 1004028:	003b3306 	br	1002cf8 <__svfscanf_r+0x15c>
 100402c:	983b1026 	beq	r19,zero,1002c70 <__svfscanf_r+0xd4>
 1004030:	8ce3883a 	add	r17,r17,r19
 1004034:	003aec06 	br	1002be8 <__svfscanf_r+0x4c>
 1004038:	983c9626 	beq	r19,zero,1003294 <__svfscanf_r+0x6f8>
 100403c:	9cffffc4 	addi	r19,r19,-1
 1004040:	d8c04404 	addi	r3,sp,272
 1004044:	1cc5883a 	add	r2,r3,r19
 1004048:	11400003 	ldbu	r5,0(r2)
 100404c:	b009883a 	mov	r4,r22
 1004050:	800d883a 	mov	r6,r16
 1004054:	100bbb00 	call	100bbb0 <_ungetc_r>
 1004058:	003ff706 	br	1004038 <__svfscanf_r+0x149c>
 100405c:	00bfff84 	movi	r2,-2
 1004060:	18bc7a1e 	bne	r3,r2,100324c <__svfscanf_r+0x6b0>
 1004064:	003c8406 	br	1003278 <__svfscanf_r+0x6dc>
 1004068:	d900a417 	ldw	r4,656(sp)
 100406c:	25400017 	ldw	r21,0(r4)
 1004070:	21000104 	addi	r4,r4,4
 1004074:	d900a415 	stw	r4,656(sp)
 1004078:	003c4a06 	br	10031a4 <__svfscanf_r+0x608>
 100407c:	00bfff84 	movi	r2,-2
 1004080:	18bc0f1e 	bne	r3,r2,10030c0 <__svfscanf_r+0x524>
 1004084:	003c1506 	br	10030dc <__svfscanf_r+0x540>
 1004088:	b009883a 	mov	r4,r22
 100408c:	800b883a 	mov	r5,r16
 1004090:	10093400 	call	1009340 <__srefill_r>
 1004094:	103c1326 	beq	r2,zero,10030e4 <__svfscanf_r+0x548>
 1004098:	903b151e 	bne	r18,zero,1002cf0 <__svfscanf_r+0x154>
 100409c:	a83ad21e 	bne	r21,zero,1002be8 <__svfscanf_r+0x4c>
 10040a0:	d880a217 	ldw	r2,648(sp)
 10040a4:	10800044 	addi	r2,r2,1
 10040a8:	d880a215 	stw	r2,648(sp)
 10040ac:	003ace06 	br	1002be8 <__svfscanf_r+0x4c>
 10040b0:	0027883a 	mov	r19,zero
 10040b4:	003bdd06 	br	100302c <__svfscanf_r+0x490>
 10040b8:	9cc00114 	ori	r19,r19,4
 10040bc:	003b1306 	br	1002d0c <__svfscanf_r+0x170>
 10040c0:	05400104 	movi	r21,4
 10040c4:	003ba306 	br	1002f54 <__svfscanf_r+0x3b8>
 10040c8:	9cc00054 	ori	r19,r19,1
 10040cc:	00804074 	movhi	r2,257
 10040d0:	10ac0404 	addi	r2,r2,-20464
 10040d4:	00c00284 	movi	r3,10
 10040d8:	054000c4 	movi	r21,3
 10040dc:	d880a015 	stw	r2,640(sp)
 10040e0:	d8c0a115 	stw	r3,644(sp)
 10040e4:	003b9b06 	br	1002f54 <__svfscanf_r+0x3b8>
 10040e8:	9cc01014 	ori	r19,r19,64
 10040ec:	002b883a 	mov	r21,zero
 10040f0:	003b9806 	br	1002f54 <__svfscanf_r+0x3b8>
 10040f4:	a00b883a 	mov	r5,r20
 10040f8:	d9000404 	addi	r4,sp,16
 10040fc:	10096000 	call	1009600 <__sccl>
 1004100:	1029883a 	mov	r20,r2
 1004104:	9cc01014 	ori	r19,r19,64
 1004108:	05400044 	movi	r21,1
 100410c:	003b9106 	br	1002f54 <__svfscanf_r+0x3b8>
 1004110:	9cc00054 	ori	r19,r19,1
 1004114:	00800204 	movi	r2,8
 1004118:	00c04074 	movhi	r3,257
 100411c:	18ed6404 	addi	r3,r3,-19056
 1004120:	054000c4 	movi	r21,3
 1004124:	d880a115 	stw	r2,644(sp)
 1004128:	d8c0a015 	stw	r3,640(sp)
 100412c:	003b8906 	br	1002f54 <__svfscanf_r+0x3b8>
 1004130:	9880040c 	andi	r2,r19,16
 1004134:	103aac1e 	bne	r2,zero,1002be8 <__svfscanf_r+0x4c>
 1004138:	9880010c 	andi	r2,r19,4
 100413c:	10002426 	beq	r2,zero,10041d0 <__svfscanf_r+0x1634>
 1004140:	d900a417 	ldw	r4,656(sp)
 1004144:	20800017 	ldw	r2,0(r4)
 1004148:	21000104 	addi	r4,r4,4
 100414c:	d900a415 	stw	r4,656(sp)
 1004150:	1440000d 	sth	r17,0(r2)
 1004154:	003aa406 	br	1002be8 <__svfscanf_r+0x4c>
 1004158:	9cc00094 	ori	r19,r19,2
 100415c:	003aeb06 	br	1002d0c <__svfscanf_r+0x170>
 1004160:	05400084 	movi	r21,2
 1004164:	003b7b06 	br	1002f54 <__svfscanf_r+0x3b8>
 1004168:	00800404 	movi	r2,16
 100416c:	00c04074 	movhi	r3,257
 1004170:	18ed6404 	addi	r3,r3,-19056
 1004174:	9cc08814 	ori	r19,r19,544
 1004178:	054000c4 	movi	r21,3
 100417c:	d880a115 	stw	r2,644(sp)
 1004180:	d8c0a015 	stw	r3,640(sp)
 1004184:	003b7306 	br	1002f54 <__svfscanf_r+0x3b8>
 1004188:	0009883a 	mov	r4,zero
 100418c:	10096c00 	call	10096c0 <nanf>
 1004190:	b8800015 	stw	r2,0(r23)
 1004194:	003d2706 	br	1003634 <__svfscanf_r+0xa98>
 1004198:	a0c00007 	ldb	r3,0(r20)
 100419c:	00801b04 	movi	r2,108
 10041a0:	18800826 	beq	r3,r2,10041c4 <__svfscanf_r+0x1628>
 10041a4:	9cc00054 	ori	r19,r19,1
 10041a8:	003ad806 	br	1002d0c <__svfscanf_r+0x170>
 10041ac:	01004074 	movhi	r4,257
 10041b0:	212c0404 	addi	r4,r4,-20464
 10041b4:	054000c4 	movi	r21,3
 10041b8:	d900a015 	stw	r4,640(sp)
 10041bc:	d800a115 	stw	zero,644(sp)
 10041c0:	003b6406 	br	1002f54 <__svfscanf_r+0x3b8>
 10041c4:	a5000044 	addi	r20,r20,1
 10041c8:	9cc00094 	ori	r19,r19,2
 10041cc:	003acf06 	br	1002d0c <__svfscanf_r+0x170>
 10041d0:	9880004c 	andi	r2,r19,1
 10041d4:	1005003a 	cmpeq	r2,r2,zero
 10041d8:	10000a26 	beq	r2,zero,1004204 <__svfscanf_r+0x1668>
 10041dc:	9880008c 	andi	r2,r19,2
 10041e0:	10000826 	beq	r2,zero,1004204 <__svfscanf_r+0x1668>
 10041e4:	d900a417 	ldw	r4,656(sp)
 10041e8:	8807d7fa 	srai	r3,r17,31
 10041ec:	20800017 	ldw	r2,0(r4)
 10041f0:	21000104 	addi	r4,r4,4
 10041f4:	d900a415 	stw	r4,656(sp)
 10041f8:	14400015 	stw	r17,0(r2)
 10041fc:	10c00115 	stw	r3,4(r2)
 1004200:	003a7906 	br	1002be8 <__svfscanf_r+0x4c>
 1004204:	d8c0a417 	ldw	r3,656(sp)
 1004208:	18800017 	ldw	r2,0(r3)
 100420c:	18c00104 	addi	r3,r3,4
 1004210:	d8c0a415 	stw	r3,656(sp)
 1004214:	14400015 	stw	r17,0(r2)
 1004218:	003a7306 	br	1002be8 <__svfscanf_r+0x4c>

0100421c <__svfscanf>:
 100421c:	00804074 	movhi	r2,257
 1004220:	10939004 	addi	r2,r2,20032
 1004224:	2013883a 	mov	r9,r4
 1004228:	11000017 	ldw	r4,0(r2)
 100422c:	2805883a 	mov	r2,r5
 1004230:	300f883a 	mov	r7,r6
 1004234:	480b883a 	mov	r5,r9
 1004238:	100d883a 	mov	r6,r2
 100423c:	1002b9c1 	jmpi	1002b9c <__svfscanf_r>

01004240 <_vfscanf_r>:
 1004240:	defffb04 	addi	sp,sp,-20
 1004244:	dcc00315 	stw	r19,12(sp)
 1004248:	dc800215 	stw	r18,8(sp)
 100424c:	dc400115 	stw	r17,4(sp)
 1004250:	dc000015 	stw	r16,0(sp)
 1004254:	dfc00415 	stw	ra,16(sp)
 1004258:	2021883a 	mov	r16,r4
 100425c:	2823883a 	mov	r17,r5
 1004260:	3025883a 	mov	r18,r6
 1004264:	3827883a 	mov	r19,r7
 1004268:	20000226 	beq	r4,zero,1004274 <_vfscanf_r+0x34>
 100426c:	20800e17 	ldw	r2,56(r4)
 1004270:	10000b26 	beq	r2,zero,10042a0 <_vfscanf_r+0x60>
 1004274:	8009883a 	mov	r4,r16
 1004278:	880b883a 	mov	r5,r17
 100427c:	900d883a 	mov	r6,r18
 1004280:	980f883a 	mov	r7,r19
 1004284:	dfc00417 	ldw	ra,16(sp)
 1004288:	dcc00317 	ldw	r19,12(sp)
 100428c:	dc800217 	ldw	r18,8(sp)
 1004290:	dc400117 	ldw	r17,4(sp)
 1004294:	dc000017 	ldw	r16,0(sp)
 1004298:	dec00504 	addi	sp,sp,20
 100429c:	1002b9c1 	jmpi	1002b9c <__svfscanf_r>
 10042a0:	1005ebc0 	call	1005ebc <__sinit>
 10042a4:	003ff306 	br	1004274 <_vfscanf_r+0x34>

010042a8 <vfscanf>:
 10042a8:	defffb04 	addi	sp,sp,-20
 10042ac:	dcc00315 	stw	r19,12(sp)
 10042b0:	04c04074 	movhi	r19,257
 10042b4:	9cd39004 	addi	r19,r19,20032
 10042b8:	98c00017 	ldw	r3,0(r19)
 10042bc:	dc800215 	stw	r18,8(sp)
 10042c0:	dc400115 	stw	r17,4(sp)
 10042c4:	dc000015 	stw	r16,0(sp)
 10042c8:	dfc00415 	stw	ra,16(sp)
 10042cc:	2021883a 	mov	r16,r4
 10042d0:	2823883a 	mov	r17,r5
 10042d4:	3025883a 	mov	r18,r6
 10042d8:	18000326 	beq	r3,zero,10042e8 <vfscanf+0x40>
 10042dc:	18800e17 	ldw	r2,56(r3)
 10042e0:	1809883a 	mov	r4,r3
 10042e4:	10000b26 	beq	r2,zero,1004314 <vfscanf+0x6c>
 10042e8:	99000017 	ldw	r4,0(r19)
 10042ec:	800b883a 	mov	r5,r16
 10042f0:	880d883a 	mov	r6,r17
 10042f4:	900f883a 	mov	r7,r18
 10042f8:	dfc00417 	ldw	ra,16(sp)
 10042fc:	dcc00317 	ldw	r19,12(sp)
 1004300:	dc800217 	ldw	r18,8(sp)
 1004304:	dc400117 	ldw	r17,4(sp)
 1004308:	dc000017 	ldw	r16,0(sp)
 100430c:	dec00504 	addi	sp,sp,20
 1004310:	1002b9c1 	jmpi	1002b9c <__svfscanf_r>
 1004314:	1005ebc0 	call	1005ebc <__sinit>
 1004318:	003ff306 	br	10042e8 <vfscanf+0x40>

0100431c <__swsetup_r>:
 100431c:	00804074 	movhi	r2,257
 1004320:	10939004 	addi	r2,r2,20032
 1004324:	10c00017 	ldw	r3,0(r2)
 1004328:	defffd04 	addi	sp,sp,-12
 100432c:	dc400115 	stw	r17,4(sp)
 1004330:	dc000015 	stw	r16,0(sp)
 1004334:	dfc00215 	stw	ra,8(sp)
 1004338:	2023883a 	mov	r17,r4
 100433c:	2821883a 	mov	r16,r5
 1004340:	18000226 	beq	r3,zero,100434c <__swsetup_r+0x30>
 1004344:	18800e17 	ldw	r2,56(r3)
 1004348:	10001f26 	beq	r2,zero,10043c8 <__swsetup_r+0xac>
 100434c:	8100030b 	ldhu	r4,12(r16)
 1004350:	2080020c 	andi	r2,r4,8
 1004354:	10002826 	beq	r2,zero,10043f8 <__swsetup_r+0xdc>
 1004358:	81400417 	ldw	r5,16(r16)
 100435c:	28001d26 	beq	r5,zero,10043d4 <__swsetup_r+0xb8>
 1004360:	2080004c 	andi	r2,r4,1
 1004364:	1005003a 	cmpeq	r2,r2,zero
 1004368:	10000b26 	beq	r2,zero,1004398 <__swsetup_r+0x7c>
 100436c:	2080008c 	andi	r2,r4,2
 1004370:	10001226 	beq	r2,zero,10043bc <__swsetup_r+0xa0>
 1004374:	0005883a 	mov	r2,zero
 1004378:	80800215 	stw	r2,8(r16)
 100437c:	28000b26 	beq	r5,zero,10043ac <__swsetup_r+0x90>
 1004380:	0005883a 	mov	r2,zero
 1004384:	dfc00217 	ldw	ra,8(sp)
 1004388:	dc400117 	ldw	r17,4(sp)
 100438c:	dc000017 	ldw	r16,0(sp)
 1004390:	dec00304 	addi	sp,sp,12
 1004394:	f800283a 	ret
 1004398:	80800517 	ldw	r2,20(r16)
 100439c:	80000215 	stw	zero,8(r16)
 10043a0:	0085c83a 	sub	r2,zero,r2
 10043a4:	80800615 	stw	r2,24(r16)
 10043a8:	283ff51e 	bne	r5,zero,1004380 <__swsetup_r+0x64>
 10043ac:	2080200c 	andi	r2,r4,128
 10043b0:	103ff326 	beq	r2,zero,1004380 <__swsetup_r+0x64>
 10043b4:	00bfffc4 	movi	r2,-1
 10043b8:	003ff206 	br	1004384 <__swsetup_r+0x68>
 10043bc:	80800517 	ldw	r2,20(r16)
 10043c0:	80800215 	stw	r2,8(r16)
 10043c4:	003fed06 	br	100437c <__swsetup_r+0x60>
 10043c8:	1809883a 	mov	r4,r3
 10043cc:	1005ebc0 	call	1005ebc <__sinit>
 10043d0:	003fde06 	br	100434c <__swsetup_r+0x30>
 10043d4:	20c0a00c 	andi	r3,r4,640
 10043d8:	00808004 	movi	r2,512
 10043dc:	18bfe026 	beq	r3,r2,1004360 <__swsetup_r+0x44>
 10043e0:	8809883a 	mov	r4,r17
 10043e4:	800b883a 	mov	r5,r16
 10043e8:	1006e9c0 	call	1006e9c <__smakebuf_r>
 10043ec:	8100030b 	ldhu	r4,12(r16)
 10043f0:	81400417 	ldw	r5,16(r16)
 10043f4:	003fda06 	br	1004360 <__swsetup_r+0x44>
 10043f8:	2080040c 	andi	r2,r4,16
 10043fc:	103fed26 	beq	r2,zero,10043b4 <__swsetup_r+0x98>
 1004400:	2080010c 	andi	r2,r4,4
 1004404:	10001226 	beq	r2,zero,1004450 <__swsetup_r+0x134>
 1004408:	81400c17 	ldw	r5,48(r16)
 100440c:	28000526 	beq	r5,zero,1004424 <__swsetup_r+0x108>
 1004410:	80801004 	addi	r2,r16,64
 1004414:	28800226 	beq	r5,r2,1004420 <__swsetup_r+0x104>
 1004418:	8809883a 	mov	r4,r17
 100441c:	100647c0 	call	100647c <_free_r>
 1004420:	80000c15 	stw	zero,48(r16)
 1004424:	8080030b 	ldhu	r2,12(r16)
 1004428:	81400417 	ldw	r5,16(r16)
 100442c:	80000115 	stw	zero,4(r16)
 1004430:	10bff6cc 	andi	r2,r2,65499
 1004434:	8080030d 	sth	r2,12(r16)
 1004438:	81400015 	stw	r5,0(r16)
 100443c:	8080030b 	ldhu	r2,12(r16)
 1004440:	10800214 	ori	r2,r2,8
 1004444:	113fffcc 	andi	r4,r2,65535
 1004448:	8080030d 	sth	r2,12(r16)
 100444c:	003fc306 	br	100435c <__swsetup_r+0x40>
 1004450:	81400417 	ldw	r5,16(r16)
 1004454:	003ff906 	br	100443c <__swsetup_r+0x120>

01004458 <quorem>:
 1004458:	28c00417 	ldw	r3,16(r5)
 100445c:	20800417 	ldw	r2,16(r4)
 1004460:	defff604 	addi	sp,sp,-40
 1004464:	ddc00715 	stw	r23,28(sp)
 1004468:	dd400515 	stw	r21,20(sp)
 100446c:	dfc00915 	stw	ra,36(sp)
 1004470:	df000815 	stw	fp,32(sp)
 1004474:	dd800615 	stw	r22,24(sp)
 1004478:	dd000415 	stw	r20,16(sp)
 100447c:	dcc00315 	stw	r19,12(sp)
 1004480:	dc800215 	stw	r18,8(sp)
 1004484:	dc400115 	stw	r17,4(sp)
 1004488:	dc000015 	stw	r16,0(sp)
 100448c:	202f883a 	mov	r23,r4
 1004490:	282b883a 	mov	r21,r5
 1004494:	10c07416 	blt	r2,r3,1004668 <quorem+0x210>
 1004498:	1c7fffc4 	addi	r17,r3,-1
 100449c:	8c45883a 	add	r2,r17,r17
 10044a0:	1085883a 	add	r2,r2,r2
 10044a4:	2c000504 	addi	r16,r5,20
 10044a8:	24c00504 	addi	r19,r4,20
 10044ac:	14ed883a 	add	r22,r2,r19
 10044b0:	80a5883a 	add	r18,r16,r2
 10044b4:	b7000017 	ldw	fp,0(r22)
 10044b8:	91400017 	ldw	r5,0(r18)
 10044bc:	e009883a 	mov	r4,fp
 10044c0:	29400044 	addi	r5,r5,1
 10044c4:	100f0640 	call	100f064 <__udivsi3>
 10044c8:	1029883a 	mov	r20,r2
 10044cc:	10003c1e 	bne	r2,zero,10045c0 <quorem+0x168>
 10044d0:	a80b883a 	mov	r5,r21
 10044d4:	b809883a 	mov	r4,r23
 10044d8:	1007cc80 	call	1007cc8 <__mcmp>
 10044dc:	10002b16 	blt	r2,zero,100458c <quorem+0x134>
 10044e0:	a5000044 	addi	r20,r20,1
 10044e4:	980f883a 	mov	r7,r19
 10044e8:	0011883a 	mov	r8,zero
 10044ec:	0009883a 	mov	r4,zero
 10044f0:	81400017 	ldw	r5,0(r16)
 10044f4:	38c00017 	ldw	r3,0(r7)
 10044f8:	84000104 	addi	r16,r16,4
 10044fc:	28bfffcc 	andi	r2,r5,65535
 1004500:	2085883a 	add	r2,r4,r2
 1004504:	11bfffcc 	andi	r6,r2,65535
 1004508:	193fffcc 	andi	r4,r3,65535
 100450c:	1004d43a 	srli	r2,r2,16
 1004510:	280ad43a 	srli	r5,r5,16
 1004514:	2189c83a 	sub	r4,r4,r6
 1004518:	2209883a 	add	r4,r4,r8
 100451c:	1806d43a 	srli	r3,r3,16
 1004520:	288b883a 	add	r5,r5,r2
 1004524:	200dd43a 	srai	r6,r4,16
 1004528:	28bfffcc 	andi	r2,r5,65535
 100452c:	1887c83a 	sub	r3,r3,r2
 1004530:	1987883a 	add	r3,r3,r6
 1004534:	3900000d 	sth	r4,0(r7)
 1004538:	38c0008d 	sth	r3,2(r7)
 100453c:	2808d43a 	srli	r4,r5,16
 1004540:	39c00104 	addi	r7,r7,4
 1004544:	1811d43a 	srai	r8,r3,16
 1004548:	943fe92e 	bgeu	r18,r16,10044f0 <quorem+0x98>
 100454c:	8c45883a 	add	r2,r17,r17
 1004550:	1085883a 	add	r2,r2,r2
 1004554:	9885883a 	add	r2,r19,r2
 1004558:	10c00017 	ldw	r3,0(r2)
 100455c:	18000b1e 	bne	r3,zero,100458c <quorem+0x134>
 1004560:	113fff04 	addi	r4,r2,-4
 1004564:	9900082e 	bgeu	r19,r4,1004588 <quorem+0x130>
 1004568:	10bfff17 	ldw	r2,-4(r2)
 100456c:	10000326 	beq	r2,zero,100457c <quorem+0x124>
 1004570:	00000506 	br	1004588 <quorem+0x130>
 1004574:	20800017 	ldw	r2,0(r4)
 1004578:	1000031e 	bne	r2,zero,1004588 <quorem+0x130>
 100457c:	213fff04 	addi	r4,r4,-4
 1004580:	8c7fffc4 	addi	r17,r17,-1
 1004584:	993ffb36 	bltu	r19,r4,1004574 <quorem+0x11c>
 1004588:	bc400415 	stw	r17,16(r23)
 100458c:	a005883a 	mov	r2,r20
 1004590:	dfc00917 	ldw	ra,36(sp)
 1004594:	df000817 	ldw	fp,32(sp)
 1004598:	ddc00717 	ldw	r23,28(sp)
 100459c:	dd800617 	ldw	r22,24(sp)
 10045a0:	dd400517 	ldw	r21,20(sp)
 10045a4:	dd000417 	ldw	r20,16(sp)
 10045a8:	dcc00317 	ldw	r19,12(sp)
 10045ac:	dc800217 	ldw	r18,8(sp)
 10045b0:	dc400117 	ldw	r17,4(sp)
 10045b4:	dc000017 	ldw	r16,0(sp)
 10045b8:	dec00a04 	addi	sp,sp,40
 10045bc:	f800283a 	ret
 10045c0:	980f883a 	mov	r7,r19
 10045c4:	8011883a 	mov	r8,r16
 10045c8:	0013883a 	mov	r9,zero
 10045cc:	000d883a 	mov	r6,zero
 10045d0:	40c00017 	ldw	r3,0(r8)
 10045d4:	39000017 	ldw	r4,0(r7)
 10045d8:	42000104 	addi	r8,r8,4
 10045dc:	18bfffcc 	andi	r2,r3,65535
 10045e0:	a085383a 	mul	r2,r20,r2
 10045e4:	1806d43a 	srli	r3,r3,16
 10045e8:	217fffcc 	andi	r5,r4,65535
 10045ec:	3085883a 	add	r2,r6,r2
 10045f0:	11bfffcc 	andi	r6,r2,65535
 10045f4:	a0c7383a 	mul	r3,r20,r3
 10045f8:	1004d43a 	srli	r2,r2,16
 10045fc:	298bc83a 	sub	r5,r5,r6
 1004600:	2a4b883a 	add	r5,r5,r9
 1004604:	2008d43a 	srli	r4,r4,16
 1004608:	1887883a 	add	r3,r3,r2
 100460c:	280dd43a 	srai	r6,r5,16
 1004610:	18bfffcc 	andi	r2,r3,65535
 1004614:	2089c83a 	sub	r4,r4,r2
 1004618:	2189883a 	add	r4,r4,r6
 100461c:	3900008d 	sth	r4,2(r7)
 1004620:	3940000d 	sth	r5,0(r7)
 1004624:	180cd43a 	srli	r6,r3,16
 1004628:	39c00104 	addi	r7,r7,4
 100462c:	2013d43a 	srai	r9,r4,16
 1004630:	923fe72e 	bgeu	r18,r8,10045d0 <quorem+0x178>
 1004634:	e03fa61e 	bne	fp,zero,10044d0 <quorem+0x78>
 1004638:	b0ffff04 	addi	r3,r22,-4
 100463c:	98c0082e 	bgeu	r19,r3,1004660 <quorem+0x208>
 1004640:	b0bfff17 	ldw	r2,-4(r22)
 1004644:	10000326 	beq	r2,zero,1004654 <quorem+0x1fc>
 1004648:	00000506 	br	1004660 <quorem+0x208>
 100464c:	18800017 	ldw	r2,0(r3)
 1004650:	1000031e 	bne	r2,zero,1004660 <quorem+0x208>
 1004654:	18ffff04 	addi	r3,r3,-4
 1004658:	8c7fffc4 	addi	r17,r17,-1
 100465c:	98fffb36 	bltu	r19,r3,100464c <quorem+0x1f4>
 1004660:	bc400415 	stw	r17,16(r23)
 1004664:	003f9a06 	br	10044d0 <quorem+0x78>
 1004668:	0005883a 	mov	r2,zero
 100466c:	003fc806 	br	1004590 <quorem+0x138>

01004670 <_dtoa_r>:
 1004670:	22001017 	ldw	r8,64(r4)
 1004674:	deffda04 	addi	sp,sp,-152
 1004678:	dd402115 	stw	r21,132(sp)
 100467c:	dd002015 	stw	r20,128(sp)
 1004680:	dc801e15 	stw	r18,120(sp)
 1004684:	dc401d15 	stw	r17,116(sp)
 1004688:	dfc02515 	stw	ra,148(sp)
 100468c:	df002415 	stw	fp,144(sp)
 1004690:	ddc02315 	stw	r23,140(sp)
 1004694:	dd802215 	stw	r22,136(sp)
 1004698:	dcc01f15 	stw	r19,124(sp)
 100469c:	dc001c15 	stw	r16,112(sp)
 10046a0:	d9001615 	stw	r4,88(sp)
 10046a4:	3023883a 	mov	r17,r6
 10046a8:	2829883a 	mov	r20,r5
 10046ac:	d9c01715 	stw	r7,92(sp)
 10046b0:	dc802817 	ldw	r18,160(sp)
 10046b4:	302b883a 	mov	r21,r6
 10046b8:	40000a26 	beq	r8,zero,10046e4 <_dtoa_r+0x74>
 10046bc:	20801117 	ldw	r2,68(r4)
 10046c0:	400b883a 	mov	r5,r8
 10046c4:	40800115 	stw	r2,4(r8)
 10046c8:	20c01117 	ldw	r3,68(r4)
 10046cc:	00800044 	movi	r2,1
 10046d0:	10c4983a 	sll	r2,r2,r3
 10046d4:	40800215 	stw	r2,8(r8)
 10046d8:	1007b6c0 	call	1007b6c <_Bfree>
 10046dc:	d8c01617 	ldw	r3,88(sp)
 10046e0:	18001015 	stw	zero,64(r3)
 10046e4:	8800a316 	blt	r17,zero,1004974 <_dtoa_r+0x304>
 10046e8:	90000015 	stw	zero,0(r18)
 10046ec:	a8dffc2c 	andhi	r3,r21,32752
 10046f0:	009ffc34 	movhi	r2,32752
 10046f4:	18809126 	beq	r3,r2,100493c <_dtoa_r+0x2cc>
 10046f8:	000d883a 	mov	r6,zero
 10046fc:	000f883a 	mov	r7,zero
 1004700:	a009883a 	mov	r4,r20
 1004704:	a80b883a 	mov	r5,r21
 1004708:	dd001215 	stw	r20,72(sp)
 100470c:	dd401315 	stw	r21,76(sp)
 1004710:	100e8a80 	call	100e8a8 <__nedf2>
 1004714:	1000171e 	bne	r2,zero,1004774 <_dtoa_r+0x104>
 1004718:	d9802717 	ldw	r6,156(sp)
 100471c:	00800044 	movi	r2,1
 1004720:	30800015 	stw	r2,0(r6)
 1004724:	d8802917 	ldw	r2,164(sp)
 1004728:	10029b26 	beq	r2,zero,1005198 <_dtoa_r+0xb28>
 100472c:	d9002917 	ldw	r4,164(sp)
 1004730:	00804074 	movhi	r2,257
 1004734:	108b6544 	addi	r2,r2,11669
 1004738:	10ffffc4 	addi	r3,r2,-1
 100473c:	20800015 	stw	r2,0(r4)
 1004740:	1805883a 	mov	r2,r3
 1004744:	dfc02517 	ldw	ra,148(sp)
 1004748:	df002417 	ldw	fp,144(sp)
 100474c:	ddc02317 	ldw	r23,140(sp)
 1004750:	dd802217 	ldw	r22,136(sp)
 1004754:	dd402117 	ldw	r21,132(sp)
 1004758:	dd002017 	ldw	r20,128(sp)
 100475c:	dcc01f17 	ldw	r19,124(sp)
 1004760:	dc801e17 	ldw	r18,120(sp)
 1004764:	dc401d17 	ldw	r17,116(sp)
 1004768:	dc001c17 	ldw	r16,112(sp)
 100476c:	dec02604 	addi	sp,sp,152
 1004770:	f800283a 	ret
 1004774:	d9001617 	ldw	r4,88(sp)
 1004778:	d9401217 	ldw	r5,72(sp)
 100477c:	d8800104 	addi	r2,sp,4
 1004780:	a80d883a 	mov	r6,r21
 1004784:	d9c00204 	addi	r7,sp,8
 1004788:	d8800015 	stw	r2,0(sp)
 100478c:	10081a80 	call	10081a8 <__d2b>
 1004790:	d8800715 	stw	r2,28(sp)
 1004794:	a804d53a 	srli	r2,r21,20
 1004798:	1101ffcc 	andi	r4,r2,2047
 100479c:	20008626 	beq	r4,zero,10049b8 <_dtoa_r+0x348>
 10047a0:	d8c01217 	ldw	r3,72(sp)
 10047a4:	00800434 	movhi	r2,16
 10047a8:	10bfffc4 	addi	r2,r2,-1
 10047ac:	ddc00117 	ldw	r23,4(sp)
 10047b0:	a884703a 	and	r2,r21,r2
 10047b4:	1811883a 	mov	r8,r3
 10047b8:	124ffc34 	orhi	r9,r2,16368
 10047bc:	25bf0044 	addi	r22,r4,-1023
 10047c0:	d8000815 	stw	zero,32(sp)
 10047c4:	0005883a 	mov	r2,zero
 10047c8:	00cffe34 	movhi	r3,16376
 10047cc:	480b883a 	mov	r5,r9
 10047d0:	4009883a 	mov	r4,r8
 10047d4:	180f883a 	mov	r7,r3
 10047d8:	100d883a 	mov	r6,r2
 10047dc:	100e1100 	call	100e110 <__subdf3>
 10047e0:	0218dbf4 	movhi	r8,25455
 10047e4:	4210d844 	addi	r8,r8,17249
 10047e8:	024ff4f4 	movhi	r9,16339
 10047ec:	4a61e9c4 	addi	r9,r9,-30809
 10047f0:	480f883a 	mov	r7,r9
 10047f4:	400d883a 	mov	r6,r8
 10047f8:	180b883a 	mov	r5,r3
 10047fc:	1009883a 	mov	r4,r2
 1004800:	100e2040 	call	100e204 <__muldf3>
 1004804:	0222d874 	movhi	r8,35681
 1004808:	42322cc4 	addi	r8,r8,-14157
 100480c:	024ff1f4 	movhi	r9,16327
 1004810:	4a628a04 	addi	r9,r9,-30168
 1004814:	480f883a 	mov	r7,r9
 1004818:	400d883a 	mov	r6,r8
 100481c:	180b883a 	mov	r5,r3
 1004820:	1009883a 	mov	r4,r2
 1004824:	100e1900 	call	100e190 <__adddf3>
 1004828:	b009883a 	mov	r4,r22
 100482c:	1021883a 	mov	r16,r2
 1004830:	1823883a 	mov	r17,r3
 1004834:	100eb500 	call	100eb50 <__floatsidf>
 1004838:	021427f4 	movhi	r8,20639
 100483c:	421e7ec4 	addi	r8,r8,31227
 1004840:	024ff4f4 	movhi	r9,16339
 1004844:	4a5104c4 	addi	r9,r9,17427
 1004848:	480f883a 	mov	r7,r9
 100484c:	400d883a 	mov	r6,r8
 1004850:	180b883a 	mov	r5,r3
 1004854:	1009883a 	mov	r4,r2
 1004858:	100e2040 	call	100e204 <__muldf3>
 100485c:	180f883a 	mov	r7,r3
 1004860:	880b883a 	mov	r5,r17
 1004864:	100d883a 	mov	r6,r2
 1004868:	8009883a 	mov	r4,r16
 100486c:	100e1900 	call	100e190 <__adddf3>
 1004870:	1009883a 	mov	r4,r2
 1004874:	180b883a 	mov	r5,r3
 1004878:	1021883a 	mov	r16,r2
 100487c:	1823883a 	mov	r17,r3
 1004880:	100ec480 	call	100ec48 <__fixdfsi>
 1004884:	000d883a 	mov	r6,zero
 1004888:	000f883a 	mov	r7,zero
 100488c:	8009883a 	mov	r4,r16
 1004890:	880b883a 	mov	r5,r17
 1004894:	d8800d15 	stw	r2,52(sp)
 1004898:	100ea400 	call	100ea40 <__ltdf2>
 100489c:	10031716 	blt	r2,zero,10054fc <_dtoa_r+0xe8c>
 10048a0:	d8c00d17 	ldw	r3,52(sp)
 10048a4:	00800584 	movi	r2,22
 10048a8:	10c1482e 	bgeu	r2,r3,1004dcc <_dtoa_r+0x75c>
 10048ac:	01000044 	movi	r4,1
 10048b0:	d9000c15 	stw	r4,48(sp)
 10048b4:	bd85c83a 	sub	r2,r23,r22
 10048b8:	11bfffc4 	addi	r6,r2,-1
 10048bc:	30030b16 	blt	r6,zero,10054ec <_dtoa_r+0xe7c>
 10048c0:	d9800a15 	stw	r6,40(sp)
 10048c4:	d8001115 	stw	zero,68(sp)
 10048c8:	d8c00d17 	ldw	r3,52(sp)
 10048cc:	1802ff16 	blt	r3,zero,10054cc <_dtoa_r+0xe5c>
 10048d0:	d9000a17 	ldw	r4,40(sp)
 10048d4:	d8c00915 	stw	r3,36(sp)
 10048d8:	d8001015 	stw	zero,64(sp)
 10048dc:	20c9883a 	add	r4,r4,r3
 10048e0:	d9000a15 	stw	r4,40(sp)
 10048e4:	d9001717 	ldw	r4,92(sp)
 10048e8:	00800244 	movi	r2,9
 10048ec:	11004636 	bltu	r2,r4,1004a08 <_dtoa_r+0x398>
 10048f0:	00800144 	movi	r2,5
 10048f4:	11020416 	blt	r2,r4,1005108 <_dtoa_r+0xa98>
 10048f8:	04400044 	movi	r17,1
 10048fc:	d8c01717 	ldw	r3,92(sp)
 1004900:	00800144 	movi	r2,5
 1004904:	10c1ed36 	bltu	r2,r3,10050bc <_dtoa_r+0xa4c>
 1004908:	18c5883a 	add	r2,r3,r3
 100490c:	1085883a 	add	r2,r2,r2
 1004910:	00c04034 	movhi	r3,256
 1004914:	18d24904 	addi	r3,r3,18724
 1004918:	10c5883a 	add	r2,r2,r3
 100491c:	11000017 	ldw	r4,0(r2)
 1004920:	2000683a 	jmp	r4
 1004924:	01004a10 	cmplti	r4,zero,296
 1004928:	01004a10 	cmplti	r4,zero,296
 100492c:	01005410 	cmplti	r4,zero,336
 1004930:	010053e8 	cmpgeui	r4,zero,335
 1004934:	0100542c 	andhi	r4,zero,336
 1004938:	01005438 	rdprs	r4,zero,336
 100493c:	d9002717 	ldw	r4,156(sp)
 1004940:	0089c3c4 	movi	r2,9999
 1004944:	20800015 	stw	r2,0(r4)
 1004948:	a0001026 	beq	r20,zero,100498c <_dtoa_r+0x31c>
 100494c:	00c04074 	movhi	r3,257
 1004950:	18cc1c04 	addi	r3,r3,12400
 1004954:	d9802917 	ldw	r6,164(sp)
 1004958:	303f7926 	beq	r6,zero,1004740 <_dtoa_r+0xd0>
 100495c:	188000c7 	ldb	r2,3(r3)
 1004960:	190000c4 	addi	r4,r3,3
 1004964:	1000101e 	bne	r2,zero,10049a8 <_dtoa_r+0x338>
 1004968:	d8802917 	ldw	r2,164(sp)
 100496c:	11000015 	stw	r4,0(r2)
 1004970:	003f7306 	br	1004740 <_dtoa_r+0xd0>
 1004974:	00a00034 	movhi	r2,32768
 1004978:	10bfffc4 	addi	r2,r2,-1
 100497c:	00c00044 	movi	r3,1
 1004980:	88aa703a 	and	r21,r17,r2
 1004984:	90c00015 	stw	r3,0(r18)
 1004988:	003f5806 	br	10046ec <_dtoa_r+0x7c>
 100498c:	00800434 	movhi	r2,16
 1004990:	10bfffc4 	addi	r2,r2,-1
 1004994:	a884703a 	and	r2,r21,r2
 1004998:	103fec1e 	bne	r2,zero,100494c <_dtoa_r+0x2dc>
 100499c:	00c04074 	movhi	r3,257
 10049a0:	18cc1904 	addi	r3,r3,12388
 10049a4:	003feb06 	br	1004954 <_dtoa_r+0x2e4>
 10049a8:	d8802917 	ldw	r2,164(sp)
 10049ac:	19000204 	addi	r4,r3,8
 10049b0:	11000015 	stw	r4,0(r2)
 10049b4:	003f6206 	br	1004740 <_dtoa_r+0xd0>
 10049b8:	ddc00117 	ldw	r23,4(sp)
 10049bc:	d8800217 	ldw	r2,8(sp)
 10049c0:	01000804 	movi	r4,32
 10049c4:	b8c10c84 	addi	r3,r23,1074
 10049c8:	18a3883a 	add	r17,r3,r2
 10049cc:	2441b80e 	bge	r4,r17,10050b0 <_dtoa_r+0xa40>
 10049d0:	00c01004 	movi	r3,64
 10049d4:	1c47c83a 	sub	r3,r3,r17
 10049d8:	88bff804 	addi	r2,r17,-32
 10049dc:	a8c6983a 	sll	r3,r21,r3
 10049e0:	a084d83a 	srl	r2,r20,r2
 10049e4:	1888b03a 	or	r4,r3,r2
 10049e8:	100ed940 	call	100ed94 <__floatunsidf>
 10049ec:	1011883a 	mov	r8,r2
 10049f0:	00bf8434 	movhi	r2,65040
 10049f4:	01000044 	movi	r4,1
 10049f8:	10d3883a 	add	r9,r2,r3
 10049fc:	8dbef344 	addi	r22,r17,-1075
 1004a00:	d9000815 	stw	r4,32(sp)
 1004a04:	003f6f06 	br	10047c4 <_dtoa_r+0x154>
 1004a08:	d8001715 	stw	zero,92(sp)
 1004a0c:	04400044 	movi	r17,1
 1004a10:	00bfffc4 	movi	r2,-1
 1004a14:	00c00044 	movi	r3,1
 1004a18:	d8800e15 	stw	r2,56(sp)
 1004a1c:	d8002615 	stw	zero,152(sp)
 1004a20:	d8800f15 	stw	r2,60(sp)
 1004a24:	d8c00b15 	stw	r3,44(sp)
 1004a28:	1021883a 	mov	r16,r2
 1004a2c:	d8801617 	ldw	r2,88(sp)
 1004a30:	10001115 	stw	zero,68(r2)
 1004a34:	d8801617 	ldw	r2,88(sp)
 1004a38:	11401117 	ldw	r5,68(r2)
 1004a3c:	1009883a 	mov	r4,r2
 1004a40:	10080ec0 	call	10080ec <_Balloc>
 1004a44:	d8c01617 	ldw	r3,88(sp)
 1004a48:	d8800515 	stw	r2,20(sp)
 1004a4c:	18801015 	stw	r2,64(r3)
 1004a50:	00800384 	movi	r2,14
 1004a54:	14006836 	bltu	r2,r16,1004bf8 <_dtoa_r+0x588>
 1004a58:	8805003a 	cmpeq	r2,r17,zero
 1004a5c:	1000661e 	bne	r2,zero,1004bf8 <_dtoa_r+0x588>
 1004a60:	d9000d17 	ldw	r4,52(sp)
 1004a64:	0102300e 	bge	zero,r4,1005328 <_dtoa_r+0xcb8>
 1004a68:	208003cc 	andi	r2,r4,15
 1004a6c:	100490fa 	slli	r2,r2,3
 1004a70:	2025d13a 	srai	r18,r4,4
 1004a74:	00c04074 	movhi	r3,257
 1004a78:	18cc2e04 	addi	r3,r3,12472
 1004a7c:	10c5883a 	add	r2,r2,r3
 1004a80:	90c0040c 	andi	r3,r18,16
 1004a84:	14000017 	ldw	r16,0(r2)
 1004a88:	14400117 	ldw	r17,4(r2)
 1004a8c:	18036a1e 	bne	r3,zero,1005838 <_dtoa_r+0x11c8>
 1004a90:	05800084 	movi	r22,2
 1004a94:	90001026 	beq	r18,zero,1004ad8 <_dtoa_r+0x468>
 1004a98:	04c04074 	movhi	r19,257
 1004a9c:	9ccc6004 	addi	r19,r19,12672
 1004aa0:	9080004c 	andi	r2,r18,1
 1004aa4:	1005003a 	cmpeq	r2,r2,zero
 1004aa8:	1000081e 	bne	r2,zero,1004acc <_dtoa_r+0x45c>
 1004aac:	99800017 	ldw	r6,0(r19)
 1004ab0:	99c00117 	ldw	r7,4(r19)
 1004ab4:	880b883a 	mov	r5,r17
 1004ab8:	8009883a 	mov	r4,r16
 1004abc:	100e2040 	call	100e204 <__muldf3>
 1004ac0:	1021883a 	mov	r16,r2
 1004ac4:	b5800044 	addi	r22,r22,1
 1004ac8:	1823883a 	mov	r17,r3
 1004acc:	9025d07a 	srai	r18,r18,1
 1004ad0:	9cc00204 	addi	r19,r19,8
 1004ad4:	903ff21e 	bne	r18,zero,1004aa0 <_dtoa_r+0x430>
 1004ad8:	a80b883a 	mov	r5,r21
 1004adc:	a009883a 	mov	r4,r20
 1004ae0:	880f883a 	mov	r7,r17
 1004ae4:	800d883a 	mov	r6,r16
 1004ae8:	100e5c80 	call	100e5c8 <__divdf3>
 1004aec:	1029883a 	mov	r20,r2
 1004af0:	182b883a 	mov	r21,r3
 1004af4:	d8c00c17 	ldw	r3,48(sp)
 1004af8:	1805003a 	cmpeq	r2,r3,zero
 1004afc:	1000081e 	bne	r2,zero,1004b20 <_dtoa_r+0x4b0>
 1004b00:	0005883a 	mov	r2,zero
 1004b04:	00cffc34 	movhi	r3,16368
 1004b08:	180f883a 	mov	r7,r3
 1004b0c:	a009883a 	mov	r4,r20
 1004b10:	a80b883a 	mov	r5,r21
 1004b14:	100d883a 	mov	r6,r2
 1004b18:	100ea400 	call	100ea40 <__ltdf2>
 1004b1c:	1003fe16 	blt	r2,zero,1005b18 <_dtoa_r+0x14a8>
 1004b20:	b009883a 	mov	r4,r22
 1004b24:	100eb500 	call	100eb50 <__floatsidf>
 1004b28:	180b883a 	mov	r5,r3
 1004b2c:	1009883a 	mov	r4,r2
 1004b30:	a00d883a 	mov	r6,r20
 1004b34:	a80f883a 	mov	r7,r21
 1004b38:	100e2040 	call	100e204 <__muldf3>
 1004b3c:	0011883a 	mov	r8,zero
 1004b40:	02500734 	movhi	r9,16412
 1004b44:	1009883a 	mov	r4,r2
 1004b48:	180b883a 	mov	r5,r3
 1004b4c:	480f883a 	mov	r7,r9
 1004b50:	400d883a 	mov	r6,r8
 1004b54:	100e1900 	call	100e190 <__adddf3>
 1004b58:	d9000f17 	ldw	r4,60(sp)
 1004b5c:	102d883a 	mov	r22,r2
 1004b60:	00bf3034 	movhi	r2,64704
 1004b64:	18b9883a 	add	fp,r3,r2
 1004b68:	e02f883a 	mov	r23,fp
 1004b6c:	20028f1e 	bne	r4,zero,10055ac <_dtoa_r+0xf3c>
 1004b70:	0005883a 	mov	r2,zero
 1004b74:	00d00534 	movhi	r3,16404
 1004b78:	a009883a 	mov	r4,r20
 1004b7c:	a80b883a 	mov	r5,r21
 1004b80:	180f883a 	mov	r7,r3
 1004b84:	100d883a 	mov	r6,r2
 1004b88:	100e1100 	call	100e110 <__subdf3>
 1004b8c:	1009883a 	mov	r4,r2
 1004b90:	e00f883a 	mov	r7,fp
 1004b94:	180b883a 	mov	r5,r3
 1004b98:	b00d883a 	mov	r6,r22
 1004b9c:	1025883a 	mov	r18,r2
 1004ba0:	1827883a 	mov	r19,r3
 1004ba4:	100e9300 	call	100e930 <__gtdf2>
 1004ba8:	00834f16 	blt	zero,r2,10058e8 <_dtoa_r+0x1278>
 1004bac:	e0e0003c 	xorhi	r3,fp,32768
 1004bb0:	9009883a 	mov	r4,r18
 1004bb4:	980b883a 	mov	r5,r19
 1004bb8:	180f883a 	mov	r7,r3
 1004bbc:	b00d883a 	mov	r6,r22
 1004bc0:	100ea400 	call	100ea40 <__ltdf2>
 1004bc4:	1000080e 	bge	r2,zero,1004be8 <_dtoa_r+0x578>
 1004bc8:	0027883a 	mov	r19,zero
 1004bcc:	0025883a 	mov	r18,zero
 1004bd0:	d8802617 	ldw	r2,152(sp)
 1004bd4:	df000517 	ldw	fp,20(sp)
 1004bd8:	d8000615 	stw	zero,24(sp)
 1004bdc:	0084303a 	nor	r2,zero,r2
 1004be0:	d8800d15 	stw	r2,52(sp)
 1004be4:	00019b06 	br	1005254 <_dtoa_r+0xbe4>
 1004be8:	d9801217 	ldw	r6,72(sp)
 1004bec:	d8801317 	ldw	r2,76(sp)
 1004bf0:	3029883a 	mov	r20,r6
 1004bf4:	102b883a 	mov	r21,r2
 1004bf8:	d8c00217 	ldw	r3,8(sp)
 1004bfc:	18008516 	blt	r3,zero,1004e14 <_dtoa_r+0x7a4>
 1004c00:	d9000d17 	ldw	r4,52(sp)
 1004c04:	00800384 	movi	r2,14
 1004c08:	11008216 	blt	r2,r4,1004e14 <_dtoa_r+0x7a4>
 1004c0c:	200490fa 	slli	r2,r4,3
 1004c10:	d9802617 	ldw	r6,152(sp)
 1004c14:	00c04074 	movhi	r3,257
 1004c18:	18cc2e04 	addi	r3,r3,12472
 1004c1c:	10c5883a 	add	r2,r2,r3
 1004c20:	14800017 	ldw	r18,0(r2)
 1004c24:	14c00117 	ldw	r19,4(r2)
 1004c28:	30031e16 	blt	r6,zero,10058a4 <_dtoa_r+0x1234>
 1004c2c:	d9000517 	ldw	r4,20(sp)
 1004c30:	d8c00f17 	ldw	r3,60(sp)
 1004c34:	a823883a 	mov	r17,r21
 1004c38:	a021883a 	mov	r16,r20
 1004c3c:	192b883a 	add	r21,r3,r4
 1004c40:	2039883a 	mov	fp,r4
 1004c44:	00000f06 	br	1004c84 <_dtoa_r+0x614>
 1004c48:	0005883a 	mov	r2,zero
 1004c4c:	00d00934 	movhi	r3,16420
 1004c50:	5009883a 	mov	r4,r10
 1004c54:	580b883a 	mov	r5,r11
 1004c58:	180f883a 	mov	r7,r3
 1004c5c:	100d883a 	mov	r6,r2
 1004c60:	100e2040 	call	100e204 <__muldf3>
 1004c64:	180b883a 	mov	r5,r3
 1004c68:	000d883a 	mov	r6,zero
 1004c6c:	000f883a 	mov	r7,zero
 1004c70:	1009883a 	mov	r4,r2
 1004c74:	1021883a 	mov	r16,r2
 1004c78:	1823883a 	mov	r17,r3
 1004c7c:	100e8a80 	call	100e8a8 <__nedf2>
 1004c80:	10004526 	beq	r2,zero,1004d98 <_dtoa_r+0x728>
 1004c84:	900d883a 	mov	r6,r18
 1004c88:	980f883a 	mov	r7,r19
 1004c8c:	8009883a 	mov	r4,r16
 1004c90:	880b883a 	mov	r5,r17
 1004c94:	100e5c80 	call	100e5c8 <__divdf3>
 1004c98:	180b883a 	mov	r5,r3
 1004c9c:	1009883a 	mov	r4,r2
 1004ca0:	100ec480 	call	100ec48 <__fixdfsi>
 1004ca4:	1009883a 	mov	r4,r2
 1004ca8:	1029883a 	mov	r20,r2
 1004cac:	100eb500 	call	100eb50 <__floatsidf>
 1004cb0:	180f883a 	mov	r7,r3
 1004cb4:	9009883a 	mov	r4,r18
 1004cb8:	980b883a 	mov	r5,r19
 1004cbc:	100d883a 	mov	r6,r2
 1004cc0:	100e2040 	call	100e204 <__muldf3>
 1004cc4:	180f883a 	mov	r7,r3
 1004cc8:	880b883a 	mov	r5,r17
 1004ccc:	8009883a 	mov	r4,r16
 1004cd0:	100d883a 	mov	r6,r2
 1004cd4:	100e1100 	call	100e110 <__subdf3>
 1004cd8:	1015883a 	mov	r10,r2
 1004cdc:	a0800c04 	addi	r2,r20,48
 1004ce0:	e0800005 	stb	r2,0(fp)
 1004ce4:	e7000044 	addi	fp,fp,1
 1004ce8:	1817883a 	mov	r11,r3
 1004cec:	e57fd61e 	bne	fp,r21,1004c48 <_dtoa_r+0x5d8>
 1004cf0:	500d883a 	mov	r6,r10
 1004cf4:	180f883a 	mov	r7,r3
 1004cf8:	5009883a 	mov	r4,r10
 1004cfc:	180b883a 	mov	r5,r3
 1004d00:	100e1900 	call	100e190 <__adddf3>
 1004d04:	100d883a 	mov	r6,r2
 1004d08:	9009883a 	mov	r4,r18
 1004d0c:	980b883a 	mov	r5,r19
 1004d10:	180f883a 	mov	r7,r3
 1004d14:	1021883a 	mov	r16,r2
 1004d18:	1823883a 	mov	r17,r3
 1004d1c:	100ea400 	call	100ea40 <__ltdf2>
 1004d20:	10000816 	blt	r2,zero,1004d44 <_dtoa_r+0x6d4>
 1004d24:	980b883a 	mov	r5,r19
 1004d28:	800d883a 	mov	r6,r16
 1004d2c:	880f883a 	mov	r7,r17
 1004d30:	9009883a 	mov	r4,r18
 1004d34:	100e8200 	call	100e820 <__eqdf2>
 1004d38:	1000171e 	bne	r2,zero,1004d98 <_dtoa_r+0x728>
 1004d3c:	a080004c 	andi	r2,r20,1
 1004d40:	10001526 	beq	r2,zero,1004d98 <_dtoa_r+0x728>
 1004d44:	d8800d17 	ldw	r2,52(sp)
 1004d48:	d8800415 	stw	r2,16(sp)
 1004d4c:	e009883a 	mov	r4,fp
 1004d50:	213fffc4 	addi	r4,r4,-1
 1004d54:	20c00007 	ldb	r3,0(r4)
 1004d58:	00800e44 	movi	r2,57
 1004d5c:	1880081e 	bne	r3,r2,1004d80 <_dtoa_r+0x710>
 1004d60:	d8800517 	ldw	r2,20(sp)
 1004d64:	113ffa1e 	bne	r2,r4,1004d50 <_dtoa_r+0x6e0>
 1004d68:	d8c00417 	ldw	r3,16(sp)
 1004d6c:	d9800517 	ldw	r6,20(sp)
 1004d70:	00800c04 	movi	r2,48
 1004d74:	18c00044 	addi	r3,r3,1
 1004d78:	d8c00415 	stw	r3,16(sp)
 1004d7c:	30800005 	stb	r2,0(r6)
 1004d80:	20800003 	ldbu	r2,0(r4)
 1004d84:	d8c00417 	ldw	r3,16(sp)
 1004d88:	27000044 	addi	fp,r4,1
 1004d8c:	10800044 	addi	r2,r2,1
 1004d90:	d8c00d15 	stw	r3,52(sp)
 1004d94:	20800005 	stb	r2,0(r4)
 1004d98:	d9001617 	ldw	r4,88(sp)
 1004d9c:	d9400717 	ldw	r5,28(sp)
 1004da0:	1007b6c0 	call	1007b6c <_Bfree>
 1004da4:	e0000005 	stb	zero,0(fp)
 1004da8:	d9800d17 	ldw	r6,52(sp)
 1004dac:	d8c02717 	ldw	r3,156(sp)
 1004db0:	d9002917 	ldw	r4,164(sp)
 1004db4:	30800044 	addi	r2,r6,1
 1004db8:	18800015 	stw	r2,0(r3)
 1004dbc:	20029c26 	beq	r4,zero,1005830 <_dtoa_r+0x11c0>
 1004dc0:	d8c00517 	ldw	r3,20(sp)
 1004dc4:	27000015 	stw	fp,0(r4)
 1004dc8:	003e5d06 	br	1004740 <_dtoa_r+0xd0>
 1004dcc:	d9800d17 	ldw	r6,52(sp)
 1004dd0:	00c04074 	movhi	r3,257
 1004dd4:	18cc2e04 	addi	r3,r3,12472
 1004dd8:	d9001217 	ldw	r4,72(sp)
 1004ddc:	300490fa 	slli	r2,r6,3
 1004de0:	d9401317 	ldw	r5,76(sp)
 1004de4:	10c5883a 	add	r2,r2,r3
 1004de8:	12000017 	ldw	r8,0(r2)
 1004dec:	12400117 	ldw	r9,4(r2)
 1004df0:	400d883a 	mov	r6,r8
 1004df4:	480f883a 	mov	r7,r9
 1004df8:	100ea400 	call	100ea40 <__ltdf2>
 1004dfc:	1000030e 	bge	r2,zero,1004e0c <_dtoa_r+0x79c>
 1004e00:	d8800d17 	ldw	r2,52(sp)
 1004e04:	10bfffc4 	addi	r2,r2,-1
 1004e08:	d8800d15 	stw	r2,52(sp)
 1004e0c:	d8000c15 	stw	zero,48(sp)
 1004e10:	003ea806 	br	10048b4 <_dtoa_r+0x244>
 1004e14:	d9000b17 	ldw	r4,44(sp)
 1004e18:	202cc03a 	cmpne	r22,r4,zero
 1004e1c:	b000c71e 	bne	r22,zero,100513c <_dtoa_r+0xacc>
 1004e20:	dc001117 	ldw	r16,68(sp)
 1004e24:	dc801017 	ldw	r18,64(sp)
 1004e28:	0027883a 	mov	r19,zero
 1004e2c:	04000b0e 	bge	zero,r16,1004e5c <_dtoa_r+0x7ec>
 1004e30:	d8c00a17 	ldw	r3,40(sp)
 1004e34:	00c0090e 	bge	zero,r3,1004e5c <_dtoa_r+0x7ec>
 1004e38:	8005883a 	mov	r2,r16
 1004e3c:	1c011316 	blt	r3,r16,100528c <_dtoa_r+0xc1c>
 1004e40:	d9000a17 	ldw	r4,40(sp)
 1004e44:	d9801117 	ldw	r6,68(sp)
 1004e48:	80a1c83a 	sub	r16,r16,r2
 1004e4c:	2089c83a 	sub	r4,r4,r2
 1004e50:	308dc83a 	sub	r6,r6,r2
 1004e54:	d9000a15 	stw	r4,40(sp)
 1004e58:	d9801115 	stw	r6,68(sp)
 1004e5c:	d8801017 	ldw	r2,64(sp)
 1004e60:	0080150e 	bge	zero,r2,1004eb8 <_dtoa_r+0x848>
 1004e64:	d8c00b17 	ldw	r3,44(sp)
 1004e68:	1805003a 	cmpeq	r2,r3,zero
 1004e6c:	1001c91e 	bne	r2,zero,1005594 <_dtoa_r+0xf24>
 1004e70:	04800e0e 	bge	zero,r18,1004eac <_dtoa_r+0x83c>
 1004e74:	d9001617 	ldw	r4,88(sp)
 1004e78:	980b883a 	mov	r5,r19
 1004e7c:	900d883a 	mov	r6,r18
 1004e80:	10089200 	call	1008920 <__pow5mult>
 1004e84:	d9001617 	ldw	r4,88(sp)
 1004e88:	d9800717 	ldw	r6,28(sp)
 1004e8c:	100b883a 	mov	r5,r2
 1004e90:	1027883a 	mov	r19,r2
 1004e94:	10085fc0 	call	10085fc <__multiply>
 1004e98:	d9001617 	ldw	r4,88(sp)
 1004e9c:	d9400717 	ldw	r5,28(sp)
 1004ea0:	1023883a 	mov	r17,r2
 1004ea4:	1007b6c0 	call	1007b6c <_Bfree>
 1004ea8:	dc400715 	stw	r17,28(sp)
 1004eac:	d9001017 	ldw	r4,64(sp)
 1004eb0:	248dc83a 	sub	r6,r4,r18
 1004eb4:	30010e1e 	bne	r6,zero,10052f0 <_dtoa_r+0xc80>
 1004eb8:	d9001617 	ldw	r4,88(sp)
 1004ebc:	04400044 	movi	r17,1
 1004ec0:	880b883a 	mov	r5,r17
 1004ec4:	10087e40 	call	10087e4 <__i2b>
 1004ec8:	d9800917 	ldw	r6,36(sp)
 1004ecc:	1025883a 	mov	r18,r2
 1004ed0:	0180040e 	bge	zero,r6,1004ee4 <_dtoa_r+0x874>
 1004ed4:	d9001617 	ldw	r4,88(sp)
 1004ed8:	100b883a 	mov	r5,r2
 1004edc:	10089200 	call	1008920 <__pow5mult>
 1004ee0:	1025883a 	mov	r18,r2
 1004ee4:	d8801717 	ldw	r2,92(sp)
 1004ee8:	8880f30e 	bge	r17,r2,10052b8 <_dtoa_r+0xc48>
 1004eec:	0023883a 	mov	r17,zero
 1004ef0:	d9800917 	ldw	r6,36(sp)
 1004ef4:	30019e1e 	bne	r6,zero,1005570 <_dtoa_r+0xf00>
 1004ef8:	00c00044 	movi	r3,1
 1004efc:	d9000a17 	ldw	r4,40(sp)
 1004f00:	20c5883a 	add	r2,r4,r3
 1004f04:	10c007cc 	andi	r3,r2,31
 1004f08:	1800841e 	bne	r3,zero,100511c <_dtoa_r+0xaac>
 1004f0c:	00800704 	movi	r2,28
 1004f10:	d9000a17 	ldw	r4,40(sp)
 1004f14:	d9801117 	ldw	r6,68(sp)
 1004f18:	80a1883a 	add	r16,r16,r2
 1004f1c:	2089883a 	add	r4,r4,r2
 1004f20:	308d883a 	add	r6,r6,r2
 1004f24:	d9000a15 	stw	r4,40(sp)
 1004f28:	d9801115 	stw	r6,68(sp)
 1004f2c:	d8801117 	ldw	r2,68(sp)
 1004f30:	0080050e 	bge	zero,r2,1004f48 <_dtoa_r+0x8d8>
 1004f34:	d9400717 	ldw	r5,28(sp)
 1004f38:	d9001617 	ldw	r4,88(sp)
 1004f3c:	100d883a 	mov	r6,r2
 1004f40:	10084b00 	call	10084b0 <__lshift>
 1004f44:	d8800715 	stw	r2,28(sp)
 1004f48:	d8c00a17 	ldw	r3,40(sp)
 1004f4c:	00c0050e 	bge	zero,r3,1004f64 <_dtoa_r+0x8f4>
 1004f50:	d9001617 	ldw	r4,88(sp)
 1004f54:	900b883a 	mov	r5,r18
 1004f58:	180d883a 	mov	r6,r3
 1004f5c:	10084b00 	call	10084b0 <__lshift>
 1004f60:	1025883a 	mov	r18,r2
 1004f64:	d9000c17 	ldw	r4,48(sp)
 1004f68:	2005003a 	cmpeq	r2,r4,zero
 1004f6c:	10016f26 	beq	r2,zero,100552c <_dtoa_r+0xebc>
 1004f70:	d9000f17 	ldw	r4,60(sp)
 1004f74:	0102170e 	bge	zero,r4,10057d4 <_dtoa_r+0x1164>
 1004f78:	d9800b17 	ldw	r6,44(sp)
 1004f7c:	3005003a 	cmpeq	r2,r6,zero
 1004f80:	1000881e 	bne	r2,zero,10051a4 <_dtoa_r+0xb34>
 1004f84:	0400050e 	bge	zero,r16,1004f9c <_dtoa_r+0x92c>
 1004f88:	d9001617 	ldw	r4,88(sp)
 1004f8c:	980b883a 	mov	r5,r19
 1004f90:	800d883a 	mov	r6,r16
 1004f94:	10084b00 	call	10084b0 <__lshift>
 1004f98:	1027883a 	mov	r19,r2
 1004f9c:	8804c03a 	cmpne	r2,r17,zero
 1004fa0:	1002541e 	bne	r2,zero,10058f4 <_dtoa_r+0x1284>
 1004fa4:	980b883a 	mov	r5,r19
 1004fa8:	dd800517 	ldw	r22,20(sp)
 1004fac:	dcc00615 	stw	r19,24(sp)
 1004fb0:	a700004c 	andi	fp,r20,1
 1004fb4:	2827883a 	mov	r19,r5
 1004fb8:	d9000717 	ldw	r4,28(sp)
 1004fbc:	900b883a 	mov	r5,r18
 1004fc0:	10044580 	call	1004458 <quorem>
 1004fc4:	d9000717 	ldw	r4,28(sp)
 1004fc8:	d9400617 	ldw	r5,24(sp)
 1004fcc:	1023883a 	mov	r17,r2
 1004fd0:	8dc00c04 	addi	r23,r17,48
 1004fd4:	1007cc80 	call	1007cc8 <__mcmp>
 1004fd8:	d9001617 	ldw	r4,88(sp)
 1004fdc:	900b883a 	mov	r5,r18
 1004fe0:	980d883a 	mov	r6,r19
 1004fe4:	1029883a 	mov	r20,r2
 1004fe8:	10083240 	call	1008324 <__mdiff>
 1004fec:	102b883a 	mov	r21,r2
 1004ff0:	10800317 	ldw	r2,12(r2)
 1004ff4:	1001281e 	bne	r2,zero,1005498 <_dtoa_r+0xe28>
 1004ff8:	d9000717 	ldw	r4,28(sp)
 1004ffc:	a80b883a 	mov	r5,r21
 1005000:	1007cc80 	call	1007cc8 <__mcmp>
 1005004:	d9001617 	ldw	r4,88(sp)
 1005008:	1021883a 	mov	r16,r2
 100500c:	a80b883a 	mov	r5,r21
 1005010:	1007b6c0 	call	1007b6c <_Bfree>
 1005014:	8000041e 	bne	r16,zero,1005028 <_dtoa_r+0x9b8>
 1005018:	d8801717 	ldw	r2,92(sp)
 100501c:	1000021e 	bne	r2,zero,1005028 <_dtoa_r+0x9b8>
 1005020:	e004c03a 	cmpne	r2,fp,zero
 1005024:	10011726 	beq	r2,zero,1005484 <_dtoa_r+0xe14>
 1005028:	a0010616 	blt	r20,zero,1005444 <_dtoa_r+0xdd4>
 100502c:	a000041e 	bne	r20,zero,1005040 <_dtoa_r+0x9d0>
 1005030:	d8c01717 	ldw	r3,92(sp)
 1005034:	1800021e 	bne	r3,zero,1005040 <_dtoa_r+0x9d0>
 1005038:	e004c03a 	cmpne	r2,fp,zero
 100503c:	10010126 	beq	r2,zero,1005444 <_dtoa_r+0xdd4>
 1005040:	04023d16 	blt	zero,r16,1005938 <_dtoa_r+0x12c8>
 1005044:	b5c00005 	stb	r23,0(r22)
 1005048:	d9800517 	ldw	r6,20(sp)
 100504c:	d9000f17 	ldw	r4,60(sp)
 1005050:	b5800044 	addi	r22,r22,1
 1005054:	3105883a 	add	r2,r6,r4
 1005058:	b0806526 	beq	r22,r2,10051f0 <_dtoa_r+0xb80>
 100505c:	d9400717 	ldw	r5,28(sp)
 1005060:	d9001617 	ldw	r4,88(sp)
 1005064:	01800284 	movi	r6,10
 1005068:	000f883a 	mov	r7,zero
 100506c:	10088200 	call	1008820 <__multadd>
 1005070:	d8800715 	stw	r2,28(sp)
 1005074:	d8800617 	ldw	r2,24(sp)
 1005078:	14c10c26 	beq	r2,r19,10054ac <_dtoa_r+0xe3c>
 100507c:	d9400617 	ldw	r5,24(sp)
 1005080:	d9001617 	ldw	r4,88(sp)
 1005084:	01800284 	movi	r6,10
 1005088:	000f883a 	mov	r7,zero
 100508c:	10088200 	call	1008820 <__multadd>
 1005090:	d9001617 	ldw	r4,88(sp)
 1005094:	980b883a 	mov	r5,r19
 1005098:	01800284 	movi	r6,10
 100509c:	000f883a 	mov	r7,zero
 10050a0:	d8800615 	stw	r2,24(sp)
 10050a4:	10088200 	call	1008820 <__multadd>
 10050a8:	1027883a 	mov	r19,r2
 10050ac:	003fc206 	br	1004fb8 <_dtoa_r+0x948>
 10050b0:	2445c83a 	sub	r2,r4,r17
 10050b4:	a088983a 	sll	r4,r20,r2
 10050b8:	003e4b06 	br	10049e8 <_dtoa_r+0x378>
 10050bc:	01bfffc4 	movi	r6,-1
 10050c0:	00800044 	movi	r2,1
 10050c4:	d9800e15 	stw	r6,56(sp)
 10050c8:	d9800f15 	stw	r6,60(sp)
 10050cc:	d8800b15 	stw	r2,44(sp)
 10050d0:	d8c01617 	ldw	r3,88(sp)
 10050d4:	008005c4 	movi	r2,23
 10050d8:	18001115 	stw	zero,68(r3)
 10050dc:	1580082e 	bgeu	r2,r22,1005100 <_dtoa_r+0xa90>
 10050e0:	00c00104 	movi	r3,4
 10050e4:	0009883a 	mov	r4,zero
 10050e8:	18c7883a 	add	r3,r3,r3
 10050ec:	18800504 	addi	r2,r3,20
 10050f0:	21000044 	addi	r4,r4,1
 10050f4:	b0bffc2e 	bgeu	r22,r2,10050e8 <_dtoa_r+0xa78>
 10050f8:	d9801617 	ldw	r6,88(sp)
 10050fc:	31001115 	stw	r4,68(r6)
 1005100:	dc000f17 	ldw	r16,60(sp)
 1005104:	003e4b06 	br	1004a34 <_dtoa_r+0x3c4>
 1005108:	d9801717 	ldw	r6,92(sp)
 100510c:	0023883a 	mov	r17,zero
 1005110:	31bfff04 	addi	r6,r6,-4
 1005114:	d9801715 	stw	r6,92(sp)
 1005118:	003df806 	br	10048fc <_dtoa_r+0x28c>
 100511c:	00800804 	movi	r2,32
 1005120:	10c9c83a 	sub	r4,r2,r3
 1005124:	00c00104 	movi	r3,4
 1005128:	19005a16 	blt	r3,r4,1005294 <_dtoa_r+0xc24>
 100512c:	008000c4 	movi	r2,3
 1005130:	113f7e16 	blt	r2,r4,1004f2c <_dtoa_r+0x8bc>
 1005134:	20800704 	addi	r2,r4,28
 1005138:	003f7506 	br	1004f10 <_dtoa_r+0x8a0>
 100513c:	d9801717 	ldw	r6,92(sp)
 1005140:	00800044 	movi	r2,1
 1005144:	1180a10e 	bge	r2,r6,10053cc <_dtoa_r+0xd5c>
 1005148:	d9800f17 	ldw	r6,60(sp)
 100514c:	d8c01017 	ldw	r3,64(sp)
 1005150:	30bfffc4 	addi	r2,r6,-1
 1005154:	1881c616 	blt	r3,r2,1005870 <_dtoa_r+0x1200>
 1005158:	18a5c83a 	sub	r18,r3,r2
 100515c:	d8800f17 	ldw	r2,60(sp)
 1005160:	10026216 	blt	r2,zero,1005aec <_dtoa_r+0x147c>
 1005164:	dc001117 	ldw	r16,68(sp)
 1005168:	1007883a 	mov	r3,r2
 100516c:	d9800a17 	ldw	r6,40(sp)
 1005170:	d8801117 	ldw	r2,68(sp)
 1005174:	d9001617 	ldw	r4,88(sp)
 1005178:	30cd883a 	add	r6,r6,r3
 100517c:	10c5883a 	add	r2,r2,r3
 1005180:	01400044 	movi	r5,1
 1005184:	d9800a15 	stw	r6,40(sp)
 1005188:	d8801115 	stw	r2,68(sp)
 100518c:	10087e40 	call	10087e4 <__i2b>
 1005190:	1027883a 	mov	r19,r2
 1005194:	003f2506 	br	1004e2c <_dtoa_r+0x7bc>
 1005198:	00c04074 	movhi	r3,257
 100519c:	18cb6504 	addi	r3,r3,11668
 10051a0:	003d6706 	br	1004740 <_dtoa_r+0xd0>
 10051a4:	dd800517 	ldw	r22,20(sp)
 10051a8:	04000044 	movi	r16,1
 10051ac:	00000706 	br	10051cc <_dtoa_r+0xb5c>
 10051b0:	d9400717 	ldw	r5,28(sp)
 10051b4:	d9001617 	ldw	r4,88(sp)
 10051b8:	01800284 	movi	r6,10
 10051bc:	000f883a 	mov	r7,zero
 10051c0:	10088200 	call	1008820 <__multadd>
 10051c4:	d8800715 	stw	r2,28(sp)
 10051c8:	84000044 	addi	r16,r16,1
 10051cc:	d9000717 	ldw	r4,28(sp)
 10051d0:	900b883a 	mov	r5,r18
 10051d4:	10044580 	call	1004458 <quorem>
 10051d8:	15c00c04 	addi	r23,r2,48
 10051dc:	b5c00005 	stb	r23,0(r22)
 10051e0:	d8c00f17 	ldw	r3,60(sp)
 10051e4:	b5800044 	addi	r22,r22,1
 10051e8:	80fff116 	blt	r16,r3,10051b0 <_dtoa_r+0xb40>
 10051ec:	d8000615 	stw	zero,24(sp)
 10051f0:	d9400717 	ldw	r5,28(sp)
 10051f4:	d9001617 	ldw	r4,88(sp)
 10051f8:	01800044 	movi	r6,1
 10051fc:	10084b00 	call	10084b0 <__lshift>
 1005200:	1009883a 	mov	r4,r2
 1005204:	900b883a 	mov	r5,r18
 1005208:	d8800715 	stw	r2,28(sp)
 100520c:	1007cc80 	call	1007cc8 <__mcmp>
 1005210:	00803c0e 	bge	zero,r2,1005304 <_dtoa_r+0xc94>
 1005214:	b009883a 	mov	r4,r22
 1005218:	213fffc4 	addi	r4,r4,-1
 100521c:	21400003 	ldbu	r5,0(r4)
 1005220:	00800e44 	movi	r2,57
 1005224:	28c03fcc 	andi	r3,r5,255
 1005228:	18c0201c 	xori	r3,r3,128
 100522c:	18ffe004 	addi	r3,r3,-128
 1005230:	1881981e 	bne	r3,r2,1005894 <_dtoa_r+0x1224>
 1005234:	d9800517 	ldw	r6,20(sp)
 1005238:	21bff71e 	bne	r4,r6,1005218 <_dtoa_r+0xba8>
 100523c:	d8800d17 	ldw	r2,52(sp)
 1005240:	37000044 	addi	fp,r6,1
 1005244:	10800044 	addi	r2,r2,1
 1005248:	d8800d15 	stw	r2,52(sp)
 100524c:	00800c44 	movi	r2,49
 1005250:	30800005 	stb	r2,0(r6)
 1005254:	d9001617 	ldw	r4,88(sp)
 1005258:	900b883a 	mov	r5,r18
 100525c:	1007b6c0 	call	1007b6c <_Bfree>
 1005260:	983ecd26 	beq	r19,zero,1004d98 <_dtoa_r+0x728>
 1005264:	d8c00617 	ldw	r3,24(sp)
 1005268:	18000426 	beq	r3,zero,100527c <_dtoa_r+0xc0c>
 100526c:	1cc00326 	beq	r3,r19,100527c <_dtoa_r+0xc0c>
 1005270:	d9001617 	ldw	r4,88(sp)
 1005274:	180b883a 	mov	r5,r3
 1005278:	1007b6c0 	call	1007b6c <_Bfree>
 100527c:	d9001617 	ldw	r4,88(sp)
 1005280:	980b883a 	mov	r5,r19
 1005284:	1007b6c0 	call	1007b6c <_Bfree>
 1005288:	003ec306 	br	1004d98 <_dtoa_r+0x728>
 100528c:	1805883a 	mov	r2,r3
 1005290:	003eeb06 	br	1004e40 <_dtoa_r+0x7d0>
 1005294:	d9800a17 	ldw	r6,40(sp)
 1005298:	d8c01117 	ldw	r3,68(sp)
 100529c:	20bfff04 	addi	r2,r4,-4
 10052a0:	308d883a 	add	r6,r6,r2
 10052a4:	1887883a 	add	r3,r3,r2
 10052a8:	80a1883a 	add	r16,r16,r2
 10052ac:	d9800a15 	stw	r6,40(sp)
 10052b0:	d8c01115 	stw	r3,68(sp)
 10052b4:	003f1d06 	br	1004f2c <_dtoa_r+0x8bc>
 10052b8:	a03f0c1e 	bne	r20,zero,1004eec <_dtoa_r+0x87c>
 10052bc:	00800434 	movhi	r2,16
 10052c0:	10bfffc4 	addi	r2,r2,-1
 10052c4:	a884703a 	and	r2,r21,r2
 10052c8:	103f081e 	bne	r2,zero,1004eec <_dtoa_r+0x87c>
 10052cc:	a89ffc2c 	andhi	r2,r21,32752
 10052d0:	103f0626 	beq	r2,zero,1004eec <_dtoa_r+0x87c>
 10052d4:	d8c01117 	ldw	r3,68(sp)
 10052d8:	d9000a17 	ldw	r4,40(sp)
 10052dc:	18c00044 	addi	r3,r3,1
 10052e0:	21000044 	addi	r4,r4,1
 10052e4:	d8c01115 	stw	r3,68(sp)
 10052e8:	d9000a15 	stw	r4,40(sp)
 10052ec:	003f0006 	br	1004ef0 <_dtoa_r+0x880>
 10052f0:	d9400717 	ldw	r5,28(sp)
 10052f4:	d9001617 	ldw	r4,88(sp)
 10052f8:	10089200 	call	1008920 <__pow5mult>
 10052fc:	d8800715 	stw	r2,28(sp)
 1005300:	003eed06 	br	1004eb8 <_dtoa_r+0x848>
 1005304:	1000021e 	bne	r2,zero,1005310 <_dtoa_r+0xca0>
 1005308:	b880004c 	andi	r2,r23,1
 100530c:	103fc11e 	bne	r2,zero,1005214 <_dtoa_r+0xba4>
 1005310:	b5bfffc4 	addi	r22,r22,-1
 1005314:	b0c00007 	ldb	r3,0(r22)
 1005318:	00800c04 	movi	r2,48
 100531c:	18bffc26 	beq	r3,r2,1005310 <_dtoa_r+0xca0>
 1005320:	b7000044 	addi	fp,r22,1
 1005324:	003fcb06 	br	1005254 <_dtoa_r+0xbe4>
 1005328:	d9800d17 	ldw	r6,52(sp)
 100532c:	018fc83a 	sub	r7,zero,r6
 1005330:	3801f726 	beq	r7,zero,1005b10 <_dtoa_r+0x14a0>
 1005334:	398003cc 	andi	r6,r7,15
 1005338:	300c90fa 	slli	r6,r6,3
 100533c:	01404074 	movhi	r5,257
 1005340:	294c2e04 	addi	r5,r5,12472
 1005344:	d9001217 	ldw	r4,72(sp)
 1005348:	314d883a 	add	r6,r6,r5
 100534c:	30c00117 	ldw	r3,4(r6)
 1005350:	30800017 	ldw	r2,0(r6)
 1005354:	d9401317 	ldw	r5,76(sp)
 1005358:	3821d13a 	srai	r16,r7,4
 100535c:	100d883a 	mov	r6,r2
 1005360:	180f883a 	mov	r7,r3
 1005364:	100e2040 	call	100e204 <__muldf3>
 1005368:	1011883a 	mov	r8,r2
 100536c:	1813883a 	mov	r9,r3
 1005370:	1029883a 	mov	r20,r2
 1005374:	182b883a 	mov	r21,r3
 1005378:	8001e526 	beq	r16,zero,1005b10 <_dtoa_r+0x14a0>
 100537c:	05800084 	movi	r22,2
 1005380:	04404074 	movhi	r17,257
 1005384:	8c4c6004 	addi	r17,r17,12672
 1005388:	8080004c 	andi	r2,r16,1
 100538c:	1005003a 	cmpeq	r2,r2,zero
 1005390:	1000081e 	bne	r2,zero,10053b4 <_dtoa_r+0xd44>
 1005394:	89800017 	ldw	r6,0(r17)
 1005398:	89c00117 	ldw	r7,4(r17)
 100539c:	480b883a 	mov	r5,r9
 10053a0:	4009883a 	mov	r4,r8
 10053a4:	100e2040 	call	100e204 <__muldf3>
 10053a8:	1011883a 	mov	r8,r2
 10053ac:	b5800044 	addi	r22,r22,1
 10053b0:	1813883a 	mov	r9,r3
 10053b4:	8021d07a 	srai	r16,r16,1
 10053b8:	8c400204 	addi	r17,r17,8
 10053bc:	803ff21e 	bne	r16,zero,1005388 <_dtoa_r+0xd18>
 10053c0:	4029883a 	mov	r20,r8
 10053c4:	482b883a 	mov	r21,r9
 10053c8:	003dca06 	br	1004af4 <_dtoa_r+0x484>
 10053cc:	d9000817 	ldw	r4,32(sp)
 10053d0:	2005003a 	cmpeq	r2,r4,zero
 10053d4:	1001f61e 	bne	r2,zero,1005bb0 <_dtoa_r+0x1540>
 10053d8:	dc001117 	ldw	r16,68(sp)
 10053dc:	dc801017 	ldw	r18,64(sp)
 10053e0:	18c10cc4 	addi	r3,r3,1075
 10053e4:	003f6106 	br	100516c <_dtoa_r+0xafc>
 10053e8:	d8000b15 	stw	zero,44(sp)
 10053ec:	d9802617 	ldw	r6,152(sp)
 10053f0:	d8c00d17 	ldw	r3,52(sp)
 10053f4:	30800044 	addi	r2,r6,1
 10053f8:	18ad883a 	add	r22,r3,r2
 10053fc:	b13fffc4 	addi	r4,r22,-1
 1005400:	d9000e15 	stw	r4,56(sp)
 1005404:	0581f60e 	bge	zero,r22,1005be0 <_dtoa_r+0x1570>
 1005408:	dd800f15 	stw	r22,60(sp)
 100540c:	003f3006 	br	10050d0 <_dtoa_r+0xa60>
 1005410:	d8000b15 	stw	zero,44(sp)
 1005414:	d9002617 	ldw	r4,152(sp)
 1005418:	0101eb0e 	bge	zero,r4,1005bc8 <_dtoa_r+0x1558>
 100541c:	202d883a 	mov	r22,r4
 1005420:	d9000e15 	stw	r4,56(sp)
 1005424:	d9000f15 	stw	r4,60(sp)
 1005428:	003f2906 	br	10050d0 <_dtoa_r+0xa60>
 100542c:	01800044 	movi	r6,1
 1005430:	d9800b15 	stw	r6,44(sp)
 1005434:	003ff706 	br	1005414 <_dtoa_r+0xda4>
 1005438:	01000044 	movi	r4,1
 100543c:	d9000b15 	stw	r4,44(sp)
 1005440:	003fea06 	br	10053ec <_dtoa_r+0xd7c>
 1005444:	04000c0e 	bge	zero,r16,1005478 <_dtoa_r+0xe08>
 1005448:	d9400717 	ldw	r5,28(sp)
 100544c:	d9001617 	ldw	r4,88(sp)
 1005450:	01800044 	movi	r6,1
 1005454:	10084b00 	call	10084b0 <__lshift>
 1005458:	1009883a 	mov	r4,r2
 100545c:	900b883a 	mov	r5,r18
 1005460:	d8800715 	stw	r2,28(sp)
 1005464:	1007cc80 	call	1007cc8 <__mcmp>
 1005468:	0081e00e 	bge	zero,r2,1005bec <_dtoa_r+0x157c>
 100546c:	bdc00044 	addi	r23,r23,1
 1005470:	00800e84 	movi	r2,58
 1005474:	b881a226 	beq	r23,r2,1005b00 <_dtoa_r+0x1490>
 1005478:	b7000044 	addi	fp,r22,1
 100547c:	b5c00005 	stb	r23,0(r22)
 1005480:	003f7406 	br	1005254 <_dtoa_r+0xbe4>
 1005484:	00800e44 	movi	r2,57
 1005488:	b8819d26 	beq	r23,r2,1005b00 <_dtoa_r+0x1490>
 100548c:	053ffa0e 	bge	zero,r20,1005478 <_dtoa_r+0xe08>
 1005490:	8dc00c44 	addi	r23,r17,49
 1005494:	003ff806 	br	1005478 <_dtoa_r+0xe08>
 1005498:	d9001617 	ldw	r4,88(sp)
 100549c:	a80b883a 	mov	r5,r21
 10054a0:	04000044 	movi	r16,1
 10054a4:	1007b6c0 	call	1007b6c <_Bfree>
 10054a8:	003edf06 	br	1005028 <_dtoa_r+0x9b8>
 10054ac:	d9001617 	ldw	r4,88(sp)
 10054b0:	980b883a 	mov	r5,r19
 10054b4:	01800284 	movi	r6,10
 10054b8:	000f883a 	mov	r7,zero
 10054bc:	10088200 	call	1008820 <__multadd>
 10054c0:	1027883a 	mov	r19,r2
 10054c4:	d8800615 	stw	r2,24(sp)
 10054c8:	003ebb06 	br	1004fb8 <_dtoa_r+0x948>
 10054cc:	d9801117 	ldw	r6,68(sp)
 10054d0:	d8800d17 	ldw	r2,52(sp)
 10054d4:	d8000915 	stw	zero,36(sp)
 10054d8:	308dc83a 	sub	r6,r6,r2
 10054dc:	0087c83a 	sub	r3,zero,r2
 10054e0:	d9801115 	stw	r6,68(sp)
 10054e4:	d8c01015 	stw	r3,64(sp)
 10054e8:	003cfe06 	br	10048e4 <_dtoa_r+0x274>
 10054ec:	018dc83a 	sub	r6,zero,r6
 10054f0:	d9801115 	stw	r6,68(sp)
 10054f4:	d8000a15 	stw	zero,40(sp)
 10054f8:	003cf306 	br	10048c8 <_dtoa_r+0x258>
 10054fc:	d9000d17 	ldw	r4,52(sp)
 1005500:	100eb500 	call	100eb50 <__floatsidf>
 1005504:	880b883a 	mov	r5,r17
 1005508:	8009883a 	mov	r4,r16
 100550c:	180f883a 	mov	r7,r3
 1005510:	100d883a 	mov	r6,r2
 1005514:	100e8a80 	call	100e8a8 <__nedf2>
 1005518:	103ce126 	beq	r2,zero,10048a0 <_dtoa_r+0x230>
 100551c:	d9800d17 	ldw	r6,52(sp)
 1005520:	31bfffc4 	addi	r6,r6,-1
 1005524:	d9800d15 	stw	r6,52(sp)
 1005528:	003cdd06 	br	10048a0 <_dtoa_r+0x230>
 100552c:	d9000717 	ldw	r4,28(sp)
 1005530:	900b883a 	mov	r5,r18
 1005534:	1007cc80 	call	1007cc8 <__mcmp>
 1005538:	103e8d0e 	bge	r2,zero,1004f70 <_dtoa_r+0x900>
 100553c:	d9400717 	ldw	r5,28(sp)
 1005540:	d9001617 	ldw	r4,88(sp)
 1005544:	01800284 	movi	r6,10
 1005548:	000f883a 	mov	r7,zero
 100554c:	10088200 	call	1008820 <__multadd>
 1005550:	d9800d17 	ldw	r6,52(sp)
 1005554:	d8800715 	stw	r2,28(sp)
 1005558:	31bfffc4 	addi	r6,r6,-1
 100555c:	d9800d15 	stw	r6,52(sp)
 1005560:	b001a71e 	bne	r22,zero,1005c00 <_dtoa_r+0x1590>
 1005564:	d8800e17 	ldw	r2,56(sp)
 1005568:	d8800f15 	stw	r2,60(sp)
 100556c:	003e8006 	br	1004f70 <_dtoa_r+0x900>
 1005570:	90800417 	ldw	r2,16(r18)
 1005574:	1085883a 	add	r2,r2,r2
 1005578:	1085883a 	add	r2,r2,r2
 100557c:	1485883a 	add	r2,r2,r18
 1005580:	11000417 	ldw	r4,16(r2)
 1005584:	1007b940 	call	1007b94 <__hi0bits>
 1005588:	00c00804 	movi	r3,32
 100558c:	1887c83a 	sub	r3,r3,r2
 1005590:	003e5a06 	br	1004efc <_dtoa_r+0x88c>
 1005594:	d9400717 	ldw	r5,28(sp)
 1005598:	d9801017 	ldw	r6,64(sp)
 100559c:	d9001617 	ldw	r4,88(sp)
 10055a0:	10089200 	call	1008920 <__pow5mult>
 10055a4:	d8800715 	stw	r2,28(sp)
 10055a8:	003e4306 	br	1004eb8 <_dtoa_r+0x848>
 10055ac:	d9800f17 	ldw	r6,60(sp)
 10055b0:	d8800d17 	ldw	r2,52(sp)
 10055b4:	d9800315 	stw	r6,12(sp)
 10055b8:	d8800415 	stw	r2,16(sp)
 10055bc:	d8c00b17 	ldw	r3,44(sp)
 10055c0:	1805003a 	cmpeq	r2,r3,zero
 10055c4:	1000e21e 	bne	r2,zero,1005950 <_dtoa_r+0x12e0>
 10055c8:	d9000317 	ldw	r4,12(sp)
 10055cc:	0005883a 	mov	r2,zero
 10055d0:	00cff834 	movhi	r3,16352
 10055d4:	200c90fa 	slli	r6,r4,3
 10055d8:	01004074 	movhi	r4,257
 10055dc:	210c2e04 	addi	r4,r4,12472
 10055e0:	180b883a 	mov	r5,r3
 10055e4:	310d883a 	add	r6,r6,r4
 10055e8:	327fff17 	ldw	r9,-4(r6)
 10055ec:	323ffe17 	ldw	r8,-8(r6)
 10055f0:	1009883a 	mov	r4,r2
 10055f4:	480f883a 	mov	r7,r9
 10055f8:	400d883a 	mov	r6,r8
 10055fc:	100e5c80 	call	100e5c8 <__divdf3>
 1005600:	180b883a 	mov	r5,r3
 1005604:	b00d883a 	mov	r6,r22
 1005608:	b80f883a 	mov	r7,r23
 100560c:	1009883a 	mov	r4,r2
 1005610:	100e1100 	call	100e110 <__subdf3>
 1005614:	a80b883a 	mov	r5,r21
 1005618:	a009883a 	mov	r4,r20
 100561c:	d8c01915 	stw	r3,100(sp)
 1005620:	d8801815 	stw	r2,96(sp)
 1005624:	100ec480 	call	100ec48 <__fixdfsi>
 1005628:	1009883a 	mov	r4,r2
 100562c:	1027883a 	mov	r19,r2
 1005630:	100eb500 	call	100eb50 <__floatsidf>
 1005634:	a80b883a 	mov	r5,r21
 1005638:	a009883a 	mov	r4,r20
 100563c:	180f883a 	mov	r7,r3
 1005640:	100d883a 	mov	r6,r2
 1005644:	100e1100 	call	100e110 <__subdf3>
 1005648:	d9801817 	ldw	r6,96(sp)
 100564c:	1823883a 	mov	r17,r3
 1005650:	d8801415 	stw	r2,80(sp)
 1005654:	302d883a 	mov	r22,r6
 1005658:	d9800517 	ldw	r6,20(sp)
 100565c:	9cc00c04 	addi	r19,r19,48
 1005660:	dc401515 	stw	r17,84(sp)
 1005664:	d8c01917 	ldw	r3,100(sp)
 1005668:	34c00005 	stb	r19,0(r6)
 100566c:	d8800517 	ldw	r2,20(sp)
 1005670:	d9401917 	ldw	r5,100(sp)
 1005674:	d9801417 	ldw	r6,80(sp)
 1005678:	b009883a 	mov	r4,r22
 100567c:	880f883a 	mov	r7,r17
 1005680:	182f883a 	mov	r23,r3
 1005684:	17000044 	addi	fp,r2,1
 1005688:	100e9300 	call	100e930 <__gtdf2>
 100568c:	00804e16 	blt	zero,r2,10057c8 <_dtoa_r+0x1158>
 1005690:	d9801417 	ldw	r6,80(sp)
 1005694:	0005883a 	mov	r2,zero
 1005698:	00cffc34 	movhi	r3,16368
 100569c:	180b883a 	mov	r5,r3
 10056a0:	880f883a 	mov	r7,r17
 10056a4:	1009883a 	mov	r4,r2
 10056a8:	100e1100 	call	100e110 <__subdf3>
 10056ac:	d9401917 	ldw	r5,100(sp)
 10056b0:	180f883a 	mov	r7,r3
 10056b4:	b009883a 	mov	r4,r22
 10056b8:	100d883a 	mov	r6,r2
 10056bc:	100e9300 	call	100e930 <__gtdf2>
 10056c0:	00bda216 	blt	zero,r2,1004d4c <_dtoa_r+0x6dc>
 10056c4:	d8c00317 	ldw	r3,12(sp)
 10056c8:	00800044 	movi	r2,1
 10056cc:	10c01216 	blt	r2,r3,1005718 <_dtoa_r+0x10a8>
 10056d0:	003d4506 	br	1004be8 <_dtoa_r+0x578>
 10056d4:	d9801417 	ldw	r6,80(sp)
 10056d8:	0005883a 	mov	r2,zero
 10056dc:	00cffc34 	movhi	r3,16368
 10056e0:	180b883a 	mov	r5,r3
 10056e4:	880f883a 	mov	r7,r17
 10056e8:	1009883a 	mov	r4,r2
 10056ec:	100e1100 	call	100e110 <__subdf3>
 10056f0:	d9c01b17 	ldw	r7,108(sp)
 10056f4:	180b883a 	mov	r5,r3
 10056f8:	1009883a 	mov	r4,r2
 10056fc:	b00d883a 	mov	r6,r22
 1005700:	100ea400 	call	100ea40 <__ltdf2>
 1005704:	103d9116 	blt	r2,zero,1004d4c <_dtoa_r+0x6dc>
 1005708:	d9800517 	ldw	r6,20(sp)
 100570c:	d9000317 	ldw	r4,12(sp)
 1005710:	3105883a 	add	r2,r6,r4
 1005714:	e0bd3426 	beq	fp,r2,1004be8 <_dtoa_r+0x578>
 1005718:	04500934 	movhi	r17,16420
 100571c:	0021883a 	mov	r16,zero
 1005720:	b80b883a 	mov	r5,r23
 1005724:	b009883a 	mov	r4,r22
 1005728:	800d883a 	mov	r6,r16
 100572c:	880f883a 	mov	r7,r17
 1005730:	100e2040 	call	100e204 <__muldf3>
 1005734:	d9401517 	ldw	r5,84(sp)
 1005738:	d9001417 	ldw	r4,80(sp)
 100573c:	880f883a 	mov	r7,r17
 1005740:	000d883a 	mov	r6,zero
 1005744:	d8801a15 	stw	r2,104(sp)
 1005748:	d8c01b15 	stw	r3,108(sp)
 100574c:	100e2040 	call	100e204 <__muldf3>
 1005750:	180b883a 	mov	r5,r3
 1005754:	1009883a 	mov	r4,r2
 1005758:	1823883a 	mov	r17,r3
 100575c:	1021883a 	mov	r16,r2
 1005760:	100ec480 	call	100ec48 <__fixdfsi>
 1005764:	1009883a 	mov	r4,r2
 1005768:	102b883a 	mov	r21,r2
 100576c:	100eb500 	call	100eb50 <__floatsidf>
 1005770:	880b883a 	mov	r5,r17
 1005774:	8009883a 	mov	r4,r16
 1005778:	180f883a 	mov	r7,r3
 100577c:	100d883a 	mov	r6,r2
 1005780:	100e1100 	call	100e110 <__subdf3>
 1005784:	1021883a 	mov	r16,r2
 1005788:	d9001b17 	ldw	r4,108(sp)
 100578c:	1823883a 	mov	r17,r3
 1005790:	dc001415 	stw	r16,80(sp)
 1005794:	ad400c04 	addi	r21,r21,48
 1005798:	dc401515 	stw	r17,84(sp)
 100579c:	d8801a17 	ldw	r2,104(sp)
 10057a0:	e5400005 	stb	r21,0(fp)
 10057a4:	202f883a 	mov	r23,r4
 10057a8:	d9c01b17 	ldw	r7,108(sp)
 10057ac:	d9001417 	ldw	r4,80(sp)
 10057b0:	880b883a 	mov	r5,r17
 10057b4:	100d883a 	mov	r6,r2
 10057b8:	102d883a 	mov	r22,r2
 10057bc:	e7000044 	addi	fp,fp,1
 10057c0:	100ea400 	call	100ea40 <__ltdf2>
 10057c4:	103fc30e 	bge	r2,zero,10056d4 <_dtoa_r+0x1064>
 10057c8:	d9000417 	ldw	r4,16(sp)
 10057cc:	d9000d15 	stw	r4,52(sp)
 10057d0:	003d7106 	br	1004d98 <_dtoa_r+0x728>
 10057d4:	d9801717 	ldw	r6,92(sp)
 10057d8:	00800084 	movi	r2,2
 10057dc:	11bde60e 	bge	r2,r6,1004f78 <_dtoa_r+0x908>
 10057e0:	203cfb1e 	bne	r4,zero,1004bd0 <_dtoa_r+0x560>
 10057e4:	d9001617 	ldw	r4,88(sp)
 10057e8:	900b883a 	mov	r5,r18
 10057ec:	01800144 	movi	r6,5
 10057f0:	000f883a 	mov	r7,zero
 10057f4:	10088200 	call	1008820 <__multadd>
 10057f8:	d9000717 	ldw	r4,28(sp)
 10057fc:	100b883a 	mov	r5,r2
 1005800:	1025883a 	mov	r18,r2
 1005804:	1007cc80 	call	1007cc8 <__mcmp>
 1005808:	00bcf10e 	bge	zero,r2,1004bd0 <_dtoa_r+0x560>
 100580c:	d8c00d17 	ldw	r3,52(sp)
 1005810:	d9000517 	ldw	r4,20(sp)
 1005814:	d8000615 	stw	zero,24(sp)
 1005818:	18c00044 	addi	r3,r3,1
 100581c:	d8c00d15 	stw	r3,52(sp)
 1005820:	00800c44 	movi	r2,49
 1005824:	27000044 	addi	fp,r4,1
 1005828:	20800005 	stb	r2,0(r4)
 100582c:	003e8906 	br	1005254 <_dtoa_r+0xbe4>
 1005830:	d8c00517 	ldw	r3,20(sp)
 1005834:	003bc206 	br	1004740 <_dtoa_r+0xd0>
 1005838:	01804074 	movhi	r6,257
 100583c:	318c6004 	addi	r6,r6,12672
 1005840:	30c00917 	ldw	r3,36(r6)
 1005844:	30800817 	ldw	r2,32(r6)
 1005848:	d9001217 	ldw	r4,72(sp)
 100584c:	d9401317 	ldw	r5,76(sp)
 1005850:	180f883a 	mov	r7,r3
 1005854:	100d883a 	mov	r6,r2
 1005858:	100e5c80 	call	100e5c8 <__divdf3>
 100585c:	948003cc 	andi	r18,r18,15
 1005860:	058000c4 	movi	r22,3
 1005864:	1029883a 	mov	r20,r2
 1005868:	182b883a 	mov	r21,r3
 100586c:	003c8906 	br	1004a94 <_dtoa_r+0x424>
 1005870:	d9001017 	ldw	r4,64(sp)
 1005874:	d9800917 	ldw	r6,36(sp)
 1005878:	0025883a 	mov	r18,zero
 100587c:	1105c83a 	sub	r2,r2,r4
 1005880:	2089883a 	add	r4,r4,r2
 1005884:	308d883a 	add	r6,r6,r2
 1005888:	d9001015 	stw	r4,64(sp)
 100588c:	d9800915 	stw	r6,36(sp)
 1005890:	003e3206 	br	100515c <_dtoa_r+0xaec>
 1005894:	28800044 	addi	r2,r5,1
 1005898:	27000044 	addi	fp,r4,1
 100589c:	20800005 	stb	r2,0(r4)
 10058a0:	003e6c06 	br	1005254 <_dtoa_r+0xbe4>
 10058a4:	d8800f17 	ldw	r2,60(sp)
 10058a8:	00bce016 	blt	zero,r2,1004c2c <_dtoa_r+0x5bc>
 10058ac:	d9800f17 	ldw	r6,60(sp)
 10058b0:	303cc51e 	bne	r6,zero,1004bc8 <_dtoa_r+0x558>
 10058b4:	0005883a 	mov	r2,zero
 10058b8:	00d00534 	movhi	r3,16404
 10058bc:	980b883a 	mov	r5,r19
 10058c0:	180f883a 	mov	r7,r3
 10058c4:	9009883a 	mov	r4,r18
 10058c8:	100d883a 	mov	r6,r2
 10058cc:	100e2040 	call	100e204 <__muldf3>
 10058d0:	180b883a 	mov	r5,r3
 10058d4:	a80f883a 	mov	r7,r21
 10058d8:	1009883a 	mov	r4,r2
 10058dc:	a00d883a 	mov	r6,r20
 10058e0:	100e9b80 	call	100e9b8 <__gedf2>
 10058e4:	103cb80e 	bge	r2,zero,1004bc8 <_dtoa_r+0x558>
 10058e8:	0027883a 	mov	r19,zero
 10058ec:	0025883a 	mov	r18,zero
 10058f0:	003fc606 	br	100580c <_dtoa_r+0x119c>
 10058f4:	99400117 	ldw	r5,4(r19)
 10058f8:	d9001617 	ldw	r4,88(sp)
 10058fc:	10080ec0 	call	10080ec <_Balloc>
 1005900:	99800417 	ldw	r6,16(r19)
 1005904:	11000304 	addi	r4,r2,12
 1005908:	99400304 	addi	r5,r19,12
 100590c:	318d883a 	add	r6,r6,r6
 1005910:	318d883a 	add	r6,r6,r6
 1005914:	31800204 	addi	r6,r6,8
 1005918:	1023883a 	mov	r17,r2
 100591c:	10079540 	call	1007954 <memcpy>
 1005920:	d9001617 	ldw	r4,88(sp)
 1005924:	880b883a 	mov	r5,r17
 1005928:	01800044 	movi	r6,1
 100592c:	10084b00 	call	10084b0 <__lshift>
 1005930:	100b883a 	mov	r5,r2
 1005934:	003d9c06 	br	1004fa8 <_dtoa_r+0x938>
 1005938:	00800e44 	movi	r2,57
 100593c:	b8807026 	beq	r23,r2,1005b00 <_dtoa_r+0x1490>
 1005940:	b8800044 	addi	r2,r23,1
 1005944:	b7000044 	addi	fp,r22,1
 1005948:	b0800005 	stb	r2,0(r22)
 100594c:	003e4106 	br	1005254 <_dtoa_r+0xbe4>
 1005950:	d8800317 	ldw	r2,12(sp)
 1005954:	01804074 	movhi	r6,257
 1005958:	318c2e04 	addi	r6,r6,12472
 100595c:	b009883a 	mov	r4,r22
 1005960:	100e90fa 	slli	r7,r2,3
 1005964:	b80b883a 	mov	r5,r23
 1005968:	398f883a 	add	r7,r7,r6
 100596c:	38bffe17 	ldw	r2,-8(r7)
 1005970:	d9800517 	ldw	r6,20(sp)
 1005974:	38ffff17 	ldw	r3,-4(r7)
 1005978:	37000044 	addi	fp,r6,1
 100597c:	180f883a 	mov	r7,r3
 1005980:	100d883a 	mov	r6,r2
 1005984:	100e2040 	call	100e204 <__muldf3>
 1005988:	a80b883a 	mov	r5,r21
 100598c:	a009883a 	mov	r4,r20
 1005990:	182f883a 	mov	r23,r3
 1005994:	102d883a 	mov	r22,r2
 1005998:	100ec480 	call	100ec48 <__fixdfsi>
 100599c:	1009883a 	mov	r4,r2
 10059a0:	1027883a 	mov	r19,r2
 10059a4:	100eb500 	call	100eb50 <__floatsidf>
 10059a8:	a80b883a 	mov	r5,r21
 10059ac:	a009883a 	mov	r4,r20
 10059b0:	180f883a 	mov	r7,r3
 10059b4:	100d883a 	mov	r6,r2
 10059b8:	100e1100 	call	100e110 <__subdf3>
 10059bc:	180b883a 	mov	r5,r3
 10059c0:	d8c00517 	ldw	r3,20(sp)
 10059c4:	9cc00c04 	addi	r19,r19,48
 10059c8:	1009883a 	mov	r4,r2
 10059cc:	1cc00005 	stb	r19,0(r3)
 10059d0:	2021883a 	mov	r16,r4
 10059d4:	d9000317 	ldw	r4,12(sp)
 10059d8:	00800044 	movi	r2,1
 10059dc:	2823883a 	mov	r17,r5
 10059e0:	20802226 	beq	r4,r2,1005a6c <_dtoa_r+0x13fc>
 10059e4:	1029883a 	mov	r20,r2
 10059e8:	0005883a 	mov	r2,zero
 10059ec:	00d00934 	movhi	r3,16420
 10059f0:	180f883a 	mov	r7,r3
 10059f4:	100d883a 	mov	r6,r2
 10059f8:	880b883a 	mov	r5,r17
 10059fc:	8009883a 	mov	r4,r16
 1005a00:	100e2040 	call	100e204 <__muldf3>
 1005a04:	180b883a 	mov	r5,r3
 1005a08:	1009883a 	mov	r4,r2
 1005a0c:	1823883a 	mov	r17,r3
 1005a10:	1021883a 	mov	r16,r2
 1005a14:	100ec480 	call	100ec48 <__fixdfsi>
 1005a18:	1009883a 	mov	r4,r2
 1005a1c:	102b883a 	mov	r21,r2
 1005a20:	100eb500 	call	100eb50 <__floatsidf>
 1005a24:	880b883a 	mov	r5,r17
 1005a28:	8009883a 	mov	r4,r16
 1005a2c:	180f883a 	mov	r7,r3
 1005a30:	100d883a 	mov	r6,r2
 1005a34:	100e1100 	call	100e110 <__subdf3>
 1005a38:	180b883a 	mov	r5,r3
 1005a3c:	d8c00517 	ldw	r3,20(sp)
 1005a40:	1009883a 	mov	r4,r2
 1005a44:	ad400c04 	addi	r21,r21,48
 1005a48:	1d05883a 	add	r2,r3,r20
 1005a4c:	15400005 	stb	r21,0(r2)
 1005a50:	2021883a 	mov	r16,r4
 1005a54:	d9000317 	ldw	r4,12(sp)
 1005a58:	a5000044 	addi	r20,r20,1
 1005a5c:	2823883a 	mov	r17,r5
 1005a60:	a13fe11e 	bne	r20,r4,10059e8 <_dtoa_r+0x1378>
 1005a64:	e505883a 	add	r2,fp,r20
 1005a68:	173fffc4 	addi	fp,r2,-1
 1005a6c:	0025883a 	mov	r18,zero
 1005a70:	04cff834 	movhi	r19,16352
 1005a74:	b009883a 	mov	r4,r22
 1005a78:	b80b883a 	mov	r5,r23
 1005a7c:	900d883a 	mov	r6,r18
 1005a80:	980f883a 	mov	r7,r19
 1005a84:	100e1900 	call	100e190 <__adddf3>
 1005a88:	180b883a 	mov	r5,r3
 1005a8c:	1009883a 	mov	r4,r2
 1005a90:	800d883a 	mov	r6,r16
 1005a94:	880f883a 	mov	r7,r17
 1005a98:	100ea400 	call	100ea40 <__ltdf2>
 1005a9c:	103cab16 	blt	r2,zero,1004d4c <_dtoa_r+0x6dc>
 1005aa0:	0009883a 	mov	r4,zero
 1005aa4:	980b883a 	mov	r5,r19
 1005aa8:	b80f883a 	mov	r7,r23
 1005aac:	b00d883a 	mov	r6,r22
 1005ab0:	100e1100 	call	100e110 <__subdf3>
 1005ab4:	180b883a 	mov	r5,r3
 1005ab8:	880f883a 	mov	r7,r17
 1005abc:	1009883a 	mov	r4,r2
 1005ac0:	800d883a 	mov	r6,r16
 1005ac4:	100e9300 	call	100e930 <__gtdf2>
 1005ac8:	00bc470e 	bge	zero,r2,1004be8 <_dtoa_r+0x578>
 1005acc:	00c00c04 	movi	r3,48
 1005ad0:	e73fffc4 	addi	fp,fp,-1
 1005ad4:	e0800007 	ldb	r2,0(fp)
 1005ad8:	10fffd26 	beq	r2,r3,1005ad0 <_dtoa_r+0x1460>
 1005adc:	d9800417 	ldw	r6,16(sp)
 1005ae0:	e7000044 	addi	fp,fp,1
 1005ae4:	d9800d15 	stw	r6,52(sp)
 1005ae8:	003cab06 	br	1004d98 <_dtoa_r+0x728>
 1005aec:	d8c00f17 	ldw	r3,60(sp)
 1005af0:	d9001117 	ldw	r4,68(sp)
 1005af4:	20e1c83a 	sub	r16,r4,r3
 1005af8:	0007883a 	mov	r3,zero
 1005afc:	003d9b06 	br	100516c <_dtoa_r+0xafc>
 1005b00:	00800e44 	movi	r2,57
 1005b04:	b0800005 	stb	r2,0(r22)
 1005b08:	b5800044 	addi	r22,r22,1
 1005b0c:	003dc106 	br	1005214 <_dtoa_r+0xba4>
 1005b10:	05800084 	movi	r22,2
 1005b14:	003bf706 	br	1004af4 <_dtoa_r+0x484>
 1005b18:	d9000f17 	ldw	r4,60(sp)
 1005b1c:	013c000e 	bge	zero,r4,1004b20 <_dtoa_r+0x4b0>
 1005b20:	d9800e17 	ldw	r6,56(sp)
 1005b24:	01bc300e 	bge	zero,r6,1004be8 <_dtoa_r+0x578>
 1005b28:	0005883a 	mov	r2,zero
 1005b2c:	00d00934 	movhi	r3,16420
 1005b30:	a80b883a 	mov	r5,r21
 1005b34:	180f883a 	mov	r7,r3
 1005b38:	a009883a 	mov	r4,r20
 1005b3c:	100d883a 	mov	r6,r2
 1005b40:	100e2040 	call	100e204 <__muldf3>
 1005b44:	b1000044 	addi	r4,r22,1
 1005b48:	1021883a 	mov	r16,r2
 1005b4c:	1823883a 	mov	r17,r3
 1005b50:	100eb500 	call	100eb50 <__floatsidf>
 1005b54:	880b883a 	mov	r5,r17
 1005b58:	8009883a 	mov	r4,r16
 1005b5c:	180f883a 	mov	r7,r3
 1005b60:	100d883a 	mov	r6,r2
 1005b64:	100e2040 	call	100e204 <__muldf3>
 1005b68:	0011883a 	mov	r8,zero
 1005b6c:	02500734 	movhi	r9,16412
 1005b70:	180b883a 	mov	r5,r3
 1005b74:	480f883a 	mov	r7,r9
 1005b78:	1009883a 	mov	r4,r2
 1005b7c:	400d883a 	mov	r6,r8
 1005b80:	100e1900 	call	100e190 <__adddf3>
 1005b84:	102d883a 	mov	r22,r2
 1005b88:	00bf3034 	movhi	r2,64704
 1005b8c:	10ef883a 	add	r23,r2,r3
 1005b90:	d8800d17 	ldw	r2,52(sp)
 1005b94:	d8c00e17 	ldw	r3,56(sp)
 1005b98:	8029883a 	mov	r20,r16
 1005b9c:	10bfffc4 	addi	r2,r2,-1
 1005ba0:	882b883a 	mov	r21,r17
 1005ba4:	d8800415 	stw	r2,16(sp)
 1005ba8:	d8c00315 	stw	r3,12(sp)
 1005bac:	003e8306 	br	10055bc <_dtoa_r+0xf4c>
 1005bb0:	d8800117 	ldw	r2,4(sp)
 1005bb4:	dc001117 	ldw	r16,68(sp)
 1005bb8:	dc801017 	ldw	r18,64(sp)
 1005bbc:	00c00d84 	movi	r3,54
 1005bc0:	1887c83a 	sub	r3,r3,r2
 1005bc4:	003d6906 	br	100516c <_dtoa_r+0xafc>
 1005bc8:	01800044 	movi	r6,1
 1005bcc:	3021883a 	mov	r16,r6
 1005bd0:	d9800f15 	stw	r6,60(sp)
 1005bd4:	d9802615 	stw	r6,152(sp)
 1005bd8:	d9800e15 	stw	r6,56(sp)
 1005bdc:	003b9306 	br	1004a2c <_dtoa_r+0x3bc>
 1005be0:	b021883a 	mov	r16,r22
 1005be4:	dd800f15 	stw	r22,60(sp)
 1005be8:	003b9006 	br	1004a2c <_dtoa_r+0x3bc>
 1005bec:	103e221e 	bne	r2,zero,1005478 <_dtoa_r+0xe08>
 1005bf0:	b880004c 	andi	r2,r23,1
 1005bf4:	1005003a 	cmpeq	r2,r2,zero
 1005bf8:	103e1f1e 	bne	r2,zero,1005478 <_dtoa_r+0xe08>
 1005bfc:	003e1b06 	br	100546c <_dtoa_r+0xdfc>
 1005c00:	d9001617 	ldw	r4,88(sp)
 1005c04:	980b883a 	mov	r5,r19
 1005c08:	01800284 	movi	r6,10
 1005c0c:	000f883a 	mov	r7,zero
 1005c10:	10088200 	call	1008820 <__multadd>
 1005c14:	d8c00e17 	ldw	r3,56(sp)
 1005c18:	1027883a 	mov	r19,r2
 1005c1c:	d8c00f15 	stw	r3,60(sp)
 1005c20:	003cd306 	br	1004f70 <_dtoa_r+0x900>

01005c24 <_fflush_r>:
 1005c24:	defffb04 	addi	sp,sp,-20
 1005c28:	dcc00315 	stw	r19,12(sp)
 1005c2c:	dc800215 	stw	r18,8(sp)
 1005c30:	dfc00415 	stw	ra,16(sp)
 1005c34:	dc400115 	stw	r17,4(sp)
 1005c38:	dc000015 	stw	r16,0(sp)
 1005c3c:	2027883a 	mov	r19,r4
 1005c40:	2825883a 	mov	r18,r5
 1005c44:	20000226 	beq	r4,zero,1005c50 <_fflush_r+0x2c>
 1005c48:	20800e17 	ldw	r2,56(r4)
 1005c4c:	10005626 	beq	r2,zero,1005da8 <_fflush_r+0x184>
 1005c50:	9100030b 	ldhu	r4,12(r18)
 1005c54:	20ffffcc 	andi	r3,r4,65535
 1005c58:	18e0001c 	xori	r3,r3,32768
 1005c5c:	18e00004 	addi	r3,r3,-32768
 1005c60:	1880020c 	andi	r2,r3,8
 1005c64:	1000261e 	bne	r2,zero,1005d00 <_fflush_r+0xdc>
 1005c68:	90c00117 	ldw	r3,4(r18)
 1005c6c:	20820014 	ori	r2,r4,2048
 1005c70:	9080030d 	sth	r2,12(r18)
 1005c74:	1009883a 	mov	r4,r2
 1005c78:	00c0400e 	bge	zero,r3,1005d7c <_fflush_r+0x158>
 1005c7c:	92000a17 	ldw	r8,40(r18)
 1005c80:	40004026 	beq	r8,zero,1005d84 <_fflush_r+0x160>
 1005c84:	2084000c 	andi	r2,r4,4096
 1005c88:	10005326 	beq	r2,zero,1005dd8 <_fflush_r+0x1b4>
 1005c8c:	94001417 	ldw	r16,80(r18)
 1005c90:	9080030b 	ldhu	r2,12(r18)
 1005c94:	1080010c 	andi	r2,r2,4
 1005c98:	1000481e 	bne	r2,zero,1005dbc <_fflush_r+0x198>
 1005c9c:	91400717 	ldw	r5,28(r18)
 1005ca0:	9809883a 	mov	r4,r19
 1005ca4:	800d883a 	mov	r6,r16
 1005ca8:	000f883a 	mov	r7,zero
 1005cac:	403ee83a 	callr	r8
 1005cb0:	8080261e 	bne	r16,r2,1005d4c <_fflush_r+0x128>
 1005cb4:	9080030b 	ldhu	r2,12(r18)
 1005cb8:	91000417 	ldw	r4,16(r18)
 1005cbc:	90000115 	stw	zero,4(r18)
 1005cc0:	10bdffcc 	andi	r2,r2,63487
 1005cc4:	10ffffcc 	andi	r3,r2,65535
 1005cc8:	18c4000c 	andi	r3,r3,4096
 1005ccc:	9080030d 	sth	r2,12(r18)
 1005cd0:	91000015 	stw	r4,0(r18)
 1005cd4:	18002b26 	beq	r3,zero,1005d84 <_fflush_r+0x160>
 1005cd8:	0007883a 	mov	r3,zero
 1005cdc:	1805883a 	mov	r2,r3
 1005ce0:	94001415 	stw	r16,80(r18)
 1005ce4:	dfc00417 	ldw	ra,16(sp)
 1005ce8:	dcc00317 	ldw	r19,12(sp)
 1005cec:	dc800217 	ldw	r18,8(sp)
 1005cf0:	dc400117 	ldw	r17,4(sp)
 1005cf4:	dc000017 	ldw	r16,0(sp)
 1005cf8:	dec00504 	addi	sp,sp,20
 1005cfc:	f800283a 	ret
 1005d00:	94400417 	ldw	r17,16(r18)
 1005d04:	88001f26 	beq	r17,zero,1005d84 <_fflush_r+0x160>
 1005d08:	90800017 	ldw	r2,0(r18)
 1005d0c:	18c000cc 	andi	r3,r3,3
 1005d10:	94400015 	stw	r17,0(r18)
 1005d14:	1461c83a 	sub	r16,r2,r17
 1005d18:	18002526 	beq	r3,zero,1005db0 <_fflush_r+0x18c>
 1005d1c:	0005883a 	mov	r2,zero
 1005d20:	90800215 	stw	r2,8(r18)
 1005d24:	0400170e 	bge	zero,r16,1005d84 <_fflush_r+0x160>
 1005d28:	90c00917 	ldw	r3,36(r18)
 1005d2c:	91400717 	ldw	r5,28(r18)
 1005d30:	880d883a 	mov	r6,r17
 1005d34:	800f883a 	mov	r7,r16
 1005d38:	9809883a 	mov	r4,r19
 1005d3c:	183ee83a 	callr	r3
 1005d40:	88a3883a 	add	r17,r17,r2
 1005d44:	80a1c83a 	sub	r16,r16,r2
 1005d48:	00bff616 	blt	zero,r2,1005d24 <_fflush_r+0x100>
 1005d4c:	9080030b 	ldhu	r2,12(r18)
 1005d50:	00ffffc4 	movi	r3,-1
 1005d54:	10801014 	ori	r2,r2,64
 1005d58:	9080030d 	sth	r2,12(r18)
 1005d5c:	1805883a 	mov	r2,r3
 1005d60:	dfc00417 	ldw	ra,16(sp)
 1005d64:	dcc00317 	ldw	r19,12(sp)
 1005d68:	dc800217 	ldw	r18,8(sp)
 1005d6c:	dc400117 	ldw	r17,4(sp)
 1005d70:	dc000017 	ldw	r16,0(sp)
 1005d74:	dec00504 	addi	sp,sp,20
 1005d78:	f800283a 	ret
 1005d7c:	90800f17 	ldw	r2,60(r18)
 1005d80:	00bfbe16 	blt	zero,r2,1005c7c <_fflush_r+0x58>
 1005d84:	0007883a 	mov	r3,zero
 1005d88:	1805883a 	mov	r2,r3
 1005d8c:	dfc00417 	ldw	ra,16(sp)
 1005d90:	dcc00317 	ldw	r19,12(sp)
 1005d94:	dc800217 	ldw	r18,8(sp)
 1005d98:	dc400117 	ldw	r17,4(sp)
 1005d9c:	dc000017 	ldw	r16,0(sp)
 1005da0:	dec00504 	addi	sp,sp,20
 1005da4:	f800283a 	ret
 1005da8:	1005ebc0 	call	1005ebc <__sinit>
 1005dac:	003fa806 	br	1005c50 <_fflush_r+0x2c>
 1005db0:	90800517 	ldw	r2,20(r18)
 1005db4:	90800215 	stw	r2,8(r18)
 1005db8:	003fda06 	br	1005d24 <_fflush_r+0x100>
 1005dbc:	90800117 	ldw	r2,4(r18)
 1005dc0:	90c00c17 	ldw	r3,48(r18)
 1005dc4:	80a1c83a 	sub	r16,r16,r2
 1005dc8:	183fb426 	beq	r3,zero,1005c9c <_fflush_r+0x78>
 1005dcc:	90800f17 	ldw	r2,60(r18)
 1005dd0:	80a1c83a 	sub	r16,r16,r2
 1005dd4:	003fb106 	br	1005c9c <_fflush_r+0x78>
 1005dd8:	91400717 	ldw	r5,28(r18)
 1005ddc:	9809883a 	mov	r4,r19
 1005de0:	000d883a 	mov	r6,zero
 1005de4:	01c00044 	movi	r7,1
 1005de8:	403ee83a 	callr	r8
 1005dec:	1021883a 	mov	r16,r2
 1005df0:	00bfffc4 	movi	r2,-1
 1005df4:	80800226 	beq	r16,r2,1005e00 <_fflush_r+0x1dc>
 1005df8:	92000a17 	ldw	r8,40(r18)
 1005dfc:	003fa406 	br	1005c90 <_fflush_r+0x6c>
 1005e00:	98c00017 	ldw	r3,0(r19)
 1005e04:	00800744 	movi	r2,29
 1005e08:	18bfde26 	beq	r3,r2,1005d84 <_fflush_r+0x160>
 1005e0c:	9080030b 	ldhu	r2,12(r18)
 1005e10:	8007883a 	mov	r3,r16
 1005e14:	10801014 	ori	r2,r2,64
 1005e18:	9080030d 	sth	r2,12(r18)
 1005e1c:	003fcf06 	br	1005d5c <_fflush_r+0x138>

01005e20 <fflush>:
 1005e20:	01404034 	movhi	r5,256
 1005e24:	29570904 	addi	r5,r5,23588
 1005e28:	2007883a 	mov	r3,r4
 1005e2c:	20000526 	beq	r4,zero,1005e44 <fflush+0x24>
 1005e30:	00804074 	movhi	r2,257
 1005e34:	10939004 	addi	r2,r2,20032
 1005e38:	11000017 	ldw	r4,0(r2)
 1005e3c:	180b883a 	mov	r5,r3
 1005e40:	1005c241 	jmpi	1005c24 <_fflush_r>
 1005e44:	00804074 	movhi	r2,257
 1005e48:	10939104 	addi	r2,r2,20036
 1005e4c:	11000017 	ldw	r4,0(r2)
 1005e50:	1006c2c1 	jmpi	1006c2c <_fwalk_reent>

01005e54 <std>:
 1005e54:	00804074 	movhi	r2,257
 1005e58:	10a5e704 	addi	r2,r2,-26724
 1005e5c:	20800b15 	stw	r2,44(r4)
 1005e60:	00804074 	movhi	r2,257
 1005e64:	10a62204 	addi	r2,r2,-26488
 1005e68:	20800815 	stw	r2,32(r4)
 1005e6c:	00c04074 	movhi	r3,257
 1005e70:	18e60304 	addi	r3,r3,-26612
 1005e74:	00804074 	movhi	r2,257
 1005e78:	10a5e904 	addi	r2,r2,-26716
 1005e7c:	2140030d 	sth	r5,12(r4)
 1005e80:	2180038d 	sth	r6,14(r4)
 1005e84:	20c00915 	stw	r3,36(r4)
 1005e88:	20800a15 	stw	r2,40(r4)
 1005e8c:	20000015 	stw	zero,0(r4)
 1005e90:	20000115 	stw	zero,4(r4)
 1005e94:	20000215 	stw	zero,8(r4)
 1005e98:	20000415 	stw	zero,16(r4)
 1005e9c:	20000515 	stw	zero,20(r4)
 1005ea0:	20000615 	stw	zero,24(r4)
 1005ea4:	21000715 	stw	r4,28(r4)
 1005ea8:	f800283a 	ret

01005eac <__sfp_lock_acquire>:
 1005eac:	f800283a 	ret

01005eb0 <__sfp_lock_release>:
 1005eb0:	f800283a 	ret

01005eb4 <__sinit_lock_acquire>:
 1005eb4:	f800283a 	ret

01005eb8 <__sinit_lock_release>:
 1005eb8:	f800283a 	ret

01005ebc <__sinit>:
 1005ebc:	20800e17 	ldw	r2,56(r4)
 1005ec0:	defffd04 	addi	sp,sp,-12
 1005ec4:	dc400115 	stw	r17,4(sp)
 1005ec8:	dc000015 	stw	r16,0(sp)
 1005ecc:	dfc00215 	stw	ra,8(sp)
 1005ed0:	04400044 	movi	r17,1
 1005ed4:	01400104 	movi	r5,4
 1005ed8:	000d883a 	mov	r6,zero
 1005edc:	2021883a 	mov	r16,r4
 1005ee0:	2200bb04 	addi	r8,r4,748
 1005ee4:	200f883a 	mov	r7,r4
 1005ee8:	10000526 	beq	r2,zero,1005f00 <__sinit+0x44>
 1005eec:	dfc00217 	ldw	ra,8(sp)
 1005ef0:	dc400117 	ldw	r17,4(sp)
 1005ef4:	dc000017 	ldw	r16,0(sp)
 1005ef8:	dec00304 	addi	sp,sp,12
 1005efc:	f800283a 	ret
 1005f00:	21000117 	ldw	r4,4(r4)
 1005f04:	00804034 	movhi	r2,256
 1005f08:	1097e804 	addi	r2,r2,24480
 1005f0c:	00c000c4 	movi	r3,3
 1005f10:	80800f15 	stw	r2,60(r16)
 1005f14:	80c0b915 	stw	r3,740(r16)
 1005f18:	8200ba15 	stw	r8,744(r16)
 1005f1c:	84400e15 	stw	r17,56(r16)
 1005f20:	8000b815 	stw	zero,736(r16)
 1005f24:	1005e540 	call	1005e54 <std>
 1005f28:	81000217 	ldw	r4,8(r16)
 1005f2c:	880d883a 	mov	r6,r17
 1005f30:	800f883a 	mov	r7,r16
 1005f34:	01400284 	movi	r5,10
 1005f38:	1005e540 	call	1005e54 <std>
 1005f3c:	81000317 	ldw	r4,12(r16)
 1005f40:	800f883a 	mov	r7,r16
 1005f44:	01400484 	movi	r5,18
 1005f48:	01800084 	movi	r6,2
 1005f4c:	dfc00217 	ldw	ra,8(sp)
 1005f50:	dc400117 	ldw	r17,4(sp)
 1005f54:	dc000017 	ldw	r16,0(sp)
 1005f58:	dec00304 	addi	sp,sp,12
 1005f5c:	1005e541 	jmpi	1005e54 <std>

01005f60 <__fp_lock>:
 1005f60:	0005883a 	mov	r2,zero
 1005f64:	f800283a 	ret

01005f68 <__fp_unlock>:
 1005f68:	0005883a 	mov	r2,zero
 1005f6c:	f800283a 	ret

01005f70 <__fp_unlock_all>:
 1005f70:	00804074 	movhi	r2,257
 1005f74:	10939004 	addi	r2,r2,20032
 1005f78:	11000017 	ldw	r4,0(r2)
 1005f7c:	01404034 	movhi	r5,256
 1005f80:	2957da04 	addi	r5,r5,24424
 1005f84:	1006cf41 	jmpi	1006cf4 <_fwalk>

01005f88 <__fp_lock_all>:
 1005f88:	00804074 	movhi	r2,257
 1005f8c:	10939004 	addi	r2,r2,20032
 1005f90:	11000017 	ldw	r4,0(r2)
 1005f94:	01404034 	movhi	r5,256
 1005f98:	2957d804 	addi	r5,r5,24416
 1005f9c:	1006cf41 	jmpi	1006cf4 <_fwalk>

01005fa0 <_cleanup_r>:
 1005fa0:	01404074 	movhi	r5,257
 1005fa4:	29705804 	addi	r5,r5,-16032
 1005fa8:	1006cf41 	jmpi	1006cf4 <_fwalk>

01005fac <_cleanup>:
 1005fac:	00804074 	movhi	r2,257
 1005fb0:	10939104 	addi	r2,r2,20036
 1005fb4:	11000017 	ldw	r4,0(r2)
 1005fb8:	1005fa01 	jmpi	1005fa0 <_cleanup_r>

01005fbc <__sfmoreglue>:
 1005fbc:	defffc04 	addi	sp,sp,-16
 1005fc0:	dc400115 	stw	r17,4(sp)
 1005fc4:	2c401724 	muli	r17,r5,92
 1005fc8:	dc800215 	stw	r18,8(sp)
 1005fcc:	2825883a 	mov	r18,r5
 1005fd0:	89400304 	addi	r5,r17,12
 1005fd4:	dc000015 	stw	r16,0(sp)
 1005fd8:	dfc00315 	stw	ra,12(sp)
 1005fdc:	10070300 	call	1007030 <_malloc_r>
 1005fe0:	0021883a 	mov	r16,zero
 1005fe4:	880d883a 	mov	r6,r17
 1005fe8:	000b883a 	mov	r5,zero
 1005fec:	10000626 	beq	r2,zero,1006008 <__sfmoreglue+0x4c>
 1005ff0:	11000304 	addi	r4,r2,12
 1005ff4:	14800115 	stw	r18,4(r2)
 1005ff8:	10000015 	stw	zero,0(r2)
 1005ffc:	11000215 	stw	r4,8(r2)
 1006000:	1021883a 	mov	r16,r2
 1006004:	1007ad40 	call	1007ad4 <memset>
 1006008:	8005883a 	mov	r2,r16
 100600c:	dfc00317 	ldw	ra,12(sp)
 1006010:	dc800217 	ldw	r18,8(sp)
 1006014:	dc400117 	ldw	r17,4(sp)
 1006018:	dc000017 	ldw	r16,0(sp)
 100601c:	dec00404 	addi	sp,sp,16
 1006020:	f800283a 	ret

01006024 <__sfp>:
 1006024:	defffd04 	addi	sp,sp,-12
 1006028:	00804074 	movhi	r2,257
 100602c:	10939104 	addi	r2,r2,20036
 1006030:	dc000015 	stw	r16,0(sp)
 1006034:	14000017 	ldw	r16,0(r2)
 1006038:	dc400115 	stw	r17,4(sp)
 100603c:	dfc00215 	stw	ra,8(sp)
 1006040:	80800e17 	ldw	r2,56(r16)
 1006044:	2023883a 	mov	r17,r4
 1006048:	10002626 	beq	r2,zero,10060e4 <__sfp+0xc0>
 100604c:	8400b804 	addi	r16,r16,736
 1006050:	80800117 	ldw	r2,4(r16)
 1006054:	81000217 	ldw	r4,8(r16)
 1006058:	10ffffc4 	addi	r3,r2,-1
 100605c:	18000916 	blt	r3,zero,1006084 <__sfp+0x60>
 1006060:	2080030f 	ldh	r2,12(r4)
 1006064:	10000b26 	beq	r2,zero,1006094 <__sfp+0x70>
 1006068:	017fffc4 	movi	r5,-1
 100606c:	00000206 	br	1006078 <__sfp+0x54>
 1006070:	2080030f 	ldh	r2,12(r4)
 1006074:	10000726 	beq	r2,zero,1006094 <__sfp+0x70>
 1006078:	18ffffc4 	addi	r3,r3,-1
 100607c:	21001704 	addi	r4,r4,92
 1006080:	197ffb1e 	bne	r3,r5,1006070 <__sfp+0x4c>
 1006084:	80800017 	ldw	r2,0(r16)
 1006088:	10001926 	beq	r2,zero,10060f0 <__sfp+0xcc>
 100608c:	1021883a 	mov	r16,r2
 1006090:	003fef06 	br	1006050 <__sfp+0x2c>
 1006094:	00bfffc4 	movi	r2,-1
 1006098:	00c00044 	movi	r3,1
 100609c:	2080038d 	sth	r2,14(r4)
 10060a0:	20c0030d 	sth	r3,12(r4)
 10060a4:	20000015 	stw	zero,0(r4)
 10060a8:	20000215 	stw	zero,8(r4)
 10060ac:	20000115 	stw	zero,4(r4)
 10060b0:	20000415 	stw	zero,16(r4)
 10060b4:	20000515 	stw	zero,20(r4)
 10060b8:	20000615 	stw	zero,24(r4)
 10060bc:	20000c15 	stw	zero,48(r4)
 10060c0:	20000d15 	stw	zero,52(r4)
 10060c4:	20001115 	stw	zero,68(r4)
 10060c8:	20001215 	stw	zero,72(r4)
 10060cc:	2005883a 	mov	r2,r4
 10060d0:	dfc00217 	ldw	ra,8(sp)
 10060d4:	dc400117 	ldw	r17,4(sp)
 10060d8:	dc000017 	ldw	r16,0(sp)
 10060dc:	dec00304 	addi	sp,sp,12
 10060e0:	f800283a 	ret
 10060e4:	8009883a 	mov	r4,r16
 10060e8:	1005ebc0 	call	1005ebc <__sinit>
 10060ec:	003fd706 	br	100604c <__sfp+0x28>
 10060f0:	8809883a 	mov	r4,r17
 10060f4:	01400104 	movi	r5,4
 10060f8:	1005fbc0 	call	1005fbc <__sfmoreglue>
 10060fc:	80800015 	stw	r2,0(r16)
 1006100:	103fe21e 	bne	r2,zero,100608c <__sfp+0x68>
 1006104:	00800304 	movi	r2,12
 1006108:	0009883a 	mov	r4,zero
 100610c:	88800015 	stw	r2,0(r17)
 1006110:	003fee06 	br	10060cc <__sfp+0xa8>

01006114 <_fread_r>:
 1006114:	defff504 	addi	sp,sp,-44
 1006118:	ddc00815 	stw	r23,32(sp)
 100611c:	39af383a 	mul	r23,r7,r6
 1006120:	df000915 	stw	fp,36(sp)
 1006124:	dd800715 	stw	r22,28(sp)
 1006128:	dcc00415 	stw	r19,16(sp)
 100612c:	dc000115 	stw	r16,4(sp)
 1006130:	dfc00a15 	stw	ra,40(sp)
 1006134:	dd400615 	stw	r21,24(sp)
 1006138:	dd000515 	stw	r20,20(sp)
 100613c:	dc800315 	stw	r18,12(sp)
 1006140:	dc400215 	stw	r17,8(sp)
 1006144:	d9800015 	stw	r6,0(sp)
 1006148:	3839883a 	mov	fp,r7
 100614c:	2821883a 	mov	r16,r5
 1006150:	202d883a 	mov	r22,r4
 1006154:	dcc00b17 	ldw	r19,44(sp)
 1006158:	b8005926 	beq	r23,zero,10062c0 <_fread_r+0x1ac>
 100615c:	20000226 	beq	r4,zero,1006168 <_fread_r+0x54>
 1006160:	20800e17 	ldw	r2,56(r4)
 1006164:	10005826 	beq	r2,zero,10062c8 <_fread_r+0x1b4>
 1006168:	9c400117 	ldw	r17,4(r19)
 100616c:	88005916 	blt	r17,zero,10062d4 <_fread_r+0x1c0>
 1006170:	9880030b 	ldhu	r2,12(r19)
 1006174:	8029883a 	mov	r20,r16
 1006178:	1080008c 	andi	r2,r2,2
 100617c:	1000221e 	bne	r2,zero,1006208 <_fread_r+0xf4>
 1006180:	b825883a 	mov	r18,r23
 1006184:	00000106 	br	100618c <_fread_r+0x78>
 1006188:	9c400117 	ldw	r17,4(r19)
 100618c:	a009883a 	mov	r4,r20
 1006190:	880d883a 	mov	r6,r17
 1006194:	8c80542e 	bgeu	r17,r18,10062e8 <_fread_r+0x1d4>
 1006198:	99400017 	ldw	r5,0(r19)
 100619c:	a469883a 	add	r20,r20,r17
 10061a0:	9465c83a 	sub	r18,r18,r17
 10061a4:	10079540 	call	1007954 <memcpy>
 10061a8:	98800017 	ldw	r2,0(r19)
 10061ac:	b009883a 	mov	r4,r22
 10061b0:	980b883a 	mov	r5,r19
 10061b4:	1461883a 	add	r16,r2,r17
 10061b8:	9c000015 	stw	r16,0(r19)
 10061bc:	10093400 	call	1009340 <__srefill_r>
 10061c0:	103ff126 	beq	r2,zero,1006188 <_fread_r+0x74>
 10061c4:	d9400017 	ldw	r5,0(sp)
 10061c8:	bc89c83a 	sub	r4,r23,r18
 10061cc:	100f0640 	call	100f064 <__udivsi3>
 10061d0:	1039883a 	mov	fp,r2
 10061d4:	e005883a 	mov	r2,fp
 10061d8:	dfc00a17 	ldw	ra,40(sp)
 10061dc:	df000917 	ldw	fp,36(sp)
 10061e0:	ddc00817 	ldw	r23,32(sp)
 10061e4:	dd800717 	ldw	r22,28(sp)
 10061e8:	dd400617 	ldw	r21,24(sp)
 10061ec:	dd000517 	ldw	r20,20(sp)
 10061f0:	dcc00417 	ldw	r19,16(sp)
 10061f4:	dc800317 	ldw	r18,12(sp)
 10061f8:	dc400217 	ldw	r17,8(sp)
 10061fc:	dc000117 	ldw	r16,4(sp)
 1006200:	dec00b04 	addi	sp,sp,44
 1006204:	f800283a 	ret
 1006208:	b825883a 	mov	r18,r23
 100620c:	8dc03436 	bltu	r17,r23,10062e0 <_fread_r+0x1cc>
 1006210:	99400017 	ldw	r5,0(r19)
 1006214:	a009883a 	mov	r4,r20
 1006218:	900d883a 	mov	r6,r18
 100621c:	10079540 	call	1007954 <memcpy>
 1006220:	9c000017 	ldw	r16,0(r19)
 1006224:	98800117 	ldw	r2,4(r19)
 1006228:	99400c17 	ldw	r5,48(r19)
 100622c:	84a1883a 	add	r16,r16,r18
 1006230:	14a3c83a 	sub	r17,r2,r18
 1006234:	a4ab883a 	add	r21,r20,r18
 1006238:	9c400115 	stw	r17,4(r19)
 100623c:	9c000015 	stw	r16,0(r19)
 1006240:	bca9c83a 	sub	r20,r23,r18
 1006244:	28000826 	beq	r5,zero,1006268 <_fread_r+0x154>
 1006248:	a03fe226 	beq	r20,zero,10061d4 <_fread_r+0xc0>
 100624c:	98801004 	addi	r2,r19,64
 1006250:	28800326 	beq	r5,r2,1006260 <_fread_r+0x14c>
 1006254:	b009883a 	mov	r4,r22
 1006258:	100647c0 	call	100647c <_free_r>
 100625c:	9c000017 	ldw	r16,0(r19)
 1006260:	98000c15 	stw	zero,48(r19)
 1006264:	00000106 	br	100626c <_fread_r+0x158>
 1006268:	a03fda26 	beq	r20,zero,10061d4 <_fread_r+0xc0>
 100626c:	9c800417 	ldw	r18,16(r19)
 1006270:	9c400517 	ldw	r17,20(r19)
 1006274:	9d400015 	stw	r21,0(r19)
 1006278:	9d400415 	stw	r21,16(r19)
 100627c:	9d000515 	stw	r20,20(r19)
 1006280:	b009883a 	mov	r4,r22
 1006284:	980b883a 	mov	r5,r19
 1006288:	10093400 	call	1009340 <__srefill_r>
 100628c:	98c00117 	ldw	r3,4(r19)
 1006290:	9c800415 	stw	r18,16(r19)
 1006294:	9c400515 	stw	r17,20(r19)
 1006298:	a8eb883a 	add	r21,r21,r3
 100629c:	9c000015 	stw	r16,0(r19)
 10062a0:	a0e9c83a 	sub	r20,r20,r3
 10062a4:	98000115 	stw	zero,4(r19)
 10062a8:	103fef26 	beq	r2,zero,1006268 <_fread_r+0x154>
 10062ac:	d9400017 	ldw	r5,0(sp)
 10062b0:	bd09c83a 	sub	r4,r23,r20
 10062b4:	100f0640 	call	100f064 <__udivsi3>
 10062b8:	1039883a 	mov	fp,r2
 10062bc:	003fc506 	br	10061d4 <_fread_r+0xc0>
 10062c0:	0039883a 	mov	fp,zero
 10062c4:	003fc306 	br	10061d4 <_fread_r+0xc0>
 10062c8:	1005ebc0 	call	1005ebc <__sinit>
 10062cc:	9c400117 	ldw	r17,4(r19)
 10062d0:	883fa70e 	bge	r17,zero,1006170 <_fread_r+0x5c>
 10062d4:	0023883a 	mov	r17,zero
 10062d8:	98000115 	stw	zero,4(r19)
 10062dc:	003fa406 	br	1006170 <_fread_r+0x5c>
 10062e0:	8825883a 	mov	r18,r17
 10062e4:	003fca06 	br	1006210 <_fread_r+0xfc>
 10062e8:	99400017 	ldw	r5,0(r19)
 10062ec:	900d883a 	mov	r6,r18
 10062f0:	10079540 	call	1007954 <memcpy>
 10062f4:	98c00117 	ldw	r3,4(r19)
 10062f8:	98800017 	ldw	r2,0(r19)
 10062fc:	1c87c83a 	sub	r3,r3,r18
 1006300:	1485883a 	add	r2,r2,r18
 1006304:	98800015 	stw	r2,0(r19)
 1006308:	98c00115 	stw	r3,4(r19)
 100630c:	003fb106 	br	10061d4 <_fread_r+0xc0>

01006310 <fread>:
 1006310:	00804074 	movhi	r2,257
 1006314:	10939004 	addi	r2,r2,20032
 1006318:	2017883a 	mov	r11,r4
 100631c:	11000017 	ldw	r4,0(r2)
 1006320:	defffe04 	addi	sp,sp,-8
 1006324:	3013883a 	mov	r9,r6
 1006328:	2805883a 	mov	r2,r5
 100632c:	d9c00015 	stw	r7,0(sp)
 1006330:	580b883a 	mov	r5,r11
 1006334:	100d883a 	mov	r6,r2
 1006338:	480f883a 	mov	r7,r9
 100633c:	dfc00115 	stw	ra,4(sp)
 1006340:	10061140 	call	1006114 <_fread_r>
 1006344:	dfc00117 	ldw	ra,4(sp)
 1006348:	dec00204 	addi	sp,sp,8
 100634c:	f800283a 	ret

01006350 <_malloc_trim_r>:
 1006350:	defffb04 	addi	sp,sp,-20
 1006354:	dcc00315 	stw	r19,12(sp)
 1006358:	04c04074 	movhi	r19,257
 100635c:	9ccdeb04 	addi	r19,r19,14252
 1006360:	dc800215 	stw	r18,8(sp)
 1006364:	dc400115 	stw	r17,4(sp)
 1006368:	dc000015 	stw	r16,0(sp)
 100636c:	2823883a 	mov	r17,r5
 1006370:	2025883a 	mov	r18,r4
 1006374:	dfc00415 	stw	ra,16(sp)
 1006378:	100ff880 	call	100ff88 <__malloc_lock>
 100637c:	98800217 	ldw	r2,8(r19)
 1006380:	9009883a 	mov	r4,r18
 1006384:	000b883a 	mov	r5,zero
 1006388:	10c00117 	ldw	r3,4(r2)
 100638c:	00bfff04 	movi	r2,-4
 1006390:	18a0703a 	and	r16,r3,r2
 1006394:	8463c83a 	sub	r17,r16,r17
 1006398:	8c43fbc4 	addi	r17,r17,4079
 100639c:	8822d33a 	srli	r17,r17,12
 10063a0:	0083ffc4 	movi	r2,4095
 10063a4:	8c7fffc4 	addi	r17,r17,-1
 10063a8:	8822933a 	slli	r17,r17,12
 10063ac:	1440060e 	bge	r2,r17,10063c8 <_malloc_trim_r+0x78>
 10063b0:	10095900 	call	1009590 <_sbrk_r>
 10063b4:	98c00217 	ldw	r3,8(r19)
 10063b8:	9009883a 	mov	r4,r18
 10063bc:	044bc83a 	sub	r5,zero,r17
 10063c0:	80c7883a 	add	r3,r16,r3
 10063c4:	10c00926 	beq	r2,r3,10063ec <_malloc_trim_r+0x9c>
 10063c8:	100ffa80 	call	100ffa8 <__malloc_unlock>
 10063cc:	0005883a 	mov	r2,zero
 10063d0:	dfc00417 	ldw	ra,16(sp)
 10063d4:	dcc00317 	ldw	r19,12(sp)
 10063d8:	dc800217 	ldw	r18,8(sp)
 10063dc:	dc400117 	ldw	r17,4(sp)
 10063e0:	dc000017 	ldw	r16,0(sp)
 10063e4:	dec00504 	addi	sp,sp,20
 10063e8:	f800283a 	ret
 10063ec:	9009883a 	mov	r4,r18
 10063f0:	10095900 	call	1009590 <_sbrk_r>
 10063f4:	844dc83a 	sub	r6,r16,r17
 10063f8:	00ffffc4 	movi	r3,-1
 10063fc:	9009883a 	mov	r4,r18
 1006400:	000b883a 	mov	r5,zero
 1006404:	01c04074 	movhi	r7,257
 1006408:	39da6504 	addi	r7,r7,27028
 100640c:	31800054 	ori	r6,r6,1
 1006410:	10c00926 	beq	r2,r3,1006438 <_malloc_trim_r+0xe8>
 1006414:	38800017 	ldw	r2,0(r7)
 1006418:	98c00217 	ldw	r3,8(r19)
 100641c:	9009883a 	mov	r4,r18
 1006420:	1445c83a 	sub	r2,r2,r17
 1006424:	38800015 	stw	r2,0(r7)
 1006428:	19800115 	stw	r6,4(r3)
 100642c:	100ffa80 	call	100ffa8 <__malloc_unlock>
 1006430:	00800044 	movi	r2,1
 1006434:	003fe606 	br	10063d0 <_malloc_trim_r+0x80>
 1006438:	10095900 	call	1009590 <_sbrk_r>
 100643c:	99800217 	ldw	r6,8(r19)
 1006440:	100f883a 	mov	r7,r2
 1006444:	9009883a 	mov	r4,r18
 1006448:	1187c83a 	sub	r3,r2,r6
 100644c:	008003c4 	movi	r2,15
 1006450:	19400054 	ori	r5,r3,1
 1006454:	10ffdc0e 	bge	r2,r3,10063c8 <_malloc_trim_r+0x78>
 1006458:	00804074 	movhi	r2,257
 100645c:	10939504 	addi	r2,r2,20052
 1006460:	10c00017 	ldw	r3,0(r2)
 1006464:	00804074 	movhi	r2,257
 1006468:	109a6504 	addi	r2,r2,27028
 100646c:	31400115 	stw	r5,4(r6)
 1006470:	38c7c83a 	sub	r3,r7,r3
 1006474:	10c00015 	stw	r3,0(r2)
 1006478:	003fd306 	br	10063c8 <_malloc_trim_r+0x78>

0100647c <_free_r>:
 100647c:	defffd04 	addi	sp,sp,-12
 1006480:	dc400115 	stw	r17,4(sp)
 1006484:	dc000015 	stw	r16,0(sp)
 1006488:	dfc00215 	stw	ra,8(sp)
 100648c:	2821883a 	mov	r16,r5
 1006490:	2023883a 	mov	r17,r4
 1006494:	28005a26 	beq	r5,zero,1006600 <_free_r+0x184>
 1006498:	100ff880 	call	100ff88 <__malloc_lock>
 100649c:	823ffe04 	addi	r8,r16,-8
 10064a0:	41400117 	ldw	r5,4(r8)
 10064a4:	00bfff84 	movi	r2,-2
 10064a8:	02804074 	movhi	r10,257
 10064ac:	528deb04 	addi	r10,r10,14252
 10064b0:	288e703a 	and	r7,r5,r2
 10064b4:	41cd883a 	add	r6,r8,r7
 10064b8:	30c00117 	ldw	r3,4(r6)
 10064bc:	51000217 	ldw	r4,8(r10)
 10064c0:	00bfff04 	movi	r2,-4
 10064c4:	1892703a 	and	r9,r3,r2
 10064c8:	5017883a 	mov	r11,r10
 10064cc:	31006726 	beq	r6,r4,100666c <_free_r+0x1f0>
 10064d0:	2880004c 	andi	r2,r5,1
 10064d4:	1005003a 	cmpeq	r2,r2,zero
 10064d8:	32400115 	stw	r9,4(r6)
 10064dc:	10001a1e 	bne	r2,zero,1006548 <_free_r+0xcc>
 10064e0:	000b883a 	mov	r5,zero
 10064e4:	3247883a 	add	r3,r6,r9
 10064e8:	18800117 	ldw	r2,4(r3)
 10064ec:	1080004c 	andi	r2,r2,1
 10064f0:	1000231e 	bne	r2,zero,1006580 <_free_r+0x104>
 10064f4:	280ac03a 	cmpne	r5,r5,zero
 10064f8:	3a4f883a 	add	r7,r7,r9
 10064fc:	2800451e 	bne	r5,zero,1006614 <_free_r+0x198>
 1006500:	31000217 	ldw	r4,8(r6)
 1006504:	00804074 	movhi	r2,257
 1006508:	108ded04 	addi	r2,r2,14260
 100650c:	20807b26 	beq	r4,r2,10066fc <_free_r+0x280>
 1006510:	30800317 	ldw	r2,12(r6)
 1006514:	3a07883a 	add	r3,r7,r8
 1006518:	19c00015 	stw	r7,0(r3)
 100651c:	11000215 	stw	r4,8(r2)
 1006520:	20800315 	stw	r2,12(r4)
 1006524:	38800054 	ori	r2,r7,1
 1006528:	40800115 	stw	r2,4(r8)
 100652c:	28001a26 	beq	r5,zero,1006598 <_free_r+0x11c>
 1006530:	8809883a 	mov	r4,r17
 1006534:	dfc00217 	ldw	ra,8(sp)
 1006538:	dc400117 	ldw	r17,4(sp)
 100653c:	dc000017 	ldw	r16,0(sp)
 1006540:	dec00304 	addi	sp,sp,12
 1006544:	100ffa81 	jmpi	100ffa8 <__malloc_unlock>
 1006548:	80bffe17 	ldw	r2,-8(r16)
 100654c:	50c00204 	addi	r3,r10,8
 1006550:	4091c83a 	sub	r8,r8,r2
 1006554:	41000217 	ldw	r4,8(r8)
 1006558:	388f883a 	add	r7,r7,r2
 100655c:	20c06126 	beq	r4,r3,10066e4 <_free_r+0x268>
 1006560:	40800317 	ldw	r2,12(r8)
 1006564:	3247883a 	add	r3,r6,r9
 1006568:	000b883a 	mov	r5,zero
 100656c:	11000215 	stw	r4,8(r2)
 1006570:	20800315 	stw	r2,12(r4)
 1006574:	18800117 	ldw	r2,4(r3)
 1006578:	1080004c 	andi	r2,r2,1
 100657c:	103fdd26 	beq	r2,zero,10064f4 <_free_r+0x78>
 1006580:	38800054 	ori	r2,r7,1
 1006584:	3a07883a 	add	r3,r7,r8
 1006588:	280ac03a 	cmpne	r5,r5,zero
 100658c:	40800115 	stw	r2,4(r8)
 1006590:	19c00015 	stw	r7,0(r3)
 1006594:	283fe61e 	bne	r5,zero,1006530 <_free_r+0xb4>
 1006598:	00807fc4 	movi	r2,511
 100659c:	11c01f2e 	bgeu	r2,r7,100661c <_free_r+0x1a0>
 10065a0:	3806d27a 	srli	r3,r7,9
 10065a4:	1800481e 	bne	r3,zero,10066c8 <_free_r+0x24c>
 10065a8:	3804d0fa 	srli	r2,r7,3
 10065ac:	100690fa 	slli	r3,r2,3
 10065b0:	1acd883a 	add	r6,r3,r11
 10065b4:	31400217 	ldw	r5,8(r6)
 10065b8:	31405926 	beq	r6,r5,1006720 <_free_r+0x2a4>
 10065bc:	28800117 	ldw	r2,4(r5)
 10065c0:	00ffff04 	movi	r3,-4
 10065c4:	10c4703a 	and	r2,r2,r3
 10065c8:	3880022e 	bgeu	r7,r2,10065d4 <_free_r+0x158>
 10065cc:	29400217 	ldw	r5,8(r5)
 10065d0:	317ffa1e 	bne	r6,r5,10065bc <_free_r+0x140>
 10065d4:	29800317 	ldw	r6,12(r5)
 10065d8:	41800315 	stw	r6,12(r8)
 10065dc:	41400215 	stw	r5,8(r8)
 10065e0:	8809883a 	mov	r4,r17
 10065e4:	2a000315 	stw	r8,12(r5)
 10065e8:	32000215 	stw	r8,8(r6)
 10065ec:	dfc00217 	ldw	ra,8(sp)
 10065f0:	dc400117 	ldw	r17,4(sp)
 10065f4:	dc000017 	ldw	r16,0(sp)
 10065f8:	dec00304 	addi	sp,sp,12
 10065fc:	100ffa81 	jmpi	100ffa8 <__malloc_unlock>
 1006600:	dfc00217 	ldw	ra,8(sp)
 1006604:	dc400117 	ldw	r17,4(sp)
 1006608:	dc000017 	ldw	r16,0(sp)
 100660c:	dec00304 	addi	sp,sp,12
 1006610:	f800283a 	ret
 1006614:	31000217 	ldw	r4,8(r6)
 1006618:	003fbd06 	br	1006510 <_free_r+0x94>
 100661c:	3806d0fa 	srli	r3,r7,3
 1006620:	00800044 	movi	r2,1
 1006624:	51400117 	ldw	r5,4(r10)
 1006628:	180890fa 	slli	r4,r3,3
 100662c:	1807d0ba 	srai	r3,r3,2
 1006630:	22c9883a 	add	r4,r4,r11
 1006634:	21800217 	ldw	r6,8(r4)
 1006638:	10c4983a 	sll	r2,r2,r3
 100663c:	41000315 	stw	r4,12(r8)
 1006640:	41800215 	stw	r6,8(r8)
 1006644:	288ab03a 	or	r5,r5,r2
 1006648:	22000215 	stw	r8,8(r4)
 100664c:	8809883a 	mov	r4,r17
 1006650:	51400115 	stw	r5,4(r10)
 1006654:	32000315 	stw	r8,12(r6)
 1006658:	dfc00217 	ldw	ra,8(sp)
 100665c:	dc400117 	ldw	r17,4(sp)
 1006660:	dc000017 	ldw	r16,0(sp)
 1006664:	dec00304 	addi	sp,sp,12
 1006668:	100ffa81 	jmpi	100ffa8 <__malloc_unlock>
 100666c:	2880004c 	andi	r2,r5,1
 1006670:	3a4d883a 	add	r6,r7,r9
 1006674:	1000071e 	bne	r2,zero,1006694 <_free_r+0x218>
 1006678:	80bffe17 	ldw	r2,-8(r16)
 100667c:	4091c83a 	sub	r8,r8,r2
 1006680:	41000317 	ldw	r4,12(r8)
 1006684:	40c00217 	ldw	r3,8(r8)
 1006688:	308d883a 	add	r6,r6,r2
 100668c:	20c00215 	stw	r3,8(r4)
 1006690:	19000315 	stw	r4,12(r3)
 1006694:	00804074 	movhi	r2,257
 1006698:	10939404 	addi	r2,r2,20048
 100669c:	11000017 	ldw	r4,0(r2)
 10066a0:	30c00054 	ori	r3,r6,1
 10066a4:	52000215 	stw	r8,8(r10)
 10066a8:	40c00115 	stw	r3,4(r8)
 10066ac:	313fa036 	bltu	r6,r4,1006530 <_free_r+0xb4>
 10066b0:	00804074 	movhi	r2,257
 10066b4:	109a5b04 	addi	r2,r2,26988
 10066b8:	11400017 	ldw	r5,0(r2)
 10066bc:	8809883a 	mov	r4,r17
 10066c0:	10063500 	call	1006350 <_malloc_trim_r>
 10066c4:	003f9a06 	br	1006530 <_free_r+0xb4>
 10066c8:	00800104 	movi	r2,4
 10066cc:	10c0072e 	bgeu	r2,r3,10066ec <_free_r+0x270>
 10066d0:	00800504 	movi	r2,20
 10066d4:	10c01936 	bltu	r2,r3,100673c <_free_r+0x2c0>
 10066d8:	188016c4 	addi	r2,r3,91
 10066dc:	100690fa 	slli	r3,r2,3
 10066e0:	003fb306 	br	10065b0 <_free_r+0x134>
 10066e4:	01400044 	movi	r5,1
 10066e8:	003f7e06 	br	10064e4 <_free_r+0x68>
 10066ec:	3804d1ba 	srli	r2,r7,6
 10066f0:	10800e04 	addi	r2,r2,56
 10066f4:	100690fa 	slli	r3,r2,3
 10066f8:	003fad06 	br	10065b0 <_free_r+0x134>
 10066fc:	22000315 	stw	r8,12(r4)
 1006700:	22000215 	stw	r8,8(r4)
 1006704:	3a05883a 	add	r2,r7,r8
 1006708:	38c00054 	ori	r3,r7,1
 100670c:	11c00015 	stw	r7,0(r2)
 1006710:	41000215 	stw	r4,8(r8)
 1006714:	40c00115 	stw	r3,4(r8)
 1006718:	41000315 	stw	r4,12(r8)
 100671c:	003f8406 	br	1006530 <_free_r+0xb4>
 1006720:	1005d0ba 	srai	r2,r2,2
 1006724:	00c00044 	movi	r3,1
 1006728:	51000117 	ldw	r4,4(r10)
 100672c:	1886983a 	sll	r3,r3,r2
 1006730:	20c8b03a 	or	r4,r4,r3
 1006734:	51000115 	stw	r4,4(r10)
 1006738:	003fa706 	br	10065d8 <_free_r+0x15c>
 100673c:	00801504 	movi	r2,84
 1006740:	10c00436 	bltu	r2,r3,1006754 <_free_r+0x2d8>
 1006744:	3804d33a 	srli	r2,r7,12
 1006748:	10801b84 	addi	r2,r2,110
 100674c:	100690fa 	slli	r3,r2,3
 1006750:	003f9706 	br	10065b0 <_free_r+0x134>
 1006754:	00805504 	movi	r2,340
 1006758:	10c00436 	bltu	r2,r3,100676c <_free_r+0x2f0>
 100675c:	3804d3fa 	srli	r2,r7,15
 1006760:	10801dc4 	addi	r2,r2,119
 1006764:	100690fa 	slli	r3,r2,3
 1006768:	003f9106 	br	10065b0 <_free_r+0x134>
 100676c:	00815504 	movi	r2,1364
 1006770:	10c0032e 	bgeu	r2,r3,1006780 <_free_r+0x304>
 1006774:	00801f84 	movi	r2,126
 1006778:	00c0fc04 	movi	r3,1008
 100677c:	003f8c06 	br	10065b0 <_free_r+0x134>
 1006780:	3804d4ba 	srli	r2,r7,18
 1006784:	10801f04 	addi	r2,r2,124
 1006788:	100690fa 	slli	r3,r2,3
 100678c:	003f8806 	br	10065b0 <_free_r+0x134>

01006790 <__sfvwrite_r>:
 1006790:	30800217 	ldw	r2,8(r6)
 1006794:	defff504 	addi	sp,sp,-44
 1006798:	df000915 	stw	fp,36(sp)
 100679c:	dd800715 	stw	r22,28(sp)
 10067a0:	dc800315 	stw	r18,12(sp)
 10067a4:	dfc00a15 	stw	ra,40(sp)
 10067a8:	ddc00815 	stw	r23,32(sp)
 10067ac:	dd400615 	stw	r21,24(sp)
 10067b0:	dd000515 	stw	r20,20(sp)
 10067b4:	dcc00415 	stw	r19,16(sp)
 10067b8:	dc400215 	stw	r17,8(sp)
 10067bc:	dc000115 	stw	r16,4(sp)
 10067c0:	302d883a 	mov	r22,r6
 10067c4:	2039883a 	mov	fp,r4
 10067c8:	2825883a 	mov	r18,r5
 10067cc:	10001c26 	beq	r2,zero,1006840 <__sfvwrite_r+0xb0>
 10067d0:	29c0030b 	ldhu	r7,12(r5)
 10067d4:	3880020c 	andi	r2,r7,8
 10067d8:	10002726 	beq	r2,zero,1006878 <__sfvwrite_r+0xe8>
 10067dc:	28800417 	ldw	r2,16(r5)
 10067e0:	10002526 	beq	r2,zero,1006878 <__sfvwrite_r+0xe8>
 10067e4:	3880008c 	andi	r2,r7,2
 10067e8:	b5400017 	ldw	r21,0(r22)
 10067ec:	10002826 	beq	r2,zero,1006890 <__sfvwrite_r+0x100>
 10067f0:	0021883a 	mov	r16,zero
 10067f4:	0023883a 	mov	r17,zero
 10067f8:	880d883a 	mov	r6,r17
 10067fc:	e009883a 	mov	r4,fp
 1006800:	00810004 	movi	r2,1024
 1006804:	80006e26 	beq	r16,zero,10069c0 <__sfvwrite_r+0x230>
 1006808:	800f883a 	mov	r7,r16
 100680c:	91400717 	ldw	r5,28(r18)
 1006810:	1400012e 	bgeu	r2,r16,1006818 <__sfvwrite_r+0x88>
 1006814:	100f883a 	mov	r7,r2
 1006818:	90c00917 	ldw	r3,36(r18)
 100681c:	183ee83a 	callr	r3
 1006820:	1007883a 	mov	r3,r2
 1006824:	80a1c83a 	sub	r16,r16,r2
 1006828:	88a3883a 	add	r17,r17,r2
 100682c:	00806d0e 	bge	zero,r2,10069e4 <__sfvwrite_r+0x254>
 1006830:	b0800217 	ldw	r2,8(r22)
 1006834:	10c5c83a 	sub	r2,r2,r3
 1006838:	b0800215 	stw	r2,8(r22)
 100683c:	103fee1e 	bne	r2,zero,10067f8 <__sfvwrite_r+0x68>
 1006840:	0009883a 	mov	r4,zero
 1006844:	2005883a 	mov	r2,r4
 1006848:	dfc00a17 	ldw	ra,40(sp)
 100684c:	df000917 	ldw	fp,36(sp)
 1006850:	ddc00817 	ldw	r23,32(sp)
 1006854:	dd800717 	ldw	r22,28(sp)
 1006858:	dd400617 	ldw	r21,24(sp)
 100685c:	dd000517 	ldw	r20,20(sp)
 1006860:	dcc00417 	ldw	r19,16(sp)
 1006864:	dc800317 	ldw	r18,12(sp)
 1006868:	dc400217 	ldw	r17,8(sp)
 100686c:	dc000117 	ldw	r16,4(sp)
 1006870:	dec00b04 	addi	sp,sp,44
 1006874:	f800283a 	ret
 1006878:	100431c0 	call	100431c <__swsetup_r>
 100687c:	1000e41e 	bne	r2,zero,1006c10 <__sfvwrite_r+0x480>
 1006880:	91c0030b 	ldhu	r7,12(r18)
 1006884:	b5400017 	ldw	r21,0(r22)
 1006888:	3880008c 	andi	r2,r7,2
 100688c:	103fd81e 	bne	r2,zero,10067f0 <__sfvwrite_r+0x60>
 1006890:	3880004c 	andi	r2,r7,1
 1006894:	1005003a 	cmpeq	r2,r2,zero
 1006898:	10005726 	beq	r2,zero,10069f8 <__sfvwrite_r+0x268>
 100689c:	0029883a 	mov	r20,zero
 10068a0:	002f883a 	mov	r23,zero
 10068a4:	a0004226 	beq	r20,zero,10069b0 <__sfvwrite_r+0x220>
 10068a8:	3880800c 	andi	r2,r7,512
 10068ac:	94000217 	ldw	r16,8(r18)
 10068b0:	10008b26 	beq	r2,zero,1006ae0 <__sfvwrite_r+0x350>
 10068b4:	800d883a 	mov	r6,r16
 10068b8:	a400a536 	bltu	r20,r16,1006b50 <__sfvwrite_r+0x3c0>
 10068bc:	3881200c 	andi	r2,r7,1152
 10068c0:	10002726 	beq	r2,zero,1006960 <__sfvwrite_r+0x1d0>
 10068c4:	90800517 	ldw	r2,20(r18)
 10068c8:	92000417 	ldw	r8,16(r18)
 10068cc:	91400017 	ldw	r5,0(r18)
 10068d0:	1087883a 	add	r3,r2,r2
 10068d4:	1887883a 	add	r3,r3,r2
 10068d8:	1808d7fa 	srli	r4,r3,31
 10068dc:	2a21c83a 	sub	r16,r5,r8
 10068e0:	80800044 	addi	r2,r16,1
 10068e4:	20c9883a 	add	r4,r4,r3
 10068e8:	2027d07a 	srai	r19,r4,1
 10068ec:	a085883a 	add	r2,r20,r2
 10068f0:	980d883a 	mov	r6,r19
 10068f4:	9880022e 	bgeu	r19,r2,1006900 <__sfvwrite_r+0x170>
 10068f8:	1027883a 	mov	r19,r2
 10068fc:	100d883a 	mov	r6,r2
 1006900:	3881000c 	andi	r2,r7,1024
 1006904:	1000b826 	beq	r2,zero,1006be8 <__sfvwrite_r+0x458>
 1006908:	300b883a 	mov	r5,r6
 100690c:	e009883a 	mov	r4,fp
 1006910:	10070300 	call	1007030 <_malloc_r>
 1006914:	10003126 	beq	r2,zero,10069dc <__sfvwrite_r+0x24c>
 1006918:	91400417 	ldw	r5,16(r18)
 100691c:	1009883a 	mov	r4,r2
 1006920:	800d883a 	mov	r6,r16
 1006924:	1023883a 	mov	r17,r2
 1006928:	10079540 	call	1007954 <memcpy>
 100692c:	90c0030b 	ldhu	r3,12(r18)
 1006930:	00beffc4 	movi	r2,-1025
 1006934:	1886703a 	and	r3,r3,r2
 1006938:	18c02014 	ori	r3,r3,128
 100693c:	90c0030d 	sth	r3,12(r18)
 1006940:	9c07c83a 	sub	r3,r19,r16
 1006944:	8c05883a 	add	r2,r17,r16
 1006948:	a00d883a 	mov	r6,r20
 100694c:	a021883a 	mov	r16,r20
 1006950:	90800015 	stw	r2,0(r18)
 1006954:	90c00215 	stw	r3,8(r18)
 1006958:	94400415 	stw	r17,16(r18)
 100695c:	94c00515 	stw	r19,20(r18)
 1006960:	91000017 	ldw	r4,0(r18)
 1006964:	b80b883a 	mov	r5,r23
 1006968:	a023883a 	mov	r17,r20
 100696c:	10079f40 	call	10079f4 <memmove>
 1006970:	90c00217 	ldw	r3,8(r18)
 1006974:	90800017 	ldw	r2,0(r18)
 1006978:	a027883a 	mov	r19,r20
 100697c:	1c07c83a 	sub	r3,r3,r16
 1006980:	1405883a 	add	r2,r2,r16
 1006984:	90c00215 	stw	r3,8(r18)
 1006988:	a021883a 	mov	r16,r20
 100698c:	90800015 	stw	r2,0(r18)
 1006990:	b0800217 	ldw	r2,8(r22)
 1006994:	1405c83a 	sub	r2,r2,r16
 1006998:	b0800215 	stw	r2,8(r22)
 100699c:	103fa826 	beq	r2,zero,1006840 <__sfvwrite_r+0xb0>
 10069a0:	a469c83a 	sub	r20,r20,r17
 10069a4:	91c0030b 	ldhu	r7,12(r18)
 10069a8:	bcef883a 	add	r23,r23,r19
 10069ac:	a03fbe1e 	bne	r20,zero,10068a8 <__sfvwrite_r+0x118>
 10069b0:	adc00017 	ldw	r23,0(r21)
 10069b4:	ad000117 	ldw	r20,4(r21)
 10069b8:	ad400204 	addi	r21,r21,8
 10069bc:	003fb906 	br	10068a4 <__sfvwrite_r+0x114>
 10069c0:	ac400017 	ldw	r17,0(r21)
 10069c4:	ac000117 	ldw	r16,4(r21)
 10069c8:	ad400204 	addi	r21,r21,8
 10069cc:	003f8a06 	br	10067f8 <__sfvwrite_r+0x68>
 10069d0:	91400417 	ldw	r5,16(r18)
 10069d4:	e009883a 	mov	r4,fp
 10069d8:	100647c0 	call	100647c <_free_r>
 10069dc:	00800304 	movi	r2,12
 10069e0:	e0800015 	stw	r2,0(fp)
 10069e4:	9080030b 	ldhu	r2,12(r18)
 10069e8:	013fffc4 	movi	r4,-1
 10069ec:	10801014 	ori	r2,r2,64
 10069f0:	9080030d 	sth	r2,12(r18)
 10069f4:	003f9306 	br	1006844 <__sfvwrite_r+0xb4>
 10069f8:	0027883a 	mov	r19,zero
 10069fc:	002f883a 	mov	r23,zero
 1006a00:	d8000015 	stw	zero,0(sp)
 1006a04:	0029883a 	mov	r20,zero
 1006a08:	98001e26 	beq	r19,zero,1006a84 <__sfvwrite_r+0x2f4>
 1006a0c:	d8c00017 	ldw	r3,0(sp)
 1006a10:	1804c03a 	cmpne	r2,r3,zero
 1006a14:	10005e26 	beq	r2,zero,1006b90 <__sfvwrite_r+0x400>
 1006a18:	9821883a 	mov	r16,r19
 1006a1c:	a4c0012e 	bgeu	r20,r19,1006a24 <__sfvwrite_r+0x294>
 1006a20:	a021883a 	mov	r16,r20
 1006a24:	91000017 	ldw	r4,0(r18)
 1006a28:	90800417 	ldw	r2,16(r18)
 1006a2c:	91800217 	ldw	r6,8(r18)
 1006a30:	91c00517 	ldw	r7,20(r18)
 1006a34:	1100022e 	bgeu	r2,r4,1006a40 <__sfvwrite_r+0x2b0>
 1006a38:	31e3883a 	add	r17,r6,r7
 1006a3c:	8c001616 	blt	r17,r16,1006a98 <__sfvwrite_r+0x308>
 1006a40:	81c03816 	blt	r16,r7,1006b24 <__sfvwrite_r+0x394>
 1006a44:	90c00917 	ldw	r3,36(r18)
 1006a48:	91400717 	ldw	r5,28(r18)
 1006a4c:	e009883a 	mov	r4,fp
 1006a50:	b80d883a 	mov	r6,r23
 1006a54:	183ee83a 	callr	r3
 1006a58:	1023883a 	mov	r17,r2
 1006a5c:	00bfe10e 	bge	zero,r2,10069e4 <__sfvwrite_r+0x254>
 1006a60:	a469c83a 	sub	r20,r20,r17
 1006a64:	a0001826 	beq	r20,zero,1006ac8 <__sfvwrite_r+0x338>
 1006a68:	b0800217 	ldw	r2,8(r22)
 1006a6c:	1445c83a 	sub	r2,r2,r17
 1006a70:	b0800215 	stw	r2,8(r22)
 1006a74:	103f7226 	beq	r2,zero,1006840 <__sfvwrite_r+0xb0>
 1006a78:	9c67c83a 	sub	r19,r19,r17
 1006a7c:	bc6f883a 	add	r23,r23,r17
 1006a80:	983fe21e 	bne	r19,zero,1006a0c <__sfvwrite_r+0x27c>
 1006a84:	adc00017 	ldw	r23,0(r21)
 1006a88:	acc00117 	ldw	r19,4(r21)
 1006a8c:	ad400204 	addi	r21,r21,8
 1006a90:	d8000015 	stw	zero,0(sp)
 1006a94:	003fdc06 	br	1006a08 <__sfvwrite_r+0x278>
 1006a98:	b80b883a 	mov	r5,r23
 1006a9c:	880d883a 	mov	r6,r17
 1006aa0:	10079f40 	call	10079f4 <memmove>
 1006aa4:	90c00017 	ldw	r3,0(r18)
 1006aa8:	e009883a 	mov	r4,fp
 1006aac:	900b883a 	mov	r5,r18
 1006ab0:	1c47883a 	add	r3,r3,r17
 1006ab4:	90c00015 	stw	r3,0(r18)
 1006ab8:	1005c240 	call	1005c24 <_fflush_r>
 1006abc:	103fc91e 	bne	r2,zero,10069e4 <__sfvwrite_r+0x254>
 1006ac0:	a469c83a 	sub	r20,r20,r17
 1006ac4:	a03fe81e 	bne	r20,zero,1006a68 <__sfvwrite_r+0x2d8>
 1006ac8:	e009883a 	mov	r4,fp
 1006acc:	900b883a 	mov	r5,r18
 1006ad0:	1005c240 	call	1005c24 <_fflush_r>
 1006ad4:	103fc31e 	bne	r2,zero,10069e4 <__sfvwrite_r+0x254>
 1006ad8:	d8000015 	stw	zero,0(sp)
 1006adc:	003fe206 	br	1006a68 <__sfvwrite_r+0x2d8>
 1006ae0:	91000017 	ldw	r4,0(r18)
 1006ae4:	90800417 	ldw	r2,16(r18)
 1006ae8:	1100022e 	bgeu	r2,r4,1006af4 <__sfvwrite_r+0x364>
 1006aec:	8023883a 	mov	r17,r16
 1006af0:	85003136 	bltu	r16,r20,1006bb8 <__sfvwrite_r+0x428>
 1006af4:	91c00517 	ldw	r7,20(r18)
 1006af8:	a1c01836 	bltu	r20,r7,1006b5c <__sfvwrite_r+0x3cc>
 1006afc:	90c00917 	ldw	r3,36(r18)
 1006b00:	91400717 	ldw	r5,28(r18)
 1006b04:	e009883a 	mov	r4,fp
 1006b08:	b80d883a 	mov	r6,r23
 1006b0c:	183ee83a 	callr	r3
 1006b10:	1021883a 	mov	r16,r2
 1006b14:	00bfb30e 	bge	zero,r2,10069e4 <__sfvwrite_r+0x254>
 1006b18:	1023883a 	mov	r17,r2
 1006b1c:	1027883a 	mov	r19,r2
 1006b20:	003f9b06 	br	1006990 <__sfvwrite_r+0x200>
 1006b24:	b80b883a 	mov	r5,r23
 1006b28:	800d883a 	mov	r6,r16
 1006b2c:	10079f40 	call	10079f4 <memmove>
 1006b30:	90c00217 	ldw	r3,8(r18)
 1006b34:	90800017 	ldw	r2,0(r18)
 1006b38:	8023883a 	mov	r17,r16
 1006b3c:	1c07c83a 	sub	r3,r3,r16
 1006b40:	1405883a 	add	r2,r2,r16
 1006b44:	90c00215 	stw	r3,8(r18)
 1006b48:	90800015 	stw	r2,0(r18)
 1006b4c:	003fc406 	br	1006a60 <__sfvwrite_r+0x2d0>
 1006b50:	a00d883a 	mov	r6,r20
 1006b54:	a021883a 	mov	r16,r20
 1006b58:	003f8106 	br	1006960 <__sfvwrite_r+0x1d0>
 1006b5c:	b80b883a 	mov	r5,r23
 1006b60:	a00d883a 	mov	r6,r20
 1006b64:	10079f40 	call	10079f4 <memmove>
 1006b68:	90c00217 	ldw	r3,8(r18)
 1006b6c:	90800017 	ldw	r2,0(r18)
 1006b70:	a021883a 	mov	r16,r20
 1006b74:	1d07c83a 	sub	r3,r3,r20
 1006b78:	1505883a 	add	r2,r2,r20
 1006b7c:	a023883a 	mov	r17,r20
 1006b80:	a027883a 	mov	r19,r20
 1006b84:	90c00215 	stw	r3,8(r18)
 1006b88:	90800015 	stw	r2,0(r18)
 1006b8c:	003f8006 	br	1006990 <__sfvwrite_r+0x200>
 1006b90:	b809883a 	mov	r4,r23
 1006b94:	01400284 	movi	r5,10
 1006b98:	980d883a 	mov	r6,r19
 1006b9c:	10078700 	call	1007870 <memchr>
 1006ba0:	10001726 	beq	r2,zero,1006c00 <__sfvwrite_r+0x470>
 1006ba4:	15c5c83a 	sub	r2,r2,r23
 1006ba8:	15000044 	addi	r20,r2,1
 1006bac:	00800044 	movi	r2,1
 1006bb0:	d8800015 	stw	r2,0(sp)
 1006bb4:	003f9806 	br	1006a18 <__sfvwrite_r+0x288>
 1006bb8:	b80b883a 	mov	r5,r23
 1006bbc:	800d883a 	mov	r6,r16
 1006bc0:	10079f40 	call	10079f4 <memmove>
 1006bc4:	90c00017 	ldw	r3,0(r18)
 1006bc8:	e009883a 	mov	r4,fp
 1006bcc:	900b883a 	mov	r5,r18
 1006bd0:	1c07883a 	add	r3,r3,r16
 1006bd4:	90c00015 	stw	r3,0(r18)
 1006bd8:	8027883a 	mov	r19,r16
 1006bdc:	1005c240 	call	1005c24 <_fflush_r>
 1006be0:	103f6b26 	beq	r2,zero,1006990 <__sfvwrite_r+0x200>
 1006be4:	003f7f06 	br	10069e4 <__sfvwrite_r+0x254>
 1006be8:	400b883a 	mov	r5,r8
 1006bec:	e009883a 	mov	r4,fp
 1006bf0:	1008d4c0 	call	1008d4c <_realloc_r>
 1006bf4:	103f7626 	beq	r2,zero,10069d0 <__sfvwrite_r+0x240>
 1006bf8:	1023883a 	mov	r17,r2
 1006bfc:	003f5006 	br	1006940 <__sfvwrite_r+0x1b0>
 1006c00:	00c00044 	movi	r3,1
 1006c04:	9d000044 	addi	r20,r19,1
 1006c08:	d8c00015 	stw	r3,0(sp)
 1006c0c:	003f8206 	br	1006a18 <__sfvwrite_r+0x288>
 1006c10:	9080030b 	ldhu	r2,12(r18)
 1006c14:	00c00244 	movi	r3,9
 1006c18:	013fffc4 	movi	r4,-1
 1006c1c:	10801014 	ori	r2,r2,64
 1006c20:	9080030d 	sth	r2,12(r18)
 1006c24:	e0c00015 	stw	r3,0(fp)
 1006c28:	003f0606 	br	1006844 <__sfvwrite_r+0xb4>

01006c2c <_fwalk_reent>:
 1006c2c:	defff704 	addi	sp,sp,-36
 1006c30:	dcc00315 	stw	r19,12(sp)
 1006c34:	24c0b804 	addi	r19,r4,736
 1006c38:	dd800615 	stw	r22,24(sp)
 1006c3c:	dd400515 	stw	r21,20(sp)
 1006c40:	dfc00815 	stw	ra,32(sp)
 1006c44:	ddc00715 	stw	r23,28(sp)
 1006c48:	dd000415 	stw	r20,16(sp)
 1006c4c:	dc800215 	stw	r18,8(sp)
 1006c50:	dc400115 	stw	r17,4(sp)
 1006c54:	dc000015 	stw	r16,0(sp)
 1006c58:	202b883a 	mov	r21,r4
 1006c5c:	282d883a 	mov	r22,r5
 1006c60:	1005eac0 	call	1005eac <__sfp_lock_acquire>
 1006c64:	98002126 	beq	r19,zero,1006cec <_fwalk_reent+0xc0>
 1006c68:	002f883a 	mov	r23,zero
 1006c6c:	9c800117 	ldw	r18,4(r19)
 1006c70:	9c000217 	ldw	r16,8(r19)
 1006c74:	90bfffc4 	addi	r2,r18,-1
 1006c78:	10000d16 	blt	r2,zero,1006cb0 <_fwalk_reent+0x84>
 1006c7c:	0023883a 	mov	r17,zero
 1006c80:	053fffc4 	movi	r20,-1
 1006c84:	8080030f 	ldh	r2,12(r16)
 1006c88:	8c400044 	addi	r17,r17,1
 1006c8c:	10000626 	beq	r2,zero,1006ca8 <_fwalk_reent+0x7c>
 1006c90:	8080038f 	ldh	r2,14(r16)
 1006c94:	800b883a 	mov	r5,r16
 1006c98:	a809883a 	mov	r4,r21
 1006c9c:	15000226 	beq	r2,r20,1006ca8 <_fwalk_reent+0x7c>
 1006ca0:	b03ee83a 	callr	r22
 1006ca4:	b8aeb03a 	or	r23,r23,r2
 1006ca8:	84001704 	addi	r16,r16,92
 1006cac:	947ff51e 	bne	r18,r17,1006c84 <_fwalk_reent+0x58>
 1006cb0:	9cc00017 	ldw	r19,0(r19)
 1006cb4:	983fed1e 	bne	r19,zero,1006c6c <_fwalk_reent+0x40>
 1006cb8:	1005eb00 	call	1005eb0 <__sfp_lock_release>
 1006cbc:	b805883a 	mov	r2,r23
 1006cc0:	dfc00817 	ldw	ra,32(sp)
 1006cc4:	ddc00717 	ldw	r23,28(sp)
 1006cc8:	dd800617 	ldw	r22,24(sp)
 1006ccc:	dd400517 	ldw	r21,20(sp)
 1006cd0:	dd000417 	ldw	r20,16(sp)
 1006cd4:	dcc00317 	ldw	r19,12(sp)
 1006cd8:	dc800217 	ldw	r18,8(sp)
 1006cdc:	dc400117 	ldw	r17,4(sp)
 1006ce0:	dc000017 	ldw	r16,0(sp)
 1006ce4:	dec00904 	addi	sp,sp,36
 1006ce8:	f800283a 	ret
 1006cec:	002f883a 	mov	r23,zero
 1006cf0:	003ff106 	br	1006cb8 <_fwalk_reent+0x8c>

01006cf4 <_fwalk>:
 1006cf4:	defff804 	addi	sp,sp,-32
 1006cf8:	dcc00315 	stw	r19,12(sp)
 1006cfc:	24c0b804 	addi	r19,r4,736
 1006d00:	dd400515 	stw	r21,20(sp)
 1006d04:	dfc00715 	stw	ra,28(sp)
 1006d08:	dd800615 	stw	r22,24(sp)
 1006d0c:	dd000415 	stw	r20,16(sp)
 1006d10:	dc800215 	stw	r18,8(sp)
 1006d14:	dc400115 	stw	r17,4(sp)
 1006d18:	dc000015 	stw	r16,0(sp)
 1006d1c:	282b883a 	mov	r21,r5
 1006d20:	1005eac0 	call	1005eac <__sfp_lock_acquire>
 1006d24:	98001f26 	beq	r19,zero,1006da4 <_fwalk+0xb0>
 1006d28:	002d883a 	mov	r22,zero
 1006d2c:	9c800117 	ldw	r18,4(r19)
 1006d30:	9c000217 	ldw	r16,8(r19)
 1006d34:	90bfffc4 	addi	r2,r18,-1
 1006d38:	10000c16 	blt	r2,zero,1006d6c <_fwalk+0x78>
 1006d3c:	0023883a 	mov	r17,zero
 1006d40:	053fffc4 	movi	r20,-1
 1006d44:	8080030f 	ldh	r2,12(r16)
 1006d48:	8c400044 	addi	r17,r17,1
 1006d4c:	10000526 	beq	r2,zero,1006d64 <_fwalk+0x70>
 1006d50:	8080038f 	ldh	r2,14(r16)
 1006d54:	8009883a 	mov	r4,r16
 1006d58:	15000226 	beq	r2,r20,1006d64 <_fwalk+0x70>
 1006d5c:	a83ee83a 	callr	r21
 1006d60:	b0acb03a 	or	r22,r22,r2
 1006d64:	84001704 	addi	r16,r16,92
 1006d68:	947ff61e 	bne	r18,r17,1006d44 <_fwalk+0x50>
 1006d6c:	9cc00017 	ldw	r19,0(r19)
 1006d70:	983fee1e 	bne	r19,zero,1006d2c <_fwalk+0x38>
 1006d74:	1005eb00 	call	1005eb0 <__sfp_lock_release>
 1006d78:	b005883a 	mov	r2,r22
 1006d7c:	dfc00717 	ldw	ra,28(sp)
 1006d80:	dd800617 	ldw	r22,24(sp)
 1006d84:	dd400517 	ldw	r21,20(sp)
 1006d88:	dd000417 	ldw	r20,16(sp)
 1006d8c:	dcc00317 	ldw	r19,12(sp)
 1006d90:	dc800217 	ldw	r18,8(sp)
 1006d94:	dc400117 	ldw	r17,4(sp)
 1006d98:	dc000017 	ldw	r16,0(sp)
 1006d9c:	dec00804 	addi	sp,sp,32
 1006da0:	f800283a 	ret
 1006da4:	002d883a 	mov	r22,zero
 1006da8:	003ff206 	br	1006d74 <_fwalk+0x80>

01006dac <iswspace>:
 1006dac:	00803fc4 	movi	r2,255
 1006db0:	0007883a 	mov	r3,zero
 1006db4:	11000636 	bltu	r2,r4,1006dd0 <iswspace+0x24>
 1006db8:	00804074 	movhi	r2,257
 1006dbc:	10938f04 	addi	r2,r2,20028
 1006dc0:	10c00017 	ldw	r3,0(r2)
 1006dc4:	1907883a 	add	r3,r3,r4
 1006dc8:	18800003 	ldbu	r2,0(r3)
 1006dcc:	10c0020c 	andi	r3,r2,8
 1006dd0:	1805883a 	mov	r2,r3
 1006dd4:	f800283a 	ret

01006dd8 <__locale_charset>:
 1006dd8:	d0a00417 	ldw	r2,-32752(gp)
 1006ddc:	f800283a 	ret

01006de0 <_localeconv_r>:
 1006de0:	00804074 	movhi	r2,257
 1006de4:	108c2204 	addi	r2,r2,12424
 1006de8:	f800283a 	ret

01006dec <localeconv>:
 1006dec:	00804074 	movhi	r2,257
 1006df0:	10939004 	addi	r2,r2,20032
 1006df4:	11000017 	ldw	r4,0(r2)
 1006df8:	1006de01 	jmpi	1006de0 <_localeconv_r>

01006dfc <_setlocale_r>:
 1006dfc:	defffc04 	addi	sp,sp,-16
 1006e00:	00c04074 	movhi	r3,257
 1006e04:	18cc1d04 	addi	r3,r3,12404
 1006e08:	dc800215 	stw	r18,8(sp)
 1006e0c:	dc400115 	stw	r17,4(sp)
 1006e10:	dc000015 	stw	r16,0(sp)
 1006e14:	2023883a 	mov	r17,r4
 1006e18:	2825883a 	mov	r18,r5
 1006e1c:	dfc00315 	stw	ra,12(sp)
 1006e20:	3021883a 	mov	r16,r6
 1006e24:	3009883a 	mov	r4,r6
 1006e28:	180b883a 	mov	r5,r3
 1006e2c:	30000926 	beq	r6,zero,1006e54 <_setlocale_r+0x58>
 1006e30:	10098e80 	call	10098e8 <strcmp>
 1006e34:	8009883a 	mov	r4,r16
 1006e38:	01404074 	movhi	r5,257
 1006e3c:	294b5d04 	addi	r5,r5,11636
 1006e40:	10000b1e 	bne	r2,zero,1006e70 <_setlocale_r+0x74>
 1006e44:	8c000d15 	stw	r16,52(r17)
 1006e48:	8c800c15 	stw	r18,48(r17)
 1006e4c:	00c04074 	movhi	r3,257
 1006e50:	18cc1d04 	addi	r3,r3,12404
 1006e54:	1805883a 	mov	r2,r3
 1006e58:	dfc00317 	ldw	ra,12(sp)
 1006e5c:	dc800217 	ldw	r18,8(sp)
 1006e60:	dc400117 	ldw	r17,4(sp)
 1006e64:	dc000017 	ldw	r16,0(sp)
 1006e68:	dec00404 	addi	sp,sp,16
 1006e6c:	f800283a 	ret
 1006e70:	10098e80 	call	10098e8 <strcmp>
 1006e74:	0007883a 	mov	r3,zero
 1006e78:	103ff226 	beq	r2,zero,1006e44 <_setlocale_r+0x48>
 1006e7c:	003ff506 	br	1006e54 <_setlocale_r+0x58>

01006e80 <setlocale>:
 1006e80:	01804074 	movhi	r6,257
 1006e84:	31939004 	addi	r6,r6,20032
 1006e88:	2007883a 	mov	r3,r4
 1006e8c:	31000017 	ldw	r4,0(r6)
 1006e90:	280d883a 	mov	r6,r5
 1006e94:	180b883a 	mov	r5,r3
 1006e98:	1006dfc1 	jmpi	1006dfc <_setlocale_r>

01006e9c <__smakebuf_r>:
 1006e9c:	2880030b 	ldhu	r2,12(r5)
 1006ea0:	deffed04 	addi	sp,sp,-76
 1006ea4:	dc401015 	stw	r17,64(sp)
 1006ea8:	1080008c 	andi	r2,r2,2
 1006eac:	dc000f15 	stw	r16,60(sp)
 1006eb0:	dfc01215 	stw	ra,72(sp)
 1006eb4:	dc801115 	stw	r18,68(sp)
 1006eb8:	2821883a 	mov	r16,r5
 1006ebc:	2023883a 	mov	r17,r4
 1006ec0:	10000b26 	beq	r2,zero,1006ef0 <__smakebuf_r+0x54>
 1006ec4:	28c010c4 	addi	r3,r5,67
 1006ec8:	00800044 	movi	r2,1
 1006ecc:	28800515 	stw	r2,20(r5)
 1006ed0:	28c00415 	stw	r3,16(r5)
 1006ed4:	28c00015 	stw	r3,0(r5)
 1006ed8:	dfc01217 	ldw	ra,72(sp)
 1006edc:	dc801117 	ldw	r18,68(sp)
 1006ee0:	dc401017 	ldw	r17,64(sp)
 1006ee4:	dc000f17 	ldw	r16,60(sp)
 1006ee8:	dec01304 	addi	sp,sp,76
 1006eec:	f800283a 	ret
 1006ef0:	2940038f 	ldh	r5,14(r5)
 1006ef4:	28002116 	blt	r5,zero,1006f7c <__smakebuf_r+0xe0>
 1006ef8:	d80d883a 	mov	r6,sp
 1006efc:	100c1740 	call	100c174 <_fstat_r>
 1006f00:	10001e16 	blt	r2,zero,1006f7c <__smakebuf_r+0xe0>
 1006f04:	d8800117 	ldw	r2,4(sp)
 1006f08:	00e00014 	movui	r3,32768
 1006f0c:	113c000c 	andi	r4,r2,61440
 1006f10:	20c03126 	beq	r4,r3,1006fd8 <__smakebuf_r+0x13c>
 1006f14:	8080030b 	ldhu	r2,12(r16)
 1006f18:	00c80004 	movi	r3,8192
 1006f1c:	10820014 	ori	r2,r2,2048
 1006f20:	8080030d 	sth	r2,12(r16)
 1006f24:	20c01e26 	beq	r4,r3,1006fa0 <__smakebuf_r+0x104>
 1006f28:	04810004 	movi	r18,1024
 1006f2c:	8809883a 	mov	r4,r17
 1006f30:	900b883a 	mov	r5,r18
 1006f34:	10070300 	call	1007030 <_malloc_r>
 1006f38:	1009883a 	mov	r4,r2
 1006f3c:	10003126 	beq	r2,zero,1007004 <__smakebuf_r+0x168>
 1006f40:	80c0030b 	ldhu	r3,12(r16)
 1006f44:	00804034 	movhi	r2,256
 1006f48:	1097e804 	addi	r2,r2,24480
 1006f4c:	88800f15 	stw	r2,60(r17)
 1006f50:	18c02014 	ori	r3,r3,128
 1006f54:	84800515 	stw	r18,20(r16)
 1006f58:	80c0030d 	sth	r3,12(r16)
 1006f5c:	81000415 	stw	r4,16(r16)
 1006f60:	81000015 	stw	r4,0(r16)
 1006f64:	dfc01217 	ldw	ra,72(sp)
 1006f68:	dc801117 	ldw	r18,68(sp)
 1006f6c:	dc401017 	ldw	r17,64(sp)
 1006f70:	dc000f17 	ldw	r16,60(sp)
 1006f74:	dec01304 	addi	sp,sp,76
 1006f78:	f800283a 	ret
 1006f7c:	80c0030b 	ldhu	r3,12(r16)
 1006f80:	1880200c 	andi	r2,r3,128
 1006f84:	10000426 	beq	r2,zero,1006f98 <__smakebuf_r+0xfc>
 1006f88:	04801004 	movi	r18,64
 1006f8c:	18820014 	ori	r2,r3,2048
 1006f90:	8080030d 	sth	r2,12(r16)
 1006f94:	003fe506 	br	1006f2c <__smakebuf_r+0x90>
 1006f98:	04810004 	movi	r18,1024
 1006f9c:	003ffb06 	br	1006f8c <__smakebuf_r+0xf0>
 1006fa0:	8140038f 	ldh	r5,14(r16)
 1006fa4:	8809883a 	mov	r4,r17
 1006fa8:	100cd700 	call	100cd70 <_isatty_r>
 1006fac:	103fde26 	beq	r2,zero,1006f28 <__smakebuf_r+0x8c>
 1006fb0:	8080030b 	ldhu	r2,12(r16)
 1006fb4:	80c010c4 	addi	r3,r16,67
 1006fb8:	04810004 	movi	r18,1024
 1006fbc:	10800054 	ori	r2,r2,1
 1006fc0:	8080030d 	sth	r2,12(r16)
 1006fc4:	00800044 	movi	r2,1
 1006fc8:	80c00415 	stw	r3,16(r16)
 1006fcc:	80800515 	stw	r2,20(r16)
 1006fd0:	80c00015 	stw	r3,0(r16)
 1006fd4:	003fd506 	br	1006f2c <__smakebuf_r+0x90>
 1006fd8:	80c00a17 	ldw	r3,40(r16)
 1006fdc:	00804074 	movhi	r2,257
 1006fe0:	10a5e904 	addi	r2,r2,-26716
 1006fe4:	18bfcb1e 	bne	r3,r2,1006f14 <__smakebuf_r+0x78>
 1006fe8:	8080030b 	ldhu	r2,12(r16)
 1006fec:	00c10004 	movi	r3,1024
 1006ff0:	1825883a 	mov	r18,r3
 1006ff4:	10c4b03a 	or	r2,r2,r3
 1006ff8:	8080030d 	sth	r2,12(r16)
 1006ffc:	80c01315 	stw	r3,76(r16)
 1007000:	003fca06 	br	1006f2c <__smakebuf_r+0x90>
 1007004:	8100030b 	ldhu	r4,12(r16)
 1007008:	2080800c 	andi	r2,r4,512
 100700c:	103fb21e 	bne	r2,zero,1006ed8 <__smakebuf_r+0x3c>
 1007010:	80c010c4 	addi	r3,r16,67
 1007014:	21000094 	ori	r4,r4,2
 1007018:	00800044 	movi	r2,1
 100701c:	80800515 	stw	r2,20(r16)
 1007020:	8100030d 	sth	r4,12(r16)
 1007024:	80c00415 	stw	r3,16(r16)
 1007028:	80c00015 	stw	r3,0(r16)
 100702c:	003faa06 	br	1006ed8 <__smakebuf_r+0x3c>

01007030 <_malloc_r>:
 1007030:	defff604 	addi	sp,sp,-40
 1007034:	28c002c4 	addi	r3,r5,11
 1007038:	00800584 	movi	r2,22
 100703c:	dc800215 	stw	r18,8(sp)
 1007040:	dfc00915 	stw	ra,36(sp)
 1007044:	df000815 	stw	fp,32(sp)
 1007048:	ddc00715 	stw	r23,28(sp)
 100704c:	dd800615 	stw	r22,24(sp)
 1007050:	dd400515 	stw	r21,20(sp)
 1007054:	dd000415 	stw	r20,16(sp)
 1007058:	dcc00315 	stw	r19,12(sp)
 100705c:	dc400115 	stw	r17,4(sp)
 1007060:	dc000015 	stw	r16,0(sp)
 1007064:	2025883a 	mov	r18,r4
 1007068:	10c01236 	bltu	r2,r3,10070b4 <_malloc_r+0x84>
 100706c:	04400404 	movi	r17,16
 1007070:	8940142e 	bgeu	r17,r5,10070c4 <_malloc_r+0x94>
 1007074:	00800304 	movi	r2,12
 1007078:	0007883a 	mov	r3,zero
 100707c:	90800015 	stw	r2,0(r18)
 1007080:	1805883a 	mov	r2,r3
 1007084:	dfc00917 	ldw	ra,36(sp)
 1007088:	df000817 	ldw	fp,32(sp)
 100708c:	ddc00717 	ldw	r23,28(sp)
 1007090:	dd800617 	ldw	r22,24(sp)
 1007094:	dd400517 	ldw	r21,20(sp)
 1007098:	dd000417 	ldw	r20,16(sp)
 100709c:	dcc00317 	ldw	r19,12(sp)
 10070a0:	dc800217 	ldw	r18,8(sp)
 10070a4:	dc400117 	ldw	r17,4(sp)
 10070a8:	dc000017 	ldw	r16,0(sp)
 10070ac:	dec00a04 	addi	sp,sp,40
 10070b0:	f800283a 	ret
 10070b4:	00bffe04 	movi	r2,-8
 10070b8:	18a2703a 	and	r17,r3,r2
 10070bc:	883fed16 	blt	r17,zero,1007074 <_malloc_r+0x44>
 10070c0:	897fec36 	bltu	r17,r5,1007074 <_malloc_r+0x44>
 10070c4:	9009883a 	mov	r4,r18
 10070c8:	100ff880 	call	100ff88 <__malloc_lock>
 10070cc:	00807dc4 	movi	r2,503
 10070d0:	14402b2e 	bgeu	r2,r17,1007180 <_malloc_r+0x150>
 10070d4:	8806d27a 	srli	r3,r17,9
 10070d8:	18003f1e 	bne	r3,zero,10071d8 <_malloc_r+0x1a8>
 10070dc:	880cd0fa 	srli	r6,r17,3
 10070e0:	300490fa 	slli	r2,r6,3
 10070e4:	02c04074 	movhi	r11,257
 10070e8:	5acdeb04 	addi	r11,r11,14252
 10070ec:	12cb883a 	add	r5,r2,r11
 10070f0:	2c000317 	ldw	r16,12(r5)
 10070f4:	580f883a 	mov	r7,r11
 10070f8:	2c00041e 	bne	r5,r16,100710c <_malloc_r+0xdc>
 10070fc:	00000a06 	br	1007128 <_malloc_r+0xf8>
 1007100:	1800860e 	bge	r3,zero,100731c <_malloc_r+0x2ec>
 1007104:	84000317 	ldw	r16,12(r16)
 1007108:	2c000726 	beq	r5,r16,1007128 <_malloc_r+0xf8>
 100710c:	80800117 	ldw	r2,4(r16)
 1007110:	00ffff04 	movi	r3,-4
 1007114:	10c8703a 	and	r4,r2,r3
 1007118:	2447c83a 	sub	r3,r4,r17
 100711c:	008003c4 	movi	r2,15
 1007120:	10fff70e 	bge	r2,r3,1007100 <_malloc_r+0xd0>
 1007124:	31bfffc4 	addi	r6,r6,-1
 1007128:	32400044 	addi	r9,r6,1
 100712c:	02804074 	movhi	r10,257
 1007130:	528ded04 	addi	r10,r10,14260
 1007134:	54000217 	ldw	r16,8(r10)
 1007138:	8280a026 	beq	r16,r10,10073bc <_malloc_r+0x38c>
 100713c:	80800117 	ldw	r2,4(r16)
 1007140:	00ffff04 	movi	r3,-4
 1007144:	10ca703a 	and	r5,r2,r3
 1007148:	2c4dc83a 	sub	r6,r5,r17
 100714c:	008003c4 	movi	r2,15
 1007150:	11808316 	blt	r2,r6,1007360 <_malloc_r+0x330>
 1007154:	52800315 	stw	r10,12(r10)
 1007158:	52800215 	stw	r10,8(r10)
 100715c:	30002916 	blt	r6,zero,1007204 <_malloc_r+0x1d4>
 1007160:	8147883a 	add	r3,r16,r5
 1007164:	18800117 	ldw	r2,4(r3)
 1007168:	9009883a 	mov	r4,r18
 100716c:	10800054 	ori	r2,r2,1
 1007170:	18800115 	stw	r2,4(r3)
 1007174:	100ffa80 	call	100ffa8 <__malloc_unlock>
 1007178:	80c00204 	addi	r3,r16,8
 100717c:	003fc006 	br	1007080 <_malloc_r+0x50>
 1007180:	02c04074 	movhi	r11,257
 1007184:	5acdeb04 	addi	r11,r11,14252
 1007188:	8ac5883a 	add	r2,r17,r11
 100718c:	14000317 	ldw	r16,12(r2)
 1007190:	580f883a 	mov	r7,r11
 1007194:	8806d0fa 	srli	r3,r17,3
 1007198:	14006c26 	beq	r2,r16,100734c <_malloc_r+0x31c>
 100719c:	80c00117 	ldw	r3,4(r16)
 10071a0:	00bfff04 	movi	r2,-4
 10071a4:	81800317 	ldw	r6,12(r16)
 10071a8:	1886703a 	and	r3,r3,r2
 10071ac:	80c7883a 	add	r3,r16,r3
 10071b0:	18800117 	ldw	r2,4(r3)
 10071b4:	81400217 	ldw	r5,8(r16)
 10071b8:	9009883a 	mov	r4,r18
 10071bc:	10800054 	ori	r2,r2,1
 10071c0:	18800115 	stw	r2,4(r3)
 10071c4:	31400215 	stw	r5,8(r6)
 10071c8:	29800315 	stw	r6,12(r5)
 10071cc:	100ffa80 	call	100ffa8 <__malloc_unlock>
 10071d0:	80c00204 	addi	r3,r16,8
 10071d4:	003faa06 	br	1007080 <_malloc_r+0x50>
 10071d8:	00800104 	movi	r2,4
 10071dc:	10c0052e 	bgeu	r2,r3,10071f4 <_malloc_r+0x1c4>
 10071e0:	00800504 	movi	r2,20
 10071e4:	10c07836 	bltu	r2,r3,10073c8 <_malloc_r+0x398>
 10071e8:	198016c4 	addi	r6,r3,91
 10071ec:	300490fa 	slli	r2,r6,3
 10071f0:	003fbc06 	br	10070e4 <_malloc_r+0xb4>
 10071f4:	8804d1ba 	srli	r2,r17,6
 10071f8:	11800e04 	addi	r6,r2,56
 10071fc:	300490fa 	slli	r2,r6,3
 1007200:	003fb806 	br	10070e4 <_malloc_r+0xb4>
 1007204:	00807fc4 	movi	r2,511
 1007208:	1140bb36 	bltu	r2,r5,10074f8 <_malloc_r+0x4c8>
 100720c:	2806d0fa 	srli	r3,r5,3
 1007210:	573ffe04 	addi	fp,r10,-8
 1007214:	00800044 	movi	r2,1
 1007218:	180890fa 	slli	r4,r3,3
 100721c:	1807d0ba 	srai	r3,r3,2
 1007220:	e1c00117 	ldw	r7,4(fp)
 1007224:	5909883a 	add	r4,r11,r4
 1007228:	21400217 	ldw	r5,8(r4)
 100722c:	10c4983a 	sll	r2,r2,r3
 1007230:	81000315 	stw	r4,12(r16)
 1007234:	81400215 	stw	r5,8(r16)
 1007238:	388eb03a 	or	r7,r7,r2
 100723c:	2c000315 	stw	r16,12(r5)
 1007240:	24000215 	stw	r16,8(r4)
 1007244:	e1c00115 	stw	r7,4(fp)
 1007248:	4807883a 	mov	r3,r9
 100724c:	4800cd16 	blt	r9,zero,1007584 <_malloc_r+0x554>
 1007250:	1807d0ba 	srai	r3,r3,2
 1007254:	00800044 	movi	r2,1
 1007258:	10c8983a 	sll	r4,r2,r3
 100725c:	39004436 	bltu	r7,r4,1007370 <_malloc_r+0x340>
 1007260:	21c4703a 	and	r2,r4,r7
 1007264:	10000a1e 	bne	r2,zero,1007290 <_malloc_r+0x260>
 1007268:	2109883a 	add	r4,r4,r4
 100726c:	00bfff04 	movi	r2,-4
 1007270:	4884703a 	and	r2,r9,r2
 1007274:	3906703a 	and	r3,r7,r4
 1007278:	12400104 	addi	r9,r2,4
 100727c:	1800041e 	bne	r3,zero,1007290 <_malloc_r+0x260>
 1007280:	2109883a 	add	r4,r4,r4
 1007284:	3904703a 	and	r2,r7,r4
 1007288:	4a400104 	addi	r9,r9,4
 100728c:	103ffc26 	beq	r2,zero,1007280 <_malloc_r+0x250>
 1007290:	480490fa 	slli	r2,r9,3
 1007294:	4819883a 	mov	r12,r9
 1007298:	023fff04 	movi	r8,-4
 100729c:	589b883a 	add	r13,r11,r2
 10072a0:	6807883a 	mov	r3,r13
 10072a4:	014003c4 	movi	r5,15
 10072a8:	1c000317 	ldw	r16,12(r3)
 10072ac:	1c00041e 	bne	r3,r16,10072c0 <_malloc_r+0x290>
 10072b0:	0000a706 	br	1007550 <_malloc_r+0x520>
 10072b4:	3000ab0e 	bge	r6,zero,1007564 <_malloc_r+0x534>
 10072b8:	84000317 	ldw	r16,12(r16)
 10072bc:	1c00a426 	beq	r3,r16,1007550 <_malloc_r+0x520>
 10072c0:	80800117 	ldw	r2,4(r16)
 10072c4:	1204703a 	and	r2,r2,r8
 10072c8:	144dc83a 	sub	r6,r2,r17
 10072cc:	29bff90e 	bge	r5,r6,10072b4 <_malloc_r+0x284>
 10072d0:	81000317 	ldw	r4,12(r16)
 10072d4:	80c00217 	ldw	r3,8(r16)
 10072d8:	89400054 	ori	r5,r17,1
 10072dc:	8445883a 	add	r2,r16,r17
 10072e0:	20c00215 	stw	r3,8(r4)
 10072e4:	19000315 	stw	r4,12(r3)
 10072e8:	81400115 	stw	r5,4(r16)
 10072ec:	1187883a 	add	r3,r2,r6
 10072f0:	31000054 	ori	r4,r6,1
 10072f4:	50800315 	stw	r2,12(r10)
 10072f8:	50800215 	stw	r2,8(r10)
 10072fc:	19800015 	stw	r6,0(r3)
 1007300:	11000115 	stw	r4,4(r2)
 1007304:	12800215 	stw	r10,8(r2)
 1007308:	12800315 	stw	r10,12(r2)
 100730c:	9009883a 	mov	r4,r18
 1007310:	100ffa80 	call	100ffa8 <__malloc_unlock>
 1007314:	80c00204 	addi	r3,r16,8
 1007318:	003f5906 	br	1007080 <_malloc_r+0x50>
 100731c:	8109883a 	add	r4,r16,r4
 1007320:	20800117 	ldw	r2,4(r4)
 1007324:	80c00217 	ldw	r3,8(r16)
 1007328:	81400317 	ldw	r5,12(r16)
 100732c:	10800054 	ori	r2,r2,1
 1007330:	20800115 	stw	r2,4(r4)
 1007334:	28c00215 	stw	r3,8(r5)
 1007338:	19400315 	stw	r5,12(r3)
 100733c:	9009883a 	mov	r4,r18
 1007340:	100ffa80 	call	100ffa8 <__malloc_unlock>
 1007344:	80c00204 	addi	r3,r16,8
 1007348:	003f4d06 	br	1007080 <_malloc_r+0x50>
 100734c:	80800204 	addi	r2,r16,8
 1007350:	14000317 	ldw	r16,12(r2)
 1007354:	143f911e 	bne	r2,r16,100719c <_malloc_r+0x16c>
 1007358:	1a400084 	addi	r9,r3,2
 100735c:	003f7306 	br	100712c <_malloc_r+0xfc>
 1007360:	88c00054 	ori	r3,r17,1
 1007364:	8445883a 	add	r2,r16,r17
 1007368:	80c00115 	stw	r3,4(r16)
 100736c:	003fdf06 	br	10072ec <_malloc_r+0x2bc>
 1007370:	e4000217 	ldw	r16,8(fp)
 1007374:	00bfff04 	movi	r2,-4
 1007378:	80c00117 	ldw	r3,4(r16)
 100737c:	802d883a 	mov	r22,r16
 1007380:	18aa703a 	and	r21,r3,r2
 1007384:	ac401636 	bltu	r21,r17,10073e0 <_malloc_r+0x3b0>
 1007388:	ac49c83a 	sub	r4,r21,r17
 100738c:	008003c4 	movi	r2,15
 1007390:	1100130e 	bge	r2,r4,10073e0 <_malloc_r+0x3b0>
 1007394:	88800054 	ori	r2,r17,1
 1007398:	8447883a 	add	r3,r16,r17
 100739c:	80800115 	stw	r2,4(r16)
 10073a0:	20800054 	ori	r2,r4,1
 10073a4:	18800115 	stw	r2,4(r3)
 10073a8:	e0c00215 	stw	r3,8(fp)
 10073ac:	9009883a 	mov	r4,r18
 10073b0:	100ffa80 	call	100ffa8 <__malloc_unlock>
 10073b4:	80c00204 	addi	r3,r16,8
 10073b8:	003f3106 	br	1007080 <_malloc_r+0x50>
 10073bc:	39c00117 	ldw	r7,4(r7)
 10073c0:	573ffe04 	addi	fp,r10,-8
 10073c4:	003fa006 	br	1007248 <_malloc_r+0x218>
 10073c8:	00801504 	movi	r2,84
 10073cc:	10c06736 	bltu	r2,r3,100756c <_malloc_r+0x53c>
 10073d0:	8804d33a 	srli	r2,r17,12
 10073d4:	11801b84 	addi	r6,r2,110
 10073d8:	300490fa 	slli	r2,r6,3
 10073dc:	003f4106 	br	10070e4 <_malloc_r+0xb4>
 10073e0:	d0a6cc17 	ldw	r2,-25808(gp)
 10073e4:	d0e00617 	ldw	r3,-32744(gp)
 10073e8:	053fffc4 	movi	r20,-1
 10073ec:	10800404 	addi	r2,r2,16
 10073f0:	88a7883a 	add	r19,r17,r2
 10073f4:	1d000326 	beq	r3,r20,1007404 <_malloc_r+0x3d4>
 10073f8:	98c3ffc4 	addi	r3,r19,4095
 10073fc:	00bc0004 	movi	r2,-4096
 1007400:	18a6703a 	and	r19,r3,r2
 1007404:	9009883a 	mov	r4,r18
 1007408:	980b883a 	mov	r5,r19
 100740c:	10095900 	call	1009590 <_sbrk_r>
 1007410:	1009883a 	mov	r4,r2
 1007414:	15000426 	beq	r2,r20,1007428 <_malloc_r+0x3f8>
 1007418:	854b883a 	add	r5,r16,r21
 100741c:	1029883a 	mov	r20,r2
 1007420:	11405a2e 	bgeu	r2,r5,100758c <_malloc_r+0x55c>
 1007424:	87000c26 	beq	r16,fp,1007458 <_malloc_r+0x428>
 1007428:	e4000217 	ldw	r16,8(fp)
 100742c:	80c00117 	ldw	r3,4(r16)
 1007430:	00bfff04 	movi	r2,-4
 1007434:	1884703a 	and	r2,r3,r2
 1007438:	14400336 	bltu	r2,r17,1007448 <_malloc_r+0x418>
 100743c:	1449c83a 	sub	r4,r2,r17
 1007440:	008003c4 	movi	r2,15
 1007444:	113fd316 	blt	r2,r4,1007394 <_malloc_r+0x364>
 1007448:	9009883a 	mov	r4,r18
 100744c:	100ffa80 	call	100ffa8 <__malloc_unlock>
 1007450:	0007883a 	mov	r3,zero
 1007454:	003f0a06 	br	1007080 <_malloc_r+0x50>
 1007458:	05c04074 	movhi	r23,257
 100745c:	bdda6504 	addi	r23,r23,27028
 1007460:	b8800017 	ldw	r2,0(r23)
 1007464:	988d883a 	add	r6,r19,r2
 1007468:	b9800015 	stw	r6,0(r23)
 100746c:	d0e00617 	ldw	r3,-32744(gp)
 1007470:	00bfffc4 	movi	r2,-1
 1007474:	18808e26 	beq	r3,r2,10076b0 <_malloc_r+0x680>
 1007478:	2145c83a 	sub	r2,r4,r5
 100747c:	3085883a 	add	r2,r6,r2
 1007480:	b8800015 	stw	r2,0(r23)
 1007484:	20c001cc 	andi	r3,r4,7
 1007488:	18005f1e 	bne	r3,zero,1007608 <_malloc_r+0x5d8>
 100748c:	000b883a 	mov	r5,zero
 1007490:	a4c5883a 	add	r2,r20,r19
 1007494:	1083ffcc 	andi	r2,r2,4095
 1007498:	00c40004 	movi	r3,4096
 100749c:	1887c83a 	sub	r3,r3,r2
 10074a0:	28e7883a 	add	r19,r5,r3
 10074a4:	9009883a 	mov	r4,r18
 10074a8:	980b883a 	mov	r5,r19
 10074ac:	10095900 	call	1009590 <_sbrk_r>
 10074b0:	1007883a 	mov	r3,r2
 10074b4:	00bfffc4 	movi	r2,-1
 10074b8:	18807a26 	beq	r3,r2,10076a4 <_malloc_r+0x674>
 10074bc:	1d05c83a 	sub	r2,r3,r20
 10074c0:	9885883a 	add	r2,r19,r2
 10074c4:	10c00054 	ori	r3,r2,1
 10074c8:	b8800017 	ldw	r2,0(r23)
 10074cc:	a021883a 	mov	r16,r20
 10074d0:	a0c00115 	stw	r3,4(r20)
 10074d4:	9885883a 	add	r2,r19,r2
 10074d8:	b8800015 	stw	r2,0(r23)
 10074dc:	e5000215 	stw	r20,8(fp)
 10074e0:	b7003626 	beq	r22,fp,10075bc <_malloc_r+0x58c>
 10074e4:	018003c4 	movi	r6,15
 10074e8:	35404b36 	bltu	r6,r21,1007618 <_malloc_r+0x5e8>
 10074ec:	00800044 	movi	r2,1
 10074f0:	a0800115 	stw	r2,4(r20)
 10074f4:	003fcd06 	br	100742c <_malloc_r+0x3fc>
 10074f8:	2808d27a 	srli	r4,r5,9
 10074fc:	2000371e 	bne	r4,zero,10075dc <_malloc_r+0x5ac>
 1007500:	2808d0fa 	srli	r4,r5,3
 1007504:	200690fa 	slli	r3,r4,3
 1007508:	1ad1883a 	add	r8,r3,r11
 100750c:	41800217 	ldw	r6,8(r8)
 1007510:	41805b26 	beq	r8,r6,1007680 <_malloc_r+0x650>
 1007514:	30800117 	ldw	r2,4(r6)
 1007518:	00ffff04 	movi	r3,-4
 100751c:	10c4703a 	and	r2,r2,r3
 1007520:	2880022e 	bgeu	r5,r2,100752c <_malloc_r+0x4fc>
 1007524:	31800217 	ldw	r6,8(r6)
 1007528:	41bffa1e 	bne	r8,r6,1007514 <_malloc_r+0x4e4>
 100752c:	32000317 	ldw	r8,12(r6)
 1007530:	39c00117 	ldw	r7,4(r7)
 1007534:	82000315 	stw	r8,12(r16)
 1007538:	81800215 	stw	r6,8(r16)
 100753c:	07004074 	movhi	fp,257
 1007540:	e70deb04 	addi	fp,fp,14252
 1007544:	34000315 	stw	r16,12(r6)
 1007548:	44000215 	stw	r16,8(r8)
 100754c:	003f3e06 	br	1007248 <_malloc_r+0x218>
 1007550:	63000044 	addi	r12,r12,1
 1007554:	608000cc 	andi	r2,r12,3
 1007558:	10005d26 	beq	r2,zero,10076d0 <_malloc_r+0x6a0>
 100755c:	18c00204 	addi	r3,r3,8
 1007560:	003f5106 	br	10072a8 <_malloc_r+0x278>
 1007564:	8089883a 	add	r4,r16,r2
 1007568:	003f6d06 	br	1007320 <_malloc_r+0x2f0>
 100756c:	00805504 	movi	r2,340
 1007570:	10c02036 	bltu	r2,r3,10075f4 <_malloc_r+0x5c4>
 1007574:	8804d3fa 	srli	r2,r17,15
 1007578:	11801dc4 	addi	r6,r2,119
 100757c:	300490fa 	slli	r2,r6,3
 1007580:	003ed806 	br	10070e4 <_malloc_r+0xb4>
 1007584:	48c000c4 	addi	r3,r9,3
 1007588:	003f3106 	br	1007250 <_malloc_r+0x220>
 100758c:	05c04074 	movhi	r23,257
 1007590:	bdda6504 	addi	r23,r23,27028
 1007594:	b8800017 	ldw	r2,0(r23)
 1007598:	988d883a 	add	r6,r19,r2
 100759c:	b9800015 	stw	r6,0(r23)
 10075a0:	293fb21e 	bne	r5,r4,100746c <_malloc_r+0x43c>
 10075a4:	2083ffcc 	andi	r2,r4,4095
 10075a8:	103fb01e 	bne	r2,zero,100746c <_malloc_r+0x43c>
 10075ac:	e4000217 	ldw	r16,8(fp)
 10075b0:	9d45883a 	add	r2,r19,r21
 10075b4:	10800054 	ori	r2,r2,1
 10075b8:	80800115 	stw	r2,4(r16)
 10075bc:	b8c00017 	ldw	r3,0(r23)
 10075c0:	d0a6cd17 	ldw	r2,-25804(gp)
 10075c4:	10c0012e 	bgeu	r2,r3,10075cc <_malloc_r+0x59c>
 10075c8:	d0e6cd15 	stw	r3,-25804(gp)
 10075cc:	d0a6ce17 	ldw	r2,-25800(gp)
 10075d0:	10ff962e 	bgeu	r2,r3,100742c <_malloc_r+0x3fc>
 10075d4:	d0e6ce15 	stw	r3,-25800(gp)
 10075d8:	003f9406 	br	100742c <_malloc_r+0x3fc>
 10075dc:	00800104 	movi	r2,4
 10075e0:	11001e36 	bltu	r2,r4,100765c <_malloc_r+0x62c>
 10075e4:	2804d1ba 	srli	r2,r5,6
 10075e8:	11000e04 	addi	r4,r2,56
 10075ec:	200690fa 	slli	r3,r4,3
 10075f0:	003fc506 	br	1007508 <_malloc_r+0x4d8>
 10075f4:	00815504 	movi	r2,1364
 10075f8:	10c01d2e 	bgeu	r2,r3,1007670 <_malloc_r+0x640>
 10075fc:	01801f84 	movi	r6,126
 1007600:	0080fc04 	movi	r2,1008
 1007604:	003eb706 	br	10070e4 <_malloc_r+0xb4>
 1007608:	00800204 	movi	r2,8
 100760c:	10cbc83a 	sub	r5,r2,r3
 1007610:	2169883a 	add	r20,r4,r5
 1007614:	003f9e06 	br	1007490 <_malloc_r+0x460>
 1007618:	00bffe04 	movi	r2,-8
 100761c:	a93ffd04 	addi	r4,r21,-12
 1007620:	2088703a 	and	r4,r4,r2
 1007624:	b10b883a 	add	r5,r22,r4
 1007628:	00c00144 	movi	r3,5
 100762c:	28c00215 	stw	r3,8(r5)
 1007630:	28c00115 	stw	r3,4(r5)
 1007634:	b0800117 	ldw	r2,4(r22)
 1007638:	1080004c 	andi	r2,r2,1
 100763c:	2084b03a 	or	r2,r4,r2
 1007640:	b0800115 	stw	r2,4(r22)
 1007644:	313fdd2e 	bgeu	r6,r4,10075bc <_malloc_r+0x58c>
 1007648:	b1400204 	addi	r5,r22,8
 100764c:	9009883a 	mov	r4,r18
 1007650:	100647c0 	call	100647c <_free_r>
 1007654:	e4000217 	ldw	r16,8(fp)
 1007658:	003fd806 	br	10075bc <_malloc_r+0x58c>
 100765c:	00800504 	movi	r2,20
 1007660:	11001536 	bltu	r2,r4,10076b8 <_malloc_r+0x688>
 1007664:	210016c4 	addi	r4,r4,91
 1007668:	200690fa 	slli	r3,r4,3
 100766c:	003fa606 	br	1007508 <_malloc_r+0x4d8>
 1007670:	8804d4ba 	srli	r2,r17,18
 1007674:	11801f04 	addi	r6,r2,124
 1007678:	300490fa 	slli	r2,r6,3
 100767c:	003e9906 	br	10070e4 <_malloc_r+0xb4>
 1007680:	2009d0ba 	srai	r4,r4,2
 1007684:	01404074 	movhi	r5,257
 1007688:	294deb04 	addi	r5,r5,14252
 100768c:	00c00044 	movi	r3,1
 1007690:	28800117 	ldw	r2,4(r5)
 1007694:	1906983a 	sll	r3,r3,r4
 1007698:	10c4b03a 	or	r2,r2,r3
 100769c:	28800115 	stw	r2,4(r5)
 10076a0:	003fa306 	br	1007530 <_malloc_r+0x500>
 10076a4:	0027883a 	mov	r19,zero
 10076a8:	00c00044 	movi	r3,1
 10076ac:	003f8606 	br	10074c8 <_malloc_r+0x498>
 10076b0:	d1200615 	stw	r4,-32744(gp)
 10076b4:	003f7306 	br	1007484 <_malloc_r+0x454>
 10076b8:	00801504 	movi	r2,84
 10076bc:	11001936 	bltu	r2,r4,1007724 <_malloc_r+0x6f4>
 10076c0:	2804d33a 	srli	r2,r5,12
 10076c4:	11001b84 	addi	r4,r2,110
 10076c8:	200690fa 	slli	r3,r4,3
 10076cc:	003f8e06 	br	1007508 <_malloc_r+0x4d8>
 10076d0:	480b883a 	mov	r5,r9
 10076d4:	6807883a 	mov	r3,r13
 10076d8:	288000cc 	andi	r2,r5,3
 10076dc:	18fffe04 	addi	r3,r3,-8
 10076e0:	297fffc4 	addi	r5,r5,-1
 10076e4:	10001526 	beq	r2,zero,100773c <_malloc_r+0x70c>
 10076e8:	18800217 	ldw	r2,8(r3)
 10076ec:	10fffa26 	beq	r2,r3,10076d8 <_malloc_r+0x6a8>
 10076f0:	2109883a 	add	r4,r4,r4
 10076f4:	393f1e36 	bltu	r7,r4,1007370 <_malloc_r+0x340>
 10076f8:	203f1d26 	beq	r4,zero,1007370 <_malloc_r+0x340>
 10076fc:	21c4703a 	and	r2,r4,r7
 1007700:	10000226 	beq	r2,zero,100770c <_malloc_r+0x6dc>
 1007704:	6013883a 	mov	r9,r12
 1007708:	003ee106 	br	1007290 <_malloc_r+0x260>
 100770c:	2109883a 	add	r4,r4,r4
 1007710:	3904703a 	and	r2,r7,r4
 1007714:	63000104 	addi	r12,r12,4
 1007718:	103ffc26 	beq	r2,zero,100770c <_malloc_r+0x6dc>
 100771c:	6013883a 	mov	r9,r12
 1007720:	003edb06 	br	1007290 <_malloc_r+0x260>
 1007724:	00805504 	movi	r2,340
 1007728:	11000836 	bltu	r2,r4,100774c <_malloc_r+0x71c>
 100772c:	2804d3fa 	srli	r2,r5,15
 1007730:	11001dc4 	addi	r4,r2,119
 1007734:	200690fa 	slli	r3,r4,3
 1007738:	003f7306 	br	1007508 <_malloc_r+0x4d8>
 100773c:	0104303a 	nor	r2,zero,r4
 1007740:	388e703a 	and	r7,r7,r2
 1007744:	e1c00115 	stw	r7,4(fp)
 1007748:	003fe906 	br	10076f0 <_malloc_r+0x6c0>
 100774c:	00815504 	movi	r2,1364
 1007750:	1100032e 	bgeu	r2,r4,1007760 <_malloc_r+0x730>
 1007754:	01001f84 	movi	r4,126
 1007758:	00c0fc04 	movi	r3,1008
 100775c:	003f6a06 	br	1007508 <_malloc_r+0x4d8>
 1007760:	2804d4ba 	srli	r2,r5,18
 1007764:	11001f04 	addi	r4,r2,124
 1007768:	200690fa 	slli	r3,r4,3
 100776c:	003f6606 	br	1007508 <_malloc_r+0x4d8>

01007770 <_mbrtowc_r>:
 1007770:	defffc04 	addi	sp,sp,-16
 1007774:	dc400215 	stw	r17,8(sp)
 1007778:	dc000115 	stw	r16,4(sp)
 100777c:	dfc00315 	stw	ra,12(sp)
 1007780:	dc000417 	ldw	r16,16(sp)
 1007784:	2023883a 	mov	r17,r4
 1007788:	30000f26 	beq	r6,zero,10077c8 <_mbrtowc_r+0x58>
 100778c:	dc000015 	stw	r16,0(sp)
 1007790:	10078300 	call	1007830 <_mbtowc_r>
 1007794:	1007883a 	mov	r3,r2
 1007798:	00bfffc4 	movi	r2,-1
 100779c:	1809883a 	mov	r4,r3
 10077a0:	1880111e 	bne	r3,r2,10077e8 <_mbrtowc_r+0x78>
 10077a4:	80000015 	stw	zero,0(r16)
 10077a8:	00802284 	movi	r2,138
 10077ac:	88800015 	stw	r2,0(r17)
 10077b0:	2005883a 	mov	r2,r4
 10077b4:	dfc00317 	ldw	ra,12(sp)
 10077b8:	dc400217 	ldw	r17,8(sp)
 10077bc:	dc000117 	ldw	r16,4(sp)
 10077c0:	dec00404 	addi	sp,sp,16
 10077c4:	f800283a 	ret
 10077c8:	000b883a 	mov	r5,zero
 10077cc:	01804074 	movhi	r6,257
 10077d0:	318b5d04 	addi	r6,r6,11636
 10077d4:	01c00044 	movi	r7,1
 10077d8:	dc000015 	stw	r16,0(sp)
 10077dc:	10078300 	call	1007830 <_mbtowc_r>
 10077e0:	1007883a 	mov	r3,r2
 10077e4:	003fec06 	br	1007798 <_mbrtowc_r+0x28>
 10077e8:	1809883a 	mov	r4,r3
 10077ec:	003ff006 	br	10077b0 <_mbrtowc_r+0x40>

010077f0 <mbrtowc>:
 10077f0:	00804074 	movhi	r2,257
 10077f4:	10939004 	addi	r2,r2,20032
 10077f8:	2017883a 	mov	r11,r4
 10077fc:	11000017 	ldw	r4,0(r2)
 1007800:	defffe04 	addi	sp,sp,-8
 1007804:	3013883a 	mov	r9,r6
 1007808:	2805883a 	mov	r2,r5
 100780c:	d9c00015 	stw	r7,0(sp)
 1007810:	580b883a 	mov	r5,r11
 1007814:	100d883a 	mov	r6,r2
 1007818:	480f883a 	mov	r7,r9
 100781c:	dfc00115 	stw	ra,4(sp)
 1007820:	10077700 	call	1007770 <_mbrtowc_r>
 1007824:	dfc00117 	ldw	ra,4(sp)
 1007828:	dec00204 	addi	sp,sp,8
 100782c:	f800283a 	ret

01007830 <_mbtowc_r>:
 1007830:	deffff04 	addi	sp,sp,-4
 1007834:	0005883a 	mov	r2,zero
 1007838:	28000326 	beq	r5,zero,1007848 <_mbtowc_r+0x18>
 100783c:	3000041e 	bne	r6,zero,1007850 <_mbtowc_r+0x20>
 1007840:	dec00104 	addi	sp,sp,4
 1007844:	f800283a 	ret
 1007848:	d80b883a 	mov	r5,sp
 100784c:	303ffc26 	beq	r6,zero,1007840 <_mbtowc_r+0x10>
 1007850:	00bfff84 	movi	r2,-2
 1007854:	383ffa26 	beq	r7,zero,1007840 <_mbtowc_r+0x10>
 1007858:	30800003 	ldbu	r2,0(r6)
 100785c:	28800015 	stw	r2,0(r5)
 1007860:	30c00003 	ldbu	r3,0(r6)
 1007864:	1804c03a 	cmpne	r2,r3,zero
 1007868:	dec00104 	addi	sp,sp,4
 100786c:	f800283a 	ret

01007870 <memchr>:
 1007870:	008000c4 	movi	r2,3
 1007874:	29403fcc 	andi	r5,r5,255
 1007878:	2007883a 	mov	r3,r4
 100787c:	1180022e 	bgeu	r2,r6,1007888 <memchr+0x18>
 1007880:	2084703a 	and	r2,r4,r2
 1007884:	10000b26 	beq	r2,zero,10078b4 <memchr+0x44>
 1007888:	313fffc4 	addi	r4,r6,-1
 100788c:	3000051e 	bne	r6,zero,10078a4 <memchr+0x34>
 1007890:	00002c06 	br	1007944 <memchr+0xd4>
 1007894:	213fffc4 	addi	r4,r4,-1
 1007898:	00bfffc4 	movi	r2,-1
 100789c:	18c00044 	addi	r3,r3,1
 10078a0:	20802826 	beq	r4,r2,1007944 <memchr+0xd4>
 10078a4:	18800003 	ldbu	r2,0(r3)
 10078a8:	28bffa1e 	bne	r5,r2,1007894 <memchr+0x24>
 10078ac:	1805883a 	mov	r2,r3
 10078b0:	f800283a 	ret
 10078b4:	0011883a 	mov	r8,zero
 10078b8:	0007883a 	mov	r3,zero
 10078bc:	01c00104 	movi	r7,4
 10078c0:	4004923a 	slli	r2,r8,8
 10078c4:	18c00044 	addi	r3,r3,1
 10078c8:	1151883a 	add	r8,r2,r5
 10078cc:	19fffc1e 	bne	r3,r7,10078c0 <memchr+0x50>
 10078d0:	02bfbff4 	movhi	r10,65279
 10078d4:	52bfbfc4 	addi	r10,r10,-257
 10078d8:	02602074 	movhi	r9,32897
 10078dc:	4a602004 	addi	r9,r9,-32640
 10078e0:	02c000c4 	movi	r11,3
 10078e4:	20800017 	ldw	r2,0(r4)
 10078e8:	31bfff04 	addi	r6,r6,-4
 10078ec:	200f883a 	mov	r7,r4
 10078f0:	1204f03a 	xor	r2,r2,r8
 10078f4:	1287883a 	add	r3,r2,r10
 10078f8:	1a46703a 	and	r3,r3,r9
 10078fc:	0084303a 	nor	r2,zero,r2
 1007900:	10c4703a 	and	r2,r2,r3
 1007904:	10000b26 	beq	r2,zero,1007934 <memchr+0xc4>
 1007908:	20800003 	ldbu	r2,0(r4)
 100790c:	28800f26 	beq	r5,r2,100794c <memchr+0xdc>
 1007910:	20800043 	ldbu	r2,1(r4)
 1007914:	21c00044 	addi	r7,r4,1
 1007918:	28800c26 	beq	r5,r2,100794c <memchr+0xdc>
 100791c:	20800083 	ldbu	r2,2(r4)
 1007920:	21c00084 	addi	r7,r4,2
 1007924:	28800926 	beq	r5,r2,100794c <memchr+0xdc>
 1007928:	208000c3 	ldbu	r2,3(r4)
 100792c:	21c000c4 	addi	r7,r4,3
 1007930:	28800626 	beq	r5,r2,100794c <memchr+0xdc>
 1007934:	21000104 	addi	r4,r4,4
 1007938:	59bfea36 	bltu	r11,r6,10078e4 <memchr+0x74>
 100793c:	2007883a 	mov	r3,r4
 1007940:	003fd106 	br	1007888 <memchr+0x18>
 1007944:	0005883a 	mov	r2,zero
 1007948:	f800283a 	ret
 100794c:	3805883a 	mov	r2,r7
 1007950:	f800283a 	ret

01007954 <memcpy>:
 1007954:	01c003c4 	movi	r7,15
 1007958:	2007883a 	mov	r3,r4
 100795c:	3980032e 	bgeu	r7,r6,100796c <memcpy+0x18>
 1007960:	2904b03a 	or	r2,r5,r4
 1007964:	108000cc 	andi	r2,r2,3
 1007968:	10000926 	beq	r2,zero,1007990 <memcpy+0x3c>
 100796c:	30000626 	beq	r6,zero,1007988 <memcpy+0x34>
 1007970:	30cd883a 	add	r6,r6,r3
 1007974:	28800003 	ldbu	r2,0(r5)
 1007978:	29400044 	addi	r5,r5,1
 100797c:	18800005 	stb	r2,0(r3)
 1007980:	18c00044 	addi	r3,r3,1
 1007984:	30fffb1e 	bne	r6,r3,1007974 <memcpy+0x20>
 1007988:	2005883a 	mov	r2,r4
 100798c:	f800283a 	ret
 1007990:	3811883a 	mov	r8,r7
 1007994:	200f883a 	mov	r7,r4
 1007998:	28c00017 	ldw	r3,0(r5)
 100799c:	31bffc04 	addi	r6,r6,-16
 10079a0:	38c00015 	stw	r3,0(r7)
 10079a4:	28800117 	ldw	r2,4(r5)
 10079a8:	38800115 	stw	r2,4(r7)
 10079ac:	28c00217 	ldw	r3,8(r5)
 10079b0:	38c00215 	stw	r3,8(r7)
 10079b4:	28800317 	ldw	r2,12(r5)
 10079b8:	29400404 	addi	r5,r5,16
 10079bc:	38800315 	stw	r2,12(r7)
 10079c0:	39c00404 	addi	r7,r7,16
 10079c4:	41bff436 	bltu	r8,r6,1007998 <memcpy+0x44>
 10079c8:	008000c4 	movi	r2,3
 10079cc:	1180072e 	bgeu	r2,r6,10079ec <memcpy+0x98>
 10079d0:	1007883a 	mov	r3,r2
 10079d4:	28800017 	ldw	r2,0(r5)
 10079d8:	31bfff04 	addi	r6,r6,-4
 10079dc:	29400104 	addi	r5,r5,4
 10079e0:	38800015 	stw	r2,0(r7)
 10079e4:	39c00104 	addi	r7,r7,4
 10079e8:	19bffa36 	bltu	r3,r6,10079d4 <memcpy+0x80>
 10079ec:	3807883a 	mov	r3,r7
 10079f0:	003fde06 	br	100796c <memcpy+0x18>

010079f4 <memmove>:
 10079f4:	2807883a 	mov	r3,r5
 10079f8:	2011883a 	mov	r8,r4
 10079fc:	29000c2e 	bgeu	r5,r4,1007a30 <memmove+0x3c>
 1007a00:	298f883a 	add	r7,r5,r6
 1007a04:	21c00a2e 	bgeu	r4,r7,1007a30 <memmove+0x3c>
 1007a08:	30000726 	beq	r6,zero,1007a28 <memmove+0x34>
 1007a0c:	2187883a 	add	r3,r4,r6
 1007a10:	198dc83a 	sub	r6,r3,r6
 1007a14:	39ffffc4 	addi	r7,r7,-1
 1007a18:	38800003 	ldbu	r2,0(r7)
 1007a1c:	18ffffc4 	addi	r3,r3,-1
 1007a20:	18800005 	stb	r2,0(r3)
 1007a24:	19bffb1e 	bne	r3,r6,1007a14 <memmove+0x20>
 1007a28:	2005883a 	mov	r2,r4
 1007a2c:	f800283a 	ret
 1007a30:	01c003c4 	movi	r7,15
 1007a34:	39800a36 	bltu	r7,r6,1007a60 <memmove+0x6c>
 1007a38:	303ffb26 	beq	r6,zero,1007a28 <memmove+0x34>
 1007a3c:	400f883a 	mov	r7,r8
 1007a40:	320d883a 	add	r6,r6,r8
 1007a44:	28800003 	ldbu	r2,0(r5)
 1007a48:	29400044 	addi	r5,r5,1
 1007a4c:	38800005 	stb	r2,0(r7)
 1007a50:	39c00044 	addi	r7,r7,1
 1007a54:	39bffb1e 	bne	r7,r6,1007a44 <memmove+0x50>
 1007a58:	2005883a 	mov	r2,r4
 1007a5c:	f800283a 	ret
 1007a60:	1904b03a 	or	r2,r3,r4
 1007a64:	108000cc 	andi	r2,r2,3
 1007a68:	103ff31e 	bne	r2,zero,1007a38 <memmove+0x44>
 1007a6c:	3811883a 	mov	r8,r7
 1007a70:	180b883a 	mov	r5,r3
 1007a74:	200f883a 	mov	r7,r4
 1007a78:	28c00017 	ldw	r3,0(r5)
 1007a7c:	31bffc04 	addi	r6,r6,-16
 1007a80:	38c00015 	stw	r3,0(r7)
 1007a84:	28800117 	ldw	r2,4(r5)
 1007a88:	38800115 	stw	r2,4(r7)
 1007a8c:	28c00217 	ldw	r3,8(r5)
 1007a90:	38c00215 	stw	r3,8(r7)
 1007a94:	28800317 	ldw	r2,12(r5)
 1007a98:	29400404 	addi	r5,r5,16
 1007a9c:	38800315 	stw	r2,12(r7)
 1007aa0:	39c00404 	addi	r7,r7,16
 1007aa4:	41bff436 	bltu	r8,r6,1007a78 <memmove+0x84>
 1007aa8:	008000c4 	movi	r2,3
 1007aac:	1180072e 	bgeu	r2,r6,1007acc <memmove+0xd8>
 1007ab0:	1007883a 	mov	r3,r2
 1007ab4:	28800017 	ldw	r2,0(r5)
 1007ab8:	31bfff04 	addi	r6,r6,-4
 1007abc:	29400104 	addi	r5,r5,4
 1007ac0:	38800015 	stw	r2,0(r7)
 1007ac4:	39c00104 	addi	r7,r7,4
 1007ac8:	19bffa36 	bltu	r3,r6,1007ab4 <memmove+0xc0>
 1007acc:	3811883a 	mov	r8,r7
 1007ad0:	003fd906 	br	1007a38 <memmove+0x44>

01007ad4 <memset>:
 1007ad4:	008000c4 	movi	r2,3
 1007ad8:	29403fcc 	andi	r5,r5,255
 1007adc:	2007883a 	mov	r3,r4
 1007ae0:	1180022e 	bgeu	r2,r6,1007aec <memset+0x18>
 1007ae4:	2084703a 	and	r2,r4,r2
 1007ae8:	10000826 	beq	r2,zero,1007b0c <memset+0x38>
 1007aec:	30000526 	beq	r6,zero,1007b04 <memset+0x30>
 1007af0:	2805883a 	mov	r2,r5
 1007af4:	30cd883a 	add	r6,r6,r3
 1007af8:	18800005 	stb	r2,0(r3)
 1007afc:	18c00044 	addi	r3,r3,1
 1007b00:	19bffd1e 	bne	r3,r6,1007af8 <memset+0x24>
 1007b04:	2005883a 	mov	r2,r4
 1007b08:	f800283a 	ret
 1007b0c:	2804923a 	slli	r2,r5,8
 1007b10:	020003c4 	movi	r8,15
 1007b14:	200f883a 	mov	r7,r4
 1007b18:	2884b03a 	or	r2,r5,r2
 1007b1c:	1006943a 	slli	r3,r2,16
 1007b20:	10c6b03a 	or	r3,r2,r3
 1007b24:	41800a2e 	bgeu	r8,r6,1007b50 <memset+0x7c>
 1007b28:	4005883a 	mov	r2,r8
 1007b2c:	31bffc04 	addi	r6,r6,-16
 1007b30:	38c00015 	stw	r3,0(r7)
 1007b34:	38c00115 	stw	r3,4(r7)
 1007b38:	38c00215 	stw	r3,8(r7)
 1007b3c:	38c00315 	stw	r3,12(r7)
 1007b40:	39c00404 	addi	r7,r7,16
 1007b44:	11bff936 	bltu	r2,r6,1007b2c <memset+0x58>
 1007b48:	008000c4 	movi	r2,3
 1007b4c:	1180052e 	bgeu	r2,r6,1007b64 <memset+0x90>
 1007b50:	31bfff04 	addi	r6,r6,-4
 1007b54:	008000c4 	movi	r2,3
 1007b58:	38c00015 	stw	r3,0(r7)
 1007b5c:	39c00104 	addi	r7,r7,4
 1007b60:	11bffb36 	bltu	r2,r6,1007b50 <memset+0x7c>
 1007b64:	3807883a 	mov	r3,r7
 1007b68:	003fe006 	br	1007aec <memset+0x18>

01007b6c <_Bfree>:
 1007b6c:	28000826 	beq	r5,zero,1007b90 <_Bfree+0x24>
 1007b70:	28800117 	ldw	r2,4(r5)
 1007b74:	21001317 	ldw	r4,76(r4)
 1007b78:	1085883a 	add	r2,r2,r2
 1007b7c:	1085883a 	add	r2,r2,r2
 1007b80:	1105883a 	add	r2,r2,r4
 1007b84:	10c00017 	ldw	r3,0(r2)
 1007b88:	28c00015 	stw	r3,0(r5)
 1007b8c:	11400015 	stw	r5,0(r2)
 1007b90:	f800283a 	ret

01007b94 <__hi0bits>:
 1007b94:	20bfffec 	andhi	r2,r4,65535
 1007b98:	10001426 	beq	r2,zero,1007bec <__hi0bits+0x58>
 1007b9c:	0007883a 	mov	r3,zero
 1007ba0:	20bfc02c 	andhi	r2,r4,65280
 1007ba4:	1000021e 	bne	r2,zero,1007bb0 <__hi0bits+0x1c>
 1007ba8:	2008923a 	slli	r4,r4,8
 1007bac:	18c00204 	addi	r3,r3,8
 1007bb0:	20bc002c 	andhi	r2,r4,61440
 1007bb4:	1000021e 	bne	r2,zero,1007bc0 <__hi0bits+0x2c>
 1007bb8:	2008913a 	slli	r4,r4,4
 1007bbc:	18c00104 	addi	r3,r3,4
 1007bc0:	20b0002c 	andhi	r2,r4,49152
 1007bc4:	1000031e 	bne	r2,zero,1007bd4 <__hi0bits+0x40>
 1007bc8:	2105883a 	add	r2,r4,r4
 1007bcc:	18c00084 	addi	r3,r3,2
 1007bd0:	1089883a 	add	r4,r2,r2
 1007bd4:	20000316 	blt	r4,zero,1007be4 <__hi0bits+0x50>
 1007bd8:	2090002c 	andhi	r2,r4,16384
 1007bdc:	10000626 	beq	r2,zero,1007bf8 <__hi0bits+0x64>
 1007be0:	18c00044 	addi	r3,r3,1
 1007be4:	1805883a 	mov	r2,r3
 1007be8:	f800283a 	ret
 1007bec:	2008943a 	slli	r4,r4,16
 1007bf0:	00c00404 	movi	r3,16
 1007bf4:	003fea06 	br	1007ba0 <__hi0bits+0xc>
 1007bf8:	00c00804 	movi	r3,32
 1007bfc:	1805883a 	mov	r2,r3
 1007c00:	f800283a 	ret

01007c04 <__lo0bits>:
 1007c04:	20c00017 	ldw	r3,0(r4)
 1007c08:	188001cc 	andi	r2,r3,7
 1007c0c:	10000a26 	beq	r2,zero,1007c38 <__lo0bits+0x34>
 1007c10:	1880004c 	andi	r2,r3,1
 1007c14:	1005003a 	cmpeq	r2,r2,zero
 1007c18:	10002126 	beq	r2,zero,1007ca0 <__lo0bits+0x9c>
 1007c1c:	1880008c 	andi	r2,r3,2
 1007c20:	1000251e 	bne	r2,zero,1007cb8 <__lo0bits+0xb4>
 1007c24:	1804d0ba 	srli	r2,r3,2
 1007c28:	01400084 	movi	r5,2
 1007c2c:	20800015 	stw	r2,0(r4)
 1007c30:	2805883a 	mov	r2,r5
 1007c34:	f800283a 	ret
 1007c38:	18bfffcc 	andi	r2,r3,65535
 1007c3c:	10001526 	beq	r2,zero,1007c94 <__lo0bits+0x90>
 1007c40:	000b883a 	mov	r5,zero
 1007c44:	18803fcc 	andi	r2,r3,255
 1007c48:	1000021e 	bne	r2,zero,1007c54 <__lo0bits+0x50>
 1007c4c:	1806d23a 	srli	r3,r3,8
 1007c50:	29400204 	addi	r5,r5,8
 1007c54:	188003cc 	andi	r2,r3,15
 1007c58:	1000021e 	bne	r2,zero,1007c64 <__lo0bits+0x60>
 1007c5c:	1806d13a 	srli	r3,r3,4
 1007c60:	29400104 	addi	r5,r5,4
 1007c64:	188000cc 	andi	r2,r3,3
 1007c68:	1000021e 	bne	r2,zero,1007c74 <__lo0bits+0x70>
 1007c6c:	1806d0ba 	srli	r3,r3,2
 1007c70:	29400084 	addi	r5,r5,2
 1007c74:	1880004c 	andi	r2,r3,1
 1007c78:	1000031e 	bne	r2,zero,1007c88 <__lo0bits+0x84>
 1007c7c:	1806d07a 	srli	r3,r3,1
 1007c80:	18000a26 	beq	r3,zero,1007cac <__lo0bits+0xa8>
 1007c84:	29400044 	addi	r5,r5,1
 1007c88:	2805883a 	mov	r2,r5
 1007c8c:	20c00015 	stw	r3,0(r4)
 1007c90:	f800283a 	ret
 1007c94:	1806d43a 	srli	r3,r3,16
 1007c98:	01400404 	movi	r5,16
 1007c9c:	003fe906 	br	1007c44 <__lo0bits+0x40>
 1007ca0:	000b883a 	mov	r5,zero
 1007ca4:	2805883a 	mov	r2,r5
 1007ca8:	f800283a 	ret
 1007cac:	01400804 	movi	r5,32
 1007cb0:	2805883a 	mov	r2,r5
 1007cb4:	f800283a 	ret
 1007cb8:	1804d07a 	srli	r2,r3,1
 1007cbc:	01400044 	movi	r5,1
 1007cc0:	20800015 	stw	r2,0(r4)
 1007cc4:	003fda06 	br	1007c30 <__lo0bits+0x2c>

01007cc8 <__mcmp>:
 1007cc8:	20800417 	ldw	r2,16(r4)
 1007ccc:	28c00417 	ldw	r3,16(r5)
 1007cd0:	10cfc83a 	sub	r7,r2,r3
 1007cd4:	38000c1e 	bne	r7,zero,1007d08 <__mcmp+0x40>
 1007cd8:	18c5883a 	add	r2,r3,r3
 1007cdc:	1085883a 	add	r2,r2,r2
 1007ce0:	10c00504 	addi	r3,r2,20
 1007ce4:	21000504 	addi	r4,r4,20
 1007ce8:	28cb883a 	add	r5,r5,r3
 1007cec:	2085883a 	add	r2,r4,r2
 1007cf0:	10bfff04 	addi	r2,r2,-4
 1007cf4:	297fff04 	addi	r5,r5,-4
 1007cf8:	11800017 	ldw	r6,0(r2)
 1007cfc:	28c00017 	ldw	r3,0(r5)
 1007d00:	30c0031e 	bne	r6,r3,1007d10 <__mcmp+0x48>
 1007d04:	20bffa36 	bltu	r4,r2,1007cf0 <__mcmp+0x28>
 1007d08:	3805883a 	mov	r2,r7
 1007d0c:	f800283a 	ret
 1007d10:	30c00336 	bltu	r6,r3,1007d20 <__mcmp+0x58>
 1007d14:	01c00044 	movi	r7,1
 1007d18:	3805883a 	mov	r2,r7
 1007d1c:	f800283a 	ret
 1007d20:	01ffffc4 	movi	r7,-1
 1007d24:	003ff806 	br	1007d08 <__mcmp+0x40>

01007d28 <__ulp>:
 1007d28:	295ffc2c 	andhi	r5,r5,32752
 1007d2c:	013f3034 	movhi	r4,64704
 1007d30:	290b883a 	add	r5,r5,r4
 1007d34:	0145c83a 	sub	r2,zero,r5
 1007d38:	1007d53a 	srai	r3,r2,20
 1007d3c:	000d883a 	mov	r6,zero
 1007d40:	0140040e 	bge	zero,r5,1007d54 <__ulp+0x2c>
 1007d44:	280f883a 	mov	r7,r5
 1007d48:	3807883a 	mov	r3,r7
 1007d4c:	3005883a 	mov	r2,r6
 1007d50:	f800283a 	ret
 1007d54:	008004c4 	movi	r2,19
 1007d58:	193ffb04 	addi	r4,r3,-20
 1007d5c:	10c00c0e 	bge	r2,r3,1007d90 <__ulp+0x68>
 1007d60:	008007c4 	movi	r2,31
 1007d64:	1107c83a 	sub	r3,r2,r4
 1007d68:	00800784 	movi	r2,30
 1007d6c:	01400044 	movi	r5,1
 1007d70:	11000216 	blt	r2,r4,1007d7c <__ulp+0x54>
 1007d74:	00800044 	movi	r2,1
 1007d78:	10ca983a 	sll	r5,r2,r3
 1007d7c:	000f883a 	mov	r7,zero
 1007d80:	280d883a 	mov	r6,r5
 1007d84:	3807883a 	mov	r3,r7
 1007d88:	3005883a 	mov	r2,r6
 1007d8c:	f800283a 	ret
 1007d90:	00800234 	movhi	r2,8
 1007d94:	10cfd83a 	sra	r7,r2,r3
 1007d98:	000d883a 	mov	r6,zero
 1007d9c:	3005883a 	mov	r2,r6
 1007da0:	3807883a 	mov	r3,r7
 1007da4:	f800283a 	ret

01007da8 <__b2d>:
 1007da8:	20800417 	ldw	r2,16(r4)
 1007dac:	defff904 	addi	sp,sp,-28
 1007db0:	dd000415 	stw	r20,16(sp)
 1007db4:	1085883a 	add	r2,r2,r2
 1007db8:	25000504 	addi	r20,r4,20
 1007dbc:	1085883a 	add	r2,r2,r2
 1007dc0:	dc000015 	stw	r16,0(sp)
 1007dc4:	a0a1883a 	add	r16,r20,r2
 1007dc8:	dd400515 	stw	r21,20(sp)
 1007dcc:	857fff17 	ldw	r21,-4(r16)
 1007dd0:	dc400115 	stw	r17,4(sp)
 1007dd4:	dfc00615 	stw	ra,24(sp)
 1007dd8:	a809883a 	mov	r4,r21
 1007ddc:	2823883a 	mov	r17,r5
 1007de0:	dcc00315 	stw	r19,12(sp)
 1007de4:	dc800215 	stw	r18,8(sp)
 1007de8:	1007b940 	call	1007b94 <__hi0bits>
 1007dec:	100b883a 	mov	r5,r2
 1007df0:	00800804 	movi	r2,32
 1007df4:	1145c83a 	sub	r2,r2,r5
 1007df8:	88800015 	stw	r2,0(r17)
 1007dfc:	00800284 	movi	r2,10
 1007e00:	80ffff04 	addi	r3,r16,-4
 1007e04:	11401416 	blt	r2,r5,1007e58 <__b2d+0xb0>
 1007e08:	008002c4 	movi	r2,11
 1007e0c:	1149c83a 	sub	r4,r2,r5
 1007e10:	a0c02736 	bltu	r20,r3,1007eb0 <__b2d+0x108>
 1007e14:	000d883a 	mov	r6,zero
 1007e18:	28800544 	addi	r2,r5,21
 1007e1c:	a906d83a 	srl	r3,r21,r4
 1007e20:	a884983a 	sll	r2,r21,r2
 1007e24:	1ccffc34 	orhi	r19,r3,16368
 1007e28:	11a4b03a 	or	r18,r2,r6
 1007e2c:	9005883a 	mov	r2,r18
 1007e30:	9807883a 	mov	r3,r19
 1007e34:	dfc00617 	ldw	ra,24(sp)
 1007e38:	dd400517 	ldw	r21,20(sp)
 1007e3c:	dd000417 	ldw	r20,16(sp)
 1007e40:	dcc00317 	ldw	r19,12(sp)
 1007e44:	dc800217 	ldw	r18,8(sp)
 1007e48:	dc400117 	ldw	r17,4(sp)
 1007e4c:	dc000017 	ldw	r16,0(sp)
 1007e50:	dec00704 	addi	sp,sp,28
 1007e54:	f800283a 	ret
 1007e58:	a0c00e36 	bltu	r20,r3,1007e94 <__b2d+0xec>
 1007e5c:	293ffd44 	addi	r4,r5,-11
 1007e60:	000d883a 	mov	r6,zero
 1007e64:	20000f26 	beq	r4,zero,1007ea4 <__b2d+0xfc>
 1007e68:	00800804 	movi	r2,32
 1007e6c:	110bc83a 	sub	r5,r2,r4
 1007e70:	a0c01236 	bltu	r20,r3,1007ebc <__b2d+0x114>
 1007e74:	000f883a 	mov	r7,zero
 1007e78:	a904983a 	sll	r2,r21,r4
 1007e7c:	3146d83a 	srl	r3,r6,r5
 1007e80:	3108983a 	sll	r4,r6,r4
 1007e84:	108ffc34 	orhi	r2,r2,16368
 1007e88:	18a6b03a 	or	r19,r3,r2
 1007e8c:	3924b03a 	or	r18,r7,r4
 1007e90:	003fe606 	br	1007e2c <__b2d+0x84>
 1007e94:	293ffd44 	addi	r4,r5,-11
 1007e98:	81bffe17 	ldw	r6,-8(r16)
 1007e9c:	80fffe04 	addi	r3,r16,-8
 1007ea0:	203ff11e 	bne	r4,zero,1007e68 <__b2d+0xc0>
 1007ea4:	accffc34 	orhi	r19,r21,16368
 1007ea8:	3025883a 	mov	r18,r6
 1007eac:	003fdf06 	br	1007e2c <__b2d+0x84>
 1007eb0:	18bfff17 	ldw	r2,-4(r3)
 1007eb4:	110cd83a 	srl	r6,r2,r4
 1007eb8:	003fd706 	br	1007e18 <__b2d+0x70>
 1007ebc:	18bfff17 	ldw	r2,-4(r3)
 1007ec0:	114ed83a 	srl	r7,r2,r5
 1007ec4:	003fec06 	br	1007e78 <__b2d+0xd0>

01007ec8 <__ratio>:
 1007ec8:	defff904 	addi	sp,sp,-28
 1007ecc:	dc400215 	stw	r17,8(sp)
 1007ed0:	2823883a 	mov	r17,r5
 1007ed4:	d80b883a 	mov	r5,sp
 1007ed8:	dfc00615 	stw	ra,24(sp)
 1007edc:	dd000515 	stw	r20,20(sp)
 1007ee0:	dcc00415 	stw	r19,16(sp)
 1007ee4:	dc800315 	stw	r18,12(sp)
 1007ee8:	2025883a 	mov	r18,r4
 1007eec:	1007da80 	call	1007da8 <__b2d>
 1007ef0:	8809883a 	mov	r4,r17
 1007ef4:	d9400104 	addi	r5,sp,4
 1007ef8:	1027883a 	mov	r19,r2
 1007efc:	1829883a 	mov	r20,r3
 1007f00:	1007da80 	call	1007da8 <__b2d>
 1007f04:	89000417 	ldw	r4,16(r17)
 1007f08:	91c00417 	ldw	r7,16(r18)
 1007f0c:	d9800117 	ldw	r6,4(sp)
 1007f10:	180b883a 	mov	r5,r3
 1007f14:	390fc83a 	sub	r7,r7,r4
 1007f18:	1009883a 	mov	r4,r2
 1007f1c:	d8800017 	ldw	r2,0(sp)
 1007f20:	380e917a 	slli	r7,r7,5
 1007f24:	2011883a 	mov	r8,r4
 1007f28:	1185c83a 	sub	r2,r2,r6
 1007f2c:	11c5883a 	add	r2,r2,r7
 1007f30:	1006953a 	slli	r3,r2,20
 1007f34:	2813883a 	mov	r9,r5
 1007f38:	00800d0e 	bge	zero,r2,1007f70 <__ratio+0xa8>
 1007f3c:	1d29883a 	add	r20,r3,r20
 1007f40:	a00b883a 	mov	r5,r20
 1007f44:	480f883a 	mov	r7,r9
 1007f48:	9809883a 	mov	r4,r19
 1007f4c:	400d883a 	mov	r6,r8
 1007f50:	100e5c80 	call	100e5c8 <__divdf3>
 1007f54:	dfc00617 	ldw	ra,24(sp)
 1007f58:	dd000517 	ldw	r20,20(sp)
 1007f5c:	dcc00417 	ldw	r19,16(sp)
 1007f60:	dc800317 	ldw	r18,12(sp)
 1007f64:	dc400217 	ldw	r17,8(sp)
 1007f68:	dec00704 	addi	sp,sp,28
 1007f6c:	f800283a 	ret
 1007f70:	28d3c83a 	sub	r9,r5,r3
 1007f74:	003ff206 	br	1007f40 <__ratio+0x78>

01007f78 <_mprec_log10>:
 1007f78:	defffe04 	addi	sp,sp,-8
 1007f7c:	008005c4 	movi	r2,23
 1007f80:	dc000015 	stw	r16,0(sp)
 1007f84:	dfc00115 	stw	ra,4(sp)
 1007f88:	2021883a 	mov	r16,r4
 1007f8c:	11000c16 	blt	r2,r4,1007fc0 <_mprec_log10+0x48>
 1007f90:	200490fa 	slli	r2,r4,3
 1007f94:	00c04074 	movhi	r3,257
 1007f98:	18cc2e04 	addi	r3,r3,12472
 1007f9c:	10c5883a 	add	r2,r2,r3
 1007fa0:	12400117 	ldw	r9,4(r2)
 1007fa4:	12000017 	ldw	r8,0(r2)
 1007fa8:	4807883a 	mov	r3,r9
 1007fac:	4005883a 	mov	r2,r8
 1007fb0:	dfc00117 	ldw	ra,4(sp)
 1007fb4:	dc000017 	ldw	r16,0(sp)
 1007fb8:	dec00204 	addi	sp,sp,8
 1007fbc:	f800283a 	ret
 1007fc0:	0011883a 	mov	r8,zero
 1007fc4:	024ffc34 	movhi	r9,16368
 1007fc8:	0005883a 	mov	r2,zero
 1007fcc:	00d00934 	movhi	r3,16420
 1007fd0:	480b883a 	mov	r5,r9
 1007fd4:	4009883a 	mov	r4,r8
 1007fd8:	180f883a 	mov	r7,r3
 1007fdc:	100d883a 	mov	r6,r2
 1007fe0:	100e2040 	call	100e204 <__muldf3>
 1007fe4:	843fffc4 	addi	r16,r16,-1
 1007fe8:	1011883a 	mov	r8,r2
 1007fec:	1813883a 	mov	r9,r3
 1007ff0:	803ff51e 	bne	r16,zero,1007fc8 <_mprec_log10+0x50>
 1007ff4:	4005883a 	mov	r2,r8
 1007ff8:	4807883a 	mov	r3,r9
 1007ffc:	dfc00117 	ldw	ra,4(sp)
 1008000:	dc000017 	ldw	r16,0(sp)
 1008004:	dec00204 	addi	sp,sp,8
 1008008:	f800283a 	ret

0100800c <__copybits>:
 100800c:	297fffc4 	addi	r5,r5,-1
 1008010:	30800417 	ldw	r2,16(r6)
 1008014:	280bd17a 	srai	r5,r5,5
 1008018:	31800504 	addi	r6,r6,20
 100801c:	1085883a 	add	r2,r2,r2
 1008020:	294b883a 	add	r5,r5,r5
 1008024:	294b883a 	add	r5,r5,r5
 1008028:	1085883a 	add	r2,r2,r2
 100802c:	290b883a 	add	r5,r5,r4
 1008030:	3087883a 	add	r3,r6,r2
 1008034:	29400104 	addi	r5,r5,4
 1008038:	30c0052e 	bgeu	r6,r3,1008050 <__copybits+0x44>
 100803c:	30800017 	ldw	r2,0(r6)
 1008040:	31800104 	addi	r6,r6,4
 1008044:	20800015 	stw	r2,0(r4)
 1008048:	21000104 	addi	r4,r4,4
 100804c:	30fffb36 	bltu	r6,r3,100803c <__copybits+0x30>
 1008050:	2140032e 	bgeu	r4,r5,1008060 <__copybits+0x54>
 1008054:	20000015 	stw	zero,0(r4)
 1008058:	21000104 	addi	r4,r4,4
 100805c:	217ffd36 	bltu	r4,r5,1008054 <__copybits+0x48>
 1008060:	f800283a 	ret

01008064 <__any_on>:
 1008064:	20800417 	ldw	r2,16(r4)
 1008068:	2807d17a 	srai	r3,r5,5
 100806c:	21000504 	addi	r4,r4,20
 1008070:	10c00d0e 	bge	r2,r3,10080a8 <__any_on+0x44>
 1008074:	1085883a 	add	r2,r2,r2
 1008078:	1085883a 	add	r2,r2,r2
 100807c:	208d883a 	add	r6,r4,r2
 1008080:	2180182e 	bgeu	r4,r6,10080e4 <__any_on+0x80>
 1008084:	30bfff17 	ldw	r2,-4(r6)
 1008088:	30ffff04 	addi	r3,r6,-4
 100808c:	1000041e 	bne	r2,zero,10080a0 <__any_on+0x3c>
 1008090:	20c0142e 	bgeu	r4,r3,10080e4 <__any_on+0x80>
 1008094:	18ffff04 	addi	r3,r3,-4
 1008098:	18800017 	ldw	r2,0(r3)
 100809c:	103ffc26 	beq	r2,zero,1008090 <__any_on+0x2c>
 10080a0:	00800044 	movi	r2,1
 10080a4:	f800283a 	ret
 10080a8:	18800a0e 	bge	r3,r2,10080d4 <__any_on+0x70>
 10080ac:	294007cc 	andi	r5,r5,31
 10080b0:	28000826 	beq	r5,zero,10080d4 <__any_on+0x70>
 10080b4:	18c5883a 	add	r2,r3,r3
 10080b8:	1085883a 	add	r2,r2,r2
 10080bc:	208d883a 	add	r6,r4,r2
 10080c0:	30c00017 	ldw	r3,0(r6)
 10080c4:	1944d83a 	srl	r2,r3,r5
 10080c8:	1144983a 	sll	r2,r2,r5
 10080cc:	18bff41e 	bne	r3,r2,10080a0 <__any_on+0x3c>
 10080d0:	003feb06 	br	1008080 <__any_on+0x1c>
 10080d4:	18c5883a 	add	r2,r3,r3
 10080d8:	1085883a 	add	r2,r2,r2
 10080dc:	208d883a 	add	r6,r4,r2
 10080e0:	003fe706 	br	1008080 <__any_on+0x1c>
 10080e4:	0005883a 	mov	r2,zero
 10080e8:	f800283a 	ret

010080ec <_Balloc>:
 10080ec:	20c01317 	ldw	r3,76(r4)
 10080f0:	defffb04 	addi	sp,sp,-20
 10080f4:	dcc00315 	stw	r19,12(sp)
 10080f8:	dc800215 	stw	r18,8(sp)
 10080fc:	dfc00415 	stw	ra,16(sp)
 1008100:	2825883a 	mov	r18,r5
 1008104:	dc400115 	stw	r17,4(sp)
 1008108:	dc000015 	stw	r16,0(sp)
 100810c:	2027883a 	mov	r19,r4
 1008110:	01800404 	movi	r6,16
 1008114:	01400104 	movi	r5,4
 1008118:	18001726 	beq	r3,zero,1008178 <_Balloc+0x8c>
 100811c:	01400044 	movi	r5,1
 1008120:	9485883a 	add	r2,r18,r18
 1008124:	2ca2983a 	sll	r17,r5,r18
 1008128:	1085883a 	add	r2,r2,r2
 100812c:	10c7883a 	add	r3,r2,r3
 1008130:	1c000017 	ldw	r16,0(r3)
 1008134:	8c4d883a 	add	r6,r17,r17
 1008138:	318d883a 	add	r6,r6,r6
 100813c:	9809883a 	mov	r4,r19
 1008140:	31800504 	addi	r6,r6,20
 1008144:	80001226 	beq	r16,zero,1008190 <_Balloc+0xa4>
 1008148:	80800017 	ldw	r2,0(r16)
 100814c:	18800015 	stw	r2,0(r3)
 1008150:	80000415 	stw	zero,16(r16)
 1008154:	80000315 	stw	zero,12(r16)
 1008158:	8005883a 	mov	r2,r16
 100815c:	dfc00417 	ldw	ra,16(sp)
 1008160:	dcc00317 	ldw	r19,12(sp)
 1008164:	dc800217 	ldw	r18,8(sp)
 1008168:	dc400117 	ldw	r17,4(sp)
 100816c:	dc000017 	ldw	r16,0(sp)
 1008170:	dec00504 	addi	sp,sp,20
 1008174:	f800283a 	ret
 1008178:	100bf2c0 	call	100bf2c <_calloc_r>
 100817c:	1007883a 	mov	r3,r2
 1008180:	0021883a 	mov	r16,zero
 1008184:	98801315 	stw	r2,76(r19)
 1008188:	103fe41e 	bne	r2,zero,100811c <_Balloc+0x30>
 100818c:	003ff206 	br	1008158 <_Balloc+0x6c>
 1008190:	100bf2c0 	call	100bf2c <_calloc_r>
 1008194:	103ff026 	beq	r2,zero,1008158 <_Balloc+0x6c>
 1008198:	1021883a 	mov	r16,r2
 100819c:	14800115 	stw	r18,4(r2)
 10081a0:	14400215 	stw	r17,8(r2)
 10081a4:	003fea06 	br	1008150 <_Balloc+0x64>

010081a8 <__d2b>:
 10081a8:	defff504 	addi	sp,sp,-44
 10081ac:	dcc00515 	stw	r19,20(sp)
 10081b0:	04c00044 	movi	r19,1
 10081b4:	dc000215 	stw	r16,8(sp)
 10081b8:	2821883a 	mov	r16,r5
 10081bc:	980b883a 	mov	r5,r19
 10081c0:	ddc00915 	stw	r23,36(sp)
 10081c4:	dd800815 	stw	r22,32(sp)
 10081c8:	dd400715 	stw	r21,28(sp)
 10081cc:	dd000615 	stw	r20,24(sp)
 10081d0:	dc800415 	stw	r18,16(sp)
 10081d4:	dc400315 	stw	r17,12(sp)
 10081d8:	dfc00a15 	stw	ra,40(sp)
 10081dc:	3023883a 	mov	r17,r6
 10081e0:	382d883a 	mov	r22,r7
 10081e4:	ddc00b17 	ldw	r23,44(sp)
 10081e8:	10080ec0 	call	10080ec <_Balloc>
 10081ec:	1025883a 	mov	r18,r2
 10081f0:	00a00034 	movhi	r2,32768
 10081f4:	10bfffc4 	addi	r2,r2,-1
 10081f8:	8888703a 	and	r4,r17,r2
 10081fc:	202ad53a 	srli	r21,r4,20
 1008200:	00800434 	movhi	r2,16
 1008204:	10bfffc4 	addi	r2,r2,-1
 1008208:	8886703a 	and	r3,r17,r2
 100820c:	a829003a 	cmpeq	r20,r21,zero
 1008210:	800b883a 	mov	r5,r16
 1008214:	d8c00115 	stw	r3,4(sp)
 1008218:	94000504 	addi	r16,r18,20
 100821c:	a000021e 	bne	r20,zero,1008228 <__d2b+0x80>
 1008220:	18c00434 	orhi	r3,r3,16
 1008224:	d8c00115 	stw	r3,4(sp)
 1008228:	28002726 	beq	r5,zero,10082c8 <__d2b+0x120>
 100822c:	d809883a 	mov	r4,sp
 1008230:	d9400015 	stw	r5,0(sp)
 1008234:	1007c040 	call	1007c04 <__lo0bits>
 1008238:	100d883a 	mov	r6,r2
 100823c:	10003526 	beq	r2,zero,1008314 <__d2b+0x16c>
 1008240:	d8c00117 	ldw	r3,4(sp)
 1008244:	00800804 	movi	r2,32
 1008248:	1185c83a 	sub	r2,r2,r6
 100824c:	d9000017 	ldw	r4,0(sp)
 1008250:	1886983a 	sll	r3,r3,r2
 1008254:	1906b03a 	or	r3,r3,r4
 1008258:	90c00515 	stw	r3,20(r18)
 100825c:	d8c00117 	ldw	r3,4(sp)
 1008260:	1986d83a 	srl	r3,r3,r6
 1008264:	d8c00115 	stw	r3,4(sp)
 1008268:	180b003a 	cmpeq	r5,r3,zero
 100826c:	00800084 	movi	r2,2
 1008270:	114bc83a 	sub	r5,r2,r5
 1008274:	80c00115 	stw	r3,4(r16)
 1008278:	91400415 	stw	r5,16(r18)
 100827c:	a0001a1e 	bne	r20,zero,10082e8 <__d2b+0x140>
 1008280:	3545883a 	add	r2,r6,r21
 1008284:	10bef344 	addi	r2,r2,-1075
 1008288:	00c00d44 	movi	r3,53
 100828c:	b0800015 	stw	r2,0(r22)
 1008290:	1987c83a 	sub	r3,r3,r6
 1008294:	b8c00015 	stw	r3,0(r23)
 1008298:	9005883a 	mov	r2,r18
 100829c:	dfc00a17 	ldw	ra,40(sp)
 10082a0:	ddc00917 	ldw	r23,36(sp)
 10082a4:	dd800817 	ldw	r22,32(sp)
 10082a8:	dd400717 	ldw	r21,28(sp)
 10082ac:	dd000617 	ldw	r20,24(sp)
 10082b0:	dcc00517 	ldw	r19,20(sp)
 10082b4:	dc800417 	ldw	r18,16(sp)
 10082b8:	dc400317 	ldw	r17,12(sp)
 10082bc:	dc000217 	ldw	r16,8(sp)
 10082c0:	dec00b04 	addi	sp,sp,44
 10082c4:	f800283a 	ret
 10082c8:	d9000104 	addi	r4,sp,4
 10082cc:	1007c040 	call	1007c04 <__lo0bits>
 10082d0:	11800804 	addi	r6,r2,32
 10082d4:	d8800117 	ldw	r2,4(sp)
 10082d8:	94c00415 	stw	r19,16(r18)
 10082dc:	980b883a 	mov	r5,r19
 10082e0:	90800515 	stw	r2,20(r18)
 10082e4:	a03fe626 	beq	r20,zero,1008280 <__d2b+0xd8>
 10082e8:	2945883a 	add	r2,r5,r5
 10082ec:	1085883a 	add	r2,r2,r2
 10082f0:	1405883a 	add	r2,r2,r16
 10082f4:	113fff17 	ldw	r4,-4(r2)
 10082f8:	30fef384 	addi	r3,r6,-1074
 10082fc:	2820917a 	slli	r16,r5,5
 1008300:	b0c00015 	stw	r3,0(r22)
 1008304:	1007b940 	call	1007b94 <__hi0bits>
 1008308:	80a1c83a 	sub	r16,r16,r2
 100830c:	bc000015 	stw	r16,0(r23)
 1008310:	003fe106 	br	1008298 <__d2b+0xf0>
 1008314:	d8800017 	ldw	r2,0(sp)
 1008318:	90800515 	stw	r2,20(r18)
 100831c:	d8c00117 	ldw	r3,4(sp)
 1008320:	003fd106 	br	1008268 <__d2b+0xc0>

01008324 <__mdiff>:
 1008324:	defffb04 	addi	sp,sp,-20
 1008328:	dc000015 	stw	r16,0(sp)
 100832c:	2821883a 	mov	r16,r5
 1008330:	dc800215 	stw	r18,8(sp)
 1008334:	300b883a 	mov	r5,r6
 1008338:	2025883a 	mov	r18,r4
 100833c:	8009883a 	mov	r4,r16
 1008340:	dc400115 	stw	r17,4(sp)
 1008344:	dfc00415 	stw	ra,16(sp)
 1008348:	dcc00315 	stw	r19,12(sp)
 100834c:	3023883a 	mov	r17,r6
 1008350:	1007cc80 	call	1007cc8 <__mcmp>
 1008354:	10004226 	beq	r2,zero,1008460 <__mdiff+0x13c>
 1008358:	10005016 	blt	r2,zero,100849c <__mdiff+0x178>
 100835c:	0027883a 	mov	r19,zero
 1008360:	81400117 	ldw	r5,4(r16)
 1008364:	9009883a 	mov	r4,r18
 1008368:	10080ec0 	call	10080ec <_Balloc>
 100836c:	1019883a 	mov	r12,r2
 1008370:	82800417 	ldw	r10,16(r16)
 1008374:	88800417 	ldw	r2,16(r17)
 1008378:	81800504 	addi	r6,r16,20
 100837c:	5287883a 	add	r3,r10,r10
 1008380:	1085883a 	add	r2,r2,r2
 1008384:	18c7883a 	add	r3,r3,r3
 1008388:	1085883a 	add	r2,r2,r2
 100838c:	8a000504 	addi	r8,r17,20
 1008390:	64c00315 	stw	r19,12(r12)
 1008394:	30db883a 	add	r13,r6,r3
 1008398:	4097883a 	add	r11,r8,r2
 100839c:	61c00504 	addi	r7,r12,20
 10083a0:	0013883a 	mov	r9,zero
 10083a4:	31000017 	ldw	r4,0(r6)
 10083a8:	41400017 	ldw	r5,0(r8)
 10083ac:	42000104 	addi	r8,r8,4
 10083b0:	20bfffcc 	andi	r2,r4,65535
 10083b4:	28ffffcc 	andi	r3,r5,65535
 10083b8:	10c5c83a 	sub	r2,r2,r3
 10083bc:	1245883a 	add	r2,r2,r9
 10083c0:	2008d43a 	srli	r4,r4,16
 10083c4:	280ad43a 	srli	r5,r5,16
 10083c8:	1007d43a 	srai	r3,r2,16
 10083cc:	3880000d 	sth	r2,0(r7)
 10083d0:	2149c83a 	sub	r4,r4,r5
 10083d4:	20c9883a 	add	r4,r4,r3
 10083d8:	3900008d 	sth	r4,2(r7)
 10083dc:	31800104 	addi	r6,r6,4
 10083e0:	39c00104 	addi	r7,r7,4
 10083e4:	2013d43a 	srai	r9,r4,16
 10083e8:	42ffee36 	bltu	r8,r11,10083a4 <__mdiff+0x80>
 10083ec:	33400c2e 	bgeu	r6,r13,1008420 <__mdiff+0xfc>
 10083f0:	30800017 	ldw	r2,0(r6)
 10083f4:	31800104 	addi	r6,r6,4
 10083f8:	10ffffcc 	andi	r3,r2,65535
 10083fc:	1a47883a 	add	r3,r3,r9
 1008400:	1004d43a 	srli	r2,r2,16
 1008404:	1809d43a 	srai	r4,r3,16
 1008408:	38c0000d 	sth	r3,0(r7)
 100840c:	1105883a 	add	r2,r2,r4
 1008410:	3880008d 	sth	r2,2(r7)
 1008414:	1013d43a 	srai	r9,r2,16
 1008418:	39c00104 	addi	r7,r7,4
 100841c:	337ff436 	bltu	r6,r13,10083f0 <__mdiff+0xcc>
 1008420:	38bfff17 	ldw	r2,-4(r7)
 1008424:	38ffff04 	addi	r3,r7,-4
 1008428:	1000041e 	bne	r2,zero,100843c <__mdiff+0x118>
 100842c:	18ffff04 	addi	r3,r3,-4
 1008430:	18800017 	ldw	r2,0(r3)
 1008434:	52bfffc4 	addi	r10,r10,-1
 1008438:	103ffc26 	beq	r2,zero,100842c <__mdiff+0x108>
 100843c:	6005883a 	mov	r2,r12
 1008440:	62800415 	stw	r10,16(r12)
 1008444:	dfc00417 	ldw	ra,16(sp)
 1008448:	dcc00317 	ldw	r19,12(sp)
 100844c:	dc800217 	ldw	r18,8(sp)
 1008450:	dc400117 	ldw	r17,4(sp)
 1008454:	dc000017 	ldw	r16,0(sp)
 1008458:	dec00504 	addi	sp,sp,20
 100845c:	f800283a 	ret
 1008460:	9009883a 	mov	r4,r18
 1008464:	000b883a 	mov	r5,zero
 1008468:	10080ec0 	call	10080ec <_Balloc>
 100846c:	1019883a 	mov	r12,r2
 1008470:	00800044 	movi	r2,1
 1008474:	60800415 	stw	r2,16(r12)
 1008478:	6005883a 	mov	r2,r12
 100847c:	60000515 	stw	zero,20(r12)
 1008480:	dfc00417 	ldw	ra,16(sp)
 1008484:	dcc00317 	ldw	r19,12(sp)
 1008488:	dc800217 	ldw	r18,8(sp)
 100848c:	dc400117 	ldw	r17,4(sp)
 1008490:	dc000017 	ldw	r16,0(sp)
 1008494:	dec00504 	addi	sp,sp,20
 1008498:	f800283a 	ret
 100849c:	880d883a 	mov	r6,r17
 10084a0:	04c00044 	movi	r19,1
 10084a4:	8023883a 	mov	r17,r16
 10084a8:	3021883a 	mov	r16,r6
 10084ac:	003fac06 	br	1008360 <__mdiff+0x3c>

010084b0 <__lshift>:
 10084b0:	defff904 	addi	sp,sp,-28
 10084b4:	28800417 	ldw	r2,16(r5)
 10084b8:	dc000015 	stw	r16,0(sp)
 10084bc:	3021d17a 	srai	r16,r6,5
 10084c0:	28c00217 	ldw	r3,8(r5)
 10084c4:	10800044 	addi	r2,r2,1
 10084c8:	dc400115 	stw	r17,4(sp)
 10084cc:	80a3883a 	add	r17,r16,r2
 10084d0:	dd400515 	stw	r21,20(sp)
 10084d4:	dd000415 	stw	r20,16(sp)
 10084d8:	dc800215 	stw	r18,8(sp)
 10084dc:	dfc00615 	stw	ra,24(sp)
 10084e0:	2825883a 	mov	r18,r5
 10084e4:	dcc00315 	stw	r19,12(sp)
 10084e8:	3029883a 	mov	r20,r6
 10084ec:	202b883a 	mov	r21,r4
 10084f0:	29400117 	ldw	r5,4(r5)
 10084f4:	1c40030e 	bge	r3,r17,1008504 <__lshift+0x54>
 10084f8:	18c7883a 	add	r3,r3,r3
 10084fc:	29400044 	addi	r5,r5,1
 1008500:	1c7ffd16 	blt	r3,r17,10084f8 <__lshift+0x48>
 1008504:	a809883a 	mov	r4,r21
 1008508:	10080ec0 	call	10080ec <_Balloc>
 100850c:	1027883a 	mov	r19,r2
 1008510:	11400504 	addi	r5,r2,20
 1008514:	0400090e 	bge	zero,r16,100853c <__lshift+0x8c>
 1008518:	2805883a 	mov	r2,r5
 100851c:	0007883a 	mov	r3,zero
 1008520:	18c00044 	addi	r3,r3,1
 1008524:	10000015 	stw	zero,0(r2)
 1008528:	10800104 	addi	r2,r2,4
 100852c:	80fffc1e 	bne	r16,r3,1008520 <__lshift+0x70>
 1008530:	8405883a 	add	r2,r16,r16
 1008534:	1085883a 	add	r2,r2,r2
 1008538:	288b883a 	add	r5,r5,r2
 100853c:	90800417 	ldw	r2,16(r18)
 1008540:	91000504 	addi	r4,r18,20
 1008544:	a18007cc 	andi	r6,r20,31
 1008548:	1085883a 	add	r2,r2,r2
 100854c:	1085883a 	add	r2,r2,r2
 1008550:	208f883a 	add	r7,r4,r2
 1008554:	30001e26 	beq	r6,zero,10085d0 <__lshift+0x120>
 1008558:	00800804 	movi	r2,32
 100855c:	1191c83a 	sub	r8,r2,r6
 1008560:	0007883a 	mov	r3,zero
 1008564:	20800017 	ldw	r2,0(r4)
 1008568:	1184983a 	sll	r2,r2,r6
 100856c:	1884b03a 	or	r2,r3,r2
 1008570:	28800015 	stw	r2,0(r5)
 1008574:	20c00017 	ldw	r3,0(r4)
 1008578:	21000104 	addi	r4,r4,4
 100857c:	29400104 	addi	r5,r5,4
 1008580:	1a06d83a 	srl	r3,r3,r8
 1008584:	21fff736 	bltu	r4,r7,1008564 <__lshift+0xb4>
 1008588:	28c00015 	stw	r3,0(r5)
 100858c:	18000126 	beq	r3,zero,1008594 <__lshift+0xe4>
 1008590:	8c400044 	addi	r17,r17,1
 1008594:	88bfffc4 	addi	r2,r17,-1
 1008598:	98800415 	stw	r2,16(r19)
 100859c:	a809883a 	mov	r4,r21
 10085a0:	900b883a 	mov	r5,r18
 10085a4:	1007b6c0 	call	1007b6c <_Bfree>
 10085a8:	9805883a 	mov	r2,r19
 10085ac:	dfc00617 	ldw	ra,24(sp)
 10085b0:	dd400517 	ldw	r21,20(sp)
 10085b4:	dd000417 	ldw	r20,16(sp)
 10085b8:	dcc00317 	ldw	r19,12(sp)
 10085bc:	dc800217 	ldw	r18,8(sp)
 10085c0:	dc400117 	ldw	r17,4(sp)
 10085c4:	dc000017 	ldw	r16,0(sp)
 10085c8:	dec00704 	addi	sp,sp,28
 10085cc:	f800283a 	ret
 10085d0:	20800017 	ldw	r2,0(r4)
 10085d4:	21000104 	addi	r4,r4,4
 10085d8:	28800015 	stw	r2,0(r5)
 10085dc:	29400104 	addi	r5,r5,4
 10085e0:	21ffec2e 	bgeu	r4,r7,1008594 <__lshift+0xe4>
 10085e4:	20800017 	ldw	r2,0(r4)
 10085e8:	21000104 	addi	r4,r4,4
 10085ec:	28800015 	stw	r2,0(r5)
 10085f0:	29400104 	addi	r5,r5,4
 10085f4:	21fff636 	bltu	r4,r7,10085d0 <__lshift+0x120>
 10085f8:	003fe606 	br	1008594 <__lshift+0xe4>

010085fc <__multiply>:
 10085fc:	defff904 	addi	sp,sp,-28
 1008600:	dcc00315 	stw	r19,12(sp)
 1008604:	dc800215 	stw	r18,8(sp)
 1008608:	2cc00417 	ldw	r19,16(r5)
 100860c:	34800417 	ldw	r18,16(r6)
 1008610:	dd000415 	stw	r20,16(sp)
 1008614:	dc400115 	stw	r17,4(sp)
 1008618:	dfc00615 	stw	ra,24(sp)
 100861c:	dd400515 	stw	r21,20(sp)
 1008620:	dc000015 	stw	r16,0(sp)
 1008624:	2823883a 	mov	r17,r5
 1008628:	3029883a 	mov	r20,r6
 100862c:	9c80040e 	bge	r19,r18,1008640 <__multiply+0x44>
 1008630:	9027883a 	mov	r19,r18
 1008634:	2c800417 	ldw	r18,16(r5)
 1008638:	2829883a 	mov	r20,r5
 100863c:	3023883a 	mov	r17,r6
 1008640:	88800217 	ldw	r2,8(r17)
 1008644:	9ca1883a 	add	r16,r19,r18
 1008648:	89400117 	ldw	r5,4(r17)
 100864c:	1400010e 	bge	r2,r16,1008654 <__multiply+0x58>
 1008650:	29400044 	addi	r5,r5,1
 1008654:	10080ec0 	call	10080ec <_Balloc>
 1008658:	102b883a 	mov	r21,r2
 100865c:	8405883a 	add	r2,r16,r16
 1008660:	1085883a 	add	r2,r2,r2
 1008664:	a9000504 	addi	r4,r21,20
 1008668:	209d883a 	add	r14,r4,r2
 100866c:	2380042e 	bgeu	r4,r14,1008680 <__multiply+0x84>
 1008670:	2005883a 	mov	r2,r4
 1008674:	10000015 	stw	zero,0(r2)
 1008678:	10800104 	addi	r2,r2,4
 100867c:	13bffd36 	bltu	r2,r14,1008674 <__multiply+0x78>
 1008680:	9485883a 	add	r2,r18,r18
 1008684:	9cc7883a 	add	r3,r19,r19
 1008688:	a1800504 	addi	r6,r20,20
 100868c:	1085883a 	add	r2,r2,r2
 1008690:	8b400504 	addi	r13,r17,20
 1008694:	18c7883a 	add	r3,r3,r3
 1008698:	309f883a 	add	r15,r6,r2
 100869c:	68d7883a 	add	r11,r13,r3
 10086a0:	33c03b2e 	bgeu	r6,r15,1008790 <__multiply+0x194>
 10086a4:	2019883a 	mov	r12,r4
 10086a8:	30800017 	ldw	r2,0(r6)
 10086ac:	127fffcc 	andi	r9,r2,65535
 10086b0:	48001826 	beq	r9,zero,1008714 <__multiply+0x118>
 10086b4:	6811883a 	mov	r8,r13
 10086b8:	600f883a 	mov	r7,r12
 10086bc:	0015883a 	mov	r10,zero
 10086c0:	40c00017 	ldw	r3,0(r8)
 10086c4:	39400017 	ldw	r5,0(r7)
 10086c8:	42000104 	addi	r8,r8,4
 10086cc:	193fffcc 	andi	r4,r3,65535
 10086d0:	4909383a 	mul	r4,r9,r4
 10086d4:	1806d43a 	srli	r3,r3,16
 10086d8:	28bfffcc 	andi	r2,r5,65535
 10086dc:	5085883a 	add	r2,r10,r2
 10086e0:	2089883a 	add	r4,r4,r2
 10086e4:	48c7383a 	mul	r3,r9,r3
 10086e8:	280ad43a 	srli	r5,r5,16
 10086ec:	2004d43a 	srli	r2,r4,16
 10086f0:	3900000d 	sth	r4,0(r7)
 10086f4:	1947883a 	add	r3,r3,r5
 10086f8:	10c5883a 	add	r2,r2,r3
 10086fc:	3880008d 	sth	r2,2(r7)
 1008700:	1014d43a 	srli	r10,r2,16
 1008704:	39c00104 	addi	r7,r7,4
 1008708:	42ffed36 	bltu	r8,r11,10086c0 <__multiply+0xc4>
 100870c:	3a800015 	stw	r10,0(r7)
 1008710:	30800017 	ldw	r2,0(r6)
 1008714:	1012d43a 	srli	r9,r2,16
 1008718:	48001926 	beq	r9,zero,1008780 <__multiply+0x184>
 100871c:	60800017 	ldw	r2,0(r12)
 1008720:	6811883a 	mov	r8,r13
 1008724:	600f883a 	mov	r7,r12
 1008728:	0015883a 	mov	r10,zero
 100872c:	100b883a 	mov	r5,r2
 1008730:	41000017 	ldw	r4,0(r8)
 1008734:	2806d43a 	srli	r3,r5,16
 1008738:	3880000d 	sth	r2,0(r7)
 100873c:	20bfffcc 	andi	r2,r4,65535
 1008740:	4885383a 	mul	r2,r9,r2
 1008744:	50c7883a 	add	r3,r10,r3
 1008748:	2008d43a 	srli	r4,r4,16
 100874c:	10c5883a 	add	r2,r2,r3
 1008750:	3880008d 	sth	r2,2(r7)
 1008754:	39c00104 	addi	r7,r7,4
 1008758:	39400017 	ldw	r5,0(r7)
 100875c:	4909383a 	mul	r4,r9,r4
 1008760:	1004d43a 	srli	r2,r2,16
 1008764:	28ffffcc 	andi	r3,r5,65535
 1008768:	20c9883a 	add	r4,r4,r3
 100876c:	1105883a 	add	r2,r2,r4
 1008770:	42000104 	addi	r8,r8,4
 1008774:	1014d43a 	srli	r10,r2,16
 1008778:	42ffed36 	bltu	r8,r11,1008730 <__multiply+0x134>
 100877c:	38800015 	stw	r2,0(r7)
 1008780:	31800104 	addi	r6,r6,4
 1008784:	33c0022e 	bgeu	r6,r15,1008790 <__multiply+0x194>
 1008788:	63000104 	addi	r12,r12,4
 100878c:	003fc606 	br	10086a8 <__multiply+0xac>
 1008790:	0400090e 	bge	zero,r16,10087b8 <__multiply+0x1bc>
 1008794:	70bfff17 	ldw	r2,-4(r14)
 1008798:	70ffff04 	addi	r3,r14,-4
 100879c:	10000326 	beq	r2,zero,10087ac <__multiply+0x1b0>
 10087a0:	00000506 	br	10087b8 <__multiply+0x1bc>
 10087a4:	18800017 	ldw	r2,0(r3)
 10087a8:	1000031e 	bne	r2,zero,10087b8 <__multiply+0x1bc>
 10087ac:	843fffc4 	addi	r16,r16,-1
 10087b0:	18ffff04 	addi	r3,r3,-4
 10087b4:	803ffb1e 	bne	r16,zero,10087a4 <__multiply+0x1a8>
 10087b8:	a805883a 	mov	r2,r21
 10087bc:	ac000415 	stw	r16,16(r21)
 10087c0:	dfc00617 	ldw	ra,24(sp)
 10087c4:	dd400517 	ldw	r21,20(sp)
 10087c8:	dd000417 	ldw	r20,16(sp)
 10087cc:	dcc00317 	ldw	r19,12(sp)
 10087d0:	dc800217 	ldw	r18,8(sp)
 10087d4:	dc400117 	ldw	r17,4(sp)
 10087d8:	dc000017 	ldw	r16,0(sp)
 10087dc:	dec00704 	addi	sp,sp,28
 10087e0:	f800283a 	ret

010087e4 <__i2b>:
 10087e4:	defffd04 	addi	sp,sp,-12
 10087e8:	dc000015 	stw	r16,0(sp)
 10087ec:	04000044 	movi	r16,1
 10087f0:	dc800115 	stw	r18,4(sp)
 10087f4:	2825883a 	mov	r18,r5
 10087f8:	800b883a 	mov	r5,r16
 10087fc:	dfc00215 	stw	ra,8(sp)
 1008800:	10080ec0 	call	10080ec <_Balloc>
 1008804:	14000415 	stw	r16,16(r2)
 1008808:	14800515 	stw	r18,20(r2)
 100880c:	dfc00217 	ldw	ra,8(sp)
 1008810:	dc800117 	ldw	r18,4(sp)
 1008814:	dc000017 	ldw	r16,0(sp)
 1008818:	dec00304 	addi	sp,sp,12
 100881c:	f800283a 	ret

01008820 <__multadd>:
 1008820:	defffa04 	addi	sp,sp,-24
 1008824:	dc800215 	stw	r18,8(sp)
 1008828:	2c800417 	ldw	r18,16(r5)
 100882c:	dd000415 	stw	r20,16(sp)
 1008830:	dcc00315 	stw	r19,12(sp)
 1008834:	dc000015 	stw	r16,0(sp)
 1008838:	dfc00515 	stw	ra,20(sp)
 100883c:	3821883a 	mov	r16,r7
 1008840:	dc400115 	stw	r17,4(sp)
 1008844:	2827883a 	mov	r19,r5
 1008848:	2029883a 	mov	r20,r4
 100884c:	2a000504 	addi	r8,r5,20
 1008850:	000f883a 	mov	r7,zero
 1008854:	40800017 	ldw	r2,0(r8)
 1008858:	39c00044 	addi	r7,r7,1
 100885c:	10ffffcc 	andi	r3,r2,65535
 1008860:	1987383a 	mul	r3,r3,r6
 1008864:	1004d43a 	srli	r2,r2,16
 1008868:	1c07883a 	add	r3,r3,r16
 100886c:	180ad43a 	srli	r5,r3,16
 1008870:	1185383a 	mul	r2,r2,r6
 1008874:	18ffffcc 	andi	r3,r3,65535
 1008878:	1145883a 	add	r2,r2,r5
 100887c:	1008943a 	slli	r4,r2,16
 1008880:	1020d43a 	srli	r16,r2,16
 1008884:	20c9883a 	add	r4,r4,r3
 1008888:	41000015 	stw	r4,0(r8)
 100888c:	42000104 	addi	r8,r8,4
 1008890:	3cbff016 	blt	r7,r18,1008854 <__multadd+0x34>
 1008894:	80000826 	beq	r16,zero,10088b8 <__multadd+0x98>
 1008898:	98800217 	ldw	r2,8(r19)
 100889c:	90800f0e 	bge	r18,r2,10088dc <__multadd+0xbc>
 10088a0:	9485883a 	add	r2,r18,r18
 10088a4:	1085883a 	add	r2,r2,r2
 10088a8:	14c5883a 	add	r2,r2,r19
 10088ac:	90c00044 	addi	r3,r18,1
 10088b0:	14000515 	stw	r16,20(r2)
 10088b4:	98c00415 	stw	r3,16(r19)
 10088b8:	9805883a 	mov	r2,r19
 10088bc:	dfc00517 	ldw	ra,20(sp)
 10088c0:	dd000417 	ldw	r20,16(sp)
 10088c4:	dcc00317 	ldw	r19,12(sp)
 10088c8:	dc800217 	ldw	r18,8(sp)
 10088cc:	dc400117 	ldw	r17,4(sp)
 10088d0:	dc000017 	ldw	r16,0(sp)
 10088d4:	dec00604 	addi	sp,sp,24
 10088d8:	f800283a 	ret
 10088dc:	99400117 	ldw	r5,4(r19)
 10088e0:	a009883a 	mov	r4,r20
 10088e4:	29400044 	addi	r5,r5,1
 10088e8:	10080ec0 	call	10080ec <_Balloc>
 10088ec:	99800417 	ldw	r6,16(r19)
 10088f0:	99400304 	addi	r5,r19,12
 10088f4:	11000304 	addi	r4,r2,12
 10088f8:	318d883a 	add	r6,r6,r6
 10088fc:	318d883a 	add	r6,r6,r6
 1008900:	31800204 	addi	r6,r6,8
 1008904:	1023883a 	mov	r17,r2
 1008908:	10079540 	call	1007954 <memcpy>
 100890c:	980b883a 	mov	r5,r19
 1008910:	a009883a 	mov	r4,r20
 1008914:	1007b6c0 	call	1007b6c <_Bfree>
 1008918:	8827883a 	mov	r19,r17
 100891c:	003fe006 	br	10088a0 <__multadd+0x80>

01008920 <__pow5mult>:
 1008920:	defffa04 	addi	sp,sp,-24
 1008924:	308000cc 	andi	r2,r6,3
 1008928:	dd000415 	stw	r20,16(sp)
 100892c:	dcc00315 	stw	r19,12(sp)
 1008930:	dc000015 	stw	r16,0(sp)
 1008934:	dfc00515 	stw	ra,20(sp)
 1008938:	dc800215 	stw	r18,8(sp)
 100893c:	dc400115 	stw	r17,4(sp)
 1008940:	3021883a 	mov	r16,r6
 1008944:	2027883a 	mov	r19,r4
 1008948:	2829883a 	mov	r20,r5
 100894c:	10002b1e 	bne	r2,zero,10089fc <__pow5mult+0xdc>
 1008950:	8025d0ba 	srai	r18,r16,2
 1008954:	90001b26 	beq	r18,zero,10089c4 <__pow5mult+0xa4>
 1008958:	9c001217 	ldw	r16,72(r19)
 100895c:	8000081e 	bne	r16,zero,1008980 <__pow5mult+0x60>
 1008960:	00003006 	br	1008a24 <__pow5mult+0x104>
 1008964:	800b883a 	mov	r5,r16
 1008968:	800d883a 	mov	r6,r16
 100896c:	9809883a 	mov	r4,r19
 1008970:	90001426 	beq	r18,zero,10089c4 <__pow5mult+0xa4>
 1008974:	80800017 	ldw	r2,0(r16)
 1008978:	10001b26 	beq	r2,zero,10089e8 <__pow5mult+0xc8>
 100897c:	1021883a 	mov	r16,r2
 1008980:	9080004c 	andi	r2,r18,1
 1008984:	1005003a 	cmpeq	r2,r2,zero
 1008988:	9025d07a 	srai	r18,r18,1
 100898c:	800d883a 	mov	r6,r16
 1008990:	9809883a 	mov	r4,r19
 1008994:	a00b883a 	mov	r5,r20
 1008998:	103ff21e 	bne	r2,zero,1008964 <__pow5mult+0x44>
 100899c:	10085fc0 	call	10085fc <__multiply>
 10089a0:	a00b883a 	mov	r5,r20
 10089a4:	9809883a 	mov	r4,r19
 10089a8:	1023883a 	mov	r17,r2
 10089ac:	1007b6c0 	call	1007b6c <_Bfree>
 10089b0:	8829883a 	mov	r20,r17
 10089b4:	800b883a 	mov	r5,r16
 10089b8:	800d883a 	mov	r6,r16
 10089bc:	9809883a 	mov	r4,r19
 10089c0:	903fec1e 	bne	r18,zero,1008974 <__pow5mult+0x54>
 10089c4:	a005883a 	mov	r2,r20
 10089c8:	dfc00517 	ldw	ra,20(sp)
 10089cc:	dd000417 	ldw	r20,16(sp)
 10089d0:	dcc00317 	ldw	r19,12(sp)
 10089d4:	dc800217 	ldw	r18,8(sp)
 10089d8:	dc400117 	ldw	r17,4(sp)
 10089dc:	dc000017 	ldw	r16,0(sp)
 10089e0:	dec00604 	addi	sp,sp,24
 10089e4:	f800283a 	ret
 10089e8:	10085fc0 	call	10085fc <__multiply>
 10089ec:	80800015 	stw	r2,0(r16)
 10089f0:	1021883a 	mov	r16,r2
 10089f4:	10000015 	stw	zero,0(r2)
 10089f8:	003fe106 	br	1008980 <__pow5mult+0x60>
 10089fc:	1085883a 	add	r2,r2,r2
 1008a00:	00c04074 	movhi	r3,257
 1008a04:	18cc7404 	addi	r3,r3,12752
 1008a08:	1085883a 	add	r2,r2,r2
 1008a0c:	10c5883a 	add	r2,r2,r3
 1008a10:	11bfff17 	ldw	r6,-4(r2)
 1008a14:	000f883a 	mov	r7,zero
 1008a18:	10088200 	call	1008820 <__multadd>
 1008a1c:	1029883a 	mov	r20,r2
 1008a20:	003fcb06 	br	1008950 <__pow5mult+0x30>
 1008a24:	9809883a 	mov	r4,r19
 1008a28:	01409c44 	movi	r5,625
 1008a2c:	10087e40 	call	10087e4 <__i2b>
 1008a30:	98801215 	stw	r2,72(r19)
 1008a34:	1021883a 	mov	r16,r2
 1008a38:	10000015 	stw	zero,0(r2)
 1008a3c:	003fd006 	br	1008980 <__pow5mult+0x60>

01008a40 <__s2b>:
 1008a40:	defff904 	addi	sp,sp,-28
 1008a44:	dcc00315 	stw	r19,12(sp)
 1008a48:	dc800215 	stw	r18,8(sp)
 1008a4c:	2827883a 	mov	r19,r5
 1008a50:	2025883a 	mov	r18,r4
 1008a54:	01400244 	movi	r5,9
 1008a58:	39000204 	addi	r4,r7,8
 1008a5c:	dd000415 	stw	r20,16(sp)
 1008a60:	dc400115 	stw	r17,4(sp)
 1008a64:	dfc00615 	stw	ra,24(sp)
 1008a68:	dd400515 	stw	r21,20(sp)
 1008a6c:	dc000015 	stw	r16,0(sp)
 1008a70:	3829883a 	mov	r20,r7
 1008a74:	3023883a 	mov	r17,r6
 1008a78:	100efa40 	call	100efa4 <__divsi3>
 1008a7c:	00c00044 	movi	r3,1
 1008a80:	1880350e 	bge	r3,r2,1008b58 <__s2b+0x118>
 1008a84:	000b883a 	mov	r5,zero
 1008a88:	18c7883a 	add	r3,r3,r3
 1008a8c:	29400044 	addi	r5,r5,1
 1008a90:	18bffd16 	blt	r3,r2,1008a88 <__s2b+0x48>
 1008a94:	9009883a 	mov	r4,r18
 1008a98:	10080ec0 	call	10080ec <_Balloc>
 1008a9c:	1011883a 	mov	r8,r2
 1008aa0:	d8800717 	ldw	r2,28(sp)
 1008aa4:	00c00044 	movi	r3,1
 1008aa8:	01800244 	movi	r6,9
 1008aac:	40800515 	stw	r2,20(r8)
 1008ab0:	40c00415 	stw	r3,16(r8)
 1008ab4:	3440260e 	bge	r6,r17,1008b50 <__s2b+0x110>
 1008ab8:	3021883a 	mov	r16,r6
 1008abc:	99ab883a 	add	r21,r19,r6
 1008ac0:	9c05883a 	add	r2,r19,r16
 1008ac4:	11c00007 	ldb	r7,0(r2)
 1008ac8:	400b883a 	mov	r5,r8
 1008acc:	9009883a 	mov	r4,r18
 1008ad0:	39fff404 	addi	r7,r7,-48
 1008ad4:	01800284 	movi	r6,10
 1008ad8:	10088200 	call	1008820 <__multadd>
 1008adc:	84000044 	addi	r16,r16,1
 1008ae0:	1011883a 	mov	r8,r2
 1008ae4:	8c3ff61e 	bne	r17,r16,1008ac0 <__s2b+0x80>
 1008ae8:	ac45883a 	add	r2,r21,r17
 1008aec:	117ffe04 	addi	r5,r2,-8
 1008af0:	880d883a 	mov	r6,r17
 1008af4:	35000c0e 	bge	r6,r20,1008b28 <__s2b+0xe8>
 1008af8:	a185c83a 	sub	r2,r20,r6
 1008afc:	2821883a 	mov	r16,r5
 1008b00:	28a3883a 	add	r17,r5,r2
 1008b04:	81c00007 	ldb	r7,0(r16)
 1008b08:	400b883a 	mov	r5,r8
 1008b0c:	9009883a 	mov	r4,r18
 1008b10:	39fff404 	addi	r7,r7,-48
 1008b14:	01800284 	movi	r6,10
 1008b18:	10088200 	call	1008820 <__multadd>
 1008b1c:	84000044 	addi	r16,r16,1
 1008b20:	1011883a 	mov	r8,r2
 1008b24:	847ff71e 	bne	r16,r17,1008b04 <__s2b+0xc4>
 1008b28:	4005883a 	mov	r2,r8
 1008b2c:	dfc00617 	ldw	ra,24(sp)
 1008b30:	dd400517 	ldw	r21,20(sp)
 1008b34:	dd000417 	ldw	r20,16(sp)
 1008b38:	dcc00317 	ldw	r19,12(sp)
 1008b3c:	dc800217 	ldw	r18,8(sp)
 1008b40:	dc400117 	ldw	r17,4(sp)
 1008b44:	dc000017 	ldw	r16,0(sp)
 1008b48:	dec00704 	addi	sp,sp,28
 1008b4c:	f800283a 	ret
 1008b50:	99400284 	addi	r5,r19,10
 1008b54:	003fe706 	br	1008af4 <__s2b+0xb4>
 1008b58:	000b883a 	mov	r5,zero
 1008b5c:	003fcd06 	br	1008a94 <__s2b+0x54>

01008b60 <putc>:
 1008b60:	defffc04 	addi	sp,sp,-16
 1008b64:	dc800215 	stw	r18,8(sp)
 1008b68:	04804074 	movhi	r18,257
 1008b6c:	94939004 	addi	r18,r18,20032
 1008b70:	90c00017 	ldw	r3,0(r18)
 1008b74:	dc400115 	stw	r17,4(sp)
 1008b78:	dc000015 	stw	r16,0(sp)
 1008b7c:	dfc00315 	stw	ra,12(sp)
 1008b80:	2023883a 	mov	r17,r4
 1008b84:	2821883a 	mov	r16,r5
 1008b88:	18000226 	beq	r3,zero,1008b94 <putc+0x34>
 1008b8c:	18800e17 	ldw	r2,56(r3)
 1008b90:	10001126 	beq	r2,zero,1008bd8 <putc+0x78>
 1008b94:	80800217 	ldw	r2,8(r16)
 1008b98:	10ffffc4 	addi	r3,r2,-1
 1008b9c:	80c00215 	stw	r3,8(r16)
 1008ba0:	18001316 	blt	r3,zero,1008bf0 <putc+0x90>
 1008ba4:	80800017 	ldw	r2,0(r16)
 1008ba8:	14400005 	stb	r17,0(r2)
 1008bac:	80c00017 	ldw	r3,0(r16)
 1008bb0:	18800044 	addi	r2,r3,1
 1008bb4:	18c00003 	ldbu	r3,0(r3)
 1008bb8:	80800015 	stw	r2,0(r16)
 1008bbc:	1805883a 	mov	r2,r3
 1008bc0:	dfc00317 	ldw	ra,12(sp)
 1008bc4:	dc800217 	ldw	r18,8(sp)
 1008bc8:	dc400117 	ldw	r17,4(sp)
 1008bcc:	dc000017 	ldw	r16,0(sp)
 1008bd0:	dec00404 	addi	sp,sp,16
 1008bd4:	f800283a 	ret
 1008bd8:	1809883a 	mov	r4,r3
 1008bdc:	1005ebc0 	call	1005ebc <__sinit>
 1008be0:	80800217 	ldw	r2,8(r16)
 1008be4:	10ffffc4 	addi	r3,r2,-1
 1008be8:	80c00215 	stw	r3,8(r16)
 1008bec:	183fed0e 	bge	r3,zero,1008ba4 <putc+0x44>
 1008bf0:	80800617 	ldw	r2,24(r16)
 1008bf4:	18800f16 	blt	r3,r2,1008c34 <putc+0xd4>
 1008bf8:	80800017 	ldw	r2,0(r16)
 1008bfc:	14400005 	stb	r17,0(r2)
 1008c00:	81000017 	ldw	r4,0(r16)
 1008c04:	00800284 	movi	r2,10
 1008c08:	20c00003 	ldbu	r3,0(r4)
 1008c0c:	18801226 	beq	r3,r2,1008c58 <putc+0xf8>
 1008c10:	20800044 	addi	r2,r4,1
 1008c14:	80800015 	stw	r2,0(r16)
 1008c18:	1805883a 	mov	r2,r3
 1008c1c:	dfc00317 	ldw	ra,12(sp)
 1008c20:	dc800217 	ldw	r18,8(sp)
 1008c24:	dc400117 	ldw	r17,4(sp)
 1008c28:	dc000017 	ldw	r16,0(sp)
 1008c2c:	dec00404 	addi	sp,sp,16
 1008c30:	f800283a 	ret
 1008c34:	91000017 	ldw	r4,0(r18)
 1008c38:	880b883a 	mov	r5,r17
 1008c3c:	800d883a 	mov	r6,r16
 1008c40:	dfc00317 	ldw	ra,12(sp)
 1008c44:	dc800217 	ldw	r18,8(sp)
 1008c48:	dc400117 	ldw	r17,4(sp)
 1008c4c:	dc000017 	ldw	r16,0(sp)
 1008c50:	dec00404 	addi	sp,sp,16
 1008c54:	100bd681 	jmpi	100bd68 <__swbuf_r>
 1008c58:	91000017 	ldw	r4,0(r18)
 1008c5c:	180b883a 	mov	r5,r3
 1008c60:	003ff606 	br	1008c3c <putc+0xdc>

01008c64 <_putc_r>:
 1008c64:	defffc04 	addi	sp,sp,-16
 1008c68:	dc400215 	stw	r17,8(sp)
 1008c6c:	dc000115 	stw	r16,4(sp)
 1008c70:	dfc00315 	stw	ra,12(sp)
 1008c74:	2021883a 	mov	r16,r4
 1008c78:	2823883a 	mov	r17,r5
 1008c7c:	20000226 	beq	r4,zero,1008c88 <_putc_r+0x24>
 1008c80:	20800e17 	ldw	r2,56(r4)
 1008c84:	10001026 	beq	r2,zero,1008cc8 <_putc_r+0x64>
 1008c88:	30800217 	ldw	r2,8(r6)
 1008c8c:	10ffffc4 	addi	r3,r2,-1
 1008c90:	30c00215 	stw	r3,8(r6)
 1008c94:	18001316 	blt	r3,zero,1008ce4 <_putc_r+0x80>
 1008c98:	30800017 	ldw	r2,0(r6)
 1008c9c:	14400005 	stb	r17,0(r2)
 1008ca0:	30c00017 	ldw	r3,0(r6)
 1008ca4:	18800044 	addi	r2,r3,1
 1008ca8:	18c00003 	ldbu	r3,0(r3)
 1008cac:	30800015 	stw	r2,0(r6)
 1008cb0:	1805883a 	mov	r2,r3
 1008cb4:	dfc00317 	ldw	ra,12(sp)
 1008cb8:	dc400217 	ldw	r17,8(sp)
 1008cbc:	dc000117 	ldw	r16,4(sp)
 1008cc0:	dec00404 	addi	sp,sp,16
 1008cc4:	f800283a 	ret
 1008cc8:	d9800015 	stw	r6,0(sp)
 1008ccc:	1005ebc0 	call	1005ebc <__sinit>
 1008cd0:	d9800017 	ldw	r6,0(sp)
 1008cd4:	30800217 	ldw	r2,8(r6)
 1008cd8:	10ffffc4 	addi	r3,r2,-1
 1008cdc:	30c00215 	stw	r3,8(r6)
 1008ce0:	183fed0e 	bge	r3,zero,1008c98 <_putc_r+0x34>
 1008ce4:	30800617 	ldw	r2,24(r6)
 1008ce8:	18800e16 	blt	r3,r2,1008d24 <_putc_r+0xc0>
 1008cec:	30800017 	ldw	r2,0(r6)
 1008cf0:	14400005 	stb	r17,0(r2)
 1008cf4:	31000017 	ldw	r4,0(r6)
 1008cf8:	00800284 	movi	r2,10
 1008cfc:	20c00003 	ldbu	r3,0(r4)
 1008d00:	18800f26 	beq	r3,r2,1008d40 <_putc_r+0xdc>
 1008d04:	20800044 	addi	r2,r4,1
 1008d08:	30800015 	stw	r2,0(r6)
 1008d0c:	1805883a 	mov	r2,r3
 1008d10:	dfc00317 	ldw	ra,12(sp)
 1008d14:	dc400217 	ldw	r17,8(sp)
 1008d18:	dc000117 	ldw	r16,4(sp)
 1008d1c:	dec00404 	addi	sp,sp,16
 1008d20:	f800283a 	ret
 1008d24:	8009883a 	mov	r4,r16
 1008d28:	880b883a 	mov	r5,r17
 1008d2c:	dfc00317 	ldw	ra,12(sp)
 1008d30:	dc400217 	ldw	r17,8(sp)
 1008d34:	dc000117 	ldw	r16,4(sp)
 1008d38:	dec00404 	addi	sp,sp,16
 1008d3c:	100bd681 	jmpi	100bd68 <__swbuf_r>
 1008d40:	8009883a 	mov	r4,r16
 1008d44:	180b883a 	mov	r5,r3
 1008d48:	003ff806 	br	1008d2c <_putc_r+0xc8>

01008d4c <_realloc_r>:
 1008d4c:	defff404 	addi	sp,sp,-48
 1008d50:	dd800815 	stw	r22,32(sp)
 1008d54:	dc800415 	stw	r18,16(sp)
 1008d58:	dc400315 	stw	r17,12(sp)
 1008d5c:	dfc00b15 	stw	ra,44(sp)
 1008d60:	df000a15 	stw	fp,40(sp)
 1008d64:	ddc00915 	stw	r23,36(sp)
 1008d68:	dd400715 	stw	r21,28(sp)
 1008d6c:	dd000615 	stw	r20,24(sp)
 1008d70:	dcc00515 	stw	r19,20(sp)
 1008d74:	dc000215 	stw	r16,8(sp)
 1008d78:	2825883a 	mov	r18,r5
 1008d7c:	3023883a 	mov	r17,r6
 1008d80:	202d883a 	mov	r22,r4
 1008d84:	2800c926 	beq	r5,zero,10090ac <_realloc_r+0x360>
 1008d88:	100ff880 	call	100ff88 <__malloc_lock>
 1008d8c:	943ffe04 	addi	r16,r18,-8
 1008d90:	88c002c4 	addi	r3,r17,11
 1008d94:	00800584 	movi	r2,22
 1008d98:	82000117 	ldw	r8,4(r16)
 1008d9c:	10c01b2e 	bgeu	r2,r3,1008e0c <_realloc_r+0xc0>
 1008da0:	00bffe04 	movi	r2,-8
 1008da4:	188e703a 	and	r7,r3,r2
 1008da8:	3839883a 	mov	fp,r7
 1008dac:	38001a16 	blt	r7,zero,1008e18 <_realloc_r+0xcc>
 1008db0:	e4401936 	bltu	fp,r17,1008e18 <_realloc_r+0xcc>
 1008db4:	013fff04 	movi	r4,-4
 1008db8:	4126703a 	and	r19,r8,r4
 1008dbc:	99c02616 	blt	r19,r7,1008e58 <_realloc_r+0x10c>
 1008dc0:	802b883a 	mov	r21,r16
 1008dc4:	9829883a 	mov	r20,r19
 1008dc8:	84000204 	addi	r16,r16,8
 1008dcc:	a80f883a 	mov	r7,r21
 1008dd0:	a70dc83a 	sub	r6,r20,fp
 1008dd4:	008003c4 	movi	r2,15
 1008dd8:	1180c136 	bltu	r2,r6,10090e0 <_realloc_r+0x394>
 1008ddc:	38800117 	ldw	r2,4(r7)
 1008de0:	a549883a 	add	r4,r20,r21
 1008de4:	1080004c 	andi	r2,r2,1
 1008de8:	a084b03a 	or	r2,r20,r2
 1008dec:	38800115 	stw	r2,4(r7)
 1008df0:	20c00117 	ldw	r3,4(r4)
 1008df4:	18c00054 	ori	r3,r3,1
 1008df8:	20c00115 	stw	r3,4(r4)
 1008dfc:	b009883a 	mov	r4,r22
 1008e00:	100ffa80 	call	100ffa8 <__malloc_unlock>
 1008e04:	8023883a 	mov	r17,r16
 1008e08:	00000606 	br	1008e24 <_realloc_r+0xd8>
 1008e0c:	01c00404 	movi	r7,16
 1008e10:	3839883a 	mov	fp,r7
 1008e14:	e47fe72e 	bgeu	fp,r17,1008db4 <_realloc_r+0x68>
 1008e18:	00800304 	movi	r2,12
 1008e1c:	0023883a 	mov	r17,zero
 1008e20:	b0800015 	stw	r2,0(r22)
 1008e24:	8805883a 	mov	r2,r17
 1008e28:	dfc00b17 	ldw	ra,44(sp)
 1008e2c:	df000a17 	ldw	fp,40(sp)
 1008e30:	ddc00917 	ldw	r23,36(sp)
 1008e34:	dd800817 	ldw	r22,32(sp)
 1008e38:	dd400717 	ldw	r21,28(sp)
 1008e3c:	dd000617 	ldw	r20,24(sp)
 1008e40:	dcc00517 	ldw	r19,20(sp)
 1008e44:	dc800417 	ldw	r18,16(sp)
 1008e48:	dc400317 	ldw	r17,12(sp)
 1008e4c:	dc000217 	ldw	r16,8(sp)
 1008e50:	dec00c04 	addi	sp,sp,48
 1008e54:	f800283a 	ret
 1008e58:	00804074 	movhi	r2,257
 1008e5c:	108deb04 	addi	r2,r2,14252
 1008e60:	12400217 	ldw	r9,8(r2)
 1008e64:	84cd883a 	add	r6,r16,r19
 1008e68:	802b883a 	mov	r21,r16
 1008e6c:	3240b926 	beq	r6,r9,1009154 <_realloc_r+0x408>
 1008e70:	31400117 	ldw	r5,4(r6)
 1008e74:	00bfff84 	movi	r2,-2
 1008e78:	2884703a 	and	r2,r5,r2
 1008e7c:	1185883a 	add	r2,r2,r6
 1008e80:	10c00117 	ldw	r3,4(r2)
 1008e84:	18c0004c 	andi	r3,r3,1
 1008e88:	1807003a 	cmpeq	r3,r3,zero
 1008e8c:	1800a326 	beq	r3,zero,100911c <_realloc_r+0x3d0>
 1008e90:	2908703a 	and	r4,r5,r4
 1008e94:	9929883a 	add	r20,r19,r4
 1008e98:	a1c0a30e 	bge	r20,r7,1009128 <_realloc_r+0x3dc>
 1008e9c:	4080004c 	andi	r2,r8,1
 1008ea0:	1000551e 	bne	r2,zero,1008ff8 <_realloc_r+0x2ac>
 1008ea4:	80800017 	ldw	r2,0(r16)
 1008ea8:	80afc83a 	sub	r23,r16,r2
 1008eac:	b8c00117 	ldw	r3,4(r23)
 1008eb0:	00bfff04 	movi	r2,-4
 1008eb4:	1884703a 	and	r2,r3,r2
 1008eb8:	30002e26 	beq	r6,zero,1008f74 <_realloc_r+0x228>
 1008ebc:	3240b926 	beq	r6,r9,10091a4 <_realloc_r+0x458>
 1008ec0:	98a9883a 	add	r20,r19,r2
 1008ec4:	2509883a 	add	r4,r4,r20
 1008ec8:	d9000015 	stw	r4,0(sp)
 1008ecc:	21c02a16 	blt	r4,r7,1008f78 <_realloc_r+0x22c>
 1008ed0:	30800317 	ldw	r2,12(r6)
 1008ed4:	30c00217 	ldw	r3,8(r6)
 1008ed8:	01400904 	movi	r5,36
 1008edc:	99bfff04 	addi	r6,r19,-4
 1008ee0:	18800315 	stw	r2,12(r3)
 1008ee4:	10c00215 	stw	r3,8(r2)
 1008ee8:	b9000317 	ldw	r4,12(r23)
 1008eec:	b8800217 	ldw	r2,8(r23)
 1008ef0:	b82b883a 	mov	r21,r23
 1008ef4:	bc000204 	addi	r16,r23,8
 1008ef8:	20800215 	stw	r2,8(r4)
 1008efc:	11000315 	stw	r4,12(r2)
 1008f00:	2980e436 	bltu	r5,r6,1009294 <_realloc_r+0x548>
 1008f04:	008004c4 	movi	r2,19
 1008f08:	9009883a 	mov	r4,r18
 1008f0c:	8011883a 	mov	r8,r16
 1008f10:	11800f2e 	bgeu	r2,r6,1008f50 <_realloc_r+0x204>
 1008f14:	90800017 	ldw	r2,0(r18)
 1008f18:	ba000404 	addi	r8,r23,16
 1008f1c:	91000204 	addi	r4,r18,8
 1008f20:	b8800215 	stw	r2,8(r23)
 1008f24:	90c00117 	ldw	r3,4(r18)
 1008f28:	008006c4 	movi	r2,27
 1008f2c:	b8c00315 	stw	r3,12(r23)
 1008f30:	1180072e 	bgeu	r2,r6,1008f50 <_realloc_r+0x204>
 1008f34:	90c00217 	ldw	r3,8(r18)
 1008f38:	ba000604 	addi	r8,r23,24
 1008f3c:	91000404 	addi	r4,r18,16
 1008f40:	b8c00415 	stw	r3,16(r23)
 1008f44:	90800317 	ldw	r2,12(r18)
 1008f48:	b8800515 	stw	r2,20(r23)
 1008f4c:	3140e726 	beq	r6,r5,10092ec <_realloc_r+0x5a0>
 1008f50:	20800017 	ldw	r2,0(r4)
 1008f54:	dd000017 	ldw	r20,0(sp)
 1008f58:	b80f883a 	mov	r7,r23
 1008f5c:	40800015 	stw	r2,0(r8)
 1008f60:	20c00117 	ldw	r3,4(r4)
 1008f64:	40c00115 	stw	r3,4(r8)
 1008f68:	20800217 	ldw	r2,8(r4)
 1008f6c:	40800215 	stw	r2,8(r8)
 1008f70:	003f9706 	br	1008dd0 <_realloc_r+0x84>
 1008f74:	98a9883a 	add	r20,r19,r2
 1008f78:	a1c01f16 	blt	r20,r7,1008ff8 <_realloc_r+0x2ac>
 1008f7c:	b8c00317 	ldw	r3,12(r23)
 1008f80:	b8800217 	ldw	r2,8(r23)
 1008f84:	99bfff04 	addi	r6,r19,-4
 1008f88:	01400904 	movi	r5,36
 1008f8c:	b82b883a 	mov	r21,r23
 1008f90:	18800215 	stw	r2,8(r3)
 1008f94:	10c00315 	stw	r3,12(r2)
 1008f98:	bc000204 	addi	r16,r23,8
 1008f9c:	2980c336 	bltu	r5,r6,10092ac <_realloc_r+0x560>
 1008fa0:	008004c4 	movi	r2,19
 1008fa4:	9009883a 	mov	r4,r18
 1008fa8:	8011883a 	mov	r8,r16
 1008fac:	11800f2e 	bgeu	r2,r6,1008fec <_realloc_r+0x2a0>
 1008fb0:	90800017 	ldw	r2,0(r18)
 1008fb4:	ba000404 	addi	r8,r23,16
 1008fb8:	91000204 	addi	r4,r18,8
 1008fbc:	b8800215 	stw	r2,8(r23)
 1008fc0:	90c00117 	ldw	r3,4(r18)
 1008fc4:	008006c4 	movi	r2,27
 1008fc8:	b8c00315 	stw	r3,12(r23)
 1008fcc:	1180072e 	bgeu	r2,r6,1008fec <_realloc_r+0x2a0>
 1008fd0:	90c00217 	ldw	r3,8(r18)
 1008fd4:	ba000604 	addi	r8,r23,24
 1008fd8:	91000404 	addi	r4,r18,16
 1008fdc:	b8c00415 	stw	r3,16(r23)
 1008fe0:	90800317 	ldw	r2,12(r18)
 1008fe4:	b8800515 	stw	r2,20(r23)
 1008fe8:	3140c726 	beq	r6,r5,1009308 <_realloc_r+0x5bc>
 1008fec:	20800017 	ldw	r2,0(r4)
 1008ff0:	b80f883a 	mov	r7,r23
 1008ff4:	003fd906 	br	1008f5c <_realloc_r+0x210>
 1008ff8:	880b883a 	mov	r5,r17
 1008ffc:	b009883a 	mov	r4,r22
 1009000:	10070300 	call	1007030 <_malloc_r>
 1009004:	1023883a 	mov	r17,r2
 1009008:	10002526 	beq	r2,zero,10090a0 <_realloc_r+0x354>
 100900c:	80800117 	ldw	r2,4(r16)
 1009010:	00ffff84 	movi	r3,-2
 1009014:	893ffe04 	addi	r4,r17,-8
 1009018:	10c4703a 	and	r2,r2,r3
 100901c:	8085883a 	add	r2,r16,r2
 1009020:	20809526 	beq	r4,r2,1009278 <_realloc_r+0x52c>
 1009024:	99bfff04 	addi	r6,r19,-4
 1009028:	01c00904 	movi	r7,36
 100902c:	39804536 	bltu	r7,r6,1009144 <_realloc_r+0x3f8>
 1009030:	008004c4 	movi	r2,19
 1009034:	9009883a 	mov	r4,r18
 1009038:	880b883a 	mov	r5,r17
 100903c:	11800f2e 	bgeu	r2,r6,100907c <_realloc_r+0x330>
 1009040:	90800017 	ldw	r2,0(r18)
 1009044:	89400204 	addi	r5,r17,8
 1009048:	91000204 	addi	r4,r18,8
 100904c:	88800015 	stw	r2,0(r17)
 1009050:	90c00117 	ldw	r3,4(r18)
 1009054:	008006c4 	movi	r2,27
 1009058:	88c00115 	stw	r3,4(r17)
 100905c:	1180072e 	bgeu	r2,r6,100907c <_realloc_r+0x330>
 1009060:	90c00217 	ldw	r3,8(r18)
 1009064:	89400404 	addi	r5,r17,16
 1009068:	91000404 	addi	r4,r18,16
 100906c:	88c00215 	stw	r3,8(r17)
 1009070:	90800317 	ldw	r2,12(r18)
 1009074:	88800315 	stw	r2,12(r17)
 1009078:	31c09126 	beq	r6,r7,10092c0 <_realloc_r+0x574>
 100907c:	20800017 	ldw	r2,0(r4)
 1009080:	28800015 	stw	r2,0(r5)
 1009084:	20c00117 	ldw	r3,4(r4)
 1009088:	28c00115 	stw	r3,4(r5)
 100908c:	20800217 	ldw	r2,8(r4)
 1009090:	28800215 	stw	r2,8(r5)
 1009094:	900b883a 	mov	r5,r18
 1009098:	b009883a 	mov	r4,r22
 100909c:	100647c0 	call	100647c <_free_r>
 10090a0:	b009883a 	mov	r4,r22
 10090a4:	100ffa80 	call	100ffa8 <__malloc_unlock>
 10090a8:	003f5e06 	br	1008e24 <_realloc_r+0xd8>
 10090ac:	300b883a 	mov	r5,r6
 10090b0:	dfc00b17 	ldw	ra,44(sp)
 10090b4:	df000a17 	ldw	fp,40(sp)
 10090b8:	ddc00917 	ldw	r23,36(sp)
 10090bc:	dd800817 	ldw	r22,32(sp)
 10090c0:	dd400717 	ldw	r21,28(sp)
 10090c4:	dd000617 	ldw	r20,24(sp)
 10090c8:	dcc00517 	ldw	r19,20(sp)
 10090cc:	dc800417 	ldw	r18,16(sp)
 10090d0:	dc400317 	ldw	r17,12(sp)
 10090d4:	dc000217 	ldw	r16,8(sp)
 10090d8:	dec00c04 	addi	sp,sp,48
 10090dc:	10070301 	jmpi	1007030 <_malloc_r>
 10090e0:	38800117 	ldw	r2,4(r7)
 10090e4:	e54b883a 	add	r5,fp,r21
 10090e8:	31000054 	ori	r4,r6,1
 10090ec:	1080004c 	andi	r2,r2,1
 10090f0:	1704b03a 	or	r2,r2,fp
 10090f4:	38800115 	stw	r2,4(r7)
 10090f8:	29000115 	stw	r4,4(r5)
 10090fc:	2987883a 	add	r3,r5,r6
 1009100:	18800117 	ldw	r2,4(r3)
 1009104:	29400204 	addi	r5,r5,8
 1009108:	b009883a 	mov	r4,r22
 100910c:	10800054 	ori	r2,r2,1
 1009110:	18800115 	stw	r2,4(r3)
 1009114:	100647c0 	call	100647c <_free_r>
 1009118:	003f3806 	br	1008dfc <_realloc_r+0xb0>
 100911c:	000d883a 	mov	r6,zero
 1009120:	0009883a 	mov	r4,zero
 1009124:	003f5d06 	br	1008e9c <_realloc_r+0x150>
 1009128:	30c00217 	ldw	r3,8(r6)
 100912c:	30800317 	ldw	r2,12(r6)
 1009130:	800f883a 	mov	r7,r16
 1009134:	84000204 	addi	r16,r16,8
 1009138:	10c00215 	stw	r3,8(r2)
 100913c:	18800315 	stw	r2,12(r3)
 1009140:	003f2306 	br	1008dd0 <_realloc_r+0x84>
 1009144:	8809883a 	mov	r4,r17
 1009148:	900b883a 	mov	r5,r18
 100914c:	10079f40 	call	10079f4 <memmove>
 1009150:	003fd006 	br	1009094 <_realloc_r+0x348>
 1009154:	30800117 	ldw	r2,4(r6)
 1009158:	e0c00404 	addi	r3,fp,16
 100915c:	1108703a 	and	r4,r2,r4
 1009160:	9905883a 	add	r2,r19,r4
 1009164:	10ff4d16 	blt	r2,r3,1008e9c <_realloc_r+0x150>
 1009168:	1705c83a 	sub	r2,r2,fp
 100916c:	870b883a 	add	r5,r16,fp
 1009170:	10800054 	ori	r2,r2,1
 1009174:	28800115 	stw	r2,4(r5)
 1009178:	80c00117 	ldw	r3,4(r16)
 100917c:	00804074 	movhi	r2,257
 1009180:	108deb04 	addi	r2,r2,14252
 1009184:	b009883a 	mov	r4,r22
 1009188:	18c0004c 	andi	r3,r3,1
 100918c:	e0c6b03a 	or	r3,fp,r3
 1009190:	11400215 	stw	r5,8(r2)
 1009194:	80c00115 	stw	r3,4(r16)
 1009198:	100ffa80 	call	100ffa8 <__malloc_unlock>
 100919c:	84400204 	addi	r17,r16,8
 10091a0:	003f2006 	br	1008e24 <_realloc_r+0xd8>
 10091a4:	98a9883a 	add	r20,r19,r2
 10091a8:	2509883a 	add	r4,r4,r20
 10091ac:	e0800404 	addi	r2,fp,16
 10091b0:	d9000115 	stw	r4,4(sp)
 10091b4:	20bf7016 	blt	r4,r2,1008f78 <_realloc_r+0x22c>
 10091b8:	b8c00317 	ldw	r3,12(r23)
 10091bc:	b8800217 	ldw	r2,8(r23)
 10091c0:	99bfff04 	addi	r6,r19,-4
 10091c4:	01400904 	movi	r5,36
 10091c8:	18800215 	stw	r2,8(r3)
 10091cc:	10c00315 	stw	r3,12(r2)
 10091d0:	bc400204 	addi	r17,r23,8
 10091d4:	29804136 	bltu	r5,r6,10092dc <_realloc_r+0x590>
 10091d8:	008004c4 	movi	r2,19
 10091dc:	9009883a 	mov	r4,r18
 10091e0:	880f883a 	mov	r7,r17
 10091e4:	11800f2e 	bgeu	r2,r6,1009224 <_realloc_r+0x4d8>
 10091e8:	90800017 	ldw	r2,0(r18)
 10091ec:	b9c00404 	addi	r7,r23,16
 10091f0:	91000204 	addi	r4,r18,8
 10091f4:	b8800215 	stw	r2,8(r23)
 10091f8:	90c00117 	ldw	r3,4(r18)
 10091fc:	008006c4 	movi	r2,27
 1009200:	b8c00315 	stw	r3,12(r23)
 1009204:	1180072e 	bgeu	r2,r6,1009224 <_realloc_r+0x4d8>
 1009208:	90c00217 	ldw	r3,8(r18)
 100920c:	b9c00604 	addi	r7,r23,24
 1009210:	91000404 	addi	r4,r18,16
 1009214:	b8c00415 	stw	r3,16(r23)
 1009218:	90800317 	ldw	r2,12(r18)
 100921c:	b8800515 	stw	r2,20(r23)
 1009220:	31404026 	beq	r6,r5,1009324 <_realloc_r+0x5d8>
 1009224:	20800017 	ldw	r2,0(r4)
 1009228:	38800015 	stw	r2,0(r7)
 100922c:	20c00117 	ldw	r3,4(r4)
 1009230:	38c00115 	stw	r3,4(r7)
 1009234:	20800217 	ldw	r2,8(r4)
 1009238:	38800215 	stw	r2,8(r7)
 100923c:	d8c00117 	ldw	r3,4(sp)
 1009240:	bf0b883a 	add	r5,r23,fp
 1009244:	b009883a 	mov	r4,r22
 1009248:	1f05c83a 	sub	r2,r3,fp
 100924c:	10800054 	ori	r2,r2,1
 1009250:	28800115 	stw	r2,4(r5)
 1009254:	b8c00117 	ldw	r3,4(r23)
 1009258:	00804074 	movhi	r2,257
 100925c:	108deb04 	addi	r2,r2,14252
 1009260:	11400215 	stw	r5,8(r2)
 1009264:	18c0004c 	andi	r3,r3,1
 1009268:	e0c6b03a 	or	r3,fp,r3
 100926c:	b8c00115 	stw	r3,4(r23)
 1009270:	100ffa80 	call	100ffa8 <__malloc_unlock>
 1009274:	003eeb06 	br	1008e24 <_realloc_r+0xd8>
 1009278:	20800117 	ldw	r2,4(r4)
 100927c:	00ffff04 	movi	r3,-4
 1009280:	800f883a 	mov	r7,r16
 1009284:	10c4703a 	and	r2,r2,r3
 1009288:	98a9883a 	add	r20,r19,r2
 100928c:	84000204 	addi	r16,r16,8
 1009290:	003ecf06 	br	1008dd0 <_realloc_r+0x84>
 1009294:	900b883a 	mov	r5,r18
 1009298:	8009883a 	mov	r4,r16
 100929c:	10079f40 	call	10079f4 <memmove>
 10092a0:	dd000017 	ldw	r20,0(sp)
 10092a4:	b80f883a 	mov	r7,r23
 10092a8:	003ec906 	br	1008dd0 <_realloc_r+0x84>
 10092ac:	900b883a 	mov	r5,r18
 10092b0:	8009883a 	mov	r4,r16
 10092b4:	10079f40 	call	10079f4 <memmove>
 10092b8:	b80f883a 	mov	r7,r23
 10092bc:	003ec406 	br	1008dd0 <_realloc_r+0x84>
 10092c0:	90c00417 	ldw	r3,16(r18)
 10092c4:	89400604 	addi	r5,r17,24
 10092c8:	91000604 	addi	r4,r18,24
 10092cc:	88c00415 	stw	r3,16(r17)
 10092d0:	90800517 	ldw	r2,20(r18)
 10092d4:	88800515 	stw	r2,20(r17)
 10092d8:	003f6806 	br	100907c <_realloc_r+0x330>
 10092dc:	900b883a 	mov	r5,r18
 10092e0:	8809883a 	mov	r4,r17
 10092e4:	10079f40 	call	10079f4 <memmove>
 10092e8:	003fd406 	br	100923c <_realloc_r+0x4f0>
 10092ec:	90c00417 	ldw	r3,16(r18)
 10092f0:	91000604 	addi	r4,r18,24
 10092f4:	ba000804 	addi	r8,r23,32
 10092f8:	b8c00615 	stw	r3,24(r23)
 10092fc:	90800517 	ldw	r2,20(r18)
 1009300:	b8800715 	stw	r2,28(r23)
 1009304:	003f1206 	br	1008f50 <_realloc_r+0x204>
 1009308:	90c00417 	ldw	r3,16(r18)
 100930c:	91000604 	addi	r4,r18,24
 1009310:	ba000804 	addi	r8,r23,32
 1009314:	b8c00615 	stw	r3,24(r23)
 1009318:	90800517 	ldw	r2,20(r18)
 100931c:	b8800715 	stw	r2,28(r23)
 1009320:	003f3206 	br	1008fec <_realloc_r+0x2a0>
 1009324:	90c00417 	ldw	r3,16(r18)
 1009328:	91000604 	addi	r4,r18,24
 100932c:	b9c00804 	addi	r7,r23,32
 1009330:	b8c00615 	stw	r3,24(r23)
 1009334:	90800517 	ldw	r2,20(r18)
 1009338:	b8800715 	stw	r2,28(r23)
 100933c:	003fb906 	br	1009224 <_realloc_r+0x4d8>

01009340 <__srefill_r>:
 1009340:	defffd04 	addi	sp,sp,-12
 1009344:	dc400115 	stw	r17,4(sp)
 1009348:	dc000015 	stw	r16,0(sp)
 100934c:	dfc00215 	stw	ra,8(sp)
 1009350:	2023883a 	mov	r17,r4
 1009354:	2821883a 	mov	r16,r5
 1009358:	20000226 	beq	r4,zero,1009364 <__srefill_r+0x24>
 100935c:	20800e17 	ldw	r2,56(r4)
 1009360:	10004126 	beq	r2,zero,1009468 <__srefill_r+0x128>
 1009364:	80c0030b 	ldhu	r3,12(r16)
 1009368:	80000115 	stw	zero,4(r16)
 100936c:	1880080c 	andi	r2,r3,32
 1009370:	1000361e 	bne	r2,zero,100944c <__srefill_r+0x10c>
 1009374:	1880010c 	andi	r2,r3,4
 1009378:	1000211e 	bne	r2,zero,1009400 <__srefill_r+0xc0>
 100937c:	1880040c 	andi	r2,r3,16
 1009380:	10005026 	beq	r2,zero,10094c4 <__srefill_r+0x184>
 1009384:	1880020c 	andi	r2,r3,8
 1009388:	1000541e 	bne	r2,zero,10094dc <__srefill_r+0x19c>
 100938c:	8080030b 	ldhu	r2,12(r16)
 1009390:	10800114 	ori	r2,r2,4
 1009394:	8080030d 	sth	r2,12(r16)
 1009398:	80800417 	ldw	r2,16(r16)
 100939c:	10004526 	beq	r2,zero,10094b4 <__srefill_r+0x174>
 10093a0:	8080030b 	ldhu	r2,12(r16)
 10093a4:	108000cc 	andi	r2,r2,3
 10093a8:	1000361e 	bne	r2,zero,1009484 <__srefill_r+0x144>
 10093ac:	81800417 	ldw	r6,16(r16)
 10093b0:	80c00817 	ldw	r3,32(r16)
 10093b4:	81400717 	ldw	r5,28(r16)
 10093b8:	81c00517 	ldw	r7,20(r16)
 10093bc:	8809883a 	mov	r4,r17
 10093c0:	81800015 	stw	r6,0(r16)
 10093c4:	183ee83a 	callr	r3
 10093c8:	80c0030b 	ldhu	r3,12(r16)
 10093cc:	1009883a 	mov	r4,r2
 10093d0:	80800115 	stw	r2,4(r16)
 10093d4:	00b7ffc4 	movi	r2,-8193
 10093d8:	1884703a 	and	r2,r3,r2
 10093dc:	8080030d 	sth	r2,12(r16)
 10093e0:	0100230e 	bge	zero,r4,1009470 <__srefill_r+0x130>
 10093e4:	0009883a 	mov	r4,zero
 10093e8:	2005883a 	mov	r2,r4
 10093ec:	dfc00217 	ldw	ra,8(sp)
 10093f0:	dc400117 	ldw	r17,4(sp)
 10093f4:	dc000017 	ldw	r16,0(sp)
 10093f8:	dec00304 	addi	sp,sp,12
 10093fc:	f800283a 	ret
 1009400:	81400c17 	ldw	r5,48(r16)
 1009404:	283fe426 	beq	r5,zero,1009398 <__srefill_r+0x58>
 1009408:	80801004 	addi	r2,r16,64
 100940c:	28800226 	beq	r5,r2,1009418 <__srefill_r+0xd8>
 1009410:	8809883a 	mov	r4,r17
 1009414:	100647c0 	call	100647c <_free_r>
 1009418:	80800f17 	ldw	r2,60(r16)
 100941c:	80000c15 	stw	zero,48(r16)
 1009420:	80800115 	stw	r2,4(r16)
 1009424:	103fdc26 	beq	r2,zero,1009398 <__srefill_r+0x58>
 1009428:	80800e17 	ldw	r2,56(r16)
 100942c:	0009883a 	mov	r4,zero
 1009430:	80800015 	stw	r2,0(r16)
 1009434:	2005883a 	mov	r2,r4
 1009438:	dfc00217 	ldw	ra,8(sp)
 100943c:	dc400117 	ldw	r17,4(sp)
 1009440:	dc000017 	ldw	r16,0(sp)
 1009444:	dec00304 	addi	sp,sp,12
 1009448:	f800283a 	ret
 100944c:	013fffc4 	movi	r4,-1
 1009450:	2005883a 	mov	r2,r4
 1009454:	dfc00217 	ldw	ra,8(sp)
 1009458:	dc400117 	ldw	r17,4(sp)
 100945c:	dc000017 	ldw	r16,0(sp)
 1009460:	dec00304 	addi	sp,sp,12
 1009464:	f800283a 	ret
 1009468:	1005ebc0 	call	1005ebc <__sinit>
 100946c:	003fbd06 	br	1009364 <__srefill_r+0x24>
 1009470:	20000b1e 	bne	r4,zero,10094a0 <__srefill_r+0x160>
 1009474:	10800814 	ori	r2,r2,32
 1009478:	013fffc4 	movi	r4,-1
 100947c:	8080030d 	sth	r2,12(r16)
 1009480:	003fd906 	br	10093e8 <__srefill_r+0xa8>
 1009484:	00804074 	movhi	r2,257
 1009488:	10939104 	addi	r2,r2,20036
 100948c:	11000017 	ldw	r4,0(r2)
 1009490:	01404074 	movhi	r5,257
 1009494:	29654104 	addi	r5,r5,-27388
 1009498:	1006cf40 	call	1006cf4 <_fwalk>
 100949c:	003fc306 	br	10093ac <__srefill_r+0x6c>
 10094a0:	10801014 	ori	r2,r2,64
 10094a4:	013fffc4 	movi	r4,-1
 10094a8:	8080030d 	sth	r2,12(r16)
 10094ac:	80000115 	stw	zero,4(r16)
 10094b0:	003fcd06 	br	10093e8 <__srefill_r+0xa8>
 10094b4:	8809883a 	mov	r4,r17
 10094b8:	800b883a 	mov	r5,r16
 10094bc:	1006e9c0 	call	1006e9c <__smakebuf_r>
 10094c0:	003fb706 	br	10093a0 <__srefill_r+0x60>
 10094c4:	18c01014 	ori	r3,r3,64
 10094c8:	00800244 	movi	r2,9
 10094cc:	013fffc4 	movi	r4,-1
 10094d0:	88800015 	stw	r2,0(r17)
 10094d4:	80c0030d 	sth	r3,12(r16)
 10094d8:	003fc306 	br	10093e8 <__srefill_r+0xa8>
 10094dc:	8809883a 	mov	r4,r17
 10094e0:	800b883a 	mov	r5,r16
 10094e4:	1005c240 	call	1005c24 <_fflush_r>
 10094e8:	103fd81e 	bne	r2,zero,100944c <__srefill_r+0x10c>
 10094ec:	8080030b 	ldhu	r2,12(r16)
 10094f0:	80000215 	stw	zero,8(r16)
 10094f4:	80000615 	stw	zero,24(r16)
 10094f8:	10bffdcc 	andi	r2,r2,65527
 10094fc:	8080030d 	sth	r2,12(r16)
 1009500:	003fa206 	br	100938c <__srefill_r+0x4c>

01009504 <lflush>:
 1009504:	20c0030b 	ldhu	r3,12(r4)
 1009508:	01400244 	movi	r5,9
 100950c:	0005883a 	mov	r2,zero
 1009510:	18c0024c 	andi	r3,r3,9
 1009514:	19400126 	beq	r3,r5,100951c <lflush+0x18>
 1009518:	f800283a 	ret
 100951c:	1005e201 	jmpi	1005e20 <fflush>

01009520 <__isinfd>:
 1009520:	200d883a 	mov	r6,r4
 1009524:	0109c83a 	sub	r4,zero,r4
 1009528:	2188b03a 	or	r4,r4,r6
 100952c:	2008d7fa 	srli	r4,r4,31
 1009530:	00a00034 	movhi	r2,32768
 1009534:	10bfffc4 	addi	r2,r2,-1
 1009538:	1144703a 	and	r2,r2,r5
 100953c:	2088b03a 	or	r4,r4,r2
 1009540:	009ffc34 	movhi	r2,32752
 1009544:	1105c83a 	sub	r2,r2,r4
 1009548:	0087c83a 	sub	r3,zero,r2
 100954c:	10c4b03a 	or	r2,r2,r3
 1009550:	1004d7fa 	srli	r2,r2,31
 1009554:	00c00044 	movi	r3,1
 1009558:	1885c83a 	sub	r2,r3,r2
 100955c:	f800283a 	ret

01009560 <__isnand>:
 1009560:	200d883a 	mov	r6,r4
 1009564:	0109c83a 	sub	r4,zero,r4
 1009568:	2188b03a 	or	r4,r4,r6
 100956c:	2008d7fa 	srli	r4,r4,31
 1009570:	00a00034 	movhi	r2,32768
 1009574:	10bfffc4 	addi	r2,r2,-1
 1009578:	1144703a 	and	r2,r2,r5
 100957c:	2088b03a 	or	r4,r4,r2
 1009580:	009ffc34 	movhi	r2,32752
 1009584:	1105c83a 	sub	r2,r2,r4
 1009588:	1004d7fa 	srli	r2,r2,31
 100958c:	f800283a 	ret

01009590 <_sbrk_r>:
 1009590:	defffd04 	addi	sp,sp,-12
 1009594:	dc000015 	stw	r16,0(sp)
 1009598:	04004074 	movhi	r16,257
 100959c:	841a5e04 	addi	r16,r16,27000
 10095a0:	dc400115 	stw	r17,4(sp)
 10095a4:	80000015 	stw	zero,0(r16)
 10095a8:	2023883a 	mov	r17,r4
 10095ac:	2809883a 	mov	r4,r5
 10095b0:	dfc00215 	stw	ra,8(sp)
 10095b4:	10101a80 	call	10101a8 <sbrk>
 10095b8:	1007883a 	mov	r3,r2
 10095bc:	00bfffc4 	movi	r2,-1
 10095c0:	18800626 	beq	r3,r2,10095dc <_sbrk_r+0x4c>
 10095c4:	1805883a 	mov	r2,r3
 10095c8:	dfc00217 	ldw	ra,8(sp)
 10095cc:	dc400117 	ldw	r17,4(sp)
 10095d0:	dc000017 	ldw	r16,0(sp)
 10095d4:	dec00304 	addi	sp,sp,12
 10095d8:	f800283a 	ret
 10095dc:	80800017 	ldw	r2,0(r16)
 10095e0:	103ff826 	beq	r2,zero,10095c4 <_sbrk_r+0x34>
 10095e4:	88800015 	stw	r2,0(r17)
 10095e8:	1805883a 	mov	r2,r3
 10095ec:	dfc00217 	ldw	ra,8(sp)
 10095f0:	dc400117 	ldw	r17,4(sp)
 10095f4:	dc000017 	ldw	r16,0(sp)
 10095f8:	dec00304 	addi	sp,sp,12
 10095fc:	f800283a 	ret

01009600 <__sccl>:
 1009600:	28c00003 	ldbu	r3,0(r5)
 1009604:	00801784 	movi	r2,94
 1009608:	2a000044 	addi	r8,r5,1
 100960c:	18802526 	beq	r3,r2,10096a4 <__sccl+0xa4>
 1009610:	180f883a 	mov	r7,r3
 1009614:	0013883a 	mov	r9,zero
 1009618:	000d883a 	mov	r6,zero
 100961c:	0007883a 	mov	r3,zero
 1009620:	01404004 	movi	r5,256
 1009624:	1905883a 	add	r2,r3,r4
 1009628:	18c00044 	addi	r3,r3,1
 100962c:	11800005 	stb	r6,0(r2)
 1009630:	197ffc1e 	bne	r3,r5,1009624 <__sccl+0x24>
 1009634:	38000c26 	beq	r7,zero,1009668 <__sccl+0x68>
 1009638:	00800044 	movi	r2,1
 100963c:	124dc83a 	sub	r6,r2,r9
 1009640:	3905883a 	add	r2,r7,r4
 1009644:	11800005 	stb	r6,0(r2)
 1009648:	41400044 	addi	r5,r8,1
 100964c:	02400b44 	movi	r9,45
 1009650:	02801744 	movi	r10,93
 1009654:	28bfffc3 	ldbu	r2,-1(r5)
 1009658:	2811883a 	mov	r8,r5
 100965c:	12400726 	beq	r2,r9,100967c <__sccl+0x7c>
 1009660:	12800226 	beq	r2,r10,100966c <__sccl+0x6c>
 1009664:	1000031e 	bne	r2,zero,1009674 <__sccl+0x74>
 1009668:	423fffc4 	addi	r8,r8,-1
 100966c:	4005883a 	mov	r2,r8
 1009670:	f800283a 	ret
 1009674:	100f883a 	mov	r7,r2
 1009678:	003ff106 	br	1009640 <__sccl+0x40>
 100967c:	28c00003 	ldbu	r3,0(r5)
 1009680:	1a800d26 	beq	r3,r10,10096b8 <__sccl+0xb8>
 1009684:	19c00c16 	blt	r3,r7,10096b8 <__sccl+0xb8>
 1009688:	21c5883a 	add	r2,r4,r7
 100968c:	39c00044 	addi	r7,r7,1
 1009690:	11800045 	stb	r6,1(r2)
 1009694:	10800044 	addi	r2,r2,1
 1009698:	38fffc16 	blt	r7,r3,100968c <__sccl+0x8c>
 100969c:	29400084 	addi	r5,r5,2
 10096a0:	003fec06 	br	1009654 <__sccl+0x54>
 10096a4:	29c00043 	ldbu	r7,1(r5)
 10096a8:	02400044 	movi	r9,1
 10096ac:	2a000084 	addi	r8,r5,2
 10096b0:	480d883a 	mov	r6,r9
 10096b4:	003fd906 	br	100961c <__sccl+0x1c>
 10096b8:	01c00b44 	movi	r7,45
 10096bc:	003fe006 	br	1009640 <__sccl+0x40>

010096c0 <nanf>:
 10096c0:	009ff034 	movhi	r2,32704
 10096c4:	f800283a 	ret

010096c8 <sprintf>:
 10096c8:	deffe504 	addi	sp,sp,-108
 10096cc:	2013883a 	mov	r9,r4
 10096d0:	dfc01815 	stw	ra,96(sp)
 10096d4:	d9801915 	stw	r6,100(sp)
 10096d8:	d9c01a15 	stw	r7,104(sp)
 10096dc:	d8801904 	addi	r2,sp,100
 10096e0:	d8800015 	stw	r2,0(sp)
 10096e4:	00804074 	movhi	r2,257
 10096e8:	10939004 	addi	r2,r2,20032
 10096ec:	11000017 	ldw	r4,0(r2)
 10096f0:	d9c00017 	ldw	r7,0(sp)
 10096f4:	00808204 	movi	r2,520
 10096f8:	00e00034 	movhi	r3,32768
 10096fc:	18ffffc4 	addi	r3,r3,-1
 1009700:	280d883a 	mov	r6,r5
 1009704:	d880040d 	sth	r2,16(sp)
 1009708:	d9400104 	addi	r5,sp,4
 100970c:	00bfffc4 	movi	r2,-1
 1009710:	d8c00615 	stw	r3,24(sp)
 1009714:	d8c00315 	stw	r3,12(sp)
 1009718:	da400515 	stw	r9,20(sp)
 100971c:	d880048d 	sth	r2,18(sp)
 1009720:	da400115 	stw	r9,4(sp)
 1009724:	1000ccc0 	call	1000ccc <___vfprintf_internal_r>
 1009728:	d8c00117 	ldw	r3,4(sp)
 100972c:	18000005 	stb	zero,0(r3)
 1009730:	dfc01817 	ldw	ra,96(sp)
 1009734:	dec01b04 	addi	sp,sp,108
 1009738:	f800283a 	ret

0100973c <_sprintf_r>:
 100973c:	deffe604 	addi	sp,sp,-104
 1009740:	2813883a 	mov	r9,r5
 1009744:	dfc01815 	stw	ra,96(sp)
 1009748:	d9c01915 	stw	r7,100(sp)
 100974c:	d8801904 	addi	r2,sp,100
 1009750:	d8800015 	stw	r2,0(sp)
 1009754:	100f883a 	mov	r7,r2
 1009758:	00808204 	movi	r2,520
 100975c:	00e00034 	movhi	r3,32768
 1009760:	18ffffc4 	addi	r3,r3,-1
 1009764:	d880040d 	sth	r2,16(sp)
 1009768:	d9400104 	addi	r5,sp,4
 100976c:	00bfffc4 	movi	r2,-1
 1009770:	d8c00615 	stw	r3,24(sp)
 1009774:	d8c00315 	stw	r3,12(sp)
 1009778:	da400515 	stw	r9,20(sp)
 100977c:	d880048d 	sth	r2,18(sp)
 1009780:	da400115 	stw	r9,4(sp)
 1009784:	1000ccc0 	call	1000ccc <___vfprintf_internal_r>
 1009788:	d8c00117 	ldw	r3,4(sp)
 100978c:	18000005 	stb	zero,0(r3)
 1009790:	dfc01817 	ldw	ra,96(sp)
 1009794:	dec01a04 	addi	sp,sp,104
 1009798:	f800283a 	ret

0100979c <__sclose>:
 100979c:	2940038f 	ldh	r5,14(r5)
 10097a0:	100bfe01 	jmpi	100bfe0 <_close_r>

010097a4 <__sseek>:
 10097a4:	defffe04 	addi	sp,sp,-8
 10097a8:	dc000015 	stw	r16,0(sp)
 10097ac:	2821883a 	mov	r16,r5
 10097b0:	2940038f 	ldh	r5,14(r5)
 10097b4:	dfc00115 	stw	ra,4(sp)
 10097b8:	100cde00 	call	100cde0 <_lseek_r>
 10097bc:	1007883a 	mov	r3,r2
 10097c0:	00bfffc4 	movi	r2,-1
 10097c4:	18800926 	beq	r3,r2,10097ec <__sseek+0x48>
 10097c8:	8080030b 	ldhu	r2,12(r16)
 10097cc:	80c01415 	stw	r3,80(r16)
 10097d0:	10840014 	ori	r2,r2,4096
 10097d4:	8080030d 	sth	r2,12(r16)
 10097d8:	1805883a 	mov	r2,r3
 10097dc:	dfc00117 	ldw	ra,4(sp)
 10097e0:	dc000017 	ldw	r16,0(sp)
 10097e4:	dec00204 	addi	sp,sp,8
 10097e8:	f800283a 	ret
 10097ec:	8080030b 	ldhu	r2,12(r16)
 10097f0:	10bbffcc 	andi	r2,r2,61439
 10097f4:	8080030d 	sth	r2,12(r16)
 10097f8:	1805883a 	mov	r2,r3
 10097fc:	dfc00117 	ldw	ra,4(sp)
 1009800:	dc000017 	ldw	r16,0(sp)
 1009804:	dec00204 	addi	sp,sp,8
 1009808:	f800283a 	ret

0100980c <__swrite>:
 100980c:	2880030b 	ldhu	r2,12(r5)
 1009810:	defffb04 	addi	sp,sp,-20
 1009814:	dcc00315 	stw	r19,12(sp)
 1009818:	1080400c 	andi	r2,r2,256
 100981c:	dc800215 	stw	r18,8(sp)
 1009820:	dc400115 	stw	r17,4(sp)
 1009824:	dc000015 	stw	r16,0(sp)
 1009828:	3027883a 	mov	r19,r6
 100982c:	3825883a 	mov	r18,r7
 1009830:	dfc00415 	stw	ra,16(sp)
 1009834:	2821883a 	mov	r16,r5
 1009838:	000d883a 	mov	r6,zero
 100983c:	01c00084 	movi	r7,2
 1009840:	2023883a 	mov	r17,r4
 1009844:	10000226 	beq	r2,zero,1009850 <__swrite+0x44>
 1009848:	2940038f 	ldh	r5,14(r5)
 100984c:	100cde00 	call	100cde0 <_lseek_r>
 1009850:	8080030b 	ldhu	r2,12(r16)
 1009854:	8140038f 	ldh	r5,14(r16)
 1009858:	8809883a 	mov	r4,r17
 100985c:	10bbffcc 	andi	r2,r2,61439
 1009860:	980d883a 	mov	r6,r19
 1009864:	900f883a 	mov	r7,r18
 1009868:	8080030d 	sth	r2,12(r16)
 100986c:	dfc00417 	ldw	ra,16(sp)
 1009870:	dcc00317 	ldw	r19,12(sp)
 1009874:	dc800217 	ldw	r18,8(sp)
 1009878:	dc400117 	ldw	r17,4(sp)
 100987c:	dc000017 	ldw	r16,0(sp)
 1009880:	dec00504 	addi	sp,sp,20
 1009884:	100beb41 	jmpi	100beb4 <_write_r>

01009888 <__sread>:
 1009888:	defffe04 	addi	sp,sp,-8
 100988c:	dc000015 	stw	r16,0(sp)
 1009890:	2821883a 	mov	r16,r5
 1009894:	2940038f 	ldh	r5,14(r5)
 1009898:	dfc00115 	stw	ra,4(sp)
 100989c:	100ce580 	call	100ce58 <_read_r>
 10098a0:	1007883a 	mov	r3,r2
 10098a4:	10000816 	blt	r2,zero,10098c8 <__sread+0x40>
 10098a8:	80801417 	ldw	r2,80(r16)
 10098ac:	10c5883a 	add	r2,r2,r3
 10098b0:	80801415 	stw	r2,80(r16)
 10098b4:	1805883a 	mov	r2,r3
 10098b8:	dfc00117 	ldw	ra,4(sp)
 10098bc:	dc000017 	ldw	r16,0(sp)
 10098c0:	dec00204 	addi	sp,sp,8
 10098c4:	f800283a 	ret
 10098c8:	8080030b 	ldhu	r2,12(r16)
 10098cc:	10bbffcc 	andi	r2,r2,61439
 10098d0:	8080030d 	sth	r2,12(r16)
 10098d4:	1805883a 	mov	r2,r3
 10098d8:	dfc00117 	ldw	ra,4(sp)
 10098dc:	dc000017 	ldw	r16,0(sp)
 10098e0:	dec00204 	addi	sp,sp,8
 10098e4:	f800283a 	ret

010098e8 <strcmp>:
 10098e8:	2144b03a 	or	r2,r4,r5
 10098ec:	108000cc 	andi	r2,r2,3
 10098f0:	10001d1e 	bne	r2,zero,1009968 <strcmp+0x80>
 10098f4:	200f883a 	mov	r7,r4
 10098f8:	28800017 	ldw	r2,0(r5)
 10098fc:	21000017 	ldw	r4,0(r4)
 1009900:	280d883a 	mov	r6,r5
 1009904:	2080161e 	bne	r4,r2,1009960 <strcmp+0x78>
 1009908:	023fbff4 	movhi	r8,65279
 100990c:	423fbfc4 	addi	r8,r8,-257
 1009910:	2207883a 	add	r3,r4,r8
 1009914:	01602074 	movhi	r5,32897
 1009918:	29602004 	addi	r5,r5,-32640
 100991c:	1946703a 	and	r3,r3,r5
 1009920:	0104303a 	nor	r2,zero,r4
 1009924:	10c4703a 	and	r2,r2,r3
 1009928:	10001c1e 	bne	r2,zero,100999c <strcmp+0xb4>
 100992c:	4013883a 	mov	r9,r8
 1009930:	2811883a 	mov	r8,r5
 1009934:	00000106 	br	100993c <strcmp+0x54>
 1009938:	1800181e 	bne	r3,zero,100999c <strcmp+0xb4>
 100993c:	39c00104 	addi	r7,r7,4
 1009940:	39000017 	ldw	r4,0(r7)
 1009944:	31800104 	addi	r6,r6,4
 1009948:	31400017 	ldw	r5,0(r6)
 100994c:	2245883a 	add	r2,r4,r9
 1009950:	1204703a 	and	r2,r2,r8
 1009954:	0106303a 	nor	r3,zero,r4
 1009958:	1886703a 	and	r3,r3,r2
 100995c:	217ff626 	beq	r4,r5,1009938 <strcmp+0x50>
 1009960:	3809883a 	mov	r4,r7
 1009964:	300b883a 	mov	r5,r6
 1009968:	20c00007 	ldb	r3,0(r4)
 100996c:	1800051e 	bne	r3,zero,1009984 <strcmp+0x9c>
 1009970:	00000606 	br	100998c <strcmp+0xa4>
 1009974:	21000044 	addi	r4,r4,1
 1009978:	20c00007 	ldb	r3,0(r4)
 100997c:	29400044 	addi	r5,r5,1
 1009980:	18000226 	beq	r3,zero,100998c <strcmp+0xa4>
 1009984:	28800007 	ldb	r2,0(r5)
 1009988:	18bffa26 	beq	r3,r2,1009974 <strcmp+0x8c>
 100998c:	20c00003 	ldbu	r3,0(r4)
 1009990:	28800003 	ldbu	r2,0(r5)
 1009994:	1885c83a 	sub	r2,r3,r2
 1009998:	f800283a 	ret
 100999c:	0005883a 	mov	r2,zero
 10099a0:	f800283a 	ret

010099a4 <match>:
 10099a4:	21800017 	ldw	r6,0(r4)
 10099a8:	01c01004 	movi	r7,64
 10099ac:	02001684 	movi	r8,90
 10099b0:	28800007 	ldb	r2,0(r5)
 10099b4:	29400044 	addi	r5,r5,1
 10099b8:	10000826 	beq	r2,zero,10099dc <match+0x38>
 10099bc:	31800044 	addi	r6,r6,1
 10099c0:	30c00007 	ldb	r3,0(r6)
 10099c4:	38c0020e 	bge	r7,r3,10099d0 <match+0x2c>
 10099c8:	40c00116 	blt	r8,r3,10099d0 <match+0x2c>
 10099cc:	18c00804 	addi	r3,r3,32
 10099d0:	18bff726 	beq	r3,r2,10099b0 <match+0xc>
 10099d4:	0005883a 	mov	r2,zero
 10099d8:	f800283a 	ret
 10099dc:	30800044 	addi	r2,r6,1
 10099e0:	20800015 	stw	r2,0(r4)
 10099e4:	00800044 	movi	r2,1
 10099e8:	f800283a 	ret

010099ec <_strtod_r>:
 10099ec:	deffde04 	addi	sp,sp,-136
 10099f0:	df002015 	stw	fp,128(sp)
 10099f4:	dd401d15 	stw	r21,116(sp)
 10099f8:	dc401915 	stw	r17,100(sp)
 10099fc:	dfc02115 	stw	ra,132(sp)
 1009a00:	ddc01f15 	stw	r23,124(sp)
 1009a04:	dd801e15 	stw	r22,120(sp)
 1009a08:	dd001c15 	stw	r20,112(sp)
 1009a0c:	dcc01b15 	stw	r19,108(sp)
 1009a10:	dc801a15 	stw	r18,104(sp)
 1009a14:	dc001815 	stw	r16,96(sp)
 1009a18:	2823883a 	mov	r17,r5
 1009a1c:	202b883a 	mov	r21,r4
 1009a20:	d9801515 	stw	r6,84(sp)
 1009a24:	d8000915 	stw	zero,36(sp)
 1009a28:	d8000a15 	stw	zero,40(sp)
 1009a2c:	d9400415 	stw	r5,16(sp)
 1009a30:	df000904 	addi	fp,sp,36
 1009a34:	da000417 	ldw	r8,16(sp)
 1009a38:	00800b44 	movi	r2,45
 1009a3c:	40c00003 	ldbu	r3,0(r8)
 1009a40:	10c03536 	bltu	r2,r3,1009b18 <_strtod_r+0x12c>
 1009a44:	18c5883a 	add	r2,r3,r3
 1009a48:	1085883a 	add	r2,r2,r2
 1009a4c:	00c04074 	movhi	r3,257
 1009a50:	18e69804 	addi	r3,r3,-26016
 1009a54:	10c5883a 	add	r2,r2,r3
 1009a58:	11000017 	ldw	r4,0(r2)
 1009a5c:	2000683a 	jmp	r4
 1009a60:	01009c54 	movui	r4,625
 1009a64:	01009b18 	cmpnei	r4,zero,620
 1009a68:	01009b18 	cmpnei	r4,zero,620
 1009a6c:	01009b18 	cmpnei	r4,zero,620
 1009a70:	01009b18 	cmpnei	r4,zero,620
 1009a74:	01009b18 	cmpnei	r4,zero,620
 1009a78:	01009b18 	cmpnei	r4,zero,620
 1009a7c:	01009b18 	cmpnei	r4,zero,620
 1009a80:	01009b18 	cmpnei	r4,zero,620
 1009a84:	01009f6c 	andhi	r4,zero,637
 1009a88:	01009f6c 	andhi	r4,zero,637
 1009a8c:	01009f6c 	andhi	r4,zero,637
 1009a90:	01009f6c 	andhi	r4,zero,637
 1009a94:	01009f6c 	andhi	r4,zero,637
 1009a98:	01009b18 	cmpnei	r4,zero,620
 1009a9c:	01009b18 	cmpnei	r4,zero,620
 1009aa0:	01009b18 	cmpnei	r4,zero,620
 1009aa4:	01009b18 	cmpnei	r4,zero,620
 1009aa8:	01009b18 	cmpnei	r4,zero,620
 1009aac:	01009b18 	cmpnei	r4,zero,620
 1009ab0:	01009b18 	cmpnei	r4,zero,620
 1009ab4:	01009b18 	cmpnei	r4,zero,620
 1009ab8:	01009b18 	cmpnei	r4,zero,620
 1009abc:	01009b18 	cmpnei	r4,zero,620
 1009ac0:	01009b18 	cmpnei	r4,zero,620
 1009ac4:	01009b18 	cmpnei	r4,zero,620
 1009ac8:	01009b18 	cmpnei	r4,zero,620
 1009acc:	01009b18 	cmpnei	r4,zero,620
 1009ad0:	01009b18 	cmpnei	r4,zero,620
 1009ad4:	01009b18 	cmpnei	r4,zero,620
 1009ad8:	01009b18 	cmpnei	r4,zero,620
 1009adc:	01009b18 	cmpnei	r4,zero,620
 1009ae0:	01009f6c 	andhi	r4,zero,637
 1009ae4:	01009b18 	cmpnei	r4,zero,620
 1009ae8:	01009b18 	cmpnei	r4,zero,620
 1009aec:	01009b18 	cmpnei	r4,zero,620
 1009af0:	01009b18 	cmpnei	r4,zero,620
 1009af4:	01009b18 	cmpnei	r4,zero,620
 1009af8:	01009b18 	cmpnei	r4,zero,620
 1009afc:	01009b18 	cmpnei	r4,zero,620
 1009b00:	01009b18 	cmpnei	r4,zero,620
 1009b04:	01009b18 	cmpnei	r4,zero,620
 1009b08:	01009b18 	cmpnei	r4,zero,620
 1009b0c:	01009f4c 	andi	r4,zero,637
 1009b10:	01009b18 	cmpnei	r4,zero,620
 1009b14:	01009f78 	rdprs	r4,zero,637
 1009b18:	d8001115 	stw	zero,68(sp)
 1009b1c:	40c00007 	ldb	r3,0(r8)
 1009b20:	00800c04 	movi	r2,48
 1009b24:	1880d026 	beq	r3,r2,1009e68 <_strtod_r+0x47c>
 1009b28:	001f883a 	mov	r15,zero
 1009b2c:	41000007 	ldb	r4,0(r8)
 1009b30:	00c00bc4 	movi	r3,47
 1009b34:	402d883a 	mov	r22,r8
 1009b38:	1903470e 	bge	r3,r4,100a858 <_strtod_r+0xe6c>
 1009b3c:	00800e44 	movi	r2,57
 1009b40:	11034516 	blt	r2,r4,100a858 <_strtod_r+0xe6c>
 1009b44:	180f883a 	mov	r7,r3
 1009b48:	1013883a 	mov	r9,r2
 1009b4c:	4007883a 	mov	r3,r8
 1009b50:	000d883a 	mov	r6,zero
 1009b54:	0029883a 	mov	r20,zero
 1009b58:	0021883a 	mov	r16,zero
 1009b5c:	01400204 	movi	r5,8
 1009b60:	028003c4 	movi	r10,15
 1009b64:	29803116 	blt	r5,r6,1009c2c <_strtod_r+0x240>
 1009b68:	a08002a4 	muli	r2,r20,10
 1009b6c:	1105883a 	add	r2,r2,r4
 1009b70:	153ff404 	addi	r20,r2,-48
 1009b74:	1a000044 	addi	r8,r3,1
 1009b78:	da000415 	stw	r8,16(sp)
 1009b7c:	41000007 	ldb	r4,0(r8)
 1009b80:	31800044 	addi	r6,r6,1
 1009b84:	4007883a 	mov	r3,r8
 1009b88:	3900010e 	bge	r7,r4,1009b90 <_strtod_r+0x1a4>
 1009b8c:	493ff50e 	bge	r9,r4,1009b64 <_strtod_r+0x178>
 1009b90:	00800b84 	movi	r2,46
 1009b94:	2080c126 	beq	r4,r2,1009e9c <_strtod_r+0x4b0>
 1009b98:	3027883a 	mov	r19,r6
 1009b9c:	0025883a 	mov	r18,zero
 1009ba0:	0015883a 	mov	r10,zero
 1009ba4:	000f883a 	mov	r7,zero
 1009ba8:	00801944 	movi	r2,101
 1009bac:	20802426 	beq	r4,r2,1009c40 <_strtod_r+0x254>
 1009bb0:	00801144 	movi	r2,69
 1009bb4:	20802226 	beq	r4,r2,1009c40 <_strtod_r+0x254>
 1009bb8:	9816c03a 	cmpne	r11,r19,zero
 1009bbc:	000b883a 	mov	r5,zero
 1009bc0:	5800631e 	bne	r11,zero,1009d50 <_strtod_r+0x364>
 1009bc4:	3800c126 	beq	r7,zero,1009ecc <_strtod_r+0x4e0>
 1009bc8:	d8c01517 	ldw	r3,84(sp)
 1009bcc:	18000226 	beq	r3,zero,1009bd8 <_strtod_r+0x1ec>
 1009bd0:	d8800417 	ldw	r2,16(sp)
 1009bd4:	18800015 	stw	r2,0(r3)
 1009bd8:	d9001117 	ldw	r4,68(sp)
 1009bdc:	2005003a 	cmpeq	r2,r4,zero
 1009be0:	10001f1e 	bne	r2,zero,1009c60 <_strtod_r+0x274>
 1009be4:	e0800017 	ldw	r2,0(fp)
 1009be8:	e0c00117 	ldw	r3,4(fp)
 1009bec:	1009883a 	mov	r4,r2
 1009bf0:	1960003c 	xorhi	r5,r3,32768
 1009bf4:	2005883a 	mov	r2,r4
 1009bf8:	2807883a 	mov	r3,r5
 1009bfc:	dfc02117 	ldw	ra,132(sp)
 1009c00:	df002017 	ldw	fp,128(sp)
 1009c04:	ddc01f17 	ldw	r23,124(sp)
 1009c08:	dd801e17 	ldw	r22,120(sp)
 1009c0c:	dd401d17 	ldw	r21,116(sp)
 1009c10:	dd001c17 	ldw	r20,112(sp)
 1009c14:	dcc01b17 	ldw	r19,108(sp)
 1009c18:	dc801a17 	ldw	r18,104(sp)
 1009c1c:	dc401917 	ldw	r17,100(sp)
 1009c20:	dc001817 	ldw	r16,96(sp)
 1009c24:	dec02204 	addi	sp,sp,136
 1009c28:	f800283a 	ret
 1009c2c:	51bfd116 	blt	r10,r6,1009b74 <_strtod_r+0x188>
 1009c30:	808002a4 	muli	r2,r16,10
 1009c34:	1105883a 	add	r2,r2,r4
 1009c38:	143ff404 	addi	r16,r2,-48
 1009c3c:	003fcd06 	br	1009b74 <_strtod_r+0x188>
 1009c40:	9816c03a 	cmpne	r11,r19,zero
 1009c44:	5800091e 	bne	r11,zero,1009c6c <_strtod_r+0x280>
 1009c48:	3800081e 	bne	r7,zero,1009c6c <_strtod_r+0x280>
 1009c4c:	7805003a 	cmpeq	r2,r15,zero
 1009c50:	10000626 	beq	r2,zero,1009c6c <_strtod_r+0x280>
 1009c54:	d8001115 	stw	zero,68(sp)
 1009c58:	dc400415 	stw	r17,16(sp)
 1009c5c:	003fda06 	br	1009bc8 <_strtod_r+0x1dc>
 1009c60:	e1000017 	ldw	r4,0(fp)
 1009c64:	e1400117 	ldw	r5,4(fp)
 1009c68:	003fe206 	br	1009bf4 <_strtod_r+0x208>
 1009c6c:	dc400417 	ldw	r17,16(sp)
 1009c70:	00800ac4 	movi	r2,43
 1009c74:	8a000044 	addi	r8,r17,1
 1009c78:	da000415 	stw	r8,16(sp)
 1009c7c:	88c00047 	ldb	r3,1(r17)
 1009c80:	4009883a 	mov	r4,r8
 1009c84:	1880bf26 	beq	r3,r2,1009f84 <_strtod_r+0x598>
 1009c88:	00800b44 	movi	r2,45
 1009c8c:	18834526 	beq	r3,r2,100a9a4 <_strtod_r+0xfb8>
 1009c90:	1809883a 	mov	r4,r3
 1009c94:	20fff404 	addi	r3,r4,-48
 1009c98:	00800244 	movi	r2,9
 1009c9c:	001d883a 	mov	r14,zero
 1009ca0:	10c0bf36 	bltu	r2,r3,1009fa0 <_strtod_r+0x5b4>
 1009ca4:	00800c04 	movi	r2,48
 1009ca8:	2080061e 	bne	r4,r2,1009cc4 <_strtod_r+0x2d8>
 1009cac:	da000417 	ldw	r8,16(sp)
 1009cb0:	2005883a 	mov	r2,r4
 1009cb4:	42000044 	addi	r8,r8,1
 1009cb8:	da000415 	stw	r8,16(sp)
 1009cbc:	41000007 	ldb	r4,0(r8)
 1009cc0:	20bffc26 	beq	r4,r2,1009cb4 <_strtod_r+0x2c8>
 1009cc4:	20fff3c4 	addi	r3,r4,-49
 1009cc8:	00800204 	movi	r2,8
 1009ccc:	10ffbb36 	bltu	r2,r3,1009bbc <_strtod_r+0x1d0>
 1009cd0:	da000417 	ldw	r8,16(sp)
 1009cd4:	227ff404 	addi	r9,r4,-48
 1009cd8:	03000bc4 	movi	r12,47
 1009cdc:	4007883a 	mov	r3,r8
 1009ce0:	42000044 	addi	r8,r8,1
 1009ce4:	da000415 	stw	r8,16(sp)
 1009ce8:	41000007 	ldb	r4,0(r8)
 1009cec:	61000d0e 	bge	r12,r4,1009d24 <_strtod_r+0x338>
 1009cf0:	00800e44 	movi	r2,57
 1009cf4:	11000b16 	blt	r2,r4,1009d24 <_strtod_r+0x338>
 1009cf8:	601b883a 	mov	r13,r12
 1009cfc:	1019883a 	mov	r12,r2
 1009d00:	00000106 	br	1009d08 <_strtod_r+0x31c>
 1009d04:	61000716 	blt	r12,r4,1009d24 <_strtod_r+0x338>
 1009d08:	488002a4 	muli	r2,r9,10
 1009d0c:	42000044 	addi	r8,r8,1
 1009d10:	da000415 	stw	r8,16(sp)
 1009d14:	2085883a 	add	r2,r4,r2
 1009d18:	41000007 	ldb	r4,0(r8)
 1009d1c:	127ff404 	addi	r9,r2,-48
 1009d20:	693ff816 	blt	r13,r4,1009d04 <_strtod_r+0x318>
 1009d24:	40c7c83a 	sub	r3,r8,r3
 1009d28:	00800204 	movi	r2,8
 1009d2c:	10c2e416 	blt	r2,r3,100a8c0 <_strtod_r+0xed4>
 1009d30:	009387c4 	movi	r2,19999
 1009d34:	480b883a 	mov	r5,r9
 1009d38:	1240010e 	bge	r2,r9,1009d40 <_strtod_r+0x354>
 1009d3c:	100b883a 	mov	r5,r2
 1009d40:	7005003a 	cmpeq	r2,r14,zero
 1009d44:	103f9e1e 	bne	r2,zero,1009bc0 <_strtod_r+0x1d4>
 1009d48:	014bc83a 	sub	r5,zero,r5
 1009d4c:	583f9d26 	beq	r11,zero,1009bc4 <_strtod_r+0x1d8>
 1009d50:	2a8bc83a 	sub	r5,r5,r10
 1009d54:	d9400f15 	stw	r5,60(sp)
 1009d58:	30007a1e 	bne	r6,zero,1009f44 <_strtod_r+0x558>
 1009d5c:	dcc01215 	stw	r19,72(sp)
 1009d60:	00800404 	movi	r2,16
 1009d64:	9825883a 	mov	r18,r19
 1009d68:	14c0010e 	bge	r2,r19,1009d70 <_strtod_r+0x384>
 1009d6c:	1025883a 	mov	r18,r2
 1009d70:	a009883a 	mov	r4,r20
 1009d74:	100ed940 	call	100ed94 <__floatunsidf>
 1009d78:	100f883a 	mov	r7,r2
 1009d7c:	e0800015 	stw	r2,0(fp)
 1009d80:	00800244 	movi	r2,9
 1009d84:	e0c00115 	stw	r3,4(fp)
 1009d88:	1480160e 	bge	r2,r18,1009de4 <_strtod_r+0x3f8>
 1009d8c:	900c90fa 	slli	r6,r18,3
 1009d90:	01004074 	movhi	r4,257
 1009d94:	210c2e04 	addi	r4,r4,12472
 1009d98:	180b883a 	mov	r5,r3
 1009d9c:	310d883a 	add	r6,r6,r4
 1009da0:	30ffef17 	ldw	r3,-68(r6)
 1009da4:	30bfee17 	ldw	r2,-72(r6)
 1009da8:	3809883a 	mov	r4,r7
 1009dac:	180f883a 	mov	r7,r3
 1009db0:	100d883a 	mov	r6,r2
 1009db4:	100e2040 	call	100e204 <__muldf3>
 1009db8:	8009883a 	mov	r4,r16
 1009dbc:	1823883a 	mov	r17,r3
 1009dc0:	1021883a 	mov	r16,r2
 1009dc4:	100ed940 	call	100ed94 <__floatunsidf>
 1009dc8:	880b883a 	mov	r5,r17
 1009dcc:	180f883a 	mov	r7,r3
 1009dd0:	8009883a 	mov	r4,r16
 1009dd4:	100d883a 	mov	r6,r2
 1009dd8:	100e1900 	call	100e190 <__adddf3>
 1009ddc:	e0c00115 	stw	r3,4(fp)
 1009de0:	e0800015 	stw	r2,0(fp)
 1009de4:	010003c4 	movi	r4,15
 1009de8:	24c09816 	blt	r4,r19,100a04c <_strtod_r+0x660>
 1009dec:	d9800f17 	ldw	r6,60(sp)
 1009df0:	303f7526 	beq	r6,zero,1009bc8 <_strtod_r+0x1dc>
 1009df4:	0183be0e 	bge	zero,r6,100acf0 <_strtod_r+0x1304>
 1009df8:	00800584 	movi	r2,22
 1009dfc:	1182b20e 	bge	r2,r6,100a8c8 <_strtod_r+0xedc>
 1009e00:	d8c00f17 	ldw	r3,60(sp)
 1009e04:	24e3c83a 	sub	r17,r4,r19
 1009e08:	88800584 	addi	r2,r17,22
 1009e0c:	10c08f16 	blt	r2,r3,100a04c <_strtod_r+0x660>
 1009e10:	880890fa 	slli	r4,r17,3
 1009e14:	04004074 	movhi	r16,257
 1009e18:	840c2e04 	addi	r16,r16,12472
 1009e1c:	e0800017 	ldw	r2,0(fp)
 1009e20:	2409883a 	add	r4,r4,r16
 1009e24:	22000017 	ldw	r8,0(r4)
 1009e28:	22400117 	ldw	r9,4(r4)
 1009e2c:	e0c00117 	ldw	r3,4(fp)
 1009e30:	1009883a 	mov	r4,r2
 1009e34:	480f883a 	mov	r7,r9
 1009e38:	180b883a 	mov	r5,r3
 1009e3c:	400d883a 	mov	r6,r8
 1009e40:	100e2040 	call	100e204 <__muldf3>
 1009e44:	d9000f17 	ldw	r4,60(sp)
 1009e48:	180b883a 	mov	r5,r3
 1009e4c:	2455c83a 	sub	r10,r4,r17
 1009e50:	501490fa 	slli	r10,r10,3
 1009e54:	1009883a 	mov	r4,r2
 1009e58:	5415883a 	add	r10,r10,r16
 1009e5c:	52000017 	ldw	r8,0(r10)
 1009e60:	52400117 	ldw	r9,4(r10)
 1009e64:	0002a206 	br	100a8f0 <_strtod_r+0xf04>
 1009e68:	40c00047 	ldb	r3,1(r8)
 1009e6c:	00801604 	movi	r2,88
 1009e70:	18804e26 	beq	r3,r2,1009fac <_strtod_r+0x5c0>
 1009e74:	00801e04 	movi	r2,120
 1009e78:	18804c26 	beq	r3,r2,1009fac <_strtod_r+0x5c0>
 1009e7c:	42000044 	addi	r8,r8,1
 1009e80:	da000415 	stw	r8,16(sp)
 1009e84:	40c00007 	ldb	r3,0(r8)
 1009e88:	00800c04 	movi	r2,48
 1009e8c:	18bffb26 	beq	r3,r2,1009e7c <_strtod_r+0x490>
 1009e90:	183f4d26 	beq	r3,zero,1009bc8 <_strtod_r+0x1dc>
 1009e94:	03c00044 	movi	r15,1
 1009e98:	003f2406 	br	1009b2c <_strtod_r+0x140>
 1009e9c:	42000044 	addi	r8,r8,1
 1009ea0:	da000415 	stw	r8,16(sp)
 1009ea4:	19000047 	ldb	r4,1(r3)
 1009ea8:	3000b726 	beq	r6,zero,100a188 <_strtod_r+0x79c>
 1009eac:	3027883a 	mov	r19,r6
 1009eb0:	0015883a 	mov	r10,zero
 1009eb4:	000f883a 	mov	r7,zero
 1009eb8:	227ff404 	addi	r9,r4,-48
 1009ebc:	00800244 	movi	r2,9
 1009ec0:	1242592e 	bgeu	r2,r9,100a828 <_strtod_r+0xe3c>
 1009ec4:	04800044 	movi	r18,1
 1009ec8:	003f3706 	br	1009ba8 <_strtod_r+0x1bc>
 1009ecc:	7804c03a 	cmpne	r2,r15,zero
 1009ed0:	103f3d1e 	bne	r2,zero,1009bc8 <_strtod_r+0x1dc>
 1009ed4:	9004c03a 	cmpne	r2,r18,zero
 1009ed8:	103f5e1e 	bne	r2,zero,1009c54 <_strtod_r+0x268>
 1009edc:	00801384 	movi	r2,78
 1009ee0:	2083a226 	beq	r4,r2,100ad6c <_strtod_r+0x1380>
 1009ee4:	11039d16 	blt	r2,r4,100ad5c <_strtod_r+0x1370>
 1009ee8:	00801244 	movi	r2,73
 1009eec:	20bf591e 	bne	r4,r2,1009c54 <_strtod_r+0x268>
 1009ef0:	dc000404 	addi	r16,sp,16
 1009ef4:	8009883a 	mov	r4,r16
 1009ef8:	01404074 	movhi	r5,257
 1009efc:	294c7704 	addi	r5,r5,12764
 1009f00:	10099a40 	call	10099a4 <match>
 1009f04:	103f5326 	beq	r2,zero,1009c54 <_strtod_r+0x268>
 1009f08:	d8800417 	ldw	r2,16(sp)
 1009f0c:	8009883a 	mov	r4,r16
 1009f10:	01404074 	movhi	r5,257
 1009f14:	294c7804 	addi	r5,r5,12768
 1009f18:	123fffc4 	addi	r8,r2,-1
 1009f1c:	da000415 	stw	r8,16(sp)
 1009f20:	10099a40 	call	10099a4 <match>
 1009f24:	1000031e 	bne	r2,zero,1009f34 <_strtod_r+0x548>
 1009f28:	d8800417 	ldw	r2,16(sp)
 1009f2c:	12000044 	addi	r8,r2,1
 1009f30:	da000415 	stw	r8,16(sp)
 1009f34:	019ffc34 	movhi	r6,32752
 1009f38:	e1800115 	stw	r6,4(fp)
 1009f3c:	e0000015 	stw	zero,0(fp)
 1009f40:	003f2106 	br	1009bc8 <_strtod_r+0x1dc>
 1009f44:	d9801215 	stw	r6,72(sp)
 1009f48:	003f8506 	br	1009d60 <_strtod_r+0x374>
 1009f4c:	d8001115 	stw	zero,68(sp)
 1009f50:	42000044 	addi	r8,r8,1
 1009f54:	da000415 	stw	r8,16(sp)
 1009f58:	40800007 	ldb	r2,0(r8)
 1009f5c:	103eef1e 	bne	r2,zero,1009b1c <_strtod_r+0x130>
 1009f60:	d8001115 	stw	zero,68(sp)
 1009f64:	dc400415 	stw	r17,16(sp)
 1009f68:	003f1706 	br	1009bc8 <_strtod_r+0x1dc>
 1009f6c:	42000044 	addi	r8,r8,1
 1009f70:	da000415 	stw	r8,16(sp)
 1009f74:	003eaf06 	br	1009a34 <_strtod_r+0x48>
 1009f78:	00800044 	movi	r2,1
 1009f7c:	d8801115 	stw	r2,68(sp)
 1009f80:	003ff306 	br	1009f50 <_strtod_r+0x564>
 1009f84:	001d883a 	mov	r14,zero
 1009f88:	42000044 	addi	r8,r8,1
 1009f8c:	da000415 	stw	r8,16(sp)
 1009f90:	21000047 	ldb	r4,1(r4)
 1009f94:	00800244 	movi	r2,9
 1009f98:	20fff404 	addi	r3,r4,-48
 1009f9c:	10ff412e 	bgeu	r2,r3,1009ca4 <_strtod_r+0x2b8>
 1009fa0:	000b883a 	mov	r5,zero
 1009fa4:	dc400415 	stw	r17,16(sp)
 1009fa8:	003f0506 	br	1009bc0 <_strtod_r+0x1d4>
 1009fac:	d8c01117 	ldw	r3,68(sp)
 1009fb0:	04804074 	movhi	r18,257
 1009fb4:	948ef204 	addi	r18,r18,15304
 1009fb8:	d8800504 	addi	r2,sp,20
 1009fbc:	a809883a 	mov	r4,r21
 1009fc0:	d9400404 	addi	r5,sp,16
 1009fc4:	900d883a 	mov	r6,r18
 1009fc8:	d9c00604 	addi	r7,sp,24
 1009fcc:	d8800015 	stw	r2,0(sp)
 1009fd0:	d8c00115 	stw	r3,4(sp)
 1009fd4:	100c3240 	call	100c324 <__gethex>
 1009fd8:	140001cc 	andi	r16,r2,7
 1009fdc:	1027883a 	mov	r19,r2
 1009fe0:	803ef926 	beq	r16,zero,1009bc8 <_strtod_r+0x1dc>
 1009fe4:	05000184 	movi	r20,6
 1009fe8:	853f1a26 	beq	r16,r20,1009c54 <_strtod_r+0x268>
 1009fec:	d9800517 	ldw	r6,20(sp)
 1009ff0:	30000626 	beq	r6,zero,100a00c <_strtod_r+0x620>
 1009ff4:	91400017 	ldw	r5,0(r18)
 1009ff8:	d9000d04 	addi	r4,sp,52
 1009ffc:	100800c0 	call	100800c <__copybits>
 100a000:	d9400517 	ldw	r5,20(sp)
 100a004:	a809883a 	mov	r4,r21
 100a008:	1007b6c0 	call	1007b6c <_Bfree>
 100a00c:	d9400617 	ldw	r5,24(sp)
 100a010:	a4024136 	bltu	r20,r16,100a918 <_strtod_r+0xf2c>
 100a014:	8405883a 	add	r2,r16,r16
 100a018:	1085883a 	add	r2,r2,r2
 100a01c:	00c04074 	movhi	r3,257
 100a020:	18e80c04 	addi	r3,r3,-24528
 100a024:	10c5883a 	add	r2,r2,r3
 100a028:	11000017 	ldw	r4,0(r2)
 100a02c:	2000683a 	jmp	r4
 100a030:	0100a958 	cmpnei	r4,zero,677
 100a034:	0100a964 	muli	r4,zero,677
 100a038:	0100a908 	cmpgei	r4,zero,676
 100a03c:	0100a930 	cmpltui	r4,zero,676
 100a040:	0100a940 	call	100a94 <__alt_mem_onchip_memory2_0+0x100a94>
 100a044:	0100a964 	muli	r4,zero,677
 100a048:	0100a958 	cmpnei	r4,zero,677
 100a04c:	d8c00f17 	ldw	r3,60(sp)
 100a050:	9c85c83a 	sub	r2,r19,r18
 100a054:	18a1883a 	add	r16,r3,r2
 100a058:	0402d00e 	bge	zero,r16,100ab9c <_strtod_r+0x11b0>
 100a05c:	814003cc 	andi	r5,r16,15
 100a060:	28000f26 	beq	r5,zero,100a0a0 <_strtod_r+0x6b4>
 100a064:	280a90fa 	slli	r5,r5,3
 100a068:	01004074 	movhi	r4,257
 100a06c:	210c2e04 	addi	r4,r4,12472
 100a070:	e0800017 	ldw	r2,0(fp)
 100a074:	290b883a 	add	r5,r5,r4
 100a078:	2a000017 	ldw	r8,0(r5)
 100a07c:	e0c00117 	ldw	r3,4(fp)
 100a080:	2a400117 	ldw	r9,4(r5)
 100a084:	1009883a 	mov	r4,r2
 100a088:	180b883a 	mov	r5,r3
 100a08c:	480f883a 	mov	r7,r9
 100a090:	400d883a 	mov	r6,r8
 100a094:	100e2040 	call	100e204 <__muldf3>
 100a098:	e0c00115 	stw	r3,4(fp)
 100a09c:	e0800015 	stw	r2,0(fp)
 100a0a0:	00bffc04 	movi	r2,-16
 100a0a4:	808c703a 	and	r6,r16,r2
 100a0a8:	30005b26 	beq	r6,zero,100a218 <_strtod_r+0x82c>
 100a0ac:	00804d04 	movi	r2,308
 100a0b0:	1181fd16 	blt	r2,r6,100a8a8 <_strtod_r+0xebc>
 100a0b4:	3021d13a 	srai	r16,r6,4
 100a0b8:	00800044 	movi	r2,1
 100a0bc:	1403610e 	bge	r2,r16,100ae44 <_strtod_r+0x1458>
 100a0c0:	102f883a 	mov	r23,r2
 100a0c4:	0025883a 	mov	r18,zero
 100a0c8:	04404074 	movhi	r17,257
 100a0cc:	8c4c6004 	addi	r17,r17,12672
 100a0d0:	8080004c 	andi	r2,r16,1
 100a0d4:	1005003a 	cmpeq	r2,r2,zero
 100a0d8:	1000091e 	bne	r2,zero,100a100 <_strtod_r+0x714>
 100a0dc:	e0800017 	ldw	r2,0(fp)
 100a0e0:	e0c00117 	ldw	r3,4(fp)
 100a0e4:	89800017 	ldw	r6,0(r17)
 100a0e8:	89c00117 	ldw	r7,4(r17)
 100a0ec:	180b883a 	mov	r5,r3
 100a0f0:	1009883a 	mov	r4,r2
 100a0f4:	100e2040 	call	100e204 <__muldf3>
 100a0f8:	e0c00115 	stw	r3,4(fp)
 100a0fc:	e0800015 	stw	r2,0(fp)
 100a100:	8021d07a 	srai	r16,r16,1
 100a104:	94800044 	addi	r18,r18,1
 100a108:	8c400204 	addi	r17,r17,8
 100a10c:	bc3ff016 	blt	r23,r16,100a0d0 <_strtod_r+0x6e4>
 100a110:	900e90fa 	slli	r7,r18,3
 100a114:	01804074 	movhi	r6,257
 100a118:	318c6004 	addi	r6,r6,12672
 100a11c:	e2000117 	ldw	r8,4(fp)
 100a120:	398f883a 	add	r7,r7,r6
 100a124:	38800017 	ldw	r2,0(r7)
 100a128:	38c00117 	ldw	r3,4(r7)
 100a12c:	e1000017 	ldw	r4,0(fp)
 100a130:	01bf2c34 	movhi	r6,64688
 100a134:	418d883a 	add	r6,r8,r6
 100a138:	300b883a 	mov	r5,r6
 100a13c:	180f883a 	mov	r7,r3
 100a140:	100d883a 	mov	r6,r2
 100a144:	100e2040 	call	100e204 <__muldf3>
 100a148:	1009883a 	mov	r4,r2
 100a14c:	180b883a 	mov	r5,r3
 100a150:	199ffc2c 	andhi	r6,r3,32752
 100a154:	009f2834 	movhi	r2,31904
 100a158:	e1000015 	stw	r4,0(fp)
 100a15c:	e1400115 	stw	r5,4(fp)
 100a160:	1181d136 	bltu	r2,r6,100a8a8 <_strtod_r+0xebc>
 100a164:	009f2434 	movhi	r2,31888
 100a168:	1183202e 	bgeu	r2,r6,100adec <_strtod_r+0x1400>
 100a16c:	d8001415 	stw	zero,80(sp)
 100a170:	019ffc34 	movhi	r6,32752
 100a174:	31bfffc4 	addi	r6,r6,-1
 100a178:	01ffffc4 	movi	r7,-1
 100a17c:	e1800115 	stw	r6,4(fp)
 100a180:	e1c00015 	stw	r7,0(fp)
 100a184:	00002506 	br	100a21c <_strtod_r+0x830>
 100a188:	00800c04 	movi	r2,48
 100a18c:	2083151e 	bne	r4,r2,100ade4 <_strtod_r+0x13f8>
 100a190:	2005883a 	mov	r2,r4
 100a194:	000f883a 	mov	r7,zero
 100a198:	42000044 	addi	r8,r8,1
 100a19c:	da000415 	stw	r8,16(sp)
 100a1a0:	41000007 	ldb	r4,0(r8)
 100a1a4:	39c00044 	addi	r7,r7,1
 100a1a8:	20bffb26 	beq	r4,r2,100a198 <_strtod_r+0x7ac>
 100a1ac:	20fff3c4 	addi	r3,r4,-49
 100a1b0:	00800204 	movi	r2,8
 100a1b4:	10c1b836 	bltu	r2,r3,100a898 <_strtod_r+0xeac>
 100a1b8:	dd800417 	ldw	r22,16(sp)
 100a1bc:	3815883a 	mov	r10,r7
 100a1c0:	227ff404 	addi	r9,r4,-48
 100a1c4:	b011883a 	mov	r8,r22
 100a1c8:	0027883a 	mov	r19,zero
 100a1cc:	01c00044 	movi	r7,1
 100a1d0:	4801fe26 	beq	r9,zero,100a9cc <_strtod_r+0xfe0>
 100a1d4:	00800044 	movi	r2,1
 100a1d8:	51d5883a 	add	r10,r10,r7
 100a1dc:	11c31f0e 	bge	r2,r7,100ae5c <_strtod_r+0x1470>
 100a1e0:	1009883a 	mov	r4,r2
 100a1e4:	9807883a 	mov	r3,r19
 100a1e8:	02c00204 	movi	r11,8
 100a1ec:	03000404 	movi	r12,16
 100a1f0:	00000306 	br	100a200 <_strtod_r+0x814>
 100a1f4:	a50002a4 	muli	r20,r20,10
 100a1f8:	21000044 	addi	r4,r4,1
 100a1fc:	21c1eb26 	beq	r4,r7,100a9ac <_strtod_r+0xfc0>
 100a200:	18c00044 	addi	r3,r3,1
 100a204:	18bfffc4 	addi	r2,r3,-1
 100a208:	58bffa0e 	bge	r11,r2,100a1f4 <_strtod_r+0x808>
 100a20c:	60fffa16 	blt	r12,r3,100a1f8 <_strtod_r+0x80c>
 100a210:	840002a4 	muli	r16,r16,10
 100a214:	003ff806 	br	100a1f8 <_strtod_r+0x80c>
 100a218:	d8001415 	stw	zero,80(sp)
 100a21c:	d9801217 	ldw	r6,72(sp)
 100a220:	a809883a 	mov	r4,r21
 100a224:	b00b883a 	mov	r5,r22
 100a228:	980f883a 	mov	r7,r19
 100a22c:	dd000015 	stw	r20,0(sp)
 100a230:	1008a400 	call	1008a40 <__s2b>
 100a234:	d9800f17 	ldw	r6,60(sp)
 100a238:	11000304 	addi	r4,r2,12
 100a23c:	d8801015 	stw	r2,64(sp)
 100a240:	300c803a 	cmplt	r6,r6,zero
 100a244:	d9001715 	stw	r4,92(sp)
 100a248:	d9801615 	stw	r6,88(sp)
 100a24c:	d8801017 	ldw	r2,64(sp)
 100a250:	a809883a 	mov	r4,r21
 100a254:	11400117 	ldw	r5,4(r2)
 100a258:	10080ec0 	call	10080ec <_Balloc>
 100a25c:	d8c01017 	ldw	r3,64(sp)
 100a260:	d9401717 	ldw	r5,92(sp)
 100a264:	11000304 	addi	r4,r2,12
 100a268:	19800417 	ldw	r6,16(r3)
 100a26c:	102f883a 	mov	r23,r2
 100a270:	318d883a 	add	r6,r6,r6
 100a274:	318d883a 	add	r6,r6,r6
 100a278:	31800204 	addi	r6,r6,8
 100a27c:	10079540 	call	1007954 <memcpy>
 100a280:	e2000017 	ldw	r8,0(fp)
 100a284:	e2400117 	ldw	r9,4(fp)
 100a288:	d9800304 	addi	r6,sp,12
 100a28c:	400b883a 	mov	r5,r8
 100a290:	a809883a 	mov	r4,r21
 100a294:	d9c00204 	addi	r7,sp,8
 100a298:	d9800015 	stw	r6,0(sp)
 100a29c:	480d883a 	mov	r6,r9
 100a2a0:	10081a80 	call	10081a8 <__d2b>
 100a2a4:	a809883a 	mov	r4,r21
 100a2a8:	01400044 	movi	r5,1
 100a2ac:	d8800515 	stw	r2,20(sp)
 100a2b0:	10087e40 	call	10087e4 <__i2b>
 100a2b4:	102d883a 	mov	r22,r2
 100a2b8:	d8801617 	ldw	r2,88(sp)
 100a2bc:	1001051e 	bne	r2,zero,100a6d4 <_strtod_r+0xce8>
 100a2c0:	dd000f17 	ldw	r20,60(sp)
 100a2c4:	000f883a 	mov	r7,zero
 100a2c8:	0013883a 	mov	r9,zero
 100a2cc:	a011883a 	mov	r8,r20
 100a2d0:	d8800217 	ldw	r2,8(sp)
 100a2d4:	1000fd16 	blt	r2,zero,100a6cc <_strtod_r+0xce0>
 100a2d8:	388f883a 	add	r7,r7,r2
 100a2dc:	d9801417 	ldw	r6,80(sp)
 100a2e0:	d9400317 	ldw	r5,12(sp)
 100a2e4:	00ff0084 	movi	r3,-1022
 100a2e8:	1189c83a 	sub	r4,r2,r6
 100a2ec:	2145883a 	add	r2,r4,r5
 100a2f0:	10bfffc4 	addi	r2,r2,-1
 100a2f4:	10c09f0e 	bge	r2,r3,100a574 <_strtod_r+0xb88>
 100a2f8:	21810cc4 	addi	r6,r4,1075
 100a2fc:	d8c01417 	ldw	r3,80(sp)
 100a300:	4185883a 	add	r2,r8,r6
 100a304:	39a1883a 	add	r16,r7,r6
 100a308:	18a5883a 	add	r18,r3,r2
 100a30c:	3807883a 	mov	r3,r7
 100a310:	81c0010e 	bge	r16,r7,100a318 <_strtod_r+0x92c>
 100a314:	8007883a 	mov	r3,r16
 100a318:	9005883a 	mov	r2,r18
 100a31c:	1c80010e 	bge	r3,r18,100a324 <_strtod_r+0x938>
 100a320:	1805883a 	mov	r2,r3
 100a324:	0080e70e 	bge	zero,r2,100a6c4 <_strtod_r+0xcd8>
 100a328:	38a7c83a 	sub	r19,r7,r2
 100a32c:	80a1c83a 	sub	r16,r16,r2
 100a330:	90a5c83a 	sub	r18,r18,r2
 100a334:	02400e0e 	bge	zero,r9,100a370 <_strtod_r+0x984>
 100a338:	480d883a 	mov	r6,r9
 100a33c:	b00b883a 	mov	r5,r22
 100a340:	a809883a 	mov	r4,r21
 100a344:	10089200 	call	1008920 <__pow5mult>
 100a348:	d9800517 	ldw	r6,20(sp)
 100a34c:	a809883a 	mov	r4,r21
 100a350:	100b883a 	mov	r5,r2
 100a354:	102d883a 	mov	r22,r2
 100a358:	10085fc0 	call	10085fc <__multiply>
 100a35c:	d9400517 	ldw	r5,20(sp)
 100a360:	1023883a 	mov	r17,r2
 100a364:	a809883a 	mov	r4,r21
 100a368:	1007b6c0 	call	1007b6c <_Bfree>
 100a36c:	dc400515 	stw	r17,20(sp)
 100a370:	0400050e 	bge	zero,r16,100a388 <_strtod_r+0x99c>
 100a374:	d9400517 	ldw	r5,20(sp)
 100a378:	800d883a 	mov	r6,r16
 100a37c:	a809883a 	mov	r4,r21
 100a380:	10084b00 	call	10084b0 <__lshift>
 100a384:	d8800515 	stw	r2,20(sp)
 100a388:	a000741e 	bne	r20,zero,100a55c <_strtod_r+0xb70>
 100a38c:	0480050e 	bge	zero,r18,100a3a4 <_strtod_r+0x9b8>
 100a390:	b80b883a 	mov	r5,r23
 100a394:	900d883a 	mov	r6,r18
 100a398:	a809883a 	mov	r4,r21
 100a39c:	10084b00 	call	10084b0 <__lshift>
 100a3a0:	102f883a 	mov	r23,r2
 100a3a4:	04c0050e 	bge	zero,r19,100a3bc <_strtod_r+0x9d0>
 100a3a8:	b00b883a 	mov	r5,r22
 100a3ac:	980d883a 	mov	r6,r19
 100a3b0:	a809883a 	mov	r4,r21
 100a3b4:	10084b00 	call	10084b0 <__lshift>
 100a3b8:	102d883a 	mov	r22,r2
 100a3bc:	d9400517 	ldw	r5,20(sp)
 100a3c0:	a809883a 	mov	r4,r21
 100a3c4:	b80d883a 	mov	r6,r23
 100a3c8:	10083240 	call	1008324 <__mdiff>
 100a3cc:	11000317 	ldw	r4,12(r2)
 100a3d0:	b00b883a 	mov	r5,r22
 100a3d4:	10000315 	stw	zero,12(r2)
 100a3d8:	d9001315 	stw	r4,76(sp)
 100a3dc:	1009883a 	mov	r4,r2
 100a3e0:	1029883a 	mov	r20,r2
 100a3e4:	1007cc80 	call	1007cc8 <__mcmp>
 100a3e8:	10017c16 	blt	r2,zero,100a9dc <_strtod_r+0xff0>
 100a3ec:	1001af26 	beq	r2,zero,100aaac <_strtod_r+0x10c0>
 100a3f0:	a009883a 	mov	r4,r20
 100a3f4:	b00b883a 	mov	r5,r22
 100a3f8:	1007ec80 	call	1007ec8 <__ratio>
 100a3fc:	0011883a 	mov	r8,zero
 100a400:	02500034 	movhi	r9,16384
 100a404:	480f883a 	mov	r7,r9
 100a408:	1009883a 	mov	r4,r2
 100a40c:	180b883a 	mov	r5,r3
 100a410:	400d883a 	mov	r6,r8
 100a414:	1021883a 	mov	r16,r2
 100a418:	1823883a 	mov	r17,r3
 100a41c:	100eac80 	call	100eac8 <__ledf2>
 100a420:	00805716 	blt	zero,r2,100a580 <_strtod_r+0xb94>
 100a424:	d9801317 	ldw	r6,76(sp)
 100a428:	3025003a 	cmpeq	r18,r6,zero
 100a42c:	90008b1e 	bne	r18,zero,100a65c <_strtod_r+0xc70>
 100a430:	008ffc34 	movhi	r2,16368
 100a434:	0021883a 	mov	r16,zero
 100a438:	1023883a 	mov	r17,r2
 100a43c:	d8000715 	stw	zero,28(sp)
 100a440:	d8800815 	stw	r2,32(sp)
 100a444:	e1c00117 	ldw	r7,4(fp)
 100a448:	009ff834 	movhi	r2,32736
 100a44c:	3cdffc2c 	andhi	r19,r7,32752
 100a450:	98805e26 	beq	r19,r2,100a5cc <_strtod_r+0xbe0>
 100a454:	d8801417 	ldw	r2,80(sp)
 100a458:	10001b26 	beq	r2,zero,100a4c8 <_strtod_r+0xadc>
 100a45c:	0081a834 	movhi	r2,1696
 100a460:	14c01936 	bltu	r2,r19,100a4c8 <_strtod_r+0xadc>
 100a464:	00bff034 	movhi	r2,65472
 100a468:	00d07834 	movhi	r3,16864
 100a46c:	18ffffc4 	addi	r3,r3,-1
 100a470:	180f883a 	mov	r7,r3
 100a474:	8009883a 	mov	r4,r16
 100a478:	880b883a 	mov	r5,r17
 100a47c:	100d883a 	mov	r6,r2
 100a480:	100eac80 	call	100eac8 <__ledf2>
 100a484:	00800b16 	blt	zero,r2,100a4b4 <_strtod_r+0xac8>
 100a488:	880b883a 	mov	r5,r17
 100a48c:	8009883a 	mov	r4,r16
 100a490:	100cf680 	call	100cf68 <__fixunsdfsi>
 100a494:	1000df1e 	bne	r2,zero,100a814 <_strtod_r+0xe28>
 100a498:	0021883a 	mov	r16,zero
 100a49c:	044ffc34 	movhi	r17,16368
 100a4a0:	9000d91e 	bne	r18,zero,100a808 <_strtod_r+0xe1c>
 100a4a4:	8005883a 	mov	r2,r16
 100a4a8:	8807883a 	mov	r3,r17
 100a4ac:	d8c00815 	stw	r3,32(sp)
 100a4b0:	d8800715 	stw	r2,28(sp)
 100a4b4:	d8800817 	ldw	r2,32(sp)
 100a4b8:	00c1ac34 	movhi	r3,1712
 100a4bc:	14c5c83a 	sub	r2,r2,r19
 100a4c0:	10c5883a 	add	r2,r2,r3
 100a4c4:	d8800815 	stw	r2,32(sp)
 100a4c8:	e0800017 	ldw	r2,0(fp)
 100a4cc:	e0c00117 	ldw	r3,4(fp)
 100a4d0:	1009883a 	mov	r4,r2
 100a4d4:	180b883a 	mov	r5,r3
 100a4d8:	1007d280 	call	1007d28 <__ulp>
 100a4dc:	d9800717 	ldw	r6,28(sp)
 100a4e0:	d9c00817 	ldw	r7,32(sp)
 100a4e4:	180b883a 	mov	r5,r3
 100a4e8:	1009883a 	mov	r4,r2
 100a4ec:	100e2040 	call	100e204 <__muldf3>
 100a4f0:	e2000017 	ldw	r8,0(fp)
 100a4f4:	e2400117 	ldw	r9,4(fp)
 100a4f8:	180b883a 	mov	r5,r3
 100a4fc:	1009883a 	mov	r4,r2
 100a500:	480f883a 	mov	r7,r9
 100a504:	400d883a 	mov	r6,r8
 100a508:	100e1900 	call	100e190 <__adddf3>
 100a50c:	e0c00115 	stw	r3,4(fp)
 100a510:	e0800015 	stw	r2,0(fp)
 100a514:	d8c01417 	ldw	r3,80(sp)
 100a518:	e4800117 	ldw	r18,4(fp)
 100a51c:	1800021e 	bne	r3,zero,100a528 <_strtod_r+0xb3c>
 100a520:	909ffc2c 	andhi	r2,r18,32752
 100a524:	98807b26 	beq	r19,r2,100a714 <_strtod_r+0xd28>
 100a528:	d9400517 	ldw	r5,20(sp)
 100a52c:	a809883a 	mov	r4,r21
 100a530:	1007b6c0 	call	1007b6c <_Bfree>
 100a534:	a809883a 	mov	r4,r21
 100a538:	b80b883a 	mov	r5,r23
 100a53c:	1007b6c0 	call	1007b6c <_Bfree>
 100a540:	a809883a 	mov	r4,r21
 100a544:	b00b883a 	mov	r5,r22
 100a548:	1007b6c0 	call	1007b6c <_Bfree>
 100a54c:	a809883a 	mov	r4,r21
 100a550:	a00b883a 	mov	r5,r20
 100a554:	1007b6c0 	call	1007b6c <_Bfree>
 100a558:	003f3c06 	br	100a24c <_strtod_r+0x860>
 100a55c:	b80b883a 	mov	r5,r23
 100a560:	a00d883a 	mov	r6,r20
 100a564:	a809883a 	mov	r4,r21
 100a568:	10089200 	call	1008920 <__pow5mult>
 100a56c:	102f883a 	mov	r23,r2
 100a570:	003f8606 	br	100a38c <_strtod_r+0x9a0>
 100a574:	00800d84 	movi	r2,54
 100a578:	114dc83a 	sub	r6,r2,r5
 100a57c:	003f5f06 	br	100a2fc <_strtod_r+0x910>
 100a580:	0005883a 	mov	r2,zero
 100a584:	00cff834 	movhi	r3,16352
 100a588:	880b883a 	mov	r5,r17
 100a58c:	8009883a 	mov	r4,r16
 100a590:	100d883a 	mov	r6,r2
 100a594:	180f883a 	mov	r7,r3
 100a598:	100e2040 	call	100e204 <__muldf3>
 100a59c:	d9801317 	ldw	r6,76(sp)
 100a5a0:	1021883a 	mov	r16,r2
 100a5a4:	1823883a 	mov	r17,r3
 100a5a8:	3025003a 	cmpeq	r18,r6,zero
 100a5ac:	90000126 	beq	r18,zero,100a5b4 <_strtod_r+0xbc8>
 100a5b0:	18e0003c 	xorhi	r3,r3,32768
 100a5b4:	d8800715 	stw	r2,28(sp)
 100a5b8:	d8c00815 	stw	r3,32(sp)
 100a5bc:	e1c00117 	ldw	r7,4(fp)
 100a5c0:	009ff834 	movhi	r2,32736
 100a5c4:	3cdffc2c 	andhi	r19,r7,32752
 100a5c8:	98bfa21e 	bne	r19,r2,100a454 <_strtod_r+0xa68>
 100a5cc:	e1000017 	ldw	r4,0(fp)
 100a5d0:	01bf2c34 	movhi	r6,64688
 100a5d4:	398d883a 	add	r6,r7,r6
 100a5d8:	d9000b15 	stw	r4,44(sp)
 100a5dc:	d9c00c15 	stw	r7,48(sp)
 100a5e0:	300b883a 	mov	r5,r6
 100a5e4:	e1800115 	stw	r6,4(fp)
 100a5e8:	1007d280 	call	1007d28 <__ulp>
 100a5ec:	d9800717 	ldw	r6,28(sp)
 100a5f0:	d9c00817 	ldw	r7,32(sp)
 100a5f4:	180b883a 	mov	r5,r3
 100a5f8:	1009883a 	mov	r4,r2
 100a5fc:	100e2040 	call	100e204 <__muldf3>
 100a600:	e2000017 	ldw	r8,0(fp)
 100a604:	e2400117 	ldw	r9,4(fp)
 100a608:	180b883a 	mov	r5,r3
 100a60c:	1009883a 	mov	r4,r2
 100a610:	480f883a 	mov	r7,r9
 100a614:	400d883a 	mov	r6,r8
 100a618:	100e1900 	call	100e190 <__adddf3>
 100a61c:	1009883a 	mov	r4,r2
 100a620:	180b883a 	mov	r5,r3
 100a624:	009f2834 	movhi	r2,31904
 100a628:	10bfffc4 	addi	r2,r2,-1
 100a62c:	18dffc2c 	andhi	r3,r3,32752
 100a630:	e1000015 	stw	r4,0(fp)
 100a634:	e1400115 	stw	r5,4(fp)
 100a638:	10c06f2e 	bgeu	r2,r3,100a7f8 <_strtod_r+0xe0c>
 100a63c:	d8800c17 	ldw	r2,48(sp)
 100a640:	011ffc34 	movhi	r4,32752
 100a644:	213fffc4 	addi	r4,r4,-1
 100a648:	11007a26 	beq	r2,r4,100a834 <_strtod_r+0xe48>
 100a64c:	01ffffc4 	movi	r7,-1
 100a650:	e1000115 	stw	r4,4(fp)
 100a654:	e1c00015 	stw	r7,0(fp)
 100a658:	003fb306 	br	100a528 <_strtod_r+0xb3c>
 100a65c:	e0c00017 	ldw	r3,0(fp)
 100a660:	1800221e 	bne	r3,zero,100a6ec <_strtod_r+0xd00>
 100a664:	e0800117 	ldw	r2,4(fp)
 100a668:	00c00434 	movhi	r3,16
 100a66c:	18ffffc4 	addi	r3,r3,-1
 100a670:	10c4703a 	and	r2,r2,r3
 100a674:	1000211e 	bne	r2,zero,100a6fc <_strtod_r+0xd10>
 100a678:	0005883a 	mov	r2,zero
 100a67c:	00cffc34 	movhi	r3,16368
 100a680:	180f883a 	mov	r7,r3
 100a684:	8009883a 	mov	r4,r16
 100a688:	880b883a 	mov	r5,r17
 100a68c:	100d883a 	mov	r6,r2
 100a690:	100ea400 	call	100ea40 <__ltdf2>
 100a694:	10013c16 	blt	r2,zero,100ab88 <_strtod_r+0x119c>
 100a698:	0005883a 	mov	r2,zero
 100a69c:	00cff834 	movhi	r3,16352
 100a6a0:	880b883a 	mov	r5,r17
 100a6a4:	8009883a 	mov	r4,r16
 100a6a8:	180f883a 	mov	r7,r3
 100a6ac:	100d883a 	mov	r6,r2
 100a6b0:	100e2040 	call	100e204 <__muldf3>
 100a6b4:	1823883a 	mov	r17,r3
 100a6b8:	1021883a 	mov	r16,r2
 100a6bc:	18e0003c 	xorhi	r3,r3,32768
 100a6c0:	003fbc06 	br	100a5b4 <_strtod_r+0xbc8>
 100a6c4:	3827883a 	mov	r19,r7
 100a6c8:	003f1a06 	br	100a334 <_strtod_r+0x948>
 100a6cc:	4091c83a 	sub	r8,r8,r2
 100a6d0:	003f0206 	br	100a2dc <_strtod_r+0x8f0>
 100a6d4:	d8c00f17 	ldw	r3,60(sp)
 100a6d8:	0011883a 	mov	r8,zero
 100a6dc:	0029883a 	mov	r20,zero
 100a6e0:	00d3c83a 	sub	r9,zero,r3
 100a6e4:	480f883a 	mov	r7,r9
 100a6e8:	003ef906 	br	100a2d0 <_strtod_r+0x8e4>
 100a6ec:	00800044 	movi	r2,1
 100a6f0:	1880021e 	bne	r3,r2,100a6fc <_strtod_r+0xd10>
 100a6f4:	e0800117 	ldw	r2,4(fp)
 100a6f8:	1000a526 	beq	r2,zero,100a990 <_strtod_r+0xfa4>
 100a6fc:	00affc34 	movhi	r2,49136
 100a700:	0021883a 	mov	r16,zero
 100a704:	044ffc34 	movhi	r17,16368
 100a708:	d8800815 	stw	r2,32(sp)
 100a70c:	d8000715 	stw	zero,28(sp)
 100a710:	003f4c06 	br	100a444 <_strtod_r+0xa58>
 100a714:	880b883a 	mov	r5,r17
 100a718:	8009883a 	mov	r4,r16
 100a71c:	100ec480 	call	100ec48 <__fixdfsi>
 100a720:	1009883a 	mov	r4,r2
 100a724:	100eb500 	call	100eb50 <__floatsidf>
 100a728:	880b883a 	mov	r5,r17
 100a72c:	8009883a 	mov	r4,r16
 100a730:	100d883a 	mov	r6,r2
 100a734:	180f883a 	mov	r7,r3
 100a738:	100e1100 	call	100e110 <__subdf3>
 100a73c:	d9001317 	ldw	r4,76(sp)
 100a740:	100b883a 	mov	r5,r2
 100a744:	180d883a 	mov	r6,r3
 100a748:	1021883a 	mov	r16,r2
 100a74c:	1823883a 	mov	r17,r3
 100a750:	2000061e 	bne	r4,zero,100a76c <_strtod_r+0xd80>
 100a754:	e0800017 	ldw	r2,0(fp)
 100a758:	1000041e 	bne	r2,zero,100a76c <_strtod_r+0xd80>
 100a75c:	00c00434 	movhi	r3,16
 100a760:	18ffffc4 	addi	r3,r3,-1
 100a764:	90c4703a 	and	r2,r18,r3
 100a768:	10004026 	beq	r2,zero,100a86c <_strtod_r+0xe80>
 100a76c:	00a52834 	movhi	r2,38048
 100a770:	108d6544 	addi	r2,r2,13717
 100a774:	00cff834 	movhi	r3,16352
 100a778:	18ffffc4 	addi	r3,r3,-1
 100a77c:	180f883a 	mov	r7,r3
 100a780:	8009883a 	mov	r4,r16
 100a784:	880b883a 	mov	r5,r17
 100a788:	100d883a 	mov	r6,r2
 100a78c:	100ea400 	call	100ea40 <__ltdf2>
 100a790:	10000916 	blt	r2,zero,100a7b8 <_strtod_r+0xdcc>
 100a794:	008d6c34 	movhi	r2,13744
 100a798:	10b94d44 	addi	r2,r2,-6859
 100a79c:	00cff834 	movhi	r3,16352
 100a7a0:	880b883a 	mov	r5,r17
 100a7a4:	180f883a 	mov	r7,r3
 100a7a8:	8009883a 	mov	r4,r16
 100a7ac:	100d883a 	mov	r6,r2
 100a7b0:	100e9300 	call	100e930 <__gtdf2>
 100a7b4:	00bf5c0e 	bge	zero,r2,100a528 <_strtod_r+0xb3c>
 100a7b8:	d9400517 	ldw	r5,20(sp)
 100a7bc:	a809883a 	mov	r4,r21
 100a7c0:	1007b6c0 	call	1007b6c <_Bfree>
 100a7c4:	a809883a 	mov	r4,r21
 100a7c8:	b80b883a 	mov	r5,r23
 100a7cc:	1007b6c0 	call	1007b6c <_Bfree>
 100a7d0:	a809883a 	mov	r4,r21
 100a7d4:	b00b883a 	mov	r5,r22
 100a7d8:	1007b6c0 	call	1007b6c <_Bfree>
 100a7dc:	d9401017 	ldw	r5,64(sp)
 100a7e0:	a809883a 	mov	r4,r21
 100a7e4:	1007b6c0 	call	1007b6c <_Bfree>
 100a7e8:	a809883a 	mov	r4,r21
 100a7ec:	a00b883a 	mov	r5,r20
 100a7f0:	1007b6c0 	call	1007b6c <_Bfree>
 100a7f4:	003cf406 	br	1009bc8 <_strtod_r+0x1dc>
 100a7f8:	0080d434 	movhi	r2,848
 100a7fc:	288d883a 	add	r6,r5,r2
 100a800:	e1800115 	stw	r6,4(fp)
 100a804:	003f4306 	br	100a514 <_strtod_r+0xb28>
 100a808:	8005883a 	mov	r2,r16
 100a80c:	88e0003c 	xorhi	r3,r17,32768
 100a810:	003f2606 	br	100a4ac <_strtod_r+0xac0>
 100a814:	1009883a 	mov	r4,r2
 100a818:	100ed940 	call	100ed94 <__floatunsidf>
 100a81c:	1021883a 	mov	r16,r2
 100a820:	1823883a 	mov	r17,r3
 100a824:	003f1e06 	br	100a4a0 <_strtod_r+0xab4>
 100a828:	da000417 	ldw	r8,16(sp)
 100a82c:	39c00044 	addi	r7,r7,1
 100a830:	003e6706 	br	100a1d0 <_strtod_r+0x7e4>
 100a834:	d8c00b17 	ldw	r3,44(sp)
 100a838:	00bfffc4 	movi	r2,-1
 100a83c:	18bf831e 	bne	r3,r2,100a64c <_strtod_r+0xc60>
 100a840:	00c00884 	movi	r3,34
 100a844:	a8c00015 	stw	r3,0(r21)
 100a848:	009ffc34 	movhi	r2,32752
 100a84c:	e0800115 	stw	r2,4(fp)
 100a850:	e0000015 	stw	zero,0(fp)
 100a854:	003fd806 	br	100a7b8 <_strtod_r+0xdcc>
 100a858:	4007883a 	mov	r3,r8
 100a85c:	000d883a 	mov	r6,zero
 100a860:	0029883a 	mov	r20,zero
 100a864:	0021883a 	mov	r16,zero
 100a868:	003cc906 	br	1009b90 <_strtod_r+0x1a4>
 100a86c:	00a52834 	movhi	r2,38048
 100a870:	108d6544 	addi	r2,r2,13717
 100a874:	00cff434 	movhi	r3,16336
 100a878:	18ffffc4 	addi	r3,r3,-1
 100a87c:	2809883a 	mov	r4,r5
 100a880:	180f883a 	mov	r7,r3
 100a884:	300b883a 	mov	r5,r6
 100a888:	100d883a 	mov	r6,r2
 100a88c:	100ea400 	call	100ea40 <__ltdf2>
 100a890:	103f250e 	bge	r2,zero,100a528 <_strtod_r+0xb3c>
 100a894:	003fc806 	br	100a7b8 <_strtod_r+0xdcc>
 100a898:	0027883a 	mov	r19,zero
 100a89c:	04800044 	movi	r18,1
 100a8a0:	0015883a 	mov	r10,zero
 100a8a4:	003cc006 	br	1009ba8 <_strtod_r+0x1bc>
 100a8a8:	00800884 	movi	r2,34
 100a8ac:	a8800015 	stw	r2,0(r21)
 100a8b0:	019ffc34 	movhi	r6,32752
 100a8b4:	e1800115 	stw	r6,4(fp)
 100a8b8:	e0000015 	stw	zero,0(fp)
 100a8bc:	003cc206 	br	1009bc8 <_strtod_r+0x1dc>
 100a8c0:	015387c4 	movi	r5,19999
 100a8c4:	003d1e06 	br	1009d40 <_strtod_r+0x354>
 100a8c8:	300a90fa 	slli	r5,r6,3
 100a8cc:	e0800017 	ldw	r2,0(fp)
 100a8d0:	e0c00117 	ldw	r3,4(fp)
 100a8d4:	01004074 	movhi	r4,257
 100a8d8:	210c2e04 	addi	r4,r4,12472
 100a8dc:	290b883a 	add	r5,r5,r4
 100a8e0:	2a000017 	ldw	r8,0(r5)
 100a8e4:	2a400117 	ldw	r9,4(r5)
 100a8e8:	1009883a 	mov	r4,r2
 100a8ec:	180b883a 	mov	r5,r3
 100a8f0:	480f883a 	mov	r7,r9
 100a8f4:	400d883a 	mov	r6,r8
 100a8f8:	100e2040 	call	100e204 <__muldf3>
 100a8fc:	e0c00115 	stw	r3,4(fp)
 100a900:	e0800015 	stw	r2,0(fp)
 100a904:	003cb006 	br	1009bc8 <_strtod_r+0x1dc>
 100a908:	d8800d17 	ldw	r2,52(sp)
 100a90c:	e0800015 	stw	r2,0(fp)
 100a910:	d8c00e17 	ldw	r3,56(sp)
 100a914:	e0c00115 	stw	r3,4(fp)
 100a918:	9880020c 	andi	r2,r19,8
 100a91c:	103caa26 	beq	r2,zero,1009bc8 <_strtod_r+0x1dc>
 100a920:	e0800117 	ldw	r2,4(fp)
 100a924:	10a00034 	orhi	r2,r2,32768
 100a928:	e0800115 	stw	r2,4(fp)
 100a92c:	003ca606 	br	1009bc8 <_strtod_r+0x1dc>
 100a930:	009ffc34 	movhi	r2,32752
 100a934:	e0800115 	stw	r2,4(fp)
 100a938:	e0000015 	stw	zero,0(fp)
 100a93c:	003ff606 	br	100a918 <_strtod_r+0xf2c>
 100a940:	00a00034 	movhi	r2,32768
 100a944:	10bfffc4 	addi	r2,r2,-1
 100a948:	00ffffc4 	movi	r3,-1
 100a94c:	e0800115 	stw	r2,4(fp)
 100a950:	e0c00015 	stw	r3,0(fp)
 100a954:	003ff006 	br	100a918 <_strtod_r+0xf2c>
 100a958:	e0000115 	stw	zero,4(fp)
 100a95c:	e0000015 	stw	zero,0(fp)
 100a960:	003fed06 	br	100a918 <_strtod_r+0xf2c>
 100a964:	d8800e17 	ldw	r2,56(sp)
 100a968:	29010cc4 	addi	r4,r5,1075
 100a96c:	00fffc34 	movhi	r3,65520
 100a970:	18ffffc4 	addi	r3,r3,-1
 100a974:	2008953a 	slli	r4,r4,20
 100a978:	10c4703a 	and	r2,r2,r3
 100a97c:	d8c00d17 	ldw	r3,52(sp)
 100a980:	1104b03a 	or	r2,r2,r4
 100a984:	e0800115 	stw	r2,4(fp)
 100a988:	e0c00015 	stw	r3,0(fp)
 100a98c:	003fe206 	br	100a918 <_strtod_r+0xf2c>
 100a990:	00800884 	movi	r2,34
 100a994:	a8800015 	stw	r2,0(r21)
 100a998:	e0000015 	stw	zero,0(fp)
 100a99c:	e0000115 	stw	zero,4(fp)
 100a9a0:	003f8506 	br	100a7b8 <_strtod_r+0xdcc>
 100a9a4:	03800044 	movi	r14,1
 100a9a8:	003d7706 	br	1009f88 <_strtod_r+0x59c>
 100a9ac:	99c5883a 	add	r2,r19,r7
 100a9b0:	11ffffc4 	addi	r7,r2,-1
 100a9b4:	00800204 	movi	r2,8
 100a9b8:	3cc00044 	addi	r19,r7,1
 100a9bc:	11c0df16 	blt	r2,r7,100ad3c <_strtod_r+0x1350>
 100a9c0:	a08002a4 	muli	r2,r20,10
 100a9c4:	000f883a 	mov	r7,zero
 100a9c8:	1269883a 	add	r20,r2,r9
 100a9cc:	42000044 	addi	r8,r8,1
 100a9d0:	da000415 	stw	r8,16(sp)
 100a9d4:	41000007 	ldb	r4,0(r8)
 100a9d8:	003d3706 	br	1009eb8 <_strtod_r+0x4cc>
 100a9dc:	d9801317 	ldw	r6,76(sp)
 100a9e0:	3000511e 	bne	r6,zero,100ab28 <_strtod_r+0x113c>
 100a9e4:	e0800017 	ldw	r2,0(fp)
 100a9e8:	1000d81e 	bne	r2,zero,100ad4c <_strtod_r+0x1360>
 100a9ec:	e0c00117 	ldw	r3,4(fp)
 100a9f0:	01000434 	movhi	r4,16
 100a9f4:	213fffc4 	addi	r4,r4,-1
 100a9f8:	1904703a 	and	r2,r3,r4
 100a9fc:	1000b01e 	bne	r2,zero,100acc0 <_strtod_r+0x12d4>
 100aa00:	18dffc2c 	andhi	r3,r3,32752
 100aa04:	0081ac34 	movhi	r2,1712
 100aa08:	10c1102e 	bgeu	r2,r3,100ae4c <_strtod_r+0x1460>
 100aa0c:	a0800517 	ldw	r2,20(r20)
 100aa10:	1000031e 	bne	r2,zero,100aa20 <_strtod_r+0x1034>
 100aa14:	a0c00417 	ldw	r3,16(r20)
 100aa18:	00800044 	movi	r2,1
 100aa1c:	10c0420e 	bge	r2,r3,100ab28 <_strtod_r+0x113c>
 100aa20:	a00b883a 	mov	r5,r20
 100aa24:	a809883a 	mov	r4,r21
 100aa28:	01800044 	movi	r6,1
 100aa2c:	10084b00 	call	10084b0 <__lshift>
 100aa30:	1009883a 	mov	r4,r2
 100aa34:	b00b883a 	mov	r5,r22
 100aa38:	1029883a 	mov	r20,r2
 100aa3c:	1007cc80 	call	1007cc8 <__mcmp>
 100aa40:	0080c20e 	bge	zero,r2,100ad4c <_strtod_r+0x1360>
 100aa44:	e1800117 	ldw	r6,4(fp)
 100aa48:	d9001417 	ldw	r4,80(sp)
 100aa4c:	2013003a 	cmpeq	r9,r4,zero
 100aa50:	4800ef1e 	bne	r9,zero,100ae10 <_strtod_r+0x1424>
 100aa54:	30dffc2c 	andhi	r3,r6,32752
 100aa58:	0081ac34 	movhi	r2,1712
 100aa5c:	10c0ec36 	bltu	r2,r3,100ae10 <_strtod_r+0x1424>
 100aa60:	0080dc34 	movhi	r2,880
 100aa64:	10ffca2e 	bgeu	r2,r3,100a990 <_strtod_r+0xfa4>
 100aa68:	e0800017 	ldw	r2,0(fp)
 100aa6c:	e0c00117 	ldw	r3,4(fp)
 100aa70:	020e5434 	movhi	r8,14672
 100aa74:	000d883a 	mov	r6,zero
 100aa78:	400f883a 	mov	r7,r8
 100aa7c:	180b883a 	mov	r5,r3
 100aa80:	1009883a 	mov	r4,r2
 100aa84:	da000c15 	stw	r8,48(sp)
 100aa88:	d8000b15 	stw	zero,44(sp)
 100aa8c:	100e2040 	call	100e204 <__muldf3>
 100aa90:	e0800015 	stw	r2,0(fp)
 100aa94:	e0c00115 	stw	r3,4(fp)
 100aa98:	183f471e 	bne	r3,zero,100a7b8 <_strtod_r+0xdcc>
 100aa9c:	103f461e 	bne	r2,zero,100a7b8 <_strtod_r+0xdcc>
 100aaa0:	00800884 	movi	r2,34
 100aaa4:	a8800015 	stw	r2,0(r21)
 100aaa8:	003f4306 	br	100a7b8 <_strtod_r+0xdcc>
 100aaac:	d8801317 	ldw	r2,76(sp)
 100aab0:	1025003a 	cmpeq	r18,r2,zero
 100aab4:	9000861e 	bne	r18,zero,100acd0 <_strtod_r+0x12e4>
 100aab8:	e1400117 	ldw	r5,4(fp)
 100aabc:	00c00434 	movhi	r3,16
 100aac0:	18ffffc4 	addi	r3,r3,-1
 100aac4:	28c4703a 	and	r2,r5,r3
 100aac8:	10c01b26 	beq	r2,r3,100ab38 <_strtod_r+0x114c>
 100aacc:	e1c00017 	ldw	r7,0(fp)
 100aad0:	3880004c 	andi	r2,r7,1
 100aad4:	1005003a 	cmpeq	r2,r2,zero
 100aad8:	1000791e 	bne	r2,zero,100acc0 <_strtod_r+0x12d4>
 100aadc:	9000b126 	beq	r18,zero,100ada4 <_strtod_r+0x13b8>
 100aae0:	e4400117 	ldw	r17,4(fp)
 100aae4:	3809883a 	mov	r4,r7
 100aae8:	3821883a 	mov	r16,r7
 100aaec:	880b883a 	mov	r5,r17
 100aaf0:	1007d280 	call	1007d28 <__ulp>
 100aaf4:	180f883a 	mov	r7,r3
 100aaf8:	880b883a 	mov	r5,r17
 100aafc:	8009883a 	mov	r4,r16
 100ab00:	100d883a 	mov	r6,r2
 100ab04:	100e1100 	call	100e110 <__subdf3>
 100ab08:	1009883a 	mov	r4,r2
 100ab0c:	000d883a 	mov	r6,zero
 100ab10:	000f883a 	mov	r7,zero
 100ab14:	180b883a 	mov	r5,r3
 100ab18:	e0800015 	stw	r2,0(fp)
 100ab1c:	e0c00115 	stw	r3,4(fp)
 100ab20:	100e8a80 	call	100e8a8 <__nedf2>
 100ab24:	103f9a26 	beq	r2,zero,100a990 <_strtod_r+0xfa4>
 100ab28:	d9001417 	ldw	r4,80(sp)
 100ab2c:	2013003a 	cmpeq	r9,r4,zero
 100ab30:	483f211e 	bne	r9,zero,100a7b8 <_strtod_r+0xdcc>
 100ab34:	003fcc06 	br	100aa68 <_strtod_r+0x107c>
 100ab38:	d9001417 	ldw	r4,80(sp)
 100ab3c:	e1c00017 	ldw	r7,0(fp)
 100ab40:	2013003a 	cmpeq	r9,r4,zero
 100ab44:	4800bd1e 	bne	r9,zero,100ae3c <_strtod_r+0x1450>
 100ab48:	28dffc2c 	andhi	r3,r5,32752
 100ab4c:	0081a834 	movhi	r2,1696
 100ab50:	10c0ba36 	bltu	r2,r3,100ae3c <_strtod_r+0x1450>
 100ab54:	1804d53a 	srli	r2,r3,20
 100ab58:	00c01ac4 	movi	r3,107
 100ab5c:	013fffc4 	movi	r4,-1
 100ab60:	1887c83a 	sub	r3,r3,r2
 100ab64:	20c4983a 	sll	r2,r4,r3
 100ab68:	11ffd91e 	bne	r2,r7,100aad0 <_strtod_r+0x10e4>
 100ab6c:	28dffc2c 	andhi	r3,r5,32752
 100ab70:	00800434 	movhi	r2,16
 100ab74:	188d883a 	add	r6,r3,r2
 100ab78:	e1800115 	stw	r6,4(fp)
 100ab7c:	e0000015 	stw	zero,0(fp)
 100ab80:	483f0d1e 	bne	r9,zero,100a7b8 <_strtod_r+0xdcc>
 100ab84:	003fb806 	br	100aa68 <_strtod_r+0x107c>
 100ab88:	0021883a 	mov	r16,zero
 100ab8c:	0005883a 	mov	r2,zero
 100ab90:	044ff834 	movhi	r17,16352
 100ab94:	00eff834 	movhi	r3,49120
 100ab98:	003e8606 	br	100a5b4 <_strtod_r+0xbc8>
 100ab9c:	803d9e26 	beq	r16,zero,100a218 <_strtod_r+0x82c>
 100aba0:	0421c83a 	sub	r16,zero,r16
 100aba4:	814003cc 	andi	r5,r16,15
 100aba8:	28000f26 	beq	r5,zero,100abe8 <_strtod_r+0x11fc>
 100abac:	280a90fa 	slli	r5,r5,3
 100abb0:	01004074 	movhi	r4,257
 100abb4:	210c2e04 	addi	r4,r4,12472
 100abb8:	e0800017 	ldw	r2,0(fp)
 100abbc:	290b883a 	add	r5,r5,r4
 100abc0:	2a000017 	ldw	r8,0(r5)
 100abc4:	e0c00117 	ldw	r3,4(fp)
 100abc8:	2a400117 	ldw	r9,4(r5)
 100abcc:	1009883a 	mov	r4,r2
 100abd0:	180b883a 	mov	r5,r3
 100abd4:	480f883a 	mov	r7,r9
 100abd8:	400d883a 	mov	r6,r8
 100abdc:	100e5c80 	call	100e5c8 <__divdf3>
 100abe0:	e0c00115 	stw	r3,4(fp)
 100abe4:	e0800015 	stw	r2,0(fp)
 100abe8:	8021d13a 	srai	r16,r16,4
 100abec:	803d8a26 	beq	r16,zero,100a218 <_strtod_r+0x82c>
 100abf0:	008007c4 	movi	r2,31
 100abf4:	14002d16 	blt	r2,r16,100acac <_strtod_r+0x12c0>
 100abf8:	8080040c 	andi	r2,r16,16
 100abfc:	10009926 	beq	r2,zero,100ae64 <_strtod_r+0x1478>
 100ac00:	00801a84 	movi	r2,106
 100ac04:	d8801415 	stw	r2,80(sp)
 100ac08:	0400110e 	bge	zero,r16,100ac50 <_strtod_r+0x1264>
 100ac0c:	04404074 	movhi	r17,257
 100ac10:	8c4c7b04 	addi	r17,r17,12780
 100ac14:	8080004c 	andi	r2,r16,1
 100ac18:	1005003a 	cmpeq	r2,r2,zero
 100ac1c:	1000091e 	bne	r2,zero,100ac44 <_strtod_r+0x1258>
 100ac20:	e0800017 	ldw	r2,0(fp)
 100ac24:	e0c00117 	ldw	r3,4(fp)
 100ac28:	89800017 	ldw	r6,0(r17)
 100ac2c:	89c00117 	ldw	r7,4(r17)
 100ac30:	180b883a 	mov	r5,r3
 100ac34:	1009883a 	mov	r4,r2
 100ac38:	100e2040 	call	100e204 <__muldf3>
 100ac3c:	e0c00115 	stw	r3,4(fp)
 100ac40:	e0800015 	stw	r2,0(fp)
 100ac44:	8021d07a 	srai	r16,r16,1
 100ac48:	8c400204 	addi	r17,r17,8
 100ac4c:	043ff116 	blt	zero,r16,100ac14 <_strtod_r+0x1228>
 100ac50:	d8c01417 	ldw	r3,80(sp)
 100ac54:	18000d26 	beq	r3,zero,100ac8c <_strtod_r+0x12a0>
 100ac58:	e1000117 	ldw	r4,4(fp)
 100ac5c:	00c01ac4 	movi	r3,107
 100ac60:	209ffc2c 	andhi	r2,r4,32752
 100ac64:	1004d53a 	srli	r2,r2,20
 100ac68:	1887c83a 	sub	r3,r3,r2
 100ac6c:	00c0070e 	bge	zero,r3,100ac8c <_strtod_r+0x12a0>
 100ac70:	008007c4 	movi	r2,31
 100ac74:	10c0900e 	bge	r2,r3,100aeb8 <_strtod_r+0x14cc>
 100ac78:	00800d04 	movi	r2,52
 100ac7c:	e0000015 	stw	zero,0(fp)
 100ac80:	10c0870e 	bge	r2,r3,100aea0 <_strtod_r+0x14b4>
 100ac84:	0180dc34 	movhi	r6,880
 100ac88:	e1800115 	stw	r6,4(fp)
 100ac8c:	e0800017 	ldw	r2,0(fp)
 100ac90:	e0c00117 	ldw	r3,4(fp)
 100ac94:	000d883a 	mov	r6,zero
 100ac98:	000f883a 	mov	r7,zero
 100ac9c:	180b883a 	mov	r5,r3
 100aca0:	1009883a 	mov	r4,r2
 100aca4:	100e8a80 	call	100e8a8 <__nedf2>
 100aca8:	103d5c1e 	bne	r2,zero,100a21c <_strtod_r+0x830>
 100acac:	00800884 	movi	r2,34
 100acb0:	a8800015 	stw	r2,0(r21)
 100acb4:	e0000015 	stw	zero,0(fp)
 100acb8:	e0000115 	stw	zero,4(fp)
 100acbc:	003bc206 	br	1009bc8 <_strtod_r+0x1dc>
 100acc0:	d8801417 	ldw	r2,80(sp)
 100acc4:	1013003a 	cmpeq	r9,r2,zero
 100acc8:	483ebb1e 	bne	r9,zero,100a7b8 <_strtod_r+0xdcc>
 100accc:	003f6606 	br	100aa68 <_strtod_r+0x107c>
 100acd0:	e1800117 	ldw	r6,4(fp)
 100acd4:	00c00434 	movhi	r3,16
 100acd8:	18ffffc4 	addi	r3,r3,-1
 100acdc:	30c4703a 	and	r2,r6,r3
 100ace0:	103f7a1e 	bne	r2,zero,100aacc <_strtod_r+0x10e0>
 100ace4:	e1c00017 	ldw	r7,0(fp)
 100ace8:	383f791e 	bne	r7,zero,100aad0 <_strtod_r+0x10e4>
 100acec:	003f5606 	br	100aa48 <_strtod_r+0x105c>
 100acf0:	d9800f17 	ldw	r6,60(sp)
 100acf4:	00bffa84 	movi	r2,-22
 100acf8:	30bcd416 	blt	r6,r2,100a04c <_strtod_r+0x660>
 100acfc:	317ffe24 	muli	r5,r6,-8
 100ad00:	01004074 	movhi	r4,257
 100ad04:	210c2e04 	addi	r4,r4,12472
 100ad08:	e0800017 	ldw	r2,0(fp)
 100ad0c:	290b883a 	add	r5,r5,r4
 100ad10:	2a000017 	ldw	r8,0(r5)
 100ad14:	e0c00117 	ldw	r3,4(fp)
 100ad18:	2a400117 	ldw	r9,4(r5)
 100ad1c:	1009883a 	mov	r4,r2
 100ad20:	180b883a 	mov	r5,r3
 100ad24:	480f883a 	mov	r7,r9
 100ad28:	400d883a 	mov	r6,r8
 100ad2c:	100e5c80 	call	100e5c8 <__divdf3>
 100ad30:	e0c00115 	stw	r3,4(fp)
 100ad34:	e0800015 	stw	r2,0(fp)
 100ad38:	003ba306 	br	1009bc8 <_strtod_r+0x1dc>
 100ad3c:	00800404 	movi	r2,16
 100ad40:	14c02f0e 	bge	r2,r19,100ae00 <_strtod_r+0x1414>
 100ad44:	000f883a 	mov	r7,zero
 100ad48:	003f2006 	br	100a9cc <_strtod_r+0xfe0>
 100ad4c:	d9801417 	ldw	r6,80(sp)
 100ad50:	3013003a 	cmpeq	r9,r6,zero
 100ad54:	483e981e 	bne	r9,zero,100a7b8 <_strtod_r+0xdcc>
 100ad58:	003f4306 	br	100aa68 <_strtod_r+0x107c>
 100ad5c:	00801a44 	movi	r2,105
 100ad60:	20bc6326 	beq	r4,r2,1009ef0 <_strtod_r+0x504>
 100ad64:	00801b84 	movi	r2,110
 100ad68:	20bbba1e 	bne	r4,r2,1009c54 <_strtod_r+0x268>
 100ad6c:	dc000404 	addi	r16,sp,16
 100ad70:	8009883a 	mov	r4,r16
 100ad74:	01404074 	movhi	r5,257
 100ad78:	294c7a04 	addi	r5,r5,12776
 100ad7c:	10099a40 	call	10099a4 <match>
 100ad80:	103bb426 	beq	r2,zero,1009c54 <_strtod_r+0x268>
 100ad84:	d8800417 	ldw	r2,16(sp)
 100ad88:	00c00a04 	movi	r3,40
 100ad8c:	11000007 	ldb	r4,0(r2)
 100ad90:	20c03626 	beq	r4,r3,100ae6c <_strtod_r+0x1480>
 100ad94:	01bffe34 	movhi	r6,65528
 100ad98:	e1800115 	stw	r6,4(fp)
 100ad9c:	e0000015 	stw	zero,0(fp)
 100ada0:	003b8906 	br	1009bc8 <_strtod_r+0x1dc>
 100ada4:	e4400117 	ldw	r17,4(fp)
 100ada8:	3809883a 	mov	r4,r7
 100adac:	3821883a 	mov	r16,r7
 100adb0:	880b883a 	mov	r5,r17
 100adb4:	1007d280 	call	1007d28 <__ulp>
 100adb8:	100d883a 	mov	r6,r2
 100adbc:	880b883a 	mov	r5,r17
 100adc0:	180f883a 	mov	r7,r3
 100adc4:	8009883a 	mov	r4,r16
 100adc8:	100e1900 	call	100e190 <__adddf3>
 100adcc:	d9801417 	ldw	r6,80(sp)
 100add0:	e0c00115 	stw	r3,4(fp)
 100add4:	e0800015 	stw	r2,0(fp)
 100add8:	3013003a 	cmpeq	r9,r6,zero
 100addc:	483e761e 	bne	r9,zero,100a7b8 <_strtod_r+0xdcc>
 100ade0:	003f2106 	br	100aa68 <_strtod_r+0x107c>
 100ade4:	000f883a 	mov	r7,zero
 100ade8:	003cf006 	br	100a1ac <_strtod_r+0x7c0>
 100adec:	0080d434 	movhi	r2,848
 100adf0:	188d883a 	add	r6,r3,r2
 100adf4:	d8001415 	stw	zero,80(sp)
 100adf8:	e1800115 	stw	r6,4(fp)
 100adfc:	003d0706 	br	100a21c <_strtod_r+0x830>
 100ae00:	808002a4 	muli	r2,r16,10
 100ae04:	000f883a 	mov	r7,zero
 100ae08:	1261883a 	add	r16,r2,r9
 100ae0c:	003eef06 	br	100a9cc <_strtod_r+0xfe0>
 100ae10:	309ffc2c 	andhi	r2,r6,32752
 100ae14:	00fffc34 	movhi	r3,65520
 100ae18:	10c5883a 	add	r2,r2,r3
 100ae1c:	00c00434 	movhi	r3,16
 100ae20:	18ffffc4 	addi	r3,r3,-1
 100ae24:	10ccb03a 	or	r6,r2,r3
 100ae28:	01ffffc4 	movi	r7,-1
 100ae2c:	e1800115 	stw	r6,4(fp)
 100ae30:	e1c00015 	stw	r7,0(fp)
 100ae34:	483e601e 	bne	r9,zero,100a7b8 <_strtod_r+0xdcc>
 100ae38:	003f0b06 	br	100aa68 <_strtod_r+0x107c>
 100ae3c:	00bfffc4 	movi	r2,-1
 100ae40:	003f4906 	br	100ab68 <_strtod_r+0x117c>
 100ae44:	0025883a 	mov	r18,zero
 100ae48:	003cb106 	br	100a110 <_strtod_r+0x724>
 100ae4c:	d8c01417 	ldw	r3,80(sp)
 100ae50:	1813003a 	cmpeq	r9,r3,zero
 100ae54:	483e581e 	bne	r9,zero,100a7b8 <_strtod_r+0xdcc>
 100ae58:	003f0306 	br	100aa68 <_strtod_r+0x107c>
 100ae5c:	980f883a 	mov	r7,r19
 100ae60:	003ed406 	br	100a9b4 <_strtod_r+0xfc8>
 100ae64:	d8001415 	stw	zero,80(sp)
 100ae68:	003f6706 	br	100ac08 <_strtod_r+0x121c>
 100ae6c:	8009883a 	mov	r4,r16
 100ae70:	01404074 	movhi	r5,257
 100ae74:	294eed04 	addi	r5,r5,15284
 100ae78:	d9800d04 	addi	r6,sp,52
 100ae7c:	100cb280 	call	100cb28 <__hexnan>
 100ae80:	00c00144 	movi	r3,5
 100ae84:	10ffc31e 	bne	r2,r3,100ad94 <_strtod_r+0x13a8>
 100ae88:	d8800e17 	ldw	r2,56(sp)
 100ae8c:	d9c00d17 	ldw	r7,52(sp)
 100ae90:	119ffc34 	orhi	r6,r2,32752
 100ae94:	e1800115 	stw	r6,4(fp)
 100ae98:	e1c00015 	stw	r7,0(fp)
 100ae9c:	003b4a06 	br	1009bc8 <_strtod_r+0x1dc>
 100aea0:	18fff804 	addi	r3,r3,-32
 100aea4:	00bfffc4 	movi	r2,-1
 100aea8:	10c4983a 	sll	r2,r2,r3
 100aeac:	208c703a 	and	r6,r4,r2
 100aeb0:	e1800115 	stw	r6,4(fp)
 100aeb4:	003f7506 	br	100ac8c <_strtod_r+0x12a0>
 100aeb8:	00bfffc4 	movi	r2,-1
 100aebc:	10c4983a 	sll	r2,r2,r3
 100aec0:	e0c00017 	ldw	r3,0(fp)
 100aec4:	188e703a 	and	r7,r3,r2
 100aec8:	e1c00015 	stw	r7,0(fp)
 100aecc:	003f6f06 	br	100ac8c <_strtod_r+0x12a0>

0100aed0 <strtof>:
 100aed0:	defffa04 	addi	sp,sp,-24
 100aed4:	dd000415 	stw	r20,16(sp)
 100aed8:	05004074 	movhi	r20,257
 100aedc:	a5139004 	addi	r20,r20,20032
 100aee0:	2007883a 	mov	r3,r4
 100aee4:	a1000017 	ldw	r4,0(r20)
 100aee8:	280d883a 	mov	r6,r5
 100aeec:	180b883a 	mov	r5,r3
 100aef0:	dfc00515 	stw	ra,20(sp)
 100aef4:	dcc00315 	stw	r19,12(sp)
 100aef8:	dc800215 	stw	r18,8(sp)
 100aefc:	dc400115 	stw	r17,4(sp)
 100af00:	dc000015 	stw	r16,0(sp)
 100af04:	10099ec0 	call	10099ec <_strtod_r>
 100af08:	180b883a 	mov	r5,r3
 100af0c:	1009883a 	mov	r4,r2
 100af10:	1823883a 	mov	r17,r3
 100af14:	1021883a 	mov	r16,r2
 100af18:	100ed200 	call	100ed20 <__truncdfsf2>
 100af1c:	1009883a 	mov	r4,r2
 100af20:	000b883a 	mov	r5,zero
 100af24:	1025883a 	mov	r18,r2
 100af28:	1027883a 	mov	r19,r2
 100af2c:	100db980 	call	100db98 <__nesf2>
 100af30:	000d883a 	mov	r6,zero
 100af34:	000f883a 	mov	r7,zero
 100af38:	8009883a 	mov	r4,r16
 100af3c:	880b883a 	mov	r5,r17
 100af40:	10000e1e 	bne	r2,zero,100af7c <strtof+0xac>
 100af44:	100e8a80 	call	100e8a8 <__nedf2>
 100af48:	10000c26 	beq	r2,zero,100af7c <strtof+0xac>
 100af4c:	a0c00017 	ldw	r3,0(r20)
 100af50:	00800884 	movi	r2,34
 100af54:	18800015 	stw	r2,0(r3)
 100af58:	9805883a 	mov	r2,r19
 100af5c:	dfc00517 	ldw	ra,20(sp)
 100af60:	dd000417 	ldw	r20,16(sp)
 100af64:	dcc00317 	ldw	r19,12(sp)
 100af68:	dc800217 	ldw	r18,8(sp)
 100af6c:	dc400117 	ldw	r17,4(sp)
 100af70:	dc000017 	ldw	r16,0(sp)
 100af74:	dec00604 	addi	sp,sp,24
 100af78:	f800283a 	ret
 100af7c:	9009883a 	mov	r4,r18
 100af80:	015fe034 	movhi	r5,32640
 100af84:	297fffc4 	addi	r5,r5,-1
 100af88:	100dc100 	call	100dc10 <__gtsf2>
 100af8c:	00ffffc4 	movi	r3,-1
 100af90:	011ffc34 	movhi	r4,32752
 100af94:	213fffc4 	addi	r4,r4,-1
 100af98:	200f883a 	mov	r7,r4
 100af9c:	180d883a 	mov	r6,r3
 100afa0:	8009883a 	mov	r4,r16
 100afa4:	880b883a 	mov	r5,r17
 100afa8:	00800f16 	blt	zero,r2,100afe8 <strtof+0x118>
 100afac:	9009883a 	mov	r4,r18
 100afb0:	017fe034 	movhi	r5,65408
 100afb4:	297fffc4 	addi	r5,r5,-1
 100afb8:	100dc880 	call	100dc88 <__ltsf2>
 100afbc:	023fffc4 	movi	r8,-1
 100afc0:	027ffc34 	movhi	r9,65520
 100afc4:	4a7fffc4 	addi	r9,r9,-1
 100afc8:	880b883a 	mov	r5,r17
 100afcc:	480f883a 	mov	r7,r9
 100afd0:	8009883a 	mov	r4,r16
 100afd4:	400d883a 	mov	r6,r8
 100afd8:	103fdf0e 	bge	r2,zero,100af58 <strtof+0x88>
 100afdc:	100ea400 	call	100ea40 <__ltdf2>
 100afe0:	103fda0e 	bge	r2,zero,100af4c <strtof+0x7c>
 100afe4:	003fdc06 	br	100af58 <strtof+0x88>
 100afe8:	100e9300 	call	100e930 <__gtdf2>
 100afec:	00bfd70e 	bge	zero,r2,100af4c <strtof+0x7c>
 100aff0:	003fee06 	br	100afac <strtof+0xdc>

0100aff4 <strtod>:
 100aff4:	01804074 	movhi	r6,257
 100aff8:	31939004 	addi	r6,r6,20032
 100affc:	2007883a 	mov	r3,r4
 100b000:	31000017 	ldw	r4,0(r6)
 100b004:	280d883a 	mov	r6,r5
 100b008:	180b883a 	mov	r5,r3
 100b00c:	10099ec1 	jmpi	10099ec <_strtod_r>

0100b010 <_strtol_r>:
 100b010:	defff304 	addi	sp,sp,-52
 100b014:	00804074 	movhi	r2,257
 100b018:	10938f04 	addi	r2,r2,20028
 100b01c:	dcc00615 	stw	r19,24(sp)
 100b020:	14c00017 	ldw	r19,0(r2)
 100b024:	ddc00a15 	stw	r23,40(sp)
 100b028:	dc000315 	stw	r16,12(sp)
 100b02c:	dfc00c15 	stw	ra,48(sp)
 100b030:	df000b15 	stw	fp,44(sp)
 100b034:	dd800915 	stw	r22,36(sp)
 100b038:	dd400815 	stw	r21,32(sp)
 100b03c:	dd000715 	stw	r20,28(sp)
 100b040:	dc800515 	stw	r18,20(sp)
 100b044:	dc400415 	stw	r17,16(sp)
 100b048:	282f883a 	mov	r23,r5
 100b04c:	d9000015 	stw	r4,0(sp)
 100b050:	d9800115 	stw	r6,4(sp)
 100b054:	2821883a 	mov	r16,r5
 100b058:	84400007 	ldb	r17,0(r16)
 100b05c:	84000044 	addi	r16,r16,1
 100b060:	9c47883a 	add	r3,r19,r17
 100b064:	18800003 	ldbu	r2,0(r3)
 100b068:	1080020c 	andi	r2,r2,8
 100b06c:	103ffa1e 	bne	r2,zero,100b058 <_strtol_r+0x48>
 100b070:	00800b44 	movi	r2,45
 100b074:	88805c26 	beq	r17,r2,100b1e8 <_strtol_r+0x1d8>
 100b078:	00800ac4 	movi	r2,43
 100b07c:	88805726 	beq	r17,r2,100b1dc <_strtol_r+0x1cc>
 100b080:	0039883a 	mov	fp,zero
 100b084:	3807003a 	cmpeq	r3,r7,zero
 100b088:	1800431e 	bne	r3,zero,100b198 <_strtol_r+0x188>
 100b08c:	00800404 	movi	r2,16
 100b090:	38804126 	beq	r7,r2,100b198 <_strtol_r+0x188>
 100b094:	3829883a 	mov	r20,r7
 100b098:	e02cc03a 	cmpne	r22,fp,zero
 100b09c:	b0004b1e 	bne	r22,zero,100b1cc <_strtol_r+0x1bc>
 100b0a0:	04a00034 	movhi	r18,32768
 100b0a4:	94bfffc4 	addi	r18,r18,-1
 100b0a8:	9009883a 	mov	r4,r18
 100b0ac:	a00b883a 	mov	r5,r20
 100b0b0:	d9c00215 	stw	r7,8(sp)
 100b0b4:	100f06c0 	call	100f06c <__umodsi3>
 100b0b8:	9009883a 	mov	r4,r18
 100b0bc:	a00b883a 	mov	r5,r20
 100b0c0:	102b883a 	mov	r21,r2
 100b0c4:	100f0640 	call	100f064 <__udivsi3>
 100b0c8:	1011883a 	mov	r8,r2
 100b0cc:	9c45883a 	add	r2,r19,r17
 100b0d0:	11000003 	ldbu	r4,0(r2)
 100b0d4:	000b883a 	mov	r5,zero
 100b0d8:	000d883a 	mov	r6,zero
 100b0dc:	20c0010c 	andi	r3,r4,4
 100b0e0:	d9c00217 	ldw	r7,8(sp)
 100b0e4:	18000e26 	beq	r3,zero,100b120 <_strtol_r+0x110>
 100b0e8:	88fff404 	addi	r3,r17,-48
 100b0ec:	19c0140e 	bge	r3,r7,100b140 <_strtol_r+0x130>
 100b0f0:	30003116 	blt	r6,zero,100b1b8 <_strtol_r+0x1a8>
 100b0f4:	41403036 	bltu	r8,r5,100b1b8 <_strtol_r+0x1a8>
 100b0f8:	2a002e26 	beq	r5,r8,100b1b4 <_strtol_r+0x1a4>
 100b0fc:	2d05383a 	mul	r2,r5,r20
 100b100:	01800044 	movi	r6,1
 100b104:	10cb883a 	add	r5,r2,r3
 100b108:	84400007 	ldb	r17,0(r16)
 100b10c:	84000044 	addi	r16,r16,1
 100b110:	9c45883a 	add	r2,r19,r17
 100b114:	11000003 	ldbu	r4,0(r2)
 100b118:	20c0010c 	andi	r3,r4,4
 100b11c:	183ff21e 	bne	r3,zero,100b0e8 <_strtol_r+0xd8>
 100b120:	208000cc 	andi	r2,r4,3
 100b124:	10000626 	beq	r2,zero,100b140 <_strtol_r+0x130>
 100b128:	2080004c 	andi	r2,r4,1
 100b12c:	1005003a 	cmpeq	r2,r2,zero
 100b130:	1000231e 	bne	r2,zero,100b1c0 <_strtol_r+0x1b0>
 100b134:	00800dc4 	movi	r2,55
 100b138:	8887c83a 	sub	r3,r17,r2
 100b13c:	19ffec16 	blt	r3,r7,100b0f0 <_strtol_r+0xe0>
 100b140:	30002d16 	blt	r6,zero,100b1f8 <_strtol_r+0x1e8>
 100b144:	b000231e 	bne	r22,zero,100b1d4 <_strtol_r+0x1c4>
 100b148:	2807883a 	mov	r3,r5
 100b14c:	d8800117 	ldw	r2,4(sp)
 100b150:	10000426 	beq	r2,zero,100b164 <_strtol_r+0x154>
 100b154:	30000126 	beq	r6,zero,100b15c <_strtol_r+0x14c>
 100b158:	85ffffc4 	addi	r23,r16,-1
 100b15c:	d9000117 	ldw	r4,4(sp)
 100b160:	25c00015 	stw	r23,0(r4)
 100b164:	1805883a 	mov	r2,r3
 100b168:	dfc00c17 	ldw	ra,48(sp)
 100b16c:	df000b17 	ldw	fp,44(sp)
 100b170:	ddc00a17 	ldw	r23,40(sp)
 100b174:	dd800917 	ldw	r22,36(sp)
 100b178:	dd400817 	ldw	r21,32(sp)
 100b17c:	dd000717 	ldw	r20,28(sp)
 100b180:	dcc00617 	ldw	r19,24(sp)
 100b184:	dc800517 	ldw	r18,20(sp)
 100b188:	dc400417 	ldw	r17,16(sp)
 100b18c:	dc000317 	ldw	r16,12(sp)
 100b190:	dec00d04 	addi	sp,sp,52
 100b194:	f800283a 	ret
 100b198:	00800c04 	movi	r2,48
 100b19c:	88801d26 	beq	r17,r2,100b214 <_strtol_r+0x204>
 100b1a0:	183fbc26 	beq	r3,zero,100b094 <_strtol_r+0x84>
 100b1a4:	00800c04 	movi	r2,48
 100b1a8:	88802726 	beq	r17,r2,100b248 <_strtol_r+0x238>
 100b1ac:	01c00284 	movi	r7,10
 100b1b0:	003fb806 	br	100b094 <_strtol_r+0x84>
 100b1b4:	a8ffd10e 	bge	r21,r3,100b0fc <_strtol_r+0xec>
 100b1b8:	01bfffc4 	movi	r6,-1
 100b1bc:	003fd206 	br	100b108 <_strtol_r+0xf8>
 100b1c0:	008015c4 	movi	r2,87
 100b1c4:	8887c83a 	sub	r3,r17,r2
 100b1c8:	003fdc06 	br	100b13c <_strtol_r+0x12c>
 100b1cc:	04a00034 	movhi	r18,32768
 100b1d0:	003fb506 	br	100b0a8 <_strtol_r+0x98>
 100b1d4:	0147c83a 	sub	r3,zero,r5
 100b1d8:	003fdc06 	br	100b14c <_strtol_r+0x13c>
 100b1dc:	84400007 	ldb	r17,0(r16)
 100b1e0:	84000044 	addi	r16,r16,1
 100b1e4:	003fa606 	br	100b080 <_strtol_r+0x70>
 100b1e8:	84400007 	ldb	r17,0(r16)
 100b1ec:	07000044 	movi	fp,1
 100b1f0:	84000044 	addi	r16,r16,1
 100b1f4:	003fa306 	br	100b084 <_strtol_r+0x74>
 100b1f8:	e005003a 	cmpeq	r2,fp,zero
 100b1fc:	10000f1e 	bne	r2,zero,100b23c <_strtol_r+0x22c>
 100b200:	00e00034 	movhi	r3,32768
 100b204:	d9000017 	ldw	r4,0(sp)
 100b208:	00800884 	movi	r2,34
 100b20c:	20800015 	stw	r2,0(r4)
 100b210:	003fce06 	br	100b14c <_strtol_r+0x13c>
 100b214:	81000007 	ldb	r4,0(r16)
 100b218:	00801e04 	movi	r2,120
 100b21c:	20800226 	beq	r4,r2,100b228 <_strtol_r+0x218>
 100b220:	00801604 	movi	r2,88
 100b224:	20bfde1e 	bne	r4,r2,100b1a0 <_strtol_r+0x190>
 100b228:	84400047 	ldb	r17,1(r16)
 100b22c:	01c00404 	movi	r7,16
 100b230:	84000084 	addi	r16,r16,2
 100b234:	3829883a 	mov	r20,r7
 100b238:	003f9706 	br	100b098 <_strtol_r+0x88>
 100b23c:	00e00034 	movhi	r3,32768
 100b240:	18ffffc4 	addi	r3,r3,-1
 100b244:	003fef06 	br	100b204 <_strtol_r+0x1f4>
 100b248:	01c00204 	movi	r7,8
 100b24c:	3829883a 	mov	r20,r7
 100b250:	003f9106 	br	100b098 <_strtol_r+0x88>

0100b254 <strtol>:
 100b254:	00804074 	movhi	r2,257
 100b258:	10939004 	addi	r2,r2,20032
 100b25c:	2013883a 	mov	r9,r4
 100b260:	11000017 	ldw	r4,0(r2)
 100b264:	2805883a 	mov	r2,r5
 100b268:	300f883a 	mov	r7,r6
 100b26c:	480b883a 	mov	r5,r9
 100b270:	100d883a 	mov	r6,r2
 100b274:	100b0101 	jmpi	100b010 <_strtol_r>

0100b278 <_strtoll_r>:
 100b278:	defff004 	addi	sp,sp,-64
 100b27c:	00804074 	movhi	r2,257
 100b280:	10938f04 	addi	r2,r2,20028
 100b284:	df000e15 	stw	fp,56(sp)
 100b288:	17000017 	ldw	fp,0(r2)
 100b28c:	ddc00d15 	stw	r23,52(sp)
 100b290:	dd000a15 	stw	r20,40(sp)
 100b294:	dfc00f15 	stw	ra,60(sp)
 100b298:	dd800c15 	stw	r22,48(sp)
 100b29c:	dd400b15 	stw	r21,44(sp)
 100b2a0:	dcc00915 	stw	r19,36(sp)
 100b2a4:	dc800815 	stw	r18,32(sp)
 100b2a8:	dc400715 	stw	r17,28(sp)
 100b2ac:	dc000615 	stw	r16,24(sp)
 100b2b0:	d9400315 	stw	r5,12(sp)
 100b2b4:	d9000215 	stw	r4,8(sp)
 100b2b8:	d9800415 	stw	r6,16(sp)
 100b2bc:	382f883a 	mov	r23,r7
 100b2c0:	2829883a 	mov	r20,r5
 100b2c4:	a4c00007 	ldb	r19,0(r20)
 100b2c8:	a5000044 	addi	r20,r20,1
 100b2cc:	e4c7883a 	add	r3,fp,r19
 100b2d0:	18800003 	ldbu	r2,0(r3)
 100b2d4:	1080020c 	andi	r2,r2,8
 100b2d8:	103ffa1e 	bne	r2,zero,100b2c4 <_strtoll_r+0x4c>
 100b2dc:	00800b44 	movi	r2,45
 100b2e0:	98808826 	beq	r19,r2,100b504 <_strtoll_r+0x28c>
 100b2e4:	00800ac4 	movi	r2,43
 100b2e8:	98808326 	beq	r19,r2,100b4f8 <_strtoll_r+0x280>
 100b2ec:	d8000115 	stw	zero,4(sp)
 100b2f0:	b807003a 	cmpeq	r3,r23,zero
 100b2f4:	18005f1e 	bne	r3,zero,100b474 <_strtoll_r+0x1fc>
 100b2f8:	00800404 	movi	r2,16
 100b2fc:	b8805d26 	beq	r23,r2,100b474 <_strtoll_r+0x1fc>
 100b300:	b82dd7fa 	srai	r22,r23,31
 100b304:	b82b883a 	mov	r21,r23
 100b308:	d8c00117 	ldw	r3,4(sp)
 100b30c:	1806c03a 	cmpne	r3,r3,zero
 100b310:	d8c00515 	stw	r3,20(sp)
 100b314:	1800631e 	bne	r3,zero,100b4a4 <_strtoll_r+0x22c>
 100b318:	043fffc4 	movi	r16,-1
 100b31c:	04600034 	movhi	r17,32768
 100b320:	8c7fffc4 	addi	r17,r17,-1
 100b324:	880b883a 	mov	r5,r17
 100b328:	8009883a 	mov	r4,r16
 100b32c:	a80d883a 	mov	r6,r21
 100b330:	b00f883a 	mov	r7,r22
 100b334:	100d5e80 	call	100d5e8 <__umoddi3>
 100b338:	880b883a 	mov	r5,r17
 100b33c:	8009883a 	mov	r4,r16
 100b340:	b00f883a 	mov	r7,r22
 100b344:	a80d883a 	mov	r6,r21
 100b348:	d8800015 	stw	r2,0(sp)
 100b34c:	100d00c0 	call	100d00c <__udivdi3>
 100b350:	1023883a 	mov	r17,r2
 100b354:	e4c5883a 	add	r2,fp,r19
 100b358:	11000003 	ldbu	r4,0(r2)
 100b35c:	1825883a 	mov	r18,r3
 100b360:	0015883a 	mov	r10,zero
 100b364:	20c0010c 	andi	r3,r4,4
 100b368:	0017883a 	mov	r11,zero
 100b36c:	000f883a 	mov	r7,zero
 100b370:	18001a26 	beq	r3,zero,100b3dc <_strtoll_r+0x164>
 100b374:	9c3ff404 	addi	r16,r19,-48
 100b378:	85c0200e 	bge	r16,r23,100b3fc <_strtoll_r+0x184>
 100b37c:	38003b16 	blt	r7,zero,100b46c <_strtoll_r+0x1f4>
 100b380:	92c03a36 	bltu	r18,r11,100b46c <_strtoll_r+0x1f4>
 100b384:	5c803826 	beq	r11,r18,100b468 <_strtoll_r+0x1f0>
 100b388:	54404c26 	beq	r10,r17,100b4bc <_strtoll_r+0x244>
 100b38c:	580b883a 	mov	r5,r11
 100b390:	5009883a 	mov	r4,r10
 100b394:	a80d883a 	mov	r6,r21
 100b398:	b00f883a 	mov	r7,r22
 100b39c:	100ced00 	call	100ced0 <__muldi3>
 100b3a0:	8013d7fa 	srai	r9,r16,31
 100b3a4:	100d883a 	mov	r6,r2
 100b3a8:	1405883a 	add	r2,r2,r16
 100b3ac:	118d803a 	cmpltu	r6,r2,r6
 100b3b0:	1a47883a 	add	r3,r3,r9
 100b3b4:	30cd883a 	add	r6,r6,r3
 100b3b8:	1015883a 	mov	r10,r2
 100b3bc:	3017883a 	mov	r11,r6
 100b3c0:	01c00044 	movi	r7,1
 100b3c4:	a4c00007 	ldb	r19,0(r20)
 100b3c8:	a5000044 	addi	r20,r20,1
 100b3cc:	e4c5883a 	add	r2,fp,r19
 100b3d0:	11000003 	ldbu	r4,0(r2)
 100b3d4:	20c0010c 	andi	r3,r4,4
 100b3d8:	183fe61e 	bne	r3,zero,100b374 <_strtoll_r+0xfc>
 100b3dc:	208000cc 	andi	r2,r4,3
 100b3e0:	10000626 	beq	r2,zero,100b3fc <_strtoll_r+0x184>
 100b3e4:	2080004c 	andi	r2,r4,1
 100b3e8:	1005003a 	cmpeq	r2,r2,zero
 100b3ec:	1000301e 	bne	r2,zero,100b4b0 <_strtoll_r+0x238>
 100b3f0:	02000dc4 	movi	r8,55
 100b3f4:	9a21c83a 	sub	r16,r19,r8
 100b3f8:	85ffe016 	blt	r16,r23,100b37c <_strtoll_r+0x104>
 100b3fc:	38004616 	blt	r7,zero,100b518 <_strtoll_r+0x2a0>
 100b400:	d8800517 	ldw	r2,20(sp)
 100b404:	1000341e 	bne	r2,zero,100b4d8 <_strtoll_r+0x260>
 100b408:	500b883a 	mov	r5,r10
 100b40c:	580d883a 	mov	r6,r11
 100b410:	d8c00417 	ldw	r3,16(sp)
 100b414:	18000626 	beq	r3,zero,100b430 <_strtoll_r+0x1b8>
 100b418:	38000226 	beq	r7,zero,100b424 <_strtoll_r+0x1ac>
 100b41c:	a53fffc4 	addi	r20,r20,-1
 100b420:	dd000315 	stw	r20,12(sp)
 100b424:	d8c00317 	ldw	r3,12(sp)
 100b428:	d8800417 	ldw	r2,16(sp)
 100b42c:	10c00015 	stw	r3,0(r2)
 100b430:	2805883a 	mov	r2,r5
 100b434:	3007883a 	mov	r3,r6
 100b438:	dfc00f17 	ldw	ra,60(sp)
 100b43c:	df000e17 	ldw	fp,56(sp)
 100b440:	ddc00d17 	ldw	r23,52(sp)
 100b444:	dd800c17 	ldw	r22,48(sp)
 100b448:	dd400b17 	ldw	r21,44(sp)
 100b44c:	dd000a17 	ldw	r20,40(sp)
 100b450:	dcc00917 	ldw	r19,36(sp)
 100b454:	dc800817 	ldw	r18,32(sp)
 100b458:	dc400717 	ldw	r17,28(sp)
 100b45c:	dc000617 	ldw	r16,24(sp)
 100b460:	dec01004 	addi	sp,sp,64
 100b464:	f800283a 	ret
 100b468:	8abfc72e 	bgeu	r17,r10,100b388 <_strtoll_r+0x110>
 100b46c:	01ffffc4 	movi	r7,-1
 100b470:	003fd406 	br	100b3c4 <_strtoll_r+0x14c>
 100b474:	00800c04 	movi	r2,48
 100b478:	98803226 	beq	r19,r2,100b544 <_strtoll_r+0x2cc>
 100b47c:	183fa026 	beq	r3,zero,100b300 <_strtoll_r+0x88>
 100b480:	00800c04 	movi	r2,48
 100b484:	98803e26 	beq	r19,r2,100b580 <_strtoll_r+0x308>
 100b488:	d8c00117 	ldw	r3,4(sp)
 100b48c:	05c00284 	movi	r23,10
 100b490:	b82b883a 	mov	r21,r23
 100b494:	1806c03a 	cmpne	r3,r3,zero
 100b498:	002d883a 	mov	r22,zero
 100b49c:	d8c00515 	stw	r3,20(sp)
 100b4a0:	183f9d26 	beq	r3,zero,100b318 <_strtoll_r+0xa0>
 100b4a4:	0021883a 	mov	r16,zero
 100b4a8:	04600034 	movhi	r17,32768
 100b4ac:	003f9d06 	br	100b324 <_strtoll_r+0xac>
 100b4b0:	020015c4 	movi	r8,87
 100b4b4:	9a21c83a 	sub	r16,r19,r8
 100b4b8:	003fcf06 	br	100b3f8 <_strtoll_r+0x180>
 100b4bc:	5cbfb31e 	bne	r11,r18,100b38c <_strtoll_r+0x114>
 100b4c0:	d8800017 	ldw	r2,0(sp)
 100b4c4:	143fb10e 	bge	r2,r16,100b38c <_strtoll_r+0x114>
 100b4c8:	8815883a 	mov	r10,r17
 100b4cc:	9017883a 	mov	r11,r18
 100b4d0:	01ffffc4 	movi	r7,-1
 100b4d4:	003fbb06 	br	100b3c4 <_strtoll_r+0x14c>
 100b4d8:	0009883a 	mov	r4,zero
 100b4dc:	2285c83a 	sub	r2,r4,r10
 100b4e0:	2089803a 	cmpltu	r4,r4,r2
 100b4e4:	02c7c83a 	sub	r3,zero,r11
 100b4e8:	1909c83a 	sub	r4,r3,r4
 100b4ec:	100b883a 	mov	r5,r2
 100b4f0:	200d883a 	mov	r6,r4
 100b4f4:	003fc606 	br	100b410 <_strtoll_r+0x198>
 100b4f8:	a4c00007 	ldb	r19,0(r20)
 100b4fc:	a5000044 	addi	r20,r20,1
 100b500:	003f7a06 	br	100b2ec <_strtoll_r+0x74>
 100b504:	a4c00007 	ldb	r19,0(r20)
 100b508:	00800044 	movi	r2,1
 100b50c:	a5000044 	addi	r20,r20,1
 100b510:	d8800115 	stw	r2,4(sp)
 100b514:	003f7606 	br	100b2f0 <_strtoll_r+0x78>
 100b518:	d8c00117 	ldw	r3,4(sp)
 100b51c:	1805003a 	cmpeq	r2,r3,zero
 100b520:	1000131e 	bne	r2,zero,100b570 <_strtoll_r+0x2f8>
 100b524:	0005883a 	mov	r2,zero
 100b528:	00e00034 	movhi	r3,32768
 100b52c:	100b883a 	mov	r5,r2
 100b530:	180d883a 	mov	r6,r3
 100b534:	d8c00217 	ldw	r3,8(sp)
 100b538:	00800884 	movi	r2,34
 100b53c:	18800015 	stw	r2,0(r3)
 100b540:	003fb306 	br	100b410 <_strtoll_r+0x198>
 100b544:	a1000007 	ldb	r4,0(r20)
 100b548:	00801e04 	movi	r2,120
 100b54c:	20800226 	beq	r4,r2,100b558 <_strtoll_r+0x2e0>
 100b550:	00801604 	movi	r2,88
 100b554:	20bfc91e 	bne	r4,r2,100b47c <_strtoll_r+0x204>
 100b558:	a4c00047 	ldb	r19,1(r20)
 100b55c:	05c00404 	movi	r23,16
 100b560:	b82b883a 	mov	r21,r23
 100b564:	a5000084 	addi	r20,r20,2
 100b568:	002d883a 	mov	r22,zero
 100b56c:	003f6606 	br	100b308 <_strtoll_r+0x90>
 100b570:	017fffc4 	movi	r5,-1
 100b574:	01a00034 	movhi	r6,32768
 100b578:	31bfffc4 	addi	r6,r6,-1
 100b57c:	003fed06 	br	100b534 <_strtoll_r+0x2bc>
 100b580:	05c00204 	movi	r23,8
 100b584:	b82b883a 	mov	r21,r23
 100b588:	002d883a 	mov	r22,zero
 100b58c:	003f5e06 	br	100b308 <_strtoll_r+0x90>

0100b590 <_strtoul_r>:
 100b590:	defff604 	addi	sp,sp,-40
 100b594:	00804074 	movhi	r2,257
 100b598:	10938f04 	addi	r2,r2,20028
 100b59c:	dd000415 	stw	r20,16(sp)
 100b5a0:	15000017 	ldw	r20,0(r2)
 100b5a4:	ddc00715 	stw	r23,28(sp)
 100b5a8:	dd800615 	stw	r22,24(sp)
 100b5ac:	dd400515 	stw	r21,20(sp)
 100b5b0:	dc800215 	stw	r18,8(sp)
 100b5b4:	dc000015 	stw	r16,0(sp)
 100b5b8:	dfc00915 	stw	ra,36(sp)
 100b5bc:	df000815 	stw	fp,32(sp)
 100b5c0:	dcc00315 	stw	r19,12(sp)
 100b5c4:	dc400115 	stw	r17,4(sp)
 100b5c8:	282b883a 	mov	r21,r5
 100b5cc:	202f883a 	mov	r23,r4
 100b5d0:	302d883a 	mov	r22,r6
 100b5d4:	3825883a 	mov	r18,r7
 100b5d8:	2821883a 	mov	r16,r5
 100b5dc:	84400007 	ldb	r17,0(r16)
 100b5e0:	84000044 	addi	r16,r16,1
 100b5e4:	a447883a 	add	r3,r20,r17
 100b5e8:	18800003 	ldbu	r2,0(r3)
 100b5ec:	1080020c 	andi	r2,r2,8
 100b5f0:	103ffa1e 	bne	r2,zero,100b5dc <_strtoul_r+0x4c>
 100b5f4:	00800b44 	movi	r2,45
 100b5f8:	88805626 	beq	r17,r2,100b754 <_strtoul_r+0x1c4>
 100b5fc:	00800ac4 	movi	r2,43
 100b600:	88805126 	beq	r17,r2,100b748 <_strtoul_r+0x1b8>
 100b604:	0039883a 	mov	fp,zero
 100b608:	9007003a 	cmpeq	r3,r18,zero
 100b60c:	18003b1e 	bne	r3,zero,100b6fc <_strtoul_r+0x16c>
 100b610:	00800404 	movi	r2,16
 100b614:	90803926 	beq	r18,r2,100b6fc <_strtoul_r+0x16c>
 100b618:	013fffc4 	movi	r4,-1
 100b61c:	900b883a 	mov	r5,r18
 100b620:	100f0640 	call	100f064 <__udivsi3>
 100b624:	013fffc4 	movi	r4,-1
 100b628:	900b883a 	mov	r5,r18
 100b62c:	1027883a 	mov	r19,r2
 100b630:	100f06c0 	call	100f06c <__umodsi3>
 100b634:	1011883a 	mov	r8,r2
 100b638:	900f883a 	mov	r7,r18
 100b63c:	a445883a 	add	r2,r20,r17
 100b640:	11000003 	ldbu	r4,0(r2)
 100b644:	000b883a 	mov	r5,zero
 100b648:	000d883a 	mov	r6,zero
 100b64c:	20c0010c 	andi	r3,r4,4
 100b650:	18000e26 	beq	r3,zero,100b68c <_strtoul_r+0xfc>
 100b654:	88fff404 	addi	r3,r17,-48
 100b658:	1c80140e 	bge	r3,r18,100b6ac <_strtoul_r+0x11c>
 100b65c:	30003316 	blt	r6,zero,100b72c <_strtoul_r+0x19c>
 100b660:	99403236 	bltu	r19,r5,100b72c <_strtoul_r+0x19c>
 100b664:	2cc03026 	beq	r5,r19,100b728 <_strtoul_r+0x198>
 100b668:	29c5383a 	mul	r2,r5,r7
 100b66c:	01800044 	movi	r6,1
 100b670:	10cb883a 	add	r5,r2,r3
 100b674:	84400007 	ldb	r17,0(r16)
 100b678:	84000044 	addi	r16,r16,1
 100b67c:	a445883a 	add	r2,r20,r17
 100b680:	11000003 	ldbu	r4,0(r2)
 100b684:	20c0010c 	andi	r3,r4,4
 100b688:	183ff21e 	bne	r3,zero,100b654 <_strtoul_r+0xc4>
 100b68c:	208000cc 	andi	r2,r4,3
 100b690:	10000626 	beq	r2,zero,100b6ac <_strtoul_r+0x11c>
 100b694:	2080004c 	andi	r2,r4,1
 100b698:	1005003a 	cmpeq	r2,r2,zero
 100b69c:	1000251e 	bne	r2,zero,100b734 <_strtoul_r+0x1a4>
 100b6a0:	00800dc4 	movi	r2,55
 100b6a4:	8887c83a 	sub	r3,r17,r2
 100b6a8:	1cbfec16 	blt	r3,r18,100b65c <_strtoul_r+0xcc>
 100b6ac:	3000400e 	bge	r6,zero,100b7b0 <_strtoul_r+0x220>
 100b6b0:	00800884 	movi	r2,34
 100b6b4:	017fffc4 	movi	r5,-1
 100b6b8:	b8800015 	stw	r2,0(r23)
 100b6bc:	b0000226 	beq	r22,zero,100b6c8 <_strtoul_r+0x138>
 100b6c0:	30001f1e 	bne	r6,zero,100b740 <_strtoul_r+0x1b0>
 100b6c4:	b5400015 	stw	r21,0(r22)
 100b6c8:	2805883a 	mov	r2,r5
 100b6cc:	dfc00917 	ldw	ra,36(sp)
 100b6d0:	df000817 	ldw	fp,32(sp)
 100b6d4:	ddc00717 	ldw	r23,28(sp)
 100b6d8:	dd800617 	ldw	r22,24(sp)
 100b6dc:	dd400517 	ldw	r21,20(sp)
 100b6e0:	dd000417 	ldw	r20,16(sp)
 100b6e4:	dcc00317 	ldw	r19,12(sp)
 100b6e8:	dc800217 	ldw	r18,8(sp)
 100b6ec:	dc400117 	ldw	r17,4(sp)
 100b6f0:	dc000017 	ldw	r16,0(sp)
 100b6f4:	dec00a04 	addi	sp,sp,40
 100b6f8:	f800283a 	ret
 100b6fc:	00800c04 	movi	r2,48
 100b700:	88801826 	beq	r17,r2,100b764 <_strtoul_r+0x1d4>
 100b704:	183fc426 	beq	r3,zero,100b618 <_strtoul_r+0x88>
 100b708:	00800c04 	movi	r2,48
 100b70c:	88802226 	beq	r17,r2,100b798 <_strtoul_r+0x208>
 100b710:	04800284 	movi	r18,10
 100b714:	900f883a 	mov	r7,r18
 100b718:	04c666b4 	movhi	r19,6554
 100b71c:	9ce66644 	addi	r19,r19,-26215
 100b720:	02000144 	movi	r8,5
 100b724:	003fc506 	br	100b63c <_strtoul_r+0xac>
 100b728:	40ffcf0e 	bge	r8,r3,100b668 <_strtoul_r+0xd8>
 100b72c:	01bfffc4 	movi	r6,-1
 100b730:	003fd006 	br	100b674 <_strtoul_r+0xe4>
 100b734:	008015c4 	movi	r2,87
 100b738:	8887c83a 	sub	r3,r17,r2
 100b73c:	003fda06 	br	100b6a8 <_strtoul_r+0x118>
 100b740:	857fffc4 	addi	r21,r16,-1
 100b744:	003fdf06 	br	100b6c4 <_strtoul_r+0x134>
 100b748:	84400007 	ldb	r17,0(r16)
 100b74c:	84000044 	addi	r16,r16,1
 100b750:	003fac06 	br	100b604 <_strtoul_r+0x74>
 100b754:	84400007 	ldb	r17,0(r16)
 100b758:	07000044 	movi	fp,1
 100b75c:	84000044 	addi	r16,r16,1
 100b760:	003fa906 	br	100b608 <_strtoul_r+0x78>
 100b764:	81000007 	ldb	r4,0(r16)
 100b768:	00801e04 	movi	r2,120
 100b76c:	20800226 	beq	r4,r2,100b778 <_strtoul_r+0x1e8>
 100b770:	00801604 	movi	r2,88
 100b774:	20bfe31e 	bne	r4,r2,100b704 <_strtoul_r+0x174>
 100b778:	84400047 	ldb	r17,1(r16)
 100b77c:	04800404 	movi	r18,16
 100b780:	84000084 	addi	r16,r16,2
 100b784:	900f883a 	mov	r7,r18
 100b788:	04c40034 	movhi	r19,4096
 100b78c:	9cffffc4 	addi	r19,r19,-1
 100b790:	020003c4 	movi	r8,15
 100b794:	003fa906 	br	100b63c <_strtoul_r+0xac>
 100b798:	04800204 	movi	r18,8
 100b79c:	900f883a 	mov	r7,r18
 100b7a0:	04c80034 	movhi	r19,8192
 100b7a4:	9cffffc4 	addi	r19,r19,-1
 100b7a8:	020001c4 	movi	r8,7
 100b7ac:	003fa306 	br	100b63c <_strtoul_r+0xac>
 100b7b0:	e005003a 	cmpeq	r2,fp,zero
 100b7b4:	103fc11e 	bne	r2,zero,100b6bc <_strtoul_r+0x12c>
 100b7b8:	014bc83a 	sub	r5,zero,r5
 100b7bc:	003fbf06 	br	100b6bc <_strtoul_r+0x12c>

0100b7c0 <strtoul>:
 100b7c0:	00804074 	movhi	r2,257
 100b7c4:	10939004 	addi	r2,r2,20032
 100b7c8:	2013883a 	mov	r9,r4
 100b7cc:	11000017 	ldw	r4,0(r2)
 100b7d0:	2805883a 	mov	r2,r5
 100b7d4:	300f883a 	mov	r7,r6
 100b7d8:	480b883a 	mov	r5,r9
 100b7dc:	100d883a 	mov	r6,r2
 100b7e0:	100b5901 	jmpi	100b590 <_strtoul_r>

0100b7e4 <_strtoull_r>:
 100b7e4:	defff104 	addi	sp,sp,-60
 100b7e8:	00804074 	movhi	r2,257
 100b7ec:	10938f04 	addi	r2,r2,20028
 100b7f0:	df000d15 	stw	fp,52(sp)
 100b7f4:	17000017 	ldw	fp,0(r2)
 100b7f8:	ddc00c15 	stw	r23,48(sp)
 100b7fc:	dcc00815 	stw	r19,32(sp)
 100b800:	dfc00e15 	stw	ra,56(sp)
 100b804:	dd800b15 	stw	r22,44(sp)
 100b808:	dd400a15 	stw	r21,40(sp)
 100b80c:	dd000915 	stw	r20,36(sp)
 100b810:	dc800715 	stw	r18,28(sp)
 100b814:	dc400615 	stw	r17,24(sp)
 100b818:	dc000515 	stw	r16,20(sp)
 100b81c:	d9400215 	stw	r5,8(sp)
 100b820:	d9000115 	stw	r4,4(sp)
 100b824:	d9800315 	stw	r6,12(sp)
 100b828:	382f883a 	mov	r23,r7
 100b82c:	2827883a 	mov	r19,r5
 100b830:	9d000007 	ldb	r20,0(r19)
 100b834:	9cc00044 	addi	r19,r19,1
 100b838:	e507883a 	add	r3,fp,r20
 100b83c:	18800003 	ldbu	r2,0(r3)
 100b840:	1080020c 	andi	r2,r2,8
 100b844:	103ffa1e 	bne	r2,zero,100b830 <_strtoull_r+0x4c>
 100b848:	00800b44 	movi	r2,45
 100b84c:	a0807a26 	beq	r20,r2,100ba38 <_strtoull_r+0x254>
 100b850:	00800ac4 	movi	r2,43
 100b854:	a0807526 	beq	r20,r2,100ba2c <_strtoull_r+0x248>
 100b858:	d8000015 	stw	zero,0(sp)
 100b85c:	b807003a 	cmpeq	r3,r23,zero
 100b860:	18005a1e 	bne	r3,zero,100b9cc <_strtoull_r+0x1e8>
 100b864:	00800404 	movi	r2,16
 100b868:	b8805826 	beq	r23,r2,100b9cc <_strtoull_r+0x1e8>
 100b86c:	b82dd7fa 	srai	r22,r23,31
 100b870:	043fffc4 	movi	r16,-1
 100b874:	8009883a 	mov	r4,r16
 100b878:	800b883a 	mov	r5,r16
 100b87c:	b80d883a 	mov	r6,r23
 100b880:	b00f883a 	mov	r7,r22
 100b884:	100d00c0 	call	100d00c <__udivdi3>
 100b888:	8009883a 	mov	r4,r16
 100b88c:	800b883a 	mov	r5,r16
 100b890:	b80d883a 	mov	r6,r23
 100b894:	b00f883a 	mov	r7,r22
 100b898:	1023883a 	mov	r17,r2
 100b89c:	1825883a 	mov	r18,r3
 100b8a0:	100d5e80 	call	100d5e8 <__umoddi3>
 100b8a4:	b82b883a 	mov	r21,r23
 100b8a8:	1019883a 	mov	r12,r2
 100b8ac:	e505883a 	add	r2,fp,r20
 100b8b0:	11000003 	ldbu	r4,0(r2)
 100b8b4:	0015883a 	mov	r10,zero
 100b8b8:	0017883a 	mov	r11,zero
 100b8bc:	20c0010c 	andi	r3,r4,4
 100b8c0:	000d883a 	mov	r6,zero
 100b8c4:	18001c26 	beq	r3,zero,100b938 <_strtoull_r+0x154>
 100b8c8:	a43ff404 	addi	r16,r20,-48
 100b8cc:	85c0220e 	bge	r16,r23,100b958 <_strtoull_r+0x174>
 100b8d0:	30003c16 	blt	r6,zero,100b9c4 <_strtoull_r+0x1e0>
 100b8d4:	92c03b36 	bltu	r18,r11,100b9c4 <_strtoull_r+0x1e0>
 100b8d8:	5c803926 	beq	r11,r18,100b9c0 <_strtoull_r+0x1dc>
 100b8dc:	54404c26 	beq	r10,r17,100ba10 <_strtoull_r+0x22c>
 100b8e0:	580b883a 	mov	r5,r11
 100b8e4:	5009883a 	mov	r4,r10
 100b8e8:	a80d883a 	mov	r6,r21
 100b8ec:	b00f883a 	mov	r7,r22
 100b8f0:	db000415 	stw	r12,16(sp)
 100b8f4:	100ced00 	call	100ced0 <__muldi3>
 100b8f8:	8013d7fa 	srai	r9,r16,31
 100b8fc:	100d883a 	mov	r6,r2
 100b900:	1405883a 	add	r2,r2,r16
 100b904:	118d803a 	cmpltu	r6,r2,r6
 100b908:	1a47883a 	add	r3,r3,r9
 100b90c:	db000417 	ldw	r12,16(sp)
 100b910:	30cd883a 	add	r6,r6,r3
 100b914:	3017883a 	mov	r11,r6
 100b918:	1015883a 	mov	r10,r2
 100b91c:	01800044 	movi	r6,1
 100b920:	9d000007 	ldb	r20,0(r19)
 100b924:	9cc00044 	addi	r19,r19,1
 100b928:	e505883a 	add	r2,fp,r20
 100b92c:	11000003 	ldbu	r4,0(r2)
 100b930:	20c0010c 	andi	r3,r4,4
 100b934:	183fe41e 	bne	r3,zero,100b8c8 <_strtoull_r+0xe4>
 100b938:	208000cc 	andi	r2,r4,3
 100b93c:	10000626 	beq	r2,zero,100b958 <_strtoull_r+0x174>
 100b940:	2080004c 	andi	r2,r4,1
 100b944:	1005003a 	cmpeq	r2,r2,zero
 100b948:	10002e1e 	bne	r2,zero,100ba04 <_strtoull_r+0x220>
 100b94c:	02000dc4 	movi	r8,55
 100b950:	a221c83a 	sub	r16,r20,r8
 100b954:	85ffde16 	blt	r16,r23,100b8d0 <_strtoull_r+0xec>
 100b958:	3000530e 	bge	r6,zero,100baa8 <_strtoull_r+0x2c4>
 100b95c:	d8c00117 	ldw	r3,4(sp)
 100b960:	02bfffc4 	movi	r10,-1
 100b964:	00800884 	movi	r2,34
 100b968:	5017883a 	mov	r11,r10
 100b96c:	18800015 	stw	r2,0(r3)
 100b970:	d8800317 	ldw	r2,12(sp)
 100b974:	10000426 	beq	r2,zero,100b988 <_strtoull_r+0x1a4>
 100b978:	3000291e 	bne	r6,zero,100ba20 <_strtoull_r+0x23c>
 100b97c:	d8800217 	ldw	r2,8(sp)
 100b980:	d8c00317 	ldw	r3,12(sp)
 100b984:	18800015 	stw	r2,0(r3)
 100b988:	5005883a 	mov	r2,r10
 100b98c:	5807883a 	mov	r3,r11
 100b990:	dfc00e17 	ldw	ra,56(sp)
 100b994:	df000d17 	ldw	fp,52(sp)
 100b998:	ddc00c17 	ldw	r23,48(sp)
 100b99c:	dd800b17 	ldw	r22,44(sp)
 100b9a0:	dd400a17 	ldw	r21,40(sp)
 100b9a4:	dd000917 	ldw	r20,36(sp)
 100b9a8:	dcc00817 	ldw	r19,32(sp)
 100b9ac:	dc800717 	ldw	r18,28(sp)
 100b9b0:	dc400617 	ldw	r17,24(sp)
 100b9b4:	dc000517 	ldw	r16,20(sp)
 100b9b8:	dec00f04 	addi	sp,sp,60
 100b9bc:	f800283a 	ret
 100b9c0:	8abfc62e 	bgeu	r17,r10,100b8dc <_strtoull_r+0xf8>
 100b9c4:	01bfffc4 	movi	r6,-1
 100b9c8:	003fd506 	br	100b920 <_strtoull_r+0x13c>
 100b9cc:	00800c04 	movi	r2,48
 100b9d0:	a0801e26 	beq	r20,r2,100ba4c <_strtoull_r+0x268>
 100b9d4:	183fa526 	beq	r3,zero,100b86c <_strtoull_r+0x88>
 100b9d8:	00800c04 	movi	r2,48
 100b9dc:	a0802a26 	beq	r20,r2,100ba88 <_strtoull_r+0x2a4>
 100b9e0:	05c00284 	movi	r23,10
 100b9e4:	b82b883a 	mov	r21,r23
 100b9e8:	046666b4 	movhi	r17,39322
 100b9ec:	8c666644 	addi	r17,r17,-26215
 100b9f0:	002d883a 	mov	r22,zero
 100b9f4:	048666b4 	movhi	r18,6554
 100b9f8:	94a66644 	addi	r18,r18,-26215
 100b9fc:	03000144 	movi	r12,5
 100ba00:	003faa06 	br	100b8ac <_strtoull_r+0xc8>
 100ba04:	020015c4 	movi	r8,87
 100ba08:	a221c83a 	sub	r16,r20,r8
 100ba0c:	003fd106 	br	100b954 <_strtoull_r+0x170>
 100ba10:	5cbfb31e 	bne	r11,r18,100b8e0 <_strtoull_r+0xfc>
 100ba14:	643fb20e 	bge	r12,r16,100b8e0 <_strtoull_r+0xfc>
 100ba18:	01bfffc4 	movi	r6,-1
 100ba1c:	003fc006 	br	100b920 <_strtoull_r+0x13c>
 100ba20:	9cffffc4 	addi	r19,r19,-1
 100ba24:	dcc00215 	stw	r19,8(sp)
 100ba28:	003fd406 	br	100b97c <_strtoull_r+0x198>
 100ba2c:	9d000007 	ldb	r20,0(r19)
 100ba30:	9cc00044 	addi	r19,r19,1
 100ba34:	003f8806 	br	100b858 <_strtoull_r+0x74>
 100ba38:	9d000007 	ldb	r20,0(r19)
 100ba3c:	00800044 	movi	r2,1
 100ba40:	9cc00044 	addi	r19,r19,1
 100ba44:	d8800015 	stw	r2,0(sp)
 100ba48:	003f8406 	br	100b85c <_strtoull_r+0x78>
 100ba4c:	99000007 	ldb	r4,0(r19)
 100ba50:	00801e04 	movi	r2,120
 100ba54:	20800226 	beq	r4,r2,100ba60 <_strtoull_r+0x27c>
 100ba58:	00801604 	movi	r2,88
 100ba5c:	20bfdd1e 	bne	r4,r2,100b9d4 <_strtoull_r+0x1f0>
 100ba60:	9d000047 	ldb	r20,1(r19)
 100ba64:	05c00404 	movi	r23,16
 100ba68:	b82b883a 	mov	r21,r23
 100ba6c:	047fffc4 	movi	r17,-1
 100ba70:	9cc00084 	addi	r19,r19,2
 100ba74:	002d883a 	mov	r22,zero
 100ba78:	04840034 	movhi	r18,4096
 100ba7c:	94bfffc4 	addi	r18,r18,-1
 100ba80:	030003c4 	movi	r12,15
 100ba84:	003f8906 	br	100b8ac <_strtoull_r+0xc8>
 100ba88:	05c00204 	movi	r23,8
 100ba8c:	b82b883a 	mov	r21,r23
 100ba90:	047fffc4 	movi	r17,-1
 100ba94:	002d883a 	mov	r22,zero
 100ba98:	04880034 	movhi	r18,8192
 100ba9c:	94bfffc4 	addi	r18,r18,-1
 100baa0:	030001c4 	movi	r12,7
 100baa4:	003f8106 	br	100b8ac <_strtoull_r+0xc8>
 100baa8:	d8c00017 	ldw	r3,0(sp)
 100baac:	1805003a 	cmpeq	r2,r3,zero
 100bab0:	103faf1e 	bne	r2,zero,100b970 <_strtoull_r+0x18c>
 100bab4:	0009883a 	mov	r4,zero
 100bab8:	2285c83a 	sub	r2,r4,r10
 100babc:	02c7c83a 	sub	r3,zero,r11
 100bac0:	2089803a 	cmpltu	r4,r4,r2
 100bac4:	1909c83a 	sub	r4,r3,r4
 100bac8:	1015883a 	mov	r10,r2
 100bacc:	2017883a 	mov	r11,r4
 100bad0:	003fa706 	br	100b970 <_strtoull_r+0x18c>

0100bad4 <__submore>:
 100bad4:	defffa04 	addi	sp,sp,-24
 100bad8:	28c00c17 	ldw	r3,48(r5)
 100badc:	dc800215 	stw	r18,8(sp)
 100bae0:	2825883a 	mov	r18,r5
 100bae4:	dc000015 	stw	r16,0(sp)
 100bae8:	90801004 	addi	r2,r18,64
 100baec:	04010004 	movi	r16,1024
 100baf0:	dfc00515 	stw	ra,20(sp)
 100baf4:	dd000415 	stw	r20,16(sp)
 100baf8:	dcc00315 	stw	r19,12(sp)
 100bafc:	dc400115 	stw	r17,4(sp)
 100bb00:	800b883a 	mov	r5,r16
 100bb04:	18801b26 	beq	r3,r2,100bb74 <__submore+0xa0>
 100bb08:	94400d17 	ldw	r17,52(r18)
 100bb0c:	180b883a 	mov	r5,r3
 100bb10:	8c69883a 	add	r20,r17,r17
 100bb14:	a00d883a 	mov	r6,r20
 100bb18:	1008d4c0 	call	1008d4c <_realloc_r>
 100bb1c:	1467883a 	add	r19,r2,r17
 100bb20:	1021883a 	mov	r16,r2
 100bb24:	880d883a 	mov	r6,r17
 100bb28:	9809883a 	mov	r4,r19
 100bb2c:	100b883a 	mov	r5,r2
 100bb30:	10000e26 	beq	r2,zero,100bb6c <__submore+0x98>
 100bb34:	10079540 	call	1007954 <memcpy>
 100bb38:	000d883a 	mov	r6,zero
 100bb3c:	95000d15 	stw	r20,52(r18)
 100bb40:	94c00015 	stw	r19,0(r18)
 100bb44:	94000c15 	stw	r16,48(r18)
 100bb48:	3005883a 	mov	r2,r6
 100bb4c:	dfc00517 	ldw	ra,20(sp)
 100bb50:	dd000417 	ldw	r20,16(sp)
 100bb54:	dcc00317 	ldw	r19,12(sp)
 100bb58:	dc800217 	ldw	r18,8(sp)
 100bb5c:	dc400117 	ldw	r17,4(sp)
 100bb60:	dc000017 	ldw	r16,0(sp)
 100bb64:	dec00604 	addi	sp,sp,24
 100bb68:	f800283a 	ret
 100bb6c:	01bfffc4 	movi	r6,-1
 100bb70:	003ff506 	br	100bb48 <__submore+0x74>
 100bb74:	10070300 	call	1007030 <_malloc_r>
 100bb78:	1009883a 	mov	r4,r2
 100bb7c:	1140ff44 	addi	r5,r2,1021
 100bb80:	000d883a 	mov	r6,zero
 100bb84:	103ff926 	beq	r2,zero,100bb6c <__submore+0x98>
 100bb88:	90801083 	ldbu	r2,66(r18)
 100bb8c:	94000d15 	stw	r16,52(r18)
 100bb90:	91000c15 	stw	r4,48(r18)
 100bb94:	28800085 	stb	r2,2(r5)
 100bb98:	90c01043 	ldbu	r3,65(r18)
 100bb9c:	28c00045 	stb	r3,1(r5)
 100bba0:	90801003 	ldbu	r2,64(r18)
 100bba4:	2080ff45 	stb	r2,1021(r4)
 100bba8:	91400015 	stw	r5,0(r18)
 100bbac:	003fe606 	br	100bb48 <__submore+0x74>

0100bbb0 <_ungetc_r>:
 100bbb0:	defffc04 	addi	sp,sp,-16
 100bbb4:	00bfffc4 	movi	r2,-1
 100bbb8:	dc400215 	stw	r17,8(sp)
 100bbbc:	dc000115 	stw	r16,4(sp)
 100bbc0:	dfc00315 	stw	ra,12(sp)
 100bbc4:	2821883a 	mov	r16,r5
 100bbc8:	2023883a 	mov	r17,r4
 100bbcc:	28801826 	beq	r5,r2,100bc30 <_ungetc_r+0x80>
 100bbd0:	20000226 	beq	r4,zero,100bbdc <_ungetc_r+0x2c>
 100bbd4:	20800e17 	ldw	r2,56(r4)
 100bbd8:	10001b26 	beq	r2,zero,100bc48 <_ungetc_r+0x98>
 100bbdc:	3100030b 	ldhu	r4,12(r6)
 100bbe0:	00bff7c4 	movi	r2,-33
 100bbe4:	2084703a 	and	r2,r4,r2
 100bbe8:	117fffcc 	andi	r5,r2,65535
 100bbec:	28c0010c 	andi	r3,r5,4
 100bbf0:	1009883a 	mov	r4,r2
 100bbf4:	3080030d 	sth	r2,12(r6)
 100bbf8:	18003526 	beq	r3,zero,100bcd0 <_ungetc_r+0x120>
 100bbfc:	30800c17 	ldw	r2,48(r6)
 100bc00:	84003fcc 	andi	r16,r16,255
 100bc04:	10001426 	beq	r2,zero,100bc58 <_ungetc_r+0xa8>
 100bc08:	30c00117 	ldw	r3,4(r6)
 100bc0c:	30800d17 	ldw	r2,52(r6)
 100bc10:	1880380e 	bge	r3,r2,100bcf4 <_ungetc_r+0x144>
 100bc14:	30c00017 	ldw	r3,0(r6)
 100bc18:	19ffffc4 	addi	r7,r3,-1
 100bc1c:	31c00015 	stw	r7,0(r6)
 100bc20:	1c3fffc5 	stb	r16,-1(r3)
 100bc24:	30800117 	ldw	r2,4(r6)
 100bc28:	10800044 	addi	r2,r2,1
 100bc2c:	30800115 	stw	r2,4(r6)
 100bc30:	8005883a 	mov	r2,r16
 100bc34:	dfc00317 	ldw	ra,12(sp)
 100bc38:	dc400217 	ldw	r17,8(sp)
 100bc3c:	dc000117 	ldw	r16,4(sp)
 100bc40:	dec00404 	addi	sp,sp,16
 100bc44:	f800283a 	ret
 100bc48:	d9800015 	stw	r6,0(sp)
 100bc4c:	1005ebc0 	call	1005ebc <__sinit>
 100bc50:	d9800017 	ldw	r6,0(sp)
 100bc54:	003fe106 	br	100bbdc <_ungetc_r+0x2c>
 100bc58:	30800417 	ldw	r2,16(r6)
 100bc5c:	10002326 	beq	r2,zero,100bcec <_ungetc_r+0x13c>
 100bc60:	31c00017 	ldw	r7,0(r6)
 100bc64:	11c0022e 	bgeu	r2,r7,100bc70 <_ungetc_r+0xc0>
 100bc68:	38bfffc3 	ldbu	r2,-1(r7)
 100bc6c:	80801226 	beq	r16,r2,100bcb8 <_ungetc_r+0x108>
 100bc70:	30c00117 	ldw	r3,4(r6)
 100bc74:	00800044 	movi	r2,1
 100bc78:	30800115 	stw	r2,4(r6)
 100bc7c:	008000c4 	movi	r2,3
 100bc80:	31001004 	addi	r4,r6,64
 100bc84:	31401084 	addi	r5,r6,66
 100bc88:	30800d15 	stw	r2,52(r6)
 100bc8c:	8005883a 	mov	r2,r16
 100bc90:	30c00f15 	stw	r3,60(r6)
 100bc94:	31c00e15 	stw	r7,56(r6)
 100bc98:	31000c15 	stw	r4,48(r6)
 100bc9c:	31400015 	stw	r5,0(r6)
 100bca0:	34001085 	stb	r16,66(r6)
 100bca4:	dfc00317 	ldw	ra,12(sp)
 100bca8:	dc400217 	ldw	r17,8(sp)
 100bcac:	dc000117 	ldw	r16,4(sp)
 100bcb0:	dec00404 	addi	sp,sp,16
 100bcb4:	f800283a 	ret
 100bcb8:	30800117 	ldw	r2,4(r6)
 100bcbc:	39ffffc4 	addi	r7,r7,-1
 100bcc0:	31c00015 	stw	r7,0(r6)
 100bcc4:	10800044 	addi	r2,r2,1
 100bcc8:	30800115 	stw	r2,4(r6)
 100bccc:	003fd806 	br	100bc30 <_ungetc_r+0x80>
 100bcd0:	2880040c 	andi	r2,r5,16
 100bcd4:	10000d26 	beq	r2,zero,100bd0c <_ungetc_r+0x15c>
 100bcd8:	2880020c 	andi	r2,r5,8
 100bcdc:	10000d1e 	bne	r2,zero,100bd14 <_ungetc_r+0x164>
 100bce0:	20800114 	ori	r2,r4,4
 100bce4:	3080030d 	sth	r2,12(r6)
 100bce8:	003fc406 	br	100bbfc <_ungetc_r+0x4c>
 100bcec:	31c00017 	ldw	r7,0(r6)
 100bcf0:	003fdf06 	br	100bc70 <_ungetc_r+0xc0>
 100bcf4:	300b883a 	mov	r5,r6
 100bcf8:	8809883a 	mov	r4,r17
 100bcfc:	d9800015 	stw	r6,0(sp)
 100bd00:	100bad40 	call	100bad4 <__submore>
 100bd04:	d9800017 	ldw	r6,0(sp)
 100bd08:	103fc226 	beq	r2,zero,100bc14 <_ungetc_r+0x64>
 100bd0c:	043fffc4 	movi	r16,-1
 100bd10:	003fc706 	br	100bc30 <_ungetc_r+0x80>
 100bd14:	300b883a 	mov	r5,r6
 100bd18:	8809883a 	mov	r4,r17
 100bd1c:	d9800015 	stw	r6,0(sp)
 100bd20:	1005c240 	call	1005c24 <_fflush_r>
 100bd24:	d9800017 	ldw	r6,0(sp)
 100bd28:	103ff81e 	bne	r2,zero,100bd0c <_ungetc_r+0x15c>
 100bd2c:	3100030b 	ldhu	r4,12(r6)
 100bd30:	00bffdc4 	movi	r2,-9
 100bd34:	30000215 	stw	zero,8(r6)
 100bd38:	2084703a 	and	r2,r4,r2
 100bd3c:	1009883a 	mov	r4,r2
 100bd40:	3080030d 	sth	r2,12(r6)
 100bd44:	30000615 	stw	zero,24(r6)
 100bd48:	003fe506 	br	100bce0 <_ungetc_r+0x130>

0100bd4c <ungetc>:
 100bd4c:	01804074 	movhi	r6,257
 100bd50:	31939004 	addi	r6,r6,20032
 100bd54:	2007883a 	mov	r3,r4
 100bd58:	31000017 	ldw	r4,0(r6)
 100bd5c:	280d883a 	mov	r6,r5
 100bd60:	180b883a 	mov	r5,r3
 100bd64:	100bbb01 	jmpi	100bbb0 <_ungetc_r>

0100bd68 <__swbuf_r>:
 100bd68:	defffc04 	addi	sp,sp,-16
 100bd6c:	dc400215 	stw	r17,8(sp)
 100bd70:	dc000115 	stw	r16,4(sp)
 100bd74:	dfc00315 	stw	ra,12(sp)
 100bd78:	2023883a 	mov	r17,r4
 100bd7c:	2821883a 	mov	r16,r5
 100bd80:	20000226 	beq	r4,zero,100bd8c <__swbuf_r+0x24>
 100bd84:	20800e17 	ldw	r2,56(r4)
 100bd88:	10002f26 	beq	r2,zero,100be48 <__swbuf_r+0xe0>
 100bd8c:	3080030b 	ldhu	r2,12(r6)
 100bd90:	30c00617 	ldw	r3,24(r6)
 100bd94:	1080020c 	andi	r2,r2,8
 100bd98:	30c00215 	stw	r3,8(r6)
 100bd9c:	10002226 	beq	r2,zero,100be28 <__swbuf_r+0xc0>
 100bda0:	30c00417 	ldw	r3,16(r6)
 100bda4:	18002026 	beq	r3,zero,100be28 <__swbuf_r+0xc0>
 100bda8:	31000017 	ldw	r4,0(r6)
 100bdac:	30800517 	ldw	r2,20(r6)
 100bdb0:	20c7c83a 	sub	r3,r4,r3
 100bdb4:	18802f0e 	bge	r3,r2,100be74 <__swbuf_r+0x10c>
 100bdb8:	19400044 	addi	r5,r3,1
 100bdbc:	30800217 	ldw	r2,8(r6)
 100bdc0:	84003fcc 	andi	r16,r16,255
 100bdc4:	20c00044 	addi	r3,r4,1
 100bdc8:	10bfffc4 	addi	r2,r2,-1
 100bdcc:	30800215 	stw	r2,8(r6)
 100bdd0:	24000005 	stb	r16,0(r4)
 100bdd4:	30800517 	ldw	r2,20(r6)
 100bdd8:	30c00015 	stw	r3,0(r6)
 100bddc:	11400c26 	beq	r2,r5,100be10 <__swbuf_r+0xa8>
 100bde0:	3080030b 	ldhu	r2,12(r6)
 100bde4:	1080004c 	andi	r2,r2,1
 100bde8:	1005003a 	cmpeq	r2,r2,zero
 100bdec:	10000626 	beq	r2,zero,100be08 <__swbuf_r+0xa0>
 100bdf0:	8005883a 	mov	r2,r16
 100bdf4:	dfc00317 	ldw	ra,12(sp)
 100bdf8:	dc400217 	ldw	r17,8(sp)
 100bdfc:	dc000117 	ldw	r16,4(sp)
 100be00:	dec00404 	addi	sp,sp,16
 100be04:	f800283a 	ret
 100be08:	00800284 	movi	r2,10
 100be0c:	80bff81e 	bne	r16,r2,100bdf0 <__swbuf_r+0x88>
 100be10:	8809883a 	mov	r4,r17
 100be14:	300b883a 	mov	r5,r6
 100be18:	1005c240 	call	1005c24 <_fflush_r>
 100be1c:	103ff426 	beq	r2,zero,100bdf0 <__swbuf_r+0x88>
 100be20:	043fffc4 	movi	r16,-1
 100be24:	003ff206 	br	100bdf0 <__swbuf_r+0x88>
 100be28:	300b883a 	mov	r5,r6
 100be2c:	8809883a 	mov	r4,r17
 100be30:	d9800015 	stw	r6,0(sp)
 100be34:	100431c0 	call	100431c <__swsetup_r>
 100be38:	d9800017 	ldw	r6,0(sp)
 100be3c:	1000061e 	bne	r2,zero,100be58 <__swbuf_r+0xf0>
 100be40:	30c00417 	ldw	r3,16(r6)
 100be44:	003fd806 	br	100bda8 <__swbuf_r+0x40>
 100be48:	d9800015 	stw	r6,0(sp)
 100be4c:	1005ebc0 	call	1005ebc <__sinit>
 100be50:	d9800017 	ldw	r6,0(sp)
 100be54:	003fcd06 	br	100bd8c <__swbuf_r+0x24>
 100be58:	3080030b 	ldhu	r2,12(r6)
 100be5c:	00c00244 	movi	r3,9
 100be60:	043fffc4 	movi	r16,-1
 100be64:	10801014 	ori	r2,r2,64
 100be68:	3080030d 	sth	r2,12(r6)
 100be6c:	88c00015 	stw	r3,0(r17)
 100be70:	003fdf06 	br	100bdf0 <__swbuf_r+0x88>
 100be74:	300b883a 	mov	r5,r6
 100be78:	8809883a 	mov	r4,r17
 100be7c:	d9800015 	stw	r6,0(sp)
 100be80:	1005c240 	call	1005c24 <_fflush_r>
 100be84:	d9800017 	ldw	r6,0(sp)
 100be88:	103fe51e 	bne	r2,zero,100be20 <__swbuf_r+0xb8>
 100be8c:	31000017 	ldw	r4,0(r6)
 100be90:	01400044 	movi	r5,1
 100be94:	003fc906 	br	100bdbc <__swbuf_r+0x54>

0100be98 <__swbuf>:
 100be98:	01804074 	movhi	r6,257
 100be9c:	31939004 	addi	r6,r6,20032
 100bea0:	2007883a 	mov	r3,r4
 100bea4:	31000017 	ldw	r4,0(r6)
 100bea8:	280d883a 	mov	r6,r5
 100beac:	180b883a 	mov	r5,r3
 100beb0:	100bd681 	jmpi	100bd68 <__swbuf_r>

0100beb4 <_write_r>:
 100beb4:	defffd04 	addi	sp,sp,-12
 100beb8:	dc000015 	stw	r16,0(sp)
 100bebc:	04004074 	movhi	r16,257
 100bec0:	841a5e04 	addi	r16,r16,27000
 100bec4:	dc400115 	stw	r17,4(sp)
 100bec8:	80000015 	stw	zero,0(r16)
 100becc:	2023883a 	mov	r17,r4
 100bed0:	2809883a 	mov	r4,r5
 100bed4:	300b883a 	mov	r5,r6
 100bed8:	380d883a 	mov	r6,r7
 100bedc:	dfc00215 	stw	ra,8(sp)
 100bee0:	10102640 	call	1010264 <write>
 100bee4:	1007883a 	mov	r3,r2
 100bee8:	00bfffc4 	movi	r2,-1
 100beec:	18800626 	beq	r3,r2,100bf08 <_write_r+0x54>
 100bef0:	1805883a 	mov	r2,r3
 100bef4:	dfc00217 	ldw	ra,8(sp)
 100bef8:	dc400117 	ldw	r17,4(sp)
 100befc:	dc000017 	ldw	r16,0(sp)
 100bf00:	dec00304 	addi	sp,sp,12
 100bf04:	f800283a 	ret
 100bf08:	80800017 	ldw	r2,0(r16)
 100bf0c:	103ff826 	beq	r2,zero,100bef0 <_write_r+0x3c>
 100bf10:	88800015 	stw	r2,0(r17)
 100bf14:	1805883a 	mov	r2,r3
 100bf18:	dfc00217 	ldw	ra,8(sp)
 100bf1c:	dc400117 	ldw	r17,4(sp)
 100bf20:	dc000017 	ldw	r16,0(sp)
 100bf24:	dec00304 	addi	sp,sp,12
 100bf28:	f800283a 	ret

0100bf2c <_calloc_r>:
 100bf2c:	298b383a 	mul	r5,r5,r6
 100bf30:	defffe04 	addi	sp,sp,-8
 100bf34:	dc000015 	stw	r16,0(sp)
 100bf38:	dfc00115 	stw	ra,4(sp)
 100bf3c:	10070300 	call	1007030 <_malloc_r>
 100bf40:	1021883a 	mov	r16,r2
 100bf44:	01c00904 	movi	r7,36
 100bf48:	10000d26 	beq	r2,zero,100bf80 <_calloc_r+0x54>
 100bf4c:	10ffff17 	ldw	r3,-4(r2)
 100bf50:	1009883a 	mov	r4,r2
 100bf54:	00bfff04 	movi	r2,-4
 100bf58:	1886703a 	and	r3,r3,r2
 100bf5c:	1887883a 	add	r3,r3,r2
 100bf60:	180d883a 	mov	r6,r3
 100bf64:	000b883a 	mov	r5,zero
 100bf68:	38c01736 	bltu	r7,r3,100bfc8 <_calloc_r+0x9c>
 100bf6c:	008004c4 	movi	r2,19
 100bf70:	10c00836 	bltu	r2,r3,100bf94 <_calloc_r+0x68>
 100bf74:	20000215 	stw	zero,8(r4)
 100bf78:	20000015 	stw	zero,0(r4)
 100bf7c:	20000115 	stw	zero,4(r4)
 100bf80:	8005883a 	mov	r2,r16
 100bf84:	dfc00117 	ldw	ra,4(sp)
 100bf88:	dc000017 	ldw	r16,0(sp)
 100bf8c:	dec00204 	addi	sp,sp,8
 100bf90:	f800283a 	ret
 100bf94:	008006c4 	movi	r2,27
 100bf98:	80000015 	stw	zero,0(r16)
 100bf9c:	80000115 	stw	zero,4(r16)
 100bfa0:	81000204 	addi	r4,r16,8
 100bfa4:	10fff32e 	bgeu	r2,r3,100bf74 <_calloc_r+0x48>
 100bfa8:	80000215 	stw	zero,8(r16)
 100bfac:	80000315 	stw	zero,12(r16)
 100bfb0:	81000404 	addi	r4,r16,16
 100bfb4:	19ffef1e 	bne	r3,r7,100bf74 <_calloc_r+0x48>
 100bfb8:	81000604 	addi	r4,r16,24
 100bfbc:	80000415 	stw	zero,16(r16)
 100bfc0:	80000515 	stw	zero,20(r16)
 100bfc4:	003feb06 	br	100bf74 <_calloc_r+0x48>
 100bfc8:	1007ad40 	call	1007ad4 <memset>
 100bfcc:	8005883a 	mov	r2,r16
 100bfd0:	dfc00117 	ldw	ra,4(sp)
 100bfd4:	dc000017 	ldw	r16,0(sp)
 100bfd8:	dec00204 	addi	sp,sp,8
 100bfdc:	f800283a 	ret

0100bfe0 <_close_r>:
 100bfe0:	defffd04 	addi	sp,sp,-12
 100bfe4:	dc000015 	stw	r16,0(sp)
 100bfe8:	04004074 	movhi	r16,257
 100bfec:	841a5e04 	addi	r16,r16,27000
 100bff0:	dc400115 	stw	r17,4(sp)
 100bff4:	80000015 	stw	zero,0(r16)
 100bff8:	2023883a 	mov	r17,r4
 100bffc:	2809883a 	mov	r4,r5
 100c000:	dfc00215 	stw	ra,8(sp)
 100c004:	100f9040 	call	100f904 <close>
 100c008:	1007883a 	mov	r3,r2
 100c00c:	00bfffc4 	movi	r2,-1
 100c010:	18800626 	beq	r3,r2,100c02c <_close_r+0x4c>
 100c014:	1805883a 	mov	r2,r3
 100c018:	dfc00217 	ldw	ra,8(sp)
 100c01c:	dc400117 	ldw	r17,4(sp)
 100c020:	dc000017 	ldw	r16,0(sp)
 100c024:	dec00304 	addi	sp,sp,12
 100c028:	f800283a 	ret
 100c02c:	80800017 	ldw	r2,0(r16)
 100c030:	103ff826 	beq	r2,zero,100c014 <_close_r+0x34>
 100c034:	88800015 	stw	r2,0(r17)
 100c038:	1805883a 	mov	r2,r3
 100c03c:	dfc00217 	ldw	ra,8(sp)
 100c040:	dc400117 	ldw	r17,4(sp)
 100c044:	dc000017 	ldw	r16,0(sp)
 100c048:	dec00304 	addi	sp,sp,12
 100c04c:	f800283a 	ret

0100c050 <_fclose_r>:
 100c050:	defffc04 	addi	sp,sp,-16
 100c054:	dc400115 	stw	r17,4(sp)
 100c058:	dc000015 	stw	r16,0(sp)
 100c05c:	dfc00315 	stw	ra,12(sp)
 100c060:	dc800215 	stw	r18,8(sp)
 100c064:	2821883a 	mov	r16,r5
 100c068:	2023883a 	mov	r17,r4
 100c06c:	28002926 	beq	r5,zero,100c114 <_fclose_r+0xc4>
 100c070:	1005eac0 	call	1005eac <__sfp_lock_acquire>
 100c074:	88000226 	beq	r17,zero,100c080 <_fclose_r+0x30>
 100c078:	88800e17 	ldw	r2,56(r17)
 100c07c:	10002d26 	beq	r2,zero,100c134 <_fclose_r+0xe4>
 100c080:	8080030f 	ldh	r2,12(r16)
 100c084:	10002226 	beq	r2,zero,100c110 <_fclose_r+0xc0>
 100c088:	8809883a 	mov	r4,r17
 100c08c:	800b883a 	mov	r5,r16
 100c090:	1005c240 	call	1005c24 <_fflush_r>
 100c094:	1025883a 	mov	r18,r2
 100c098:	80800b17 	ldw	r2,44(r16)
 100c09c:	10000426 	beq	r2,zero,100c0b0 <_fclose_r+0x60>
 100c0a0:	81400717 	ldw	r5,28(r16)
 100c0a4:	8809883a 	mov	r4,r17
 100c0a8:	103ee83a 	callr	r2
 100c0ac:	10002a16 	blt	r2,zero,100c158 <_fclose_r+0x108>
 100c0b0:	8080030b 	ldhu	r2,12(r16)
 100c0b4:	1080200c 	andi	r2,r2,128
 100c0b8:	1000231e 	bne	r2,zero,100c148 <_fclose_r+0xf8>
 100c0bc:	81400c17 	ldw	r5,48(r16)
 100c0c0:	28000526 	beq	r5,zero,100c0d8 <_fclose_r+0x88>
 100c0c4:	80801004 	addi	r2,r16,64
 100c0c8:	28800226 	beq	r5,r2,100c0d4 <_fclose_r+0x84>
 100c0cc:	8809883a 	mov	r4,r17
 100c0d0:	100647c0 	call	100647c <_free_r>
 100c0d4:	80000c15 	stw	zero,48(r16)
 100c0d8:	81401117 	ldw	r5,68(r16)
 100c0dc:	28000326 	beq	r5,zero,100c0ec <_fclose_r+0x9c>
 100c0e0:	8809883a 	mov	r4,r17
 100c0e4:	100647c0 	call	100647c <_free_r>
 100c0e8:	80001115 	stw	zero,68(r16)
 100c0ec:	8000030d 	sth	zero,12(r16)
 100c0f0:	1005eb00 	call	1005eb0 <__sfp_lock_release>
 100c0f4:	9005883a 	mov	r2,r18
 100c0f8:	dfc00317 	ldw	ra,12(sp)
 100c0fc:	dc800217 	ldw	r18,8(sp)
 100c100:	dc400117 	ldw	r17,4(sp)
 100c104:	dc000017 	ldw	r16,0(sp)
 100c108:	dec00404 	addi	sp,sp,16
 100c10c:	f800283a 	ret
 100c110:	1005eb00 	call	1005eb0 <__sfp_lock_release>
 100c114:	0025883a 	mov	r18,zero
 100c118:	9005883a 	mov	r2,r18
 100c11c:	dfc00317 	ldw	ra,12(sp)
 100c120:	dc800217 	ldw	r18,8(sp)
 100c124:	dc400117 	ldw	r17,4(sp)
 100c128:	dc000017 	ldw	r16,0(sp)
 100c12c:	dec00404 	addi	sp,sp,16
 100c130:	f800283a 	ret
 100c134:	8809883a 	mov	r4,r17
 100c138:	1005ebc0 	call	1005ebc <__sinit>
 100c13c:	8080030f 	ldh	r2,12(r16)
 100c140:	103fd11e 	bne	r2,zero,100c088 <_fclose_r+0x38>
 100c144:	003ff206 	br	100c110 <_fclose_r+0xc0>
 100c148:	81400417 	ldw	r5,16(r16)
 100c14c:	8809883a 	mov	r4,r17
 100c150:	100647c0 	call	100647c <_free_r>
 100c154:	003fd906 	br	100c0bc <_fclose_r+0x6c>
 100c158:	04bfffc4 	movi	r18,-1
 100c15c:	003fd406 	br	100c0b0 <_fclose_r+0x60>

0100c160 <fclose>:
 100c160:	00804074 	movhi	r2,257
 100c164:	10939004 	addi	r2,r2,20032
 100c168:	200b883a 	mov	r5,r4
 100c16c:	11000017 	ldw	r4,0(r2)
 100c170:	100c0501 	jmpi	100c050 <_fclose_r>

0100c174 <_fstat_r>:
 100c174:	defffd04 	addi	sp,sp,-12
 100c178:	dc000015 	stw	r16,0(sp)
 100c17c:	04004074 	movhi	r16,257
 100c180:	841a5e04 	addi	r16,r16,27000
 100c184:	dc400115 	stw	r17,4(sp)
 100c188:	80000015 	stw	zero,0(r16)
 100c18c:	2023883a 	mov	r17,r4
 100c190:	2809883a 	mov	r4,r5
 100c194:	300b883a 	mov	r5,r6
 100c198:	dfc00215 	stw	ra,8(sp)
 100c19c:	100fa8c0 	call	100fa8c <fstat>
 100c1a0:	1007883a 	mov	r3,r2
 100c1a4:	00bfffc4 	movi	r2,-1
 100c1a8:	18800626 	beq	r3,r2,100c1c4 <_fstat_r+0x50>
 100c1ac:	1805883a 	mov	r2,r3
 100c1b0:	dfc00217 	ldw	ra,8(sp)
 100c1b4:	dc400117 	ldw	r17,4(sp)
 100c1b8:	dc000017 	ldw	r16,0(sp)
 100c1bc:	dec00304 	addi	sp,sp,12
 100c1c0:	f800283a 	ret
 100c1c4:	80800017 	ldw	r2,0(r16)
 100c1c8:	103ff826 	beq	r2,zero,100c1ac <_fstat_r+0x38>
 100c1cc:	88800015 	stw	r2,0(r17)
 100c1d0:	1805883a 	mov	r2,r3
 100c1d4:	dfc00217 	ldw	ra,8(sp)
 100c1d8:	dc400117 	ldw	r17,4(sp)
 100c1dc:	dc000017 	ldw	r16,0(sp)
 100c1e0:	dec00304 	addi	sp,sp,12
 100c1e4:	f800283a 	ret

0100c1e8 <htinit>:
 100c1e8:	28800003 	ldbu	r2,0(r5)
 100c1ec:	10000626 	beq	r2,zero,100c208 <htinit+0x20>
 100c1f0:	1105883a 	add	r2,r2,r4
 100c1f4:	11800005 	stb	r6,0(r2)
 100c1f8:	28800043 	ldbu	r2,1(r5)
 100c1fc:	31800044 	addi	r6,r6,1
 100c200:	29400044 	addi	r5,r5,1
 100c204:	103ffa1e 	bne	r2,zero,100c1f0 <htinit+0x8>
 100c208:	f800283a 	ret

0100c20c <__hexdig_init>:
 100c20c:	defffd04 	addi	sp,sp,-12
 100c210:	dc400015 	stw	r17,0(sp)
 100c214:	04404074 	movhi	r17,257
 100c218:	8c5a6f04 	addi	r17,r17,27068
 100c21c:	dcc00115 	stw	r19,4(sp)
 100c220:	8809883a 	mov	r4,r17
 100c224:	04c00684 	movi	r19,26
 100c228:	01404074 	movhi	r5,257
 100c22c:	294c8504 	addi	r5,r5,12820
 100c230:	01800404 	movi	r6,16
 100c234:	dfc00215 	stw	ra,8(sp)
 100c238:	100c1e80 	call	100c1e8 <htinit>
 100c23c:	980d883a 	mov	r6,r19
 100c240:	8809883a 	mov	r4,r17
 100c244:	01404074 	movhi	r5,257
 100c248:	294c8804 	addi	r5,r5,12832
 100c24c:	100c1e80 	call	100c1e8 <htinit>
 100c250:	8809883a 	mov	r4,r17
 100c254:	980d883a 	mov	r6,r19
 100c258:	01404074 	movhi	r5,257
 100c25c:	294c8a04 	addi	r5,r5,12840
 100c260:	dfc00217 	ldw	ra,8(sp)
 100c264:	dcc00117 	ldw	r19,4(sp)
 100c268:	dc400017 	ldw	r17,0(sp)
 100c26c:	dec00304 	addi	sp,sp,12
 100c270:	100c1e81 	jmpi	100c1e8 <htinit>

0100c274 <rshift>:
 100c274:	2807d17a 	srai	r3,r5,5
 100c278:	20800417 	ldw	r2,16(r4)
 100c27c:	22400504 	addi	r9,r4,20
 100c280:	480f883a 	mov	r7,r9
 100c284:	1880190e 	bge	r3,r2,100c2ec <rshift+0x78>
 100c288:	1085883a 	add	r2,r2,r2
 100c28c:	18c7883a 	add	r3,r3,r3
 100c290:	1085883a 	add	r2,r2,r2
 100c294:	18c7883a 	add	r3,r3,r3
 100c298:	294007cc 	andi	r5,r5,31
 100c29c:	4891883a 	add	r8,r9,r2
 100c2a0:	48cd883a 	add	r6,r9,r3
 100c2a4:	28001726 	beq	r5,zero,100c304 <rshift+0x90>
 100c2a8:	30c00017 	ldw	r3,0(r6)
 100c2ac:	00800804 	movi	r2,32
 100c2b0:	31800104 	addi	r6,r6,4
 100c2b4:	1155c83a 	sub	r10,r2,r5
 100c2b8:	1946d83a 	srl	r3,r3,r5
 100c2bc:	3200092e 	bgeu	r6,r8,100c2e4 <rshift+0x70>
 100c2c0:	30800017 	ldw	r2,0(r6)
 100c2c4:	1284983a 	sll	r2,r2,r10
 100c2c8:	10c4b03a 	or	r2,r2,r3
 100c2cc:	38800015 	stw	r2,0(r7)
 100c2d0:	30c00017 	ldw	r3,0(r6)
 100c2d4:	31800104 	addi	r6,r6,4
 100c2d8:	39c00104 	addi	r7,r7,4
 100c2dc:	1946d83a 	srl	r3,r3,r5
 100c2e0:	323ff736 	bltu	r6,r8,100c2c0 <rshift+0x4c>
 100c2e4:	38c00015 	stw	r3,0(r7)
 100c2e8:	18000c1e 	bne	r3,zero,100c31c <rshift+0xa8>
 100c2ec:	3a45c83a 	sub	r2,r7,r9
 100c2f0:	1005d0ba 	srai	r2,r2,2
 100c2f4:	20800415 	stw	r2,16(r4)
 100c2f8:	1000011e 	bne	r2,zero,100c300 <rshift+0x8c>
 100c2fc:	20000515 	stw	zero,20(r4)
 100c300:	f800283a 	ret
 100c304:	323ff92e 	bgeu	r6,r8,100c2ec <rshift+0x78>
 100c308:	30800017 	ldw	r2,0(r6)
 100c30c:	31800104 	addi	r6,r6,4
 100c310:	38800015 	stw	r2,0(r7)
 100c314:	39c00104 	addi	r7,r7,4
 100c318:	003ffa06 	br	100c304 <rshift+0x90>
 100c31c:	39c00104 	addi	r7,r7,4
 100c320:	003ff206 	br	100c2ec <rshift+0x78>

0100c324 <__gethex>:
 100c324:	defff304 	addi	sp,sp,-52
 100c328:	dd400815 	stw	r21,32(sp)
 100c32c:	dd000715 	stw	r20,28(sp)
 100c330:	dcc00615 	stw	r19,24(sp)
 100c334:	dc400415 	stw	r17,16(sp)
 100c338:	dfc00c15 	stw	ra,48(sp)
 100c33c:	df000b15 	stw	fp,44(sp)
 100c340:	ddc00a15 	stw	r23,40(sp)
 100c344:	dd800915 	stw	r22,36(sp)
 100c348:	dc800515 	stw	r18,20(sp)
 100c34c:	dc000315 	stw	r16,12(sp)
 100c350:	04404074 	movhi	r17,257
 100c354:	8c5a6f04 	addi	r17,r17,27068
 100c358:	88800c03 	ldbu	r2,48(r17)
 100c35c:	202b883a 	mov	r21,r4
 100c360:	2827883a 	mov	r19,r5
 100c364:	3029883a 	mov	r20,r6
 100c368:	d9c00115 	stw	r7,4(sp)
 100c36c:	10006e26 	beq	r2,zero,100c528 <__gethex+0x204>
 100c370:	99800017 	ldw	r6,0(r19)
 100c374:	00800c04 	movi	r2,48
 100c378:	31000083 	ldbu	r4,2(r6)
 100c37c:	30c00084 	addi	r3,r6,2
 100c380:	20806f1e 	bne	r4,r2,100c540 <__gethex+0x21c>
 100c384:	200b883a 	mov	r5,r4
 100c388:	3007883a 	mov	r3,r6
 100c38c:	188000c3 	ldbu	r2,3(r3)
 100c390:	18c00044 	addi	r3,r3,1
 100c394:	1009883a 	mov	r4,r2
 100c398:	117ffc26 	beq	r2,r5,100c38c <__gethex+0x68>
 100c39c:	1997c83a 	sub	r11,r3,r6
 100c3a0:	19400084 	addi	r5,r3,2
 100c3a4:	2445883a 	add	r2,r4,r17
 100c3a8:	10c00003 	ldbu	r3,0(r2)
 100c3ac:	18002d26 	beq	r3,zero,100c464 <__gethex+0x140>
 100c3b0:	29000003 	ldbu	r4,0(r5)
 100c3b4:	2825883a 	mov	r18,r5
 100c3b8:	000d883a 	mov	r6,zero
 100c3bc:	0013883a 	mov	r9,zero
 100c3c0:	21003fcc 	andi	r4,r4,255
 100c3c4:	2445883a 	add	r2,r4,r17
 100c3c8:	10c00003 	ldbu	r3,0(r2)
 100c3cc:	18000526 	beq	r3,zero,100c3e4 <__gethex+0xc0>
 100c3d0:	29400044 	addi	r5,r5,1
 100c3d4:	29000003 	ldbu	r4,0(r5)
 100c3d8:	2445883a 	add	r2,r4,r17
 100c3dc:	10c00003 	ldbu	r3,0(r2)
 100c3e0:	183ffb1e 	bne	r3,zero,100c3d0 <__gethex+0xac>
 100c3e4:	00800b84 	movi	r2,46
 100c3e8:	20805826 	beq	r4,r2,100c54c <__gethex+0x228>
 100c3ec:	30007a26 	beq	r6,zero,100c5d8 <__gethex+0x2b4>
 100c3f0:	2985c83a 	sub	r2,r5,r6
 100c3f4:	1085883a 	add	r2,r2,r2
 100c3f8:	1085883a 	add	r2,r2,r2
 100c3fc:	00adc83a 	sub	r22,zero,r2
 100c400:	2821883a 	mov	r16,r5
 100c404:	80c00003 	ldbu	r3,0(r16)
 100c408:	00801404 	movi	r2,80
 100c40c:	18801e26 	beq	r3,r2,100c488 <__gethex+0x164>
 100c410:	00801c04 	movi	r2,112
 100c414:	18801c26 	beq	r3,r2,100c488 <__gethex+0x164>
 100c418:	800d883a 	mov	r6,r16
 100c41c:	4805003a 	cmpeq	r2,r9,zero
 100c420:	99800015 	stw	r6,0(r19)
 100c424:	1000861e 	bne	r2,zero,100c640 <__gethex+0x31c>
 100c428:	58003d26 	beq	r11,zero,100c520 <__gethex+0x1fc>
 100c42c:	0025883a 	mov	r18,zero
 100c430:	9005883a 	mov	r2,r18
 100c434:	dfc00c17 	ldw	ra,48(sp)
 100c438:	df000b17 	ldw	fp,44(sp)
 100c43c:	ddc00a17 	ldw	r23,40(sp)
 100c440:	dd800917 	ldw	r22,36(sp)
 100c444:	dd400817 	ldw	r21,32(sp)
 100c448:	dd000717 	ldw	r20,28(sp)
 100c44c:	dcc00617 	ldw	r19,24(sp)
 100c450:	dc800517 	ldw	r18,20(sp)
 100c454:	dc400417 	ldw	r17,16(sp)
 100c458:	dc000317 	ldw	r16,12(sp)
 100c45c:	dec00d04 	addi	sp,sp,52
 100c460:	f800283a 	ret
 100c464:	00800b84 	movi	r2,46
 100c468:	20804a26 	beq	r4,r2,100c594 <__gethex+0x270>
 100c46c:	2821883a 	mov	r16,r5
 100c470:	80c00003 	ldbu	r3,0(r16)
 100c474:	00801404 	movi	r2,80
 100c478:	2825883a 	mov	r18,r5
 100c47c:	02400044 	movi	r9,1
 100c480:	002d883a 	mov	r22,zero
 100c484:	18bfe21e 	bne	r3,r2,100c410 <__gethex+0xec>
 100c488:	80c00043 	ldbu	r3,1(r16)
 100c48c:	00800ac4 	movi	r2,43
 100c490:	81000044 	addi	r4,r16,1
 100c494:	18804a26 	beq	r3,r2,100c5c0 <__gethex+0x29c>
 100c498:	00800b44 	movi	r2,45
 100c49c:	18804c26 	beq	r3,r2,100c5d0 <__gethex+0x2ac>
 100c4a0:	0015883a 	mov	r10,zero
 100c4a4:	1c45883a 	add	r2,r3,r17
 100c4a8:	10800003 	ldbu	r2,0(r2)
 100c4ac:	103fda26 	beq	r2,zero,100c418 <__gethex+0xf4>
 100c4b0:	02000644 	movi	r8,25
 100c4b4:	40bfd816 	blt	r8,r2,100c418 <__gethex+0xf4>
 100c4b8:	20c00043 	ldbu	r3,1(r4)
 100c4bc:	11fffc04 	addi	r7,r2,-16
 100c4c0:	00804074 	movhi	r2,257
 100c4c4:	109a6f04 	addi	r2,r2,27068
 100c4c8:	1887883a 	add	r3,r3,r2
 100c4cc:	18800003 	ldbu	r2,0(r3)
 100c4d0:	21800044 	addi	r6,r4,1
 100c4d4:	10000d26 	beq	r2,zero,100c50c <__gethex+0x1e8>
 100c4d8:	100b883a 	mov	r5,r2
 100c4dc:	4080020e 	bge	r8,r2,100c4e8 <__gethex+0x1c4>
 100c4e0:	00000a06 	br	100c50c <__gethex+0x1e8>
 100c4e4:	41000916 	blt	r8,r4,100c50c <__gethex+0x1e8>
 100c4e8:	31800044 	addi	r6,r6,1
 100c4ec:	30800003 	ldbu	r2,0(r6)
 100c4f0:	38c002a4 	muli	r3,r7,10
 100c4f4:	1445883a 	add	r2,r2,r17
 100c4f8:	11000003 	ldbu	r4,0(r2)
 100c4fc:	1947883a 	add	r3,r3,r5
 100c500:	19fffc04 	addi	r7,r3,-16
 100c504:	200b883a 	mov	r5,r4
 100c508:	203ff61e 	bne	r4,zero,100c4e4 <__gethex+0x1c0>
 100c50c:	5005003a 	cmpeq	r2,r10,zero
 100c510:	1000011e 	bne	r2,zero,100c518 <__gethex+0x1f4>
 100c514:	01cfc83a 	sub	r7,zero,r7
 100c518:	b1ed883a 	add	r22,r22,r7
 100c51c:	003fbf06 	br	100c41c <__gethex+0xf8>
 100c520:	04800184 	movi	r18,6
 100c524:	003fc206 	br	100c430 <__gethex+0x10c>
 100c528:	100c20c0 	call	100c20c <__hexdig_init>
 100c52c:	99800017 	ldw	r6,0(r19)
 100c530:	00800c04 	movi	r2,48
 100c534:	31000083 	ldbu	r4,2(r6)
 100c538:	30c00084 	addi	r3,r6,2
 100c53c:	20bf9126 	beq	r4,r2,100c384 <__gethex+0x60>
 100c540:	180b883a 	mov	r5,r3
 100c544:	0017883a 	mov	r11,zero
 100c548:	003f9606 	br	100c3a4 <__gethex+0x80>
 100c54c:	303fa81e 	bne	r6,zero,100c3f0 <__gethex+0xcc>
 100c550:	29400044 	addi	r5,r5,1
 100c554:	28800003 	ldbu	r2,0(r5)
 100c558:	1445883a 	add	r2,r2,r17
 100c55c:	10c00003 	ldbu	r3,0(r2)
 100c560:	1800ad26 	beq	r3,zero,100c818 <__gethex+0x4f4>
 100c564:	2809883a 	mov	r4,r5
 100c568:	21000044 	addi	r4,r4,1
 100c56c:	20800003 	ldbu	r2,0(r4)
 100c570:	1445883a 	add	r2,r2,r17
 100c574:	10c00003 	ldbu	r3,0(r2)
 100c578:	183ffb1e 	bne	r3,zero,100c568 <__gethex+0x244>
 100c57c:	2145c83a 	sub	r2,r4,r5
 100c580:	1085883a 	add	r2,r2,r2
 100c584:	1085883a 	add	r2,r2,r2
 100c588:	00adc83a 	sub	r22,zero,r2
 100c58c:	200b883a 	mov	r5,r4
 100c590:	003f9b06 	br	100c400 <__gethex+0xdc>
 100c594:	29000043 	ldbu	r4,1(r5)
 100c598:	00804074 	movhi	r2,257
 100c59c:	109a6f04 	addi	r2,r2,27068
 100c5a0:	2c000044 	addi	r16,r5,1
 100c5a4:	2085883a 	add	r2,r4,r2
 100c5a8:	10c00003 	ldbu	r3,0(r2)
 100c5ac:	18000d1e 	bne	r3,zero,100c5e4 <__gethex+0x2c0>
 100c5b0:	2825883a 	mov	r18,r5
 100c5b4:	02400044 	movi	r9,1
 100c5b8:	002d883a 	mov	r22,zero
 100c5bc:	003f9106 	br	100c404 <__gethex+0xe0>
 100c5c0:	0015883a 	mov	r10,zero
 100c5c4:	21000044 	addi	r4,r4,1
 100c5c8:	20c00003 	ldbu	r3,0(r4)
 100c5cc:	003fb506 	br	100c4a4 <__gethex+0x180>
 100c5d0:	02800044 	movi	r10,1
 100c5d4:	003ffb06 	br	100c5c4 <__gethex+0x2a0>
 100c5d8:	2821883a 	mov	r16,r5
 100c5dc:	002d883a 	mov	r22,zero
 100c5e0:	003f8806 	br	100c404 <__gethex+0xe0>
 100c5e4:	00800c04 	movi	r2,48
 100c5e8:	20800e1e 	bne	r4,r2,100c624 <__gethex+0x300>
 100c5ec:	2007883a 	mov	r3,r4
 100c5f0:	800b883a 	mov	r5,r16
 100c5f4:	29400044 	addi	r5,r5,1
 100c5f8:	29000003 	ldbu	r4,0(r5)
 100c5fc:	20803fcc 	andi	r2,r4,255
 100c600:	10fffc26 	beq	r2,r3,100c5f4 <__gethex+0x2d0>
 100c604:	1445883a 	add	r2,r2,r17
 100c608:	10c00003 	ldbu	r3,0(r2)
 100c60c:	1800071e 	bne	r3,zero,100c62c <__gethex+0x308>
 100c610:	02c00044 	movi	r11,1
 100c614:	800d883a 	mov	r6,r16
 100c618:	2825883a 	mov	r18,r5
 100c61c:	5813883a 	mov	r9,r11
 100c620:	003f6706 	br	100c3c0 <__gethex+0x9c>
 100c624:	81000003 	ldbu	r4,0(r16)
 100c628:	800b883a 	mov	r5,r16
 100c62c:	800d883a 	mov	r6,r16
 100c630:	2825883a 	mov	r18,r5
 100c634:	02c00044 	movi	r11,1
 100c638:	0013883a 	mov	r9,zero
 100c63c:	003f6006 	br	100c3c0 <__gethex+0x9c>
 100c640:	8485c83a 	sub	r2,r16,r18
 100c644:	10bfffc4 	addi	r2,r2,-1
 100c648:	00c001c4 	movi	r3,7
 100c64c:	1880700e 	bge	r3,r2,100c810 <__gethex+0x4ec>
 100c650:	000b883a 	mov	r5,zero
 100c654:	1005d07a 	srai	r2,r2,1
 100c658:	29400044 	addi	r5,r5,1
 100c65c:	18bffd16 	blt	r3,r2,100c654 <__gethex+0x330>
 100c660:	a809883a 	mov	r4,r21
 100c664:	10080ec0 	call	10080ec <_Balloc>
 100c668:	1027883a 	mov	r19,r2
 100c66c:	10800504 	addi	r2,r2,20
 100c670:	d8800215 	stw	r2,8(sp)
 100c674:	9400522e 	bgeu	r18,r16,100c7c0 <__gethex+0x49c>
 100c678:	da000217 	ldw	r8,8(sp)
 100c67c:	800b883a 	mov	r5,r16
 100c680:	000f883a 	mov	r7,zero
 100c684:	0009883a 	mov	r4,zero
 100c688:	02400b84 	movi	r9,46
 100c68c:	02800804 	movi	r10,32
 100c690:	297fffc4 	addi	r5,r5,-1
 100c694:	28c00003 	ldbu	r3,0(r5)
 100c698:	1a400826 	beq	r3,r9,100c6bc <__gethex+0x398>
 100c69c:	380d883a 	mov	r6,r7
 100c6a0:	3a802726 	beq	r7,r10,100c740 <__gethex+0x41c>
 100c6a4:	39c00104 	addi	r7,r7,4
 100c6a8:	1c47883a 	add	r3,r3,r17
 100c6ac:	18800003 	ldbu	r2,0(r3)
 100c6b0:	108003cc 	andi	r2,r2,15
 100c6b4:	1184983a 	sll	r2,r2,r6
 100c6b8:	2088b03a 	or	r4,r4,r2
 100c6bc:	917ff436 	bltu	r18,r5,100c690 <__gethex+0x36c>
 100c6c0:	d8c00217 	ldw	r3,8(sp)
 100c6c4:	40800104 	addi	r2,r8,4
 100c6c8:	41000015 	stw	r4,0(r8)
 100c6cc:	10c5c83a 	sub	r2,r2,r3
 100c6d0:	1021d0ba 	srai	r16,r2,2
 100c6d4:	9c000415 	stw	r16,16(r19)
 100c6d8:	1007b940 	call	1007b94 <__hi0bits>
 100c6dc:	8006917a 	slli	r3,r16,5
 100c6e0:	a5c00017 	ldw	r23,0(r20)
 100c6e4:	1885c83a 	sub	r2,r3,r2
 100c6e8:	b8801c16 	blt	r23,r2,100c75c <__gethex+0x438>
 100c6ec:	15c00a16 	blt	r2,r23,100c718 <__gethex+0x3f4>
 100c6f0:	0039883a 	mov	fp,zero
 100c6f4:	a0800217 	ldw	r2,8(r20)
 100c6f8:	1580340e 	bge	r2,r22,100c7cc <__gethex+0x4a8>
 100c6fc:	a809883a 	mov	r4,r21
 100c700:	980b883a 	mov	r5,r19
 100c704:	1007b6c0 	call	1007b6c <_Bfree>
 100c708:	d8c00d17 	ldw	r3,52(sp)
 100c70c:	048028c4 	movi	r18,163
 100c710:	18000015 	stw	zero,0(r3)
 100c714:	003f4606 	br	100c430 <__gethex+0x10c>
 100c718:	b8a1c83a 	sub	r16,r23,r2
 100c71c:	980b883a 	mov	r5,r19
 100c720:	a809883a 	mov	r4,r21
 100c724:	800d883a 	mov	r6,r16
 100c728:	10084b00 	call	10084b0 <__lshift>
 100c72c:	1027883a 	mov	r19,r2
 100c730:	b42dc83a 	sub	r22,r22,r16
 100c734:	10800504 	addi	r2,r2,20
 100c738:	d8800215 	stw	r2,8(sp)
 100c73c:	003fec06 	br	100c6f0 <__gethex+0x3cc>
 100c740:	41000015 	stw	r4,0(r8)
 100c744:	28c00003 	ldbu	r3,0(r5)
 100c748:	01c00104 	movi	r7,4
 100c74c:	000d883a 	mov	r6,zero
 100c750:	41d1883a 	add	r8,r8,r7
 100c754:	0009883a 	mov	r4,zero
 100c758:	003fd306 	br	100c6a8 <__gethex+0x384>
 100c75c:	15e1c83a 	sub	r16,r2,r23
 100c760:	9809883a 	mov	r4,r19
 100c764:	800b883a 	mov	r5,r16
 100c768:	10080640 	call	1008064 <__any_on>
 100c76c:	1000061e 	bne	r2,zero,100c788 <__gethex+0x464>
 100c770:	0039883a 	mov	fp,zero
 100c774:	9809883a 	mov	r4,r19
 100c778:	800b883a 	mov	r5,r16
 100c77c:	100c2740 	call	100c274 <rshift>
 100c780:	b42d883a 	add	r22,r22,r16
 100c784:	003fdb06 	br	100c6f4 <__gethex+0x3d0>
 100c788:	817fffc4 	addi	r5,r16,-1
 100c78c:	2805d17a 	srai	r2,r5,5
 100c790:	d8c00217 	ldw	r3,8(sp)
 100c794:	290007cc 	andi	r4,r5,31
 100c798:	1085883a 	add	r2,r2,r2
 100c79c:	1085883a 	add	r2,r2,r2
 100c7a0:	01800044 	movi	r6,1
 100c7a4:	10c5883a 	add	r2,r2,r3
 100c7a8:	3108983a 	sll	r4,r6,r4
 100c7ac:	10c00017 	ldw	r3,0(r2)
 100c7b0:	20c8703a 	and	r4,r4,r3
 100c7b4:	20001a1e 	bne	r4,zero,100c820 <__gethex+0x4fc>
 100c7b8:	3039883a 	mov	fp,r6
 100c7bc:	003fed06 	br	100c774 <__gethex+0x450>
 100c7c0:	1011883a 	mov	r8,r2
 100c7c4:	0009883a 	mov	r4,zero
 100c7c8:	003fbd06 	br	100c6c0 <__gethex+0x39c>
 100c7cc:	a1000117 	ldw	r4,4(r20)
 100c7d0:	b1001a16 	blt	r22,r4,100c83c <__gethex+0x518>
 100c7d4:	04800044 	movi	r18,1
 100c7d8:	e0000826 	beq	fp,zero,100c7fc <__gethex+0x4d8>
 100c7dc:	a1000317 	ldw	r4,12(r20)
 100c7e0:	00800084 	movi	r2,2
 100c7e4:	20809426 	beq	r4,r2,100ca38 <__gethex+0x714>
 100c7e8:	008000c4 	movi	r2,3
 100c7ec:	20805826 	beq	r4,r2,100c950 <__gethex+0x62c>
 100c7f0:	00800044 	movi	r2,1
 100c7f4:	20803f26 	beq	r4,r2,100c8f4 <__gethex+0x5d0>
 100c7f8:	94800414 	ori	r18,r18,16
 100c7fc:	d8800d17 	ldw	r2,52(sp)
 100c800:	d8c00117 	ldw	r3,4(sp)
 100c804:	14c00015 	stw	r19,0(r2)
 100c808:	1d800015 	stw	r22,0(r3)
 100c80c:	003f0806 	br	100c430 <__gethex+0x10c>
 100c810:	000b883a 	mov	r5,zero
 100c814:	003f9206 	br	100c660 <__gethex+0x33c>
 100c818:	002d883a 	mov	r22,zero
 100c81c:	003ef806 	br	100c400 <__gethex+0xdc>
 100c820:	3140160e 	bge	r6,r5,100c87c <__gethex+0x558>
 100c824:	9809883a 	mov	r4,r19
 100c828:	817fff84 	addi	r5,r16,-2
 100c82c:	10080640 	call	1008064 <__any_on>
 100c830:	10001226 	beq	r2,zero,100c87c <__gethex+0x558>
 100c834:	070000c4 	movi	fp,3
 100c838:	003fce06 	br	100c774 <__gethex+0x450>
 100c83c:	25a3c83a 	sub	r17,r4,r22
 100c840:	8dc01016 	blt	r17,r23,100c884 <__gethex+0x560>
 100c844:	a0c00317 	ldw	r3,12(r20)
 100c848:	00800084 	movi	r2,2
 100c84c:	18809326 	beq	r3,r2,100ca9c <__gethex+0x778>
 100c850:	008000c4 	movi	r2,3
 100c854:	18808e26 	beq	r3,r2,100ca90 <__gethex+0x76c>
 100c858:	00800044 	movi	r2,1
 100c85c:	18807b26 	beq	r3,r2,100ca4c <__gethex+0x728>
 100c860:	a809883a 	mov	r4,r21
 100c864:	980b883a 	mov	r5,r19
 100c868:	1007b6c0 	call	1007b6c <_Bfree>
 100c86c:	d8c00d17 	ldw	r3,52(sp)
 100c870:	04801404 	movi	r18,80
 100c874:	18000015 	stw	zero,0(r3)
 100c878:	003eed06 	br	100c430 <__gethex+0x10c>
 100c87c:	07000084 	movi	fp,2
 100c880:	003fbc06 	br	100c774 <__gethex+0x450>
 100c884:	8c3fffc4 	addi	r16,r17,-1
 100c888:	e0001426 	beq	fp,zero,100c8dc <__gethex+0x5b8>
 100c88c:	07000044 	movi	fp,1
 100c890:	8005d17a 	srai	r2,r16,5
 100c894:	d8c00217 	ldw	r3,8(sp)
 100c898:	814007cc 	andi	r5,r16,31
 100c89c:	1085883a 	add	r2,r2,r2
 100c8a0:	1085883a 	add	r2,r2,r2
 100c8a4:	10c5883a 	add	r2,r2,r3
 100c8a8:	00c00044 	movi	r3,1
 100c8ac:	1946983a 	sll	r3,r3,r5
 100c8b0:	11000017 	ldw	r4,0(r2)
 100c8b4:	1906703a 	and	r3,r3,r4
 100c8b8:	18000126 	beq	r3,zero,100c8c0 <__gethex+0x59c>
 100c8bc:	e7000094 	ori	fp,fp,2
 100c8c0:	880b883a 	mov	r5,r17
 100c8c4:	9809883a 	mov	r4,r19
 100c8c8:	100c2740 	call	100c274 <rshift>
 100c8cc:	a5800117 	ldw	r22,4(r20)
 100c8d0:	bc6fc83a 	sub	r23,r23,r17
 100c8d4:	04800084 	movi	r18,2
 100c8d8:	003fbf06 	br	100c7d8 <__gethex+0x4b4>
 100c8dc:	043fec0e 	bge	zero,r16,100c890 <__gethex+0x56c>
 100c8e0:	9809883a 	mov	r4,r19
 100c8e4:	800b883a 	mov	r5,r16
 100c8e8:	10080640 	call	1008064 <__any_on>
 100c8ec:	1039883a 	mov	fp,r2
 100c8f0:	003fe706 	br	100c890 <__gethex+0x56c>
 100c8f4:	e080008c 	andi	r2,fp,2
 100c8f8:	103fbf26 	beq	r2,zero,100c7f8 <__gethex+0x4d4>
 100c8fc:	d8c00217 	ldw	r3,8(sp)
 100c900:	18800017 	ldw	r2,0(r3)
 100c904:	e084b03a 	or	r2,fp,r2
 100c908:	1104703a 	and	r2,r2,r4
 100c90c:	103fba26 	beq	r2,zero,100c7f8 <__gethex+0x4d4>
 100c910:	9c000417 	ldw	r16,16(r19)
 100c914:	d8c00217 	ldw	r3,8(sp)
 100c918:	017fffc4 	movi	r5,-1
 100c91c:	8405883a 	add	r2,r16,r16
 100c920:	10b9883a 	add	fp,r2,r2
 100c924:	1f09883a 	add	r4,r3,fp
 100c928:	dc000015 	stw	r16,0(sp)
 100c92c:	00000306 	br	100c93c <__gethex+0x618>
 100c930:	18000015 	stw	zero,0(r3)
 100c934:	18c00104 	addi	r3,r3,4
 100c938:	1900082e 	bgeu	r3,r4,100c95c <__gethex+0x638>
 100c93c:	18800017 	ldw	r2,0(r3)
 100c940:	117ffb26 	beq	r2,r5,100c930 <__gethex+0x60c>
 100c944:	10800044 	addi	r2,r2,1
 100c948:	18800015 	stw	r2,0(r3)
 100c94c:	00001f06 	br	100c9cc <__gethex+0x6a8>
 100c950:	d8800e17 	ldw	r2,56(sp)
 100c954:	103fa826 	beq	r2,zero,100c7f8 <__gethex+0x4d4>
 100c958:	003fed06 	br	100c910 <__gethex+0x5ec>
 100c95c:	98800217 	ldw	r2,8(r19)
 100c960:	80801316 	blt	r16,r2,100c9b0 <__gethex+0x68c>
 100c964:	99400117 	ldw	r5,4(r19)
 100c968:	a809883a 	mov	r4,r21
 100c96c:	29400044 	addi	r5,r5,1
 100c970:	10080ec0 	call	10080ec <_Balloc>
 100c974:	99800417 	ldw	r6,16(r19)
 100c978:	99400304 	addi	r5,r19,12
 100c97c:	11000304 	addi	r4,r2,12
 100c980:	318d883a 	add	r6,r6,r6
 100c984:	318d883a 	add	r6,r6,r6
 100c988:	31800204 	addi	r6,r6,8
 100c98c:	1023883a 	mov	r17,r2
 100c990:	10079540 	call	1007954 <memcpy>
 100c994:	980b883a 	mov	r5,r19
 100c998:	a809883a 	mov	r4,r21
 100c99c:	1007b6c0 	call	1007b6c <_Bfree>
 100c9a0:	8c000417 	ldw	r16,16(r17)
 100c9a4:	88800504 	addi	r2,r17,20
 100c9a8:	8827883a 	mov	r19,r17
 100c9ac:	d8800215 	stw	r2,8(sp)
 100c9b0:	8405883a 	add	r2,r16,r16
 100c9b4:	1085883a 	add	r2,r2,r2
 100c9b8:	14c5883a 	add	r2,r2,r19
 100c9bc:	84000044 	addi	r16,r16,1
 100c9c0:	00c00044 	movi	r3,1
 100c9c4:	10c00515 	stw	r3,20(r2)
 100c9c8:	9c000415 	stw	r16,16(r19)
 100c9cc:	00800084 	movi	r2,2
 100c9d0:	90801426 	beq	r18,r2,100ca24 <__gethex+0x700>
 100c9d4:	d8800017 	ldw	r2,0(sp)
 100c9d8:	14000b16 	blt	r2,r16,100ca08 <__gethex+0x6e4>
 100c9dc:	bc0007cc 	andi	r16,r23,31
 100c9e0:	8000021e 	bne	r16,zero,100c9ec <__gethex+0x6c8>
 100c9e4:	94800814 	ori	r18,r18,32
 100c9e8:	003f8406 	br	100c7fc <__gethex+0x4d8>
 100c9ec:	d8c00217 	ldw	r3,8(sp)
 100c9f0:	1f05883a 	add	r2,r3,fp
 100c9f4:	113fff17 	ldw	r4,-4(r2)
 100c9f8:	1007b940 	call	1007b94 <__hi0bits>
 100c9fc:	00c00804 	movi	r3,32
 100ca00:	1c07c83a 	sub	r3,r3,r16
 100ca04:	10fff70e 	bge	r2,r3,100c9e4 <__gethex+0x6c0>
 100ca08:	9809883a 	mov	r4,r19
 100ca0c:	01400044 	movi	r5,1
 100ca10:	100c2740 	call	100c274 <rshift>
 100ca14:	a0800217 	ldw	r2,8(r20)
 100ca18:	b5800044 	addi	r22,r22,1
 100ca1c:	15bf3716 	blt	r2,r22,100c6fc <__gethex+0x3d8>
 100ca20:	003ff006 	br	100c9e4 <__gethex+0x6c0>
 100ca24:	a0800017 	ldw	r2,0(r20)
 100ca28:	10bfffc4 	addi	r2,r2,-1
 100ca2c:	b8801e26 	beq	r23,r2,100caa8 <__gethex+0x784>
 100ca30:	04800884 	movi	r18,34
 100ca34:	003f7106 	br	100c7fc <__gethex+0x4d8>
 100ca38:	d8c00e17 	ldw	r3,56(sp)
 100ca3c:	00800044 	movi	r2,1
 100ca40:	10c5c83a 	sub	r2,r2,r3
 100ca44:	103f6c26 	beq	r2,zero,100c7f8 <__gethex+0x4d4>
 100ca48:	003fb106 	br	100c910 <__gethex+0x5ec>
 100ca4c:	bc7f841e 	bne	r23,r17,100c860 <__gethex+0x53c>
 100ca50:	1dc0050e 	bge	r3,r23,100ca68 <__gethex+0x744>
 100ca54:	b8cbc83a 	sub	r5,r23,r3
 100ca58:	9809883a 	mov	r4,r19
 100ca5c:	10080640 	call	1008064 <__any_on>
 100ca60:	103f7f26 	beq	r2,zero,100c860 <__gethex+0x53c>
 100ca64:	a1000117 	ldw	r4,4(r20)
 100ca68:	d8800117 	ldw	r2,4(sp)
 100ca6c:	d8c00217 	ldw	r3,8(sp)
 100ca70:	04000044 	movi	r16,1
 100ca74:	11000015 	stw	r4,0(r2)
 100ca78:	d8800d17 	ldw	r2,52(sp)
 100ca7c:	04801884 	movi	r18,98
 100ca80:	1c000015 	stw	r16,0(r3)
 100ca84:	14c00015 	stw	r19,0(r2)
 100ca88:	9c000415 	stw	r16,16(r19)
 100ca8c:	003e6806 	br	100c430 <__gethex+0x10c>
 100ca90:	d8c00e17 	ldw	r3,56(sp)
 100ca94:	183f7226 	beq	r3,zero,100c860 <__gethex+0x53c>
 100ca98:	003ff306 	br	100ca68 <__gethex+0x744>
 100ca9c:	d8800e17 	ldw	r2,56(sp)
 100caa0:	103ff126 	beq	r2,zero,100ca68 <__gethex+0x744>
 100caa4:	003f6e06 	br	100c860 <__gethex+0x53c>
 100caa8:	b805d17a 	srai	r2,r23,5
 100caac:	d8c00217 	ldw	r3,8(sp)
 100cab0:	b94007cc 	andi	r5,r23,31
 100cab4:	1085883a 	add	r2,r2,r2
 100cab8:	1085883a 	add	r2,r2,r2
 100cabc:	10c5883a 	add	r2,r2,r3
 100cac0:	00c00044 	movi	r3,1
 100cac4:	1946983a 	sll	r3,r3,r5
 100cac8:	11000017 	ldw	r4,0(r2)
 100cacc:	1906703a 	and	r3,r3,r4
 100cad0:	183fd726 	beq	r3,zero,100ca30 <__gethex+0x70c>
 100cad4:	04800844 	movi	r18,33
 100cad8:	003f4806 	br	100c7fc <__gethex+0x4d8>

0100cadc <L_shift>:
 100cadc:	00800204 	movi	r2,8
 100cae0:	1185c83a 	sub	r2,r2,r6
 100cae4:	1085883a 	add	r2,r2,r2
 100cae8:	21c00017 	ldw	r7,0(r4)
 100caec:	1093883a 	add	r9,r2,r2
 100caf0:	00800804 	movi	r2,32
 100caf4:	200d883a 	mov	r6,r4
 100caf8:	1251c83a 	sub	r8,r2,r9
 100cafc:	31800104 	addi	r6,r6,4
 100cb00:	3805883a 	mov	r2,r7
 100cb04:	31c00017 	ldw	r7,0(r6)
 100cb08:	3a08983a 	sll	r4,r7,r8
 100cb0c:	3a46d83a 	srl	r3,r7,r9
 100cb10:	1104b03a 	or	r2,r2,r4
 100cb14:	180f883a 	mov	r7,r3
 100cb18:	30bfff15 	stw	r2,-4(r6)
 100cb1c:	30c00015 	stw	r3,0(r6)
 100cb20:	317ff636 	bltu	r6,r5,100cafc <L_shift+0x20>
 100cb24:	f800283a 	ret

0100cb28 <__hexnan>:
 100cb28:	defff404 	addi	sp,sp,-48
 100cb2c:	dd800815 	stw	r22,32(sp)
 100cb30:	05804074 	movhi	r22,257
 100cb34:	b59a6f04 	addi	r22,r22,27068
 100cb38:	b0800c03 	ldbu	r2,48(r22)
 100cb3c:	dcc00515 	stw	r19,20(sp)
 100cb40:	dc000215 	stw	r16,8(sp)
 100cb44:	dfc00b15 	stw	ra,44(sp)
 100cb48:	df000a15 	stw	fp,40(sp)
 100cb4c:	ddc00915 	stw	r23,36(sp)
 100cb50:	dd400715 	stw	r21,28(sp)
 100cb54:	dd000615 	stw	r20,24(sp)
 100cb58:	dc800415 	stw	r18,16(sp)
 100cb5c:	dc400315 	stw	r17,12(sp)
 100cb60:	d9000115 	stw	r4,4(sp)
 100cb64:	2821883a 	mov	r16,r5
 100cb68:	3027883a 	mov	r19,r6
 100cb6c:	10007426 	beq	r2,zero,100cd40 <__hexnan+0x218>
 100cb70:	80c00017 	ldw	r3,0(r16)
 100cb74:	1805d17a 	srai	r2,r3,5
 100cb78:	18c007cc 	andi	r3,r3,31
 100cb7c:	1839003a 	cmpeq	fp,r3,zero
 100cb80:	1085883a 	add	r2,r2,r2
 100cb84:	1085883a 	add	r2,r2,r2
 100cb88:	d8c00015 	stw	r3,0(sp)
 100cb8c:	14c5883a 	add	r2,r2,r19
 100cb90:	e000011e 	bne	fp,zero,100cb98 <__hexnan+0x70>
 100cb94:	10800104 	addi	r2,r2,4
 100cb98:	d8c00117 	ldw	r3,4(sp)
 100cb9c:	153fff04 	addi	r20,r2,-4
 100cba0:	a021883a 	mov	r16,r20
 100cba4:	1c400017 	ldw	r17,0(r3)
 100cba8:	a02b883a 	mov	r21,r20
 100cbac:	0025883a 	mov	r18,zero
 100cbb0:	002f883a 	mov	r23,zero
 100cbb4:	000d883a 	mov	r6,zero
 100cbb8:	103fff15 	stw	zero,-4(r2)
 100cbbc:	8c400044 	addi	r17,r17,1
 100cbc0:	89000003 	ldbu	r4,0(r17)
 100cbc4:	20000e26 	beq	r4,zero,100cc00 <__hexnan+0xd8>
 100cbc8:	2585883a 	add	r2,r4,r22
 100cbcc:	10c00003 	ldbu	r3,0(r2)
 100cbd0:	18002e1e 	bne	r3,zero,100cc8c <__hexnan+0x164>
 100cbd4:	00800804 	movi	r2,32
 100cbd8:	11005536 	bltu	r2,r4,100cd30 <__hexnan+0x208>
 100cbdc:	bcbff70e 	bge	r23,r18,100cbbc <__hexnan+0x94>
 100cbe0:	8540022e 	bgeu	r16,r21,100cbec <__hexnan+0xc4>
 100cbe4:	008001c4 	movi	r2,7
 100cbe8:	11803c0e 	bge	r2,r6,100ccdc <__hexnan+0x1b4>
 100cbec:	9c003536 	bltu	r19,r16,100ccc4 <__hexnan+0x19c>
 100cbf0:	8c400044 	addi	r17,r17,1
 100cbf4:	89000003 	ldbu	r4,0(r17)
 100cbf8:	01800204 	movi	r6,8
 100cbfc:	203ff21e 	bne	r4,zero,100cbc8 <__hexnan+0xa0>
 100cc00:	90004d26 	beq	r18,zero,100cd38 <__hexnan+0x210>
 100cc04:	85404336 	bltu	r16,r21,100cd14 <__hexnan+0x1ec>
 100cc08:	9c00382e 	bgeu	r19,r16,100ccec <__hexnan+0x1c4>
 100cc0c:	9807883a 	mov	r3,r19
 100cc10:	80800017 	ldw	r2,0(r16)
 100cc14:	84000104 	addi	r16,r16,4
 100cc18:	18800015 	stw	r2,0(r3)
 100cc1c:	18c00104 	addi	r3,r3,4
 100cc20:	a43ffb2e 	bgeu	r20,r16,100cc10 <__hexnan+0xe8>
 100cc24:	18000015 	stw	zero,0(r3)
 100cc28:	18c00104 	addi	r3,r3,4
 100cc2c:	a0fffd2e 	bgeu	r20,r3,100cc24 <__hexnan+0xfc>
 100cc30:	a0800017 	ldw	r2,0(r20)
 100cc34:	1000071e 	bne	r2,zero,100cc54 <__hexnan+0x12c>
 100cc38:	9d004326 	beq	r19,r20,100cd48 <__hexnan+0x220>
 100cc3c:	a007883a 	mov	r3,r20
 100cc40:	00000106 	br	100cc48 <__hexnan+0x120>
 100cc44:	98c04026 	beq	r19,r3,100cd48 <__hexnan+0x220>
 100cc48:	18ffff04 	addi	r3,r3,-4
 100cc4c:	18800017 	ldw	r2,0(r3)
 100cc50:	103ffc26 	beq	r2,zero,100cc44 <__hexnan+0x11c>
 100cc54:	00c00144 	movi	r3,5
 100cc58:	1805883a 	mov	r2,r3
 100cc5c:	dfc00b17 	ldw	ra,44(sp)
 100cc60:	df000a17 	ldw	fp,40(sp)
 100cc64:	ddc00917 	ldw	r23,36(sp)
 100cc68:	dd800817 	ldw	r22,32(sp)
 100cc6c:	dd400717 	ldw	r21,28(sp)
 100cc70:	dd000617 	ldw	r20,24(sp)
 100cc74:	dcc00517 	ldw	r19,20(sp)
 100cc78:	dc800417 	ldw	r18,16(sp)
 100cc7c:	dc400317 	ldw	r17,12(sp)
 100cc80:	dc000217 	ldw	r16,8(sp)
 100cc84:	dec00c04 	addi	sp,sp,48
 100cc88:	f800283a 	ret
 100cc8c:	31800044 	addi	r6,r6,1
 100cc90:	00800204 	movi	r2,8
 100cc94:	94800044 	addi	r18,r18,1
 100cc98:	1180040e 	bge	r2,r6,100ccac <__hexnan+0x184>
 100cc9c:	9c3fc72e 	bgeu	r19,r16,100cbbc <__hexnan+0x94>
 100cca0:	843fff04 	addi	r16,r16,-4
 100cca4:	80000015 	stw	zero,0(r16)
 100cca8:	01800044 	movi	r6,1
 100ccac:	80800017 	ldw	r2,0(r16)
 100ccb0:	18c003cc 	andi	r3,r3,15
 100ccb4:	1004913a 	slli	r2,r2,4
 100ccb8:	10c4b03a 	or	r2,r2,r3
 100ccbc:	80800015 	stw	r2,0(r16)
 100ccc0:	003fbe06 	br	100cbbc <__hexnan+0x94>
 100ccc4:	843fff04 	addi	r16,r16,-4
 100ccc8:	802b883a 	mov	r21,r16
 100cccc:	902f883a 	mov	r23,r18
 100ccd0:	000d883a 	mov	r6,zero
 100ccd4:	80000015 	stw	zero,0(r16)
 100ccd8:	003fb806 	br	100cbbc <__hexnan+0x94>
 100ccdc:	8009883a 	mov	r4,r16
 100cce0:	a80b883a 	mov	r5,r21
 100cce4:	100cadc0 	call	100cadc <L_shift>
 100cce8:	003fc006 	br	100cbec <__hexnan+0xc4>
 100ccec:	e03fd01e 	bne	fp,zero,100cc30 <__hexnan+0x108>
 100ccf0:	d8c00017 	ldw	r3,0(sp)
 100ccf4:	00800804 	movi	r2,32
 100ccf8:	10c5c83a 	sub	r2,r2,r3
 100ccfc:	00ffffc4 	movi	r3,-1
 100cd00:	1886d83a 	srl	r3,r3,r2
 100cd04:	a0800017 	ldw	r2,0(r20)
 100cd08:	10c4703a 	and	r2,r2,r3
 100cd0c:	a0800015 	stw	r2,0(r20)
 100cd10:	003fc806 	br	100cc34 <__hexnan+0x10c>
 100cd14:	008001c4 	movi	r2,7
 100cd18:	11bfbb16 	blt	r2,r6,100cc08 <__hexnan+0xe0>
 100cd1c:	a80b883a 	mov	r5,r21
 100cd20:	8009883a 	mov	r4,r16
 100cd24:	100cadc0 	call	100cadc <L_shift>
 100cd28:	9c3ff02e 	bgeu	r19,r16,100ccec <__hexnan+0x1c4>
 100cd2c:	003fb706 	br	100cc0c <__hexnan+0xe4>
 100cd30:	00800a44 	movi	r2,41
 100cd34:	20800826 	beq	r4,r2,100cd58 <__hexnan+0x230>
 100cd38:	00c00104 	movi	r3,4
 100cd3c:	003fc606 	br	100cc58 <__hexnan+0x130>
 100cd40:	100c20c0 	call	100c20c <__hexdig_init>
 100cd44:	003f8a06 	br	100cb70 <__hexnan+0x48>
 100cd48:	00800044 	movi	r2,1
 100cd4c:	00c00144 	movi	r3,5
 100cd50:	98800015 	stw	r2,0(r19)
 100cd54:	003fc006 	br	100cc58 <__hexnan+0x130>
 100cd58:	903ff726 	beq	r18,zero,100cd38 <__hexnan+0x210>
 100cd5c:	d8c00117 	ldw	r3,4(sp)
 100cd60:	88800044 	addi	r2,r17,1
 100cd64:	18800015 	stw	r2,0(r3)
 100cd68:	857fa72e 	bgeu	r16,r21,100cc08 <__hexnan+0xe0>
 100cd6c:	003fe906 	br	100cd14 <__hexnan+0x1ec>

0100cd70 <_isatty_r>:
 100cd70:	defffd04 	addi	sp,sp,-12
 100cd74:	dc000015 	stw	r16,0(sp)
 100cd78:	04004074 	movhi	r16,257
 100cd7c:	841a5e04 	addi	r16,r16,27000
 100cd80:	dc400115 	stw	r17,4(sp)
 100cd84:	80000015 	stw	zero,0(r16)
 100cd88:	2023883a 	mov	r17,r4
 100cd8c:	2809883a 	mov	r4,r5
 100cd90:	dfc00215 	stw	ra,8(sp)
 100cd94:	100fbc00 	call	100fbc0 <isatty>
 100cd98:	1007883a 	mov	r3,r2
 100cd9c:	00bfffc4 	movi	r2,-1
 100cda0:	18800626 	beq	r3,r2,100cdbc <_isatty_r+0x4c>
 100cda4:	1805883a 	mov	r2,r3
 100cda8:	dfc00217 	ldw	ra,8(sp)
 100cdac:	dc400117 	ldw	r17,4(sp)
 100cdb0:	dc000017 	ldw	r16,0(sp)
 100cdb4:	dec00304 	addi	sp,sp,12
 100cdb8:	f800283a 	ret
 100cdbc:	80800017 	ldw	r2,0(r16)
 100cdc0:	103ff826 	beq	r2,zero,100cda4 <_isatty_r+0x34>
 100cdc4:	88800015 	stw	r2,0(r17)
 100cdc8:	1805883a 	mov	r2,r3
 100cdcc:	dfc00217 	ldw	ra,8(sp)
 100cdd0:	dc400117 	ldw	r17,4(sp)
 100cdd4:	dc000017 	ldw	r16,0(sp)
 100cdd8:	dec00304 	addi	sp,sp,12
 100cddc:	f800283a 	ret

0100cde0 <_lseek_r>:
 100cde0:	defffd04 	addi	sp,sp,-12
 100cde4:	dc000015 	stw	r16,0(sp)
 100cde8:	04004074 	movhi	r16,257
 100cdec:	841a5e04 	addi	r16,r16,27000
 100cdf0:	dc400115 	stw	r17,4(sp)
 100cdf4:	80000015 	stw	zero,0(r16)
 100cdf8:	2023883a 	mov	r17,r4
 100cdfc:	2809883a 	mov	r4,r5
 100ce00:	300b883a 	mov	r5,r6
 100ce04:	380d883a 	mov	r6,r7
 100ce08:	dfc00215 	stw	ra,8(sp)
 100ce0c:	100fdcc0 	call	100fdcc <lseek>
 100ce10:	1007883a 	mov	r3,r2
 100ce14:	00bfffc4 	movi	r2,-1
 100ce18:	18800626 	beq	r3,r2,100ce34 <_lseek_r+0x54>
 100ce1c:	1805883a 	mov	r2,r3
 100ce20:	dfc00217 	ldw	ra,8(sp)
 100ce24:	dc400117 	ldw	r17,4(sp)
 100ce28:	dc000017 	ldw	r16,0(sp)
 100ce2c:	dec00304 	addi	sp,sp,12
 100ce30:	f800283a 	ret
 100ce34:	80800017 	ldw	r2,0(r16)
 100ce38:	103ff826 	beq	r2,zero,100ce1c <_lseek_r+0x3c>
 100ce3c:	88800015 	stw	r2,0(r17)
 100ce40:	1805883a 	mov	r2,r3
 100ce44:	dfc00217 	ldw	ra,8(sp)
 100ce48:	dc400117 	ldw	r17,4(sp)
 100ce4c:	dc000017 	ldw	r16,0(sp)
 100ce50:	dec00304 	addi	sp,sp,12
 100ce54:	f800283a 	ret

0100ce58 <_read_r>:
 100ce58:	defffd04 	addi	sp,sp,-12
 100ce5c:	dc000015 	stw	r16,0(sp)
 100ce60:	04004074 	movhi	r16,257
 100ce64:	841a5e04 	addi	r16,r16,27000
 100ce68:	dc400115 	stw	r17,4(sp)
 100ce6c:	80000015 	stw	zero,0(r16)
 100ce70:	2023883a 	mov	r17,r4
 100ce74:	2809883a 	mov	r4,r5
 100ce78:	300b883a 	mov	r5,r6
 100ce7c:	380d883a 	mov	r6,r7
 100ce80:	dfc00215 	stw	ra,8(sp)
 100ce84:	100ffc80 	call	100ffc8 <read>
 100ce88:	1007883a 	mov	r3,r2
 100ce8c:	00bfffc4 	movi	r2,-1
 100ce90:	18800626 	beq	r3,r2,100ceac <_read_r+0x54>
 100ce94:	1805883a 	mov	r2,r3
 100ce98:	dfc00217 	ldw	ra,8(sp)
 100ce9c:	dc400117 	ldw	r17,4(sp)
 100cea0:	dc000017 	ldw	r16,0(sp)
 100cea4:	dec00304 	addi	sp,sp,12
 100cea8:	f800283a 	ret
 100ceac:	80800017 	ldw	r2,0(r16)
 100ceb0:	103ff826 	beq	r2,zero,100ce94 <_read_r+0x3c>
 100ceb4:	88800015 	stw	r2,0(r17)
 100ceb8:	1805883a 	mov	r2,r3
 100cebc:	dfc00217 	ldw	ra,8(sp)
 100cec0:	dc400117 	ldw	r17,4(sp)
 100cec4:	dc000017 	ldw	r16,0(sp)
 100cec8:	dec00304 	addi	sp,sp,12
 100cecc:	f800283a 	ret

0100ced0 <__muldi3>:
 100ced0:	2011883a 	mov	r8,r4
 100ced4:	427fffcc 	andi	r9,r8,65535
 100ced8:	4018d43a 	srli	r12,r8,16
 100cedc:	32bfffcc 	andi	r10,r6,65535
 100cee0:	3016d43a 	srli	r11,r6,16
 100cee4:	4a85383a 	mul	r2,r9,r10
 100cee8:	6295383a 	mul	r10,r12,r10
 100ceec:	4ad3383a 	mul	r9,r9,r11
 100cef0:	113fffcc 	andi	r4,r2,65535
 100cef4:	1004d43a 	srli	r2,r2,16
 100cef8:	4a93883a 	add	r9,r9,r10
 100cefc:	3807883a 	mov	r3,r7
 100cf00:	1245883a 	add	r2,r2,r9
 100cf04:	280f883a 	mov	r7,r5
 100cf08:	180b883a 	mov	r5,r3
 100cf0c:	1006943a 	slli	r3,r2,16
 100cf10:	defffd04 	addi	sp,sp,-12
 100cf14:	dc800215 	stw	r18,8(sp)
 100cf18:	1907883a 	add	r3,r3,r4
 100cf1c:	dc400115 	stw	r17,4(sp)
 100cf20:	dc000015 	stw	r16,0(sp)
 100cf24:	4165383a 	mul	r18,r8,r5
 100cf28:	31e3383a 	mul	r17,r6,r7
 100cf2c:	1012d43a 	srli	r9,r2,16
 100cf30:	62d9383a 	mul	r12,r12,r11
 100cf34:	181f883a 	mov	r15,r3
 100cf38:	1280022e 	bgeu	r2,r10,100cf44 <__muldi3+0x74>
 100cf3c:	00800074 	movhi	r2,1
 100cf40:	6099883a 	add	r12,r12,r2
 100cf44:	624d883a 	add	r6,r12,r9
 100cf48:	9187883a 	add	r3,r18,r6
 100cf4c:	88c7883a 	add	r3,r17,r3
 100cf50:	7805883a 	mov	r2,r15
 100cf54:	dc800217 	ldw	r18,8(sp)
 100cf58:	dc400117 	ldw	r17,4(sp)
 100cf5c:	dc000017 	ldw	r16,0(sp)
 100cf60:	dec00304 	addi	sp,sp,12
 100cf64:	f800283a 	ret

0100cf68 <__fixunsdfsi>:
 100cf68:	defffb04 	addi	sp,sp,-20
 100cf6c:	dc400115 	stw	r17,4(sp)
 100cf70:	dc000015 	stw	r16,0(sp)
 100cf74:	04507834 	movhi	r17,16864
 100cf78:	0021883a 	mov	r16,zero
 100cf7c:	800d883a 	mov	r6,r16
 100cf80:	880f883a 	mov	r7,r17
 100cf84:	dcc00315 	stw	r19,12(sp)
 100cf88:	dc800215 	stw	r18,8(sp)
 100cf8c:	2827883a 	mov	r19,r5
 100cf90:	2025883a 	mov	r18,r4
 100cf94:	dfc00415 	stw	ra,16(sp)
 100cf98:	100e9b80 	call	100e9b8 <__gedf2>
 100cf9c:	000d883a 	mov	r6,zero
 100cfa0:	880f883a 	mov	r7,r17
 100cfa4:	980b883a 	mov	r5,r19
 100cfa8:	9009883a 	mov	r4,r18
 100cfac:	10000d16 	blt	r2,zero,100cfe4 <__fixunsdfsi+0x7c>
 100cfb0:	100e1100 	call	100e110 <__subdf3>
 100cfb4:	180b883a 	mov	r5,r3
 100cfb8:	1009883a 	mov	r4,r2
 100cfbc:	100ec480 	call	100ec48 <__fixdfsi>
 100cfc0:	00e00034 	movhi	r3,32768
 100cfc4:	10c5883a 	add	r2,r2,r3
 100cfc8:	dfc00417 	ldw	ra,16(sp)
 100cfcc:	dcc00317 	ldw	r19,12(sp)
 100cfd0:	dc800217 	ldw	r18,8(sp)
 100cfd4:	dc400117 	ldw	r17,4(sp)
 100cfd8:	dc000017 	ldw	r16,0(sp)
 100cfdc:	dec00504 	addi	sp,sp,20
 100cfe0:	f800283a 	ret
 100cfe4:	980b883a 	mov	r5,r19
 100cfe8:	9009883a 	mov	r4,r18
 100cfec:	100ec480 	call	100ec48 <__fixdfsi>
 100cff0:	dfc00417 	ldw	ra,16(sp)
 100cff4:	dcc00317 	ldw	r19,12(sp)
 100cff8:	dc800217 	ldw	r18,8(sp)
 100cffc:	dc400117 	ldw	r17,4(sp)
 100d000:	dc000017 	ldw	r16,0(sp)
 100d004:	dec00504 	addi	sp,sp,20
 100d008:	f800283a 	ret

0100d00c <__udivdi3>:
 100d00c:	defff004 	addi	sp,sp,-64
 100d010:	2005883a 	mov	r2,r4
 100d014:	3011883a 	mov	r8,r6
 100d018:	df000e15 	stw	fp,56(sp)
 100d01c:	dd000a15 	stw	r20,40(sp)
 100d020:	dc000615 	stw	r16,24(sp)
 100d024:	dfc00f15 	stw	ra,60(sp)
 100d028:	ddc00d15 	stw	r23,52(sp)
 100d02c:	dd800c15 	stw	r22,48(sp)
 100d030:	dd400b15 	stw	r21,44(sp)
 100d034:	dcc00915 	stw	r19,36(sp)
 100d038:	dc800815 	stw	r18,32(sp)
 100d03c:	dc400715 	stw	r17,28(sp)
 100d040:	4021883a 	mov	r16,r8
 100d044:	1039883a 	mov	fp,r2
 100d048:	2829883a 	mov	r20,r5
 100d04c:	38003b1e 	bne	r7,zero,100d13c <__udivdi3+0x130>
 100d050:	2a005c36 	bltu	r5,r8,100d1c4 <__udivdi3+0x1b8>
 100d054:	4000a626 	beq	r8,zero,100d2f0 <__udivdi3+0x2e4>
 100d058:	00bfffd4 	movui	r2,65535
 100d05c:	14009e36 	bltu	r2,r16,100d2d8 <__udivdi3+0x2cc>
 100d060:	00803fc4 	movi	r2,255
 100d064:	14013d36 	bltu	r2,r16,100d55c <__udivdi3+0x550>
 100d068:	000b883a 	mov	r5,zero
 100d06c:	0005883a 	mov	r2,zero
 100d070:	8084d83a 	srl	r2,r16,r2
 100d074:	01004074 	movhi	r4,257
 100d078:	210c9104 	addi	r4,r4,12868
 100d07c:	01800804 	movi	r6,32
 100d080:	1105883a 	add	r2,r2,r4
 100d084:	10c00003 	ldbu	r3,0(r2)
 100d088:	28c7883a 	add	r3,r5,r3
 100d08c:	30edc83a 	sub	r22,r6,r3
 100d090:	b000ee1e 	bne	r22,zero,100d44c <__udivdi3+0x440>
 100d094:	802ad43a 	srli	r21,r16,16
 100d098:	00800044 	movi	r2,1
 100d09c:	a423c83a 	sub	r17,r20,r16
 100d0a0:	85ffffcc 	andi	r23,r16,65535
 100d0a4:	d8800315 	stw	r2,12(sp)
 100d0a8:	8809883a 	mov	r4,r17
 100d0ac:	a80b883a 	mov	r5,r21
 100d0b0:	100f0640 	call	100f064 <__udivsi3>
 100d0b4:	8809883a 	mov	r4,r17
 100d0b8:	a80b883a 	mov	r5,r21
 100d0bc:	102d883a 	mov	r22,r2
 100d0c0:	100f06c0 	call	100f06c <__umodsi3>
 100d0c4:	1004943a 	slli	r2,r2,16
 100d0c8:	e006d43a 	srli	r3,fp,16
 100d0cc:	bda3383a 	mul	r17,r23,r22
 100d0d0:	10c4b03a 	or	r2,r2,r3
 100d0d4:	1440042e 	bgeu	r2,r17,100d0e8 <__udivdi3+0xdc>
 100d0d8:	1405883a 	add	r2,r2,r16
 100d0dc:	b5bfffc4 	addi	r22,r22,-1
 100d0e0:	14000136 	bltu	r2,r16,100d0e8 <__udivdi3+0xdc>
 100d0e4:	14413d36 	bltu	r2,r17,100d5dc <__udivdi3+0x5d0>
 100d0e8:	1463c83a 	sub	r17,r2,r17
 100d0ec:	8809883a 	mov	r4,r17
 100d0f0:	a80b883a 	mov	r5,r21
 100d0f4:	100f0640 	call	100f064 <__udivsi3>
 100d0f8:	8809883a 	mov	r4,r17
 100d0fc:	a80b883a 	mov	r5,r21
 100d100:	1029883a 	mov	r20,r2
 100d104:	100f06c0 	call	100f06c <__umodsi3>
 100d108:	1004943a 	slli	r2,r2,16
 100d10c:	bd09383a 	mul	r4,r23,r20
 100d110:	e0ffffcc 	andi	r3,fp,65535
 100d114:	10c4b03a 	or	r2,r2,r3
 100d118:	1100042e 	bgeu	r2,r4,100d12c <__udivdi3+0x120>
 100d11c:	8085883a 	add	r2,r16,r2
 100d120:	a53fffc4 	addi	r20,r20,-1
 100d124:	14000136 	bltu	r2,r16,100d12c <__udivdi3+0x120>
 100d128:	11012036 	bltu	r2,r4,100d5ac <__udivdi3+0x5a0>
 100d12c:	b004943a 	slli	r2,r22,16
 100d130:	d9000317 	ldw	r4,12(sp)
 100d134:	a084b03a 	or	r2,r20,r2
 100d138:	00001506 	br	100d190 <__udivdi3+0x184>
 100d13c:	380d883a 	mov	r6,r7
 100d140:	29c06236 	bltu	r5,r7,100d2cc <__udivdi3+0x2c0>
 100d144:	00bfffd4 	movui	r2,65535
 100d148:	11c05a36 	bltu	r2,r7,100d2b4 <__udivdi3+0x2a8>
 100d14c:	00803fc4 	movi	r2,255
 100d150:	11c0fc36 	bltu	r2,r7,100d544 <__udivdi3+0x538>
 100d154:	000b883a 	mov	r5,zero
 100d158:	0005883a 	mov	r2,zero
 100d15c:	3084d83a 	srl	r2,r6,r2
 100d160:	01004074 	movhi	r4,257
 100d164:	210c9104 	addi	r4,r4,12868
 100d168:	01c00804 	movi	r7,32
 100d16c:	1105883a 	add	r2,r2,r4
 100d170:	10c00003 	ldbu	r3,0(r2)
 100d174:	28c7883a 	add	r3,r5,r3
 100d178:	38efc83a 	sub	r23,r7,r3
 100d17c:	b800691e 	bne	r23,zero,100d324 <__udivdi3+0x318>
 100d180:	35000136 	bltu	r6,r20,100d188 <__udivdi3+0x17c>
 100d184:	e4005136 	bltu	fp,r16,100d2cc <__udivdi3+0x2c0>
 100d188:	00800044 	movi	r2,1
 100d18c:	0009883a 	mov	r4,zero
 100d190:	2007883a 	mov	r3,r4
 100d194:	dfc00f17 	ldw	ra,60(sp)
 100d198:	df000e17 	ldw	fp,56(sp)
 100d19c:	ddc00d17 	ldw	r23,52(sp)
 100d1a0:	dd800c17 	ldw	r22,48(sp)
 100d1a4:	dd400b17 	ldw	r21,44(sp)
 100d1a8:	dd000a17 	ldw	r20,40(sp)
 100d1ac:	dcc00917 	ldw	r19,36(sp)
 100d1b0:	dc800817 	ldw	r18,32(sp)
 100d1b4:	dc400717 	ldw	r17,28(sp)
 100d1b8:	dc000617 	ldw	r16,24(sp)
 100d1bc:	dec01004 	addi	sp,sp,64
 100d1c0:	f800283a 	ret
 100d1c4:	00bfffd4 	movui	r2,65535
 100d1c8:	12005036 	bltu	r2,r8,100d30c <__udivdi3+0x300>
 100d1cc:	00803fc4 	movi	r2,255
 100d1d0:	1200e836 	bltu	r2,r8,100d574 <__udivdi3+0x568>
 100d1d4:	000b883a 	mov	r5,zero
 100d1d8:	0005883a 	mov	r2,zero
 100d1dc:	8084d83a 	srl	r2,r16,r2
 100d1e0:	01004074 	movhi	r4,257
 100d1e4:	210c9104 	addi	r4,r4,12868
 100d1e8:	01800804 	movi	r6,32
 100d1ec:	1105883a 	add	r2,r2,r4
 100d1f0:	10c00003 	ldbu	r3,0(r2)
 100d1f4:	28c7883a 	add	r3,r5,r3
 100d1f8:	30cbc83a 	sub	r5,r6,r3
 100d1fc:	28000626 	beq	r5,zero,100d218 <__udivdi3+0x20c>
 100d200:	3145c83a 	sub	r2,r6,r5
 100d204:	e084d83a 	srl	r2,fp,r2
 100d208:	a146983a 	sll	r3,r20,r5
 100d20c:	e178983a 	sll	fp,fp,r5
 100d210:	8160983a 	sll	r16,r16,r5
 100d214:	18a8b03a 	or	r20,r3,r2
 100d218:	802ad43a 	srli	r21,r16,16
 100d21c:	a009883a 	mov	r4,r20
 100d220:	85ffffcc 	andi	r23,r16,65535
 100d224:	a80b883a 	mov	r5,r21
 100d228:	100f0640 	call	100f064 <__udivsi3>
 100d22c:	a009883a 	mov	r4,r20
 100d230:	a80b883a 	mov	r5,r21
 100d234:	102d883a 	mov	r22,r2
 100d238:	100f06c0 	call	100f06c <__umodsi3>
 100d23c:	1004943a 	slli	r2,r2,16
 100d240:	e006d43a 	srli	r3,fp,16
 100d244:	bda3383a 	mul	r17,r23,r22
 100d248:	10c4b03a 	or	r2,r2,r3
 100d24c:	1440042e 	bgeu	r2,r17,100d260 <__udivdi3+0x254>
 100d250:	1405883a 	add	r2,r2,r16
 100d254:	b5bfffc4 	addi	r22,r22,-1
 100d258:	14000136 	bltu	r2,r16,100d260 <__udivdi3+0x254>
 100d25c:	1440d536 	bltu	r2,r17,100d5b4 <__udivdi3+0x5a8>
 100d260:	1463c83a 	sub	r17,r2,r17
 100d264:	8809883a 	mov	r4,r17
 100d268:	a80b883a 	mov	r5,r21
 100d26c:	100f0640 	call	100f064 <__udivsi3>
 100d270:	8809883a 	mov	r4,r17
 100d274:	a80b883a 	mov	r5,r21
 100d278:	1029883a 	mov	r20,r2
 100d27c:	100f06c0 	call	100f06c <__umodsi3>
 100d280:	1004943a 	slli	r2,r2,16
 100d284:	bd09383a 	mul	r4,r23,r20
 100d288:	e0ffffcc 	andi	r3,fp,65535
 100d28c:	10c4b03a 	or	r2,r2,r3
 100d290:	1100042e 	bgeu	r2,r4,100d2a4 <__udivdi3+0x298>
 100d294:	8085883a 	add	r2,r16,r2
 100d298:	a53fffc4 	addi	r20,r20,-1
 100d29c:	14000136 	bltu	r2,r16,100d2a4 <__udivdi3+0x298>
 100d2a0:	1100c736 	bltu	r2,r4,100d5c0 <__udivdi3+0x5b4>
 100d2a4:	b004943a 	slli	r2,r22,16
 100d2a8:	0009883a 	mov	r4,zero
 100d2ac:	a084b03a 	or	r2,r20,r2
 100d2b0:	003fb706 	br	100d190 <__udivdi3+0x184>
 100d2b4:	00804034 	movhi	r2,256
 100d2b8:	10bfffc4 	addi	r2,r2,-1
 100d2bc:	11c0a436 	bltu	r2,r7,100d550 <__udivdi3+0x544>
 100d2c0:	01400404 	movi	r5,16
 100d2c4:	2805883a 	mov	r2,r5
 100d2c8:	003fa406 	br	100d15c <__udivdi3+0x150>
 100d2cc:	0005883a 	mov	r2,zero
 100d2d0:	0009883a 	mov	r4,zero
 100d2d4:	003fae06 	br	100d190 <__udivdi3+0x184>
 100d2d8:	00804034 	movhi	r2,256
 100d2dc:	10bfffc4 	addi	r2,r2,-1
 100d2e0:	1400a136 	bltu	r2,r16,100d568 <__udivdi3+0x55c>
 100d2e4:	01400404 	movi	r5,16
 100d2e8:	2805883a 	mov	r2,r5
 100d2ec:	003f6006 	br	100d070 <__udivdi3+0x64>
 100d2f0:	01000044 	movi	r4,1
 100d2f4:	000b883a 	mov	r5,zero
 100d2f8:	100f0640 	call	100f064 <__udivsi3>
 100d2fc:	1021883a 	mov	r16,r2
 100d300:	00bfffd4 	movui	r2,65535
 100d304:	143ff436 	bltu	r2,r16,100d2d8 <__udivdi3+0x2cc>
 100d308:	003f5506 	br	100d060 <__udivdi3+0x54>
 100d30c:	00804034 	movhi	r2,256
 100d310:	10bfffc4 	addi	r2,r2,-1
 100d314:	12009a36 	bltu	r2,r8,100d580 <__udivdi3+0x574>
 100d318:	01400404 	movi	r5,16
 100d31c:	2805883a 	mov	r2,r5
 100d320:	003fae06 	br	100d1dc <__udivdi3+0x1d0>
 100d324:	3dc5c83a 	sub	r2,r7,r23
 100d328:	35c8983a 	sll	r4,r6,r23
 100d32c:	8086d83a 	srl	r3,r16,r2
 100d330:	a0a2d83a 	srl	r17,r20,r2
 100d334:	e084d83a 	srl	r2,fp,r2
 100d338:	20eab03a 	or	r21,r4,r3
 100d33c:	a82cd43a 	srli	r22,r21,16
 100d340:	a5c6983a 	sll	r3,r20,r23
 100d344:	8809883a 	mov	r4,r17
 100d348:	b00b883a 	mov	r5,r22
 100d34c:	1886b03a 	or	r3,r3,r2
 100d350:	d8c00215 	stw	r3,8(sp)
 100d354:	100f0640 	call	100f064 <__udivsi3>
 100d358:	8809883a 	mov	r4,r17
 100d35c:	b00b883a 	mov	r5,r22
 100d360:	1029883a 	mov	r20,r2
 100d364:	100f06c0 	call	100f06c <__umodsi3>
 100d368:	a8ffffcc 	andi	r3,r21,65535
 100d36c:	d8c00515 	stw	r3,20(sp)
 100d370:	d9000217 	ldw	r4,8(sp)
 100d374:	d9400517 	ldw	r5,20(sp)
 100d378:	1004943a 	slli	r2,r2,16
 100d37c:	2006d43a 	srli	r3,r4,16
 100d380:	85e0983a 	sll	r16,r16,r23
 100d384:	2d23383a 	mul	r17,r5,r20
 100d388:	10c4b03a 	or	r2,r2,r3
 100d38c:	dc000015 	stw	r16,0(sp)
 100d390:	1440032e 	bgeu	r2,r17,100d3a0 <__udivdi3+0x394>
 100d394:	1545883a 	add	r2,r2,r21
 100d398:	a53fffc4 	addi	r20,r20,-1
 100d39c:	15407f2e 	bgeu	r2,r21,100d59c <__udivdi3+0x590>
 100d3a0:	1463c83a 	sub	r17,r2,r17
 100d3a4:	8809883a 	mov	r4,r17
 100d3a8:	b00b883a 	mov	r5,r22
 100d3ac:	100f0640 	call	100f064 <__udivsi3>
 100d3b0:	8809883a 	mov	r4,r17
 100d3b4:	b00b883a 	mov	r5,r22
 100d3b8:	1021883a 	mov	r16,r2
 100d3bc:	100f06c0 	call	100f06c <__umodsi3>
 100d3c0:	d8c00517 	ldw	r3,20(sp)
 100d3c4:	d9000217 	ldw	r4,8(sp)
 100d3c8:	1004943a 	slli	r2,r2,16
 100d3cc:	1c0f383a 	mul	r7,r3,r16
 100d3d0:	20ffffcc 	andi	r3,r4,65535
 100d3d4:	10e2b03a 	or	r17,r2,r3
 100d3d8:	89c0032e 	bgeu	r17,r7,100d3e8 <__udivdi3+0x3dc>
 100d3dc:	8d63883a 	add	r17,r17,r21
 100d3e0:	843fffc4 	addi	r16,r16,-1
 100d3e4:	8d40692e 	bgeu	r17,r21,100d58c <__udivdi3+0x580>
 100d3e8:	a008943a 	slli	r4,r20,16
 100d3ec:	d9400017 	ldw	r5,0(sp)
 100d3f0:	89e3c83a 	sub	r17,r17,r7
 100d3f4:	8110b03a 	or	r8,r16,r4
 100d3f8:	280cd43a 	srli	r6,r5,16
 100d3fc:	28ffffcc 	andi	r3,r5,65535
 100d400:	40bfffcc 	andi	r2,r8,65535
 100d404:	400ad43a 	srli	r5,r8,16
 100d408:	10d3383a 	mul	r9,r2,r3
 100d40c:	1185383a 	mul	r2,r2,r6
 100d410:	28c7383a 	mul	r3,r5,r3
 100d414:	4808d43a 	srli	r4,r9,16
 100d418:	298b383a 	mul	r5,r5,r6
 100d41c:	10c5883a 	add	r2,r2,r3
 100d420:	2089883a 	add	r4,r4,r2
 100d424:	20c0022e 	bgeu	r4,r3,100d430 <__udivdi3+0x424>
 100d428:	00800074 	movhi	r2,1
 100d42c:	288b883a 	add	r5,r5,r2
 100d430:	2004d43a 	srli	r2,r4,16
 100d434:	288b883a 	add	r5,r5,r2
 100d438:	89403f36 	bltu	r17,r5,100d538 <__udivdi3+0x52c>
 100d43c:	89403926 	beq	r17,r5,100d524 <__udivdi3+0x518>
 100d440:	4005883a 	mov	r2,r8
 100d444:	0009883a 	mov	r4,zero
 100d448:	003f5106 	br	100d190 <__udivdi3+0x184>
 100d44c:	85a0983a 	sll	r16,r16,r22
 100d450:	3585c83a 	sub	r2,r6,r22
 100d454:	a0a2d83a 	srl	r17,r20,r2
 100d458:	802ad43a 	srli	r21,r16,16
 100d45c:	e084d83a 	srl	r2,fp,r2
 100d460:	a586983a 	sll	r3,r20,r22
 100d464:	8809883a 	mov	r4,r17
 100d468:	a80b883a 	mov	r5,r21
 100d46c:	1886b03a 	or	r3,r3,r2
 100d470:	d8c00115 	stw	r3,4(sp)
 100d474:	100f0640 	call	100f064 <__udivsi3>
 100d478:	8809883a 	mov	r4,r17
 100d47c:	a80b883a 	mov	r5,r21
 100d480:	d8800415 	stw	r2,16(sp)
 100d484:	100f06c0 	call	100f06c <__umodsi3>
 100d488:	d9000117 	ldw	r4,4(sp)
 100d48c:	d9400417 	ldw	r5,16(sp)
 100d490:	1004943a 	slli	r2,r2,16
 100d494:	85ffffcc 	andi	r23,r16,65535
 100d498:	2006d43a 	srli	r3,r4,16
 100d49c:	b963383a 	mul	r17,r23,r5
 100d4a0:	10c4b03a 	or	r2,r2,r3
 100d4a4:	1440042e 	bgeu	r2,r17,100d4b8 <__udivdi3+0x4ac>
 100d4a8:	297fffc4 	addi	r5,r5,-1
 100d4ac:	1405883a 	add	r2,r2,r16
 100d4b0:	d9400415 	stw	r5,16(sp)
 100d4b4:	1400442e 	bgeu	r2,r16,100d5c8 <__udivdi3+0x5bc>
 100d4b8:	1463c83a 	sub	r17,r2,r17
 100d4bc:	8809883a 	mov	r4,r17
 100d4c0:	a80b883a 	mov	r5,r21
 100d4c4:	100f0640 	call	100f064 <__udivsi3>
 100d4c8:	8809883a 	mov	r4,r17
 100d4cc:	a80b883a 	mov	r5,r21
 100d4d0:	1029883a 	mov	r20,r2
 100d4d4:	100f06c0 	call	100f06c <__umodsi3>
 100d4d8:	d9400117 	ldw	r5,4(sp)
 100d4dc:	1004943a 	slli	r2,r2,16
 100d4e0:	bd09383a 	mul	r4,r23,r20
 100d4e4:	28ffffcc 	andi	r3,r5,65535
 100d4e8:	10c6b03a 	or	r3,r2,r3
 100d4ec:	1900062e 	bgeu	r3,r4,100d508 <__udivdi3+0x4fc>
 100d4f0:	1c07883a 	add	r3,r3,r16
 100d4f4:	a53fffc4 	addi	r20,r20,-1
 100d4f8:	1c000336 	bltu	r3,r16,100d508 <__udivdi3+0x4fc>
 100d4fc:	1900022e 	bgeu	r3,r4,100d508 <__udivdi3+0x4fc>
 100d500:	a53fffc4 	addi	r20,r20,-1
 100d504:	1c07883a 	add	r3,r3,r16
 100d508:	d9400417 	ldw	r5,16(sp)
 100d50c:	e5b8983a 	sll	fp,fp,r22
 100d510:	1923c83a 	sub	r17,r3,r4
 100d514:	2804943a 	slli	r2,r5,16
 100d518:	a0a8b03a 	or	r20,r20,r2
 100d51c:	dd000315 	stw	r20,12(sp)
 100d520:	003ee106 	br	100d0a8 <__udivdi3+0x9c>
 100d524:	2004943a 	slli	r2,r4,16
 100d528:	e5c8983a 	sll	r4,fp,r23
 100d52c:	48ffffcc 	andi	r3,r9,65535
 100d530:	10c5883a 	add	r2,r2,r3
 100d534:	20bfc22e 	bgeu	r4,r2,100d440 <__udivdi3+0x434>
 100d538:	40bfffc4 	addi	r2,r8,-1
 100d53c:	0009883a 	mov	r4,zero
 100d540:	003f1306 	br	100d190 <__udivdi3+0x184>
 100d544:	01400204 	movi	r5,8
 100d548:	2805883a 	mov	r2,r5
 100d54c:	003f0306 	br	100d15c <__udivdi3+0x150>
 100d550:	01400604 	movi	r5,24
 100d554:	2805883a 	mov	r2,r5
 100d558:	003f0006 	br	100d15c <__udivdi3+0x150>
 100d55c:	01400204 	movi	r5,8
 100d560:	2805883a 	mov	r2,r5
 100d564:	003ec206 	br	100d070 <__udivdi3+0x64>
 100d568:	01400604 	movi	r5,24
 100d56c:	2805883a 	mov	r2,r5
 100d570:	003ebf06 	br	100d070 <__udivdi3+0x64>
 100d574:	01400204 	movi	r5,8
 100d578:	2805883a 	mov	r2,r5
 100d57c:	003f1706 	br	100d1dc <__udivdi3+0x1d0>
 100d580:	01400604 	movi	r5,24
 100d584:	2805883a 	mov	r2,r5
 100d588:	003f1406 	br	100d1dc <__udivdi3+0x1d0>
 100d58c:	89ff962e 	bgeu	r17,r7,100d3e8 <__udivdi3+0x3dc>
 100d590:	8d63883a 	add	r17,r17,r21
 100d594:	843fffc4 	addi	r16,r16,-1
 100d598:	003f9306 	br	100d3e8 <__udivdi3+0x3dc>
 100d59c:	147f802e 	bgeu	r2,r17,100d3a0 <__udivdi3+0x394>
 100d5a0:	a53fffc4 	addi	r20,r20,-1
 100d5a4:	1545883a 	add	r2,r2,r21
 100d5a8:	003f7d06 	br	100d3a0 <__udivdi3+0x394>
 100d5ac:	a53fffc4 	addi	r20,r20,-1
 100d5b0:	003ede06 	br	100d12c <__udivdi3+0x120>
 100d5b4:	b5bfffc4 	addi	r22,r22,-1
 100d5b8:	1405883a 	add	r2,r2,r16
 100d5bc:	003f2806 	br	100d260 <__udivdi3+0x254>
 100d5c0:	a53fffc4 	addi	r20,r20,-1
 100d5c4:	003f3706 	br	100d2a4 <__udivdi3+0x298>
 100d5c8:	147fbb2e 	bgeu	r2,r17,100d4b8 <__udivdi3+0x4ac>
 100d5cc:	297fffc4 	addi	r5,r5,-1
 100d5d0:	1405883a 	add	r2,r2,r16
 100d5d4:	d9400415 	stw	r5,16(sp)
 100d5d8:	003fb706 	br	100d4b8 <__udivdi3+0x4ac>
 100d5dc:	b5bfffc4 	addi	r22,r22,-1
 100d5e0:	1405883a 	add	r2,r2,r16
 100d5e4:	003ec006 	br	100d0e8 <__udivdi3+0xdc>

0100d5e8 <__umoddi3>:
 100d5e8:	defff104 	addi	sp,sp,-60
 100d5ec:	dd800b15 	stw	r22,44(sp)
 100d5f0:	dd000915 	stw	r20,36(sp)
 100d5f4:	dc000515 	stw	r16,20(sp)
 100d5f8:	dfc00e15 	stw	ra,56(sp)
 100d5fc:	df000d15 	stw	fp,52(sp)
 100d600:	ddc00c15 	stw	r23,48(sp)
 100d604:	dd400a15 	stw	r21,40(sp)
 100d608:	dcc00815 	stw	r19,32(sp)
 100d60c:	dc800715 	stw	r18,28(sp)
 100d610:	dc400615 	stw	r17,24(sp)
 100d614:	3021883a 	mov	r16,r6
 100d618:	202d883a 	mov	r22,r4
 100d61c:	2829883a 	mov	r20,r5
 100d620:	38002b1e 	bne	r7,zero,100d6d0 <__umoddi3+0xe8>
 100d624:	29805036 	bltu	r5,r6,100d768 <__umoddi3+0x180>
 100d628:	30008a26 	beq	r6,zero,100d854 <__umoddi3+0x26c>
 100d62c:	00bfffd4 	movui	r2,65535
 100d630:	14008236 	bltu	r2,r16,100d83c <__umoddi3+0x254>
 100d634:	00803fc4 	movi	r2,255
 100d638:	14013636 	bltu	r2,r16,100db14 <__umoddi3+0x52c>
 100d63c:	000b883a 	mov	r5,zero
 100d640:	0005883a 	mov	r2,zero
 100d644:	8084d83a 	srl	r2,r16,r2
 100d648:	01004074 	movhi	r4,257
 100d64c:	210c9104 	addi	r4,r4,12868
 100d650:	01800804 	movi	r6,32
 100d654:	1105883a 	add	r2,r2,r4
 100d658:	10c00003 	ldbu	r3,0(r2)
 100d65c:	28c7883a 	add	r3,r5,r3
 100d660:	30efc83a 	sub	r23,r6,r3
 100d664:	b800941e 	bne	r23,zero,100d8b8 <__umoddi3+0x2d0>
 100d668:	802ad43a 	srli	r21,r16,16
 100d66c:	a423c83a 	sub	r17,r20,r16
 100d670:	0039883a 	mov	fp,zero
 100d674:	853fffcc 	andi	r20,r16,65535
 100d678:	8809883a 	mov	r4,r17
 100d67c:	a80b883a 	mov	r5,r21
 100d680:	100f0640 	call	100f064 <__udivsi3>
 100d684:	8809883a 	mov	r4,r17
 100d688:	a80b883a 	mov	r5,r21
 100d68c:	a0a3383a 	mul	r17,r20,r2
 100d690:	100f06c0 	call	100f06c <__umodsi3>
 100d694:	1004943a 	slli	r2,r2,16
 100d698:	b006d43a 	srli	r3,r22,16
 100d69c:	10c4b03a 	or	r2,r2,r3
 100d6a0:	1440032e 	bgeu	r2,r17,100d6b0 <__umoddi3+0xc8>
 100d6a4:	1405883a 	add	r2,r2,r16
 100d6a8:	14000136 	bltu	r2,r16,100d6b0 <__umoddi3+0xc8>
 100d6ac:	14413536 	bltu	r2,r17,100db84 <__umoddi3+0x59c>
 100d6b0:	1463c83a 	sub	r17,r2,r17
 100d6b4:	8809883a 	mov	r4,r17
 100d6b8:	a80b883a 	mov	r5,r21
 100d6bc:	100f0640 	call	100f064 <__udivsi3>
 100d6c0:	8809883a 	mov	r4,r17
 100d6c4:	a0a3383a 	mul	r17,r20,r2
 100d6c8:	a80b883a 	mov	r5,r21
 100d6cc:	00004d06 	br	100d804 <__umoddi3+0x21c>
 100d6d0:	380d883a 	mov	r6,r7
 100d6d4:	29c0102e 	bgeu	r5,r7,100d718 <__umoddi3+0x130>
 100d6d8:	2011883a 	mov	r8,r4
 100d6dc:	2813883a 	mov	r9,r5
 100d6e0:	4005883a 	mov	r2,r8
 100d6e4:	4807883a 	mov	r3,r9
 100d6e8:	dfc00e17 	ldw	ra,56(sp)
 100d6ec:	df000d17 	ldw	fp,52(sp)
 100d6f0:	ddc00c17 	ldw	r23,48(sp)
 100d6f4:	dd800b17 	ldw	r22,44(sp)
 100d6f8:	dd400a17 	ldw	r21,40(sp)
 100d6fc:	dd000917 	ldw	r20,36(sp)
 100d700:	dcc00817 	ldw	r19,32(sp)
 100d704:	dc800717 	ldw	r18,28(sp)
 100d708:	dc400617 	ldw	r17,24(sp)
 100d70c:	dc000517 	ldw	r16,20(sp)
 100d710:	dec00f04 	addi	sp,sp,60
 100d714:	f800283a 	ret
 100d718:	00bfffd4 	movui	r2,65535
 100d71c:	11c05a36 	bltu	r2,r7,100d888 <__umoddi3+0x2a0>
 100d720:	00803fc4 	movi	r2,255
 100d724:	11c0fe36 	bltu	r2,r7,100db20 <__umoddi3+0x538>
 100d728:	000b883a 	mov	r5,zero
 100d72c:	0005883a 	mov	r2,zero
 100d730:	3084d83a 	srl	r2,r6,r2
 100d734:	01004074 	movhi	r4,257
 100d738:	210c9104 	addi	r4,r4,12868
 100d73c:	01c00804 	movi	r7,32
 100d740:	1105883a 	add	r2,r2,r4
 100d744:	10c00003 	ldbu	r3,0(r2)
 100d748:	28c7883a 	add	r3,r5,r3
 100d74c:	38ebc83a 	sub	r21,r7,r3
 100d750:	a800851e 	bne	r21,zero,100d968 <__umoddi3+0x380>
 100d754:	35005236 	bltu	r6,r20,100d8a0 <__umoddi3+0x2b8>
 100d758:	b400512e 	bgeu	r22,r16,100d8a0 <__umoddi3+0x2b8>
 100d75c:	b011883a 	mov	r8,r22
 100d760:	a013883a 	mov	r9,r20
 100d764:	003fde06 	br	100d6e0 <__umoddi3+0xf8>
 100d768:	00bfffd4 	movui	r2,65535
 100d76c:	11804036 	bltu	r2,r6,100d870 <__umoddi3+0x288>
 100d770:	00803fc4 	movi	r2,255
 100d774:	1180ed36 	bltu	r2,r6,100db2c <__umoddi3+0x544>
 100d778:	000b883a 	mov	r5,zero
 100d77c:	0005883a 	mov	r2,zero
 100d780:	8084d83a 	srl	r2,r16,r2
 100d784:	01004074 	movhi	r4,257
 100d788:	210c9104 	addi	r4,r4,12868
 100d78c:	01800804 	movi	r6,32
 100d790:	1105883a 	add	r2,r2,r4
 100d794:	10c00003 	ldbu	r3,0(r2)
 100d798:	28c7883a 	add	r3,r5,r3
 100d79c:	30c7c83a 	sub	r3,r6,r3
 100d7a0:	1800bf1e 	bne	r3,zero,100daa0 <__umoddi3+0x4b8>
 100d7a4:	0039883a 	mov	fp,zero
 100d7a8:	802ad43a 	srli	r21,r16,16
 100d7ac:	a009883a 	mov	r4,r20
 100d7b0:	85ffffcc 	andi	r23,r16,65535
 100d7b4:	a80b883a 	mov	r5,r21
 100d7b8:	100f0640 	call	100f064 <__udivsi3>
 100d7bc:	a009883a 	mov	r4,r20
 100d7c0:	a80b883a 	mov	r5,r21
 100d7c4:	b8a3383a 	mul	r17,r23,r2
 100d7c8:	100f06c0 	call	100f06c <__umodsi3>
 100d7cc:	1004943a 	slli	r2,r2,16
 100d7d0:	b006d43a 	srli	r3,r22,16
 100d7d4:	10c4b03a 	or	r2,r2,r3
 100d7d8:	1440032e 	bgeu	r2,r17,100d7e8 <__umoddi3+0x200>
 100d7dc:	1405883a 	add	r2,r2,r16
 100d7e0:	14000136 	bltu	r2,r16,100d7e8 <__umoddi3+0x200>
 100d7e4:	1440e536 	bltu	r2,r17,100db7c <__umoddi3+0x594>
 100d7e8:	1463c83a 	sub	r17,r2,r17
 100d7ec:	8809883a 	mov	r4,r17
 100d7f0:	a80b883a 	mov	r5,r21
 100d7f4:	100f0640 	call	100f064 <__udivsi3>
 100d7f8:	8809883a 	mov	r4,r17
 100d7fc:	b8a3383a 	mul	r17,r23,r2
 100d800:	a80b883a 	mov	r5,r21
 100d804:	100f06c0 	call	100f06c <__umodsi3>
 100d808:	1004943a 	slli	r2,r2,16
 100d80c:	b0ffffcc 	andi	r3,r22,65535
 100d810:	10c4b03a 	or	r2,r2,r3
 100d814:	1440042e 	bgeu	r2,r17,100d828 <__umoddi3+0x240>
 100d818:	1405883a 	add	r2,r2,r16
 100d81c:	14000236 	bltu	r2,r16,100d828 <__umoddi3+0x240>
 100d820:	1440012e 	bgeu	r2,r17,100d828 <__umoddi3+0x240>
 100d824:	1405883a 	add	r2,r2,r16
 100d828:	1445c83a 	sub	r2,r2,r17
 100d82c:	1724d83a 	srl	r18,r2,fp
 100d830:	0013883a 	mov	r9,zero
 100d834:	9011883a 	mov	r8,r18
 100d838:	003fa906 	br	100d6e0 <__umoddi3+0xf8>
 100d83c:	00804034 	movhi	r2,256
 100d840:	10bfffc4 	addi	r2,r2,-1
 100d844:	1400b036 	bltu	r2,r16,100db08 <__umoddi3+0x520>
 100d848:	01400404 	movi	r5,16
 100d84c:	2805883a 	mov	r2,r5
 100d850:	003f7c06 	br	100d644 <__umoddi3+0x5c>
 100d854:	01000044 	movi	r4,1
 100d858:	000b883a 	mov	r5,zero
 100d85c:	100f0640 	call	100f064 <__udivsi3>
 100d860:	1021883a 	mov	r16,r2
 100d864:	00bfffd4 	movui	r2,65535
 100d868:	143ff436 	bltu	r2,r16,100d83c <__umoddi3+0x254>
 100d86c:	003f7106 	br	100d634 <__umoddi3+0x4c>
 100d870:	00804034 	movhi	r2,256
 100d874:	10bfffc4 	addi	r2,r2,-1
 100d878:	1180af36 	bltu	r2,r6,100db38 <__umoddi3+0x550>
 100d87c:	01400404 	movi	r5,16
 100d880:	2805883a 	mov	r2,r5
 100d884:	003fbe06 	br	100d780 <__umoddi3+0x198>
 100d888:	00804034 	movhi	r2,256
 100d88c:	10bfffc4 	addi	r2,r2,-1
 100d890:	11c0ac36 	bltu	r2,r7,100db44 <__umoddi3+0x55c>
 100d894:	01400404 	movi	r5,16
 100d898:	2805883a 	mov	r2,r5
 100d89c:	003fa406 	br	100d730 <__umoddi3+0x148>
 100d8a0:	b409c83a 	sub	r4,r22,r16
 100d8a4:	b105803a 	cmpltu	r2,r22,r4
 100d8a8:	a187c83a 	sub	r3,r20,r6
 100d8ac:	18a9c83a 	sub	r20,r3,r2
 100d8b0:	202d883a 	mov	r22,r4
 100d8b4:	003fa906 	br	100d75c <__umoddi3+0x174>
 100d8b8:	85e0983a 	sll	r16,r16,r23
 100d8bc:	35c5c83a 	sub	r2,r6,r23
 100d8c0:	a0a2d83a 	srl	r17,r20,r2
 100d8c4:	802ad43a 	srli	r21,r16,16
 100d8c8:	b084d83a 	srl	r2,r22,r2
 100d8cc:	a5c6983a 	sll	r3,r20,r23
 100d8d0:	8809883a 	mov	r4,r17
 100d8d4:	a80b883a 	mov	r5,r21
 100d8d8:	1886b03a 	or	r3,r3,r2
 100d8dc:	d8c00115 	stw	r3,4(sp)
 100d8e0:	853fffcc 	andi	r20,r16,65535
 100d8e4:	100f0640 	call	100f064 <__udivsi3>
 100d8e8:	8809883a 	mov	r4,r17
 100d8ec:	a80b883a 	mov	r5,r21
 100d8f0:	a0a3383a 	mul	r17,r20,r2
 100d8f4:	100f06c0 	call	100f06c <__umodsi3>
 100d8f8:	d9000117 	ldw	r4,4(sp)
 100d8fc:	1004943a 	slli	r2,r2,16
 100d900:	b839883a 	mov	fp,r23
 100d904:	2006d43a 	srli	r3,r4,16
 100d908:	10c4b03a 	or	r2,r2,r3
 100d90c:	1440022e 	bgeu	r2,r17,100d918 <__umoddi3+0x330>
 100d910:	1405883a 	add	r2,r2,r16
 100d914:	1400962e 	bgeu	r2,r16,100db70 <__umoddi3+0x588>
 100d918:	1463c83a 	sub	r17,r2,r17
 100d91c:	8809883a 	mov	r4,r17
 100d920:	a80b883a 	mov	r5,r21
 100d924:	100f0640 	call	100f064 <__udivsi3>
 100d928:	8809883a 	mov	r4,r17
 100d92c:	a80b883a 	mov	r5,r21
 100d930:	a0a3383a 	mul	r17,r20,r2
 100d934:	100f06c0 	call	100f06c <__umodsi3>
 100d938:	d9400117 	ldw	r5,4(sp)
 100d93c:	1004943a 	slli	r2,r2,16
 100d940:	28ffffcc 	andi	r3,r5,65535
 100d944:	10c4b03a 	or	r2,r2,r3
 100d948:	1440042e 	bgeu	r2,r17,100d95c <__umoddi3+0x374>
 100d94c:	1405883a 	add	r2,r2,r16
 100d950:	14000236 	bltu	r2,r16,100d95c <__umoddi3+0x374>
 100d954:	1440012e 	bgeu	r2,r17,100d95c <__umoddi3+0x374>
 100d958:	1405883a 	add	r2,r2,r16
 100d95c:	b5ec983a 	sll	r22,r22,r23
 100d960:	1463c83a 	sub	r17,r2,r17
 100d964:	003f4406 	br	100d678 <__umoddi3+0x90>
 100d968:	3d4fc83a 	sub	r7,r7,r21
 100d96c:	3546983a 	sll	r3,r6,r21
 100d970:	81c4d83a 	srl	r2,r16,r7
 100d974:	a1e2d83a 	srl	r17,r20,r7
 100d978:	a54c983a 	sll	r6,r20,r21
 100d97c:	18aeb03a 	or	r23,r3,r2
 100d980:	b828d43a 	srli	r20,r23,16
 100d984:	b1c4d83a 	srl	r2,r22,r7
 100d988:	8809883a 	mov	r4,r17
 100d98c:	a00b883a 	mov	r5,r20
 100d990:	308cb03a 	or	r6,r6,r2
 100d994:	d9c00315 	stw	r7,12(sp)
 100d998:	d9800215 	stw	r6,8(sp)
 100d99c:	100f0640 	call	100f064 <__udivsi3>
 100d9a0:	8809883a 	mov	r4,r17
 100d9a4:	a00b883a 	mov	r5,r20
 100d9a8:	1039883a 	mov	fp,r2
 100d9ac:	100f06c0 	call	100f06c <__umodsi3>
 100d9b0:	b8ffffcc 	andi	r3,r23,65535
 100d9b4:	d8c00415 	stw	r3,16(sp)
 100d9b8:	d9000217 	ldw	r4,8(sp)
 100d9bc:	d9400417 	ldw	r5,16(sp)
 100d9c0:	1004943a 	slli	r2,r2,16
 100d9c4:	2006d43a 	srli	r3,r4,16
 100d9c8:	8560983a 	sll	r16,r16,r21
 100d9cc:	2f23383a 	mul	r17,r5,fp
 100d9d0:	10c4b03a 	or	r2,r2,r3
 100d9d4:	dc000015 	stw	r16,0(sp)
 100d9d8:	b56c983a 	sll	r22,r22,r21
 100d9dc:	1440032e 	bgeu	r2,r17,100d9ec <__umoddi3+0x404>
 100d9e0:	15c5883a 	add	r2,r2,r23
 100d9e4:	e73fffc4 	addi	fp,fp,-1
 100d9e8:	15c05d2e 	bgeu	r2,r23,100db60 <__umoddi3+0x578>
 100d9ec:	1463c83a 	sub	r17,r2,r17
 100d9f0:	8809883a 	mov	r4,r17
 100d9f4:	a00b883a 	mov	r5,r20
 100d9f8:	100f0640 	call	100f064 <__udivsi3>
 100d9fc:	8809883a 	mov	r4,r17
 100da00:	a00b883a 	mov	r5,r20
 100da04:	1021883a 	mov	r16,r2
 100da08:	100f06c0 	call	100f06c <__umodsi3>
 100da0c:	d8c00417 	ldw	r3,16(sp)
 100da10:	d9000217 	ldw	r4,8(sp)
 100da14:	1004943a 	slli	r2,r2,16
 100da18:	1c23383a 	mul	r17,r3,r16
 100da1c:	20ffffcc 	andi	r3,r4,65535
 100da20:	10ceb03a 	or	r7,r2,r3
 100da24:	3c40032e 	bgeu	r7,r17,100da34 <__umoddi3+0x44c>
 100da28:	3dcf883a 	add	r7,r7,r23
 100da2c:	843fffc4 	addi	r16,r16,-1
 100da30:	3dc0472e 	bgeu	r7,r23,100db50 <__umoddi3+0x568>
 100da34:	e004943a 	slli	r2,fp,16
 100da38:	d9400017 	ldw	r5,0(sp)
 100da3c:	3c4fc83a 	sub	r7,r7,r17
 100da40:	8084b03a 	or	r2,r16,r2
 100da44:	28ffffcc 	andi	r3,r5,65535
 100da48:	280cd43a 	srli	r6,r5,16
 100da4c:	100ad43a 	srli	r5,r2,16
 100da50:	10bfffcc 	andi	r2,r2,65535
 100da54:	10d1383a 	mul	r8,r2,r3
 100da58:	28c7383a 	mul	r3,r5,r3
 100da5c:	1185383a 	mul	r2,r2,r6
 100da60:	4008d43a 	srli	r4,r8,16
 100da64:	298b383a 	mul	r5,r5,r6
 100da68:	10c5883a 	add	r2,r2,r3
 100da6c:	2089883a 	add	r4,r4,r2
 100da70:	20c0022e 	bgeu	r4,r3,100da7c <__umoddi3+0x494>
 100da74:	00800074 	movhi	r2,1
 100da78:	288b883a 	add	r5,r5,r2
 100da7c:	2004d43a 	srli	r2,r4,16
 100da80:	2008943a 	slli	r4,r4,16
 100da84:	40ffffcc 	andi	r3,r8,65535
 100da88:	288b883a 	add	r5,r5,r2
 100da8c:	20c9883a 	add	r4,r4,r3
 100da90:	39400b36 	bltu	r7,r5,100dac0 <__umoddi3+0x4d8>
 100da94:	39403d26 	beq	r7,r5,100db8c <__umoddi3+0x5a4>
 100da98:	394bc83a 	sub	r5,r7,r5
 100da9c:	00000f06 	br	100dadc <__umoddi3+0x4f4>
 100daa0:	30c5c83a 	sub	r2,r6,r3
 100daa4:	1839883a 	mov	fp,r3
 100daa8:	b084d83a 	srl	r2,r22,r2
 100daac:	a0c6983a 	sll	r3,r20,r3
 100dab0:	8720983a 	sll	r16,r16,fp
 100dab4:	b72c983a 	sll	r22,r22,fp
 100dab8:	18a8b03a 	or	r20,r3,r2
 100dabc:	003f3a06 	br	100d7a8 <__umoddi3+0x1c0>
 100dac0:	d8c00017 	ldw	r3,0(sp)
 100dac4:	20c5c83a 	sub	r2,r4,r3
 100dac8:	2089803a 	cmpltu	r4,r4,r2
 100dacc:	2dc7c83a 	sub	r3,r5,r23
 100dad0:	1907c83a 	sub	r3,r3,r4
 100dad4:	38cbc83a 	sub	r5,r7,r3
 100dad8:	1009883a 	mov	r4,r2
 100dadc:	b105c83a 	sub	r2,r22,r4
 100dae0:	b087803a 	cmpltu	r3,r22,r2
 100dae4:	28c7c83a 	sub	r3,r5,r3
 100dae8:	d9400317 	ldw	r5,12(sp)
 100daec:	1544d83a 	srl	r2,r2,r21
 100daf0:	1948983a 	sll	r4,r3,r5
 100daf4:	1d46d83a 	srl	r3,r3,r21
 100daf8:	20a4b03a 	or	r18,r4,r2
 100dafc:	9011883a 	mov	r8,r18
 100db00:	1813883a 	mov	r9,r3
 100db04:	003ef606 	br	100d6e0 <__umoddi3+0xf8>
 100db08:	01400604 	movi	r5,24
 100db0c:	2805883a 	mov	r2,r5
 100db10:	003ecc06 	br	100d644 <__umoddi3+0x5c>
 100db14:	01400204 	movi	r5,8
 100db18:	2805883a 	mov	r2,r5
 100db1c:	003ec906 	br	100d644 <__umoddi3+0x5c>
 100db20:	01400204 	movi	r5,8
 100db24:	2805883a 	mov	r2,r5
 100db28:	003f0106 	br	100d730 <__umoddi3+0x148>
 100db2c:	01400204 	movi	r5,8
 100db30:	2805883a 	mov	r2,r5
 100db34:	003f1206 	br	100d780 <__umoddi3+0x198>
 100db38:	01400604 	movi	r5,24
 100db3c:	2805883a 	mov	r2,r5
 100db40:	003f0f06 	br	100d780 <__umoddi3+0x198>
 100db44:	01400604 	movi	r5,24
 100db48:	2805883a 	mov	r2,r5
 100db4c:	003ef806 	br	100d730 <__umoddi3+0x148>
 100db50:	3c7fb82e 	bgeu	r7,r17,100da34 <__umoddi3+0x44c>
 100db54:	843fffc4 	addi	r16,r16,-1
 100db58:	3dcf883a 	add	r7,r7,r23
 100db5c:	003fb506 	br	100da34 <__umoddi3+0x44c>
 100db60:	147fa22e 	bgeu	r2,r17,100d9ec <__umoddi3+0x404>
 100db64:	e73fffc4 	addi	fp,fp,-1
 100db68:	15c5883a 	add	r2,r2,r23
 100db6c:	003f9f06 	br	100d9ec <__umoddi3+0x404>
 100db70:	147f692e 	bgeu	r2,r17,100d918 <__umoddi3+0x330>
 100db74:	1405883a 	add	r2,r2,r16
 100db78:	003f6706 	br	100d918 <__umoddi3+0x330>
 100db7c:	1405883a 	add	r2,r2,r16
 100db80:	003f1906 	br	100d7e8 <__umoddi3+0x200>
 100db84:	1405883a 	add	r2,r2,r16
 100db88:	003ec906 	br	100d6b0 <__umoddi3+0xc8>
 100db8c:	b13fcc36 	bltu	r22,r4,100dac0 <__umoddi3+0x4d8>
 100db90:	000b883a 	mov	r5,zero
 100db94:	003fd106 	br	100dadc <__umoddi3+0x4f4>

0100db98 <__nesf2>:
 100db98:	defff304 	addi	sp,sp,-52
 100db9c:	dc400b15 	stw	r17,44(sp)
 100dba0:	dc400204 	addi	r17,sp,8
 100dba4:	dc000a15 	stw	r16,40(sp)
 100dba8:	d9000015 	stw	r4,0(sp)
 100dbac:	d9400115 	stw	r5,4(sp)
 100dbb0:	d809883a 	mov	r4,sp
 100dbb4:	880b883a 	mov	r5,r17
 100dbb8:	dc000604 	addi	r16,sp,24
 100dbbc:	dfc00c15 	stw	ra,48(sp)
 100dbc0:	100f0f40 	call	100f0f4 <__unpack_f>
 100dbc4:	d9000104 	addi	r4,sp,4
 100dbc8:	800b883a 	mov	r5,r16
 100dbcc:	100f0f40 	call	100f0f4 <__unpack_f>
 100dbd0:	d8800217 	ldw	r2,8(sp)
 100dbd4:	00c00044 	movi	r3,1
 100dbd8:	180d883a 	mov	r6,r3
 100dbdc:	1880062e 	bgeu	r3,r2,100dbf8 <__nesf2+0x60>
 100dbe0:	d8800617 	ldw	r2,24(sp)
 100dbe4:	8809883a 	mov	r4,r17
 100dbe8:	800b883a 	mov	r5,r16
 100dbec:	1880022e 	bgeu	r3,r2,100dbf8 <__nesf2+0x60>
 100dbf0:	100f1bc0 	call	100f1bc <__fpcmp_parts_f>
 100dbf4:	100d883a 	mov	r6,r2
 100dbf8:	3005883a 	mov	r2,r6
 100dbfc:	dfc00c17 	ldw	ra,48(sp)
 100dc00:	dc400b17 	ldw	r17,44(sp)
 100dc04:	dc000a17 	ldw	r16,40(sp)
 100dc08:	dec00d04 	addi	sp,sp,52
 100dc0c:	f800283a 	ret

0100dc10 <__gtsf2>:
 100dc10:	defff304 	addi	sp,sp,-52
 100dc14:	dc400b15 	stw	r17,44(sp)
 100dc18:	dc400204 	addi	r17,sp,8
 100dc1c:	dc000a15 	stw	r16,40(sp)
 100dc20:	d9000015 	stw	r4,0(sp)
 100dc24:	d9400115 	stw	r5,4(sp)
 100dc28:	d809883a 	mov	r4,sp
 100dc2c:	880b883a 	mov	r5,r17
 100dc30:	dc000604 	addi	r16,sp,24
 100dc34:	dfc00c15 	stw	ra,48(sp)
 100dc38:	100f0f40 	call	100f0f4 <__unpack_f>
 100dc3c:	d9000104 	addi	r4,sp,4
 100dc40:	800b883a 	mov	r5,r16
 100dc44:	100f0f40 	call	100f0f4 <__unpack_f>
 100dc48:	d8800217 	ldw	r2,8(sp)
 100dc4c:	00c00044 	movi	r3,1
 100dc50:	01bfffc4 	movi	r6,-1
 100dc54:	1880062e 	bgeu	r3,r2,100dc70 <__gtsf2+0x60>
 100dc58:	d8800617 	ldw	r2,24(sp)
 100dc5c:	8809883a 	mov	r4,r17
 100dc60:	800b883a 	mov	r5,r16
 100dc64:	1880022e 	bgeu	r3,r2,100dc70 <__gtsf2+0x60>
 100dc68:	100f1bc0 	call	100f1bc <__fpcmp_parts_f>
 100dc6c:	100d883a 	mov	r6,r2
 100dc70:	3005883a 	mov	r2,r6
 100dc74:	dfc00c17 	ldw	ra,48(sp)
 100dc78:	dc400b17 	ldw	r17,44(sp)
 100dc7c:	dc000a17 	ldw	r16,40(sp)
 100dc80:	dec00d04 	addi	sp,sp,52
 100dc84:	f800283a 	ret

0100dc88 <__ltsf2>:
 100dc88:	defff304 	addi	sp,sp,-52
 100dc8c:	dc400b15 	stw	r17,44(sp)
 100dc90:	dc400204 	addi	r17,sp,8
 100dc94:	dc000a15 	stw	r16,40(sp)
 100dc98:	d9000015 	stw	r4,0(sp)
 100dc9c:	d9400115 	stw	r5,4(sp)
 100dca0:	d809883a 	mov	r4,sp
 100dca4:	880b883a 	mov	r5,r17
 100dca8:	dc000604 	addi	r16,sp,24
 100dcac:	dfc00c15 	stw	ra,48(sp)
 100dcb0:	100f0f40 	call	100f0f4 <__unpack_f>
 100dcb4:	d9000104 	addi	r4,sp,4
 100dcb8:	800b883a 	mov	r5,r16
 100dcbc:	100f0f40 	call	100f0f4 <__unpack_f>
 100dcc0:	d8800217 	ldw	r2,8(sp)
 100dcc4:	00c00044 	movi	r3,1
 100dcc8:	180d883a 	mov	r6,r3
 100dccc:	1880062e 	bgeu	r3,r2,100dce8 <__ltsf2+0x60>
 100dcd0:	d8800617 	ldw	r2,24(sp)
 100dcd4:	8809883a 	mov	r4,r17
 100dcd8:	800b883a 	mov	r5,r16
 100dcdc:	1880022e 	bgeu	r3,r2,100dce8 <__ltsf2+0x60>
 100dce0:	100f1bc0 	call	100f1bc <__fpcmp_parts_f>
 100dce4:	100d883a 	mov	r6,r2
 100dce8:	3005883a 	mov	r2,r6
 100dcec:	dfc00c17 	ldw	ra,48(sp)
 100dcf0:	dc400b17 	ldw	r17,44(sp)
 100dcf4:	dc000a17 	ldw	r16,40(sp)
 100dcf8:	dec00d04 	addi	sp,sp,52
 100dcfc:	f800283a 	ret

0100dd00 <_fpadd_parts>:
 100dd00:	defff804 	addi	sp,sp,-32
 100dd04:	dcc00315 	stw	r19,12(sp)
 100dd08:	2027883a 	mov	r19,r4
 100dd0c:	21000017 	ldw	r4,0(r4)
 100dd10:	00c00044 	movi	r3,1
 100dd14:	dd400515 	stw	r21,20(sp)
 100dd18:	dd000415 	stw	r20,16(sp)
 100dd1c:	ddc00715 	stw	r23,28(sp)
 100dd20:	dd800615 	stw	r22,24(sp)
 100dd24:	dc800215 	stw	r18,8(sp)
 100dd28:	dc400115 	stw	r17,4(sp)
 100dd2c:	dc000015 	stw	r16,0(sp)
 100dd30:	282b883a 	mov	r21,r5
 100dd34:	3029883a 	mov	r20,r6
 100dd38:	1900632e 	bgeu	r3,r4,100dec8 <_fpadd_parts+0x1c8>
 100dd3c:	28800017 	ldw	r2,0(r5)
 100dd40:	1880812e 	bgeu	r3,r2,100df48 <_fpadd_parts+0x248>
 100dd44:	00c00104 	movi	r3,4
 100dd48:	20c0dc26 	beq	r4,r3,100e0bc <_fpadd_parts+0x3bc>
 100dd4c:	10c07e26 	beq	r2,r3,100df48 <_fpadd_parts+0x248>
 100dd50:	00c00084 	movi	r3,2
 100dd54:	10c06726 	beq	r2,r3,100def4 <_fpadd_parts+0x1f4>
 100dd58:	20c07b26 	beq	r4,r3,100df48 <_fpadd_parts+0x248>
 100dd5c:	9dc00217 	ldw	r23,8(r19)
 100dd60:	28c00217 	ldw	r3,8(r5)
 100dd64:	9c400317 	ldw	r17,12(r19)
 100dd68:	2bc00317 	ldw	r15,12(r5)
 100dd6c:	b8cdc83a 	sub	r6,r23,r3
 100dd70:	9c800417 	ldw	r18,16(r19)
 100dd74:	2c000417 	ldw	r16,16(r5)
 100dd78:	3009883a 	mov	r4,r6
 100dd7c:	30009716 	blt	r6,zero,100dfdc <_fpadd_parts+0x2dc>
 100dd80:	00800fc4 	movi	r2,63
 100dd84:	11806b16 	blt	r2,r6,100df34 <_fpadd_parts+0x234>
 100dd88:	0100a40e 	bge	zero,r4,100e01c <_fpadd_parts+0x31c>
 100dd8c:	35bff804 	addi	r22,r6,-32
 100dd90:	b000bc16 	blt	r22,zero,100e084 <_fpadd_parts+0x384>
 100dd94:	8596d83a 	srl	r11,r16,r22
 100dd98:	0019883a 	mov	r12,zero
 100dd9c:	0013883a 	mov	r9,zero
 100dda0:	01000044 	movi	r4,1
 100dda4:	0015883a 	mov	r10,zero
 100dda8:	b000be16 	blt	r22,zero,100e0a4 <_fpadd_parts+0x3a4>
 100ddac:	2590983a 	sll	r8,r4,r22
 100ddb0:	000f883a 	mov	r7,zero
 100ddb4:	00bfffc4 	movi	r2,-1
 100ddb8:	3889883a 	add	r4,r7,r2
 100ddbc:	408b883a 	add	r5,r8,r2
 100ddc0:	21cd803a 	cmpltu	r6,r4,r7
 100ddc4:	314b883a 	add	r5,r6,r5
 100ddc8:	7904703a 	and	r2,r15,r4
 100ddcc:	8146703a 	and	r3,r16,r5
 100ddd0:	10c4b03a 	or	r2,r2,r3
 100ddd4:	10000226 	beq	r2,zero,100dde0 <_fpadd_parts+0xe0>
 100ddd8:	02400044 	movi	r9,1
 100dddc:	0015883a 	mov	r10,zero
 100dde0:	5a5eb03a 	or	r15,r11,r9
 100dde4:	62a0b03a 	or	r16,r12,r10
 100dde8:	99400117 	ldw	r5,4(r19)
 100ddec:	a8800117 	ldw	r2,4(r21)
 100ddf0:	28806e26 	beq	r5,r2,100dfac <_fpadd_parts+0x2ac>
 100ddf4:	28006626 	beq	r5,zero,100df90 <_fpadd_parts+0x290>
 100ddf8:	7c45c83a 	sub	r2,r15,r17
 100ddfc:	7889803a 	cmpltu	r4,r15,r2
 100de00:	8487c83a 	sub	r3,r16,r18
 100de04:	1909c83a 	sub	r4,r3,r4
 100de08:	100d883a 	mov	r6,r2
 100de0c:	200f883a 	mov	r7,r4
 100de10:	38007716 	blt	r7,zero,100dff0 <_fpadd_parts+0x2f0>
 100de14:	a5c00215 	stw	r23,8(r20)
 100de18:	a1c00415 	stw	r7,16(r20)
 100de1c:	a0000115 	stw	zero,4(r20)
 100de20:	a1800315 	stw	r6,12(r20)
 100de24:	a2000317 	ldw	r8,12(r20)
 100de28:	a2400417 	ldw	r9,16(r20)
 100de2c:	00bfffc4 	movi	r2,-1
 100de30:	408b883a 	add	r5,r8,r2
 100de34:	2a09803a 	cmpltu	r4,r5,r8
 100de38:	488d883a 	add	r6,r9,r2
 100de3c:	01c40034 	movhi	r7,4096
 100de40:	39ffffc4 	addi	r7,r7,-1
 100de44:	218d883a 	add	r6,r4,r6
 100de48:	39801736 	bltu	r7,r6,100dea8 <_fpadd_parts+0x1a8>
 100de4c:	31c06526 	beq	r6,r7,100dfe4 <_fpadd_parts+0x2e4>
 100de50:	a3000217 	ldw	r12,8(r20)
 100de54:	4209883a 	add	r4,r8,r8
 100de58:	00bfffc4 	movi	r2,-1
 100de5c:	220f803a 	cmpltu	r7,r4,r8
 100de60:	4a4b883a 	add	r5,r9,r9
 100de64:	394f883a 	add	r7,r7,r5
 100de68:	2095883a 	add	r10,r4,r2
 100de6c:	3897883a 	add	r11,r7,r2
 100de70:	510d803a 	cmpltu	r6,r10,r4
 100de74:	6099883a 	add	r12,r12,r2
 100de78:	32d7883a 	add	r11,r6,r11
 100de7c:	00840034 	movhi	r2,4096
 100de80:	10bfffc4 	addi	r2,r2,-1
 100de84:	2011883a 	mov	r8,r4
 100de88:	3813883a 	mov	r9,r7
 100de8c:	a1000315 	stw	r4,12(r20)
 100de90:	a1c00415 	stw	r7,16(r20)
 100de94:	a3000215 	stw	r12,8(r20)
 100de98:	12c00336 	bltu	r2,r11,100dea8 <_fpadd_parts+0x1a8>
 100de9c:	58bfed1e 	bne	r11,r2,100de54 <_fpadd_parts+0x154>
 100dea0:	00bfff84 	movi	r2,-2
 100dea4:	12bfeb2e 	bgeu	r2,r10,100de54 <_fpadd_parts+0x154>
 100dea8:	a2800417 	ldw	r10,16(r20)
 100deac:	008000c4 	movi	r2,3
 100deb0:	00c80034 	movhi	r3,8192
 100deb4:	18ffffc4 	addi	r3,r3,-1
 100deb8:	a2400317 	ldw	r9,12(r20)
 100debc:	a0800015 	stw	r2,0(r20)
 100dec0:	1a802336 	bltu	r3,r10,100df50 <_fpadd_parts+0x250>
 100dec4:	a027883a 	mov	r19,r20
 100dec8:	9805883a 	mov	r2,r19
 100decc:	ddc00717 	ldw	r23,28(sp)
 100ded0:	dd800617 	ldw	r22,24(sp)
 100ded4:	dd400517 	ldw	r21,20(sp)
 100ded8:	dd000417 	ldw	r20,16(sp)
 100dedc:	dcc00317 	ldw	r19,12(sp)
 100dee0:	dc800217 	ldw	r18,8(sp)
 100dee4:	dc400117 	ldw	r17,4(sp)
 100dee8:	dc000017 	ldw	r16,0(sp)
 100deec:	dec00804 	addi	sp,sp,32
 100def0:	f800283a 	ret
 100def4:	20fff41e 	bne	r4,r3,100dec8 <_fpadd_parts+0x1c8>
 100def8:	31000015 	stw	r4,0(r6)
 100defc:	98800117 	ldw	r2,4(r19)
 100df00:	30800115 	stw	r2,4(r6)
 100df04:	98c00217 	ldw	r3,8(r19)
 100df08:	30c00215 	stw	r3,8(r6)
 100df0c:	98800317 	ldw	r2,12(r19)
 100df10:	30800315 	stw	r2,12(r6)
 100df14:	98c00417 	ldw	r3,16(r19)
 100df18:	30c00415 	stw	r3,16(r6)
 100df1c:	98800117 	ldw	r2,4(r19)
 100df20:	28c00117 	ldw	r3,4(r5)
 100df24:	3027883a 	mov	r19,r6
 100df28:	10c4703a 	and	r2,r2,r3
 100df2c:	30800115 	stw	r2,4(r6)
 100df30:	003fe506 	br	100dec8 <_fpadd_parts+0x1c8>
 100df34:	1dc02616 	blt	r3,r23,100dfd0 <_fpadd_parts+0x2d0>
 100df38:	0023883a 	mov	r17,zero
 100df3c:	182f883a 	mov	r23,r3
 100df40:	0025883a 	mov	r18,zero
 100df44:	003fa806 	br	100dde8 <_fpadd_parts+0xe8>
 100df48:	a827883a 	mov	r19,r21
 100df4c:	003fde06 	br	100dec8 <_fpadd_parts+0x1c8>
 100df50:	01800044 	movi	r6,1
 100df54:	500497fa 	slli	r2,r10,31
 100df58:	4808d07a 	srli	r4,r9,1
 100df5c:	518ad83a 	srl	r5,r10,r6
 100df60:	a2000217 	ldw	r8,8(r20)
 100df64:	1108b03a 	or	r4,r2,r4
 100df68:	0007883a 	mov	r3,zero
 100df6c:	4984703a 	and	r2,r9,r6
 100df70:	208cb03a 	or	r6,r4,r2
 100df74:	28ceb03a 	or	r7,r5,r3
 100df78:	42000044 	addi	r8,r8,1
 100df7c:	a027883a 	mov	r19,r20
 100df80:	a1c00415 	stw	r7,16(r20)
 100df84:	a2000215 	stw	r8,8(r20)
 100df88:	a1800315 	stw	r6,12(r20)
 100df8c:	003fce06 	br	100dec8 <_fpadd_parts+0x1c8>
 100df90:	8bc5c83a 	sub	r2,r17,r15
 100df94:	8889803a 	cmpltu	r4,r17,r2
 100df98:	9407c83a 	sub	r3,r18,r16
 100df9c:	1909c83a 	sub	r4,r3,r4
 100dfa0:	100d883a 	mov	r6,r2
 100dfa4:	200f883a 	mov	r7,r4
 100dfa8:	003f9906 	br	100de10 <_fpadd_parts+0x110>
 100dfac:	7c45883a 	add	r2,r15,r17
 100dfb0:	13c9803a 	cmpltu	r4,r2,r15
 100dfb4:	8487883a 	add	r3,r16,r18
 100dfb8:	20c9883a 	add	r4,r4,r3
 100dfbc:	a1400115 	stw	r5,4(r20)
 100dfc0:	a5c00215 	stw	r23,8(r20)
 100dfc4:	a0800315 	stw	r2,12(r20)
 100dfc8:	a1000415 	stw	r4,16(r20)
 100dfcc:	003fb606 	br	100dea8 <_fpadd_parts+0x1a8>
 100dfd0:	001f883a 	mov	r15,zero
 100dfd4:	0021883a 	mov	r16,zero
 100dfd8:	003f8306 	br	100dde8 <_fpadd_parts+0xe8>
 100dfdc:	018dc83a 	sub	r6,zero,r6
 100dfe0:	003f6706 	br	100dd80 <_fpadd_parts+0x80>
 100dfe4:	00bfff84 	movi	r2,-2
 100dfe8:	117faf36 	bltu	r2,r5,100dea8 <_fpadd_parts+0x1a8>
 100dfec:	003f9806 	br	100de50 <_fpadd_parts+0x150>
 100dff0:	0005883a 	mov	r2,zero
 100dff4:	1189c83a 	sub	r4,r2,r6
 100dff8:	1105803a 	cmpltu	r2,r2,r4
 100dffc:	01cbc83a 	sub	r5,zero,r7
 100e000:	2885c83a 	sub	r2,r5,r2
 100e004:	01800044 	movi	r6,1
 100e008:	a1800115 	stw	r6,4(r20)
 100e00c:	a5c00215 	stw	r23,8(r20)
 100e010:	a1000315 	stw	r4,12(r20)
 100e014:	a0800415 	stw	r2,16(r20)
 100e018:	003f8206 	br	100de24 <_fpadd_parts+0x124>
 100e01c:	203f7226 	beq	r4,zero,100dde8 <_fpadd_parts+0xe8>
 100e020:	35bff804 	addi	r22,r6,-32
 100e024:	b9af883a 	add	r23,r23,r6
 100e028:	b0003116 	blt	r22,zero,100e0f0 <_fpadd_parts+0x3f0>
 100e02c:	959ad83a 	srl	r13,r18,r22
 100e030:	001d883a 	mov	r14,zero
 100e034:	000f883a 	mov	r7,zero
 100e038:	01000044 	movi	r4,1
 100e03c:	0011883a 	mov	r8,zero
 100e040:	b0002516 	blt	r22,zero,100e0d8 <_fpadd_parts+0x3d8>
 100e044:	2594983a 	sll	r10,r4,r22
 100e048:	0013883a 	mov	r9,zero
 100e04c:	00bfffc4 	movi	r2,-1
 100e050:	4889883a 	add	r4,r9,r2
 100e054:	508b883a 	add	r5,r10,r2
 100e058:	224d803a 	cmpltu	r6,r4,r9
 100e05c:	314b883a 	add	r5,r6,r5
 100e060:	8904703a 	and	r2,r17,r4
 100e064:	9146703a 	and	r3,r18,r5
 100e068:	10c4b03a 	or	r2,r2,r3
 100e06c:	10000226 	beq	r2,zero,100e078 <_fpadd_parts+0x378>
 100e070:	01c00044 	movi	r7,1
 100e074:	0011883a 	mov	r8,zero
 100e078:	69e2b03a 	or	r17,r13,r7
 100e07c:	7224b03a 	or	r18,r14,r8
 100e080:	003f5906 	br	100dde8 <_fpadd_parts+0xe8>
 100e084:	8407883a 	add	r3,r16,r16
 100e088:	008007c4 	movi	r2,31
 100e08c:	1185c83a 	sub	r2,r2,r6
 100e090:	1886983a 	sll	r3,r3,r2
 100e094:	7996d83a 	srl	r11,r15,r6
 100e098:	8198d83a 	srl	r12,r16,r6
 100e09c:	1ad6b03a 	or	r11,r3,r11
 100e0a0:	003f3e06 	br	100dd9c <_fpadd_parts+0x9c>
 100e0a4:	2006d07a 	srli	r3,r4,1
 100e0a8:	008007c4 	movi	r2,31
 100e0ac:	1185c83a 	sub	r2,r2,r6
 100e0b0:	1890d83a 	srl	r8,r3,r2
 100e0b4:	218e983a 	sll	r7,r4,r6
 100e0b8:	003f3e06 	br	100ddb4 <_fpadd_parts+0xb4>
 100e0bc:	113f821e 	bne	r2,r4,100dec8 <_fpadd_parts+0x1c8>
 100e0c0:	28c00117 	ldw	r3,4(r5)
 100e0c4:	98800117 	ldw	r2,4(r19)
 100e0c8:	10ff7f26 	beq	r2,r3,100dec8 <_fpadd_parts+0x1c8>
 100e0cc:	04c04074 	movhi	r19,257
 100e0d0:	9ccc8c04 	addi	r19,r19,12848
 100e0d4:	003f7c06 	br	100dec8 <_fpadd_parts+0x1c8>
 100e0d8:	2006d07a 	srli	r3,r4,1
 100e0dc:	008007c4 	movi	r2,31
 100e0e0:	1185c83a 	sub	r2,r2,r6
 100e0e4:	1894d83a 	srl	r10,r3,r2
 100e0e8:	2192983a 	sll	r9,r4,r6
 100e0ec:	003fd706 	br	100e04c <_fpadd_parts+0x34c>
 100e0f0:	9487883a 	add	r3,r18,r18
 100e0f4:	008007c4 	movi	r2,31
 100e0f8:	1185c83a 	sub	r2,r2,r6
 100e0fc:	1886983a 	sll	r3,r3,r2
 100e100:	899ad83a 	srl	r13,r17,r6
 100e104:	919cd83a 	srl	r14,r18,r6
 100e108:	1b5ab03a 	or	r13,r3,r13
 100e10c:	003fc906 	br	100e034 <_fpadd_parts+0x334>

0100e110 <__subdf3>:
 100e110:	deffea04 	addi	sp,sp,-88
 100e114:	dcc01415 	stw	r19,80(sp)
 100e118:	dcc00404 	addi	r19,sp,16
 100e11c:	2011883a 	mov	r8,r4
 100e120:	2813883a 	mov	r9,r5
 100e124:	dc401315 	stw	r17,76(sp)
 100e128:	d809883a 	mov	r4,sp
 100e12c:	980b883a 	mov	r5,r19
 100e130:	dc400904 	addi	r17,sp,36
 100e134:	dfc01515 	stw	ra,84(sp)
 100e138:	da400115 	stw	r9,4(sp)
 100e13c:	d9c00315 	stw	r7,12(sp)
 100e140:	da000015 	stw	r8,0(sp)
 100e144:	d9800215 	stw	r6,8(sp)
 100e148:	100f5a40 	call	100f5a4 <__unpack_d>
 100e14c:	d9000204 	addi	r4,sp,8
 100e150:	880b883a 	mov	r5,r17
 100e154:	100f5a40 	call	100f5a4 <__unpack_d>
 100e158:	d8800a17 	ldw	r2,40(sp)
 100e15c:	880b883a 	mov	r5,r17
 100e160:	9809883a 	mov	r4,r19
 100e164:	d9800e04 	addi	r6,sp,56
 100e168:	1080005c 	xori	r2,r2,1
 100e16c:	d8800a15 	stw	r2,40(sp)
 100e170:	100dd000 	call	100dd00 <_fpadd_parts>
 100e174:	1009883a 	mov	r4,r2
 100e178:	100f2900 	call	100f290 <__pack_d>
 100e17c:	dfc01517 	ldw	ra,84(sp)
 100e180:	dcc01417 	ldw	r19,80(sp)
 100e184:	dc401317 	ldw	r17,76(sp)
 100e188:	dec01604 	addi	sp,sp,88
 100e18c:	f800283a 	ret

0100e190 <__adddf3>:
 100e190:	deffea04 	addi	sp,sp,-88
 100e194:	dcc01415 	stw	r19,80(sp)
 100e198:	dcc00404 	addi	r19,sp,16
 100e19c:	2011883a 	mov	r8,r4
 100e1a0:	2813883a 	mov	r9,r5
 100e1a4:	dc401315 	stw	r17,76(sp)
 100e1a8:	d809883a 	mov	r4,sp
 100e1ac:	980b883a 	mov	r5,r19
 100e1b0:	dc400904 	addi	r17,sp,36
 100e1b4:	dfc01515 	stw	ra,84(sp)
 100e1b8:	da400115 	stw	r9,4(sp)
 100e1bc:	d9c00315 	stw	r7,12(sp)
 100e1c0:	da000015 	stw	r8,0(sp)
 100e1c4:	d9800215 	stw	r6,8(sp)
 100e1c8:	100f5a40 	call	100f5a4 <__unpack_d>
 100e1cc:	d9000204 	addi	r4,sp,8
 100e1d0:	880b883a 	mov	r5,r17
 100e1d4:	100f5a40 	call	100f5a4 <__unpack_d>
 100e1d8:	d9800e04 	addi	r6,sp,56
 100e1dc:	9809883a 	mov	r4,r19
 100e1e0:	880b883a 	mov	r5,r17
 100e1e4:	100dd000 	call	100dd00 <_fpadd_parts>
 100e1e8:	1009883a 	mov	r4,r2
 100e1ec:	100f2900 	call	100f290 <__pack_d>
 100e1f0:	dfc01517 	ldw	ra,84(sp)
 100e1f4:	dcc01417 	ldw	r19,80(sp)
 100e1f8:	dc401317 	ldw	r17,76(sp)
 100e1fc:	dec01604 	addi	sp,sp,88
 100e200:	f800283a 	ret

0100e204 <__muldf3>:
 100e204:	deffe004 	addi	sp,sp,-128
 100e208:	dc401815 	stw	r17,96(sp)
 100e20c:	dc400404 	addi	r17,sp,16
 100e210:	2011883a 	mov	r8,r4
 100e214:	2813883a 	mov	r9,r5
 100e218:	dc001715 	stw	r16,92(sp)
 100e21c:	d809883a 	mov	r4,sp
 100e220:	880b883a 	mov	r5,r17
 100e224:	dc000904 	addi	r16,sp,36
 100e228:	dfc01f15 	stw	ra,124(sp)
 100e22c:	da400115 	stw	r9,4(sp)
 100e230:	d9c00315 	stw	r7,12(sp)
 100e234:	da000015 	stw	r8,0(sp)
 100e238:	d9800215 	stw	r6,8(sp)
 100e23c:	ddc01e15 	stw	r23,120(sp)
 100e240:	dd801d15 	stw	r22,116(sp)
 100e244:	dd401c15 	stw	r21,112(sp)
 100e248:	dd001b15 	stw	r20,108(sp)
 100e24c:	dcc01a15 	stw	r19,104(sp)
 100e250:	dc801915 	stw	r18,100(sp)
 100e254:	100f5a40 	call	100f5a4 <__unpack_d>
 100e258:	d9000204 	addi	r4,sp,8
 100e25c:	800b883a 	mov	r5,r16
 100e260:	100f5a40 	call	100f5a4 <__unpack_d>
 100e264:	d9000417 	ldw	r4,16(sp)
 100e268:	00800044 	movi	r2,1
 100e26c:	1100102e 	bgeu	r2,r4,100e2b0 <__muldf3+0xac>
 100e270:	d8c00917 	ldw	r3,36(sp)
 100e274:	10c0062e 	bgeu	r2,r3,100e290 <__muldf3+0x8c>
 100e278:	00800104 	movi	r2,4
 100e27c:	20800a26 	beq	r4,r2,100e2a8 <__muldf3+0xa4>
 100e280:	1880cc26 	beq	r3,r2,100e5b4 <__muldf3+0x3b0>
 100e284:	00800084 	movi	r2,2
 100e288:	20800926 	beq	r4,r2,100e2b0 <__muldf3+0xac>
 100e28c:	1880191e 	bne	r3,r2,100e2f4 <__muldf3+0xf0>
 100e290:	d8c00a17 	ldw	r3,40(sp)
 100e294:	d8800517 	ldw	r2,20(sp)
 100e298:	8009883a 	mov	r4,r16
 100e29c:	10c4c03a 	cmpne	r2,r2,r3
 100e2a0:	d8800a15 	stw	r2,40(sp)
 100e2a4:	00000706 	br	100e2c4 <__muldf3+0xc0>
 100e2a8:	00800084 	movi	r2,2
 100e2ac:	1880c326 	beq	r3,r2,100e5bc <__muldf3+0x3b8>
 100e2b0:	d8800517 	ldw	r2,20(sp)
 100e2b4:	d8c00a17 	ldw	r3,40(sp)
 100e2b8:	8809883a 	mov	r4,r17
 100e2bc:	10c4c03a 	cmpne	r2,r2,r3
 100e2c0:	d8800515 	stw	r2,20(sp)
 100e2c4:	100f2900 	call	100f290 <__pack_d>
 100e2c8:	dfc01f17 	ldw	ra,124(sp)
 100e2cc:	ddc01e17 	ldw	r23,120(sp)
 100e2d0:	dd801d17 	ldw	r22,116(sp)
 100e2d4:	dd401c17 	ldw	r21,112(sp)
 100e2d8:	dd001b17 	ldw	r20,108(sp)
 100e2dc:	dcc01a17 	ldw	r19,104(sp)
 100e2e0:	dc801917 	ldw	r18,100(sp)
 100e2e4:	dc401817 	ldw	r17,96(sp)
 100e2e8:	dc001717 	ldw	r16,92(sp)
 100e2ec:	dec02004 	addi	sp,sp,128
 100e2f0:	f800283a 	ret
 100e2f4:	dd800717 	ldw	r22,28(sp)
 100e2f8:	dc800c17 	ldw	r18,48(sp)
 100e2fc:	002b883a 	mov	r21,zero
 100e300:	0023883a 	mov	r17,zero
 100e304:	a80b883a 	mov	r5,r21
 100e308:	b00d883a 	mov	r6,r22
 100e30c:	880f883a 	mov	r7,r17
 100e310:	ddc00817 	ldw	r23,32(sp)
 100e314:	dcc00d17 	ldw	r19,52(sp)
 100e318:	9009883a 	mov	r4,r18
 100e31c:	100ced00 	call	100ced0 <__muldi3>
 100e320:	001b883a 	mov	r13,zero
 100e324:	680f883a 	mov	r7,r13
 100e328:	b009883a 	mov	r4,r22
 100e32c:	000b883a 	mov	r5,zero
 100e330:	980d883a 	mov	r6,r19
 100e334:	b82d883a 	mov	r22,r23
 100e338:	002f883a 	mov	r23,zero
 100e33c:	db401615 	stw	r13,88(sp)
 100e340:	d8801315 	stw	r2,76(sp)
 100e344:	d8c01415 	stw	r3,80(sp)
 100e348:	dcc01515 	stw	r19,84(sp)
 100e34c:	100ced00 	call	100ced0 <__muldi3>
 100e350:	b00d883a 	mov	r6,r22
 100e354:	000b883a 	mov	r5,zero
 100e358:	9009883a 	mov	r4,r18
 100e35c:	b80f883a 	mov	r7,r23
 100e360:	1021883a 	mov	r16,r2
 100e364:	1823883a 	mov	r17,r3
 100e368:	100ced00 	call	100ced0 <__muldi3>
 100e36c:	8085883a 	add	r2,r16,r2
 100e370:	140d803a 	cmpltu	r6,r2,r16
 100e374:	88c7883a 	add	r3,r17,r3
 100e378:	30cd883a 	add	r6,r6,r3
 100e37c:	1029883a 	mov	r20,r2
 100e380:	302b883a 	mov	r21,r6
 100e384:	da801317 	ldw	r10,76(sp)
 100e388:	dac01417 	ldw	r11,80(sp)
 100e38c:	db001517 	ldw	r12,84(sp)
 100e390:	db401617 	ldw	r13,88(sp)
 100e394:	3440612e 	bgeu	r6,r17,100e51c <__muldf3+0x318>
 100e398:	0009883a 	mov	r4,zero
 100e39c:	5105883a 	add	r2,r10,r4
 100e3a0:	128d803a 	cmpltu	r6,r2,r10
 100e3a4:	5d07883a 	add	r3,r11,r20
 100e3a8:	30cd883a 	add	r6,r6,r3
 100e3ac:	0021883a 	mov	r16,zero
 100e3b0:	04400044 	movi	r17,1
 100e3b4:	1025883a 	mov	r18,r2
 100e3b8:	3027883a 	mov	r19,r6
 100e3bc:	32c06236 	bltu	r6,r11,100e548 <__muldf3+0x344>
 100e3c0:	59807a26 	beq	r11,r6,100e5ac <__muldf3+0x3a8>
 100e3c4:	680b883a 	mov	r5,r13
 100e3c8:	b80f883a 	mov	r7,r23
 100e3cc:	6009883a 	mov	r4,r12
 100e3d0:	b00d883a 	mov	r6,r22
 100e3d4:	100ced00 	call	100ced0 <__muldi3>
 100e3d8:	1009883a 	mov	r4,r2
 100e3dc:	000f883a 	mov	r7,zero
 100e3e0:	1545883a 	add	r2,r2,r21
 100e3e4:	1111803a 	cmpltu	r8,r2,r4
 100e3e8:	19c7883a 	add	r3,r3,r7
 100e3ec:	40c7883a 	add	r3,r8,r3
 100e3f0:	88cb883a 	add	r5,r17,r3
 100e3f4:	d8c00617 	ldw	r3,24(sp)
 100e3f8:	8089883a 	add	r4,r16,r2
 100e3fc:	d8800b17 	ldw	r2,44(sp)
 100e400:	18c00104 	addi	r3,r3,4
 100e404:	240d803a 	cmpltu	r6,r4,r16
 100e408:	10c7883a 	add	r3,r2,r3
 100e40c:	2013883a 	mov	r9,r4
 100e410:	d8800a17 	ldw	r2,40(sp)
 100e414:	d9000517 	ldw	r4,20(sp)
 100e418:	314d883a 	add	r6,r6,r5
 100e41c:	3015883a 	mov	r10,r6
 100e420:	2088c03a 	cmpne	r4,r4,r2
 100e424:	00880034 	movhi	r2,8192
 100e428:	10bfffc4 	addi	r2,r2,-1
 100e42c:	d9000f15 	stw	r4,60(sp)
 100e430:	d8c01015 	stw	r3,64(sp)
 100e434:	1180162e 	bgeu	r2,r6,100e490 <__muldf3+0x28c>
 100e438:	1811883a 	mov	r8,r3
 100e43c:	101f883a 	mov	r15,r2
 100e440:	980497fa 	slli	r2,r19,31
 100e444:	9016d07a 	srli	r11,r18,1
 100e448:	500697fa 	slli	r3,r10,31
 100e44c:	480cd07a 	srli	r6,r9,1
 100e450:	500ed07a 	srli	r7,r10,1
 100e454:	12d6b03a 	or	r11,r2,r11
 100e458:	00800044 	movi	r2,1
 100e45c:	198cb03a 	or	r6,r3,r6
 100e460:	4888703a 	and	r4,r9,r2
 100e464:	9818d07a 	srli	r12,r19,1
 100e468:	001b883a 	mov	r13,zero
 100e46c:	03a00034 	movhi	r14,32768
 100e470:	3013883a 	mov	r9,r6
 100e474:	3815883a 	mov	r10,r7
 100e478:	4091883a 	add	r8,r8,r2
 100e47c:	20000226 	beq	r4,zero,100e488 <__muldf3+0x284>
 100e480:	5b64b03a 	or	r18,r11,r13
 100e484:	63a6b03a 	or	r19,r12,r14
 100e488:	7abfed36 	bltu	r15,r10,100e440 <__muldf3+0x23c>
 100e48c:	da001015 	stw	r8,64(sp)
 100e490:	00840034 	movhi	r2,4096
 100e494:	10bfffc4 	addi	r2,r2,-1
 100e498:	12801436 	bltu	r2,r10,100e4ec <__muldf3+0x2e8>
 100e49c:	da001017 	ldw	r8,64(sp)
 100e4a0:	101f883a 	mov	r15,r2
 100e4a4:	4a45883a 	add	r2,r9,r9
 100e4a8:	124d803a 	cmpltu	r6,r2,r9
 100e4ac:	5287883a 	add	r3,r10,r10
 100e4b0:	9497883a 	add	r11,r18,r18
 100e4b4:	5c8f803a 	cmpltu	r7,r11,r18
 100e4b8:	9cd9883a 	add	r12,r19,r19
 100e4bc:	01000044 	movi	r4,1
 100e4c0:	30cd883a 	add	r6,r6,r3
 100e4c4:	3b0f883a 	add	r7,r7,r12
 100e4c8:	423fffc4 	addi	r8,r8,-1
 100e4cc:	1013883a 	mov	r9,r2
 100e4d0:	3015883a 	mov	r10,r6
 100e4d4:	111ab03a 	or	r13,r2,r4
 100e4d8:	98003016 	blt	r19,zero,100e59c <__muldf3+0x398>
 100e4dc:	5825883a 	mov	r18,r11
 100e4e0:	3827883a 	mov	r19,r7
 100e4e4:	7abfef2e 	bgeu	r15,r10,100e4a4 <__muldf3+0x2a0>
 100e4e8:	da001015 	stw	r8,64(sp)
 100e4ec:	00803fc4 	movi	r2,255
 100e4f0:	488e703a 	and	r7,r9,r2
 100e4f4:	00802004 	movi	r2,128
 100e4f8:	0007883a 	mov	r3,zero
 100e4fc:	0011883a 	mov	r8,zero
 100e500:	38801826 	beq	r7,r2,100e564 <__muldf3+0x360>
 100e504:	008000c4 	movi	r2,3
 100e508:	d9000e04 	addi	r4,sp,56
 100e50c:	da801215 	stw	r10,72(sp)
 100e510:	d8800e15 	stw	r2,56(sp)
 100e514:	da401115 	stw	r9,68(sp)
 100e518:	003f6a06 	br	100e2c4 <__muldf3+0xc0>
 100e51c:	89802126 	beq	r17,r6,100e5a4 <__muldf3+0x3a0>
 100e520:	0009883a 	mov	r4,zero
 100e524:	5105883a 	add	r2,r10,r4
 100e528:	128d803a 	cmpltu	r6,r2,r10
 100e52c:	5d07883a 	add	r3,r11,r20
 100e530:	30cd883a 	add	r6,r6,r3
 100e534:	0021883a 	mov	r16,zero
 100e538:	0023883a 	mov	r17,zero
 100e53c:	1025883a 	mov	r18,r2
 100e540:	3027883a 	mov	r19,r6
 100e544:	32ff9e2e 	bgeu	r6,r11,100e3c0 <__muldf3+0x1bc>
 100e548:	00800044 	movi	r2,1
 100e54c:	8089883a 	add	r4,r16,r2
 100e550:	240d803a 	cmpltu	r6,r4,r16
 100e554:	344d883a 	add	r6,r6,r17
 100e558:	2021883a 	mov	r16,r4
 100e55c:	3023883a 	mov	r17,r6
 100e560:	003f9806 	br	100e3c4 <__muldf3+0x1c0>
 100e564:	403fe71e 	bne	r8,zero,100e504 <__muldf3+0x300>
 100e568:	01004004 	movi	r4,256
 100e56c:	4904703a 	and	r2,r9,r4
 100e570:	10c4b03a 	or	r2,r2,r3
 100e574:	103fe31e 	bne	r2,zero,100e504 <__muldf3+0x300>
 100e578:	94c4b03a 	or	r2,r18,r19
 100e57c:	103fe126 	beq	r2,zero,100e504 <__muldf3+0x300>
 100e580:	49c5883a 	add	r2,r9,r7
 100e584:	1251803a 	cmpltu	r8,r2,r9
 100e588:	4291883a 	add	r8,r8,r10
 100e58c:	013fc004 	movi	r4,-256
 100e590:	1112703a 	and	r9,r2,r4
 100e594:	4015883a 	mov	r10,r8
 100e598:	003fda06 	br	100e504 <__muldf3+0x300>
 100e59c:	6813883a 	mov	r9,r13
 100e5a0:	003fce06 	br	100e4dc <__muldf3+0x2d8>
 100e5a4:	143f7c36 	bltu	r2,r16,100e398 <__muldf3+0x194>
 100e5a8:	003fdd06 	br	100e520 <__muldf3+0x31c>
 100e5ac:	12bf852e 	bgeu	r2,r10,100e3c4 <__muldf3+0x1c0>
 100e5b0:	003fe506 	br	100e548 <__muldf3+0x344>
 100e5b4:	00800084 	movi	r2,2
 100e5b8:	20bf351e 	bne	r4,r2,100e290 <__muldf3+0x8c>
 100e5bc:	01004074 	movhi	r4,257
 100e5c0:	210c8c04 	addi	r4,r4,12848
 100e5c4:	003f3f06 	br	100e2c4 <__muldf3+0xc0>

0100e5c8 <__divdf3>:
 100e5c8:	deffed04 	addi	sp,sp,-76
 100e5cc:	dcc01115 	stw	r19,68(sp)
 100e5d0:	dcc00404 	addi	r19,sp,16
 100e5d4:	2011883a 	mov	r8,r4
 100e5d8:	2813883a 	mov	r9,r5
 100e5dc:	dc000e15 	stw	r16,56(sp)
 100e5e0:	d809883a 	mov	r4,sp
 100e5e4:	980b883a 	mov	r5,r19
 100e5e8:	dc000904 	addi	r16,sp,36
 100e5ec:	dfc01215 	stw	ra,72(sp)
 100e5f0:	da400115 	stw	r9,4(sp)
 100e5f4:	d9c00315 	stw	r7,12(sp)
 100e5f8:	da000015 	stw	r8,0(sp)
 100e5fc:	d9800215 	stw	r6,8(sp)
 100e600:	dc801015 	stw	r18,64(sp)
 100e604:	dc400f15 	stw	r17,60(sp)
 100e608:	100f5a40 	call	100f5a4 <__unpack_d>
 100e60c:	d9000204 	addi	r4,sp,8
 100e610:	800b883a 	mov	r5,r16
 100e614:	100f5a40 	call	100f5a4 <__unpack_d>
 100e618:	d9000417 	ldw	r4,16(sp)
 100e61c:	00800044 	movi	r2,1
 100e620:	11000b2e 	bgeu	r2,r4,100e650 <__divdf3+0x88>
 100e624:	d9400917 	ldw	r5,36(sp)
 100e628:	1140762e 	bgeu	r2,r5,100e804 <__divdf3+0x23c>
 100e62c:	d8800517 	ldw	r2,20(sp)
 100e630:	d8c00a17 	ldw	r3,40(sp)
 100e634:	01800104 	movi	r6,4
 100e638:	10c4f03a 	xor	r2,r2,r3
 100e63c:	d8800515 	stw	r2,20(sp)
 100e640:	21800226 	beq	r4,r6,100e64c <__divdf3+0x84>
 100e644:	00800084 	movi	r2,2
 100e648:	2080141e 	bne	r4,r2,100e69c <__divdf3+0xd4>
 100e64c:	29000926 	beq	r5,r4,100e674 <__divdf3+0xac>
 100e650:	9809883a 	mov	r4,r19
 100e654:	100f2900 	call	100f290 <__pack_d>
 100e658:	dfc01217 	ldw	ra,72(sp)
 100e65c:	dcc01117 	ldw	r19,68(sp)
 100e660:	dc801017 	ldw	r18,64(sp)
 100e664:	dc400f17 	ldw	r17,60(sp)
 100e668:	dc000e17 	ldw	r16,56(sp)
 100e66c:	dec01304 	addi	sp,sp,76
 100e670:	f800283a 	ret
 100e674:	01004074 	movhi	r4,257
 100e678:	210c8c04 	addi	r4,r4,12848
 100e67c:	100f2900 	call	100f290 <__pack_d>
 100e680:	dfc01217 	ldw	ra,72(sp)
 100e684:	dcc01117 	ldw	r19,68(sp)
 100e688:	dc801017 	ldw	r18,64(sp)
 100e68c:	dc400f17 	ldw	r17,60(sp)
 100e690:	dc000e17 	ldw	r16,56(sp)
 100e694:	dec01304 	addi	sp,sp,76
 100e698:	f800283a 	ret
 100e69c:	29805b26 	beq	r5,r6,100e80c <__divdf3+0x244>
 100e6a0:	28802d26 	beq	r5,r2,100e758 <__divdf3+0x190>
 100e6a4:	d8c00617 	ldw	r3,24(sp)
 100e6a8:	d8800b17 	ldw	r2,44(sp)
 100e6ac:	d9c00817 	ldw	r7,32(sp)
 100e6b0:	dc400d17 	ldw	r17,52(sp)
 100e6b4:	188bc83a 	sub	r5,r3,r2
 100e6b8:	d9800717 	ldw	r6,28(sp)
 100e6bc:	dc000c17 	ldw	r16,48(sp)
 100e6c0:	d9400615 	stw	r5,24(sp)
 100e6c4:	3c403836 	bltu	r7,r17,100e7a8 <__divdf3+0x1e0>
 100e6c8:	89c03626 	beq	r17,r7,100e7a4 <__divdf3+0x1dc>
 100e6cc:	0015883a 	mov	r10,zero
 100e6d0:	001d883a 	mov	r14,zero
 100e6d4:	02c40034 	movhi	r11,4096
 100e6d8:	001f883a 	mov	r15,zero
 100e6dc:	003f883a 	mov	ra,zero
 100e6e0:	04800f44 	movi	r18,61
 100e6e4:	00000f06 	br	100e724 <__divdf3+0x15c>
 100e6e8:	601d883a 	mov	r14,r12
 100e6ec:	681f883a 	mov	r15,r13
 100e6f0:	400d883a 	mov	r6,r8
 100e6f4:	100f883a 	mov	r7,r2
 100e6f8:	3191883a 	add	r8,r6,r6
 100e6fc:	5808d07a 	srli	r4,r11,1
 100e700:	4185803a 	cmpltu	r2,r8,r6
 100e704:	39d3883a 	add	r9,r7,r7
 100e708:	28c6b03a 	or	r3,r5,r3
 100e70c:	1245883a 	add	r2,r2,r9
 100e710:	1815883a 	mov	r10,r3
 100e714:	2017883a 	mov	r11,r4
 100e718:	400d883a 	mov	r6,r8
 100e71c:	100f883a 	mov	r7,r2
 100e720:	fc801726 	beq	ra,r18,100e780 <__divdf3+0x1b8>
 100e724:	580a97fa 	slli	r5,r11,31
 100e728:	5006d07a 	srli	r3,r10,1
 100e72c:	ffc00044 	addi	ra,ra,1
 100e730:	3c7ff136 	bltu	r7,r17,100e6f8 <__divdf3+0x130>
 100e734:	3411c83a 	sub	r8,r6,r16
 100e738:	3205803a 	cmpltu	r2,r6,r8
 100e73c:	3c53c83a 	sub	r9,r7,r17
 100e740:	7298b03a 	or	r12,r14,r10
 100e744:	7adab03a 	or	r13,r15,r11
 100e748:	4885c83a 	sub	r2,r9,r2
 100e74c:	89ffe61e 	bne	r17,r7,100e6e8 <__divdf3+0x120>
 100e750:	343fe936 	bltu	r6,r16,100e6f8 <__divdf3+0x130>
 100e754:	003fe406 	br	100e6e8 <__divdf3+0x120>
 100e758:	9809883a 	mov	r4,r19
 100e75c:	d9800415 	stw	r6,16(sp)
 100e760:	100f2900 	call	100f290 <__pack_d>
 100e764:	dfc01217 	ldw	ra,72(sp)
 100e768:	dcc01117 	ldw	r19,68(sp)
 100e76c:	dc801017 	ldw	r18,64(sp)
 100e770:	dc400f17 	ldw	r17,60(sp)
 100e774:	dc000e17 	ldw	r16,56(sp)
 100e778:	dec01304 	addi	sp,sp,76
 100e77c:	f800283a 	ret
 100e780:	00803fc4 	movi	r2,255
 100e784:	7090703a 	and	r8,r14,r2
 100e788:	00802004 	movi	r2,128
 100e78c:	0007883a 	mov	r3,zero
 100e790:	0013883a 	mov	r9,zero
 100e794:	40800d26 	beq	r8,r2,100e7cc <__divdf3+0x204>
 100e798:	dbc00815 	stw	r15,32(sp)
 100e79c:	db800715 	stw	r14,28(sp)
 100e7a0:	003fab06 	br	100e650 <__divdf3+0x88>
 100e7a4:	343fc92e 	bgeu	r6,r16,100e6cc <__divdf3+0x104>
 100e7a8:	3185883a 	add	r2,r6,r6
 100e7ac:	1189803a 	cmpltu	r4,r2,r6
 100e7b0:	39c7883a 	add	r3,r7,r7
 100e7b4:	20c9883a 	add	r4,r4,r3
 100e7b8:	297fffc4 	addi	r5,r5,-1
 100e7bc:	100d883a 	mov	r6,r2
 100e7c0:	200f883a 	mov	r7,r4
 100e7c4:	d9400615 	stw	r5,24(sp)
 100e7c8:	003fc006 	br	100e6cc <__divdf3+0x104>
 100e7cc:	483ff21e 	bne	r9,zero,100e798 <__divdf3+0x1d0>
 100e7d0:	01004004 	movi	r4,256
 100e7d4:	7104703a 	and	r2,r14,r4
 100e7d8:	10c4b03a 	or	r2,r2,r3
 100e7dc:	103fee1e 	bne	r2,zero,100e798 <__divdf3+0x1d0>
 100e7e0:	31c4b03a 	or	r2,r6,r7
 100e7e4:	103fec26 	beq	r2,zero,100e798 <__divdf3+0x1d0>
 100e7e8:	7205883a 	add	r2,r14,r8
 100e7ec:	1391803a 	cmpltu	r8,r2,r14
 100e7f0:	43d1883a 	add	r8,r8,r15
 100e7f4:	013fc004 	movi	r4,-256
 100e7f8:	111c703a 	and	r14,r2,r4
 100e7fc:	401f883a 	mov	r15,r8
 100e800:	003fe506 	br	100e798 <__divdf3+0x1d0>
 100e804:	8009883a 	mov	r4,r16
 100e808:	003f9206 	br	100e654 <__divdf3+0x8c>
 100e80c:	9809883a 	mov	r4,r19
 100e810:	d8000715 	stw	zero,28(sp)
 100e814:	d8000815 	stw	zero,32(sp)
 100e818:	d8000615 	stw	zero,24(sp)
 100e81c:	003f8d06 	br	100e654 <__divdf3+0x8c>

0100e820 <__eqdf2>:
 100e820:	deffef04 	addi	sp,sp,-68
 100e824:	dc400f15 	stw	r17,60(sp)
 100e828:	dc400404 	addi	r17,sp,16
 100e82c:	2005883a 	mov	r2,r4
 100e830:	2807883a 	mov	r3,r5
 100e834:	dc000e15 	stw	r16,56(sp)
 100e838:	d809883a 	mov	r4,sp
 100e83c:	880b883a 	mov	r5,r17
 100e840:	dc000904 	addi	r16,sp,36
 100e844:	d8c00115 	stw	r3,4(sp)
 100e848:	d8800015 	stw	r2,0(sp)
 100e84c:	d9800215 	stw	r6,8(sp)
 100e850:	dfc01015 	stw	ra,64(sp)
 100e854:	d9c00315 	stw	r7,12(sp)
 100e858:	100f5a40 	call	100f5a4 <__unpack_d>
 100e85c:	d9000204 	addi	r4,sp,8
 100e860:	800b883a 	mov	r5,r16
 100e864:	100f5a40 	call	100f5a4 <__unpack_d>
 100e868:	d8800417 	ldw	r2,16(sp)
 100e86c:	00c00044 	movi	r3,1
 100e870:	180d883a 	mov	r6,r3
 100e874:	1880062e 	bgeu	r3,r2,100e890 <__eqdf2+0x70>
 100e878:	d8800917 	ldw	r2,36(sp)
 100e87c:	8809883a 	mov	r4,r17
 100e880:	800b883a 	mov	r5,r16
 100e884:	1880022e 	bgeu	r3,r2,100e890 <__eqdf2+0x70>
 100e888:	100f6dc0 	call	100f6dc <__fpcmp_parts_d>
 100e88c:	100d883a 	mov	r6,r2
 100e890:	3005883a 	mov	r2,r6
 100e894:	dfc01017 	ldw	ra,64(sp)
 100e898:	dc400f17 	ldw	r17,60(sp)
 100e89c:	dc000e17 	ldw	r16,56(sp)
 100e8a0:	dec01104 	addi	sp,sp,68
 100e8a4:	f800283a 	ret

0100e8a8 <__nedf2>:
 100e8a8:	deffef04 	addi	sp,sp,-68
 100e8ac:	dc400f15 	stw	r17,60(sp)
 100e8b0:	dc400404 	addi	r17,sp,16
 100e8b4:	2005883a 	mov	r2,r4
 100e8b8:	2807883a 	mov	r3,r5
 100e8bc:	dc000e15 	stw	r16,56(sp)
 100e8c0:	d809883a 	mov	r4,sp
 100e8c4:	880b883a 	mov	r5,r17
 100e8c8:	dc000904 	addi	r16,sp,36
 100e8cc:	d8c00115 	stw	r3,4(sp)
 100e8d0:	d8800015 	stw	r2,0(sp)
 100e8d4:	d9800215 	stw	r6,8(sp)
 100e8d8:	dfc01015 	stw	ra,64(sp)
 100e8dc:	d9c00315 	stw	r7,12(sp)
 100e8e0:	100f5a40 	call	100f5a4 <__unpack_d>
 100e8e4:	d9000204 	addi	r4,sp,8
 100e8e8:	800b883a 	mov	r5,r16
 100e8ec:	100f5a40 	call	100f5a4 <__unpack_d>
 100e8f0:	d8800417 	ldw	r2,16(sp)
 100e8f4:	00c00044 	movi	r3,1
 100e8f8:	180d883a 	mov	r6,r3
 100e8fc:	1880062e 	bgeu	r3,r2,100e918 <__nedf2+0x70>
 100e900:	d8800917 	ldw	r2,36(sp)
 100e904:	8809883a 	mov	r4,r17
 100e908:	800b883a 	mov	r5,r16
 100e90c:	1880022e 	bgeu	r3,r2,100e918 <__nedf2+0x70>
 100e910:	100f6dc0 	call	100f6dc <__fpcmp_parts_d>
 100e914:	100d883a 	mov	r6,r2
 100e918:	3005883a 	mov	r2,r6
 100e91c:	dfc01017 	ldw	ra,64(sp)
 100e920:	dc400f17 	ldw	r17,60(sp)
 100e924:	dc000e17 	ldw	r16,56(sp)
 100e928:	dec01104 	addi	sp,sp,68
 100e92c:	f800283a 	ret

0100e930 <__gtdf2>:
 100e930:	deffef04 	addi	sp,sp,-68
 100e934:	dc400f15 	stw	r17,60(sp)
 100e938:	dc400404 	addi	r17,sp,16
 100e93c:	2005883a 	mov	r2,r4
 100e940:	2807883a 	mov	r3,r5
 100e944:	dc000e15 	stw	r16,56(sp)
 100e948:	d809883a 	mov	r4,sp
 100e94c:	880b883a 	mov	r5,r17
 100e950:	dc000904 	addi	r16,sp,36
 100e954:	d8c00115 	stw	r3,4(sp)
 100e958:	d8800015 	stw	r2,0(sp)
 100e95c:	d9800215 	stw	r6,8(sp)
 100e960:	dfc01015 	stw	ra,64(sp)
 100e964:	d9c00315 	stw	r7,12(sp)
 100e968:	100f5a40 	call	100f5a4 <__unpack_d>
 100e96c:	d9000204 	addi	r4,sp,8
 100e970:	800b883a 	mov	r5,r16
 100e974:	100f5a40 	call	100f5a4 <__unpack_d>
 100e978:	d8800417 	ldw	r2,16(sp)
 100e97c:	00c00044 	movi	r3,1
 100e980:	01bfffc4 	movi	r6,-1
 100e984:	1880062e 	bgeu	r3,r2,100e9a0 <__gtdf2+0x70>
 100e988:	d8800917 	ldw	r2,36(sp)
 100e98c:	8809883a 	mov	r4,r17
 100e990:	800b883a 	mov	r5,r16
 100e994:	1880022e 	bgeu	r3,r2,100e9a0 <__gtdf2+0x70>
 100e998:	100f6dc0 	call	100f6dc <__fpcmp_parts_d>
 100e99c:	100d883a 	mov	r6,r2
 100e9a0:	3005883a 	mov	r2,r6
 100e9a4:	dfc01017 	ldw	ra,64(sp)
 100e9a8:	dc400f17 	ldw	r17,60(sp)
 100e9ac:	dc000e17 	ldw	r16,56(sp)
 100e9b0:	dec01104 	addi	sp,sp,68
 100e9b4:	f800283a 	ret

0100e9b8 <__gedf2>:
 100e9b8:	deffef04 	addi	sp,sp,-68
 100e9bc:	dc400f15 	stw	r17,60(sp)
 100e9c0:	dc400404 	addi	r17,sp,16
 100e9c4:	2005883a 	mov	r2,r4
 100e9c8:	2807883a 	mov	r3,r5
 100e9cc:	dc000e15 	stw	r16,56(sp)
 100e9d0:	d809883a 	mov	r4,sp
 100e9d4:	880b883a 	mov	r5,r17
 100e9d8:	dc000904 	addi	r16,sp,36
 100e9dc:	d8c00115 	stw	r3,4(sp)
 100e9e0:	d8800015 	stw	r2,0(sp)
 100e9e4:	d9800215 	stw	r6,8(sp)
 100e9e8:	dfc01015 	stw	ra,64(sp)
 100e9ec:	d9c00315 	stw	r7,12(sp)
 100e9f0:	100f5a40 	call	100f5a4 <__unpack_d>
 100e9f4:	d9000204 	addi	r4,sp,8
 100e9f8:	800b883a 	mov	r5,r16
 100e9fc:	100f5a40 	call	100f5a4 <__unpack_d>
 100ea00:	d8800417 	ldw	r2,16(sp)
 100ea04:	00c00044 	movi	r3,1
 100ea08:	01bfffc4 	movi	r6,-1
 100ea0c:	1880062e 	bgeu	r3,r2,100ea28 <__gedf2+0x70>
 100ea10:	d8800917 	ldw	r2,36(sp)
 100ea14:	8809883a 	mov	r4,r17
 100ea18:	800b883a 	mov	r5,r16
 100ea1c:	1880022e 	bgeu	r3,r2,100ea28 <__gedf2+0x70>
 100ea20:	100f6dc0 	call	100f6dc <__fpcmp_parts_d>
 100ea24:	100d883a 	mov	r6,r2
 100ea28:	3005883a 	mov	r2,r6
 100ea2c:	dfc01017 	ldw	ra,64(sp)
 100ea30:	dc400f17 	ldw	r17,60(sp)
 100ea34:	dc000e17 	ldw	r16,56(sp)
 100ea38:	dec01104 	addi	sp,sp,68
 100ea3c:	f800283a 	ret

0100ea40 <__ltdf2>:
 100ea40:	deffef04 	addi	sp,sp,-68
 100ea44:	dc400f15 	stw	r17,60(sp)
 100ea48:	dc400404 	addi	r17,sp,16
 100ea4c:	2005883a 	mov	r2,r4
 100ea50:	2807883a 	mov	r3,r5
 100ea54:	dc000e15 	stw	r16,56(sp)
 100ea58:	d809883a 	mov	r4,sp
 100ea5c:	880b883a 	mov	r5,r17
 100ea60:	dc000904 	addi	r16,sp,36
 100ea64:	d8c00115 	stw	r3,4(sp)
 100ea68:	d8800015 	stw	r2,0(sp)
 100ea6c:	d9800215 	stw	r6,8(sp)
 100ea70:	dfc01015 	stw	ra,64(sp)
 100ea74:	d9c00315 	stw	r7,12(sp)
 100ea78:	100f5a40 	call	100f5a4 <__unpack_d>
 100ea7c:	d9000204 	addi	r4,sp,8
 100ea80:	800b883a 	mov	r5,r16
 100ea84:	100f5a40 	call	100f5a4 <__unpack_d>
 100ea88:	d8800417 	ldw	r2,16(sp)
 100ea8c:	00c00044 	movi	r3,1
 100ea90:	180d883a 	mov	r6,r3
 100ea94:	1880062e 	bgeu	r3,r2,100eab0 <__ltdf2+0x70>
 100ea98:	d8800917 	ldw	r2,36(sp)
 100ea9c:	8809883a 	mov	r4,r17
 100eaa0:	800b883a 	mov	r5,r16
 100eaa4:	1880022e 	bgeu	r3,r2,100eab0 <__ltdf2+0x70>
 100eaa8:	100f6dc0 	call	100f6dc <__fpcmp_parts_d>
 100eaac:	100d883a 	mov	r6,r2
 100eab0:	3005883a 	mov	r2,r6
 100eab4:	dfc01017 	ldw	ra,64(sp)
 100eab8:	dc400f17 	ldw	r17,60(sp)
 100eabc:	dc000e17 	ldw	r16,56(sp)
 100eac0:	dec01104 	addi	sp,sp,68
 100eac4:	f800283a 	ret

0100eac8 <__ledf2>:
 100eac8:	deffef04 	addi	sp,sp,-68
 100eacc:	dc400f15 	stw	r17,60(sp)
 100ead0:	dc400404 	addi	r17,sp,16
 100ead4:	2005883a 	mov	r2,r4
 100ead8:	2807883a 	mov	r3,r5
 100eadc:	dc000e15 	stw	r16,56(sp)
 100eae0:	d809883a 	mov	r4,sp
 100eae4:	880b883a 	mov	r5,r17
 100eae8:	dc000904 	addi	r16,sp,36
 100eaec:	d8c00115 	stw	r3,4(sp)
 100eaf0:	d8800015 	stw	r2,0(sp)
 100eaf4:	d9800215 	stw	r6,8(sp)
 100eaf8:	dfc01015 	stw	ra,64(sp)
 100eafc:	d9c00315 	stw	r7,12(sp)
 100eb00:	100f5a40 	call	100f5a4 <__unpack_d>
 100eb04:	d9000204 	addi	r4,sp,8
 100eb08:	800b883a 	mov	r5,r16
 100eb0c:	100f5a40 	call	100f5a4 <__unpack_d>
 100eb10:	d8800417 	ldw	r2,16(sp)
 100eb14:	00c00044 	movi	r3,1
 100eb18:	180d883a 	mov	r6,r3
 100eb1c:	1880062e 	bgeu	r3,r2,100eb38 <__ledf2+0x70>
 100eb20:	d8800917 	ldw	r2,36(sp)
 100eb24:	8809883a 	mov	r4,r17
 100eb28:	800b883a 	mov	r5,r16
 100eb2c:	1880022e 	bgeu	r3,r2,100eb38 <__ledf2+0x70>
 100eb30:	100f6dc0 	call	100f6dc <__fpcmp_parts_d>
 100eb34:	100d883a 	mov	r6,r2
 100eb38:	3005883a 	mov	r2,r6
 100eb3c:	dfc01017 	ldw	ra,64(sp)
 100eb40:	dc400f17 	ldw	r17,60(sp)
 100eb44:	dc000e17 	ldw	r16,56(sp)
 100eb48:	dec01104 	addi	sp,sp,68
 100eb4c:	f800283a 	ret

0100eb50 <__floatsidf>:
 100eb50:	2006d7fa 	srli	r3,r4,31
 100eb54:	defff604 	addi	sp,sp,-40
 100eb58:	008000c4 	movi	r2,3
 100eb5c:	dfc00915 	stw	ra,36(sp)
 100eb60:	dcc00815 	stw	r19,32(sp)
 100eb64:	dc800715 	stw	r18,28(sp)
 100eb68:	dc400615 	stw	r17,24(sp)
 100eb6c:	dc000515 	stw	r16,20(sp)
 100eb70:	d8800015 	stw	r2,0(sp)
 100eb74:	d8c00115 	stw	r3,4(sp)
 100eb78:	20000f1e 	bne	r4,zero,100ebb8 <__floatsidf+0x68>
 100eb7c:	00800084 	movi	r2,2
 100eb80:	d8800015 	stw	r2,0(sp)
 100eb84:	d809883a 	mov	r4,sp
 100eb88:	100f2900 	call	100f290 <__pack_d>
 100eb8c:	1009883a 	mov	r4,r2
 100eb90:	180b883a 	mov	r5,r3
 100eb94:	2005883a 	mov	r2,r4
 100eb98:	2807883a 	mov	r3,r5
 100eb9c:	dfc00917 	ldw	ra,36(sp)
 100eba0:	dcc00817 	ldw	r19,32(sp)
 100eba4:	dc800717 	ldw	r18,28(sp)
 100eba8:	dc400617 	ldw	r17,24(sp)
 100ebac:	dc000517 	ldw	r16,20(sp)
 100ebb0:	dec00a04 	addi	sp,sp,40
 100ebb4:	f800283a 	ret
 100ebb8:	00800f04 	movi	r2,60
 100ebbc:	1807003a 	cmpeq	r3,r3,zero
 100ebc0:	d8800215 	stw	r2,8(sp)
 100ebc4:	18001126 	beq	r3,zero,100ec0c <__floatsidf+0xbc>
 100ebc8:	0027883a 	mov	r19,zero
 100ebcc:	2025883a 	mov	r18,r4
 100ebd0:	d9000315 	stw	r4,12(sp)
 100ebd4:	dcc00415 	stw	r19,16(sp)
 100ebd8:	100f0740 	call	100f074 <__clzsi2>
 100ebdc:	11000744 	addi	r4,r2,29
 100ebe0:	013fe80e 	bge	zero,r4,100eb84 <__floatsidf+0x34>
 100ebe4:	10bfff44 	addi	r2,r2,-3
 100ebe8:	10000c16 	blt	r2,zero,100ec1c <__floatsidf+0xcc>
 100ebec:	90a2983a 	sll	r17,r18,r2
 100ebf0:	0021883a 	mov	r16,zero
 100ebf4:	d8800217 	ldw	r2,8(sp)
 100ebf8:	dc400415 	stw	r17,16(sp)
 100ebfc:	dc000315 	stw	r16,12(sp)
 100ec00:	1105c83a 	sub	r2,r2,r4
 100ec04:	d8800215 	stw	r2,8(sp)
 100ec08:	003fde06 	br	100eb84 <__floatsidf+0x34>
 100ec0c:	00a00034 	movhi	r2,32768
 100ec10:	20800a26 	beq	r4,r2,100ec3c <__floatsidf+0xec>
 100ec14:	0109c83a 	sub	r4,zero,r4
 100ec18:	003feb06 	br	100ebc8 <__floatsidf+0x78>
 100ec1c:	9006d07a 	srli	r3,r18,1
 100ec20:	008007c4 	movi	r2,31
 100ec24:	1105c83a 	sub	r2,r2,r4
 100ec28:	1886d83a 	srl	r3,r3,r2
 100ec2c:	9922983a 	sll	r17,r19,r4
 100ec30:	9120983a 	sll	r16,r18,r4
 100ec34:	1c62b03a 	or	r17,r3,r17
 100ec38:	003fee06 	br	100ebf4 <__floatsidf+0xa4>
 100ec3c:	0009883a 	mov	r4,zero
 100ec40:	01707834 	movhi	r5,49632
 100ec44:	003fd306 	br	100eb94 <__floatsidf+0x44>

0100ec48 <__fixdfsi>:
 100ec48:	defff804 	addi	sp,sp,-32
 100ec4c:	2005883a 	mov	r2,r4
 100ec50:	2807883a 	mov	r3,r5
 100ec54:	d809883a 	mov	r4,sp
 100ec58:	d9400204 	addi	r5,sp,8
 100ec5c:	d8c00115 	stw	r3,4(sp)
 100ec60:	d8800015 	stw	r2,0(sp)
 100ec64:	dfc00715 	stw	ra,28(sp)
 100ec68:	100f5a40 	call	100f5a4 <__unpack_d>
 100ec6c:	d8c00217 	ldw	r3,8(sp)
 100ec70:	00800084 	movi	r2,2
 100ec74:	1880051e 	bne	r3,r2,100ec8c <__fixdfsi+0x44>
 100ec78:	0007883a 	mov	r3,zero
 100ec7c:	1805883a 	mov	r2,r3
 100ec80:	dfc00717 	ldw	ra,28(sp)
 100ec84:	dec00804 	addi	sp,sp,32
 100ec88:	f800283a 	ret
 100ec8c:	00800044 	movi	r2,1
 100ec90:	10fff92e 	bgeu	r2,r3,100ec78 <__fixdfsi+0x30>
 100ec94:	00800104 	movi	r2,4
 100ec98:	18800426 	beq	r3,r2,100ecac <__fixdfsi+0x64>
 100ec9c:	d8c00417 	ldw	r3,16(sp)
 100eca0:	183ff516 	blt	r3,zero,100ec78 <__fixdfsi+0x30>
 100eca4:	00800784 	movi	r2,30
 100eca8:	10c0080e 	bge	r2,r3,100eccc <__fixdfsi+0x84>
 100ecac:	d8800317 	ldw	r2,12(sp)
 100ecb0:	1000121e 	bne	r2,zero,100ecfc <__fixdfsi+0xb4>
 100ecb4:	00e00034 	movhi	r3,32768
 100ecb8:	18ffffc4 	addi	r3,r3,-1
 100ecbc:	1805883a 	mov	r2,r3
 100ecc0:	dfc00717 	ldw	ra,28(sp)
 100ecc4:	dec00804 	addi	sp,sp,32
 100ecc8:	f800283a 	ret
 100eccc:	00800f04 	movi	r2,60
 100ecd0:	10d1c83a 	sub	r8,r2,r3
 100ecd4:	40bff804 	addi	r2,r8,-32
 100ecd8:	d9800517 	ldw	r6,20(sp)
 100ecdc:	d9c00617 	ldw	r7,24(sp)
 100ece0:	10000816 	blt	r2,zero,100ed04 <__fixdfsi+0xbc>
 100ece4:	3888d83a 	srl	r4,r7,r2
 100ece8:	d8800317 	ldw	r2,12(sp)
 100ecec:	2007883a 	mov	r3,r4
 100ecf0:	103fe226 	beq	r2,zero,100ec7c <__fixdfsi+0x34>
 100ecf4:	0107c83a 	sub	r3,zero,r4
 100ecf8:	003fe006 	br	100ec7c <__fixdfsi+0x34>
 100ecfc:	00e00034 	movhi	r3,32768
 100ed00:	003fde06 	br	100ec7c <__fixdfsi+0x34>
 100ed04:	39c7883a 	add	r3,r7,r7
 100ed08:	008007c4 	movi	r2,31
 100ed0c:	1205c83a 	sub	r2,r2,r8
 100ed10:	1886983a 	sll	r3,r3,r2
 100ed14:	3208d83a 	srl	r4,r6,r8
 100ed18:	1908b03a 	or	r4,r3,r4
 100ed1c:	003ff206 	br	100ece8 <__fixdfsi+0xa0>

0100ed20 <__truncdfsf2>:
 100ed20:	defff804 	addi	sp,sp,-32
 100ed24:	2005883a 	mov	r2,r4
 100ed28:	2807883a 	mov	r3,r5
 100ed2c:	d809883a 	mov	r4,sp
 100ed30:	d9400204 	addi	r5,sp,8
 100ed34:	d8c00115 	stw	r3,4(sp)
 100ed38:	d8800015 	stw	r2,0(sp)
 100ed3c:	dfc00715 	stw	ra,28(sp)
 100ed40:	100f5a40 	call	100f5a4 <__unpack_d>
 100ed44:	d9c00517 	ldw	r7,20(sp)
 100ed48:	da000617 	ldw	r8,24(sp)
 100ed4c:	02d00034 	movhi	r11,16384
 100ed50:	5affffc4 	addi	r11,r11,-1
 100ed54:	3812d7ba 	srli	r9,r7,30
 100ed58:	401a90ba 	slli	r13,r8,2
 100ed5c:	3ac4703a 	and	r2,r7,r11
 100ed60:	0007883a 	mov	r3,zero
 100ed64:	6a52b03a 	or	r9,r13,r9
 100ed68:	10c4b03a 	or	r2,r2,r3
 100ed6c:	d9000217 	ldw	r4,8(sp)
 100ed70:	d9400317 	ldw	r5,12(sp)
 100ed74:	d9800417 	ldw	r6,16(sp)
 100ed78:	480f883a 	mov	r7,r9
 100ed7c:	10000126 	beq	r2,zero,100ed84 <__truncdfsf2+0x64>
 100ed80:	49c00054 	ori	r7,r9,1
 100ed84:	100f2640 	call	100f264 <__make_fp>
 100ed88:	dfc00717 	ldw	ra,28(sp)
 100ed8c:	dec00804 	addi	sp,sp,32
 100ed90:	f800283a 	ret

0100ed94 <__floatunsidf>:
 100ed94:	defff204 	addi	sp,sp,-56
 100ed98:	dfc00d15 	stw	ra,52(sp)
 100ed9c:	ddc00c15 	stw	r23,48(sp)
 100eda0:	dd800b15 	stw	r22,44(sp)
 100eda4:	dd400a15 	stw	r21,40(sp)
 100eda8:	dd000915 	stw	r20,36(sp)
 100edac:	dcc00815 	stw	r19,32(sp)
 100edb0:	dc800715 	stw	r18,28(sp)
 100edb4:	dc400615 	stw	r17,24(sp)
 100edb8:	dc000515 	stw	r16,20(sp)
 100edbc:	d8000115 	stw	zero,4(sp)
 100edc0:	20000f1e 	bne	r4,zero,100ee00 <__floatunsidf+0x6c>
 100edc4:	00800084 	movi	r2,2
 100edc8:	d8800015 	stw	r2,0(sp)
 100edcc:	d809883a 	mov	r4,sp
 100edd0:	100f2900 	call	100f290 <__pack_d>
 100edd4:	dfc00d17 	ldw	ra,52(sp)
 100edd8:	ddc00c17 	ldw	r23,48(sp)
 100eddc:	dd800b17 	ldw	r22,44(sp)
 100ede0:	dd400a17 	ldw	r21,40(sp)
 100ede4:	dd000917 	ldw	r20,36(sp)
 100ede8:	dcc00817 	ldw	r19,32(sp)
 100edec:	dc800717 	ldw	r18,28(sp)
 100edf0:	dc400617 	ldw	r17,24(sp)
 100edf4:	dc000517 	ldw	r16,20(sp)
 100edf8:	dec00e04 	addi	sp,sp,56
 100edfc:	f800283a 	ret
 100ee00:	008000c4 	movi	r2,3
 100ee04:	00c00f04 	movi	r3,60
 100ee08:	002f883a 	mov	r23,zero
 100ee0c:	202d883a 	mov	r22,r4
 100ee10:	d8800015 	stw	r2,0(sp)
 100ee14:	d8c00215 	stw	r3,8(sp)
 100ee18:	d9000315 	stw	r4,12(sp)
 100ee1c:	ddc00415 	stw	r23,16(sp)
 100ee20:	100f0740 	call	100f074 <__clzsi2>
 100ee24:	12400744 	addi	r9,r2,29
 100ee28:	48000b16 	blt	r9,zero,100ee58 <__floatunsidf+0xc4>
 100ee2c:	483fe726 	beq	r9,zero,100edcc <__floatunsidf+0x38>
 100ee30:	10bfff44 	addi	r2,r2,-3
 100ee34:	10002e16 	blt	r2,zero,100eef0 <__floatunsidf+0x15c>
 100ee38:	b0a2983a 	sll	r17,r22,r2
 100ee3c:	0021883a 	mov	r16,zero
 100ee40:	d8800217 	ldw	r2,8(sp)
 100ee44:	dc400415 	stw	r17,16(sp)
 100ee48:	dc000315 	stw	r16,12(sp)
 100ee4c:	1245c83a 	sub	r2,r2,r9
 100ee50:	d8800215 	stw	r2,8(sp)
 100ee54:	003fdd06 	br	100edcc <__floatunsidf+0x38>
 100ee58:	0255c83a 	sub	r10,zero,r9
 100ee5c:	51bff804 	addi	r6,r10,-32
 100ee60:	30001b16 	blt	r6,zero,100eed0 <__floatunsidf+0x13c>
 100ee64:	b9a8d83a 	srl	r20,r23,r6
 100ee68:	002b883a 	mov	r21,zero
 100ee6c:	000f883a 	mov	r7,zero
 100ee70:	01000044 	movi	r4,1
 100ee74:	0011883a 	mov	r8,zero
 100ee78:	30002516 	blt	r6,zero,100ef10 <__floatunsidf+0x17c>
 100ee7c:	21a6983a 	sll	r19,r4,r6
 100ee80:	0025883a 	mov	r18,zero
 100ee84:	00bfffc4 	movi	r2,-1
 100ee88:	9089883a 	add	r4,r18,r2
 100ee8c:	988b883a 	add	r5,r19,r2
 100ee90:	248d803a 	cmpltu	r6,r4,r18
 100ee94:	314b883a 	add	r5,r6,r5
 100ee98:	b104703a 	and	r2,r22,r4
 100ee9c:	b946703a 	and	r3,r23,r5
 100eea0:	10c4b03a 	or	r2,r2,r3
 100eea4:	10000226 	beq	r2,zero,100eeb0 <__floatunsidf+0x11c>
 100eea8:	01c00044 	movi	r7,1
 100eeac:	0011883a 	mov	r8,zero
 100eeb0:	d9000217 	ldw	r4,8(sp)
 100eeb4:	a1c4b03a 	or	r2,r20,r7
 100eeb8:	aa06b03a 	or	r3,r21,r8
 100eebc:	2249c83a 	sub	r4,r4,r9
 100eec0:	d8c00415 	stw	r3,16(sp)
 100eec4:	d9000215 	stw	r4,8(sp)
 100eec8:	d8800315 	stw	r2,12(sp)
 100eecc:	003fbf06 	br	100edcc <__floatunsidf+0x38>
 100eed0:	bdc7883a 	add	r3,r23,r23
 100eed4:	008007c4 	movi	r2,31
 100eed8:	1285c83a 	sub	r2,r2,r10
 100eedc:	1886983a 	sll	r3,r3,r2
 100eee0:	b2a8d83a 	srl	r20,r22,r10
 100eee4:	baaad83a 	srl	r21,r23,r10
 100eee8:	1d28b03a 	or	r20,r3,r20
 100eeec:	003fdf06 	br	100ee6c <__floatunsidf+0xd8>
 100eef0:	b006d07a 	srli	r3,r22,1
 100eef4:	008007c4 	movi	r2,31
 100eef8:	1245c83a 	sub	r2,r2,r9
 100eefc:	1886d83a 	srl	r3,r3,r2
 100ef00:	ba62983a 	sll	r17,r23,r9
 100ef04:	b260983a 	sll	r16,r22,r9
 100ef08:	1c62b03a 	or	r17,r3,r17
 100ef0c:	003fcc06 	br	100ee40 <__floatunsidf+0xac>
 100ef10:	2006d07a 	srli	r3,r4,1
 100ef14:	008007c4 	movi	r2,31
 100ef18:	1285c83a 	sub	r2,r2,r10
 100ef1c:	18a6d83a 	srl	r19,r3,r2
 100ef20:	22a4983a 	sll	r18,r4,r10
 100ef24:	003fd706 	br	100ee84 <__floatunsidf+0xf0>

0100ef28 <udivmodsi4>:
 100ef28:	29001b2e 	bgeu	r5,r4,100ef98 <udivmodsi4+0x70>
 100ef2c:	28001a16 	blt	r5,zero,100ef98 <udivmodsi4+0x70>
 100ef30:	00800044 	movi	r2,1
 100ef34:	0007883a 	mov	r3,zero
 100ef38:	01c007c4 	movi	r7,31
 100ef3c:	00000306 	br	100ef4c <udivmodsi4+0x24>
 100ef40:	19c01326 	beq	r3,r7,100ef90 <udivmodsi4+0x68>
 100ef44:	18c00044 	addi	r3,r3,1
 100ef48:	28000416 	blt	r5,zero,100ef5c <udivmodsi4+0x34>
 100ef4c:	294b883a 	add	r5,r5,r5
 100ef50:	1085883a 	add	r2,r2,r2
 100ef54:	293ffa36 	bltu	r5,r4,100ef40 <udivmodsi4+0x18>
 100ef58:	10000d26 	beq	r2,zero,100ef90 <udivmodsi4+0x68>
 100ef5c:	0007883a 	mov	r3,zero
 100ef60:	21400236 	bltu	r4,r5,100ef6c <udivmodsi4+0x44>
 100ef64:	2149c83a 	sub	r4,r4,r5
 100ef68:	1886b03a 	or	r3,r3,r2
 100ef6c:	1004d07a 	srli	r2,r2,1
 100ef70:	280ad07a 	srli	r5,r5,1
 100ef74:	103ffa1e 	bne	r2,zero,100ef60 <udivmodsi4+0x38>
 100ef78:	30000226 	beq	r6,zero,100ef84 <udivmodsi4+0x5c>
 100ef7c:	2005883a 	mov	r2,r4
 100ef80:	f800283a 	ret
 100ef84:	1809883a 	mov	r4,r3
 100ef88:	2005883a 	mov	r2,r4
 100ef8c:	f800283a 	ret
 100ef90:	0007883a 	mov	r3,zero
 100ef94:	003ff806 	br	100ef78 <udivmodsi4+0x50>
 100ef98:	00800044 	movi	r2,1
 100ef9c:	0007883a 	mov	r3,zero
 100efa0:	003fef06 	br	100ef60 <udivmodsi4+0x38>

0100efa4 <__divsi3>:
 100efa4:	defffe04 	addi	sp,sp,-8
 100efa8:	dc000015 	stw	r16,0(sp)
 100efac:	dfc00115 	stw	ra,4(sp)
 100efb0:	0021883a 	mov	r16,zero
 100efb4:	20000c16 	blt	r4,zero,100efe8 <__divsi3+0x44>
 100efb8:	000d883a 	mov	r6,zero
 100efbc:	28000e16 	blt	r5,zero,100eff8 <__divsi3+0x54>
 100efc0:	100ef280 	call	100ef28 <udivmodsi4>
 100efc4:	1007883a 	mov	r3,r2
 100efc8:	8005003a 	cmpeq	r2,r16,zero
 100efcc:	1000011e 	bne	r2,zero,100efd4 <__divsi3+0x30>
 100efd0:	00c7c83a 	sub	r3,zero,r3
 100efd4:	1805883a 	mov	r2,r3
 100efd8:	dfc00117 	ldw	ra,4(sp)
 100efdc:	dc000017 	ldw	r16,0(sp)
 100efe0:	dec00204 	addi	sp,sp,8
 100efe4:	f800283a 	ret
 100efe8:	0109c83a 	sub	r4,zero,r4
 100efec:	04000044 	movi	r16,1
 100eff0:	000d883a 	mov	r6,zero
 100eff4:	283ff20e 	bge	r5,zero,100efc0 <__divsi3+0x1c>
 100eff8:	014bc83a 	sub	r5,zero,r5
 100effc:	8021003a 	cmpeq	r16,r16,zero
 100f000:	003fef06 	br	100efc0 <__divsi3+0x1c>

0100f004 <__modsi3>:
 100f004:	deffff04 	addi	sp,sp,-4
 100f008:	dfc00015 	stw	ra,0(sp)
 100f00c:	01800044 	movi	r6,1
 100f010:	2807883a 	mov	r3,r5
 100f014:	20000416 	blt	r4,zero,100f028 <__modsi3+0x24>
 100f018:	28000c16 	blt	r5,zero,100f04c <__modsi3+0x48>
 100f01c:	dfc00017 	ldw	ra,0(sp)
 100f020:	dec00104 	addi	sp,sp,4
 100f024:	100ef281 	jmpi	100ef28 <udivmodsi4>
 100f028:	0109c83a 	sub	r4,zero,r4
 100f02c:	28000b16 	blt	r5,zero,100f05c <__modsi3+0x58>
 100f030:	180b883a 	mov	r5,r3
 100f034:	01800044 	movi	r6,1
 100f038:	100ef280 	call	100ef28 <udivmodsi4>
 100f03c:	0085c83a 	sub	r2,zero,r2
 100f040:	dfc00017 	ldw	ra,0(sp)
 100f044:	dec00104 	addi	sp,sp,4
 100f048:	f800283a 	ret
 100f04c:	014bc83a 	sub	r5,zero,r5
 100f050:	dfc00017 	ldw	ra,0(sp)
 100f054:	dec00104 	addi	sp,sp,4
 100f058:	100ef281 	jmpi	100ef28 <udivmodsi4>
 100f05c:	0147c83a 	sub	r3,zero,r5
 100f060:	003ff306 	br	100f030 <__modsi3+0x2c>

0100f064 <__udivsi3>:
 100f064:	000d883a 	mov	r6,zero
 100f068:	100ef281 	jmpi	100ef28 <udivmodsi4>

0100f06c <__umodsi3>:
 100f06c:	01800044 	movi	r6,1
 100f070:	100ef281 	jmpi	100ef28 <udivmodsi4>

0100f074 <__clzsi2>:
 100f074:	00bfffd4 	movui	r2,65535
 100f078:	11000e36 	bltu	r2,r4,100f0b4 <__clzsi2+0x40>
 100f07c:	00803fc4 	movi	r2,255
 100f080:	01400204 	movi	r5,8
 100f084:	0007883a 	mov	r3,zero
 100f088:	11001036 	bltu	r2,r4,100f0cc <__clzsi2+0x58>
 100f08c:	000b883a 	mov	r5,zero
 100f090:	20c6d83a 	srl	r3,r4,r3
 100f094:	00804074 	movhi	r2,257
 100f098:	108c9104 	addi	r2,r2,12868
 100f09c:	1887883a 	add	r3,r3,r2
 100f0a0:	18800003 	ldbu	r2,0(r3)
 100f0a4:	00c00804 	movi	r3,32
 100f0a8:	2885883a 	add	r2,r5,r2
 100f0ac:	1885c83a 	sub	r2,r3,r2
 100f0b0:	f800283a 	ret
 100f0b4:	01400404 	movi	r5,16
 100f0b8:	00804034 	movhi	r2,256
 100f0bc:	10bfffc4 	addi	r2,r2,-1
 100f0c0:	2807883a 	mov	r3,r5
 100f0c4:	113ff22e 	bgeu	r2,r4,100f090 <__clzsi2+0x1c>
 100f0c8:	01400604 	movi	r5,24
 100f0cc:	2807883a 	mov	r3,r5
 100f0d0:	20c6d83a 	srl	r3,r4,r3
 100f0d4:	00804074 	movhi	r2,257
 100f0d8:	108c9104 	addi	r2,r2,12868
 100f0dc:	1887883a 	add	r3,r3,r2
 100f0e0:	18800003 	ldbu	r2,0(r3)
 100f0e4:	00c00804 	movi	r3,32
 100f0e8:	2885883a 	add	r2,r5,r2
 100f0ec:	1885c83a 	sub	r2,r3,r2
 100f0f0:	f800283a 	ret

0100f0f4 <__unpack_f>:
 100f0f4:	21800017 	ldw	r6,0(r4)
 100f0f8:	00c02034 	movhi	r3,128
 100f0fc:	18ffffc4 	addi	r3,r3,-1
 100f100:	3004d5fa 	srli	r2,r6,23
 100f104:	3008d7fa 	srli	r4,r6,31
 100f108:	30ce703a 	and	r7,r6,r3
 100f10c:	10c03fcc 	andi	r3,r2,255
 100f110:	29000115 	stw	r4,4(r5)
 100f114:	1800131e 	bne	r3,zero,100f164 <__unpack_f+0x70>
 100f118:	38000f26 	beq	r7,zero,100f158 <__unpack_f+0x64>
 100f11c:	380691fa 	slli	r3,r7,7
 100f120:	01bfe084 	movi	r6,-126
 100f124:	008000c4 	movi	r2,3
 100f128:	01100034 	movhi	r4,16384
 100f12c:	213fffc4 	addi	r4,r4,-1
 100f130:	28800015 	stw	r2,0(r5)
 100f134:	29800215 	stw	r6,8(r5)
 100f138:	20c00536 	bltu	r4,r3,100f150 <__unpack_f+0x5c>
 100f13c:	3005883a 	mov	r2,r6
 100f140:	18c7883a 	add	r3,r3,r3
 100f144:	10bfffc4 	addi	r2,r2,-1
 100f148:	20fffd2e 	bgeu	r4,r3,100f140 <__unpack_f+0x4c>
 100f14c:	28800215 	stw	r2,8(r5)
 100f150:	28c00315 	stw	r3,12(r5)
 100f154:	f800283a 	ret
 100f158:	00800084 	movi	r2,2
 100f15c:	28800015 	stw	r2,0(r5)
 100f160:	f800283a 	ret
 100f164:	00803fc4 	movi	r2,255
 100f168:	18800826 	beq	r3,r2,100f18c <__unpack_f+0x98>
 100f16c:	380491fa 	slli	r2,r7,7
 100f170:	18ffe044 	addi	r3,r3,-127
 100f174:	28c00215 	stw	r3,8(r5)
 100f178:	10900034 	orhi	r2,r2,16384
 100f17c:	28800315 	stw	r2,12(r5)
 100f180:	008000c4 	movi	r2,3
 100f184:	28800015 	stw	r2,0(r5)
 100f188:	f800283a 	ret
 100f18c:	3800031e 	bne	r7,zero,100f19c <__unpack_f+0xa8>
 100f190:	00800104 	movi	r2,4
 100f194:	28800015 	stw	r2,0(r5)
 100f198:	f800283a 	ret
 100f19c:	3080042c 	andhi	r2,r6,16
 100f1a0:	10000426 	beq	r2,zero,100f1b4 <__unpack_f+0xc0>
 100f1a4:	00800044 	movi	r2,1
 100f1a8:	28800015 	stw	r2,0(r5)
 100f1ac:	29c00315 	stw	r7,12(r5)
 100f1b0:	f800283a 	ret
 100f1b4:	28000015 	stw	zero,0(r5)
 100f1b8:	003ffc06 	br	100f1ac <__unpack_f+0xb8>

0100f1bc <__fpcmp_parts_f>:
 100f1bc:	21800017 	ldw	r6,0(r4)
 100f1c0:	00c00044 	movi	r3,1
 100f1c4:	19800a2e 	bgeu	r3,r6,100f1f0 <__fpcmp_parts_f+0x34>
 100f1c8:	28800017 	ldw	r2,0(r5)
 100f1cc:	1880082e 	bgeu	r3,r2,100f1f0 <__fpcmp_parts_f+0x34>
 100f1d0:	00c00104 	movi	r3,4
 100f1d4:	30c01e26 	beq	r6,r3,100f250 <__fpcmp_parts_f+0x94>
 100f1d8:	10c01a26 	beq	r2,r3,100f244 <__fpcmp_parts_f+0x88>
 100f1dc:	00c00084 	movi	r3,2
 100f1e0:	30c00526 	beq	r6,r3,100f1f8 <__fpcmp_parts_f+0x3c>
 100f1e4:	10c0071e 	bne	r2,r3,100f204 <__fpcmp_parts_f+0x48>
 100f1e8:	20800117 	ldw	r2,4(r4)
 100f1ec:	1000091e 	bne	r2,zero,100f214 <__fpcmp_parts_f+0x58>
 100f1f0:	00800044 	movi	r2,1
 100f1f4:	f800283a 	ret
 100f1f8:	10c0121e 	bne	r2,r3,100f244 <__fpcmp_parts_f+0x88>
 100f1fc:	0005883a 	mov	r2,zero
 100f200:	f800283a 	ret
 100f204:	20c00117 	ldw	r3,4(r4)
 100f208:	28800117 	ldw	r2,4(r5)
 100f20c:	18800326 	beq	r3,r2,100f21c <__fpcmp_parts_f+0x60>
 100f210:	183ff726 	beq	r3,zero,100f1f0 <__fpcmp_parts_f+0x34>
 100f214:	00bfffc4 	movi	r2,-1
 100f218:	f800283a 	ret
 100f21c:	21800217 	ldw	r6,8(r4)
 100f220:	28800217 	ldw	r2,8(r5)
 100f224:	11bffa16 	blt	r2,r6,100f210 <__fpcmp_parts_f+0x54>
 100f228:	30800416 	blt	r6,r2,100f23c <__fpcmp_parts_f+0x80>
 100f22c:	21000317 	ldw	r4,12(r4)
 100f230:	29400317 	ldw	r5,12(r5)
 100f234:	293ff636 	bltu	r5,r4,100f210 <__fpcmp_parts_f+0x54>
 100f238:	217ff02e 	bgeu	r4,r5,100f1fc <__fpcmp_parts_f+0x40>
 100f23c:	183fec1e 	bne	r3,zero,100f1f0 <__fpcmp_parts_f+0x34>
 100f240:	003ff406 	br	100f214 <__fpcmp_parts_f+0x58>
 100f244:	28800117 	ldw	r2,4(r5)
 100f248:	103fe91e 	bne	r2,zero,100f1f0 <__fpcmp_parts_f+0x34>
 100f24c:	003ff106 	br	100f214 <__fpcmp_parts_f+0x58>
 100f250:	11bfe51e 	bne	r2,r6,100f1e8 <__fpcmp_parts_f+0x2c>
 100f254:	28c00117 	ldw	r3,4(r5)
 100f258:	20800117 	ldw	r2,4(r4)
 100f25c:	1885c83a 	sub	r2,r3,r2
 100f260:	f800283a 	ret

0100f264 <__make_fp>:
 100f264:	defffb04 	addi	sp,sp,-20
 100f268:	d9000015 	stw	r4,0(sp)
 100f26c:	d809883a 	mov	r4,sp
 100f270:	dfc00415 	stw	ra,16(sp)
 100f274:	d9400115 	stw	r5,4(sp)
 100f278:	d9800215 	stw	r6,8(sp)
 100f27c:	d9c00315 	stw	r7,12(sp)
 100f280:	100f7a40 	call	100f7a4 <__pack_f>
 100f284:	dfc00417 	ldw	ra,16(sp)
 100f288:	dec00504 	addi	sp,sp,20
 100f28c:	f800283a 	ret

0100f290 <__pack_d>:
 100f290:	20c00017 	ldw	r3,0(r4)
 100f294:	defffd04 	addi	sp,sp,-12
 100f298:	dc000015 	stw	r16,0(sp)
 100f29c:	dc800215 	stw	r18,8(sp)
 100f2a0:	dc400115 	stw	r17,4(sp)
 100f2a4:	00800044 	movi	r2,1
 100f2a8:	22000317 	ldw	r8,12(r4)
 100f2ac:	001f883a 	mov	r15,zero
 100f2b0:	22400417 	ldw	r9,16(r4)
 100f2b4:	24000117 	ldw	r16,4(r4)
 100f2b8:	10c0552e 	bgeu	r2,r3,100f410 <__pack_d+0x180>
 100f2bc:	00800104 	movi	r2,4
 100f2c0:	18804f26 	beq	r3,r2,100f400 <__pack_d+0x170>
 100f2c4:	00800084 	movi	r2,2
 100f2c8:	18800226 	beq	r3,r2,100f2d4 <__pack_d+0x44>
 100f2cc:	4244b03a 	or	r2,r8,r9
 100f2d0:	10001a1e 	bne	r2,zero,100f33c <__pack_d+0xac>
 100f2d4:	000d883a 	mov	r6,zero
 100f2d8:	000f883a 	mov	r7,zero
 100f2dc:	0011883a 	mov	r8,zero
 100f2e0:	00800434 	movhi	r2,16
 100f2e4:	10bfffc4 	addi	r2,r2,-1
 100f2e8:	301d883a 	mov	r14,r6
 100f2ec:	3884703a 	and	r2,r7,r2
 100f2f0:	400a953a 	slli	r5,r8,20
 100f2f4:	79bffc2c 	andhi	r6,r15,65520
 100f2f8:	308cb03a 	or	r6,r6,r2
 100f2fc:	00e00434 	movhi	r3,32784
 100f300:	18ffffc4 	addi	r3,r3,-1
 100f304:	800497fa 	slli	r2,r16,31
 100f308:	30c6703a 	and	r3,r6,r3
 100f30c:	1946b03a 	or	r3,r3,r5
 100f310:	01600034 	movhi	r5,32768
 100f314:	297fffc4 	addi	r5,r5,-1
 100f318:	194a703a 	and	r5,r3,r5
 100f31c:	288ab03a 	or	r5,r5,r2
 100f320:	2807883a 	mov	r3,r5
 100f324:	7005883a 	mov	r2,r14
 100f328:	dc800217 	ldw	r18,8(sp)
 100f32c:	dc400117 	ldw	r17,4(sp)
 100f330:	dc000017 	ldw	r16,0(sp)
 100f334:	dec00304 	addi	sp,sp,12
 100f338:	f800283a 	ret
 100f33c:	21000217 	ldw	r4,8(r4)
 100f340:	00bf0084 	movi	r2,-1022
 100f344:	20803f16 	blt	r4,r2,100f444 <__pack_d+0x1b4>
 100f348:	0080ffc4 	movi	r2,1023
 100f34c:	11002c16 	blt	r2,r4,100f400 <__pack_d+0x170>
 100f350:	00803fc4 	movi	r2,255
 100f354:	408c703a 	and	r6,r8,r2
 100f358:	00802004 	movi	r2,128
 100f35c:	0007883a 	mov	r3,zero
 100f360:	000f883a 	mov	r7,zero
 100f364:	2280ffc4 	addi	r10,r4,1023
 100f368:	30801e26 	beq	r6,r2,100f3e4 <__pack_d+0x154>
 100f36c:	00801fc4 	movi	r2,127
 100f370:	4089883a 	add	r4,r8,r2
 100f374:	220d803a 	cmpltu	r6,r4,r8
 100f378:	324d883a 	add	r6,r6,r9
 100f37c:	2011883a 	mov	r8,r4
 100f380:	3013883a 	mov	r9,r6
 100f384:	00880034 	movhi	r2,8192
 100f388:	10bfffc4 	addi	r2,r2,-1
 100f38c:	12400d36 	bltu	r2,r9,100f3c4 <__pack_d+0x134>
 100f390:	4804963a 	slli	r2,r9,24
 100f394:	400cd23a 	srli	r6,r8,8
 100f398:	480ed23a 	srli	r7,r9,8
 100f39c:	013fffc4 	movi	r4,-1
 100f3a0:	118cb03a 	or	r6,r2,r6
 100f3a4:	01400434 	movhi	r5,16
 100f3a8:	297fffc4 	addi	r5,r5,-1
 100f3ac:	3104703a 	and	r2,r6,r4
 100f3b0:	3946703a 	and	r3,r7,r5
 100f3b4:	5201ffcc 	andi	r8,r10,2047
 100f3b8:	100d883a 	mov	r6,r2
 100f3bc:	180f883a 	mov	r7,r3
 100f3c0:	003fc706 	br	100f2e0 <__pack_d+0x50>
 100f3c4:	480897fa 	slli	r4,r9,31
 100f3c8:	4004d07a 	srli	r2,r8,1
 100f3cc:	4806d07a 	srli	r3,r9,1
 100f3d0:	52800044 	addi	r10,r10,1
 100f3d4:	2084b03a 	or	r2,r4,r2
 100f3d8:	1011883a 	mov	r8,r2
 100f3dc:	1813883a 	mov	r9,r3
 100f3e0:	003feb06 	br	100f390 <__pack_d+0x100>
 100f3e4:	383fe11e 	bne	r7,zero,100f36c <__pack_d+0xdc>
 100f3e8:	01004004 	movi	r4,256
 100f3ec:	4104703a 	and	r2,r8,r4
 100f3f0:	10c4b03a 	or	r2,r2,r3
 100f3f4:	103fe326 	beq	r2,zero,100f384 <__pack_d+0xf4>
 100f3f8:	3005883a 	mov	r2,r6
 100f3fc:	003fdc06 	br	100f370 <__pack_d+0xe0>
 100f400:	000d883a 	mov	r6,zero
 100f404:	000f883a 	mov	r7,zero
 100f408:	0201ffc4 	movi	r8,2047
 100f40c:	003fb406 	br	100f2e0 <__pack_d+0x50>
 100f410:	0005883a 	mov	r2,zero
 100f414:	00c00234 	movhi	r3,8
 100f418:	408cb03a 	or	r6,r8,r2
 100f41c:	48ceb03a 	or	r7,r9,r3
 100f420:	013fffc4 	movi	r4,-1
 100f424:	01400434 	movhi	r5,16
 100f428:	297fffc4 	addi	r5,r5,-1
 100f42c:	3104703a 	and	r2,r6,r4
 100f430:	3946703a 	and	r3,r7,r5
 100f434:	100d883a 	mov	r6,r2
 100f438:	180f883a 	mov	r7,r3
 100f43c:	0201ffc4 	movi	r8,2047
 100f440:	003fa706 	br	100f2e0 <__pack_d+0x50>
 100f444:	1109c83a 	sub	r4,r2,r4
 100f448:	00800e04 	movi	r2,56
 100f44c:	11004316 	blt	r2,r4,100f55c <__pack_d+0x2cc>
 100f450:	21fff804 	addi	r7,r4,-32
 100f454:	38004516 	blt	r7,zero,100f56c <__pack_d+0x2dc>
 100f458:	49d8d83a 	srl	r12,r9,r7
 100f45c:	001b883a 	mov	r13,zero
 100f460:	0023883a 	mov	r17,zero
 100f464:	01400044 	movi	r5,1
 100f468:	0025883a 	mov	r18,zero
 100f46c:	38004716 	blt	r7,zero,100f58c <__pack_d+0x2fc>
 100f470:	29d6983a 	sll	r11,r5,r7
 100f474:	0015883a 	mov	r10,zero
 100f478:	00bfffc4 	movi	r2,-1
 100f47c:	5089883a 	add	r4,r10,r2
 100f480:	588b883a 	add	r5,r11,r2
 100f484:	228d803a 	cmpltu	r6,r4,r10
 100f488:	314b883a 	add	r5,r6,r5
 100f48c:	4104703a 	and	r2,r8,r4
 100f490:	4946703a 	and	r3,r9,r5
 100f494:	10c4b03a 	or	r2,r2,r3
 100f498:	10000226 	beq	r2,zero,100f4a4 <__pack_d+0x214>
 100f49c:	04400044 	movi	r17,1
 100f4a0:	0025883a 	mov	r18,zero
 100f4a4:	00803fc4 	movi	r2,255
 100f4a8:	644eb03a 	or	r7,r12,r17
 100f4ac:	3892703a 	and	r9,r7,r2
 100f4b0:	00802004 	movi	r2,128
 100f4b4:	6c90b03a 	or	r8,r13,r18
 100f4b8:	0015883a 	mov	r10,zero
 100f4bc:	48801626 	beq	r9,r2,100f518 <__pack_d+0x288>
 100f4c0:	01001fc4 	movi	r4,127
 100f4c4:	3905883a 	add	r2,r7,r4
 100f4c8:	11cd803a 	cmpltu	r6,r2,r7
 100f4cc:	320d883a 	add	r6,r6,r8
 100f4d0:	100f883a 	mov	r7,r2
 100f4d4:	00840034 	movhi	r2,4096
 100f4d8:	10bfffc4 	addi	r2,r2,-1
 100f4dc:	3011883a 	mov	r8,r6
 100f4e0:	0007883a 	mov	r3,zero
 100f4e4:	11801b36 	bltu	r2,r6,100f554 <__pack_d+0x2c4>
 100f4e8:	4004963a 	slli	r2,r8,24
 100f4ec:	3808d23a 	srli	r4,r7,8
 100f4f0:	400ad23a 	srli	r5,r8,8
 100f4f4:	1813883a 	mov	r9,r3
 100f4f8:	1108b03a 	or	r4,r2,r4
 100f4fc:	00bfffc4 	movi	r2,-1
 100f500:	00c00434 	movhi	r3,16
 100f504:	18ffffc4 	addi	r3,r3,-1
 100f508:	208c703a 	and	r6,r4,r2
 100f50c:	28ce703a 	and	r7,r5,r3
 100f510:	4a01ffcc 	andi	r8,r9,2047
 100f514:	003f7206 	br	100f2e0 <__pack_d+0x50>
 100f518:	503fe91e 	bne	r10,zero,100f4c0 <__pack_d+0x230>
 100f51c:	01004004 	movi	r4,256
 100f520:	3904703a 	and	r2,r7,r4
 100f524:	0007883a 	mov	r3,zero
 100f528:	10c4b03a 	or	r2,r2,r3
 100f52c:	10000626 	beq	r2,zero,100f548 <__pack_d+0x2b8>
 100f530:	3a45883a 	add	r2,r7,r9
 100f534:	11cd803a 	cmpltu	r6,r2,r7
 100f538:	320d883a 	add	r6,r6,r8
 100f53c:	100f883a 	mov	r7,r2
 100f540:	3011883a 	mov	r8,r6
 100f544:	0007883a 	mov	r3,zero
 100f548:	00840034 	movhi	r2,4096
 100f54c:	10bfffc4 	addi	r2,r2,-1
 100f550:	123fe52e 	bgeu	r2,r8,100f4e8 <__pack_d+0x258>
 100f554:	00c00044 	movi	r3,1
 100f558:	003fe306 	br	100f4e8 <__pack_d+0x258>
 100f55c:	0009883a 	mov	r4,zero
 100f560:	0013883a 	mov	r9,zero
 100f564:	000b883a 	mov	r5,zero
 100f568:	003fe406 	br	100f4fc <__pack_d+0x26c>
 100f56c:	4a47883a 	add	r3,r9,r9
 100f570:	008007c4 	movi	r2,31
 100f574:	1105c83a 	sub	r2,r2,r4
 100f578:	1886983a 	sll	r3,r3,r2
 100f57c:	4118d83a 	srl	r12,r8,r4
 100f580:	491ad83a 	srl	r13,r9,r4
 100f584:	1b18b03a 	or	r12,r3,r12
 100f588:	003fb506 	br	100f460 <__pack_d+0x1d0>
 100f58c:	2806d07a 	srli	r3,r5,1
 100f590:	008007c4 	movi	r2,31
 100f594:	1105c83a 	sub	r2,r2,r4
 100f598:	1896d83a 	srl	r11,r3,r2
 100f59c:	2914983a 	sll	r10,r5,r4
 100f5a0:	003fb506 	br	100f478 <__pack_d+0x1e8>

0100f5a4 <__unpack_d>:
 100f5a4:	20c00117 	ldw	r3,4(r4)
 100f5a8:	22400017 	ldw	r9,0(r4)
 100f5ac:	00800434 	movhi	r2,16
 100f5b0:	10bfffc4 	addi	r2,r2,-1
 100f5b4:	1808d53a 	srli	r4,r3,20
 100f5b8:	180cd7fa 	srli	r6,r3,31
 100f5bc:	1894703a 	and	r10,r3,r2
 100f5c0:	2201ffcc 	andi	r8,r4,2047
 100f5c4:	281b883a 	mov	r13,r5
 100f5c8:	4817883a 	mov	r11,r9
 100f5cc:	29800115 	stw	r6,4(r5)
 100f5d0:	5019883a 	mov	r12,r10
 100f5d4:	40001e1e 	bne	r8,zero,100f650 <__unpack_d+0xac>
 100f5d8:	4a84b03a 	or	r2,r9,r10
 100f5dc:	10001926 	beq	r2,zero,100f644 <__unpack_d+0xa0>
 100f5e0:	4804d63a 	srli	r2,r9,24
 100f5e4:	500c923a 	slli	r6,r10,8
 100f5e8:	013f0084 	movi	r4,-1022
 100f5ec:	00c40034 	movhi	r3,4096
 100f5f0:	18ffffc4 	addi	r3,r3,-1
 100f5f4:	118cb03a 	or	r6,r2,r6
 100f5f8:	008000c4 	movi	r2,3
 100f5fc:	480a923a 	slli	r5,r9,8
 100f600:	68800015 	stw	r2,0(r13)
 100f604:	69000215 	stw	r4,8(r13)
 100f608:	19800b36 	bltu	r3,r6,100f638 <__unpack_d+0x94>
 100f60c:	200f883a 	mov	r7,r4
 100f610:	1811883a 	mov	r8,r3
 100f614:	2945883a 	add	r2,r5,r5
 100f618:	1149803a 	cmpltu	r4,r2,r5
 100f61c:	3187883a 	add	r3,r6,r6
 100f620:	20c9883a 	add	r4,r4,r3
 100f624:	100b883a 	mov	r5,r2
 100f628:	200d883a 	mov	r6,r4
 100f62c:	39ffffc4 	addi	r7,r7,-1
 100f630:	413ff82e 	bgeu	r8,r4,100f614 <__unpack_d+0x70>
 100f634:	69c00215 	stw	r7,8(r13)
 100f638:	69800415 	stw	r6,16(r13)
 100f63c:	69400315 	stw	r5,12(r13)
 100f640:	f800283a 	ret
 100f644:	00800084 	movi	r2,2
 100f648:	28800015 	stw	r2,0(r5)
 100f64c:	f800283a 	ret
 100f650:	0081ffc4 	movi	r2,2047
 100f654:	40800f26 	beq	r8,r2,100f694 <__unpack_d+0xf0>
 100f658:	480cd63a 	srli	r6,r9,24
 100f65c:	5006923a 	slli	r3,r10,8
 100f660:	4804923a 	slli	r2,r9,8
 100f664:	0009883a 	mov	r4,zero
 100f668:	30c6b03a 	or	r3,r6,r3
 100f66c:	01440034 	movhi	r5,4096
 100f670:	110cb03a 	or	r6,r2,r4
 100f674:	423f0044 	addi	r8,r8,-1023
 100f678:	194eb03a 	or	r7,r3,r5
 100f67c:	008000c4 	movi	r2,3
 100f680:	69c00415 	stw	r7,16(r13)
 100f684:	6a000215 	stw	r8,8(r13)
 100f688:	68800015 	stw	r2,0(r13)
 100f68c:	69800315 	stw	r6,12(r13)
 100f690:	f800283a 	ret
 100f694:	4a84b03a 	or	r2,r9,r10
 100f698:	1000031e 	bne	r2,zero,100f6a8 <__unpack_d+0x104>
 100f69c:	00800104 	movi	r2,4
 100f6a0:	28800015 	stw	r2,0(r5)
 100f6a4:	f800283a 	ret
 100f6a8:	0009883a 	mov	r4,zero
 100f6ac:	01400234 	movhi	r5,8
 100f6b0:	4904703a 	and	r2,r9,r4
 100f6b4:	5146703a 	and	r3,r10,r5
 100f6b8:	10c4b03a 	or	r2,r2,r3
 100f6bc:	10000526 	beq	r2,zero,100f6d4 <__unpack_d+0x130>
 100f6c0:	00800044 	movi	r2,1
 100f6c4:	68800015 	stw	r2,0(r13)
 100f6c8:	6b000415 	stw	r12,16(r13)
 100f6cc:	6ac00315 	stw	r11,12(r13)
 100f6d0:	f800283a 	ret
 100f6d4:	68000015 	stw	zero,0(r13)
 100f6d8:	003ffb06 	br	100f6c8 <__unpack_d+0x124>

0100f6dc <__fpcmp_parts_d>:
 100f6dc:	21800017 	ldw	r6,0(r4)
 100f6e0:	00c00044 	movi	r3,1
 100f6e4:	19800a2e 	bgeu	r3,r6,100f710 <__fpcmp_parts_d+0x34>
 100f6e8:	28800017 	ldw	r2,0(r5)
 100f6ec:	1880082e 	bgeu	r3,r2,100f710 <__fpcmp_parts_d+0x34>
 100f6f0:	00c00104 	movi	r3,4
 100f6f4:	30c02626 	beq	r6,r3,100f790 <__fpcmp_parts_d+0xb4>
 100f6f8:	10c02226 	beq	r2,r3,100f784 <__fpcmp_parts_d+0xa8>
 100f6fc:	00c00084 	movi	r3,2
 100f700:	30c00526 	beq	r6,r3,100f718 <__fpcmp_parts_d+0x3c>
 100f704:	10c0071e 	bne	r2,r3,100f724 <__fpcmp_parts_d+0x48>
 100f708:	20800117 	ldw	r2,4(r4)
 100f70c:	1000091e 	bne	r2,zero,100f734 <__fpcmp_parts_d+0x58>
 100f710:	00800044 	movi	r2,1
 100f714:	f800283a 	ret
 100f718:	10c01a1e 	bne	r2,r3,100f784 <__fpcmp_parts_d+0xa8>
 100f71c:	0005883a 	mov	r2,zero
 100f720:	f800283a 	ret
 100f724:	22000117 	ldw	r8,4(r4)
 100f728:	28800117 	ldw	r2,4(r5)
 100f72c:	40800326 	beq	r8,r2,100f73c <__fpcmp_parts_d+0x60>
 100f730:	403ff726 	beq	r8,zero,100f710 <__fpcmp_parts_d+0x34>
 100f734:	00bfffc4 	movi	r2,-1
 100f738:	f800283a 	ret
 100f73c:	20c00217 	ldw	r3,8(r4)
 100f740:	28800217 	ldw	r2,8(r5)
 100f744:	10fffa16 	blt	r2,r3,100f730 <__fpcmp_parts_d+0x54>
 100f748:	18800916 	blt	r3,r2,100f770 <__fpcmp_parts_d+0x94>
 100f74c:	21c00417 	ldw	r7,16(r4)
 100f750:	28c00417 	ldw	r3,16(r5)
 100f754:	21800317 	ldw	r6,12(r4)
 100f758:	28800317 	ldw	r2,12(r5)
 100f75c:	19fff436 	bltu	r3,r7,100f730 <__fpcmp_parts_d+0x54>
 100f760:	38c00526 	beq	r7,r3,100f778 <__fpcmp_parts_d+0x9c>
 100f764:	38c00236 	bltu	r7,r3,100f770 <__fpcmp_parts_d+0x94>
 100f768:	19ffec1e 	bne	r3,r7,100f71c <__fpcmp_parts_d+0x40>
 100f76c:	30bfeb2e 	bgeu	r6,r2,100f71c <__fpcmp_parts_d+0x40>
 100f770:	403fe71e 	bne	r8,zero,100f710 <__fpcmp_parts_d+0x34>
 100f774:	003fef06 	br	100f734 <__fpcmp_parts_d+0x58>
 100f778:	11bffa2e 	bgeu	r2,r6,100f764 <__fpcmp_parts_d+0x88>
 100f77c:	403fe426 	beq	r8,zero,100f710 <__fpcmp_parts_d+0x34>
 100f780:	003fec06 	br	100f734 <__fpcmp_parts_d+0x58>
 100f784:	28800117 	ldw	r2,4(r5)
 100f788:	103fe11e 	bne	r2,zero,100f710 <__fpcmp_parts_d+0x34>
 100f78c:	003fe906 	br	100f734 <__fpcmp_parts_d+0x58>
 100f790:	11bfdd1e 	bne	r2,r6,100f708 <__fpcmp_parts_d+0x2c>
 100f794:	28c00117 	ldw	r3,4(r5)
 100f798:	20800117 	ldw	r2,4(r4)
 100f79c:	1885c83a 	sub	r2,r3,r2
 100f7a0:	f800283a 	ret

0100f7a4 <__pack_f>:
 100f7a4:	20c00017 	ldw	r3,0(r4)
 100f7a8:	01c00044 	movi	r7,1
 100f7ac:	21800317 	ldw	r6,12(r4)
 100f7b0:	21400117 	ldw	r5,4(r4)
 100f7b4:	38c02d2e 	bgeu	r7,r3,100f86c <__pack_f+0xc8>
 100f7b8:	00800104 	movi	r2,4
 100f7bc:	18802826 	beq	r3,r2,100f860 <__pack_f+0xbc>
 100f7c0:	00800084 	movi	r2,2
 100f7c4:	18800126 	beq	r3,r2,100f7cc <__pack_f+0x28>
 100f7c8:	3000101e 	bne	r6,zero,100f80c <__pack_f+0x68>
 100f7cc:	000d883a 	mov	r6,zero
 100f7d0:	0007883a 	mov	r3,zero
 100f7d4:	19003fcc 	andi	r4,r3,255
 100f7d8:	200895fa 	slli	r4,r4,23
 100f7dc:	00c02034 	movhi	r3,128
 100f7e0:	18ffffc4 	addi	r3,r3,-1
 100f7e4:	30c6703a 	and	r3,r6,r3
 100f7e8:	10a0002c 	andhi	r2,r2,32768
 100f7ec:	10c4b03a 	or	r2,r2,r3
 100f7f0:	280a97fa 	slli	r5,r5,31
 100f7f4:	1104b03a 	or	r2,r2,r4
 100f7f8:	00e00034 	movhi	r3,32768
 100f7fc:	18ffffc4 	addi	r3,r3,-1
 100f800:	10c4703a 	and	r2,r2,r3
 100f804:	1144b03a 	or	r2,r2,r5
 100f808:	f800283a 	ret
 100f80c:	21000217 	ldw	r4,8(r4)
 100f810:	00bfe084 	movi	r2,-126
 100f814:	20801b16 	blt	r4,r2,100f884 <__pack_f+0xe0>
 100f818:	00801fc4 	movi	r2,127
 100f81c:	11001016 	blt	r2,r4,100f860 <__pack_f+0xbc>
 100f820:	308e703a 	and	r7,r6,r2
 100f824:	2087883a 	add	r3,r4,r2
 100f828:	00801004 	movi	r2,64
 100f82c:	38800526 	beq	r7,r2,100f844 <__pack_f+0xa0>
 100f830:	31800fc4 	addi	r6,r6,63
 100f834:	30000716 	blt	r6,zero,100f854 <__pack_f+0xb0>
 100f838:	300490ba 	slli	r2,r6,2
 100f83c:	100cd27a 	srli	r6,r2,9
 100f840:	003fe406 	br	100f7d4 <__pack_f+0x30>
 100f844:	3080200c 	andi	r2,r6,128
 100f848:	103ffa26 	beq	r2,zero,100f834 <__pack_f+0x90>
 100f84c:	31cd883a 	add	r6,r6,r7
 100f850:	003ff806 	br	100f834 <__pack_f+0x90>
 100f854:	300cd07a 	srli	r6,r6,1
 100f858:	18c00044 	addi	r3,r3,1
 100f85c:	003ff606 	br	100f838 <__pack_f+0x94>
 100f860:	000d883a 	mov	r6,zero
 100f864:	00ffffc4 	movi	r3,-1
 100f868:	003fda06 	br	100f7d4 <__pack_f+0x30>
 100f86c:	31800434 	orhi	r6,r6,16
 100f870:	00802034 	movhi	r2,128
 100f874:	10bfffc4 	addi	r2,r2,-1
 100f878:	308c703a 	and	r6,r6,r2
 100f87c:	00ffffc4 	movi	r3,-1
 100f880:	003fd406 	br	100f7d4 <__pack_f+0x30>
 100f884:	1109c83a 	sub	r4,r2,r4
 100f888:	00800644 	movi	r2,25
 100f88c:	11001216 	blt	r2,r4,100f8d8 <__pack_f+0x134>
 100f890:	3904983a 	sll	r2,r7,r4
 100f894:	3106d83a 	srl	r3,r6,r4
 100f898:	10bfffc4 	addi	r2,r2,-1
 100f89c:	3084703a 	and	r2,r6,r2
 100f8a0:	1004c03a 	cmpne	r2,r2,zero
 100f8a4:	1886b03a 	or	r3,r3,r2
 100f8a8:	19001fcc 	andi	r4,r3,127
 100f8ac:	00801004 	movi	r2,64
 100f8b0:	20800c26 	beq	r4,r2,100f8e4 <__pack_f+0x140>
 100f8b4:	18c00fc4 	addi	r3,r3,63
 100f8b8:	00900034 	movhi	r2,16384
 100f8bc:	10bfffc4 	addi	r2,r2,-1
 100f8c0:	180cd1fa 	srli	r6,r3,7
 100f8c4:	10c7803a 	cmpltu	r3,r2,r3
 100f8c8:	00802034 	movhi	r2,128
 100f8cc:	10bfffc4 	addi	r2,r2,-1
 100f8d0:	308c703a 	and	r6,r6,r2
 100f8d4:	003fbf06 	br	100f7d4 <__pack_f+0x30>
 100f8d8:	0007883a 	mov	r3,zero
 100f8dc:	000d883a 	mov	r6,zero
 100f8e0:	003ff906 	br	100f8c8 <__pack_f+0x124>
 100f8e4:	1880200c 	andi	r2,r3,128
 100f8e8:	10000126 	beq	r2,zero,100f8f0 <__pack_f+0x14c>
 100f8ec:	1907883a 	add	r3,r3,r4
 100f8f0:	180cd1fa 	srli	r6,r3,7
 100f8f4:	00900034 	movhi	r2,16384
 100f8f8:	10bfffc4 	addi	r2,r2,-1
 100f8fc:	10c7803a 	cmpltu	r3,r2,r3
 100f900:	003ff106 	br	100f8c8 <__pack_f+0x124>

0100f904 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100f904:	defff804 	addi	sp,sp,-32
 100f908:	dfc00715 	stw	ra,28(sp)
 100f90c:	df000615 	stw	fp,24(sp)
 100f910:	df000604 	addi	fp,sp,24
 100f914:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100f918:	e0bffc17 	ldw	r2,-16(fp)
 100f91c:	1004803a 	cmplt	r2,r2,zero
 100f920:	1000081e 	bne	r2,zero,100f944 <close+0x40>
 100f924:	e0bffc17 	ldw	r2,-16(fp)
 100f928:	10800324 	muli	r2,r2,12
 100f92c:	1007883a 	mov	r3,r2
 100f930:	00804074 	movhi	r2,257
 100f934:	108f0104 	addi	r2,r2,15364
 100f938:	1887883a 	add	r3,r3,r2
 100f93c:	e0ffff15 	stw	r3,-4(fp)
 100f940:	00000106 	br	100f948 <close+0x44>
 100f944:	e03fff15 	stw	zero,-4(fp)
 100f948:	e0bfff17 	ldw	r2,-4(fp)
 100f94c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 100f950:	e0bffb17 	ldw	r2,-20(fp)
 100f954:	1005003a 	cmpeq	r2,r2,zero
 100f958:	10001d1e 	bne	r2,zero,100f9d0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100f95c:	e0bffb17 	ldw	r2,-20(fp)
 100f960:	10800017 	ldw	r2,0(r2)
 100f964:	10800417 	ldw	r2,16(r2)
 100f968:	1005003a 	cmpeq	r2,r2,zero
 100f96c:	1000071e 	bne	r2,zero,100f98c <close+0x88>
 100f970:	e0bffb17 	ldw	r2,-20(fp)
 100f974:	10800017 	ldw	r2,0(r2)
 100f978:	10800417 	ldw	r2,16(r2)
 100f97c:	e13ffb17 	ldw	r4,-20(fp)
 100f980:	103ee83a 	callr	r2
 100f984:	e0bffe15 	stw	r2,-8(fp)
 100f988:	00000106 	br	100f990 <close+0x8c>
 100f98c:	e03ffe15 	stw	zero,-8(fp)
 100f990:	e0bffe17 	ldw	r2,-8(fp)
 100f994:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100f998:	e13ffc17 	ldw	r4,-16(fp)
 100f99c:	10101480 	call	1010148 <alt_release_fd>
    if (rval < 0)
 100f9a0:	e0bffa17 	ldw	r2,-24(fp)
 100f9a4:	1004403a 	cmpge	r2,r2,zero
 100f9a8:	1000071e 	bne	r2,zero,100f9c8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 100f9ac:	100fa000 	call	100fa00 <alt_get_errno>
 100f9b0:	e0fffa17 	ldw	r3,-24(fp)
 100f9b4:	00c7c83a 	sub	r3,zero,r3
 100f9b8:	10c00015 	stw	r3,0(r2)
      return -1;
 100f9bc:	00bfffc4 	movi	r2,-1
 100f9c0:	e0bffd15 	stw	r2,-12(fp)
 100f9c4:	00000806 	br	100f9e8 <close+0xe4>
    }
    return 0;
 100f9c8:	e03ffd15 	stw	zero,-12(fp)
 100f9cc:	00000606 	br	100f9e8 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100f9d0:	100fa000 	call	100fa00 <alt_get_errno>
 100f9d4:	1007883a 	mov	r3,r2
 100f9d8:	00801444 	movi	r2,81
 100f9dc:	18800015 	stw	r2,0(r3)
    return -1;
 100f9e0:	00bfffc4 	movi	r2,-1
 100f9e4:	e0bffd15 	stw	r2,-12(fp)
 100f9e8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 100f9ec:	e037883a 	mov	sp,fp
 100f9f0:	dfc00117 	ldw	ra,4(sp)
 100f9f4:	df000017 	ldw	fp,0(sp)
 100f9f8:	dec00204 	addi	sp,sp,8
 100f9fc:	f800283a 	ret

0100fa00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100fa00:	defffd04 	addi	sp,sp,-12
 100fa04:	dfc00215 	stw	ra,8(sp)
 100fa08:	df000115 	stw	fp,4(sp)
 100fa0c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100fa10:	00804074 	movhi	r2,257
 100fa14:	10939b04 	addi	r2,r2,20076
 100fa18:	10800017 	ldw	r2,0(r2)
 100fa1c:	1005003a 	cmpeq	r2,r2,zero
 100fa20:	1000061e 	bne	r2,zero,100fa3c <alt_get_errno+0x3c>
 100fa24:	00804074 	movhi	r2,257
 100fa28:	10939b04 	addi	r2,r2,20076
 100fa2c:	10800017 	ldw	r2,0(r2)
 100fa30:	103ee83a 	callr	r2
 100fa34:	e0bfff15 	stw	r2,-4(fp)
 100fa38:	00000306 	br	100fa48 <alt_get_errno+0x48>
 100fa3c:	00804074 	movhi	r2,257
 100fa40:	109a5e04 	addi	r2,r2,27000
 100fa44:	e0bfff15 	stw	r2,-4(fp)
 100fa48:	e0bfff17 	ldw	r2,-4(fp)
}
 100fa4c:	e037883a 	mov	sp,fp
 100fa50:	dfc00117 	ldw	ra,4(sp)
 100fa54:	df000017 	ldw	fp,0(sp)
 100fa58:	dec00204 	addi	sp,sp,8
 100fa5c:	f800283a 	ret

0100fa60 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100fa60:	defffc04 	addi	sp,sp,-16
 100fa64:	df000315 	stw	fp,12(sp)
 100fa68:	df000304 	addi	fp,sp,12
 100fa6c:	e13ffd15 	stw	r4,-12(fp)
 100fa70:	e17ffe15 	stw	r5,-8(fp)
 100fa74:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100fa78:	e0bfff17 	ldw	r2,-4(fp)
}
 100fa7c:	e037883a 	mov	sp,fp
 100fa80:	df000017 	ldw	fp,0(sp)
 100fa84:	dec00104 	addi	sp,sp,4
 100fa88:	f800283a 	ret

0100fa8c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100fa8c:	defff904 	addi	sp,sp,-28
 100fa90:	dfc00615 	stw	ra,24(sp)
 100fa94:	df000515 	stw	fp,20(sp)
 100fa98:	df000504 	addi	fp,sp,20
 100fa9c:	e13ffc15 	stw	r4,-16(fp)
 100faa0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100faa4:	e0bffc17 	ldw	r2,-16(fp)
 100faa8:	1004803a 	cmplt	r2,r2,zero
 100faac:	1000081e 	bne	r2,zero,100fad0 <fstat+0x44>
 100fab0:	e0bffc17 	ldw	r2,-16(fp)
 100fab4:	10800324 	muli	r2,r2,12
 100fab8:	1007883a 	mov	r3,r2
 100fabc:	00804074 	movhi	r2,257
 100fac0:	108f0104 	addi	r2,r2,15364
 100fac4:	1887883a 	add	r3,r3,r2
 100fac8:	e0ffff15 	stw	r3,-4(fp)
 100facc:	00000106 	br	100fad4 <fstat+0x48>
 100fad0:	e03fff15 	stw	zero,-4(fp)
 100fad4:	e0bfff17 	ldw	r2,-4(fp)
 100fad8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100fadc:	e0bffb17 	ldw	r2,-20(fp)
 100fae0:	1005003a 	cmpeq	r2,r2,zero
 100fae4:	1000121e 	bne	r2,zero,100fb30 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100fae8:	e0bffb17 	ldw	r2,-20(fp)
 100faec:	10800017 	ldw	r2,0(r2)
 100faf0:	10800817 	ldw	r2,32(r2)
 100faf4:	1005003a 	cmpeq	r2,r2,zero
 100faf8:	1000081e 	bne	r2,zero,100fb1c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 100fafc:	e0bffb17 	ldw	r2,-20(fp)
 100fb00:	10800017 	ldw	r2,0(r2)
 100fb04:	10800817 	ldw	r2,32(r2)
 100fb08:	e13ffb17 	ldw	r4,-20(fp)
 100fb0c:	e17ffd17 	ldw	r5,-12(fp)
 100fb10:	103ee83a 	callr	r2
 100fb14:	e0bffe15 	stw	r2,-8(fp)
 100fb18:	00000b06 	br	100fb48 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100fb1c:	e0fffd17 	ldw	r3,-12(fp)
 100fb20:	00880004 	movi	r2,8192
 100fb24:	18800115 	stw	r2,4(r3)
      return 0;
 100fb28:	e03ffe15 	stw	zero,-8(fp)
 100fb2c:	00000606 	br	100fb48 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100fb30:	100fb600 	call	100fb60 <alt_get_errno>
 100fb34:	1007883a 	mov	r3,r2
 100fb38:	00801444 	movi	r2,81
 100fb3c:	18800015 	stw	r2,0(r3)
    return -1;
 100fb40:	00bfffc4 	movi	r2,-1
 100fb44:	e0bffe15 	stw	r2,-8(fp)
 100fb48:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100fb4c:	e037883a 	mov	sp,fp
 100fb50:	dfc00117 	ldw	ra,4(sp)
 100fb54:	df000017 	ldw	fp,0(sp)
 100fb58:	dec00204 	addi	sp,sp,8
 100fb5c:	f800283a 	ret

0100fb60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100fb60:	defffd04 	addi	sp,sp,-12
 100fb64:	dfc00215 	stw	ra,8(sp)
 100fb68:	df000115 	stw	fp,4(sp)
 100fb6c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100fb70:	00804074 	movhi	r2,257
 100fb74:	10939b04 	addi	r2,r2,20076
 100fb78:	10800017 	ldw	r2,0(r2)
 100fb7c:	1005003a 	cmpeq	r2,r2,zero
 100fb80:	1000061e 	bne	r2,zero,100fb9c <alt_get_errno+0x3c>
 100fb84:	00804074 	movhi	r2,257
 100fb88:	10939b04 	addi	r2,r2,20076
 100fb8c:	10800017 	ldw	r2,0(r2)
 100fb90:	103ee83a 	callr	r2
 100fb94:	e0bfff15 	stw	r2,-4(fp)
 100fb98:	00000306 	br	100fba8 <alt_get_errno+0x48>
 100fb9c:	00804074 	movhi	r2,257
 100fba0:	109a5e04 	addi	r2,r2,27000
 100fba4:	e0bfff15 	stw	r2,-4(fp)
 100fba8:	e0bfff17 	ldw	r2,-4(fp)
}
 100fbac:	e037883a 	mov	sp,fp
 100fbb0:	dfc00117 	ldw	ra,4(sp)
 100fbb4:	df000017 	ldw	fp,0(sp)
 100fbb8:	dec00204 	addi	sp,sp,8
 100fbbc:	f800283a 	ret

0100fbc0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100fbc0:	deffeb04 	addi	sp,sp,-84
 100fbc4:	dfc01415 	stw	ra,80(sp)
 100fbc8:	df001315 	stw	fp,76(sp)
 100fbcc:	df001304 	addi	fp,sp,76
 100fbd0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100fbd4:	e0bffd17 	ldw	r2,-12(fp)
 100fbd8:	1004803a 	cmplt	r2,r2,zero
 100fbdc:	1000081e 	bne	r2,zero,100fc00 <isatty+0x40>
 100fbe0:	e0bffd17 	ldw	r2,-12(fp)
 100fbe4:	10800324 	muli	r2,r2,12
 100fbe8:	1007883a 	mov	r3,r2
 100fbec:	00804074 	movhi	r2,257
 100fbf0:	108f0104 	addi	r2,r2,15364
 100fbf4:	1887883a 	add	r3,r3,r2
 100fbf8:	e0ffff15 	stw	r3,-4(fp)
 100fbfc:	00000106 	br	100fc04 <isatty+0x44>
 100fc00:	e03fff15 	stw	zero,-4(fp)
 100fc04:	e0bfff17 	ldw	r2,-4(fp)
 100fc08:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 100fc0c:	e0bfed17 	ldw	r2,-76(fp)
 100fc10:	1005003a 	cmpeq	r2,r2,zero
 100fc14:	10000f1e 	bne	r2,zero,100fc54 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100fc18:	e0bfed17 	ldw	r2,-76(fp)
 100fc1c:	10800017 	ldw	r2,0(r2)
 100fc20:	10800817 	ldw	r2,32(r2)
 100fc24:	1004c03a 	cmpne	r2,r2,zero
 100fc28:	1000031e 	bne	r2,zero,100fc38 <isatty+0x78>
    {
      return 1;
 100fc2c:	00800044 	movi	r2,1
 100fc30:	e0bffe15 	stw	r2,-8(fp)
 100fc34:	00000c06 	br	100fc68 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100fc38:	e17fee04 	addi	r5,fp,-72
 100fc3c:	e13ffd17 	ldw	r4,-12(fp)
 100fc40:	100fa8c0 	call	100fa8c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100fc44:	e0bfef17 	ldw	r2,-68(fp)
 100fc48:	10880020 	cmpeqi	r2,r2,8192
 100fc4c:	e0bffe15 	stw	r2,-8(fp)
 100fc50:	00000506 	br	100fc68 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100fc54:	100fc800 	call	100fc80 <alt_get_errno>
 100fc58:	1007883a 	mov	r3,r2
 100fc5c:	00801444 	movi	r2,81
 100fc60:	18800015 	stw	r2,0(r3)
    return 0;
 100fc64:	e03ffe15 	stw	zero,-8(fp)
 100fc68:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100fc6c:	e037883a 	mov	sp,fp
 100fc70:	dfc00117 	ldw	ra,4(sp)
 100fc74:	df000017 	ldw	fp,0(sp)
 100fc78:	dec00204 	addi	sp,sp,8
 100fc7c:	f800283a 	ret

0100fc80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100fc80:	defffd04 	addi	sp,sp,-12
 100fc84:	dfc00215 	stw	ra,8(sp)
 100fc88:	df000115 	stw	fp,4(sp)
 100fc8c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100fc90:	00804074 	movhi	r2,257
 100fc94:	10939b04 	addi	r2,r2,20076
 100fc98:	10800017 	ldw	r2,0(r2)
 100fc9c:	1005003a 	cmpeq	r2,r2,zero
 100fca0:	1000061e 	bne	r2,zero,100fcbc <alt_get_errno+0x3c>
 100fca4:	00804074 	movhi	r2,257
 100fca8:	10939b04 	addi	r2,r2,20076
 100fcac:	10800017 	ldw	r2,0(r2)
 100fcb0:	103ee83a 	callr	r2
 100fcb4:	e0bfff15 	stw	r2,-4(fp)
 100fcb8:	00000306 	br	100fcc8 <alt_get_errno+0x48>
 100fcbc:	00804074 	movhi	r2,257
 100fcc0:	109a5e04 	addi	r2,r2,27000
 100fcc4:	e0bfff15 	stw	r2,-4(fp)
 100fcc8:	e0bfff17 	ldw	r2,-4(fp)
}
 100fccc:	e037883a 	mov	sp,fp
 100fcd0:	dfc00117 	ldw	ra,4(sp)
 100fcd4:	df000017 	ldw	fp,0(sp)
 100fcd8:	dec00204 	addi	sp,sp,8
 100fcdc:	f800283a 	ret

0100fce0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100fce0:	defffe04 	addi	sp,sp,-8
 100fce4:	dfc00115 	stw	ra,4(sp)
 100fce8:	df000015 	stw	fp,0(sp)
 100fcec:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100fcf0:	01004074 	movhi	r4,257
 100fcf4:	2113a004 	addi	r4,r4,20096
 100fcf8:	01404074 	movhi	r5,257
 100fcfc:	294ce804 	addi	r5,r5,13216
 100fd00:	01804074 	movhi	r6,257
 100fd04:	3193a004 	addi	r6,r6,20096
 100fd08:	100fd600 	call	100fd60 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100fd0c:	01004034 	movhi	r4,256
 100fd10:	21000804 	addi	r4,r4,32
 100fd14:	01404034 	movhi	r5,256
 100fd18:	29400804 	addi	r5,r5,32
 100fd1c:	01804034 	movhi	r6,256
 100fd20:	31806e04 	addi	r6,r6,440
 100fd24:	100fd600 	call	100fd60 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100fd28:	01004074 	movhi	r4,257
 100fd2c:	210ada04 	addi	r4,r4,11112
 100fd30:	01404074 	movhi	r5,257
 100fd34:	294ada04 	addi	r5,r5,11112
 100fd38:	01804074 	movhi	r6,257
 100fd3c:	318ce804 	addi	r6,r6,13216
 100fd40:	100fd600 	call	100fd60 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100fd44:	1011a8c0 	call	1011a8c <alt_dcache_flush_all>
  alt_icache_flush_all();
 100fd48:	1011d400 	call	1011d40 <alt_icache_flush_all>
}
 100fd4c:	e037883a 	mov	sp,fp
 100fd50:	dfc00117 	ldw	ra,4(sp)
 100fd54:	df000017 	ldw	fp,0(sp)
 100fd58:	dec00204 	addi	sp,sp,8
 100fd5c:	f800283a 	ret

0100fd60 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100fd60:	defffc04 	addi	sp,sp,-16
 100fd64:	df000315 	stw	fp,12(sp)
 100fd68:	df000304 	addi	fp,sp,12
 100fd6c:	e13ffd15 	stw	r4,-12(fp)
 100fd70:	e17ffe15 	stw	r5,-8(fp)
 100fd74:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100fd78:	e0fffe17 	ldw	r3,-8(fp)
 100fd7c:	e0bffd17 	ldw	r2,-12(fp)
 100fd80:	18800e26 	beq	r3,r2,100fdbc <alt_load_section+0x5c>
  {
    while( to != end )
 100fd84:	00000a06 	br	100fdb0 <alt_load_section+0x50>
    {
      *to++ = *from++;
 100fd88:	e0bffd17 	ldw	r2,-12(fp)
 100fd8c:	10c00017 	ldw	r3,0(r2)
 100fd90:	e0bffe17 	ldw	r2,-8(fp)
 100fd94:	10c00015 	stw	r3,0(r2)
 100fd98:	e0bffe17 	ldw	r2,-8(fp)
 100fd9c:	10800104 	addi	r2,r2,4
 100fda0:	e0bffe15 	stw	r2,-8(fp)
 100fda4:	e0bffd17 	ldw	r2,-12(fp)
 100fda8:	10800104 	addi	r2,r2,4
 100fdac:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100fdb0:	e0fffe17 	ldw	r3,-8(fp)
 100fdb4:	e0bfff17 	ldw	r2,-4(fp)
 100fdb8:	18bff31e 	bne	r3,r2,100fd88 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 100fdbc:	e037883a 	mov	sp,fp
 100fdc0:	df000017 	ldw	fp,0(sp)
 100fdc4:	dec00104 	addi	sp,sp,4
 100fdc8:	f800283a 	ret

0100fdcc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100fdcc:	defff804 	addi	sp,sp,-32
 100fdd0:	dfc00715 	stw	ra,28(sp)
 100fdd4:	df000615 	stw	fp,24(sp)
 100fdd8:	df000604 	addi	fp,sp,24
 100fddc:	e13ffc15 	stw	r4,-16(fp)
 100fde0:	e17ffd15 	stw	r5,-12(fp)
 100fde4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100fde8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100fdec:	e0bffc17 	ldw	r2,-16(fp)
 100fdf0:	1004803a 	cmplt	r2,r2,zero
 100fdf4:	1000081e 	bne	r2,zero,100fe18 <lseek+0x4c>
 100fdf8:	e0bffc17 	ldw	r2,-16(fp)
 100fdfc:	10800324 	muli	r2,r2,12
 100fe00:	1007883a 	mov	r3,r2
 100fe04:	00804074 	movhi	r2,257
 100fe08:	108f0104 	addi	r2,r2,15364
 100fe0c:	1887883a 	add	r3,r3,r2
 100fe10:	e0ffff15 	stw	r3,-4(fp)
 100fe14:	00000106 	br	100fe1c <lseek+0x50>
 100fe18:	e03fff15 	stw	zero,-4(fp)
 100fe1c:	e0bfff17 	ldw	r2,-4(fp)
 100fe20:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 100fe24:	e0bffb17 	ldw	r2,-20(fp)
 100fe28:	1005003a 	cmpeq	r2,r2,zero
 100fe2c:	1000111e 	bne	r2,zero,100fe74 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100fe30:	e0bffb17 	ldw	r2,-20(fp)
 100fe34:	10800017 	ldw	r2,0(r2)
 100fe38:	10800717 	ldw	r2,28(r2)
 100fe3c:	1005003a 	cmpeq	r2,r2,zero
 100fe40:	1000091e 	bne	r2,zero,100fe68 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100fe44:	e0bffb17 	ldw	r2,-20(fp)
 100fe48:	10800017 	ldw	r2,0(r2)
 100fe4c:	10800717 	ldw	r2,28(r2)
 100fe50:	e13ffb17 	ldw	r4,-20(fp)
 100fe54:	e17ffd17 	ldw	r5,-12(fp)
 100fe58:	e1bffe17 	ldw	r6,-8(fp)
 100fe5c:	103ee83a 	callr	r2
 100fe60:	e0bffa15 	stw	r2,-24(fp)
 100fe64:	00000506 	br	100fe7c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100fe68:	00bfde84 	movi	r2,-134
 100fe6c:	e0bffa15 	stw	r2,-24(fp)
 100fe70:	00000206 	br	100fe7c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 100fe74:	00bfebc4 	movi	r2,-81
 100fe78:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 100fe7c:	e0bffa17 	ldw	r2,-24(fp)
 100fe80:	1004403a 	cmpge	r2,r2,zero
 100fe84:	1000071e 	bne	r2,zero,100fea4 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 100fe88:	100febc0 	call	100febc <alt_get_errno>
 100fe8c:	1007883a 	mov	r3,r2
 100fe90:	e0bffa17 	ldw	r2,-24(fp)
 100fe94:	0085c83a 	sub	r2,zero,r2
 100fe98:	18800015 	stw	r2,0(r3)
    rc = -1;
 100fe9c:	00bfffc4 	movi	r2,-1
 100fea0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100fea4:	e0bffa17 	ldw	r2,-24(fp)
}
 100fea8:	e037883a 	mov	sp,fp
 100feac:	dfc00117 	ldw	ra,4(sp)
 100feb0:	df000017 	ldw	fp,0(sp)
 100feb4:	dec00204 	addi	sp,sp,8
 100feb8:	f800283a 	ret

0100febc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100febc:	defffd04 	addi	sp,sp,-12
 100fec0:	dfc00215 	stw	ra,8(sp)
 100fec4:	df000115 	stw	fp,4(sp)
 100fec8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100fecc:	00804074 	movhi	r2,257
 100fed0:	10939b04 	addi	r2,r2,20076
 100fed4:	10800017 	ldw	r2,0(r2)
 100fed8:	1005003a 	cmpeq	r2,r2,zero
 100fedc:	1000061e 	bne	r2,zero,100fef8 <alt_get_errno+0x3c>
 100fee0:	00804074 	movhi	r2,257
 100fee4:	10939b04 	addi	r2,r2,20076
 100fee8:	10800017 	ldw	r2,0(r2)
 100feec:	103ee83a 	callr	r2
 100fef0:	e0bfff15 	stw	r2,-4(fp)
 100fef4:	00000306 	br	100ff04 <alt_get_errno+0x48>
 100fef8:	00804074 	movhi	r2,257
 100fefc:	109a5e04 	addi	r2,r2,27000
 100ff00:	e0bfff15 	stw	r2,-4(fp)
 100ff04:	e0bfff17 	ldw	r2,-4(fp)
}
 100ff08:	e037883a 	mov	sp,fp
 100ff0c:	dfc00117 	ldw	ra,4(sp)
 100ff10:	df000017 	ldw	fp,0(sp)
 100ff14:	dec00204 	addi	sp,sp,8
 100ff18:	f800283a 	ret

0100ff1c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100ff1c:	defffd04 	addi	sp,sp,-12
 100ff20:	dfc00215 	stw	ra,8(sp)
 100ff24:	df000115 	stw	fp,4(sp)
 100ff28:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100ff2c:	0009883a 	mov	r4,zero
 100ff30:	10103e40 	call	10103e4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100ff34:	10104180 	call	1010418 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100ff38:	01004074 	movhi	r4,257
 100ff3c:	210cd404 	addi	r4,r4,13136
 100ff40:	01404074 	movhi	r5,257
 100ff44:	294cd404 	addi	r5,r5,13136
 100ff48:	01804074 	movhi	r6,257
 100ff4c:	318cd404 	addi	r6,r6,13136
 100ff50:	1011e340 	call	1011e34 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100ff54:	1011be40 	call	1011be4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100ff58:	01004074 	movhi	r4,257
 100ff5c:	21071204 	addi	r4,r4,7240
 100ff60:	101275c0 	call	101275c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100ff64:	d126d017 	ldw	r4,-25792(gp)
 100ff68:	d166d117 	ldw	r5,-25788(gp)
 100ff6c:	d1a6d217 	ldw	r6,-25784(gp)
 100ff70:	10009d40 	call	10009d4 <main>
 100ff74:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100ff78:	01000044 	movi	r4,1
 100ff7c:	100f9040 	call	100f904 <close>
  exit (result);
 100ff80:	e13fff17 	ldw	r4,-4(fp)
 100ff84:	10127700 	call	1012770 <exit>

0100ff88 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100ff88:	defffe04 	addi	sp,sp,-8
 100ff8c:	df000115 	stw	fp,4(sp)
 100ff90:	df000104 	addi	fp,sp,4
 100ff94:	e13fff15 	stw	r4,-4(fp)
}
 100ff98:	e037883a 	mov	sp,fp
 100ff9c:	df000017 	ldw	fp,0(sp)
 100ffa0:	dec00104 	addi	sp,sp,4
 100ffa4:	f800283a 	ret

0100ffa8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100ffa8:	defffe04 	addi	sp,sp,-8
 100ffac:	df000115 	stw	fp,4(sp)
 100ffb0:	df000104 	addi	fp,sp,4
 100ffb4:	e13fff15 	stw	r4,-4(fp)
}
 100ffb8:	e037883a 	mov	sp,fp
 100ffbc:	df000017 	ldw	fp,0(sp)
 100ffc0:	dec00104 	addi	sp,sp,4
 100ffc4:	f800283a 	ret

0100ffc8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100ffc8:	defff704 	addi	sp,sp,-36
 100ffcc:	dfc00815 	stw	ra,32(sp)
 100ffd0:	df000715 	stw	fp,28(sp)
 100ffd4:	df000704 	addi	fp,sp,28
 100ffd8:	e13ffb15 	stw	r4,-20(fp)
 100ffdc:	e17ffc15 	stw	r5,-16(fp)
 100ffe0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100ffe4:	e0bffb17 	ldw	r2,-20(fp)
 100ffe8:	1004803a 	cmplt	r2,r2,zero
 100ffec:	1000081e 	bne	r2,zero,1010010 <read+0x48>
 100fff0:	e0bffb17 	ldw	r2,-20(fp)
 100fff4:	10800324 	muli	r2,r2,12
 100fff8:	1007883a 	mov	r3,r2
 100fffc:	00804074 	movhi	r2,257
 1010000:	108f0104 	addi	r2,r2,15364
 1010004:	1887883a 	add	r3,r3,r2
 1010008:	e0ffff15 	stw	r3,-4(fp)
 101000c:	00000106 	br	1010014 <read+0x4c>
 1010010:	e03fff15 	stw	zero,-4(fp)
 1010014:	e0bfff17 	ldw	r2,-4(fp)
 1010018:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 101001c:	e0bffa17 	ldw	r2,-24(fp)
 1010020:	1005003a 	cmpeq	r2,r2,zero
 1010024:	1000241e 	bne	r2,zero,10100b8 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1010028:	e0bffa17 	ldw	r2,-24(fp)
 101002c:	10800217 	ldw	r2,8(r2)
 1010030:	108000cc 	andi	r2,r2,3
 1010034:	10800060 	cmpeqi	r2,r2,1
 1010038:	10001a1e 	bne	r2,zero,10100a4 <read+0xdc>
 101003c:	e0bffa17 	ldw	r2,-24(fp)
 1010040:	10800017 	ldw	r2,0(r2)
 1010044:	10800517 	ldw	r2,20(r2)
 1010048:	1005003a 	cmpeq	r2,r2,zero
 101004c:	1000151e 	bne	r2,zero,10100a4 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1010050:	e0bffa17 	ldw	r2,-24(fp)
 1010054:	10800017 	ldw	r2,0(r2)
 1010058:	10800517 	ldw	r2,20(r2)
 101005c:	e17ffc17 	ldw	r5,-16(fp)
 1010060:	e1bffd17 	ldw	r6,-12(fp)
 1010064:	e13ffa17 	ldw	r4,-24(fp)
 1010068:	103ee83a 	callr	r2
 101006c:	e0bff915 	stw	r2,-28(fp)
 1010070:	e0bff917 	ldw	r2,-28(fp)
 1010074:	1004403a 	cmpge	r2,r2,zero
 1010078:	1000071e 	bne	r2,zero,1010098 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 101007c:	10100e80 	call	10100e8 <alt_get_errno>
 1010080:	e0fff917 	ldw	r3,-28(fp)
 1010084:	00c7c83a 	sub	r3,zero,r3
 1010088:	10c00015 	stw	r3,0(r2)
          return -1;
 101008c:	00bfffc4 	movi	r2,-1
 1010090:	e0bffe15 	stw	r2,-8(fp)
 1010094:	00000e06 	br	10100d0 <read+0x108>
        }
        return rval;
 1010098:	e0bff917 	ldw	r2,-28(fp)
 101009c:	e0bffe15 	stw	r2,-8(fp)
 10100a0:	00000b06 	br	10100d0 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 10100a4:	10100e80 	call	10100e8 <alt_get_errno>
 10100a8:	1007883a 	mov	r3,r2
 10100ac:	00800344 	movi	r2,13
 10100b0:	18800015 	stw	r2,0(r3)
 10100b4:	00000406 	br	10100c8 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 10100b8:	10100e80 	call	10100e8 <alt_get_errno>
 10100bc:	1007883a 	mov	r3,r2
 10100c0:	00801444 	movi	r2,81
 10100c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10100c8:	00bfffc4 	movi	r2,-1
 10100cc:	e0bffe15 	stw	r2,-8(fp)
 10100d0:	e0bffe17 	ldw	r2,-8(fp)
}
 10100d4:	e037883a 	mov	sp,fp
 10100d8:	dfc00117 	ldw	ra,4(sp)
 10100dc:	df000017 	ldw	fp,0(sp)
 10100e0:	dec00204 	addi	sp,sp,8
 10100e4:	f800283a 	ret

010100e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10100e8:	defffd04 	addi	sp,sp,-12
 10100ec:	dfc00215 	stw	ra,8(sp)
 10100f0:	df000115 	stw	fp,4(sp)
 10100f4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10100f8:	00804074 	movhi	r2,257
 10100fc:	10939b04 	addi	r2,r2,20076
 1010100:	10800017 	ldw	r2,0(r2)
 1010104:	1005003a 	cmpeq	r2,r2,zero
 1010108:	1000061e 	bne	r2,zero,1010124 <alt_get_errno+0x3c>
 101010c:	00804074 	movhi	r2,257
 1010110:	10939b04 	addi	r2,r2,20076
 1010114:	10800017 	ldw	r2,0(r2)
 1010118:	103ee83a 	callr	r2
 101011c:	e0bfff15 	stw	r2,-4(fp)
 1010120:	00000306 	br	1010130 <alt_get_errno+0x48>
 1010124:	00804074 	movhi	r2,257
 1010128:	109a5e04 	addi	r2,r2,27000
 101012c:	e0bfff15 	stw	r2,-4(fp)
 1010130:	e0bfff17 	ldw	r2,-4(fp)
}
 1010134:	e037883a 	mov	sp,fp
 1010138:	dfc00117 	ldw	ra,4(sp)
 101013c:	df000017 	ldw	fp,0(sp)
 1010140:	dec00204 	addi	sp,sp,8
 1010144:	f800283a 	ret

01010148 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1010148:	defffe04 	addi	sp,sp,-8
 101014c:	df000115 	stw	fp,4(sp)
 1010150:	df000104 	addi	fp,sp,4
 1010154:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1010158:	e0bfff17 	ldw	r2,-4(fp)
 101015c:	108000d0 	cmplti	r2,r2,3
 1010160:	10000d1e 	bne	r2,zero,1010198 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 1010164:	e0bfff17 	ldw	r2,-4(fp)
 1010168:	00c04074 	movhi	r3,257
 101016c:	18cf0104 	addi	r3,r3,15364
 1010170:	10800324 	muli	r2,r2,12
 1010174:	10c5883a 	add	r2,r2,r3
 1010178:	10800204 	addi	r2,r2,8
 101017c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1010180:	e0bfff17 	ldw	r2,-4(fp)
 1010184:	00c04074 	movhi	r3,257
 1010188:	18cf0104 	addi	r3,r3,15364
 101018c:	10800324 	muli	r2,r2,12
 1010190:	10c5883a 	add	r2,r2,r3
 1010194:	10000015 	stw	zero,0(r2)
  }
}
 1010198:	e037883a 	mov	sp,fp
 101019c:	df000017 	ldw	fp,0(sp)
 10101a0:	dec00104 	addi	sp,sp,4
 10101a4:	f800283a 	ret

010101a8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 10101a8:	defff804 	addi	sp,sp,-32
 10101ac:	df000715 	stw	fp,28(sp)
 10101b0:	df000704 	addi	fp,sp,28
 10101b4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10101b8:	0005303a 	rdctl	r2,status
 10101bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10101c0:	e0fffb17 	ldw	r3,-20(fp)
 10101c4:	00bfff84 	movi	r2,-2
 10101c8:	1884703a 	and	r2,r3,r2
 10101cc:	1001703a 	wrctl	status,r2
  
  return context;
 10101d0:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 10101d4:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 10101d8:	d0a00d17 	ldw	r2,-32716(gp)
 10101dc:	10c000c4 	addi	r3,r2,3
 10101e0:	00bfff04 	movi	r2,-4
 10101e4:	1884703a 	and	r2,r3,r2
 10101e8:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 10101ec:	d0e00d17 	ldw	r3,-32716(gp)
 10101f0:	e0bffe17 	ldw	r2,-8(fp)
 10101f4:	1887883a 	add	r3,r3,r2
 10101f8:	00806034 	movhi	r2,384
 10101fc:	10800004 	addi	r2,r2,0
 1010200:	10c0072e 	bgeu	r2,r3,1010220 <sbrk+0x78>
 1010204:	e0bffd17 	ldw	r2,-12(fp)
 1010208:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101020c:	e0bffa17 	ldw	r2,-24(fp)
 1010210:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1010214:	00bfffc4 	movi	r2,-1
 1010218:	e0bfff15 	stw	r2,-4(fp)
 101021c:	00000c06 	br	1010250 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 1010220:	d0a00d17 	ldw	r2,-32716(gp)
 1010224:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 1010228:	d0e00d17 	ldw	r3,-32716(gp)
 101022c:	e0bffe17 	ldw	r2,-8(fp)
 1010230:	1885883a 	add	r2,r3,r2
 1010234:	d0a00d15 	stw	r2,-32716(gp)
 1010238:	e0bffd17 	ldw	r2,-12(fp)
 101023c:	e0bff915 	stw	r2,-28(fp)
 1010240:	e0bff917 	ldw	r2,-28(fp)
 1010244:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1010248:	e0bffc17 	ldw	r2,-16(fp)
 101024c:	e0bfff15 	stw	r2,-4(fp)
 1010250:	e0bfff17 	ldw	r2,-4(fp)
} 
 1010254:	e037883a 	mov	sp,fp
 1010258:	df000017 	ldw	fp,0(sp)
 101025c:	dec00104 	addi	sp,sp,4
 1010260:	f800283a 	ret

01010264 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1010264:	defff704 	addi	sp,sp,-36
 1010268:	dfc00815 	stw	ra,32(sp)
 101026c:	df000715 	stw	fp,28(sp)
 1010270:	df000704 	addi	fp,sp,28
 1010274:	e13ffb15 	stw	r4,-20(fp)
 1010278:	e17ffc15 	stw	r5,-16(fp)
 101027c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1010280:	e0bffb17 	ldw	r2,-20(fp)
 1010284:	1004803a 	cmplt	r2,r2,zero
 1010288:	1000081e 	bne	r2,zero,10102ac <write+0x48>
 101028c:	e0bffb17 	ldw	r2,-20(fp)
 1010290:	10800324 	muli	r2,r2,12
 1010294:	1007883a 	mov	r3,r2
 1010298:	00804074 	movhi	r2,257
 101029c:	108f0104 	addi	r2,r2,15364
 10102a0:	1887883a 	add	r3,r3,r2
 10102a4:	e0ffff15 	stw	r3,-4(fp)
 10102a8:	00000106 	br	10102b0 <write+0x4c>
 10102ac:	e03fff15 	stw	zero,-4(fp)
 10102b0:	e0bfff17 	ldw	r2,-4(fp)
 10102b4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 10102b8:	e0bffa17 	ldw	r2,-24(fp)
 10102bc:	1005003a 	cmpeq	r2,r2,zero
 10102c0:	1000241e 	bne	r2,zero,1010354 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 10102c4:	e0bffa17 	ldw	r2,-24(fp)
 10102c8:	10800217 	ldw	r2,8(r2)
 10102cc:	108000cc 	andi	r2,r2,3
 10102d0:	1005003a 	cmpeq	r2,r2,zero
 10102d4:	10001a1e 	bne	r2,zero,1010340 <write+0xdc>
 10102d8:	e0bffa17 	ldw	r2,-24(fp)
 10102dc:	10800017 	ldw	r2,0(r2)
 10102e0:	10800617 	ldw	r2,24(r2)
 10102e4:	1005003a 	cmpeq	r2,r2,zero
 10102e8:	1000151e 	bne	r2,zero,1010340 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 10102ec:	e0bffa17 	ldw	r2,-24(fp)
 10102f0:	10800017 	ldw	r2,0(r2)
 10102f4:	10800617 	ldw	r2,24(r2)
 10102f8:	e17ffc17 	ldw	r5,-16(fp)
 10102fc:	e1bffd17 	ldw	r6,-12(fp)
 1010300:	e13ffa17 	ldw	r4,-24(fp)
 1010304:	103ee83a 	callr	r2
 1010308:	e0bff915 	stw	r2,-28(fp)
 101030c:	e0bff917 	ldw	r2,-28(fp)
 1010310:	1004403a 	cmpge	r2,r2,zero
 1010314:	1000071e 	bne	r2,zero,1010334 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 1010318:	10103840 	call	1010384 <alt_get_errno>
 101031c:	e0fff917 	ldw	r3,-28(fp)
 1010320:	00c7c83a 	sub	r3,zero,r3
 1010324:	10c00015 	stw	r3,0(r2)
        return -1;
 1010328:	00bfffc4 	movi	r2,-1
 101032c:	e0bffe15 	stw	r2,-8(fp)
 1010330:	00000e06 	br	101036c <write+0x108>
      }
      return rval;
 1010334:	e0bff917 	ldw	r2,-28(fp)
 1010338:	e0bffe15 	stw	r2,-8(fp)
 101033c:	00000b06 	br	101036c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1010340:	10103840 	call	1010384 <alt_get_errno>
 1010344:	1007883a 	mov	r3,r2
 1010348:	00800344 	movi	r2,13
 101034c:	18800015 	stw	r2,0(r3)
 1010350:	00000406 	br	1010364 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1010354:	10103840 	call	1010384 <alt_get_errno>
 1010358:	1007883a 	mov	r3,r2
 101035c:	00801444 	movi	r2,81
 1010360:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1010364:	00bfffc4 	movi	r2,-1
 1010368:	e0bffe15 	stw	r2,-8(fp)
 101036c:	e0bffe17 	ldw	r2,-8(fp)
}
 1010370:	e037883a 	mov	sp,fp
 1010374:	dfc00117 	ldw	ra,4(sp)
 1010378:	df000017 	ldw	fp,0(sp)
 101037c:	dec00204 	addi	sp,sp,8
 1010380:	f800283a 	ret

01010384 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1010384:	defffd04 	addi	sp,sp,-12
 1010388:	dfc00215 	stw	ra,8(sp)
 101038c:	df000115 	stw	fp,4(sp)
 1010390:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1010394:	00804074 	movhi	r2,257
 1010398:	10939b04 	addi	r2,r2,20076
 101039c:	10800017 	ldw	r2,0(r2)
 10103a0:	1005003a 	cmpeq	r2,r2,zero
 10103a4:	1000061e 	bne	r2,zero,10103c0 <alt_get_errno+0x3c>
 10103a8:	00804074 	movhi	r2,257
 10103ac:	10939b04 	addi	r2,r2,20076
 10103b0:	10800017 	ldw	r2,0(r2)
 10103b4:	103ee83a 	callr	r2
 10103b8:	e0bfff15 	stw	r2,-4(fp)
 10103bc:	00000306 	br	10103cc <alt_get_errno+0x48>
 10103c0:	00804074 	movhi	r2,257
 10103c4:	109a5e04 	addi	r2,r2,27000
 10103c8:	e0bfff15 	stw	r2,-4(fp)
 10103cc:	e0bfff17 	ldw	r2,-4(fp)
}
 10103d0:	e037883a 	mov	sp,fp
 10103d4:	dfc00117 	ldw	ra,4(sp)
 10103d8:	df000017 	ldw	fp,0(sp)
 10103dc:	dec00204 	addi	sp,sp,8
 10103e0:	f800283a 	ret

010103e4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 10103e4:	defffd04 	addi	sp,sp,-12
 10103e8:	dfc00215 	stw	ra,8(sp)
 10103ec:	df000115 	stw	fp,4(sp)
 10103f0:	df000104 	addi	fp,sp,4
 10103f4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 10103f8:	10124d40 	call	10124d4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 10103fc:	00800044 	movi	r2,1
 1010400:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1010404:	e037883a 	mov	sp,fp
 1010408:	dfc00117 	ldw	ra,4(sp)
 101040c:	df000017 	ldw	fp,0(sp)
 1010410:	dec00204 	addi	sp,sp,8
 1010414:	f800283a 	ret

01010418 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1010418:	defffe04 	addi	sp,sp,-8
 101041c:	dfc00115 	stw	ra,4(sp)
 1010420:	df000015 	stw	fp,0(sp)
 1010424:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 1010428:	01043804 	movi	r4,4320
 101042c:	000b883a 	mov	r5,zero
 1010430:	018000c4 	movi	r6,3
 1010434:	01c0fa04 	movi	r7,1000
 1010438:	1010fe80 	call	1010fe8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 101043c:	01004074 	movhi	r4,257
 1010440:	210f6b04 	addi	r4,r4,15788
 1010444:	000b883a 	mov	r5,zero
 1010448:	000d883a 	mov	r6,zero
 101044c:	10106140 	call	1010614 <altera_avalon_jtag_uart_init>
 1010450:	01004074 	movhi	r4,257
 1010454:	210f6104 	addi	r4,r4,15748
 1010458:	10104940 	call	1010494 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 101045c:	01004074 	movhi	r4,257
 1010460:	21137904 	addi	r4,r4,19940
 1010464:	10111200 	call	1011120 <alt_up_character_lcd_init>
 1010468:	01004074 	movhi	r4,257
 101046c:	21137904 	addi	r4,r4,19940
 1010470:	10104940 	call	1010494 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
 1010474:	01004074 	movhi	r4,257
 1010478:	21138404 	addi	r4,r4,19984
 101047c:	10104940 	call	1010494 <alt_dev_reg>
}
 1010480:	e037883a 	mov	sp,fp
 1010484:	dfc00117 	ldw	ra,4(sp)
 1010488:	df000017 	ldw	fp,0(sp)
 101048c:	dec00204 	addi	sp,sp,8
 1010490:	f800283a 	ret

01010494 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1010494:	defffd04 	addi	sp,sp,-12
 1010498:	dfc00215 	stw	ra,8(sp)
 101049c:	df000115 	stw	fp,4(sp)
 10104a0:	df000104 	addi	fp,sp,4
 10104a4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 10104a8:	e13fff17 	ldw	r4,-4(fp)
 10104ac:	01404074 	movhi	r5,257
 10104b0:	29539804 	addi	r5,r5,20064
 10104b4:	1011ad00 	call	1011ad0 <alt_dev_llist_insert>
}
 10104b8:	e037883a 	mov	sp,fp
 10104bc:	dfc00117 	ldw	ra,4(sp)
 10104c0:	df000017 	ldw	fp,0(sp)
 10104c4:	dec00204 	addi	sp,sp,8
 10104c8:	f800283a 	ret

010104cc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 10104cc:	defffa04 	addi	sp,sp,-24
 10104d0:	dfc00515 	stw	ra,20(sp)
 10104d4:	df000415 	stw	fp,16(sp)
 10104d8:	df000404 	addi	fp,sp,16
 10104dc:	e13ffd15 	stw	r4,-12(fp)
 10104e0:	e17ffe15 	stw	r5,-8(fp)
 10104e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10104e8:	e0bffd17 	ldw	r2,-12(fp)
 10104ec:	10800017 	ldw	r2,0(r2)
 10104f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 10104f4:	e0bffc17 	ldw	r2,-16(fp)
 10104f8:	11000a04 	addi	r4,r2,40
 10104fc:	e0bffd17 	ldw	r2,-12(fp)
 1010500:	11c00217 	ldw	r7,8(r2)
 1010504:	e17ffe17 	ldw	r5,-8(fp)
 1010508:	e1bfff17 	ldw	r6,-4(fp)
 101050c:	1010b100 	call	1010b10 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1010510:	e037883a 	mov	sp,fp
 1010514:	dfc00117 	ldw	ra,4(sp)
 1010518:	df000017 	ldw	fp,0(sp)
 101051c:	dec00204 	addi	sp,sp,8
 1010520:	f800283a 	ret

01010524 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1010524:	defffa04 	addi	sp,sp,-24
 1010528:	dfc00515 	stw	ra,20(sp)
 101052c:	df000415 	stw	fp,16(sp)
 1010530:	df000404 	addi	fp,sp,16
 1010534:	e13ffd15 	stw	r4,-12(fp)
 1010538:	e17ffe15 	stw	r5,-8(fp)
 101053c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1010540:	e0bffd17 	ldw	r2,-12(fp)
 1010544:	10800017 	ldw	r2,0(r2)
 1010548:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 101054c:	e0bffc17 	ldw	r2,-16(fp)
 1010550:	11000a04 	addi	r4,r2,40
 1010554:	e0bffd17 	ldw	r2,-12(fp)
 1010558:	11c00217 	ldw	r7,8(r2)
 101055c:	e17ffe17 	ldw	r5,-8(fp)
 1010560:	e1bfff17 	ldw	r6,-4(fp)
 1010564:	1010d340 	call	1010d34 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1010568:	e037883a 	mov	sp,fp
 101056c:	dfc00117 	ldw	ra,4(sp)
 1010570:	df000017 	ldw	fp,0(sp)
 1010574:	dec00204 	addi	sp,sp,8
 1010578:	f800283a 	ret

0101057c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 101057c:	defffc04 	addi	sp,sp,-16
 1010580:	dfc00315 	stw	ra,12(sp)
 1010584:	df000215 	stw	fp,8(sp)
 1010588:	df000204 	addi	fp,sp,8
 101058c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1010590:	e0bfff17 	ldw	r2,-4(fp)
 1010594:	10800017 	ldw	r2,0(r2)
 1010598:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 101059c:	e0bffe17 	ldw	r2,-8(fp)
 10105a0:	11000a04 	addi	r4,r2,40
 10105a4:	e0bfff17 	ldw	r2,-4(fp)
 10105a8:	11400217 	ldw	r5,8(r2)
 10105ac:	10109a80 	call	10109a8 <altera_avalon_jtag_uart_close>
}
 10105b0:	e037883a 	mov	sp,fp
 10105b4:	dfc00117 	ldw	ra,4(sp)
 10105b8:	df000017 	ldw	fp,0(sp)
 10105bc:	dec00204 	addi	sp,sp,8
 10105c0:	f800283a 	ret

010105c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 10105c4:	defffa04 	addi	sp,sp,-24
 10105c8:	dfc00515 	stw	ra,20(sp)
 10105cc:	df000415 	stw	fp,16(sp)
 10105d0:	df000404 	addi	fp,sp,16
 10105d4:	e13ffd15 	stw	r4,-12(fp)
 10105d8:	e17ffe15 	stw	r5,-8(fp)
 10105dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 10105e0:	e0bffd17 	ldw	r2,-12(fp)
 10105e4:	10800017 	ldw	r2,0(r2)
 10105e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 10105ec:	e0bffc17 	ldw	r2,-16(fp)
 10105f0:	11000a04 	addi	r4,r2,40
 10105f4:	e17ffe17 	ldw	r5,-8(fp)
 10105f8:	e1bfff17 	ldw	r6,-4(fp)
 10105fc:	1010a1c0 	call	1010a1c <altera_avalon_jtag_uart_ioctl>
}
 1010600:	e037883a 	mov	sp,fp
 1010604:	dfc00117 	ldw	ra,4(sp)
 1010608:	df000017 	ldw	fp,0(sp)
 101060c:	dec00204 	addi	sp,sp,8
 1010610:	f800283a 	ret

01010614 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1010614:	defffb04 	addi	sp,sp,-20
 1010618:	dfc00415 	stw	ra,16(sp)
 101061c:	df000315 	stw	fp,12(sp)
 1010620:	df000304 	addi	fp,sp,12
 1010624:	e13ffd15 	stw	r4,-12(fp)
 1010628:	e17ffe15 	stw	r5,-8(fp)
 101062c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1010630:	e0fffd17 	ldw	r3,-12(fp)
 1010634:	00800044 	movi	r2,1
 1010638:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 101063c:	e0bffd17 	ldw	r2,-12(fp)
 1010640:	10800017 	ldw	r2,0(r2)
 1010644:	11000104 	addi	r4,r2,4
 1010648:	e0bffd17 	ldw	r2,-12(fp)
 101064c:	10800817 	ldw	r2,32(r2)
 1010650:	1007883a 	mov	r3,r2
 1010654:	2005883a 	mov	r2,r4
 1010658:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 101065c:	e13fff17 	ldw	r4,-4(fp)
 1010660:	e17ffd17 	ldw	r5,-12(fp)
 1010664:	01804074 	movhi	r6,257
 1010668:	3181b304 	addi	r6,r6,1740
 101066c:	1011eac0 	call	1011eac <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1010670:	e0bffd17 	ldw	r2,-12(fp)
 1010674:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1010678:	e0bffd17 	ldw	r2,-12(fp)
 101067c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1010680:	00804074 	movhi	r2,257
 1010684:	109a6304 	addi	r2,r2,27020
 1010688:	10800017 	ldw	r2,0(r2)
 101068c:	100b883a 	mov	r5,r2
 1010690:	01804074 	movhi	r6,257
 1010694:	31823e04 	addi	r6,r6,2296
 1010698:	e1fffd17 	ldw	r7,-12(fp)
 101069c:	10119380 	call	1011938 <alt_alarm_start>
 10106a0:	1004403a 	cmpge	r2,r2,zero
 10106a4:	1000041e 	bne	r2,zero,10106b8 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 10106a8:	e0fffd17 	ldw	r3,-12(fp)
 10106ac:	00a00034 	movhi	r2,32768
 10106b0:	10bfffc4 	addi	r2,r2,-1
 10106b4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 10106b8:	e037883a 	mov	sp,fp
 10106bc:	dfc00117 	ldw	ra,4(sp)
 10106c0:	df000017 	ldw	fp,0(sp)
 10106c4:	dec00204 	addi	sp,sp,8
 10106c8:	f800283a 	ret

010106cc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 10106cc:	defff704 	addi	sp,sp,-36
 10106d0:	df000815 	stw	fp,32(sp)
 10106d4:	df000804 	addi	fp,sp,32
 10106d8:	e13ffe15 	stw	r4,-8(fp)
 10106dc:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 10106e0:	e0bffe17 	ldw	r2,-8(fp)
 10106e4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 10106e8:	e0bffd17 	ldw	r2,-12(fp)
 10106ec:	10800017 	ldw	r2,0(r2)
 10106f0:	e0bffc15 	stw	r2,-16(fp)
 10106f4:	00000006 	br	10106f8 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10106f8:	e0bffc17 	ldw	r2,-16(fp)
 10106fc:	10800104 	addi	r2,r2,4
 1010700:	10800037 	ldwio	r2,0(r2)
 1010704:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1010708:	e0bffb17 	ldw	r2,-20(fp)
 101070c:	1080c00c 	andi	r2,r2,768
 1010710:	1005003a 	cmpeq	r2,r2,zero
 1010714:	1000741e 	bne	r2,zero,10108e8 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1010718:	e0bffb17 	ldw	r2,-20(fp)
 101071c:	1080400c 	andi	r2,r2,256
 1010720:	1005003a 	cmpeq	r2,r2,zero
 1010724:	1000351e 	bne	r2,zero,10107fc <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1010728:	00800074 	movhi	r2,1
 101072c:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1010730:	e0bffd17 	ldw	r2,-12(fp)
 1010734:	10800a17 	ldw	r2,40(r2)
 1010738:	10800044 	addi	r2,r2,1
 101073c:	1081ffcc 	andi	r2,r2,2047
 1010740:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 1010744:	e0bffd17 	ldw	r2,-12(fp)
 1010748:	10c00b17 	ldw	r3,44(r2)
 101074c:	e0bff917 	ldw	r2,-28(fp)
 1010750:	18801626 	beq	r3,r2,10107ac <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1010754:	e0bffc17 	ldw	r2,-16(fp)
 1010758:	10800037 	ldwio	r2,0(r2)
 101075c:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1010760:	e0bffa17 	ldw	r2,-24(fp)
 1010764:	10a0000c 	andi	r2,r2,32768
 1010768:	1005003a 	cmpeq	r2,r2,zero
 101076c:	10000f1e 	bne	r2,zero,10107ac <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1010770:	e0bffd17 	ldw	r2,-12(fp)
 1010774:	10c00a17 	ldw	r3,40(r2)
 1010778:	e0bffa17 	ldw	r2,-24(fp)
 101077c:	1009883a 	mov	r4,r2
 1010780:	e0bffd17 	ldw	r2,-12(fp)
 1010784:	1885883a 	add	r2,r3,r2
 1010788:	10800e04 	addi	r2,r2,56
 101078c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1010790:	e0bffd17 	ldw	r2,-12(fp)
 1010794:	10800a17 	ldw	r2,40(r2)
 1010798:	10800044 	addi	r2,r2,1
 101079c:	10c1ffcc 	andi	r3,r2,2047
 10107a0:	e0bffd17 	ldw	r2,-12(fp)
 10107a4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 10107a8:	003fe106 	br	1010730 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 10107ac:	e0bffa17 	ldw	r2,-24(fp)
 10107b0:	10bfffec 	andhi	r2,r2,65535
 10107b4:	1005003a 	cmpeq	r2,r2,zero
 10107b8:	1000101e 	bne	r2,zero,10107fc <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10107bc:	e0bffd17 	ldw	r2,-12(fp)
 10107c0:	10c00817 	ldw	r3,32(r2)
 10107c4:	00bfff84 	movi	r2,-2
 10107c8:	1886703a 	and	r3,r3,r2
 10107cc:	e0bffd17 	ldw	r2,-12(fp)
 10107d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 10107d4:	e0bffc17 	ldw	r2,-16(fp)
 10107d8:	11000104 	addi	r4,r2,4
 10107dc:	e0bffd17 	ldw	r2,-12(fp)
 10107e0:	10800817 	ldw	r2,32(r2)
 10107e4:	1007883a 	mov	r3,r2
 10107e8:	2005883a 	mov	r2,r4
 10107ec:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10107f0:	e0bffc17 	ldw	r2,-16(fp)
 10107f4:	10800104 	addi	r2,r2,4
 10107f8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 10107fc:	e0bffb17 	ldw	r2,-20(fp)
 1010800:	1080800c 	andi	r2,r2,512
 1010804:	1005003a 	cmpeq	r2,r2,zero
 1010808:	103fbb1e 	bne	r2,zero,10106f8 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 101080c:	e0bffb17 	ldw	r2,-20(fp)
 1010810:	10bfffec 	andhi	r2,r2,65535
 1010814:	1004d43a 	srli	r2,r2,16
 1010818:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 101081c:	00001506 	br	1010874 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1010820:	e13ffc17 	ldw	r4,-16(fp)
 1010824:	e0bffd17 	ldw	r2,-12(fp)
 1010828:	10c00d17 	ldw	r3,52(r2)
 101082c:	e0bffd17 	ldw	r2,-12(fp)
 1010830:	1885883a 	add	r2,r3,r2
 1010834:	10820e04 	addi	r2,r2,2104
 1010838:	10800003 	ldbu	r2,0(r2)
 101083c:	10c03fcc 	andi	r3,r2,255
 1010840:	18c0201c 	xori	r3,r3,128
 1010844:	18ffe004 	addi	r3,r3,-128
 1010848:	2005883a 	mov	r2,r4
 101084c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1010850:	e0bffd17 	ldw	r2,-12(fp)
 1010854:	10800d17 	ldw	r2,52(r2)
 1010858:	10800044 	addi	r2,r2,1
 101085c:	10c1ffcc 	andi	r3,r2,2047
 1010860:	e0bffd17 	ldw	r2,-12(fp)
 1010864:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1010868:	e0bff817 	ldw	r2,-32(fp)
 101086c:	10bfffc4 	addi	r2,r2,-1
 1010870:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1010874:	e0bff817 	ldw	r2,-32(fp)
 1010878:	1005003a 	cmpeq	r2,r2,zero
 101087c:	1000051e 	bne	r2,zero,1010894 <altera_avalon_jtag_uart_irq+0x1c8>
 1010880:	e0bffd17 	ldw	r2,-12(fp)
 1010884:	10c00d17 	ldw	r3,52(r2)
 1010888:	e0bffd17 	ldw	r2,-12(fp)
 101088c:	10800c17 	ldw	r2,48(r2)
 1010890:	18bfe31e 	bne	r3,r2,1010820 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1010894:	e0bff817 	ldw	r2,-32(fp)
 1010898:	1005003a 	cmpeq	r2,r2,zero
 101089c:	103f961e 	bne	r2,zero,10106f8 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10108a0:	e0bffd17 	ldw	r2,-12(fp)
 10108a4:	10c00817 	ldw	r3,32(r2)
 10108a8:	00bfff44 	movi	r2,-3
 10108ac:	1886703a 	and	r3,r3,r2
 10108b0:	e0bffd17 	ldw	r2,-12(fp)
 10108b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10108b8:	e0bffd17 	ldw	r2,-12(fp)
 10108bc:	10800017 	ldw	r2,0(r2)
 10108c0:	11000104 	addi	r4,r2,4
 10108c4:	e0bffd17 	ldw	r2,-12(fp)
 10108c8:	10800817 	ldw	r2,32(r2)
 10108cc:	1007883a 	mov	r3,r2
 10108d0:	2005883a 	mov	r2,r4
 10108d4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10108d8:	e0bffc17 	ldw	r2,-16(fp)
 10108dc:	10800104 	addi	r2,r2,4
 10108e0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 10108e4:	003f8406 	br	10106f8 <altera_avalon_jtag_uart_irq+0x2c>
}
 10108e8:	e037883a 	mov	sp,fp
 10108ec:	df000017 	ldw	fp,0(sp)
 10108f0:	dec00104 	addi	sp,sp,4
 10108f4:	f800283a 	ret

010108f8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 10108f8:	defffc04 	addi	sp,sp,-16
 10108fc:	df000315 	stw	fp,12(sp)
 1010900:	df000304 	addi	fp,sp,12
 1010904:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1010908:	e0bfff17 	ldw	r2,-4(fp)
 101090c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1010910:	e0bffe17 	ldw	r2,-8(fp)
 1010914:	10800017 	ldw	r2,0(r2)
 1010918:	10800104 	addi	r2,r2,4
 101091c:	10800037 	ldwio	r2,0(r2)
 1010920:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1010924:	e0bffd17 	ldw	r2,-12(fp)
 1010928:	1081000c 	andi	r2,r2,1024
 101092c:	1005003a 	cmpeq	r2,r2,zero
 1010930:	10000c1e 	bne	r2,zero,1010964 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1010934:	e0bffe17 	ldw	r2,-8(fp)
 1010938:	10800017 	ldw	r2,0(r2)
 101093c:	11000104 	addi	r4,r2,4
 1010940:	e0bffe17 	ldw	r2,-8(fp)
 1010944:	10800817 	ldw	r2,32(r2)
 1010948:	10810014 	ori	r2,r2,1024
 101094c:	1007883a 	mov	r3,r2
 1010950:	2005883a 	mov	r2,r4
 1010954:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 1010958:	e0bffe17 	ldw	r2,-8(fp)
 101095c:	10000915 	stw	zero,36(r2)
 1010960:	00000a06 	br	101098c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1010964:	e0bffe17 	ldw	r2,-8(fp)
 1010968:	10c00917 	ldw	r3,36(r2)
 101096c:	00a00034 	movhi	r2,32768
 1010970:	10bfff04 	addi	r2,r2,-4
 1010974:	10c00536 	bltu	r2,r3,101098c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 1010978:	e0bffe17 	ldw	r2,-8(fp)
 101097c:	10800917 	ldw	r2,36(r2)
 1010980:	10c00044 	addi	r3,r2,1
 1010984:	e0bffe17 	ldw	r2,-8(fp)
 1010988:	10c00915 	stw	r3,36(r2)
 101098c:	00804074 	movhi	r2,257
 1010990:	109a6304 	addi	r2,r2,27020
 1010994:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1010998:	e037883a 	mov	sp,fp
 101099c:	df000017 	ldw	fp,0(sp)
 10109a0:	dec00104 	addi	sp,sp,4
 10109a4:	f800283a 	ret

010109a8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 10109a8:	defffc04 	addi	sp,sp,-16
 10109ac:	df000315 	stw	fp,12(sp)
 10109b0:	df000304 	addi	fp,sp,12
 10109b4:	e13ffd15 	stw	r4,-12(fp)
 10109b8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10109bc:	00000706 	br	10109dc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 10109c0:	e0bffe17 	ldw	r2,-8(fp)
 10109c4:	1090000c 	andi	r2,r2,16384
 10109c8:	1005003a 	cmpeq	r2,r2,zero
 10109cc:	1000031e 	bne	r2,zero,10109dc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 10109d0:	00bffd44 	movi	r2,-11
 10109d4:	e0bfff15 	stw	r2,-4(fp)
 10109d8:	00000b06 	br	1010a08 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10109dc:	e0bffd17 	ldw	r2,-12(fp)
 10109e0:	10c00d17 	ldw	r3,52(r2)
 10109e4:	e0bffd17 	ldw	r2,-12(fp)
 10109e8:	10800c17 	ldw	r2,48(r2)
 10109ec:	18800526 	beq	r3,r2,1010a04 <altera_avalon_jtag_uart_close+0x5c>
 10109f0:	e0bffd17 	ldw	r2,-12(fp)
 10109f4:	10c00917 	ldw	r3,36(r2)
 10109f8:	e0bffd17 	ldw	r2,-12(fp)
 10109fc:	10800117 	ldw	r2,4(r2)
 1010a00:	18bfef36 	bltu	r3,r2,10109c0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1010a04:	e03fff15 	stw	zero,-4(fp)
 1010a08:	e0bfff17 	ldw	r2,-4(fp)
}
 1010a0c:	e037883a 	mov	sp,fp
 1010a10:	df000017 	ldw	fp,0(sp)
 1010a14:	dec00104 	addi	sp,sp,4
 1010a18:	f800283a 	ret

01010a1c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1010a1c:	defff804 	addi	sp,sp,-32
 1010a20:	df000715 	stw	fp,28(sp)
 1010a24:	df000704 	addi	fp,sp,28
 1010a28:	e13ffb15 	stw	r4,-20(fp)
 1010a2c:	e17ffc15 	stw	r5,-16(fp)
 1010a30:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1010a34:	00bff9c4 	movi	r2,-25
 1010a38:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1010a3c:	e0bffc17 	ldw	r2,-16(fp)
 1010a40:	e0bfff15 	stw	r2,-4(fp)
 1010a44:	e0ffff17 	ldw	r3,-4(fp)
 1010a48:	189a8060 	cmpeqi	r2,r3,27137
 1010a4c:	1000041e 	bne	r2,zero,1010a60 <altera_avalon_jtag_uart_ioctl+0x44>
 1010a50:	e0ffff17 	ldw	r3,-4(fp)
 1010a54:	189a80a0 	cmpeqi	r2,r3,27138
 1010a58:	10001b1e 	bne	r2,zero,1010ac8 <altera_avalon_jtag_uart_ioctl+0xac>
 1010a5c:	00002706 	br	1010afc <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1010a60:	e0bffb17 	ldw	r2,-20(fp)
 1010a64:	10c00117 	ldw	r3,4(r2)
 1010a68:	00a00034 	movhi	r2,32768
 1010a6c:	10bfffc4 	addi	r2,r2,-1
 1010a70:	18802226 	beq	r3,r2,1010afc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 1010a74:	e0bffd17 	ldw	r2,-12(fp)
 1010a78:	10800017 	ldw	r2,0(r2)
 1010a7c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1010a80:	e0bff917 	ldw	r2,-28(fp)
 1010a84:	10800090 	cmplti	r2,r2,2
 1010a88:	1000071e 	bne	r2,zero,1010aa8 <altera_avalon_jtag_uart_ioctl+0x8c>
 1010a8c:	e0fff917 	ldw	r3,-28(fp)
 1010a90:	00a00034 	movhi	r2,32768
 1010a94:	10bfffc4 	addi	r2,r2,-1
 1010a98:	18800326 	beq	r3,r2,1010aa8 <altera_avalon_jtag_uart_ioctl+0x8c>
 1010a9c:	e0bff917 	ldw	r2,-28(fp)
 1010aa0:	e0bffe15 	stw	r2,-8(fp)
 1010aa4:	00000306 	br	1010ab4 <altera_avalon_jtag_uart_ioctl+0x98>
 1010aa8:	00e00034 	movhi	r3,32768
 1010aac:	18ffff84 	addi	r3,r3,-2
 1010ab0:	e0fffe15 	stw	r3,-8(fp)
 1010ab4:	e0bffb17 	ldw	r2,-20(fp)
 1010ab8:	e0fffe17 	ldw	r3,-8(fp)
 1010abc:	10c00115 	stw	r3,4(r2)
      rc = 0;
 1010ac0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 1010ac4:	00000d06 	br	1010afc <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1010ac8:	e0bffb17 	ldw	r2,-20(fp)
 1010acc:	10c00117 	ldw	r3,4(r2)
 1010ad0:	00a00034 	movhi	r2,32768
 1010ad4:	10bfffc4 	addi	r2,r2,-1
 1010ad8:	18800826 	beq	r3,r2,1010afc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1010adc:	e13ffd17 	ldw	r4,-12(fp)
 1010ae0:	e0bffb17 	ldw	r2,-20(fp)
 1010ae4:	10c00917 	ldw	r3,36(r2)
 1010ae8:	e0bffb17 	ldw	r2,-20(fp)
 1010aec:	10800117 	ldw	r2,4(r2)
 1010af0:	1885803a 	cmpltu	r2,r3,r2
 1010af4:	20800015 	stw	r2,0(r4)
      rc = 0;
 1010af8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 1010afc:	e0bffa17 	ldw	r2,-24(fp)
}
 1010b00:	e037883a 	mov	sp,fp
 1010b04:	df000017 	ldw	fp,0(sp)
 1010b08:	dec00104 	addi	sp,sp,4
 1010b0c:	f800283a 	ret

01010b10 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1010b10:	defff204 	addi	sp,sp,-56
 1010b14:	dfc00d15 	stw	ra,52(sp)
 1010b18:	df000c15 	stw	fp,48(sp)
 1010b1c:	df000c04 	addi	fp,sp,48
 1010b20:	e13ffb15 	stw	r4,-20(fp)
 1010b24:	e17ffc15 	stw	r5,-16(fp)
 1010b28:	e1bffd15 	stw	r6,-12(fp)
 1010b2c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1010b30:	e0bffc17 	ldw	r2,-16(fp)
 1010b34:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1010b38:	00004806 	br	1010c5c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1010b3c:	e0bffb17 	ldw	r2,-20(fp)
 1010b40:	10800a17 	ldw	r2,40(r2)
 1010b44:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1010b48:	e0bffb17 	ldw	r2,-20(fp)
 1010b4c:	10800b17 	ldw	r2,44(r2)
 1010b50:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 1010b54:	e0fff717 	ldw	r3,-36(fp)
 1010b58:	e0bff617 	ldw	r2,-40(fp)
 1010b5c:	18800536 	bltu	r3,r2,1010b74 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 1010b60:	e0bff717 	ldw	r2,-36(fp)
 1010b64:	e0fff617 	ldw	r3,-40(fp)
 1010b68:	10c5c83a 	sub	r2,r2,r3
 1010b6c:	e0bff815 	stw	r2,-32(fp)
 1010b70:	00000406 	br	1010b84 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1010b74:	00820004 	movi	r2,2048
 1010b78:	e0fff617 	ldw	r3,-40(fp)
 1010b7c:	10c5c83a 	sub	r2,r2,r3
 1010b80:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1010b84:	e0bff817 	ldw	r2,-32(fp)
 1010b88:	1005003a 	cmpeq	r2,r2,zero
 1010b8c:	10001f1e 	bne	r2,zero,1010c0c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 1010b90:	e0fffd17 	ldw	r3,-12(fp)
 1010b94:	e0bff817 	ldw	r2,-32(fp)
 1010b98:	1880022e 	bgeu	r3,r2,1010ba4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 1010b9c:	e0bffd17 	ldw	r2,-12(fp)
 1010ba0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1010ba4:	e0bffb17 	ldw	r2,-20(fp)
 1010ba8:	10c00e04 	addi	r3,r2,56
 1010bac:	e0bff617 	ldw	r2,-40(fp)
 1010bb0:	1887883a 	add	r3,r3,r2
 1010bb4:	e0bffa17 	ldw	r2,-24(fp)
 1010bb8:	1009883a 	mov	r4,r2
 1010bbc:	180b883a 	mov	r5,r3
 1010bc0:	e1bff817 	ldw	r6,-32(fp)
 1010bc4:	10079540 	call	1007954 <memcpy>
      ptr   += n;
 1010bc8:	e0fff817 	ldw	r3,-32(fp)
 1010bcc:	e0bffa17 	ldw	r2,-24(fp)
 1010bd0:	10c5883a 	add	r2,r2,r3
 1010bd4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 1010bd8:	e0fffd17 	ldw	r3,-12(fp)
 1010bdc:	e0bff817 	ldw	r2,-32(fp)
 1010be0:	1885c83a 	sub	r2,r3,r2
 1010be4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1010be8:	e0fff617 	ldw	r3,-40(fp)
 1010bec:	e0bff817 	ldw	r2,-32(fp)
 1010bf0:	1885883a 	add	r2,r3,r2
 1010bf4:	10c1ffcc 	andi	r3,r2,2047
 1010bf8:	e0bffb17 	ldw	r2,-20(fp)
 1010bfc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1010c00:	e0bffd17 	ldw	r2,-12(fp)
 1010c04:	10800048 	cmpgei	r2,r2,1
 1010c08:	103fcc1e 	bne	r2,zero,1010b3c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 1010c0c:	e0fffa17 	ldw	r3,-24(fp)
 1010c10:	e0bffc17 	ldw	r2,-16(fp)
 1010c14:	1880141e 	bne	r3,r2,1010c68 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1010c18:	e0bffe17 	ldw	r2,-8(fp)
 1010c1c:	1090000c 	andi	r2,r2,16384
 1010c20:	1004c03a 	cmpne	r2,r2,zero
 1010c24:	1000101e 	bne	r2,zero,1010c68 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1010c28:	e0bffb17 	ldw	r2,-20(fp)
 1010c2c:	10c00a17 	ldw	r3,40(r2)
 1010c30:	e0bff717 	ldw	r2,-36(fp)
 1010c34:	1880051e 	bne	r3,r2,1010c4c <altera_avalon_jtag_uart_read+0x13c>
 1010c38:	e0bffb17 	ldw	r2,-20(fp)
 1010c3c:	10c00917 	ldw	r3,36(r2)
 1010c40:	e0bffb17 	ldw	r2,-20(fp)
 1010c44:	10800117 	ldw	r2,4(r2)
 1010c48:	18bff736 	bltu	r3,r2,1010c28 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1010c4c:	e0bffb17 	ldw	r2,-20(fp)
 1010c50:	10c00a17 	ldw	r3,40(r2)
 1010c54:	e0bff717 	ldw	r2,-36(fp)
 1010c58:	18800326 	beq	r3,r2,1010c68 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1010c5c:	e0bffd17 	ldw	r2,-12(fp)
 1010c60:	10800048 	cmpgei	r2,r2,1
 1010c64:	103fb51e 	bne	r2,zero,1010b3c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1010c68:	e0fffa17 	ldw	r3,-24(fp)
 1010c6c:	e0bffc17 	ldw	r2,-16(fp)
 1010c70:	18801926 	beq	r3,r2,1010cd8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010c74:	0005303a 	rdctl	r2,status
 1010c78:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010c7c:	e0fff517 	ldw	r3,-44(fp)
 1010c80:	00bfff84 	movi	r2,-2
 1010c84:	1884703a 	and	r2,r3,r2
 1010c88:	1001703a 	wrctl	status,r2
  
  return context;
 1010c8c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1010c90:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1010c94:	e0bffb17 	ldw	r2,-20(fp)
 1010c98:	10800817 	ldw	r2,32(r2)
 1010c9c:	10c00054 	ori	r3,r2,1
 1010ca0:	e0bffb17 	ldw	r2,-20(fp)
 1010ca4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1010ca8:	e0bffb17 	ldw	r2,-20(fp)
 1010cac:	10800017 	ldw	r2,0(r2)
 1010cb0:	11000104 	addi	r4,r2,4
 1010cb4:	e0bffb17 	ldw	r2,-20(fp)
 1010cb8:	10800817 	ldw	r2,32(r2)
 1010cbc:	1007883a 	mov	r3,r2
 1010cc0:	2005883a 	mov	r2,r4
 1010cc4:	10c00035 	stwio	r3,0(r2)
 1010cc8:	e0bff917 	ldw	r2,-28(fp)
 1010ccc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010cd0:	e0bff417 	ldw	r2,-48(fp)
 1010cd4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1010cd8:	e0fffa17 	ldw	r3,-24(fp)
 1010cdc:	e0bffc17 	ldw	r2,-16(fp)
 1010ce0:	18800526 	beq	r3,r2,1010cf8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 1010ce4:	e0fffa17 	ldw	r3,-24(fp)
 1010ce8:	e0bffc17 	ldw	r2,-16(fp)
 1010cec:	1887c83a 	sub	r3,r3,r2
 1010cf0:	e0ffff15 	stw	r3,-4(fp)
 1010cf4:	00000906 	br	1010d1c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 1010cf8:	e0bffe17 	ldw	r2,-8(fp)
 1010cfc:	1090000c 	andi	r2,r2,16384
 1010d00:	1005003a 	cmpeq	r2,r2,zero
 1010d04:	1000031e 	bne	r2,zero,1010d14 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1010d08:	00bffd44 	movi	r2,-11
 1010d0c:	e0bfff15 	stw	r2,-4(fp)
 1010d10:	00000206 	br	1010d1c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 1010d14:	00bffec4 	movi	r2,-5
 1010d18:	e0bfff15 	stw	r2,-4(fp)
 1010d1c:	e0bfff17 	ldw	r2,-4(fp)
}
 1010d20:	e037883a 	mov	sp,fp
 1010d24:	dfc00117 	ldw	ra,4(sp)
 1010d28:	df000017 	ldw	fp,0(sp)
 1010d2c:	dec00204 	addi	sp,sp,8
 1010d30:	f800283a 	ret

01010d34 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1010d34:	defff204 	addi	sp,sp,-56
 1010d38:	dfc00d15 	stw	ra,52(sp)
 1010d3c:	df000c15 	stw	fp,48(sp)
 1010d40:	df000c04 	addi	fp,sp,48
 1010d44:	e13ffb15 	stw	r4,-20(fp)
 1010d48:	e17ffc15 	stw	r5,-16(fp)
 1010d4c:	e1bffd15 	stw	r6,-12(fp)
 1010d50:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1010d54:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1010d58:	e0bffc17 	ldw	r2,-16(fp)
 1010d5c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1010d60:	00003a06 	br	1010e4c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1010d64:	e0bffb17 	ldw	r2,-20(fp)
 1010d68:	10800c17 	ldw	r2,48(r2)
 1010d6c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 1010d70:	e0bffb17 	ldw	r2,-20(fp)
 1010d74:	10800d17 	ldw	r2,52(r2)
 1010d78:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 1010d7c:	e0fffa17 	ldw	r3,-24(fp)
 1010d80:	e0bff917 	ldw	r2,-28(fp)
 1010d84:	1880062e 	bgeu	r3,r2,1010da0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1010d88:	e0fff917 	ldw	r3,-28(fp)
 1010d8c:	e0bffa17 	ldw	r2,-24(fp)
 1010d90:	1885c83a 	sub	r2,r3,r2
 1010d94:	10bfffc4 	addi	r2,r2,-1
 1010d98:	e0bff815 	stw	r2,-32(fp)
 1010d9c:	00000c06 	br	1010dd0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 1010da0:	e0bff917 	ldw	r2,-28(fp)
 1010da4:	1005003a 	cmpeq	r2,r2,zero
 1010da8:	1000051e 	bne	r2,zero,1010dc0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1010dac:	00820004 	movi	r2,2048
 1010db0:	e0fffa17 	ldw	r3,-24(fp)
 1010db4:	10c5c83a 	sub	r2,r2,r3
 1010db8:	e0bff815 	stw	r2,-32(fp)
 1010dbc:	00000406 	br	1010dd0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1010dc0:	0081ffc4 	movi	r2,2047
 1010dc4:	e0fffa17 	ldw	r3,-24(fp)
 1010dc8:	10c5c83a 	sub	r2,r2,r3
 1010dcc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1010dd0:	e0bff817 	ldw	r2,-32(fp)
 1010dd4:	1005003a 	cmpeq	r2,r2,zero
 1010dd8:	10001f1e 	bne	r2,zero,1010e58 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 1010ddc:	e0fffd17 	ldw	r3,-12(fp)
 1010de0:	e0bff817 	ldw	r2,-32(fp)
 1010de4:	1880022e 	bgeu	r3,r2,1010df0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 1010de8:	e0bffd17 	ldw	r2,-12(fp)
 1010dec:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1010df0:	e0bffb17 	ldw	r2,-20(fp)
 1010df4:	10c20e04 	addi	r3,r2,2104
 1010df8:	e0bffa17 	ldw	r2,-24(fp)
 1010dfc:	1885883a 	add	r2,r3,r2
 1010e00:	e0fffc17 	ldw	r3,-16(fp)
 1010e04:	1009883a 	mov	r4,r2
 1010e08:	180b883a 	mov	r5,r3
 1010e0c:	e1bff817 	ldw	r6,-32(fp)
 1010e10:	10079540 	call	1007954 <memcpy>
      ptr   += n;
 1010e14:	e0fff817 	ldw	r3,-32(fp)
 1010e18:	e0bffc17 	ldw	r2,-16(fp)
 1010e1c:	10c5883a 	add	r2,r2,r3
 1010e20:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1010e24:	e0fffd17 	ldw	r3,-12(fp)
 1010e28:	e0bff817 	ldw	r2,-32(fp)
 1010e2c:	1885c83a 	sub	r2,r3,r2
 1010e30:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1010e34:	e0fffa17 	ldw	r3,-24(fp)
 1010e38:	e0bff817 	ldw	r2,-32(fp)
 1010e3c:	1885883a 	add	r2,r3,r2
 1010e40:	10c1ffcc 	andi	r3,r2,2047
 1010e44:	e0bffb17 	ldw	r2,-20(fp)
 1010e48:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1010e4c:	e0bffd17 	ldw	r2,-12(fp)
 1010e50:	10800048 	cmpgei	r2,r2,1
 1010e54:	103fc31e 	bne	r2,zero,1010d64 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010e58:	0005303a 	rdctl	r2,status
 1010e5c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010e60:	e0fff517 	ldw	r3,-44(fp)
 1010e64:	00bfff84 	movi	r2,-2
 1010e68:	1884703a 	and	r2,r3,r2
 1010e6c:	1001703a 	wrctl	status,r2
  
  return context;
 1010e70:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1010e74:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1010e78:	e0bffb17 	ldw	r2,-20(fp)
 1010e7c:	10800817 	ldw	r2,32(r2)
 1010e80:	10c00094 	ori	r3,r2,2
 1010e84:	e0bffb17 	ldw	r2,-20(fp)
 1010e88:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1010e8c:	e0bffb17 	ldw	r2,-20(fp)
 1010e90:	10800017 	ldw	r2,0(r2)
 1010e94:	11000104 	addi	r4,r2,4
 1010e98:	e0bffb17 	ldw	r2,-20(fp)
 1010e9c:	10800817 	ldw	r2,32(r2)
 1010ea0:	1007883a 	mov	r3,r2
 1010ea4:	2005883a 	mov	r2,r4
 1010ea8:	10c00035 	stwio	r3,0(r2)
 1010eac:	e0bff717 	ldw	r2,-36(fp)
 1010eb0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010eb4:	e0bff417 	ldw	r2,-48(fp)
 1010eb8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1010ebc:	e0bffd17 	ldw	r2,-12(fp)
 1010ec0:	10800050 	cmplti	r2,r2,1
 1010ec4:	1000111e 	bne	r2,zero,1010f0c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 1010ec8:	e0bffe17 	ldw	r2,-8(fp)
 1010ecc:	1090000c 	andi	r2,r2,16384
 1010ed0:	1004c03a 	cmpne	r2,r2,zero
 1010ed4:	1000101e 	bne	r2,zero,1010f18 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1010ed8:	e0bffb17 	ldw	r2,-20(fp)
 1010edc:	10c00d17 	ldw	r3,52(r2)
 1010ee0:	e0bff917 	ldw	r2,-28(fp)
 1010ee4:	1880051e 	bne	r3,r2,1010efc <altera_avalon_jtag_uart_write+0x1c8>
 1010ee8:	e0bffb17 	ldw	r2,-20(fp)
 1010eec:	10c00917 	ldw	r3,36(r2)
 1010ef0:	e0bffb17 	ldw	r2,-20(fp)
 1010ef4:	10800117 	ldw	r2,4(r2)
 1010ef8:	18bff736 	bltu	r3,r2,1010ed8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 1010efc:	e0bffb17 	ldw	r2,-20(fp)
 1010f00:	10c00d17 	ldw	r3,52(r2)
 1010f04:	e0bff917 	ldw	r2,-28(fp)
 1010f08:	18800326 	beq	r3,r2,1010f18 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 1010f0c:	e0bffd17 	ldw	r2,-12(fp)
 1010f10:	10800048 	cmpgei	r2,r2,1
 1010f14:	103fcd1e 	bne	r2,zero,1010e4c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1010f18:	e0fffc17 	ldw	r3,-16(fp)
 1010f1c:	e0bff617 	ldw	r2,-40(fp)
 1010f20:	18800526 	beq	r3,r2,1010f38 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 1010f24:	e0fffc17 	ldw	r3,-16(fp)
 1010f28:	e0bff617 	ldw	r2,-40(fp)
 1010f2c:	1887c83a 	sub	r3,r3,r2
 1010f30:	e0ffff15 	stw	r3,-4(fp)
 1010f34:	00000906 	br	1010f5c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 1010f38:	e0bffe17 	ldw	r2,-8(fp)
 1010f3c:	1090000c 	andi	r2,r2,16384
 1010f40:	1005003a 	cmpeq	r2,r2,zero
 1010f44:	1000031e 	bne	r2,zero,1010f54 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 1010f48:	00bffd44 	movi	r2,-11
 1010f4c:	e0bfff15 	stw	r2,-4(fp)
 1010f50:	00000206 	br	1010f5c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1010f54:	00bffec4 	movi	r2,-5
 1010f58:	e0bfff15 	stw	r2,-4(fp)
 1010f5c:	e0bfff17 	ldw	r2,-4(fp)
}
 1010f60:	e037883a 	mov	sp,fp
 1010f64:	dfc00117 	ldw	ra,4(sp)
 1010f68:	df000017 	ldw	fp,0(sp)
 1010f6c:	dec00204 	addi	sp,sp,8
 1010f70:	f800283a 	ret

01010f74 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1010f74:	defff904 	addi	sp,sp,-28
 1010f78:	dfc00615 	stw	ra,24(sp)
 1010f7c:	df000515 	stw	fp,20(sp)
 1010f80:	df000504 	addi	fp,sp,20
 1010f84:	e13ffe15 	stw	r4,-8(fp)
 1010f88:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1010f8c:	e0bffe17 	ldw	r2,-8(fp)
 1010f90:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1010f94:	e0bffe17 	ldw	r2,-8(fp)
 1010f98:	10800104 	addi	r2,r2,4
 1010f9c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010fa0:	0005303a 	rdctl	r2,status
 1010fa4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010fa8:	e0fffc17 	ldw	r3,-16(fp)
 1010fac:	00bfff84 	movi	r2,-2
 1010fb0:	1884703a 	and	r2,r3,r2
 1010fb4:	1001703a 	wrctl	status,r2
  
  return context;
 1010fb8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 1010fbc:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 1010fc0:	10123c80 	call	10123c8 <alt_tick>
 1010fc4:	e0bffd17 	ldw	r2,-12(fp)
 1010fc8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010fcc:	e0bffb17 	ldw	r2,-20(fp)
 1010fd0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1010fd4:	e037883a 	mov	sp,fp
 1010fd8:	dfc00117 	ldw	ra,4(sp)
 1010fdc:	df000017 	ldw	fp,0(sp)
 1010fe0:	dec00204 	addi	sp,sp,8
 1010fe4:	f800283a 	ret

01010fe8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1010fe8:	defff904 	addi	sp,sp,-28
 1010fec:	dfc00615 	stw	ra,24(sp)
 1010ff0:	df000515 	stw	fp,20(sp)
 1010ff4:	df000504 	addi	fp,sp,20
 1010ff8:	e13ffc15 	stw	r4,-16(fp)
 1010ffc:	e17ffd15 	stw	r5,-12(fp)
 1011000:	e1bffe15 	stw	r6,-8(fp)
 1011004:	e1ffff15 	stw	r7,-4(fp)
 1011008:	e0bfff17 	ldw	r2,-4(fp)
 101100c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1011010:	00804074 	movhi	r2,257
 1011014:	109a6304 	addi	r2,r2,27020
 1011018:	10800017 	ldw	r2,0(r2)
 101101c:	1004c03a 	cmpne	r2,r2,zero
 1011020:	1000041e 	bne	r2,zero,1011034 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 1011024:	00c04074 	movhi	r3,257
 1011028:	18da6304 	addi	r3,r3,27020
 101102c:	e0bffb17 	ldw	r2,-20(fp)
 1011030:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1011034:	e0bffc17 	ldw	r2,-16(fp)
 1011038:	10800104 	addi	r2,r2,4
 101103c:	1007883a 	mov	r3,r2
 1011040:	008001c4 	movi	r2,7
 1011044:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 1011048:	e13ffe17 	ldw	r4,-8(fp)
 101104c:	e17ffc17 	ldw	r5,-16(fp)
 1011050:	01804074 	movhi	r6,257
 1011054:	3183dd04 	addi	r6,r6,3956
 1011058:	1011eac0 	call	1011eac <alt_irq_register>
#endif  
}
 101105c:	e037883a 	mov	sp,fp
 1011060:	dfc00117 	ldw	ra,4(sp)
 1011064:	df000017 	ldw	fp,0(sp)
 1011068:	dec00204 	addi	sp,sp,8
 101106c:	f800283a 	ret

01011070 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 1011070:	defffc04 	addi	sp,sp,-16
 1011074:	df000315 	stw	fp,12(sp)
 1011078:	df000304 	addi	fp,sp,12
 101107c:	e13ffe15 	stw	r4,-8(fp)
 1011080:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 1011084:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 1011088:	e0bfff17 	ldw	r2,-4(fp)
 101108c:	1004c03a 	cmpne	r2,r2,zero
 1011090:	1000061e 	bne	r2,zero,10110ac <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 1011094:	e0bffe17 	ldw	r2,-8(fp)
 1011098:	1007883a 	mov	r3,r2
 101109c:	e0bffd03 	ldbu	r2,-12(fp)
 10110a0:	10c4b03a 	or	r2,r2,r3
 10110a4:	e0bffd05 	stb	r2,-12(fp)
 10110a8:	00000806 	br	10110cc <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 10110ac:	e0bffe17 	ldw	r2,-8(fp)
 10110b0:	1007883a 	mov	r3,r2
 10110b4:	e0bffd03 	ldbu	r2,-12(fp)
 10110b8:	10c4b03a 	or	r2,r2,r3
 10110bc:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 10110c0:	e0bffd03 	ldbu	r2,-12(fp)
 10110c4:	10801014 	ori	r2,r2,64
 10110c8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 10110cc:	e0fffd03 	ldbu	r3,-12(fp)
 10110d0:	00bfe004 	movi	r2,-128
 10110d4:	1884b03a 	or	r2,r3,r2
 10110d8:	10803fcc 	andi	r2,r2,255
}
 10110dc:	e037883a 	mov	sp,fp
 10110e0:	df000017 	ldw	fp,0(sp)
 10110e4:	dec00104 	addi	sp,sp,4
 10110e8:	f800283a 	ret

010110ec <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 10110ec:	defffd04 	addi	sp,sp,-12
 10110f0:	df000215 	stw	fp,8(sp)
 10110f4:	df000204 	addi	fp,sp,8
 10110f8:	e13ffe15 	stw	r4,-8(fp)
 10110fc:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 1011100:	e0bffe17 	ldw	r2,-8(fp)
 1011104:	10800a17 	ldw	r2,40(r2)
 1011108:	e0ffff03 	ldbu	r3,-4(fp)
 101110c:	10c00025 	stbio	r3,0(r2)
}
 1011110:	e037883a 	mov	sp,fp
 1011114:	df000017 	ldw	fp,0(sp)
 1011118:	dec00104 	addi	sp,sp,4
 101111c:	f800283a 	ret

01011120 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 1011120:	defffe04 	addi	sp,sp,-8
 1011124:	df000115 	stw	fp,4(sp)
 1011128:	df000104 	addi	fp,sp,4
 101112c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 1011130:	e0bfff17 	ldw	r2,-4(fp)
 1011134:	10800a17 	ldw	r2,40(r2)
 1011138:	1007883a 	mov	r3,r2
 101113c:	00800044 	movi	r2,1
 1011140:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 1011144:	e037883a 	mov	sp,fp
 1011148:	df000017 	ldw	fp,0(sp)
 101114c:	dec00104 	addi	sp,sp,4
 1011150:	f800283a 	ret

01011154 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 1011154:	defffc04 	addi	sp,sp,-16
 1011158:	dfc00315 	stw	ra,12(sp)
 101115c:	df000215 	stw	fp,8(sp)
 1011160:	df000204 	addi	fp,sp,8
 1011164:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 1011168:	e13fff17 	ldw	r4,-4(fp)
 101116c:	01404074 	movhi	r5,257
 1011170:	29539804 	addi	r5,r5,20064
 1011174:	1011cac0 	call	1011cac <alt_find_dev>
 1011178:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 101117c:	e0bffe17 	ldw	r2,-8(fp)
}
 1011180:	e037883a 	mov	sp,fp
 1011184:	dfc00117 	ldw	ra,4(sp)
 1011188:	df000017 	ldw	fp,0(sp)
 101118c:	dec00204 	addi	sp,sp,8
 1011190:	f800283a 	ret

01011194 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 1011194:	defffb04 	addi	sp,sp,-20
 1011198:	df000415 	stw	fp,16(sp)
 101119c:	df000404 	addi	fp,sp,16
 10111a0:	e13ffd15 	stw	r4,-12(fp)
 10111a4:	e17ffe15 	stw	r5,-8(fp)
 10111a8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 10111ac:	e03ffc15 	stw	zero,-16(fp)
 10111b0:	00000f06 	br	10111f0 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 10111b4:	e0bffd17 	ldw	r2,-12(fp)
 10111b8:	10800a17 	ldw	r2,40(r2)
 10111bc:	11000044 	addi	r4,r2,1
 10111c0:	e0fffc17 	ldw	r3,-16(fp)
 10111c4:	e0bffe17 	ldw	r2,-8(fp)
 10111c8:	1885883a 	add	r2,r3,r2
 10111cc:	10800003 	ldbu	r2,0(r2)
 10111d0:	10c03fcc 	andi	r3,r2,255
 10111d4:	18c0201c 	xori	r3,r3,128
 10111d8:	18ffe004 	addi	r3,r3,-128
 10111dc:	2005883a 	mov	r2,r4
 10111e0:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 10111e4:	e0bffc17 	ldw	r2,-16(fp)
 10111e8:	10800044 	addi	r2,r2,1
 10111ec:	e0bffc15 	stw	r2,-16(fp)
 10111f0:	e0fffc17 	ldw	r3,-16(fp)
 10111f4:	e0bfff17 	ldw	r2,-4(fp)
 10111f8:	18bfee36 	bltu	r3,r2,10111b4 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 10111fc:	e037883a 	mov	sp,fp
 1011200:	df000017 	ldw	fp,0(sp)
 1011204:	dec00104 	addi	sp,sp,4
 1011208:	f800283a 	ret

0101120c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 101120c:	defffd04 	addi	sp,sp,-12
 1011210:	df000215 	stw	fp,8(sp)
 1011214:	df000204 	addi	fp,sp,8
 1011218:	e13ffe15 	stw	r4,-8(fp)
 101121c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 1011220:	00000d06 	br	1011258 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 1011224:	e0bffe17 	ldw	r2,-8(fp)
 1011228:	10800a17 	ldw	r2,40(r2)
 101122c:	11000044 	addi	r4,r2,1
 1011230:	e0bfff17 	ldw	r2,-4(fp)
 1011234:	10800003 	ldbu	r2,0(r2)
 1011238:	10c03fcc 	andi	r3,r2,255
 101123c:	18c0201c 	xori	r3,r3,128
 1011240:	18ffe004 	addi	r3,r3,-128
 1011244:	2005883a 	mov	r2,r4
 1011248:	10c00025 	stbio	r3,0(r2)
		++ptr;
 101124c:	e0bfff17 	ldw	r2,-4(fp)
 1011250:	10800044 	addi	r2,r2,1
 1011254:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 1011258:	e0bfff17 	ldw	r2,-4(fp)
 101125c:	10800003 	ldbu	r2,0(r2)
 1011260:	10803fcc 	andi	r2,r2,255
 1011264:	1080201c 	xori	r2,r2,128
 1011268:	10bfe004 	addi	r2,r2,-128
 101126c:	1004c03a 	cmpne	r2,r2,zero
 1011270:	103fec1e 	bne	r2,zero,1011224 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 1011274:	e037883a 	mov	sp,fp
 1011278:	df000017 	ldw	fp,0(sp)
 101127c:	dec00104 	addi	sp,sp,4
 1011280:	f800283a 	ret

01011284 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 1011284:	defffb04 	addi	sp,sp,-20
 1011288:	dfc00415 	stw	ra,16(sp)
 101128c:	df000315 	stw	fp,12(sp)
 1011290:	df000304 	addi	fp,sp,12
 1011294:	e13ffd15 	stw	r4,-12(fp)
 1011298:	e17ffe15 	stw	r5,-8(fp)
 101129c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 10112a0:	e0bffd17 	ldw	r2,-12(fp)
 10112a4:	10800017 	ldw	r2,0(r2)
 10112a8:	1009883a 	mov	r4,r2
 10112ac:	e1bfff17 	ldw	r6,-4(fp)
 10112b0:	e17ffe17 	ldw	r5,-8(fp)
 10112b4:	10111940 	call	1011194 <alt_up_character_lcd_write>
	return 0;
 10112b8:	0005883a 	mov	r2,zero
}
 10112bc:	e037883a 	mov	sp,fp
 10112c0:	dfc00117 	ldw	ra,4(sp)
 10112c4:	df000017 	ldw	fp,0(sp)
 10112c8:	dec00204 	addi	sp,sp,8
 10112cc:	f800283a 	ret

010112d0 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 10112d0:	defff904 	addi	sp,sp,-28
 10112d4:	dfc00615 	stw	ra,24(sp)
 10112d8:	df000515 	stw	fp,20(sp)
 10112dc:	df000504 	addi	fp,sp,20
 10112e0:	e13ffc15 	stw	r4,-16(fp)
 10112e4:	e17ffd15 	stw	r5,-12(fp)
 10112e8:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 10112ec:	e0bffd17 	ldw	r2,-12(fp)
 10112f0:	10800a28 	cmpgeui	r2,r2,40
 10112f4:	1000031e 	bne	r2,zero,1011304 <alt_up_character_lcd_set_cursor_pos+0x34>
 10112f8:	e0bffe17 	ldw	r2,-8(fp)
 10112fc:	108000b0 	cmpltui	r2,r2,2
 1011300:	1000031e 	bne	r2,zero,1011310 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 1011304:	00bfffc4 	movi	r2,-1
 1011308:	e0bfff15 	stw	r2,-4(fp)
 101130c:	00000806 	br	1011330 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1011310:	e13ffd17 	ldw	r4,-12(fp)
 1011314:	e17ffe17 	ldw	r5,-8(fp)
 1011318:	10110700 	call	1011070 <get_DDRAM_addr>
 101131c:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 1011320:	e17ffb03 	ldbu	r5,-20(fp)
 1011324:	e13ffc17 	ldw	r4,-16(fp)
 1011328:	10110ec0 	call	10110ec <alt_up_character_lcd_send_cmd>
	return 0;
 101132c:	e03fff15 	stw	zero,-4(fp)
 1011330:	e0bfff17 	ldw	r2,-4(fp)
}
 1011334:	e037883a 	mov	sp,fp
 1011338:	dfc00117 	ldw	ra,4(sp)
 101133c:	df000017 	ldw	fp,0(sp)
 1011340:	dec00204 	addi	sp,sp,8
 1011344:	f800283a 	ret

01011348 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1011348:	defff904 	addi	sp,sp,-28
 101134c:	dfc00615 	stw	ra,24(sp)
 1011350:	df000515 	stw	fp,20(sp)
 1011354:	df000504 	addi	fp,sp,20
 1011358:	e13ffc15 	stw	r4,-16(fp)
 101135c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1011360:	e0bffd17 	ldw	r2,-12(fp)
 1011364:	1005003a 	cmpeq	r2,r2,zero
 1011368:	10001e1e 	bne	r2,zero,10113e4 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 101136c:	e0bffd17 	ldw	r2,-12(fp)
 1011370:	10800050 	cmplti	r2,r2,1
 1011374:	1000031e 	bne	r2,zero,1011384 <alt_up_character_lcd_shift_cursor+0x3c>
 1011378:	00800504 	movi	r2,20
 101137c:	e0bfff05 	stb	r2,-4(fp)
 1011380:	00000206 	br	101138c <alt_up_character_lcd_shift_cursor+0x44>
 1011384:	00c00404 	movi	r3,16
 1011388:	e0ffff05 	stb	r3,-4(fp)
 101138c:	e0bfff03 	ldbu	r2,-4(fp)
 1011390:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1011394:	e0fffd17 	ldw	r3,-12(fp)
 1011398:	e0fffe15 	stw	r3,-8(fp)
 101139c:	e0fffe17 	ldw	r3,-8(fp)
 10113a0:	1804403a 	cmpge	r2,r3,zero
 10113a4:	1000031e 	bne	r2,zero,10113b4 <alt_up_character_lcd_shift_cursor+0x6c>
 10113a8:	e0bffe17 	ldw	r2,-8(fp)
 10113ac:	0085c83a 	sub	r2,zero,r2
 10113b0:	e0bffe15 	stw	r2,-8(fp)
 10113b4:	e0fffe17 	ldw	r3,-8(fp)
 10113b8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 10113bc:	00000306 	br	10113cc <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 10113c0:	e17ffb43 	ldbu	r5,-19(fp)
 10113c4:	e13ffc17 	ldw	r4,-16(fp)
 10113c8:	10110ec0 	call	10110ec <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 10113cc:	e0bffb03 	ldbu	r2,-20(fp)
 10113d0:	10bfffc4 	addi	r2,r2,-1
 10113d4:	e0bffb05 	stb	r2,-20(fp)
 10113d8:	e0bffb03 	ldbu	r2,-20(fp)
 10113dc:	10803fd8 	cmpnei	r2,r2,255
 10113e0:	103ff71e 	bne	r2,zero,10113c0 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 10113e4:	e037883a 	mov	sp,fp
 10113e8:	dfc00117 	ldw	ra,4(sp)
 10113ec:	df000017 	ldw	fp,0(sp)
 10113f0:	dec00204 	addi	sp,sp,8
 10113f4:	f800283a 	ret

010113f8 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 10113f8:	defff904 	addi	sp,sp,-28
 10113fc:	dfc00615 	stw	ra,24(sp)
 1011400:	df000515 	stw	fp,20(sp)
 1011404:	df000504 	addi	fp,sp,20
 1011408:	e13ffc15 	stw	r4,-16(fp)
 101140c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1011410:	e0bffd17 	ldw	r2,-12(fp)
 1011414:	1005003a 	cmpeq	r2,r2,zero
 1011418:	10001e1e 	bne	r2,zero,1011494 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 101141c:	e0bffd17 	ldw	r2,-12(fp)
 1011420:	10800050 	cmplti	r2,r2,1
 1011424:	1000031e 	bne	r2,zero,1011434 <alt_up_character_lcd_shift_display+0x3c>
 1011428:	00800704 	movi	r2,28
 101142c:	e0bfff05 	stb	r2,-4(fp)
 1011430:	00000206 	br	101143c <alt_up_character_lcd_shift_display+0x44>
 1011434:	00c00604 	movi	r3,24
 1011438:	e0ffff05 	stb	r3,-4(fp)
 101143c:	e0bfff03 	ldbu	r2,-4(fp)
 1011440:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1011444:	e0fffd17 	ldw	r3,-12(fp)
 1011448:	e0fffe15 	stw	r3,-8(fp)
 101144c:	e0fffe17 	ldw	r3,-8(fp)
 1011450:	1804403a 	cmpge	r2,r3,zero
 1011454:	1000031e 	bne	r2,zero,1011464 <alt_up_character_lcd_shift_display+0x6c>
 1011458:	e0bffe17 	ldw	r2,-8(fp)
 101145c:	0085c83a 	sub	r2,zero,r2
 1011460:	e0bffe15 	stw	r2,-8(fp)
 1011464:	e0fffe17 	ldw	r3,-8(fp)
 1011468:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 101146c:	00000306 	br	101147c <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1011470:	e17ffb43 	ldbu	r5,-19(fp)
 1011474:	e13ffc17 	ldw	r4,-16(fp)
 1011478:	10110ec0 	call	10110ec <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 101147c:	e0bffb03 	ldbu	r2,-20(fp)
 1011480:	10bfffc4 	addi	r2,r2,-1
 1011484:	e0bffb05 	stb	r2,-20(fp)
 1011488:	e0bffb03 	ldbu	r2,-20(fp)
 101148c:	10803fd8 	cmpnei	r2,r2,255
 1011490:	103ff71e 	bne	r2,zero,1011470 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1011494:	e037883a 	mov	sp,fp
 1011498:	dfc00117 	ldw	ra,4(sp)
 101149c:	df000017 	ldw	fp,0(sp)
 10114a0:	dec00204 	addi	sp,sp,8
 10114a4:	f800283a 	ret

010114a8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 10114a8:	defff904 	addi	sp,sp,-28
 10114ac:	dfc00615 	stw	ra,24(sp)
 10114b0:	df000515 	stw	fp,20(sp)
 10114b4:	df000504 	addi	fp,sp,20
 10114b8:	e13ffc15 	stw	r4,-16(fp)
 10114bc:	e17ffd15 	stw	r5,-12(fp)
 10114c0:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 10114c4:	e0bffd17 	ldw	r2,-12(fp)
 10114c8:	10800a28 	cmpgeui	r2,r2,40
 10114cc:	1000031e 	bne	r2,zero,10114dc <alt_up_character_lcd_erase_pos+0x34>
 10114d0:	e0bffe17 	ldw	r2,-8(fp)
 10114d4:	108000b0 	cmpltui	r2,r2,2
 10114d8:	1000031e 	bne	r2,zero,10114e8 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 10114dc:	00bfffc4 	movi	r2,-1
 10114e0:	e0bfff15 	stw	r2,-4(fp)
 10114e4:	00000e06 	br	1011520 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 10114e8:	e13ffd17 	ldw	r4,-12(fp)
 10114ec:	e17ffe17 	ldw	r5,-8(fp)
 10114f0:	10110700 	call	1011070 <get_DDRAM_addr>
 10114f4:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 10114f8:	e17ffb03 	ldbu	r5,-20(fp)
 10114fc:	e13ffc17 	ldw	r4,-16(fp)
 1011500:	10110ec0 	call	10110ec <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 1011504:	e0bffc17 	ldw	r2,-16(fp)
 1011508:	10800a17 	ldw	r2,40(r2)
 101150c:	10800044 	addi	r2,r2,1
 1011510:	1007883a 	mov	r3,r2
 1011514:	00800084 	movi	r2,2
 1011518:	18800025 	stbio	r2,0(r3)
	return 0;
 101151c:	e03fff15 	stw	zero,-4(fp)
 1011520:	e0bfff17 	ldw	r2,-4(fp)
}
 1011524:	e037883a 	mov	sp,fp
 1011528:	dfc00117 	ldw	ra,4(sp)
 101152c:	df000017 	ldw	fp,0(sp)
 1011530:	dec00204 	addi	sp,sp,8
 1011534:	f800283a 	ret

01011538 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 1011538:	defffd04 	addi	sp,sp,-12
 101153c:	dfc00215 	stw	ra,8(sp)
 1011540:	df000115 	stw	fp,4(sp)
 1011544:	df000104 	addi	fp,sp,4
 1011548:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 101154c:	e13fff17 	ldw	r4,-4(fp)
 1011550:	01400304 	movi	r5,12
 1011554:	10110ec0 	call	10110ec <alt_up_character_lcd_send_cmd>
}
 1011558:	e037883a 	mov	sp,fp
 101155c:	dfc00117 	ldw	ra,4(sp)
 1011560:	df000017 	ldw	fp,0(sp)
 1011564:	dec00204 	addi	sp,sp,8
 1011568:	f800283a 	ret

0101156c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 101156c:	defffd04 	addi	sp,sp,-12
 1011570:	dfc00215 	stw	ra,8(sp)
 1011574:	df000115 	stw	fp,4(sp)
 1011578:	df000104 	addi	fp,sp,4
 101157c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 1011580:	e13fff17 	ldw	r4,-4(fp)
 1011584:	014003c4 	movi	r5,15
 1011588:	10110ec0 	call	10110ec <alt_up_character_lcd_send_cmd>
}
 101158c:	e037883a 	mov	sp,fp
 1011590:	dfc00117 	ldw	ra,4(sp)
 1011594:	df000017 	ldw	fp,0(sp)
 1011598:	dec00204 	addi	sp,sp,8
 101159c:	f800283a 	ret

010115a0 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 10115a0:	defffd04 	addi	sp,sp,-12
 10115a4:	df000215 	stw	fp,8(sp)
 10115a8:	df000204 	addi	fp,sp,8
 10115ac:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 10115b0:	e0bfff17 	ldw	r2,-4(fp)
 10115b4:	10800a17 	ldw	r2,40(r2)
 10115b8:	10800104 	addi	r2,r2,4
 10115bc:	10800037 	ldwio	r2,0(r2)
 10115c0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 10115c4:	e0bffe17 	ldw	r2,-8(fp)
 10115c8:	10800054 	ori	r2,r2,1
 10115cc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 10115d0:	e0bfff17 	ldw	r2,-4(fp)
 10115d4:	10800a17 	ldw	r2,40(r2)
 10115d8:	10800104 	addi	r2,r2,4
 10115dc:	e0fffe17 	ldw	r3,-8(fp)
 10115e0:	10c00035 	stwio	r3,0(r2)
}
 10115e4:	e037883a 	mov	sp,fp
 10115e8:	df000017 	ldw	fp,0(sp)
 10115ec:	dec00104 	addi	sp,sp,4
 10115f0:	f800283a 	ret

010115f4 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 10115f4:	defffd04 	addi	sp,sp,-12
 10115f8:	df000215 	stw	fp,8(sp)
 10115fc:	df000204 	addi	fp,sp,8
 1011600:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1011604:	e0bfff17 	ldw	r2,-4(fp)
 1011608:	10800a17 	ldw	r2,40(r2)
 101160c:	10800104 	addi	r2,r2,4
 1011610:	10800037 	ldwio	r2,0(r2)
 1011614:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 1011618:	e0fffe17 	ldw	r3,-8(fp)
 101161c:	00bfff84 	movi	r2,-2
 1011620:	1884703a 	and	r2,r3,r2
 1011624:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1011628:	e0bfff17 	ldw	r2,-4(fp)
 101162c:	10800a17 	ldw	r2,40(r2)
 1011630:	10800104 	addi	r2,r2,4
 1011634:	e0fffe17 	ldw	r3,-8(fp)
 1011638:	10c00035 	stwio	r3,0(r2)
}
 101163c:	e037883a 	mov	sp,fp
 1011640:	df000017 	ldw	fp,0(sp)
 1011644:	dec00104 	addi	sp,sp,4
 1011648:	f800283a 	ret

0101164c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 101164c:	defffd04 	addi	sp,sp,-12
 1011650:	df000215 	stw	fp,8(sp)
 1011654:	df000204 	addi	fp,sp,8
 1011658:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 101165c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 1011660:	e0bfff17 	ldw	r2,-4(fp)
 1011664:	10800a17 	ldw	r2,40(r2)
 1011668:	10800084 	addi	r2,r2,2
 101166c:	1080002b 	ldhuio	r2,0(r2)
 1011670:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 1011674:	e0bffe0b 	ldhu	r2,-8(fp)
}
 1011678:	e037883a 	mov	sp,fp
 101167c:	df000017 	ldw	fp,0(sp)
 1011680:	dec00104 	addi	sp,sp,4
 1011684:	f800283a 	ret

01011688 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 1011688:	defffd04 	addi	sp,sp,-12
 101168c:	df000215 	stw	fp,8(sp)
 1011690:	df000204 	addi	fp,sp,8
 1011694:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1011698:	e0bfff17 	ldw	r2,-4(fp)
 101169c:	10800a17 	ldw	r2,40(r2)
 10116a0:	10800104 	addi	r2,r2,4
 10116a4:	10800037 	ldwio	r2,0(r2)
 10116a8:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 10116ac:	e0bffe17 	ldw	r2,-8(fp)
 10116b0:	10bfffec 	andhi	r2,r2,65535
 10116b4:	1004d43a 	srli	r2,r2,16
}
 10116b8:	e037883a 	mov	sp,fp
 10116bc:	df000017 	ldw	fp,0(sp)
 10116c0:	dec00104 	addi	sp,sp,4
 10116c4:	f800283a 	ret

010116c8 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 10116c8:	defffc04 	addi	sp,sp,-16
 10116cc:	df000315 	stw	fp,12(sp)
 10116d0:	df000304 	addi	fp,sp,12
 10116d4:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 10116d8:	e0bffe17 	ldw	r2,-8(fp)
 10116dc:	1080800c 	andi	r2,r2,512
 10116e0:	1004d27a 	srli	r2,r2,9
 10116e4:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
 10116e8:	e0bffd17 	ldw	r2,-12(fp)
 10116ec:	1005003a 	cmpeq	r2,r2,zero
 10116f0:	1000031e 	bne	r2,zero,1011700 <alt_up_rs232_check_parity+0x38>
 10116f4:	00bfffc4 	movi	r2,-1
 10116f8:	e0bfff15 	stw	r2,-4(fp)
 10116fc:	00000106 	br	1011704 <alt_up_rs232_check_parity+0x3c>
 1011700:	e03fff15 	stw	zero,-4(fp)
 1011704:	e0bfff17 	ldw	r2,-4(fp)
}
 1011708:	e037883a 	mov	sp,fp
 101170c:	df000017 	ldw	fp,0(sp)
 1011710:	dec00104 	addi	sp,sp,4
 1011714:	f800283a 	ret

01011718 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 1011718:	defffc04 	addi	sp,sp,-16
 101171c:	df000315 	stw	fp,12(sp)
 1011720:	df000304 	addi	fp,sp,12
 1011724:	e13ffe15 	stw	r4,-8(fp)
 1011728:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 101172c:	e0bffe17 	ldw	r2,-8(fp)
 1011730:	10800a17 	ldw	r2,40(r2)
 1011734:	10800037 	ldwio	r2,0(r2)
 1011738:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 101173c:	e0bffe17 	ldw	r2,-8(fp)
 1011740:	10800a17 	ldw	r2,40(r2)
 1011744:	e0ffff03 	ldbu	r3,-4(fp)
 1011748:	10c00035 	stwio	r3,0(r2)
	return 0;
 101174c:	0005883a 	mov	r2,zero
}
 1011750:	e037883a 	mov	sp,fp
 1011754:	df000017 	ldw	fp,0(sp)
 1011758:	dec00104 	addi	sp,sp,4
 101175c:	f800283a 	ret

01011760 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 1011760:	defffa04 	addi	sp,sp,-24
 1011764:	dfc00515 	stw	ra,20(sp)
 1011768:	df000415 	stw	fp,16(sp)
 101176c:	df000404 	addi	fp,sp,16
 1011770:	e13ffd15 	stw	r4,-12(fp)
 1011774:	e17ffe15 	stw	r5,-8(fp)
 1011778:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 101177c:	e0bffd17 	ldw	r2,-12(fp)
 1011780:	10800a17 	ldw	r2,40(r2)
 1011784:	10800037 	ldwio	r2,0(r2)
 1011788:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 101178c:	e0bffc17 	ldw	r2,-16(fp)
 1011790:	1007883a 	mov	r3,r2
 1011794:	e0bffe17 	ldw	r2,-8(fp)
 1011798:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 101179c:	e13ffc17 	ldw	r4,-16(fp)
 10117a0:	10116c80 	call	10116c8 <alt_up_rs232_check_parity>
 10117a4:	1007883a 	mov	r3,r2
 10117a8:	e0bfff17 	ldw	r2,-4(fp)
 10117ac:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 10117b0:	e0bffc17 	ldw	r2,-16(fp)
 10117b4:	10a0000c 	andi	r2,r2,32768
 10117b8:	1004d3fa 	srli	r2,r2,15
 10117bc:	10bfffc4 	addi	r2,r2,-1
}
 10117c0:	e037883a 	mov	sp,fp
 10117c4:	dfc00117 	ldw	ra,4(sp)
 10117c8:	df000017 	ldw	fp,0(sp)
 10117cc:	dec00204 	addi	sp,sp,8
 10117d0:	f800283a 	ret

010117d4 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 10117d4:	defff804 	addi	sp,sp,-32
 10117d8:	dfc00715 	stw	ra,28(sp)
 10117dc:	df000615 	stw	fp,24(sp)
 10117e0:	df000604 	addi	fp,sp,24
 10117e4:	e13ffd15 	stw	r4,-12(fp)
 10117e8:	e17ffe15 	stw	r5,-8(fp)
 10117ec:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 10117f0:	e0bffd17 	ldw	r2,-12(fp)
 10117f4:	10800017 	ldw	r2,0(r2)
 10117f8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 10117fc:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 1011800:	00000c06 	br	1011834 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
 1011804:	e17ffe17 	ldw	r5,-8(fp)
 1011808:	e0bffe17 	ldw	r2,-8(fp)
 101180c:	10800044 	addi	r2,r2,1
 1011810:	e0bffe15 	stw	r2,-8(fp)
 1011814:	e1bffc04 	addi	r6,fp,-16
 1011818:	e13ffb17 	ldw	r4,-20(fp)
 101181c:	10117600 	call	1011760 <alt_up_rs232_read_data>
 1011820:	1004c03a 	cmpne	r2,r2,zero
 1011824:	1000091e 	bne	r2,zero,101184c <alt_up_rs232_read_fd+0x78>
			count++;
 1011828:	e0bffa17 	ldw	r2,-24(fp)
 101182c:	10800044 	addi	r2,r2,1
 1011830:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 1011834:	e0bfff17 	ldw	r2,-4(fp)
 1011838:	10bfffc4 	addi	r2,r2,-1
 101183c:	e0bfff15 	stw	r2,-4(fp)
 1011840:	e0bfff17 	ldw	r2,-4(fp)
 1011844:	10bfffd8 	cmpnei	r2,r2,-1
 1011848:	103fee1e 	bne	r2,zero,1011804 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 101184c:	e0bffa17 	ldw	r2,-24(fp)
}
 1011850:	e037883a 	mov	sp,fp
 1011854:	dfc00117 	ldw	ra,4(sp)
 1011858:	df000017 	ldw	fp,0(sp)
 101185c:	dec00204 	addi	sp,sp,8
 1011860:	f800283a 	ret

01011864 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 1011864:	defff904 	addi	sp,sp,-28
 1011868:	dfc00615 	stw	ra,24(sp)
 101186c:	df000515 	stw	fp,20(sp)
 1011870:	df000504 	addi	fp,sp,20
 1011874:	e13ffd15 	stw	r4,-12(fp)
 1011878:	e17ffe15 	stw	r5,-8(fp)
 101187c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 1011880:	e0bffd17 	ldw	r2,-12(fp)
 1011884:	10800017 	ldw	r2,0(r2)
 1011888:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 101188c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 1011890:	00000d06 	br	10118c8 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 1011894:	e0bffe17 	ldw	r2,-8(fp)
 1011898:	10800003 	ldbu	r2,0(r2)
 101189c:	11403fcc 	andi	r5,r2,255
 10118a0:	e13ffc17 	ldw	r4,-16(fp)
 10118a4:	10117180 	call	1011718 <alt_up_rs232_write_data>
 10118a8:	1004c03a 	cmpne	r2,r2,zero
 10118ac:	10000c1e 	bne	r2,zero,10118e0 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
 10118b0:	e0bffb17 	ldw	r2,-20(fp)
 10118b4:	10800044 	addi	r2,r2,1
 10118b8:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 10118bc:	e0bffe17 	ldw	r2,-8(fp)
 10118c0:	10800044 	addi	r2,r2,1
 10118c4:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 10118c8:	e0bfff17 	ldw	r2,-4(fp)
 10118cc:	10bfffc4 	addi	r2,r2,-1
 10118d0:	e0bfff15 	stw	r2,-4(fp)
 10118d4:	e0bfff17 	ldw	r2,-4(fp)
 10118d8:	10bfffd8 	cmpnei	r2,r2,-1
 10118dc:	103fed1e 	bne	r2,zero,1011894 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
 10118e0:	e0bffb17 	ldw	r2,-20(fp)
}
 10118e4:	e037883a 	mov	sp,fp
 10118e8:	dfc00117 	ldw	ra,4(sp)
 10118ec:	df000017 	ldw	fp,0(sp)
 10118f0:	dec00204 	addi	sp,sp,8
 10118f4:	f800283a 	ret

010118f8 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 10118f8:	defffc04 	addi	sp,sp,-16
 10118fc:	dfc00315 	stw	ra,12(sp)
 1011900:	df000215 	stw	fp,8(sp)
 1011904:	df000204 	addi	fp,sp,8
 1011908:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 101190c:	e13fff17 	ldw	r4,-4(fp)
 1011910:	01404074 	movhi	r5,257
 1011914:	29539804 	addi	r5,r5,20064
 1011918:	1011cac0 	call	1011cac <alt_find_dev>
 101191c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1011920:	e0bffe17 	ldw	r2,-8(fp)
}
 1011924:	e037883a 	mov	sp,fp
 1011928:	dfc00117 	ldw	ra,4(sp)
 101192c:	df000017 	ldw	fp,0(sp)
 1011930:	dec00204 	addi	sp,sp,8
 1011934:	f800283a 	ret

01011938 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1011938:	defff404 	addi	sp,sp,-48
 101193c:	df000b15 	stw	fp,44(sp)
 1011940:	df000b04 	addi	fp,sp,44
 1011944:	e13ffb15 	stw	r4,-20(fp)
 1011948:	e17ffc15 	stw	r5,-16(fp)
 101194c:	e1bffd15 	stw	r6,-12(fp)
 1011950:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1011954:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1011958:	00804074 	movhi	r2,257
 101195c:	109a6304 	addi	r2,r2,27020
 1011960:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 1011964:	1005003a 	cmpeq	r2,r2,zero
 1011968:	1000411e 	bne	r2,zero,1011a70 <alt_alarm_start+0x138>
  {
    if (alarm)
 101196c:	e0bffb17 	ldw	r2,-20(fp)
 1011970:	1005003a 	cmpeq	r2,r2,zero
 1011974:	10003b1e 	bne	r2,zero,1011a64 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 1011978:	e0fffb17 	ldw	r3,-20(fp)
 101197c:	e0bffd17 	ldw	r2,-12(fp)
 1011980:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 1011984:	e0fffb17 	ldw	r3,-20(fp)
 1011988:	e0bffe17 	ldw	r2,-8(fp)
 101198c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011990:	0005303a 	rdctl	r2,status
 1011994:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011998:	e0fff817 	ldw	r3,-32(fp)
 101199c:	00bfff84 	movi	r2,-2
 10119a0:	1884703a 	and	r2,r3,r2
 10119a4:	1001703a 	wrctl	status,r2
  
  return context;
 10119a8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 10119ac:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 10119b0:	00804074 	movhi	r2,257
 10119b4:	109a6404 	addi	r2,r2,27024
 10119b8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 10119bc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 10119c0:	e0fffc17 	ldw	r3,-16(fp)
 10119c4:	e0bff917 	ldw	r2,-28(fp)
 10119c8:	1885883a 	add	r2,r3,r2
 10119cc:	10c00044 	addi	r3,r2,1
 10119d0:	e0bffb17 	ldw	r2,-20(fp)
 10119d4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 10119d8:	e0bffb17 	ldw	r2,-20(fp)
 10119dc:	10c00217 	ldw	r3,8(r2)
 10119e0:	e0bff917 	ldw	r2,-28(fp)
 10119e4:	1880042e 	bgeu	r3,r2,10119f8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 10119e8:	e0fffb17 	ldw	r3,-20(fp)
 10119ec:	00800044 	movi	r2,1
 10119f0:	18800405 	stb	r2,16(r3)
 10119f4:	00000206 	br	1011a00 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 10119f8:	e0bffb17 	ldw	r2,-20(fp)
 10119fc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1011a00:	e0fffb17 	ldw	r3,-20(fp)
 1011a04:	00804074 	movhi	r2,257
 1011a08:	10939e04 	addi	r2,r2,20088
 1011a0c:	e0bff615 	stw	r2,-40(fp)
 1011a10:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1011a14:	e0fff717 	ldw	r3,-36(fp)
 1011a18:	e0bff617 	ldw	r2,-40(fp)
 1011a1c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1011a20:	e0bff617 	ldw	r2,-40(fp)
 1011a24:	10c00017 	ldw	r3,0(r2)
 1011a28:	e0bff717 	ldw	r2,-36(fp)
 1011a2c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1011a30:	e0bff617 	ldw	r2,-40(fp)
 1011a34:	10c00017 	ldw	r3,0(r2)
 1011a38:	e0bff717 	ldw	r2,-36(fp)
 1011a3c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1011a40:	e0fff617 	ldw	r3,-40(fp)
 1011a44:	e0bff717 	ldw	r2,-36(fp)
 1011a48:	18800015 	stw	r2,0(r3)
 1011a4c:	e0bffa17 	ldw	r2,-24(fp)
 1011a50:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011a54:	e0bff517 	ldw	r2,-44(fp)
 1011a58:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1011a5c:	e03fff15 	stw	zero,-4(fp)
 1011a60:	00000506 	br	1011a78 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1011a64:	00bffa84 	movi	r2,-22
 1011a68:	e0bfff15 	stw	r2,-4(fp)
 1011a6c:	00000206 	br	1011a78 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1011a70:	00bfde84 	movi	r2,-134
 1011a74:	e0bfff15 	stw	r2,-4(fp)
 1011a78:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 1011a7c:	e037883a 	mov	sp,fp
 1011a80:	df000017 	ldw	fp,0(sp)
 1011a84:	dec00104 	addi	sp,sp,4
 1011a88:	f800283a 	ret

01011a8c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1011a8c:	defffe04 	addi	sp,sp,-8
 1011a90:	df000115 	stw	fp,4(sp)
 1011a94:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1011a98:	e03fff15 	stw	zero,-4(fp)
 1011a9c:	00000506 	br	1011ab4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 1011aa0:	e0bfff17 	ldw	r2,-4(fp)
 1011aa4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1011aa8:	e0bfff17 	ldw	r2,-4(fp)
 1011aac:	10800804 	addi	r2,r2,32
 1011ab0:	e0bfff15 	stw	r2,-4(fp)
 1011ab4:	e0bfff17 	ldw	r2,-4(fp)
 1011ab8:	10820030 	cmpltui	r2,r2,2048
 1011abc:	103ff81e 	bne	r2,zero,1011aa0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1011ac0:	e037883a 	mov	sp,fp
 1011ac4:	df000017 	ldw	fp,0(sp)
 1011ac8:	dec00104 	addi	sp,sp,4
 1011acc:	f800283a 	ret

01011ad0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1011ad0:	defff904 	addi	sp,sp,-28
 1011ad4:	dfc00615 	stw	ra,24(sp)
 1011ad8:	df000515 	stw	fp,20(sp)
 1011adc:	df000504 	addi	fp,sp,20
 1011ae0:	e13ffd15 	stw	r4,-12(fp)
 1011ae4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1011ae8:	e0bffd17 	ldw	r2,-12(fp)
 1011aec:	1005003a 	cmpeq	r2,r2,zero
 1011af0:	1000041e 	bne	r2,zero,1011b04 <alt_dev_llist_insert+0x34>
 1011af4:	e0bffd17 	ldw	r2,-12(fp)
 1011af8:	10800217 	ldw	r2,8(r2)
 1011afc:	1004c03a 	cmpne	r2,r2,zero
 1011b00:	1000071e 	bne	r2,zero,1011b20 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1011b04:	1011b840 	call	1011b84 <alt_get_errno>
 1011b08:	1007883a 	mov	r3,r2
 1011b0c:	00800584 	movi	r2,22
 1011b10:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1011b14:	00bffa84 	movi	r2,-22
 1011b18:	e0bfff15 	stw	r2,-4(fp)
 1011b1c:	00001306 	br	1011b6c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1011b20:	e0fffd17 	ldw	r3,-12(fp)
 1011b24:	e0bffe17 	ldw	r2,-8(fp)
 1011b28:	e0bffb15 	stw	r2,-20(fp)
 1011b2c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1011b30:	e0fffc17 	ldw	r3,-16(fp)
 1011b34:	e0bffb17 	ldw	r2,-20(fp)
 1011b38:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1011b3c:	e0bffb17 	ldw	r2,-20(fp)
 1011b40:	10c00017 	ldw	r3,0(r2)
 1011b44:	e0bffc17 	ldw	r2,-16(fp)
 1011b48:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1011b4c:	e0bffb17 	ldw	r2,-20(fp)
 1011b50:	10c00017 	ldw	r3,0(r2)
 1011b54:	e0bffc17 	ldw	r2,-16(fp)
 1011b58:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1011b5c:	e0fffb17 	ldw	r3,-20(fp)
 1011b60:	e0bffc17 	ldw	r2,-16(fp)
 1011b64:	18800015 	stw	r2,0(r3)

  return 0;  
 1011b68:	e03fff15 	stw	zero,-4(fp)
 1011b6c:	e0bfff17 	ldw	r2,-4(fp)
}
 1011b70:	e037883a 	mov	sp,fp
 1011b74:	dfc00117 	ldw	ra,4(sp)
 1011b78:	df000017 	ldw	fp,0(sp)
 1011b7c:	dec00204 	addi	sp,sp,8
 1011b80:	f800283a 	ret

01011b84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1011b84:	defffd04 	addi	sp,sp,-12
 1011b88:	dfc00215 	stw	ra,8(sp)
 1011b8c:	df000115 	stw	fp,4(sp)
 1011b90:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1011b94:	00804074 	movhi	r2,257
 1011b98:	10939b04 	addi	r2,r2,20076
 1011b9c:	10800017 	ldw	r2,0(r2)
 1011ba0:	1005003a 	cmpeq	r2,r2,zero
 1011ba4:	1000061e 	bne	r2,zero,1011bc0 <alt_get_errno+0x3c>
 1011ba8:	00804074 	movhi	r2,257
 1011bac:	10939b04 	addi	r2,r2,20076
 1011bb0:	10800017 	ldw	r2,0(r2)
 1011bb4:	103ee83a 	callr	r2
 1011bb8:	e0bfff15 	stw	r2,-4(fp)
 1011bbc:	00000306 	br	1011bcc <alt_get_errno+0x48>
 1011bc0:	00804074 	movhi	r2,257
 1011bc4:	109a5e04 	addi	r2,r2,27000
 1011bc8:	e0bfff15 	stw	r2,-4(fp)
 1011bcc:	e0bfff17 	ldw	r2,-4(fp)
}
 1011bd0:	e037883a 	mov	sp,fp
 1011bd4:	dfc00117 	ldw	ra,4(sp)
 1011bd8:	df000017 	ldw	fp,0(sp)
 1011bdc:	dec00204 	addi	sp,sp,8
 1011be0:	f800283a 	ret

01011be4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1011be4:	defffd04 	addi	sp,sp,-12
 1011be8:	dfc00215 	stw	ra,8(sp)
 1011bec:	df000115 	stw	fp,4(sp)
 1011bf0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1011bf4:	00bfff04 	movi	r2,-4
 1011bf8:	00c04074 	movhi	r3,257
 1011bfc:	18cada04 	addi	r3,r3,11112
 1011c00:	1885883a 	add	r2,r3,r2
 1011c04:	e0bfff15 	stw	r2,-4(fp)
 1011c08:	00000606 	br	1011c24 <_do_ctors+0x40>
        (*ctor) (); 
 1011c0c:	e0bfff17 	ldw	r2,-4(fp)
 1011c10:	10800017 	ldw	r2,0(r2)
 1011c14:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1011c18:	e0bfff17 	ldw	r2,-4(fp)
 1011c1c:	10bfff04 	addi	r2,r2,-4
 1011c20:	e0bfff15 	stw	r2,-4(fp)
 1011c24:	e0ffff17 	ldw	r3,-4(fp)
 1011c28:	00804074 	movhi	r2,257
 1011c2c:	108ad904 	addi	r2,r2,11108
 1011c30:	18bff62e 	bgeu	r3,r2,1011c0c <_do_ctors+0x28>
        (*ctor) (); 
}
 1011c34:	e037883a 	mov	sp,fp
 1011c38:	dfc00117 	ldw	ra,4(sp)
 1011c3c:	df000017 	ldw	fp,0(sp)
 1011c40:	dec00204 	addi	sp,sp,8
 1011c44:	f800283a 	ret

01011c48 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1011c48:	defffd04 	addi	sp,sp,-12
 1011c4c:	dfc00215 	stw	ra,8(sp)
 1011c50:	df000115 	stw	fp,4(sp)
 1011c54:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1011c58:	00bfff04 	movi	r2,-4
 1011c5c:	00c04074 	movhi	r3,257
 1011c60:	18cada04 	addi	r3,r3,11112
 1011c64:	1885883a 	add	r2,r3,r2
 1011c68:	e0bfff15 	stw	r2,-4(fp)
 1011c6c:	00000606 	br	1011c88 <_do_dtors+0x40>
        (*dtor) (); 
 1011c70:	e0bfff17 	ldw	r2,-4(fp)
 1011c74:	10800017 	ldw	r2,0(r2)
 1011c78:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1011c7c:	e0bfff17 	ldw	r2,-4(fp)
 1011c80:	10bfff04 	addi	r2,r2,-4
 1011c84:	e0bfff15 	stw	r2,-4(fp)
 1011c88:	e0ffff17 	ldw	r3,-4(fp)
 1011c8c:	00804074 	movhi	r2,257
 1011c90:	108ada04 	addi	r2,r2,11112
 1011c94:	18bff62e 	bgeu	r3,r2,1011c70 <_do_dtors+0x28>
        (*dtor) (); 
}
 1011c98:	e037883a 	mov	sp,fp
 1011c9c:	dfc00117 	ldw	ra,4(sp)
 1011ca0:	df000017 	ldw	fp,0(sp)
 1011ca4:	dec00204 	addi	sp,sp,8
 1011ca8:	f800283a 	ret

01011cac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1011cac:	defff904 	addi	sp,sp,-28
 1011cb0:	dfc00615 	stw	ra,24(sp)
 1011cb4:	df000515 	stw	fp,20(sp)
 1011cb8:	df000504 	addi	fp,sp,20
 1011cbc:	e13ffd15 	stw	r4,-12(fp)
 1011cc0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1011cc4:	e0bffe17 	ldw	r2,-8(fp)
 1011cc8:	10800017 	ldw	r2,0(r2)
 1011ccc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1011cd0:	e13ffd17 	ldw	r4,-12(fp)
 1011cd4:	1000c000 	call	1000c00 <strlen>
 1011cd8:	10800044 	addi	r2,r2,1
 1011cdc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1011ce0:	00000d06 	br	1011d18 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1011ce4:	e0bffc17 	ldw	r2,-16(fp)
 1011ce8:	11000217 	ldw	r4,8(r2)
 1011cec:	e1bffb17 	ldw	r6,-20(fp)
 1011cf0:	e17ffd17 	ldw	r5,-12(fp)
 1011cf4:	10127a80 	call	10127a8 <memcmp>
 1011cf8:	1004c03a 	cmpne	r2,r2,zero
 1011cfc:	1000031e 	bne	r2,zero,1011d0c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1011d00:	e0bffc17 	ldw	r2,-16(fp)
 1011d04:	e0bfff15 	stw	r2,-4(fp)
 1011d08:	00000706 	br	1011d28 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1011d0c:	e0bffc17 	ldw	r2,-16(fp)
 1011d10:	10800017 	ldw	r2,0(r2)
 1011d14:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1011d18:	e0fffe17 	ldw	r3,-8(fp)
 1011d1c:	e0bffc17 	ldw	r2,-16(fp)
 1011d20:	10fff01e 	bne	r2,r3,1011ce4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1011d24:	e03fff15 	stw	zero,-4(fp)
 1011d28:	e0bfff17 	ldw	r2,-4(fp)
}
 1011d2c:	e037883a 	mov	sp,fp
 1011d30:	dfc00117 	ldw	ra,4(sp)
 1011d34:	df000017 	ldw	fp,0(sp)
 1011d38:	dec00204 	addi	sp,sp,8
 1011d3c:	f800283a 	ret

01011d40 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1011d40:	defffe04 	addi	sp,sp,-8
 1011d44:	dfc00115 	stw	ra,4(sp)
 1011d48:	df000015 	stw	fp,0(sp)
 1011d4c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1011d50:	0009883a 	mov	r4,zero
 1011d54:	01500004 	movi	r5,16384
 1011d58:	10126cc0 	call	10126cc <alt_icache_flush>
#endif
}
 1011d5c:	e037883a 	mov	sp,fp
 1011d60:	dfc00117 	ldw	ra,4(sp)
 1011d64:	df000017 	ldw	fp,0(sp)
 1011d68:	dec00204 	addi	sp,sp,8
 1011d6c:	f800283a 	ret

01011d70 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1011d70:	defff904 	addi	sp,sp,-28
 1011d74:	dfc00615 	stw	ra,24(sp)
 1011d78:	df000515 	stw	fp,20(sp)
 1011d7c:	df000504 	addi	fp,sp,20
 1011d80:	e13ffc15 	stw	r4,-16(fp)
 1011d84:	e17ffd15 	stw	r5,-12(fp)
 1011d88:	e1bffe15 	stw	r6,-8(fp)
 1011d8c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1011d90:	e13ffd17 	ldw	r4,-12(fp)
 1011d94:	e17ffe17 	ldw	r5,-8(fp)
 1011d98:	e1bfff17 	ldw	r6,-4(fp)
 1011d9c:	10121480 	call	1012148 <open>
 1011da0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1011da4:	e0bffb17 	ldw	r2,-20(fp)
 1011da8:	1004803a 	cmplt	r2,r2,zero
 1011dac:	10001c1e 	bne	r2,zero,1011e20 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 1011db0:	e0bffb17 	ldw	r2,-20(fp)
 1011db4:	00c04074 	movhi	r3,257
 1011db8:	18cf0104 	addi	r3,r3,15364
 1011dbc:	10800324 	muli	r2,r2,12
 1011dc0:	10c5883a 	add	r2,r2,r3
 1011dc4:	10c00017 	ldw	r3,0(r2)
 1011dc8:	e0bffc17 	ldw	r2,-16(fp)
 1011dcc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1011dd0:	e0bffb17 	ldw	r2,-20(fp)
 1011dd4:	00c04074 	movhi	r3,257
 1011dd8:	18cf0104 	addi	r3,r3,15364
 1011ddc:	10800324 	muli	r2,r2,12
 1011de0:	10c5883a 	add	r2,r2,r3
 1011de4:	10800104 	addi	r2,r2,4
 1011de8:	10c00017 	ldw	r3,0(r2)
 1011dec:	e0bffc17 	ldw	r2,-16(fp)
 1011df0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1011df4:	e0bffb17 	ldw	r2,-20(fp)
 1011df8:	00c04074 	movhi	r3,257
 1011dfc:	18cf0104 	addi	r3,r3,15364
 1011e00:	10800324 	muli	r2,r2,12
 1011e04:	10c5883a 	add	r2,r2,r3
 1011e08:	10800204 	addi	r2,r2,8
 1011e0c:	10c00017 	ldw	r3,0(r2)
 1011e10:	e0bffc17 	ldw	r2,-16(fp)
 1011e14:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1011e18:	e13ffb17 	ldw	r4,-20(fp)
 1011e1c:	10101480 	call	1010148 <alt_release_fd>
  }
} 
 1011e20:	e037883a 	mov	sp,fp
 1011e24:	dfc00117 	ldw	ra,4(sp)
 1011e28:	df000017 	ldw	fp,0(sp)
 1011e2c:	dec00204 	addi	sp,sp,8
 1011e30:	f800283a 	ret

01011e34 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1011e34:	defffb04 	addi	sp,sp,-20
 1011e38:	dfc00415 	stw	ra,16(sp)
 1011e3c:	df000315 	stw	fp,12(sp)
 1011e40:	df000304 	addi	fp,sp,12
 1011e44:	e13ffd15 	stw	r4,-12(fp)
 1011e48:	e17ffe15 	stw	r5,-8(fp)
 1011e4c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1011e50:	01004074 	movhi	r4,257
 1011e54:	210f0404 	addi	r4,r4,15376
 1011e58:	e17ffd17 	ldw	r5,-12(fp)
 1011e5c:	01800044 	movi	r6,1
 1011e60:	01c07fc4 	movi	r7,511
 1011e64:	1011d700 	call	1011d70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1011e68:	01004074 	movhi	r4,257
 1011e6c:	210f0104 	addi	r4,r4,15364
 1011e70:	e17ffe17 	ldw	r5,-8(fp)
 1011e74:	000d883a 	mov	r6,zero
 1011e78:	01c07fc4 	movi	r7,511
 1011e7c:	1011d700 	call	1011d70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1011e80:	01004074 	movhi	r4,257
 1011e84:	210f0704 	addi	r4,r4,15388
 1011e88:	e17fff17 	ldw	r5,-4(fp)
 1011e8c:	01800044 	movi	r6,1
 1011e90:	01c07fc4 	movi	r7,511
 1011e94:	1011d700 	call	1011d70 <alt_open_fd>
}  
 1011e98:	e037883a 	mov	sp,fp
 1011e9c:	dfc00117 	ldw	ra,4(sp)
 1011ea0:	df000017 	ldw	fp,0(sp)
 1011ea4:	dec00204 	addi	sp,sp,8
 1011ea8:	f800283a 	ret

01011eac <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 1011eac:	deffef04 	addi	sp,sp,-68
 1011eb0:	df001015 	stw	fp,64(sp)
 1011eb4:	df001004 	addi	fp,sp,64
 1011eb8:	e13ffc15 	stw	r4,-16(fp)
 1011ebc:	e17ffd15 	stw	r5,-12(fp)
 1011ec0:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 1011ec4:	00bffa84 	movi	r2,-22
 1011ec8:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1011ecc:	e0bffc17 	ldw	r2,-16(fp)
 1011ed0:	10800828 	cmpgeui	r2,r2,32
 1011ed4:	1000601e 	bne	r2,zero,1012058 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011ed8:	0005303a 	rdctl	r2,status
 1011edc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011ee0:	e0fff917 	ldw	r3,-28(fp)
 1011ee4:	00bfff84 	movi	r2,-2
 1011ee8:	1884703a 	and	r2,r3,r2
 1011eec:	1001703a 	wrctl	status,r2
  
  return context;
 1011ef0:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 1011ef4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 1011ef8:	e0bffc17 	ldw	r2,-16(fp)
 1011efc:	00c04074 	movhi	r3,257
 1011f00:	18daaf04 	addi	r3,r3,27324
 1011f04:	100490fa 	slli	r2,r2,3
 1011f08:	10c7883a 	add	r3,r2,r3
 1011f0c:	e0bffe17 	ldw	r2,-8(fp)
 1011f10:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 1011f14:	e0bffc17 	ldw	r2,-16(fp)
 1011f18:	00c04074 	movhi	r3,257
 1011f1c:	18daaf04 	addi	r3,r3,27324
 1011f20:	100490fa 	slli	r2,r2,3
 1011f24:	10c5883a 	add	r2,r2,r3
 1011f28:	10c00104 	addi	r3,r2,4
 1011f2c:	e0bffd17 	ldw	r2,-12(fp)
 1011f30:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1011f34:	e0bffe17 	ldw	r2,-8(fp)
 1011f38:	1005003a 	cmpeq	r2,r2,zero
 1011f3c:	1000201e 	bne	r2,zero,1011fc0 <alt_irq_register+0x114>
 1011f40:	e0bffc17 	ldw	r2,-16(fp)
 1011f44:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011f48:	0005303a 	rdctl	r2,status
 1011f4c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011f50:	e0fff617 	ldw	r3,-40(fp)
 1011f54:	00bfff84 	movi	r2,-2
 1011f58:	1884703a 	and	r2,r3,r2
 1011f5c:	1001703a 	wrctl	status,r2
  
  return context;
 1011f60:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1011f64:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 1011f68:	e0fff717 	ldw	r3,-36(fp)
 1011f6c:	00800044 	movi	r2,1
 1011f70:	10c4983a 	sll	r2,r2,r3
 1011f74:	1007883a 	mov	r3,r2
 1011f78:	00804074 	movhi	r2,257
 1011f7c:	109a6204 	addi	r2,r2,27016
 1011f80:	10800017 	ldw	r2,0(r2)
 1011f84:	1886b03a 	or	r3,r3,r2
 1011f88:	00804074 	movhi	r2,257
 1011f8c:	109a6204 	addi	r2,r2,27016
 1011f90:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1011f94:	00804074 	movhi	r2,257
 1011f98:	109a6204 	addi	r2,r2,27016
 1011f9c:	10800017 	ldw	r2,0(r2)
 1011fa0:	100170fa 	wrctl	ienable,r2
 1011fa4:	e0bff817 	ldw	r2,-32(fp)
 1011fa8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011fac:	e0bff517 	ldw	r2,-44(fp)
 1011fb0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1011fb4:	0005883a 	mov	r2,zero
 1011fb8:	e0bfff15 	stw	r2,-4(fp)
 1011fbc:	00002006 	br	1012040 <alt_irq_register+0x194>
 1011fc0:	e0bffc17 	ldw	r2,-16(fp)
 1011fc4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011fc8:	0005303a 	rdctl	r2,status
 1011fcc:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011fd0:	e0fff217 	ldw	r3,-56(fp)
 1011fd4:	00bfff84 	movi	r2,-2
 1011fd8:	1884703a 	and	r2,r3,r2
 1011fdc:	1001703a 	wrctl	status,r2
  
  return context;
 1011fe0:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1011fe4:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 1011fe8:	e0fff317 	ldw	r3,-52(fp)
 1011fec:	00800044 	movi	r2,1
 1011ff0:	10c4983a 	sll	r2,r2,r3
 1011ff4:	0084303a 	nor	r2,zero,r2
 1011ff8:	1007883a 	mov	r3,r2
 1011ffc:	00804074 	movhi	r2,257
 1012000:	109a6204 	addi	r2,r2,27016
 1012004:	10800017 	ldw	r2,0(r2)
 1012008:	1886703a 	and	r3,r3,r2
 101200c:	00804074 	movhi	r2,257
 1012010:	109a6204 	addi	r2,r2,27016
 1012014:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1012018:	00804074 	movhi	r2,257
 101201c:	109a6204 	addi	r2,r2,27016
 1012020:	10800017 	ldw	r2,0(r2)
 1012024:	100170fa 	wrctl	ienable,r2
 1012028:	e0bff417 	ldw	r2,-48(fp)
 101202c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012030:	e0bff117 	ldw	r2,-60(fp)
 1012034:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1012038:	0005883a 	mov	r2,zero
 101203c:	e0bfff15 	stw	r2,-4(fp)
 1012040:	e0bfff17 	ldw	r2,-4(fp)
 1012044:	e0bffb15 	stw	r2,-20(fp)
 1012048:	e0bffa17 	ldw	r2,-24(fp)
 101204c:	e0bff015 	stw	r2,-64(fp)
 1012050:	e0bff017 	ldw	r2,-64(fp)
 1012054:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 1012058:	e0bffb17 	ldw	r2,-20(fp)
}
 101205c:	e037883a 	mov	sp,fp
 1012060:	df000017 	ldw	fp,0(sp)
 1012064:	dec00104 	addi	sp,sp,4
 1012068:	f800283a 	ret

0101206c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 101206c:	defffc04 	addi	sp,sp,-16
 1012070:	df000315 	stw	fp,12(sp)
 1012074:	df000304 	addi	fp,sp,12
 1012078:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 101207c:	e0bffe17 	ldw	r2,-8(fp)
 1012080:	10800217 	ldw	r2,8(r2)
 1012084:	10d00034 	orhi	r3,r2,16384
 1012088:	e0bffe17 	ldw	r2,-8(fp)
 101208c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1012090:	e03ffd15 	stw	zero,-12(fp)
 1012094:	00002006 	br	1012118 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1012098:	e0bffd17 	ldw	r2,-12(fp)
 101209c:	00c04074 	movhi	r3,257
 10120a0:	18cf0104 	addi	r3,r3,15364
 10120a4:	10800324 	muli	r2,r2,12
 10120a8:	10c5883a 	add	r2,r2,r3
 10120ac:	10c00017 	ldw	r3,0(r2)
 10120b0:	e0bffe17 	ldw	r2,-8(fp)
 10120b4:	10800017 	ldw	r2,0(r2)
 10120b8:	1880141e 	bne	r3,r2,101210c <alt_file_locked+0xa0>
 10120bc:	e0bffd17 	ldw	r2,-12(fp)
 10120c0:	00c04074 	movhi	r3,257
 10120c4:	18cf0104 	addi	r3,r3,15364
 10120c8:	10800324 	muli	r2,r2,12
 10120cc:	10c5883a 	add	r2,r2,r3
 10120d0:	10800204 	addi	r2,r2,8
 10120d4:	10800017 	ldw	r2,0(r2)
 10120d8:	1004403a 	cmpge	r2,r2,zero
 10120dc:	10000b1e 	bne	r2,zero,101210c <alt_file_locked+0xa0>
 10120e0:	e0bffd17 	ldw	r2,-12(fp)
 10120e4:	10800324 	muli	r2,r2,12
 10120e8:	1007883a 	mov	r3,r2
 10120ec:	00804074 	movhi	r2,257
 10120f0:	108f0104 	addi	r2,r2,15364
 10120f4:	1887883a 	add	r3,r3,r2
 10120f8:	e0bffe17 	ldw	r2,-8(fp)
 10120fc:	18800326 	beq	r3,r2,101210c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1012100:	00bffcc4 	movi	r2,-13
 1012104:	e0bfff15 	stw	r2,-4(fp)
 1012108:	00000a06 	br	1012134 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 101210c:	e0bffd17 	ldw	r2,-12(fp)
 1012110:	10800044 	addi	r2,r2,1
 1012114:	e0bffd15 	stw	r2,-12(fp)
 1012118:	00804074 	movhi	r2,257
 101211c:	10939a04 	addi	r2,r2,20072
 1012120:	10800017 	ldw	r2,0(r2)
 1012124:	1007883a 	mov	r3,r2
 1012128:	e0bffd17 	ldw	r2,-12(fp)
 101212c:	18bfda2e 	bgeu	r3,r2,1012098 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1012130:	e03fff15 	stw	zero,-4(fp)
 1012134:	e0bfff17 	ldw	r2,-4(fp)
}
 1012138:	e037883a 	mov	sp,fp
 101213c:	df000017 	ldw	fp,0(sp)
 1012140:	dec00104 	addi	sp,sp,4
 1012144:	f800283a 	ret

01012148 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1012148:	defff404 	addi	sp,sp,-48
 101214c:	dfc00b15 	stw	ra,44(sp)
 1012150:	df000a15 	stw	fp,40(sp)
 1012154:	df000a04 	addi	fp,sp,40
 1012158:	e13ffb15 	stw	r4,-20(fp)
 101215c:	e17ffc15 	stw	r5,-16(fp)
 1012160:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1012164:	00bfffc4 	movi	r2,-1
 1012168:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 101216c:	00bffb44 	movi	r2,-19
 1012170:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 1012174:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1012178:	e13ffb17 	ldw	r4,-20(fp)
 101217c:	01404074 	movhi	r5,257
 1012180:	29539804 	addi	r5,r5,20064
 1012184:	1011cac0 	call	1011cac <alt_find_dev>
 1012188:	e0bffa15 	stw	r2,-24(fp)
 101218c:	e0bffa17 	ldw	r2,-24(fp)
 1012190:	1004c03a 	cmpne	r2,r2,zero
 1012194:	1000051e 	bne	r2,zero,10121ac <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1012198:	e13ffb17 	ldw	r4,-20(fp)
 101219c:	10124f40 	call	10124f4 <alt_find_file>
 10121a0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 10121a4:	00800044 	movi	r2,1
 10121a8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 10121ac:	e0bffa17 	ldw	r2,-24(fp)
 10121b0:	1005003a 	cmpeq	r2,r2,zero
 10121b4:	1000301e 	bne	r2,zero,1012278 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 10121b8:	e13ffa17 	ldw	r4,-24(fp)
 10121bc:	10126140 	call	1012614 <alt_get_fd>
 10121c0:	e0bff815 	stw	r2,-32(fp)
 10121c4:	e0bff817 	ldw	r2,-32(fp)
 10121c8:	1004403a 	cmpge	r2,r2,zero
 10121cc:	1000031e 	bne	r2,zero,10121dc <open+0x94>
    {
      status = index;
 10121d0:	e0bff817 	ldw	r2,-32(fp)
 10121d4:	e0bff715 	stw	r2,-36(fp)
 10121d8:	00002906 	br	1012280 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 10121dc:	e0bff817 	ldw	r2,-32(fp)
 10121e0:	10800324 	muli	r2,r2,12
 10121e4:	1007883a 	mov	r3,r2
 10121e8:	00804074 	movhi	r2,257
 10121ec:	108f0104 	addi	r2,r2,15364
 10121f0:	1885883a 	add	r2,r3,r2
 10121f4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 10121f8:	e0fffc17 	ldw	r3,-16(fp)
 10121fc:	00900034 	movhi	r2,16384
 1012200:	10bfffc4 	addi	r2,r2,-1
 1012204:	1886703a 	and	r3,r3,r2
 1012208:	e0bff917 	ldw	r2,-28(fp)
 101220c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1012210:	e0bff617 	ldw	r2,-40(fp)
 1012214:	1004c03a 	cmpne	r2,r2,zero
 1012218:	1000061e 	bne	r2,zero,1012234 <open+0xec>
 101221c:	e13ff917 	ldw	r4,-28(fp)
 1012220:	101206c0 	call	101206c <alt_file_locked>
 1012224:	e0bff715 	stw	r2,-36(fp)
 1012228:	e0bff717 	ldw	r2,-36(fp)
 101222c:	1004803a 	cmplt	r2,r2,zero
 1012230:	1000131e 	bne	r2,zero,1012280 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1012234:	e0bffa17 	ldw	r2,-24(fp)
 1012238:	10800317 	ldw	r2,12(r2)
 101223c:	1005003a 	cmpeq	r2,r2,zero
 1012240:	1000091e 	bne	r2,zero,1012268 <open+0x120>
 1012244:	e0bffa17 	ldw	r2,-24(fp)
 1012248:	10800317 	ldw	r2,12(r2)
 101224c:	e13ff917 	ldw	r4,-28(fp)
 1012250:	e17ffb17 	ldw	r5,-20(fp)
 1012254:	e1bffc17 	ldw	r6,-16(fp)
 1012258:	e1fffd17 	ldw	r7,-12(fp)
 101225c:	103ee83a 	callr	r2
 1012260:	e0bfff15 	stw	r2,-4(fp)
 1012264:	00000106 	br	101226c <open+0x124>
 1012268:	e03fff15 	stw	zero,-4(fp)
 101226c:	e0bfff17 	ldw	r2,-4(fp)
 1012270:	e0bff715 	stw	r2,-36(fp)
 1012274:	00000206 	br	1012280 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1012278:	00bffb44 	movi	r2,-19
 101227c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1012280:	e0bff717 	ldw	r2,-36(fp)
 1012284:	1004403a 	cmpge	r2,r2,zero
 1012288:	1000091e 	bne	r2,zero,10122b0 <open+0x168>
  {
    alt_release_fd (index);  
 101228c:	e13ff817 	ldw	r4,-32(fp)
 1012290:	10101480 	call	1010148 <alt_release_fd>
    ALT_ERRNO = -status;
 1012294:	10122d00 	call	10122d0 <alt_get_errno>
 1012298:	e0fff717 	ldw	r3,-36(fp)
 101229c:	00c7c83a 	sub	r3,zero,r3
 10122a0:	10c00015 	stw	r3,0(r2)
    return -1;
 10122a4:	00bfffc4 	movi	r2,-1
 10122a8:	e0bffe15 	stw	r2,-8(fp)
 10122ac:	00000206 	br	10122b8 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 10122b0:	e0bff817 	ldw	r2,-32(fp)
 10122b4:	e0bffe15 	stw	r2,-8(fp)
 10122b8:	e0bffe17 	ldw	r2,-8(fp)
}
 10122bc:	e037883a 	mov	sp,fp
 10122c0:	dfc00117 	ldw	ra,4(sp)
 10122c4:	df000017 	ldw	fp,0(sp)
 10122c8:	dec00204 	addi	sp,sp,8
 10122cc:	f800283a 	ret

010122d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10122d0:	defffd04 	addi	sp,sp,-12
 10122d4:	dfc00215 	stw	ra,8(sp)
 10122d8:	df000115 	stw	fp,4(sp)
 10122dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10122e0:	00804074 	movhi	r2,257
 10122e4:	10939b04 	addi	r2,r2,20076
 10122e8:	10800017 	ldw	r2,0(r2)
 10122ec:	1005003a 	cmpeq	r2,r2,zero
 10122f0:	1000061e 	bne	r2,zero,101230c <alt_get_errno+0x3c>
 10122f4:	00804074 	movhi	r2,257
 10122f8:	10939b04 	addi	r2,r2,20076
 10122fc:	10800017 	ldw	r2,0(r2)
 1012300:	103ee83a 	callr	r2
 1012304:	e0bfff15 	stw	r2,-4(fp)
 1012308:	00000306 	br	1012318 <alt_get_errno+0x48>
 101230c:	00804074 	movhi	r2,257
 1012310:	109a5e04 	addi	r2,r2,27000
 1012314:	e0bfff15 	stw	r2,-4(fp)
 1012318:	e0bfff17 	ldw	r2,-4(fp)
}
 101231c:	e037883a 	mov	sp,fp
 1012320:	dfc00117 	ldw	ra,4(sp)
 1012324:	df000017 	ldw	fp,0(sp)
 1012328:	dec00204 	addi	sp,sp,8
 101232c:	f800283a 	ret

01012330 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1012330:	defffa04 	addi	sp,sp,-24
 1012334:	df000515 	stw	fp,20(sp)
 1012338:	df000504 	addi	fp,sp,20
 101233c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012340:	0005303a 	rdctl	r2,status
 1012344:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012348:	e0fffd17 	ldw	r3,-12(fp)
 101234c:	00bfff84 	movi	r2,-2
 1012350:	1884703a 	and	r2,r3,r2
 1012354:	1001703a 	wrctl	status,r2
  
  return context;
 1012358:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 101235c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 1012360:	e0bfff17 	ldw	r2,-4(fp)
 1012364:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1012368:	e0bffc17 	ldw	r2,-16(fp)
 101236c:	10c00017 	ldw	r3,0(r2)
 1012370:	e0bffc17 	ldw	r2,-16(fp)
 1012374:	10800117 	ldw	r2,4(r2)
 1012378:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 101237c:	e0bffc17 	ldw	r2,-16(fp)
 1012380:	10c00117 	ldw	r3,4(r2)
 1012384:	e0bffc17 	ldw	r2,-16(fp)
 1012388:	10800017 	ldw	r2,0(r2)
 101238c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1012390:	e0fffc17 	ldw	r3,-16(fp)
 1012394:	e0bffc17 	ldw	r2,-16(fp)
 1012398:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 101239c:	e0fffc17 	ldw	r3,-16(fp)
 10123a0:	e0bffc17 	ldw	r2,-16(fp)
 10123a4:	18800015 	stw	r2,0(r3)
 10123a8:	e0bffe17 	ldw	r2,-8(fp)
 10123ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10123b0:	e0bffb17 	ldw	r2,-20(fp)
 10123b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 10123b8:	e037883a 	mov	sp,fp
 10123bc:	df000017 	ldw	fp,0(sp)
 10123c0:	dec00104 	addi	sp,sp,4
 10123c4:	f800283a 	ret

010123c8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 10123c8:	defffb04 	addi	sp,sp,-20
 10123cc:	dfc00415 	stw	ra,16(sp)
 10123d0:	df000315 	stw	fp,12(sp)
 10123d4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 10123d8:	d0a00f17 	ldw	r2,-32708(gp)
 10123dc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 10123e0:	d0a6d517 	ldw	r2,-25772(gp)
 10123e4:	10800044 	addi	r2,r2,1
 10123e8:	d0a6d515 	stw	r2,-25772(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10123ec:	00003106 	br	10124b4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 10123f0:	e0bffe17 	ldw	r2,-8(fp)
 10123f4:	10800017 	ldw	r2,0(r2)
 10123f8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 10123fc:	e0bffe17 	ldw	r2,-8(fp)
 1012400:	10800403 	ldbu	r2,16(r2)
 1012404:	10803fcc 	andi	r2,r2,255
 1012408:	1005003a 	cmpeq	r2,r2,zero
 101240c:	1000051e 	bne	r2,zero,1012424 <alt_tick+0x5c>
 1012410:	d0a6d517 	ldw	r2,-25772(gp)
 1012414:	1004c03a 	cmpne	r2,r2,zero
 1012418:	1000021e 	bne	r2,zero,1012424 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 101241c:	e0bffe17 	ldw	r2,-8(fp)
 1012420:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1012424:	e0bffe17 	ldw	r2,-8(fp)
 1012428:	10c00217 	ldw	r3,8(r2)
 101242c:	d0a6d517 	ldw	r2,-25772(gp)
 1012430:	10c01e36 	bltu	r2,r3,10124ac <alt_tick+0xe4>
 1012434:	e0bffe17 	ldw	r2,-8(fp)
 1012438:	10800403 	ldbu	r2,16(r2)
 101243c:	10803fcc 	andi	r2,r2,255
 1012440:	1004c03a 	cmpne	r2,r2,zero
 1012444:	1000191e 	bne	r2,zero,10124ac <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1012448:	e0bffe17 	ldw	r2,-8(fp)
 101244c:	10c00317 	ldw	r3,12(r2)
 1012450:	e0bffe17 	ldw	r2,-8(fp)
 1012454:	11000517 	ldw	r4,20(r2)
 1012458:	183ee83a 	callr	r3
 101245c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1012460:	e0bffd17 	ldw	r2,-12(fp)
 1012464:	1004c03a 	cmpne	r2,r2,zero
 1012468:	1000031e 	bne	r2,zero,1012478 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 101246c:	e13ffe17 	ldw	r4,-8(fp)
 1012470:	10123300 	call	1012330 <alt_alarm_stop>
 1012474:	00000d06 	br	10124ac <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 1012478:	e0bffe17 	ldw	r2,-8(fp)
 101247c:	10c00217 	ldw	r3,8(r2)
 1012480:	e0bffd17 	ldw	r2,-12(fp)
 1012484:	1887883a 	add	r3,r3,r2
 1012488:	e0bffe17 	ldw	r2,-8(fp)
 101248c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1012490:	e0bffe17 	ldw	r2,-8(fp)
 1012494:	10c00217 	ldw	r3,8(r2)
 1012498:	d0a6d517 	ldw	r2,-25772(gp)
 101249c:	1880032e 	bgeu	r3,r2,10124ac <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 10124a0:	e0fffe17 	ldw	r3,-8(fp)
 10124a4:	00800044 	movi	r2,1
 10124a8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 10124ac:	e0bfff17 	ldw	r2,-4(fp)
 10124b0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10124b4:	d0e00f04 	addi	r3,gp,-32708
 10124b8:	e0bffe17 	ldw	r2,-8(fp)
 10124bc:	10ffcc1e 	bne	r2,r3,10123f0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 10124c0:	e037883a 	mov	sp,fp
 10124c4:	dfc00117 	ldw	ra,4(sp)
 10124c8:	df000017 	ldw	fp,0(sp)
 10124cc:	dec00204 	addi	sp,sp,8
 10124d0:	f800283a 	ret

010124d4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 10124d4:	deffff04 	addi	sp,sp,-4
 10124d8:	df000015 	stw	fp,0(sp)
 10124dc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 10124e0:	000170fa 	wrctl	ienable,zero
}
 10124e4:	e037883a 	mov	sp,fp
 10124e8:	df000017 	ldw	fp,0(sp)
 10124ec:	dec00104 	addi	sp,sp,4
 10124f0:	f800283a 	ret

010124f4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 10124f4:	defffa04 	addi	sp,sp,-24
 10124f8:	dfc00515 	stw	ra,20(sp)
 10124fc:	df000415 	stw	fp,16(sp)
 1012500:	df000404 	addi	fp,sp,16
 1012504:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1012508:	00804074 	movhi	r2,257
 101250c:	10939604 	addi	r2,r2,20056
 1012510:	10800017 	ldw	r2,0(r2)
 1012514:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1012518:	00003306 	br	10125e8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 101251c:	e0bffd17 	ldw	r2,-12(fp)
 1012520:	11000217 	ldw	r4,8(r2)
 1012524:	1000c000 	call	1000c00 <strlen>
 1012528:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 101252c:	e0bffd17 	ldw	r2,-12(fp)
 1012530:	10c00217 	ldw	r3,8(r2)
 1012534:	e0bffc17 	ldw	r2,-16(fp)
 1012538:	1885883a 	add	r2,r3,r2
 101253c:	10bfffc4 	addi	r2,r2,-1
 1012540:	10800003 	ldbu	r2,0(r2)
 1012544:	10803fcc 	andi	r2,r2,255
 1012548:	1080201c 	xori	r2,r2,128
 101254c:	10bfe004 	addi	r2,r2,-128
 1012550:	10800bd8 	cmpnei	r2,r2,47
 1012554:	1000031e 	bne	r2,zero,1012564 <alt_find_file+0x70>
    {
      len -= 1;
 1012558:	e0bffc17 	ldw	r2,-16(fp)
 101255c:	10bfffc4 	addi	r2,r2,-1
 1012560:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1012564:	e0bffc17 	ldw	r2,-16(fp)
 1012568:	1007883a 	mov	r3,r2
 101256c:	e0bffe17 	ldw	r2,-8(fp)
 1012570:	1885883a 	add	r2,r3,r2
 1012574:	10800003 	ldbu	r2,0(r2)
 1012578:	10803fcc 	andi	r2,r2,255
 101257c:	1080201c 	xori	r2,r2,128
 1012580:	10bfe004 	addi	r2,r2,-128
 1012584:	10800be0 	cmpeqi	r2,r2,47
 1012588:	10000a1e 	bne	r2,zero,10125b4 <alt_find_file+0xc0>
 101258c:	e0bffc17 	ldw	r2,-16(fp)
 1012590:	1007883a 	mov	r3,r2
 1012594:	e0bffe17 	ldw	r2,-8(fp)
 1012598:	1885883a 	add	r2,r3,r2
 101259c:	10800003 	ldbu	r2,0(r2)
 10125a0:	10803fcc 	andi	r2,r2,255
 10125a4:	1080201c 	xori	r2,r2,128
 10125a8:	10bfe004 	addi	r2,r2,-128
 10125ac:	1004c03a 	cmpne	r2,r2,zero
 10125b0:	10000a1e 	bne	r2,zero,10125dc <alt_find_file+0xe8>
 10125b4:	e0bffd17 	ldw	r2,-12(fp)
 10125b8:	11000217 	ldw	r4,8(r2)
 10125bc:	e1bffc17 	ldw	r6,-16(fp)
 10125c0:	e17ffe17 	ldw	r5,-8(fp)
 10125c4:	10127a80 	call	10127a8 <memcmp>
 10125c8:	1004c03a 	cmpne	r2,r2,zero
 10125cc:	1000031e 	bne	r2,zero,10125dc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 10125d0:	e0bffd17 	ldw	r2,-12(fp)
 10125d4:	e0bfff15 	stw	r2,-4(fp)
 10125d8:	00000806 	br	10125fc <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 10125dc:	e0bffd17 	ldw	r2,-12(fp)
 10125e0:	10800017 	ldw	r2,0(r2)
 10125e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10125e8:	00c04074 	movhi	r3,257
 10125ec:	18d39604 	addi	r3,r3,20056
 10125f0:	e0bffd17 	ldw	r2,-12(fp)
 10125f4:	10ffc91e 	bne	r2,r3,101251c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 10125f8:	e03fff15 	stw	zero,-4(fp)
 10125fc:	e0bfff17 	ldw	r2,-4(fp)
}
 1012600:	e037883a 	mov	sp,fp
 1012604:	dfc00117 	ldw	ra,4(sp)
 1012608:	df000017 	ldw	fp,0(sp)
 101260c:	dec00204 	addi	sp,sp,8
 1012610:	f800283a 	ret

01012614 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1012614:	defffc04 	addi	sp,sp,-16
 1012618:	df000315 	stw	fp,12(sp)
 101261c:	df000304 	addi	fp,sp,12
 1012620:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1012624:	00bffa04 	movi	r2,-24
 1012628:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 101262c:	e03ffe15 	stw	zero,-8(fp)
 1012630:	00001e06 	br	10126ac <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 1012634:	e0bffe17 	ldw	r2,-8(fp)
 1012638:	00c04074 	movhi	r3,257
 101263c:	18cf0104 	addi	r3,r3,15364
 1012640:	10800324 	muli	r2,r2,12
 1012644:	10c5883a 	add	r2,r2,r3
 1012648:	10800017 	ldw	r2,0(r2)
 101264c:	1004c03a 	cmpne	r2,r2,zero
 1012650:	1000131e 	bne	r2,zero,10126a0 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 1012654:	e0bffe17 	ldw	r2,-8(fp)
 1012658:	00c04074 	movhi	r3,257
 101265c:	18cf0104 	addi	r3,r3,15364
 1012660:	10800324 	muli	r2,r2,12
 1012664:	10c7883a 	add	r3,r2,r3
 1012668:	e0bfff17 	ldw	r2,-4(fp)
 101266c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 1012670:	00804074 	movhi	r2,257
 1012674:	10939a04 	addi	r2,r2,20072
 1012678:	10c00017 	ldw	r3,0(r2)
 101267c:	e0bffe17 	ldw	r2,-8(fp)
 1012680:	1880040e 	bge	r3,r2,1012694 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 1012684:	00c04074 	movhi	r3,257
 1012688:	18d39a04 	addi	r3,r3,20072
 101268c:	e0bffe17 	ldw	r2,-8(fp)
 1012690:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1012694:	e0bffe17 	ldw	r2,-8(fp)
 1012698:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 101269c:	00000606 	br	10126b8 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10126a0:	e0bffe17 	ldw	r2,-8(fp)
 10126a4:	10800044 	addi	r2,r2,1
 10126a8:	e0bffe15 	stw	r2,-8(fp)
 10126ac:	e0bffe17 	ldw	r2,-8(fp)
 10126b0:	10800810 	cmplti	r2,r2,32
 10126b4:	103fdf1e 	bne	r2,zero,1012634 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 10126b8:	e0bffd17 	ldw	r2,-12(fp)
}
 10126bc:	e037883a 	mov	sp,fp
 10126c0:	df000017 	ldw	fp,0(sp)
 10126c4:	dec00104 	addi	sp,sp,4
 10126c8:	f800283a 	ret

010126cc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 10126cc:	defffb04 	addi	sp,sp,-20
 10126d0:	df000415 	stw	fp,16(sp)
 10126d4:	df000404 	addi	fp,sp,16
 10126d8:	e13ffe15 	stw	r4,-8(fp)
 10126dc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 10126e0:	e0bfff17 	ldw	r2,-4(fp)
 10126e4:	10900070 	cmpltui	r2,r2,16385
 10126e8:	1000021e 	bne	r2,zero,10126f4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 10126ec:	00900004 	movi	r2,16384
 10126f0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 10126f4:	e0fffe17 	ldw	r3,-8(fp)
 10126f8:	e0bfff17 	ldw	r2,-4(fp)
 10126fc:	1885883a 	add	r2,r3,r2
 1012700:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1012704:	e0bffe17 	ldw	r2,-8(fp)
 1012708:	e0bffd15 	stw	r2,-12(fp)
 101270c:	00000506 	br	1012724 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1012710:	e0bffd17 	ldw	r2,-12(fp)
 1012714:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1012718:	e0bffd17 	ldw	r2,-12(fp)
 101271c:	10800804 	addi	r2,r2,32
 1012720:	e0bffd15 	stw	r2,-12(fp)
 1012724:	e0fffd17 	ldw	r3,-12(fp)
 1012728:	e0bffc17 	ldw	r2,-16(fp)
 101272c:	18bff836 	bltu	r3,r2,1012710 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1012730:	e0bffe17 	ldw	r2,-8(fp)
 1012734:	108007cc 	andi	r2,r2,31
 1012738:	1005003a 	cmpeq	r2,r2,zero
 101273c:	1000021e 	bne	r2,zero,1012748 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1012740:	e0bffd17 	ldw	r2,-12(fp)
 1012744:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 1012748:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 101274c:	e037883a 	mov	sp,fp
 1012750:	df000017 	ldw	fp,0(sp)
 1012754:	dec00104 	addi	sp,sp,4
 1012758:	f800283a 	ret

0101275c <atexit>:
 101275c:	200b883a 	mov	r5,r4
 1012760:	000d883a 	mov	r6,zero
 1012764:	0009883a 	mov	r4,zero
 1012768:	000f883a 	mov	r7,zero
 101276c:	101281c1 	jmpi	101281c <__register_exitproc>

01012770 <exit>:
 1012770:	defffe04 	addi	sp,sp,-8
 1012774:	000b883a 	mov	r5,zero
 1012778:	dc000015 	stw	r16,0(sp)
 101277c:	dfc00115 	stw	ra,4(sp)
 1012780:	2021883a 	mov	r16,r4
 1012784:	10129540 	call	1012954 <__call_exitprocs>
 1012788:	00804074 	movhi	r2,257
 101278c:	10939104 	addi	r2,r2,20036
 1012790:	11000017 	ldw	r4,0(r2)
 1012794:	20800f17 	ldw	r2,60(r4)
 1012798:	10000126 	beq	r2,zero,10127a0 <exit+0x30>
 101279c:	103ee83a 	callr	r2
 10127a0:	8009883a 	mov	r4,r16
 10127a4:	1012b440 	call	1012b44 <_exit>

010127a8 <memcmp>:
 10127a8:	00c000c4 	movi	r3,3
 10127ac:	1980032e 	bgeu	r3,r6,10127bc <memcmp+0x14>
 10127b0:	2144b03a 	or	r2,r4,r5
 10127b4:	10c4703a 	and	r2,r2,r3
 10127b8:	10000f26 	beq	r2,zero,10127f8 <memcmp+0x50>
 10127bc:	31ffffc4 	addi	r7,r6,-1
 10127c0:	3000061e 	bne	r6,zero,10127dc <memcmp+0x34>
 10127c4:	00000a06 	br	10127f0 <memcmp+0x48>
 10127c8:	39ffffc4 	addi	r7,r7,-1
 10127cc:	00bfffc4 	movi	r2,-1
 10127d0:	21000044 	addi	r4,r4,1
 10127d4:	29400044 	addi	r5,r5,1
 10127d8:	38800526 	beq	r7,r2,10127f0 <memcmp+0x48>
 10127dc:	20c00003 	ldbu	r3,0(r4)
 10127e0:	28800003 	ldbu	r2,0(r5)
 10127e4:	18bff826 	beq	r3,r2,10127c8 <memcmp+0x20>
 10127e8:	1885c83a 	sub	r2,r3,r2
 10127ec:	f800283a 	ret
 10127f0:	0005883a 	mov	r2,zero
 10127f4:	f800283a 	ret
 10127f8:	180f883a 	mov	r7,r3
 10127fc:	20c00017 	ldw	r3,0(r4)
 1012800:	28800017 	ldw	r2,0(r5)
 1012804:	18bfed1e 	bne	r3,r2,10127bc <memcmp+0x14>
 1012808:	31bfff04 	addi	r6,r6,-4
 101280c:	21000104 	addi	r4,r4,4
 1012810:	29400104 	addi	r5,r5,4
 1012814:	39bff936 	bltu	r7,r6,10127fc <memcmp+0x54>
 1012818:	003fe806 	br	10127bc <memcmp+0x14>

0101281c <__register_exitproc>:
 101281c:	defffa04 	addi	sp,sp,-24
 1012820:	00804074 	movhi	r2,257
 1012824:	10939104 	addi	r2,r2,20036
 1012828:	dc000015 	stw	r16,0(sp)
 101282c:	14000017 	ldw	r16,0(r2)
 1012830:	dd000415 	stw	r20,16(sp)
 1012834:	2829883a 	mov	r20,r5
 1012838:	81405217 	ldw	r5,328(r16)
 101283c:	dcc00315 	stw	r19,12(sp)
 1012840:	dc800215 	stw	r18,8(sp)
 1012844:	dc400115 	stw	r17,4(sp)
 1012848:	dfc00515 	stw	ra,20(sp)
 101284c:	2023883a 	mov	r17,r4
 1012850:	3027883a 	mov	r19,r6
 1012854:	3825883a 	mov	r18,r7
 1012858:	28002526 	beq	r5,zero,10128f0 <__register_exitproc+0xd4>
 101285c:	29000117 	ldw	r4,4(r5)
 1012860:	008007c4 	movi	r2,31
 1012864:	11002716 	blt	r2,r4,1012904 <__register_exitproc+0xe8>
 1012868:	8800101e 	bne	r17,zero,10128ac <__register_exitproc+0x90>
 101286c:	2105883a 	add	r2,r4,r4
 1012870:	1085883a 	add	r2,r2,r2
 1012874:	20c00044 	addi	r3,r4,1
 1012878:	1145883a 	add	r2,r2,r5
 101287c:	0009883a 	mov	r4,zero
 1012880:	15000215 	stw	r20,8(r2)
 1012884:	28c00115 	stw	r3,4(r5)
 1012888:	2005883a 	mov	r2,r4
 101288c:	dfc00517 	ldw	ra,20(sp)
 1012890:	dd000417 	ldw	r20,16(sp)
 1012894:	dcc00317 	ldw	r19,12(sp)
 1012898:	dc800217 	ldw	r18,8(sp)
 101289c:	dc400117 	ldw	r17,4(sp)
 10128a0:	dc000017 	ldw	r16,0(sp)
 10128a4:	dec00604 	addi	sp,sp,24
 10128a8:	f800283a 	ret
 10128ac:	29802204 	addi	r6,r5,136
 10128b0:	00800044 	movi	r2,1
 10128b4:	110e983a 	sll	r7,r2,r4
 10128b8:	30c04017 	ldw	r3,256(r6)
 10128bc:	2105883a 	add	r2,r4,r4
 10128c0:	1085883a 	add	r2,r2,r2
 10128c4:	1185883a 	add	r2,r2,r6
 10128c8:	19c6b03a 	or	r3,r3,r7
 10128cc:	14802015 	stw	r18,128(r2)
 10128d0:	14c00015 	stw	r19,0(r2)
 10128d4:	00800084 	movi	r2,2
 10128d8:	30c04015 	stw	r3,256(r6)
 10128dc:	88bfe31e 	bne	r17,r2,101286c <__register_exitproc+0x50>
 10128e0:	30804117 	ldw	r2,260(r6)
 10128e4:	11c4b03a 	or	r2,r2,r7
 10128e8:	30804115 	stw	r2,260(r6)
 10128ec:	003fdf06 	br	101286c <__register_exitproc+0x50>
 10128f0:	00804074 	movhi	r2,257
 10128f4:	109aef04 	addi	r2,r2,27580
 10128f8:	100b883a 	mov	r5,r2
 10128fc:	80805215 	stw	r2,328(r16)
 1012900:	003fd606 	br	101285c <__register_exitproc+0x40>
 1012904:	00800034 	movhi	r2,0
 1012908:	10800004 	addi	r2,r2,0
 101290c:	1000021e 	bne	r2,zero,1012918 <__register_exitproc+0xfc>
 1012910:	013fffc4 	movi	r4,-1
 1012914:	003fdc06 	br	1012888 <__register_exitproc+0x6c>
 1012918:	01006404 	movi	r4,400
 101291c:	103ee83a 	callr	r2
 1012920:	1007883a 	mov	r3,r2
 1012924:	103ffa26 	beq	r2,zero,1012910 <__register_exitproc+0xf4>
 1012928:	80805217 	ldw	r2,328(r16)
 101292c:	180b883a 	mov	r5,r3
 1012930:	18000115 	stw	zero,4(r3)
 1012934:	18800015 	stw	r2,0(r3)
 1012938:	80c05215 	stw	r3,328(r16)
 101293c:	18006215 	stw	zero,392(r3)
 1012940:	18006315 	stw	zero,396(r3)
 1012944:	0009883a 	mov	r4,zero
 1012948:	883fc826 	beq	r17,zero,101286c <__register_exitproc+0x50>
 101294c:	003fd706 	br	10128ac <__register_exitproc+0x90>

01012950 <register_fini>:
 1012950:	f800283a 	ret

01012954 <__call_exitprocs>:
 1012954:	00804074 	movhi	r2,257
 1012958:	10939104 	addi	r2,r2,20036
 101295c:	10800017 	ldw	r2,0(r2)
 1012960:	defff304 	addi	sp,sp,-52
 1012964:	df000b15 	stw	fp,44(sp)
 1012968:	d8800115 	stw	r2,4(sp)
 101296c:	00800034 	movhi	r2,0
 1012970:	10800004 	addi	r2,r2,0
 1012974:	1005003a 	cmpeq	r2,r2,zero
 1012978:	d8800215 	stw	r2,8(sp)
 101297c:	d8800117 	ldw	r2,4(sp)
 1012980:	dd400815 	stw	r21,32(sp)
 1012984:	dd000715 	stw	r20,28(sp)
 1012988:	10805204 	addi	r2,r2,328
 101298c:	dfc00c15 	stw	ra,48(sp)
 1012990:	ddc00a15 	stw	r23,40(sp)
 1012994:	dd800915 	stw	r22,36(sp)
 1012998:	dcc00615 	stw	r19,24(sp)
 101299c:	dc800515 	stw	r18,20(sp)
 10129a0:	dc400415 	stw	r17,16(sp)
 10129a4:	dc000315 	stw	r16,12(sp)
 10129a8:	282b883a 	mov	r21,r5
 10129ac:	2039883a 	mov	fp,r4
 10129b0:	d8800015 	stw	r2,0(sp)
 10129b4:	2829003a 	cmpeq	r20,r5,zero
 10129b8:	d8800117 	ldw	r2,4(sp)
 10129bc:	14405217 	ldw	r17,328(r2)
 10129c0:	88001026 	beq	r17,zero,1012a04 <__call_exitprocs+0xb0>
 10129c4:	ddc00017 	ldw	r23,0(sp)
 10129c8:	88800117 	ldw	r2,4(r17)
 10129cc:	8c802204 	addi	r18,r17,136
 10129d0:	143fffc4 	addi	r16,r2,-1
 10129d4:	80000916 	blt	r16,zero,10129fc <__call_exitprocs+0xa8>
 10129d8:	05bfffc4 	movi	r22,-1
 10129dc:	a000151e 	bne	r20,zero,1012a34 <__call_exitprocs+0xe0>
 10129e0:	8409883a 	add	r4,r16,r16
 10129e4:	2105883a 	add	r2,r4,r4
 10129e8:	1485883a 	add	r2,r2,r18
 10129ec:	10c02017 	ldw	r3,128(r2)
 10129f0:	a8c01126 	beq	r21,r3,1012a38 <__call_exitprocs+0xe4>
 10129f4:	843fffc4 	addi	r16,r16,-1
 10129f8:	85bff81e 	bne	r16,r22,10129dc <__call_exitprocs+0x88>
 10129fc:	d8800217 	ldw	r2,8(sp)
 1012a00:	10003126 	beq	r2,zero,1012ac8 <__call_exitprocs+0x174>
 1012a04:	dfc00c17 	ldw	ra,48(sp)
 1012a08:	df000b17 	ldw	fp,44(sp)
 1012a0c:	ddc00a17 	ldw	r23,40(sp)
 1012a10:	dd800917 	ldw	r22,36(sp)
 1012a14:	dd400817 	ldw	r21,32(sp)
 1012a18:	dd000717 	ldw	r20,28(sp)
 1012a1c:	dcc00617 	ldw	r19,24(sp)
 1012a20:	dc800517 	ldw	r18,20(sp)
 1012a24:	dc400417 	ldw	r17,16(sp)
 1012a28:	dc000317 	ldw	r16,12(sp)
 1012a2c:	dec00d04 	addi	sp,sp,52
 1012a30:	f800283a 	ret
 1012a34:	8409883a 	add	r4,r16,r16
 1012a38:	88c00117 	ldw	r3,4(r17)
 1012a3c:	2105883a 	add	r2,r4,r4
 1012a40:	1445883a 	add	r2,r2,r17
 1012a44:	18ffffc4 	addi	r3,r3,-1
 1012a48:	11800217 	ldw	r6,8(r2)
 1012a4c:	1c001526 	beq	r3,r16,1012aa4 <__call_exitprocs+0x150>
 1012a50:	10000215 	stw	zero,8(r2)
 1012a54:	303fe726 	beq	r6,zero,10129f4 <__call_exitprocs+0xa0>
 1012a58:	00c00044 	movi	r3,1
 1012a5c:	1c06983a 	sll	r3,r3,r16
 1012a60:	90804017 	ldw	r2,256(r18)
 1012a64:	8cc00117 	ldw	r19,4(r17)
 1012a68:	1884703a 	and	r2,r3,r2
 1012a6c:	10001426 	beq	r2,zero,1012ac0 <__call_exitprocs+0x16c>
 1012a70:	90804117 	ldw	r2,260(r18)
 1012a74:	1884703a 	and	r2,r3,r2
 1012a78:	10000c1e 	bne	r2,zero,1012aac <__call_exitprocs+0x158>
 1012a7c:	2105883a 	add	r2,r4,r4
 1012a80:	1485883a 	add	r2,r2,r18
 1012a84:	11400017 	ldw	r5,0(r2)
 1012a88:	e009883a 	mov	r4,fp
 1012a8c:	303ee83a 	callr	r6
 1012a90:	88800117 	ldw	r2,4(r17)
 1012a94:	98bfc81e 	bne	r19,r2,10129b8 <__call_exitprocs+0x64>
 1012a98:	b8800017 	ldw	r2,0(r23)
 1012a9c:	147fd526 	beq	r2,r17,10129f4 <__call_exitprocs+0xa0>
 1012aa0:	003fc506 	br	10129b8 <__call_exitprocs+0x64>
 1012aa4:	8c000115 	stw	r16,4(r17)
 1012aa8:	003fea06 	br	1012a54 <__call_exitprocs+0x100>
 1012aac:	2105883a 	add	r2,r4,r4
 1012ab0:	1485883a 	add	r2,r2,r18
 1012ab4:	11000017 	ldw	r4,0(r2)
 1012ab8:	303ee83a 	callr	r6
 1012abc:	003ff406 	br	1012a90 <__call_exitprocs+0x13c>
 1012ac0:	303ee83a 	callr	r6
 1012ac4:	003ff206 	br	1012a90 <__call_exitprocs+0x13c>
 1012ac8:	88800117 	ldw	r2,4(r17)
 1012acc:	1000081e 	bne	r2,zero,1012af0 <__call_exitprocs+0x19c>
 1012ad0:	89000017 	ldw	r4,0(r17)
 1012ad4:	20000726 	beq	r4,zero,1012af4 <__call_exitprocs+0x1a0>
 1012ad8:	b9000015 	stw	r4,0(r23)
 1012adc:	8809883a 	mov	r4,r17
 1012ae0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 1012ae4:	bc400017 	ldw	r17,0(r23)
 1012ae8:	883fb71e 	bne	r17,zero,10129c8 <__call_exitprocs+0x74>
 1012aec:	003fc506 	br	1012a04 <__call_exitprocs+0xb0>
 1012af0:	89000017 	ldw	r4,0(r17)
 1012af4:	882f883a 	mov	r23,r17
 1012af8:	2023883a 	mov	r17,r4
 1012afc:	883fb21e 	bne	r17,zero,10129c8 <__call_exitprocs+0x74>
 1012b00:	003fc006 	br	1012a04 <__call_exitprocs+0xb0>

01012b04 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1012b04:	defffd04 	addi	sp,sp,-12
 1012b08:	df000215 	stw	fp,8(sp)
 1012b0c:	df000204 	addi	fp,sp,8
 1012b10:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1012b14:	e0bfff17 	ldw	r2,-4(fp)
 1012b18:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1012b1c:	e0bffe17 	ldw	r2,-8(fp)
 1012b20:	1005003a 	cmpeq	r2,r2,zero
 1012b24:	1000021e 	bne	r2,zero,1012b30 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1012b28:	002af070 	cmpltui	zero,zero,43969
 1012b2c:	00000106 	br	1012b34 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1012b30:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1012b34:	e037883a 	mov	sp,fp
 1012b38:	df000017 	ldw	fp,0(sp)
 1012b3c:	dec00104 	addi	sp,sp,4
 1012b40:	f800283a 	ret

01012b44 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1012b44:	defffd04 	addi	sp,sp,-12
 1012b48:	dfc00215 	stw	ra,8(sp)
 1012b4c:	df000115 	stw	fp,4(sp)
 1012b50:	df000104 	addi	fp,sp,4
 1012b54:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 1012b58:	e13fff17 	ldw	r4,-4(fp)
 1012b5c:	1012b040 	call	1012b04 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1012b60:	003fff06 	br	1012b60 <_exit+0x1c>
 1012b64:	01012950 	cmplti	r4,zero,1189
